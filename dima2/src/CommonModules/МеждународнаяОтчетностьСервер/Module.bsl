
////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции, обеспечивающие работу генератора финансовых отчетов
//  для получения финансовой отчетности
////////////////////////////////////////////////////////////////////////////////

#Область ФормированиеКомплектовОтчетов

Процедура СформироватьКомплектОтчетов(Параметры, АдресХранилища) Экспорт
	
	ИдентификаторГлавногоХранилища = Параметры.ИдентификаторГлавногоХранилища;
	
	ВалютаМУ = МеждународнаяОтчетностьВызовСервера.УчетнаяВалюта();
	ДанныеЭкземпляров = Новый Соответствие;
	Для Каждого Экземпляр Из Параметры.ЭкземплярыОтчетов Цикл
		
		ВидОтчета = Экземпляр.Ключ;
		Параметры.Вставить("ДанныеРасшифровки", ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторГлавногоХранилища));
		Параметры.ВидОтчета = ВидОтчета;
		Параметры.ВыводитьКодСтроки = ВидОтчета.ВыводитьКодСтроки;
		Параметры.ВыводитьПримечание = ВидОтчета.ВыводитьПримечание;
		
		АдресДанныхОтчета = Экземпляр.Значение;
		РезультатВыполненияОтчета = МеждународнаяОтчетностьСервер.СформироватьОтчет(Параметры);
		ПоместитьВоВременноеХранилище(РезультатВыполненияОтчета, АдресДанныхОтчета);
		
		Параметры.РезультатОтчета = РезультатВыполненияОтчета.Результат;
		
		НовыйЭкземпляр = Документы.ЭкземплярФинансовогоОтчета.СоздатьДокумент();
		НовыйЭкземпляр.Дата = ТекущаяДатаСеанса();
		НовыйЭкземпляр.Ответственный = Пользователи.ТекущийПользователь();
		НовыйЭкземпляр.Заполнить(Параметры);
		Если Параметры.Ресурс = "Сумма" Тогда
			НовыйЭкземпляр.Валюта = ВалютаМУ.Функциональная;
		Иначе
			НовыйЭкземпляр.Валюта = ВалютаМУ.Представления;
		КонецЕсли;
		
		НовыйЭкземпляр.Записать();
		
		ДанныеЭкземпляров.Вставить(АдресДанныхОтчета, НастройкиОтчета(Параметры));
		
	КонецЦикла;// по видам отчета
	
	РезультатВыполненияФоновогоЗадания = Новый Структура;
	РезультатВыполненияФоновогоЗадания.Вставить("Выполнено", Истина);
	РезультатВыполненияФоновогоЗадания.Вставить("ПериодОтчета", Параметры.ПериодОтчета);
	РезультатВыполненияФоновогоЗадания.Вставить("Отбор", Параметры.Отбор);
	РезультатВыполненияФоновогоЗадания.Вставить("НаборОтчетов", Параметры.НаборОтчетов);
	РезультатВыполненияФоновогоЗадания.Вставить("ОткрытьФормы", Параметры.ОткрытьФормы);
	РезультатВыполненияФоновогоЗадания.Вставить("ДанныеЭкземпляров", ДанныеЭкземпляров);
	
	ПоместитьВоВременноеХранилище(РезультатВыполненияФоновогоЗадания, АдресХранилища);
	
КонецПроцедуры

Функция НастройкиОтчета(Параметры)
	
	// Настройки контекстного отчета
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	НовыеНастройки = Новый Структура;
	НовыеНастройки.Вставить("КомплектОтчетности", Параметры.КомплектОтчетности);
	НовыеНастройки.Вставить("ВидОтчета"         , Параметры.ВидОтчета);
	НовыеНастройки.Вставить("НачалоПериода"     , Параметры.ПериодОтчета.НачалоПериода);
	НовыеНастройки.Вставить("КонецПериода"      , Параметры.ПериодОтчета.КонецПериода);
	
	Список = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Параметры.Отбор.Организация) Тогда
		Список.Добавить(Параметры.Отбор.Организация);
	КонецЕсли;
	НовыеНастройки.Вставить("Организации"       , Список);
	
	Список = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Параметры.Отбор.Подразделение) Тогда
		Список.Добавить(Параметры.Отбор.Подразделение);
	КонецЕсли;
	НовыеНастройки.Вставить("Подразделения"       , Список);
	
	НовыеНастройки.Вставить("СуммыВТысячах"     , Параметры.СуммыВТысячах);
	НовыеНастройки.Вставить("ВыводитьЗаголовок" , Ложь);
	НовыеНастройки.Вставить("ВыводитьПодвал"    , Ложь);
	НовыеНастройки.Вставить("СкрыватьНастройкиПриФормированииОтчета", Ложь);
	НовыеНастройки.Вставить("ВидимостьПанелиНастроек", Истина);
	НовыеНастройки.Вставить("Ресурс"            , Параметры.Ресурс);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ДанныеОтчета", Новый ХранилищеЗначения(НовыеНастройки));
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

#КонецОбласти

#Область ФормированиеОтчетности

#Область ПроцедурыИФункцииПолученияНастроекОтчета

Функция СформироватьОтчет(Параметры, АдресХранилища = Неопределено) Экспорт
	
	КэшРеквизитов = Неопределено;
	ДеревоЭлементовОтчета = ОбновитьДеревоОтчета(Параметры.ВидОтчета,,КэшРеквизитов,Истина);
	Параметры.Вставить("КэшРеквизитов", КэшРеквизитов);
	Параметры.Вставить("СообщенияОбОшибках", Новый Массив);
	Параметры.Вставить("ДопСуффикс", "");
	Параметры.Вставить("БлокиОтчета", Новый Массив);
	Параметры.Вставить("ВидыЭлементов", Перечисления.ВидыЭлементовФинансовогоОтчета.Кэш());
	Параметры.Вставить("ФорматЗначений", "ЧЦ=10; ЧН=-; ЧО=0" + ?(Параметры.СуммыВТысячах,"; ЧС=3;",""));
	Параметры.Вставить("МаксКоличествоКолонок", 0);
	Параметры.Вставить("НачалоФормированияОтчета", ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера());
	
	РезультатВыполнения = Новый Структура;
	Замеры = Новый Структура("НаименованиеОтчета", Строка(Параметры.ВидОтчета));
	Если Параметры.Свойство("ДанныеПоказателя") Тогда
		РасшифровкаПроизводногоПоказателя(Параметры);
		РезультатВыполнения.Вставить("Результат", Параметры.Результат);
		Если ЗначениеЗаполнено(АдресХранилища) Тогда
			ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		КонецЕсли;
		Возврат РезультатВыполнения;
	Иначе
		Начало = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
		ОписаниеВидаОтчета(Параметры, ДеревоЭлементовОтчета);
		Замеры.Вставить("СборДанных", ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера() - Начало);
	КонецЕсли;
	Параметры.Удалить("ДопСуффикс");
	
	Начало = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	ДокументРезультат = ВывестиОтчет(Параметры, ДеревоЭлементовОтчета);
	
	Замеры.Вставить("ВыводОтчета", ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера() - Начало);
	Замеры.Вставить("ВсегоФормированиеОтчета",ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера() 
												- Параметры.НачалоФормированияОтчета);
	
	РезультатВыполнения.Вставить("СообщенияОбОшибках", Параметры.СообщенияОбОшибках);
	РезультатВыполнения.Вставить("Результат", ДокументРезультат);
	РезультатВыполнения.Вставить("Замеры", Замеры);
	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	Иначе
		Возврат РезультатВыполнения;
	КонецЕсли;
	
КонецФункции

Процедура ОписаниеВидаОтчета(Параметры, ДеревоЭлементовОтчета)
	
	ВидыЭлементов = Параметры.ВидыЭлементов;
	Если ТипЗнч(ДеревоЭлементовОтчета) = Тип("СтрокаДереваЗначений") Тогда
		Если ДеревоЭлементовОтчета.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВКолонках
			ИЛИ ДеревоЭлементовОтчета.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВСтроках
			ИЛИ ДеревоЭлементовОтчета.ВидЭлемента = ВидыЭлементов.ТаблицаСложная Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементОтчета Из ДеревоЭлементовОтчета.Строки Цикл
		
		Если ЭлементОтчета.ВидЭлемента = ВидыЭлементов.ЗаголовокОтчета
			ИЛИ ЭлементОтчета.ВидЭлемента = ВидыЭлементов.НередактируемыйТекст
			ИЛИ ЭлементОтчета.ВидЭлемента = ВидыЭлементов.РедактируемыйТекст Тогда
			ДобавитьТекстовыйБлок(Параметры, ЭлементОтчета);
			ОписаниеВидаОтчета(Параметры, ЭлементОтчета);
			
		ИначеЕсли ЭлементОтчета.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВКолонках
			ИЛИ ЭлементОтчета.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВСтроках
			ИЛИ ЭлементОтчета.ВидЭлемента = ВидыЭлементов.ТаблицаСложная Тогда
			ДобавитьТаблицу(Параметры, ЭлементОтчета);
			
		ИначеЕсли ЭтоПоказатель(ЭлементОтчета.ВидЭлемента, ЭлементОтчета.ЭтоСвязанный, ВидыЭлементов) Тогда
			ДобавитьПоказательОтчета(Параметры, ЭлементОтчета);
			
		КонецЕсли;
		
	КонецЦикла;// по строкам элемента отчета
	
КонецПроцедуры

Процедура ДобавитьТекстовыйБлок(Параметры, ЭлементОтчета)

	ПериодОтчета = Параметры.ПериодОтчета;
	ТекстЗаголовка = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(ЭлементОтчета.ЭлементОтчета,"Текст",Параметры.КэшРеквизитов);
	КомплектОтчетности = КомплектОтчетностиВидаОтчета(Параметры.ВидОтчета);
	ТекстШаблона = "[Комплект отчетов]";
	Если СтрНайти(ТекстЗаголовка, ТекстШаблона) > 0 Тогда
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,ТекстШаблона,Строка(КомплектОтчетности));
	КонецЕсли;
	
	ТекстШаблона = "[Вид отчета]";
	Если СтрНайти(ТекстЗаголовка, ТекстШаблона) > 0 Тогда
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,ТекстШаблона,Строка(Параметры.ВидОтчета));
	КонецЕсли;
	
	ТекстШаблона = "[Период отчетности]";
	Если СтрНайти(ТекстЗаголовка, ТекстШаблона) > 0 Тогда
		ПериодСтрокой = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПериодОтчета.НачалоПериода, ПериодОтчета.КонецПериода);
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,ТекстШаблона,СокрЛП(ПериодСтрокой));
	КонецЕсли;
	
	ТекстШаблона = "[Конечная дата периода отчета]";
	Если СтрНайти(ТекстЗаголовка, ТекстШаблона) > 0 Тогда
		КонецОтчета = Формат(ПериодОтчета.КонецПериода, "ДЛФ=DD");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,ТекстШаблона,Строка(КонецОтчета));
	КонецЕсли;
	
	ТекстШаблона = "[Организация]";
	Если СтрНайти(ТекстЗаголовка, ТекстШаблона) > 0 Тогда
		Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Организация") Тогда
			ЗначениеОтбора = Параметры.Отбор.Организация;
			
			Организации = Новый Массив;
			Если ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") Тогда
				Организации.Добавить(ЗначениеОтбора);
			ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
				Организации = ЗначениеОтбора;
			ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
				Организации = ЗначениеОтбора.ВыгрузитьЗначения();
			КонецЕсли;
			
			ИмяОрганизации = "";
			ИменаРеквизитов = "Наименование,НаименованиеСокращенное,НаименованиеПолное";
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Организации, ИменаРеквизитов);
			
			Для Каждого Организация Из Реквизиты Цикл
				ИмяОрганизации = ИмяОрганизации + ?(ПустаяСтрока(ИмяОрганизации),"",", ");
				ИмяОрганизации = ИмяОрганизации + Организация.Значение.НаименованиеСокращенное;
			КонецЦикла;
			
		КонецЕсли; // Есть отбор по организации
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,ТекстШаблона,ИмяОрганизации);
	КонецЕсли;
	
	Данные = Новый Структура("Текст", ТекстЗаголовка);
	ДобавитьОписаниеБлокаОтчета(Параметры, ЭлементОтчета, Данные);

КонецПроцедуры

Процедура ДобавитьТаблицу(Параметры, ЭлементОтчета)
	
	ИдентификаторТаблицы = ИдентификаторЭлемента(ЭлементОтчета);
	ДеревоТаблицы = ЭлементОтчета;
	Если ДеревоТаблицы.ЭтоСвязанный Тогда
		СвязаннаяТаблица = ОбновитьДеревоОтчета(ЭлементОтчета.СвязанныйЭлемент.Владелец, ЭлементОтчета.СвязанныйЭлемент);
		ДеревоТаблицы = СвязаннаяТаблица.Строки[0];
	КонецЕсли;
	
	ДанныеТаблицы = ПодготовитьДанныеТаблицы(ДеревоТаблицы, Параметры);
	
	Если Параметры.ВыводитьПримечание Тогда
		НоваяСтрока = ДанныеТаблицы.КолонкиОтчета.Вставить(0);
		НоваяСтрока.ИмяКолонки = "Примечание";
		НоваяСтрока.УровеньИтога = -1;
	КонецЕсли;
	
	Если Параметры.ВыводитьКодСтроки Тогда
		НоваяСтрока = ДанныеТаблицы.КолонкиОтчета.Вставить(0);
		НоваяСтрока.ИмяКолонки = "КодСтрокиОтчета";
		НоваяСтрока.УровеньИтога = -1;
	КонецЕсли;
	
	Параметры.МаксКоличествоКолонок = Макс(Параметры.МаксКоличествоКолонок, ДанныеТаблицы.КолонкиОтчета.Количество());
	ДобавитьОписаниеБлокаОтчета(Параметры, ЭлементОтчета, ДанныеТаблицы);
	Параметры.ПериодОтчета.Периодичность.Очистить();
	
КонецПроцедуры

Процедура ДобавитьПоказательОтчета(Параметры, ЭлементОтчета)
	
	ПараметрыПоказателя = ПараметрыПолученияПоказателя(Параметры);
	ПараметрыПоказателя.Показатель = ЭлементОтчета;
	
	ЗначениеПоказателя = ЗначениеПоказателяОтчета(ПараметрыПоказателя);
	
	РасшифровкаЯчейки = Новый Структура("ДатаНачала, ДатаОкончания, ВидЭлемента, СчетПланаСчетов, НемонетарныйПоказатель");
	ЗаполнитьЗначенияСвойств(РасшифровкаЯчейки, ЭлементОтчета);
	РасшифровкаЯчейки.ДатаНачала = Параметры.ПериодОтчета.НачалоПериода;
	РасшифровкаЯчейки.ДатаОкончания = Параметры.ПериодОтчета.КонецПериода;
	РасшифровкаЯчейки.Вставить("Показатель", ЭлементОтчета.ЭлементОтчета);
	
	Данные = Новый Структура("ВыделитьЭлемент,ЭтоСвязанный");
	ЗаполнитьЗначенияСвойств(Данные,ЭлементОтчета);
	Данные.Вставить("Расшифровка", РасшифровкаЯчейки);
	Данные.Вставить("Значение", ЗначениеПоказателя[0].Значение);
	
	ДобавитьОписаниеБлокаОтчета(Параметры, ЭлементОтчета, Данные);
	
КонецПроцедуры

Функция ПодготовитьДанныеТаблицы(ДеревоТаблицы, Параметры)
	
	ЭтоПроизвольная = ДеревоТаблицы.ВидЭлемента = Параметры.ВидыЭлементов.ТаблицаСложная;
	ТаблицаПоказателиВКолонках = ДеревоТаблицы.ВидЭлемента = Параметры.ВидыЭлементов.ТаблицаПоказателиВКолонках;
	ОписаниеТаблицы = ОписаниеТаблицы(ЭтоПроизвольная, ТаблицаПоказателиВКолонках);
	ОписаниеТаблицы.Вставить("ВидыЭлементов", Параметры.ВидыЭлементов);
	
	ДеревоГоризонтальныхИтогов = ОписаниеТаблицы.ДеревоКолонок.Скопировать();
	ЗаполнитьОписаниеТаблицы(ДеревоТаблицы, ОписаниеТаблицы, Параметры);
	
	ЗначенияПоказателей = ОписаниеТаблицы.ЗначенияПоказателей;
	Для Каждого Измерение Из ОписаниеТаблицы.ИзмеренияСтрок Цикл
		ЗначенияПоказателей.Колонки.Добавить(Измерение);
	КонецЦикла;
	Если ЭтоПроизвольная Тогда
		ЗначенияПоказателей.Колонки.Добавить("СтрокаТаблицы");
	КонецЕсли;
	Если ТаблицаПоказателиВКолонках Тогда
		ЗначенияПоказателей.Колонки.Добавить("ДатаНачала");
		ЗначенияПоказателей.Колонки.Добавить("ДатаОкончания");
	КонецЕсли;
	
	ВыборкаПоказателей = ЗначенияПоказателейТаблицы(Параметры, ОписаниеТаблицы);
	СформироватьДеревоГоризонтальныхИтогов(ОписаниеТаблицы.ДеревоКолонок, ВыборкаПоказателей, ОписаниеТаблицы, ДеревоГоризонтальныхИтогов);
	ОпределитьСоставОперандовГоризонтальныхИтогов(ДеревоГоризонтальныхИтогов, ОписаниеТаблицы);
	
	Для Каждого Показатель Из ОписаниеТаблицы.Показатели Цикл
		
		ОписаниеТаблицы.ТекущийПоказатель = Показатель.Значение.Описание;
		Если ОписаниеТаблицы.ЭтоПроизвольная Тогда
			ОписаниеТаблицы.СтрокаПоказателя = Показатель.Значение.Строка;
			ОписаниеТаблицы.КолонкаПоказателя = Показатель.Значение.Колонка;
		КонецЕсли;
		Отбор = Новый Структура("Показатель", Показатель.Ключ);
		ЗначениеПоказателя = ВыборкаПоказателей.Скопировать(Отбор);
		
		// Дополним таблицу показателя колонками группировок строк
		Если ЭтоПроизвольная Тогда
			ВертикальныеГруппировки = ОписаниеТаблицы.ВертикальныеГруппировки[Показатель.Значение.Строка];
		Иначе
			ВертикальныеГруппировки = ОписаниеТаблицы.ВертикальныеГруппировки[Показатель.Значение.Описание.ЭлементОтчета];
		КонецЕсли;
		
		Если ТаблицаПоказателиВКолонках Тогда
			ЗагрузитьЗначенияПоказателяВКолонку(ЗначениеПоказателя, ОписаниеТаблицы);
		Иначе
			ЗагрузитьЗначенияПоказателяВСтроку(ЗначениеПоказателя, ВертикальныеГруппировки, ОписаниеТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПоказателиВКолонках Тогда
		РассчитатьГоризонтальныеИтоги(ОписаниеТаблицы);
	КонецЕсли;
	
	// Рассчитать итоги строк
	ДеревоВертикальныхИтогов = ОписаниеТаблицы.ДеревоСтрок.Скопировать();
	ДеревоВертикальныхИтогов.Строки.Очистить();
	ТипЧисло = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	Для Каждого Имя Из ОписаниеТаблицы.Ресурсы Цикл
		ДеревоВертикальныхИтогов.Колонки.Добавить(Имя, ТипЧисло);
	КонецЦикла;
	СформироватьДеревоВертикальныхИтогов(ОписаниеТаблицы.ДеревоСтрок, ОписаниеТаблицы, ДеревоВертикальныхИтогов);
	ОписаниеТаблицы.Вставить("ДеревоСтрок", ДеревоВертикальныхИтогов);
	
	// Вернем только необходимое
	ДанныеНаПечать = ДанныеТаблицыНаПечать();
	ЗаполнитьЗначенияСвойств(ДанныеНаПечать, ОписаниеТаблицы);
	Возврат ДанныеНаПечать;
	
КонецФункции

Функция ЗначенияПоказателейТаблицы(Параметры, ОписаниеТаблицы)
	
	ЗначенияПоказателей = ОписаниеТаблицы.ЗначенияПоказателей;
	ПараметрыПоказателя = ПараметрыПолученияПоказателя(Параметры, ОписаниеТаблицы);
	ВыборкаПоказателей = Неопределено;
	Для Каждого Показатель Из ОписаниеТаблицы.Показатели Цикл
		
		ПараметрыПоказателя.Показатель = Показатель.Значение.Описание;
		ЗначениеПоказателя = ЗначениеПоказателяОтчета(ПараметрыПоказателя);
		Если ПараметрыПоказателя.Свойство("ОшибкаРасчета") Тогда
			ПараметрыПоказателя.Удалить("ОшибкаРасчета");
		КонецЕсли;
		
		Если ВыборкаПоказателей = Неопределено Тогда
			ВыборкаПоказателей = ЗначениеПоказателя.Скопировать();
		КонецЕсли;
		
		// Дополним таблицу показателя колонками группировок строк
		Если ОписаниеТаблицы.ЭтоПроизвольная Тогда
			ВертикальныеГруппировки = ОписаниеТаблицы.ВертикальныеГруппировки[Показатель.Значение.Строка];
		Иначе
			ВертикальныеГруппировки = ОписаниеТаблицы.ВертикальныеГруппировки[Показатель.Значение.Описание.ЭлементОтчета];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВертикальныеГруппировки) Тогда
			Для Каждого Группировка Из ВертикальныеГруппировки Цикл
				Если ЗначенияПоказателей.Колонки.Найти(Группировка.Ключ) = Неопределено Тогда
					ЗначенияПоказателей.Колонки.Добавить(Группировка.Ключ);
					ВыборкаПоказателей.Колонки.Добавить(Группировка.Ключ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ВыборкаПоказателей, ЗначениеПоказателя);
		
	КонецЦикла;
	
	ИменаКолонок = "";
	Для Каждого Колонка Из ВыборкаПоказателей.Колонки Цикл
		ИменаКолонок = ИменаКолонок + Колонка.Имя + ",";
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ИменаКолонок, 1);
	ВыборкаПоказателей.Свернуть(ИменаКолонок);
	
	СтрокаСортировки = "";
	Для Каждого Период Из Параметры.ПериодОтчета.Периодичность Цикл
		СтрокаСортировки = СтрокаСортировки + ?(ПустаяСтрока(СтрокаСортировки),"",",")
		+ Период.ИмяКолонки +" "+Период.Сортировка;
	КонецЦикла;
	Если СтрокаСортировки <> "" Тогда
		ВыборкаПоказателей.Сортировать(СтрокаСортировки);
	КонецЕсли;
	
	Возврат ВыборкаПоказателей;
	
КонецФункции

// Заполняет структуру таблицы отчета.
// Из дерева таблицы рекурсивно получает параметры необходимые для постороения таблицы.
Процедура ЗаполнитьОписаниеТаблицы(ДеревоТаблицы, ЭлементыТаблицы, Параметры, ЭтоКолонки = Ложь)
	
	ЭтоСвязаннаяГруппа = Ложь;
	ВидыЭлементов = Параметры.ВидыЭлементов;
	Для Каждого Элемент Из ДеревоТаблицы.Строки Цикл
		
		ЭтоПоказатель = ЭтоПоказатель(Элемент.ВидЭлемента, Элемент.ЭтоСвязанный, ВидыЭлементов);
		ИдентификаторЭлемента = ИдентификаторЭлемента(Элемент) + Параметры.ДопСуффикс;
		
		Если Элемент.ВидЭлемента = ВидыЭлементов.Измерение Тогда
			
			ДобавитьЭлементТаблицыИзмерение(ЭлементыТаблицы, Элемент, Параметры.ДопСуффикс, ЭтоКолонки);
			
		ИначеЕсли Элемент.ВидЭлемента = ВидыЭлементов.Группа Тогда
			
			Если Элемент.ЭтоСвязанный Тогда// по ссылке получить оригинальное дерево
				СвязанноеДерево = ОбновитьДеревоОтчета(Элемент.СвязанныйЭлемент.Владелец, Элемент.СвязанныйЭлемент);
				Если СвязанноеДерево.Строки.Количество() > 0 Тогда
					ОписаниеГруппы = СвязанноеДерево.Строки[0];
					Параметры.ДопСуффикс = Параметры.ДопСуффикс + "X";
					// Грубый контроль зацикливания
					Если ОписаниеГруппы.ВидОтчета = Параметры.ВидОтчета Тогда
						Продолжить;
					КонецЕсли;
					Элемент = ОписаниеГруппы;
					ЭтоСвязаннаяГруппа = Истина;
					ИдентификаторЭлемента = ИдентификаторЭлемента(Элемент) + Параметры.ДопСуффикс;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;// ЭтоСвязанный
			ДобавитьВДеревоВывода(ЭлементыТаблицы, Элемент, ИдентификаторЭлемента);
			ЭлементыТаблицы.ТекущиеГруппировки.Вставить(ИдентификаторЭлемента, Элемент.ЭлементОтчета);
			
		ИначеЕсли ЭтоПоказатель Тогда
			
			ЭлементыТаблицы.Показатели.Вставить(Элемент.ЭлементОтчета, Новый Структура("Описание", Элемент));
			Если НЕ ЭтоКолонки Тогда
				Родители = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ЭлементыТаблицы.ТекущиеГруппировки);
				ЭлементыТаблицы.ВертикальныеГруппировки.Вставить(Элемент.ЭлементОтчета, Родители);
			КонецЕсли;
			ДобавитьВДеревоВывода(ЭлементыТаблицы, Элемент, ИдентификаторЭлемента);
			
		ИначеЕсли Элемент.ВидЭлемента = ВидыЭлементов.ИтогПоГруппе И НЕ Элемент.ЭтоСвязанный Тогда
			
			ИдентификаторИтога = "Итог"+ИдентификаторЭлемента(Элемент.Родитель) + Параметры.ДопСуффикс;
			ДобавитьВДеревоВывода(ЭлементыТаблицы, Элемент, ИдентификаторИтога, , ДеревоТаблицы.Строки.Индекс(Элемент));
			
		ИначеЕсли Элемент.ВидЭлемента = ВидыЭлементов.ЭлементТаблицы Тогда
			
			Если НЕ ЭтоКолонки Тогда
				Родители = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ЭлементыТаблицы.ТекущиеГруппировки);
				ЭлементыТаблицы.ВертикальныеГруппировки.Вставить(Элемент.ЭлементОтчета, Родители);
			КонецЕсли;
			ДобавитьВДеревоВывода(ЭлементыТаблицы, Элемент, ИдентификаторЭлемента);
			
		ИначеЕсли Элемент.ВидЭлемента = ВидыЭлементов.Колонки Тогда
			
			ЭтоКолонки = Истина;
			ЭлементыТаблицы.ТекущийУровень = ЭлементыТаблицы.ДеревоКолонок.Строки;
			
		ИначеЕсли Элемент.ВидЭлемента = ВидыЭлементов.Строки Тогда
			
			ЭтоКолонки = Ложь;
			ЭлементыТаблицы.ТекущийУровень = ЭлементыТаблицы.ДеревоСтрок.Строки;
			
		ИначеЕсли Элемент.ВидЭлемента = Параметры.ВидыЭлементов.НастройкаЯчеек Тогда
			
			ПоказателиПроизвольнойТаблицы(Элемент, ЭлементыТаблицы, Параметры, ЭтоКолонки);
			
		КонецЕсли;
		
		Если НЕ ЭтоПоказатель И Элемент.ВидЭлемента <> ВидыЭлементов.НастройкаЯчеек Тогда
			ЗаполнитьОписаниеТаблицы(Элемент, ЭлементыТаблицы, Параметры, ЭтоКолонки);
		КонецЕсли;
		
		Если Элемент.ВидЭлемента = ВидыЭлементов.Группа И ЭтоСвязаннаяГруппа Тогда
			Параметры.ДопСуффикс = Лев(Параметры.ДопСуффикс,СтрДлина(Параметры.ДопСуффикс)-1);
		КонецЕсли;
		
		Если Элемент.ВидЭлемента = ВидыЭлементов.Измерение ИЛИ Элемент.ВидЭлемента = ВидыЭлементов.Группа Тогда
			ЭлементыТаблицы.ТекущиеГруппировки.Удалить(ИдентификаторЭлемента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементыТаблицы.ТекущийРодитель) Тогда
			Родитель = ЭлементыТаблицы.ТекущийРодитель.Родитель;
			ЭлементыТаблицы.ТекущийРодитель = Родитель;
			Если Родитель = Неопределено И ЭтоКолонки Тогда
				ТекущийУровень = ЭлементыТаблицы.ДеревоКолонок.Строки;
			ИначеЕсли Родитель = Неопределено И НЕ ЭтоКолонки Тогда
				ТекущийУровень = ЭлементыТаблицы.ДеревоСтрок.Строки;
			Иначе
				ТекущийУровень = Родитель.Строки;
			КонецЕсли;
			ЭлементыТаблицы.ТекущийУровень = ТекущийУровень;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьЗначенияПоказателяВКолонку(ВыборкаПоказателя, ОписаниеТаблицы)
	
	Колонка = ОписаниеТаблицы.КолонкиОтчета.Найти(ОписаниеТаблицы.ТекущийПоказатель.ЭлементОтчета, "ЭлементОтчета");
	Если Колонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеТаблицы.СтрокаРесурсов = Неопределено Тогда
		ОписаниеТаблицы.СтрокаРесурсов = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ОписаниеТаблицы.Ресурсы);
	КонецЕсли;
	
	ЗначенияПоказателя = ОписаниеТаблицы.ЗначенияПоказателей.СкопироватьКолонки();
	ЗаполнитьРасшифровку = Ложь;
	ПериодыЗначений = Новый Соответствие;
	Для Каждого Ячейка Из ВыборкаПоказателя Цикл
		Период = Новый Структура("ДатаНачала,ДатаОкончания",Ячейка.ДатаНачала, Ячейка.ДатаОкончания);
		ПериодыЗначений.Вставить(Колонка.ИмяКолонки, Период);
		
		НоваяСтрокаЗначений = ЗначенияПоказателя.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗначений, Ячейка);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗначений, ОписаниеТаблицы.ТекущийПоказатель);
		НоваяСтрокаЗначений[Колонка.ИмяКолонки] = Ячейка.Значение;
		Для Каждого Измерение Из ОписаниеТаблицы.ИзмеренияСтрок Цикл
			ИдСтрокиОтчета = Ячейка[Измерение];
			ЗаполнитьРасшифровкуЯчейки(ИдСтрокиОтчета, Колонка, ОписаниеТаблицы, ПериодыЗначений);
		КонецЦикла;
	КонецЦикла;
	Группировка = "ДатаНачала,ДатаОкончания";
	Для Каждого Измерение Из ОписаниеТаблицы.ИзмеренияТаблицы Цикл
		Группировка = Группировка + "," + Измерение;
	КонецЦикла;
	ЗагрузитьВТаблицуЗначений(ЗначенияПоказателя, ОписаниеТаблицы.ЗначенияПоказателей);
	ОписаниеТаблицы.ЗначенияПоказателей.Свернуть(Группировка, ОписаниеТаблицы.СтрокаРесурсов);
	
КонецПроцедуры

Процедура ЗагрузитьЗначенияПоказателяВСтроку(ВыборкаПоказателя, ГруппировкиПоказателя, ОписаниеТаблицы)
	
	ВидыЭлементов = ОписаниеТаблицы.ВидыЭлементов;
	Отбор = Новый Структура("УровеньИтога", -2);
	ДетальныеКолонки = ОписаниеТаблицы.КолонкиОтчета.НайтиСтроки(Отбор);
	ПериодыЗначений = Новый Соответствие;
	ЗначенияПоказателя = ОписаниеТаблицы.ЗначенияПоказателей.СкопироватьКолонки();
	ЭтотПоказатель = ОписаниеТаблицы.ТекущийПоказатель.ЭлементОтчета;
	Если ОписаниеТаблицы.ЭтоПроизвольная Тогда
		ЭтотПоказатель = ОписаниеТаблицы.СтрокаПоказателя;
	КонецЕсли;
	
	// Заполнить детальные колонки строки
	Для Каждого Колонка Из ДетальныеКолонки Цикл
		
		Если ЗначениеЗаполнено(Колонка.Отбор) Тогда
			ЗначенияКолонки = ВыборкаПоказателя.НайтиСтроки(Колонка.Отбор);
		Иначе
			ЗначенияКолонки = ВыборкаПоказателя;
		КонецЕсли;
		ЗаполнитьРасшифровку = Ложь;
		Для Каждого Ячейка Из ЗначенияКолонки Цикл
			Период = Новый Структура("ДатаНачала,ДатаОкончания",Ячейка.ДатаНачала, Ячейка.ДатаОкончания);
			ПериодыЗначений.Вставить(Колонка.ИмяКолонки, Период);
			
			НоваяСтрокаЗначений = ЗначенияПоказателя.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗначений, Ячейка);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗначений, ОписаниеТаблицы.ТекущийПоказатель);
			Если ОписаниеТаблицы.ЭтоПроизвольная И Колонка.ЭлементОтчета = ОписаниеТаблицы.КолонкаПоказателя
				ИЛИ НЕ ОписаниеТаблицы.ЭтоПроизвольная Тогда
				НоваяСтрокаЗначений[Колонка.ИмяКолонки] = Ячейка.Значение;
				ЗаполнитьРасшифровку = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЗаполнитьРасшифровку Тогда
			ЗаполнитьРасшифровкуЯчейки(ЭтотПоказатель, Колонка, ОписаниеТаблицы, ПериодыЗначений);
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеТаблицы.СтрокаРесурсов = Неопределено Тогда
		ОписаниеТаблицы.СтрокаРесурсов = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ОписаниеТаблицы.Ресурсы);
	КонецЕсли;
	
	Группировка = "ЭлементОтчета,НаименованиеДляПечати,КодСтрокиОтчета,Примечание";
	Для Каждого Измерение Из ОписаниеТаблицы.ИзмеренияСтрок Цикл
		Группировка = Группировка + "," + Измерение;
	КонецЦикла;
	Если ЗначениеЗаполнено(ГруппировкиПоказателя) Тогда
		Для Каждого ЗначениеГруппировки Из ГруппировкиПоказателя Цикл
			Группировка = Группировка + "," + ЗначениеГруппировки.Ключ;
			ЗначенияПоказателя.ЗаполнитьЗначения(ЗначениеГруппировки.Значение, ЗначениеГруппировки.Ключ);
		КонецЦикла;
	КонецЕсли;
	ЗначенияПоказателя.Свернуть(Группировка, ОписаниеТаблицы.СтрокаРесурсов);
	Если ОписаниеТаблицы.ЭтоПроизвольная Тогда
		ЗначенияПоказателя.Колонки.Добавить("СтрокаТаблицы");
		ЗначенияПоказателя.ЗаполнитьЗначения(ОписаниеТаблицы.СтрокаПоказателя, "СтрокаТаблицы");
	КонецЕсли;
	
	// Рассчитать итоги строки
	Отбор = Новый Структура("УровеньИтога");
	УровеньИтога = ОписаниеТаблицы.ВсегоУровнейКолонок;
	Для Сч = 0 По ОписаниеТаблицы.ВсегоУровнейКолонок Цикл
		
		Отбор.УровеньИтога = УровеньИтога;
		КолонкиИтога = ОписаниеТаблицы.КолонкиОтчета.НайтиСтроки(Отбор);
		Для Каждого Колонка Из КолонкиИтога Цикл
			Для Каждого СтрокаЗначений Из ЗначенияПоказателя Цикл
				СтрокаЗначений[Колонка.ИмяКолонки] = ИтогПоСтроке(СтрокаЗначений, Колонка, ПериодыЗначений);
			КонецЦикла;
			Если ЗначенияПоказателя.Количество() Тогда
				ЗаполнитьРасшифровкуЯчейки(ЭтотПоказатель, Колонка, ОписаниеТаблицы, ПериодыЗначений);
			КонецЕсли;
		КонецЦикла;
		УровеньИтога = УровеньИтога - 1;
		
	КонецЦикла;
	
	ЗагрузитьВТаблицуЗначений(ЗначенияПоказателя, ОписаниеТаблицы.ЗначенияПоказателей);
	
КонецПроцедуры

Процедура РассчитатьГоризонтальныеИтоги(ОписаниеТаблицы)
	
	ЗначенияПоказателей = ОписаниеТаблицы.ЗначенияПоказателей;
	ПериодыЗначений = Новый Соответствие;
	
	Отбор = Новый Структура("УровеньИтога");
	УровеньИтога = ОписаниеТаблицы.ВсегоУровнейКолонок-1;
	Для Сч = 0 По ОписаниеТаблицы.ВсегоУровнейКолонок-1 Цикл
		
		Отбор.УровеньИтога = УровеньИтога;
		КолонкиИтога = ОписаниеТаблицы.КолонкиОтчета.НайтиСтроки(Отбор);
		Для Каждого Колонка Из КолонкиИтога Цикл
			Если НЕ Колонка.Операнды.Количество() Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаЗначений Из ЗначенияПоказателей Цикл
				Период = Новый Структура("ДатаНачала,ДатаОкончания",СтрокаЗначений.ДатаНачала, СтрокаЗначений.ДатаОкончания);
				ПериодыЗначений.Вставить(Колонка.ИмяКолонки, Период);
				СтрокаЗначений[Колонка.ИмяКолонки] = ИтогПоСтроке(СтрокаЗначений, Колонка, ПериодыЗначений);
			КонецЦикла;
		КонецЦикла;
		УровеньИтога = УровеньИтога - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДеревоГоризонтальныхИтогов(ДеревоКолонок, ВыборкаЗначений, ОписаниеТаблицы, КолонкаОтчета, Отбор = Неопределено, Знач КолонкиГруппировки = "")
	
	Если НЕ ЗначениеЗаполнено(Отбор) Тогда
		Отбор = Новый Структура;
		ОписаниеТаблицы.НомерКолонки = 1;
		Данные = ВыборкаЗначений.Скопировать();
	Иначе
		Данные = ВыборкаЗначений.Скопировать(Отбор);
	КонецЕсли;
	
	ВидыЭлементов = ОписаниеТаблицы.ВидыЭлементов;
	ЗначенияПоказателей = ОписаниеТаблицы.ЗначенияПоказателей;
	ПредставлениеПериодаНаименование = Перечисления.ПредставлениеПериода.Наименование;
	Для Каждого Колонка Из ДеревоКолонок.Строки Цикл
		
		Если Колонка.ВидЭлемента = ВидыЭлементов.Группа Тогда
			НоваяКолонкаОтчета = КолонкаОтчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКолонкаОтчета, Колонка);
			СформироватьДеревоГоризонтальныхИтогов(Колонка, ВыборкаЗначений, ОписаниеТаблицы, НоваяКолонкаОтчета, Отбор, КолонкиГруппировки);
			Если НоваяКолонкаОтчета <> КолонкаОтчета И ТипЗнч(КолонкаОтчета) = Тип("СтрокаДереваЗначений") Тогда
				КолонкаОтчета.ПодчиненныхЭлементов = КолонкаОтчета.ПодчиненныхЭлементов + НоваяКолонкаОтчета.ПодчиненныхЭлементов;
			КонецЕсли;
			
		ИначеЕсли Колонка.ВидЭлемента = ВидыЭлементов.ИтогПоГруппе И Колонка.ВыводитьЗаголовокЭлемента Тогда
			Если ТипЗнч(КолонкаОтчета) = Тип("СтрокаДереваЗначений") Тогда
				КолонкаОтчета.ПодчиненныхЭлементов = КолонкаОтчета.ПодчиненныхЭлементов + 1;
			КонецЕсли;
			НоваяКолонкаОтчета = КолонкаОтчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКолонкаОтчета, Колонка);
			ИмяКолонки = Колонка.ИдентификаторЭлемента + "_" + Строка(ОписаниеТаблицы.НомерКолонки);
			ДобавитьКолонкуТаблицы(ИмяКолонки, НоваяКолонкаОтчета, Отбор, ОписаниеТаблицы, Истина);
			
		ИначеЕсли Колонка.ВидЭлемента = ВидыЭлементов.Измерение Тогда
			КолонкиГруппировки = КолонкиГруппировки + ?(ПустаяСтрока(КолонкиГруппировки),"",",") + Колонка.ИмяКолонки;
			Данные.Свернуть(КолонкиГруппировки);
			Для Каждого ДанныеКолонки Из Данные Цикл
				
				ЗначениеИзмерения = ДанныеКолонки[Колонка.ИмяКолонки];
				НоваяКолонкаОтчета = КолонкаОтчета.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяКолонкаОтчета, Колонка);
				Если Колонка.ПредставлениеПериода = ПредставлениеПериодаНаименование Тогда
					НоваяКолонкаОтчета.НаименованиеДляПечати = ФинансоваяОтчетностьСервер.ПредставлениеИнтервала(
																	ЗначениеИзмерения,Колонка.Периодичность);
				Иначе
					НоваяКолонкаОтчета.НаименованиеДляПечати = Формат(ЗначениеИзмерения, "ДЛФ=DD");
				КонецЕсли;
				Если Колонка.Строки.Количество() Тогда
					Отбор.Вставить(Колонка.ИмяКолонки, ЗначениеИзмерения);
					СформироватьДеревоГоризонтальныхИтогов(Колонка, ВыборкаЗначений, ОписаниеТаблицы, НоваяКолонкаОтчета, Отбор, КолонкиГруппировки);
					Если ТипЗнч(КолонкаОтчета) = Тип("СтрокаДереваЗначений") Тогда
						КолонкаОтчета.ПодчиненныхЭлементов = КолонкаОтчета.ПодчиненныхЭлементов + НоваяКолонкаОтчета.ПодчиненныхЭлементов;
					КонецЕсли;
					Отбор.Удалить(Колонка.ИмяКолонки);
					
				Иначе
					Если ТипЗнч(КолонкаОтчета) = Тип("СтрокаДереваЗначений") Тогда
						КолонкаОтчета.ПодчиненныхЭлементов = КолонкаОтчета.ПодчиненныхЭлементов + 1;
					КонецЕсли;
					ИмяКолонки = Колонка.ИмяКолонки + Строка(ОписаниеТаблицы.НомерКолонки);
					Отбор.Вставить(Колонка.ИмяКолонки, ЗначениеИзмерения);
					ДобавитьКолонкуТаблицы(ИмяКолонки, НоваяКолонкаОтчета, Отбор, ОписаниеТаблицы);
					Отбор.Удалить(Колонка.ИмяКолонки);
					
				КонецЕсли;
				
			КонецЦикла;// по уникальным значениям текущего измерения
			
		Иначе
			НоваяКолонкаОтчета = КолонкаОтчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКолонкаОтчета, Колонка);
			Если ТипЗнч(КолонкаОтчета) = Тип("СтрокаДереваЗначений") Тогда
				КолонкаОтчета.ПодчиненныхЭлементов = КолонкаОтчета.ПодчиненныхЭлементов + 1;
			КонецЕсли;
			ИмяКолонки = Колонка.ИдентификаторЭлемента + "_" + Строка(ОписаниеТаблицы.НомерКолонки);
			ДобавитьКолонкуТаблицы(ИмяКолонки, НоваяКолонкаОтчета, Отбор, ОписаниеТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкуТаблицы(ИмяКолонки, НоваяКолонкаОтчета, Отбор, ОписаниеТаблицы, ЭтоИтог = Ложь)
	
	ЗначенияПоказателей = ОписаниеТаблицы.ЗначенияПоказателей;
	
	НоваяКолонкаОтчета.ИмяКолонки = ИмяКолонки;
	Если ЗначенияПоказателей.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипЧисло = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	ЗначенияПоказателей.Колонки.Добавить(ИмяКолонки, ТипЧисло, НоваяКолонкаОтчета.НаименованиеДляПечати);
	
	ОписаниеКолонки = ОписаниеТаблицы.КолонкиОтчета.Добавить();
	ЗаполнитьЗначенияСвойств(ОписаниеКолонки, НоваяКолонкаОтчета);
	УровеньИтога = ?(ЭтоИтог,НоваяКолонкаОтчета.Уровень() - 1,-2);
	ОписаниеКолонки.УровеньИтога = УровеньИтога;
	ОписаниеКолонки.ИмяКолонки = ИмяКолонки;
	ОписаниеКолонки.Операнды = Новый Массив;
	ОписаниеКолонки.Отбор = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Отбор);
	ОписаниеКолонки.ЭтоИтог = ЭтоИтог;
	
	НоваяКолонкаОтчета.Описание = ОписаниеКолонки;
	
	ОписаниеТаблицы.Ресурсы.Добавить(ИмяКолонки);
	ОписаниеТаблицы.ВсегоУровнейКолонок = Макс(УровеньИтога, ОписаниеТаблицы.ВсегоУровнейКолонок);
	ОписаниеТаблицы.НомерКолонки = ОписаниеТаблицы.НомерКолонки + 1;
	
КонецПроцедуры

Функция НайтиРодительскийИтог(Знач ВеткаДерева, ВидЭлементаИтог)
	
	ИмяКолонки = ВеткаДерева.ИмяКолонки;
	Пока ЗначениеЗаполнено(ВеткаДерева) Цикл
		Итог = ВеткаДерева.Строки.Найти(ВидЭлементаИтог,"ВидЭлемента");
		Если ЗначениеЗаполнено(Итог) И Итог.ИмяКолонки <> ИмяКолонки Тогда
			Прервать;
		ИначеЕсли ЗначениеЗаполнено(Итог) И Итог.ИмяКолонки = ИмяКолонки Тогда
			Итог = Неопределено;
		КонецЕсли;
		ВеткаДерева = ВеткаДерева.Родитель;
	КонецЦикла;
	Возврат Итог;
	
КонецФункции

Процедура ДобавитьОперандИтога(ИмяКолонки, ДеревоИтогов, ОписаниеТаблицы)
	
	КолонкаШапки = ДеревоИтогов.Строки.Найти(ИмяКолонки,"ИмяКолонки", Истина);
	Итог = НайтиРодительскийИтог(КолонкаШапки, ОписаниеТаблицы.ВидыЭлементов.ИтогПоГруппе);
	Если ЗначениеЗаполнено(Итог) Тогда
		ОписаниеИтога = ОписаниеТаблицы.КолонкиОтчета.Найти(Итог.ИмяКолонки,"ИмяКолонки");
		Если ЗначениеЗаполнено(ОписаниеИтога) Тогда
			ОписаниеИтога.Операнды.Добавить(ИмяКолонки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьСоставОперандовГоризонтальныхИтогов(ДеревоИтогов, ОписаниеТаблицы)
	
	Отбор = Новый Структура("УровеньИтога", -2);
	ДетальныеКолонки = ОписаниеТаблицы.КолонкиОтчета.НайтиСтроки(Отбор);
	ИтогПоГруппе = ОписаниеТаблицы.ВидыЭлементов.ИтогПоГруппе;
	
	Для Каждого Колонка Из ДетальныеКолонки Цикл
		ДобавитьОперандИтога(Колонка.ИмяКолонки, ДеревоИтогов, ОписаниеТаблицы);
	КонецЦикла;
	
	УровеньИтога = ОписаниеТаблицы.ВсегоУровнейКолонок;
	Для Сч = 0 По ОписаниеТаблицы.ВсегоУровнейКолонок Цикл
		
		Отбор.УровеньИтога = УровеньИтога;
		КолонкиИтогов = ОписаниеТаблицы.КолонкиОтчета.НайтиСтроки(Отбор);
		Для Каждого Колонка Из КолонкиИтогов Цикл
			ДобавитьОперандИтога(Колонка.ИмяКолонки, ДеревоИтогов, ОписаниеТаблицы);
		КонецЦикла;
		УровеньИтога = УровеньИтога - 1;
		
	КонецЦикла;
	
	ШапкаТаблицы = ДеревоИтогов.Скопировать();
	ШапкаТаблицы.Строки.Очистить();
	СформироватьШапкуТаблицы(ДеревоИтогов, ШапкаТаблицы, ОписаниеТаблицы.КоличествоУровнейШапки);
	ОписаниеТаблицы.Вставить("ШапкаТаблицы", ШапкаТаблицы);
	
КонецПроцедуры

Процедура СформироватьШапкуТаблицы(ДеревоИтогов, ШапкаТаблицы, ГлубинаВсего = 0)
	
	Для Каждого Заголовок Из ДеревоИтогов.Строки Цикл
		НовыйЗаголовок = ШапкаТаблицы;
		Если Заголовок.ВыводитьЗаголовокЭлемента Тогда
			НовыйЗаголовок = ШапкаТаблицы.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЗаголовок, Заголовок);
		КонецЕсли;
		СформироватьШапкуТаблицы(Заголовок, НовыйЗаголовок, ГлубинаВсего);
		Если НовыйЗаголовок.Строки.Количество() = 0 И ТипЗнч(НовыйЗаголовок) = Тип("СтрокаДереваЗначений") Тогда
			ГлубинаВсего = Макс(ГлубинаВсего, НовыйЗаголовок.Уровень());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуЯчейки(ИдСтрокиОтчета,ДанныеКолонки, ОписаниеТаблицы, ПериодыКолонок = Неопределено)
	
	// Запомним расшифровку ячейки
	РасшифровкаСтроки = ОписаниеТаблицы.Расшифровка[ИдСтрокиОтчета];
	Если РасшифровкаСтроки = Неопределено Тогда
		РасшифровкаСтроки = Новый Соответствие;
		ОписаниеТаблицы.Расшифровка.Вставить(ИдСтрокиОтчета, РасшифровкаСтроки);
	КонецЕсли;
	
	РасшифровкаЯчейки = РасшифровкаСтроки[ДанныеКолонки.ИмяКолонки];
	Если РасшифровкаЯчейки = Неопределено Тогда
		РасшифровкаЯчейки = Новый Структура("Показатель, ДатаНачала, ДатаОкончания, ВидЭлемента, СчетПланаСчетов, НемонетарныйПоказатель, Отбор");
		ЗаполнитьЗначенияСвойств(РасшифровкаЯчейки, ОписаниеТаблицы.ТекущийПоказатель);
		РасшифровкаЯчейки.Показатель = ОписаниеТаблицы.ТекущийПоказатель.ЭлементОтчета;
		РасшифровкаСтроки.Вставить(ДанныеКолонки.ИмяКолонки, РасшифровкаЯчейки);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(РасшифровкаЯчейки, ДанныеКолонки);
	
	Если ПериодыКолонок <> Неопределено И ПериодыКолонок[ДанныеКолонки.ИмяКолонки] <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(РасшифровкаЯчейки, ПериодыКолонок[ДанныеКолонки.ИмяКолонки]);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДеревоВертикальныхИтогов(ДеревоСтрок, ОписаниеТаблицы, СтрокаОтчета, Отбор = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Отбор) Тогда
		Отбор = Новый Структура;
		Данные = ОписаниеТаблицы.ЗначенияПоказателей.Скопировать();
	Иначе
		Данные = ОписаниеТаблицы.ЗначенияПоказателей.Скопировать(Отбор);
	КонецЕсли;
	
	ВидыЭлементов = ОписаниеТаблицы.ВидыЭлементов;
	ПредставлениеПериодаНаименование = Перечисления.ПредставлениеПериода.Наименование;
	Для Каждого Строка Из ДеревоСтрок.Строки Цикл
		Если Строка.ВидЭлемента = ВидыЭлементов.Группа Тогда
			НоваяСтрокаОтчета = СтрокаОтчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОтчета, Строка);
			СформироватьДеревоВертикальныхИтогов(Строка, ОписаниеТаблицы, НоваяСтрокаОтчета, Отбор);
			РассчитатьВертикальныеИтоги(НоваяСтрокаОтчета, ОписаниеТаблицы);
			
		ИначеЕсли Строка.ВидЭлемента = ВидыЭлементов.ИтогПоГруппе И Строка.ВыводитьЗаголовокЭлемента И НЕ Строка.ЭтоСвязанный Тогда
			
			НоваяСтрокаОтчета = СтрокаОтчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОтчета, Строка);
			
		ИначеЕсли Строка.ВидЭлемента = ВидыЭлементов.Измерение Тогда
			Если Строка.Строки.Количество() Тогда
				Данные.Свернуть(Строка.ИмяКолонки);
				Если ЗначениеЗаполнено(Строка.Сортировка) Тогда
					Данные.Сортировать(Строка.ИмяКолонки + " " + Строка.Сортировка);
				КонецЕсли;
			КонецЕсли;
			Для Каждого ДанныеСтроки Из Данные Цикл
				
				ЗначениеИзмерения = ДанныеСтроки[Строка.ИмяКолонки];
				НоваяСтрокаОтчета = СтрокаОтчета.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОтчета, Строка);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОтчета, ДанныеСтроки);
				НоваяСтрокаОтчета.ЗначениеГруппировки = ЗначениеИзмерения;
				Если Строка.ПредставлениеПериода = ПредставлениеПериодаНаименование Тогда
					НоваяСтрокаОтчета.НаименованиеДляПечати = ФинансоваяОтчетностьСервер.ПредставлениеИнтервала(
																	ЗначениеИзмерения,Строка.Периодичность);
				Иначе
					НоваяСтрокаОтчета.НаименованиеДляПечати = Формат(ЗначениеИзмерения, "ДЛФ=DD");
				КонецЕсли;
				Если Строка.Строки.Количество() Тогда
					Отбор.Вставить(Строка.ИмяКолонки, ЗначениеИзмерения);
					СформироватьДеревоВертикальныхИтогов(Строка, ОписаниеТаблицы, НоваяСтрокаОтчета, Отбор);
					РассчитатьВертикальныеИтоги(НоваяСтрокаОтчета, ОписаниеТаблицы);
					Отбор.Удалить(Строка.ИмяКолонки);
				КонецЕсли;
				
			КонецЦикла;// по уникальным значениям текущего измерения
			Если Строка.Уровень() = 0 Тогда
				Если НЕ ЗначениеЗаполнено(Отбор) Тогда
					Данные = ОписаниеТаблицы.ЗначенияПоказателей.Скопировать();
				Иначе
					Данные = ОписаниеТаблицы.ЗначенияПоказателей.Скопировать(Отбор);
				КонецЕсли;
			КонецЕсли;
		Иначе
			НоваяСтрокаОтчета = СтрокаОтчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОтчета, Строка);
			ЗаполнитьРесурсыТаблицы(НоваяСтрокаОтчета, Данные, ОписаниеТаблицы);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРесурсыТаблицы(НоваяСтрокаОтчета, ЗначенияРесурсов, ОписаниеТаблицы)
	
	Если ЗначенияРесурсов.Количество() Тогда
		Если ОписаниеТаблицы.ЭтоПроизвольная Тогда
			Отбор = Новый Структура("СтрокаТаблицы", НоваяСтрокаОтчета.ЭлементОтчета);
			РесурсыСтроки = ЗначенияРесурсов.НайтиСтроки(Отбор);
			Для Каждого Ресурс Из ОписаниеТаблицы.Ресурсы Цикл
				НоваяСтрокаОтчета[Ресурс] = ИтогПоКолонке(РесурсыСтроки, Ресурс);
			КонецЦикла;
		Иначе
			РесурсыСтроки = ЗначенияРесурсов.Найти(НоваяСтрокаОтчета.ЭлементОтчета, "ЭлементОтчета");
			Если РесурсыСтроки <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОтчета, РесурсыСтроки, ОписаниеТаблицы.СтрокаРесурсов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьВертикальныеИтоги(НоваяСтрокаОтчета, ОписаниеТаблицы)
	
	Отбор = Новый Структура("ВидЭлемента,ЭтоСвязанный",ОписаниеТаблицы.ВидыЭлементов.ИтогПоГруппе,Ложь);
	Строки = НоваяСтрокаОтчета.Строки.НайтиСтроки(Отбор);
	ИтогПоГруппе = Неопределено;
	Если Строки.Количество() Тогда
		ИтогПоГруппе = Строки[0];
	КонецЕсли;
	ОбратныйЗнак = 1;
	Если ИтогПоГруппе <> Неопределено И ИтогПоГруппе.ОбратныйЗнак Тогда
		ОбратныйЗнак = -1;
	КонецЕсли;
	
	Для Каждого Имя Из ОписаниеТаблицы.Ресурсы Цикл
		ЗначениеИтога = ОбратныйЗнак * НоваяСтрокаОтчета.Строки.Итог(Имя);
		НоваяСтрокаОтчета[Имя] = ЗначениеИтога;
		Если ИтогПоГруппе <> Неопределено Тогда
			ИтогПоГруппе[Имя] = ЗначениеИтога;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИтогПоСтроке(ЗначенияОперандов, ОписаниеИтога, ПериодыЗначений);
	
	Итог = 0;
	Для Каждого Имя Из ОписаниеИтога.Операнды Цикл
		Итог = Итог + ЗначенияОперандов[Имя];
		ПериодОперанда = ПериодыЗначений[Имя];
		ПериодИтога = ПериодыЗначений[ОписаниеИтога.ИмяКолонки];
		Если ПериодИтога = Неопределено Тогда
			ПериодыЗначений.Вставить(ОписаниеИтога.ИмяКолонки, ПериодОперанда);
		ИначеЕсли ПериодОперанда <> Неопределено Тогда
			ПериодИтога.ДатаНачала = Мин(ПериодИтога.ДатаНачала,ПериодОперанда.ДатаНачала);
			ПериодИтога.ДатаОкончания = Макс(ПериодИтога.ДатаОкончания,ПериодОперанда.ДатаОкончания);
		КонецЕсли;
	КонецЦикла;
	Итог = ?(ОписаниеИтога.ОбратныйЗнак,-1,1)*Итог;
	Возврат Итог;
	
КонецФункции

Функция ИтогПоКолонке(СтрокиТаблицы, ИмяКолонки)
	
	Результат = 0;
	Для Каждого Строка Из СтрокиТаблицы Цикл
		Результат = Результат + Строка[ИмяКолонки];
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ПоказателиПроизвольнойТаблицы(ЯчейкиТаблицы, ЭлементыТаблицы, Параметры, ЭтоКолонки = Ложь)
	
	Для Каждого ЭлементЯчейки Из ЯчейкиТаблицы.Строки Цикл
		Если ЭтоПоказатель(ЭлементЯчейки.ВидЭлемента, ЭлементЯчейки.ЭтоСвязанный, Параметры.ВидыЭлементов) Тогда
			АдресЯчейки = ЯчейкиТаблицы.ЭлементОтчета.ЭлементыТаблицы.Найти(ЭлементЯчейки.ЭлементОтчета,"Элемент");
			Если АдресЯчейки <> Неопределено Тогда
				Описание = Новый Структура("Описание", ЭлементЯчейки);
				Описание.Вставить("Строка",АдресЯчейки.Строка);
				Описание.Вставить("Колонка",АдресЯчейки.Колонка);
				ЭлементыТаблицы.Показатели.Вставить(ЭлементЯчейки.ЭлементОтчета, Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЭлементТаблицыИзмерение(ЭлементыТаблицы, Элемент, ДопСуффикс, ЭтоКолонки)
	
	ТипыИзмерений = Перечисления.ТипыИзмеренийФинансовогоОтчета;
	ИдентификаторЭлемента = ИдентификаторЭлемента(Элемент);
	ЭтоПериод = Элемент.ТипИзмерения = ТипыИзмерений.Период;
	ЭтоСубконто = Элемент.ТипИзмерения = ТипыИзмерений.Субконто;
	Если ЭтоПериод Тогда
		Данные = Новый Структура("Периодичность", Элемент.Периодичность);
		Данные.Вставить("Представление",Элемент.НаименованиеДляПечати);
		Данные.Вставить("Сортировка", ?(ЗначениеЗаполнено(Элемент.Сортировка),Элемент.Сортировка,"ВОЗР"));
		ЭлементыТаблицы.Периодичность.Добавить(Данные);
		ИмяКолонки = "Период" + ОбщегоНазначения.ИмяЗначенияПеречисления(Элемент.Периодичность);		
		Данные.Вставить("ИмяКолонки", ИмяКолонки);
	КонецЕсли;
	Если ЭтоСубконто Тогда
		ЭлементыТаблицы.Вставить("Субконто",Элемент);
		ИмяКолонки = "Субконто1";
		ДанныеИзмерения = Новый Структура("Значение, Представление, Отбор", ИмяКолонки, Элемент.НаименованиеДляПечати, Неопределено);
		ЭлементыТаблицы.ИзмеренияРегистра.Добавить(ДанныеИзмерения);
	КонецЕсли;
	Если Элемент.ТипИзмерения = ТипыИзмерений.ИзмерениеРегистраБухгалтерии Тогда
		ИмяКолонки = Элемент.ИмяИзмерения;
		ДанныеИзмерения = Новый Структура("Значение, Представление, Отбор", ИмяКолонки, Элемент.НаименованиеДляПечати, Неопределено);
		Настройки = Элемент.ДополнительныйОтбор.Получить();
		Если Настройки <> Неопределено Тогда
			ДанныеИзмерения.Отбор = Настройки.Отбор;
		КонецЕсли;
		ЭлементыТаблицы.ИзмеренияРегистра.Добавить(ДанныеИзмерения);
	КонецЕсли;
	ЭлементыТаблицы.ИзмеренияТаблицы.Добавить(ИмяКолонки);
	Если НЕ ЭтоКолонки Тогда
		ЭлементыТаблицы.ИзмеренияСтрок.Добавить(ИмяКолонки);
	КонецЕсли;
	ДобавитьВДеревоВывода(ЭлементыТаблицы, Элемент, ИдентификаторЭлемента, ИмяКолонки);
	
КонецПроцедуры

Процедура ДобавитьВДеревоВывода(ЭлементыТаблицы, Элемент, ИдентификаторЭлемента, ИмяКолонки = "", РасположениеИтога = Неопределено)
	
	НоваяКолонка = ЭлементыТаблицы.ТекущийУровень.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяКолонка, Элемент);
	НоваяКолонка.ИдентификаторЭлемента = ИдентификаторЭлемента;
	Если Элемент.ВидЭлемента = ЭлементыТаблицы.ВидыЭлементов.ИтогПоГруппе Тогда
		Если Элемент.ВыводитьЗаголовокЭлемента Тогда
			НоваяКолонка.РасположениеИтога = РасположениеИтога;
		КонецЕсли;
		Если ЗначениеЗаполнено(НоваяКолонка.Родитель) Тогда
			НоваяКолонка.Родитель.РасположениеИтога = НоваяКолонка.РасположениеИтога;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяКолонки) Тогда
		НоваяКолонка.ИмяКолонки = ИмяКолонки;
	КонецЕсли;
	
	ЭлементыТаблицы.ТекущийУровень = НоваяКолонка.Строки;
	ЭлементыТаблицы.ТекущийРодитель = НоваяКолонка;
	
КонецПроцедуры

Функция ПараметрыПолученияПоказателя(ПараметрыОтчета, ОписаниеТаблицы = Неопределено)
	
	ПараметрыПоказателя = НовыеПараметрыПолученияПоказателя();
	ПараметрыПоказателя.ПериодОтчета = ПараметрыОтчета.ПериодОтчета;
	ПараметрыПоказателя.ОтборОтчета = ПараметрыОтчета.Отбор;
	ПараметрыПоказателя.СообщенияОбОшибках = ПараметрыОтчета.СообщенияОбОшибках;
	ПараметрыПоказателя.Ресурс = ПараметрыОтчета.Ресурс;
	ПараметрыПоказателя.Вставить("ВидыЭлементов", ПараметрыОтчета.ВидыЭлементов);
	
	Если ОписаниеТаблицы <> Неопределено Тогда
		ПараметрыПоказателя.ПериодОтчета.Вставить("Периодичность", ОписаниеТаблицы.Периодичность);
		ПараметрыПоказателя.Измерения = ОписаниеТаблицы.ИзмеренияРегистра;
		Если ОписаниеТаблицы.Свойство("Субконто") Тогда
			Субконто = Новый Структура;
			Субконто.Вставить("Вид", ОписаниеТаблицы.Субконто.ВидСубконто);
			Субконто.Вставить("ЕстьНастройки", ОписаниеТаблицы.Субконто.ЕстьНастройки);
			Субконто.Вставить("Отбор", ОписаниеТаблицы.Субконто.ДополнительныйОтбор);
			Субконто.Вставить("Наименование", ОписаниеТаблицы.Субконто.НаименованиеДляПечати);
			ПараметрыПоказателя.Субконто = Субконто;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПоказателя.ИнтервалыОтчета = Справочники.ЭлементыФинансовыхОтчетов.ИнтервалыОтчета(ПараметрыОтчета.ПериодОтчета);
	
	Возврат ПараметрыПоказателя;
	
КонецФункции

Процедура ДобавитьОписаниеБлокаОтчета(Параметры, ЭлементОтчета, ДанныеЭлемента)
	
	ОписаниеБлока = Новый Структура("ВидЭлемента,ВыводитьЗаголовокЭлемента,НаименованиеДляПечати,ЭлементОтчета");
	ВидыЭлементов = Параметры.ВидыЭлементов;
	
	ЗаполнитьЗначенияСвойств(ОписаниеБлока, ЭлементОтчета);
	ОписаниеБлока.Вставить("Описание", ДанныеЭлемента);
	
	Параметры.БлокиОтчета.Добавить(ОписаниеБлока);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПолученияЗначенйиПоказателей

Функция ЗначениеПростогоПоказателя(Параметры, Показатель = Неопределено)
	
	ВидыЭлементов = Параметры.ВидыЭлементов;
	ЭлементОтчета = Показатель;
	Если ЭлементОтчета = Неопределено Тогда
		ЭлементОтчета = Параметры.Показатель;
	КонецЕсли;
	ПериодОтчета = Параметры.ПериодОтчета;
	ИнтервалыОтчета = Параметры.ИнтервалыОтчета.Скопировать();
	ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.ЭлементОтчета  , "Показатель");
	ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.КодСтрокиОтчета, "КодСтроки");
	ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.Примечание     , "Примечание");
	Измерения = Параметры.Измерения;
	ЗначениеПоказателя = ПустоеЗначениеПоказателя(ИнтервалыОтчета, Измерения);
	Субконто = Параметры.Субконто;
	Ресурс = Параметры.Ресурс;
	
	// Установим параметры компоновки
	СхемаПоказателя = Справочники.ЭлементыФинансовыхОтчетов.СхемаПоказателя(ЭлементОтчета, Измерения, Субконто, Ресурс);
	Настройки = СхемаПоказателя.Настройки;
	Если ЭлементОтчета.ВидЭлемента = ВидыЭлементов.МонетарныйПоказатель
		И НЕ ЗначениеЗаполнено(ЭлементОтчета.СчетПланаСчетов) Тогда
		ШаблонТекста = НСтр("ru='Не определено значение показателя 
                            |%1 (%2)
                            |вида отчета %3
                            |по причине: не указан счет плана счетов.'
                            |;uk='Не визначено значення показника 
                            |%1 (%2)
                            |виду звіту %3
                            |з причини: не вказано рахунок плану рахунків.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, 
			ЭлементОтчета.НаименованиеДляПечати, 
			ЭлементОтчета.Код,
			ЭлементОтчета.ВидОтчета);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ЭлементОтчета.ЭлементОтчета);
		ДобавитьСообщениеОбОшибке(Параметры.СообщенияОбОшибках, Текст, ЭлементОтчета.ЭлементОтчета);
		Параметры.Вставить("ОшибкаРасчета");
	КонецЕсли;
	
	Немонетарный = ВидыЭлементов.НемонетарныйПоказатель;
	Монетарный = ВидыЭлементов.МонетарныйПоказатель;
	Для Каждого ЭлементОтбора Из Параметры.ОтборОтчета Цикл
		Если ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда
			Если ЭлементОтчета.ВидЭлемента = Монетарный
				ИЛИ (ЭлементОтчета.ВидЭлемента = Немонетарный И СтрНайти(ЭлементОтбора.Ключ, "Субконто") = 0) Тогда
			НовыйОтбор = ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			Если ТипЗнч(НовыйОтбор.ПравоеЗначение) = Тип("Массив") Тогда
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			КонецЕсли;
			КонецЕсли;
		КонецЕсли;// значение отбора заполнено
	КонецЦикла;
	
	ДобавитьНастройкуПериодичности(Настройки, ПериодОтчета);
	
	ДанныеПоказателя = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаПоказателя.Схема, Настройки, Новый Структура("ИнтервалыОтчета", ИнтервалыОтчета));
	
	Если ДанныеПоказателя.Количество() > 0 Тогда
		ЗначениеПоказателя.Очистить();
		ЗагрузитьВТаблицуЗначений(ДанныеПоказателя, ЗначениеПоказателя);
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

Функция ЗначениеПроизводногоПоказателя(Параметры, Показатель = Неопределено)
	
	ЭлементОтчета = Показатель;
	Если ЭлементОтчета = Неопределено Тогда
		ЭлементОтчета = Параметры.Показатель;
	КонецЕсли;
	ПериодОтчета = Параметры.ПериодОтчета;
	ИнтервалыОтчета = Параметры.ИнтервалыОтчета.Скопировать();
	ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.ЭлементОтчета  , "Показатель");
	ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.КодСтрокиОтчета, "КодСтроки");
	ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.Примечание     , "Примечание");
	ЗначениеПоказателя = ПустоеЗначениеПоказателя(ИнтервалыОтчета  , Параметры.Измерения);
	
	ОперандыФормулы = ЭлементОтчета.ЭлементОтчета.ОперандыФормулы;
	Если ЭлементОтчета.ЭтоСвязанный Тогда
		ОперандыФормулы = ЭлементОтчета.СвязанныйЭлемент.ОперандыФормулы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОперандыФормулы) Тогда
		ЗначенияОперандов = Неопределено;
		ИдентификаторыОперандов = "";
		// Получим значения операндов формулы
		Для Каждого Операнд Из ОперандыФормулы Цикл
			ИдентификаторыОперандов = ИдентификаторыОперандов + Операнд.Идентификатор + ",";
			ДанныеОперанда = ЭлементОтчета.Строки.Найти(Операнд.Операнд,"ЭлементОтчета");
			Если ДанныеОперанда = Неопределено Тогда
				ДанныеОперанда = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
									Операнд.Операнд,
									"НаименованиеДляПечати,ВидЭлемента,ЕстьНастройки,ДополнительныйОтбор,ОбратныйЗнак");
				ДопРеквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
									Операнд.Операнд,
									"СчетПланаСчетов,ТипИтога,НачальноеСальдо,НемонетарныйПоказатель,КодСтрокиОтчета,Примечание");
				Для Каждого КлючЗначение Из ДопРеквизиты Цикл
					ДанныеОперанда.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
				КонецЦикла;
				ДанныеОперанда.Вставить("ЭлементОтчета", Операнд.Операнд);
				ДанныеОперанда.Вставить("ЭтоСвязанный", Ложь);
			КонецЕсли;
			ОперандЗначения = ЗначениеПростогоПоказателя(Параметры, ДанныеОперанда);
			ОперандЗначения.Колонки.Значение.Имя = Операнд.Идентификатор;
			Если ЗначенияОперандов = Неопределено Тогда
				ЗначенияОперандов = ОперандЗначения.Скопировать();
				Продолжить;
			КонецЕсли;
			ЗначенияОперандов.Колонки.Добавить(Операнд.Идентификатор, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2)));
			ЗагрузитьВТаблицуЗначений(ОперандЗначения,ЗначенияОперандов);
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ИдентификаторыОперандов,1);
		Если Параметры.Свойство("ОшибкаРачета") Тогда
			ШаблонТекста = НСтр("ru='Недостоверное значение показателя 
                                |%1(%2)
                                |по причине: ошибка расчета составных показателей.'
                                |;uk='Достовірне значення показника 
                                |%1(%2)
                                |через: помилка розрахунку складових показників.'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста, 
				ЭлементОтчета.НаименованиеДляПечати, 
				ЭлементОтчета.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, ЭлементОтчета.ЭлементОтчета);
			ДобавитьСообщениеОбОшибке(Параметры.СообщенияОбОшибках, Текст, ЭлементОтчета.ЭлементОтчета);
		КонецЕсли;
		
		КолонкиГруппировки = "";
		Для Каждого Колонка Из ЗначенияОперандов.Колонки Цикл
			Если СтрНайти(ИдентификаторыОперандов, Колонка.Имя) = 0 Тогда
				КолонкиГруппировки = КолонкиГруппировки + Колонка.Имя + ",";
			КонецЕсли;
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(КолонкиГруппировки,1);
		
		ЗначенияОперандов.ЗаполнитьЗначения(ЭлементОтчета.ЭлементОтчета  ,"Показатель");
		ЗначенияОперандов.ЗаполнитьЗначения(ЭлементОтчета.КодСтрокиОтчета,"КодСтроки");
		ЗначенияОперандов.ЗаполнитьЗначения(ЭлементОтчета.Примечание     ,"Примечание");
		ЗначенияОперандов.Свернуть(КолонкиГруппировки,ИдентификаторыОперандов);
		
	Иначе
		ЗначенияОперандов = ИнтервалыОтчета.Скопировать();
		
	КонецЕсли;
	
	Если ПустаяСтрока(ЭлементОтчета.Формула) Тогда
		ШаблонТекста = НСтр("ru='Не определено значение показателя 
                            |%1 (%2)
                            |по причине: не указана формула расчета.'
                            |;uk='Не визначено значення показника 
                            |%1 (%2)
                            |з причини: не зазначена формула розрахунку.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, 
			ЭлементОтчета.НаименованиеДляПечати, 
			ЭлементОтчета.Код);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		ДобавитьСообщениеОбОшибке(Параметры.СообщенияОбОшибках, Текст, ЭлементОтчета.ЭлементОтчета);
		Параметры.Вставить("ОшибкаРасчета");
	КонецЕсли;
	// Выполним формулу
	СхемаПоказателя = Справочники.ЭлементыФинансовыхОтчетов.СхемаПоказателя(ЭлементОтчета, Параметры.Измерения);
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ЗначенияОперандов", ЗначенияОперандов);
	ВнешниеНаборы.Вставить("ИнтервалыОтчета", ИнтервалыОтчета);
	
	Настройки = СхемаПоказателя.Настройки;
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(Настройки, "ЭлементОтчета", ЭлементОтчета.ЭлементОтчета);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(Настройки, "ОбратныйЗнак" , ЭлементОтчета.ОбратныйЗнак);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(Настройки, "НачалоПериода", ПериодОтчета.НачалоПериода);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(Настройки, "КонецПериода" , ПериодОтчета.КонецПериода);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(Настройки,"Периодичность" , ПериодОтчета.Периодичность);
	ДобавитьНастройкуПериодичности(Настройки, ПериодОтчета);
	
	ДанныеПоказателя = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаПоказателя.Схема, Настройки, ВнешниеНаборы);
	Если НЕ ЗначениеЗаполнено(ДанныеПоказателя) Тогда
		ДанныеПоказателя = ЗначенияОперандов.Скопировать();
	КонецЕсли;
	
	Если ДанныеПоказателя.Количество() > 0 Тогда
		ЗначениеПоказателя.Очистить();
		ЗагрузитьВТаблицуЗначений(ДанныеПоказателя, ЗначениеПоказателя);
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

Функция ЗначениеИтогаПоГруппе(Параметры, Показатель = Неопределено)
	
	ЭлементОтчета = Показатель;
	Если ЭлементОтчета = Неопределено Тогда
		ЭлементОтчета = Параметры.Показатель;
	КонецЕсли;
	ПериодОтчета = Параметры.ПериодОтчета;
	ПоказателиИтога = ОбновитьДеревоОтчета(ЭлементОтчета.СвязанныйЭлемент.Владелец, ЭлементОтчета.СвязанныйЭлемент);
	
	ИдентификаторЭлемента = ИдентификаторЭлемента(ЭлементОтчета);
	ИтогПоГруппе = Неопределено;
	Для Каждого ПоказательИтога Из ПоказателиИтога.Строки Цикл
		
		ЗначениеПоказателя = ЗначениеПоказателяОтчета(Параметры, ПоказательИтога);
		Если ЗначениеПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИтогПоГруппе = Неопределено Тогда
			ИтогПоГруппе = ЗначениеПоказателя.Скопировать();
		Иначе
			ЗагрузитьВТаблицуЗначений(ЗначениеПоказателя, ИтогПоГруппе);
		КонецЕсли;
		
	КонецЦикла;
	Если Параметры.Свойство("ОшибкаРачета") Тогда
		ШаблонТекста = НСтр("ru='Недостоверное значение итога по группе 
                            |%1 (%2)
                            |по причине: ошибка расчета составных показателей.'
                            |;uk='Достовірне значення підсумку по групі 
                            |%1 (%2)
                            |через: помилка розрахунку складових показників.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, 
			ЭлементОтчета.НаименованиеДляПечати, 
			ЭлементОтчета.Код);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Параметры.СообщенияОбОшибках.Добавить(Текст);
	КонецЕсли;
	
	ИтогПоГруппе.ЗаполнитьЗначения(ЭлементОтчета.ЭлементОтчета  , "Показатель");
	ИтогПоГруппе.ЗаполнитьЗначения(ЭлементОтчета.КодСтрокиОтчета, "КодСтроки");
	ИтогПоГруппе.ЗаполнитьЗначения(ЭлементОтчета.Примечание     , "Примечание");
	
	КолонкиГруппировки = "";
	Для Каждого Колонка Из ИтогПоГруппе.Колонки Цикл
		Если Колонка.Имя = "Значение" Тогда
			Продолжить;
		КонецЕсли;
		КолонкиГруппировки = КолонкиГруппировки + Колонка.Имя + ",";
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(КолонкиГруппировки,1);
	
	ИтогПоГруппе.Свернуть(КолонкиГруппировки, "Значение");
	Если ЭлементОтчета.ОбратныйЗнак Тогда
		Для Каждого Итог Из ИтогПоГруппе Цикл
			Итог.Значение = -1 * Итог.Значение;
		КонецЦикла;
	КонецЕсли;
	Возврат ИтогПоГруппе;
	
КонецФункции

Функция ЗначениеПоказателяОтчета(Параметры, Показатель = Неопределено)
	
	ВидыЭлементов = Параметры.ВидыЭлементов;
	ЭлементОтчета = Показатель;
	Если ЭлементОтчета = Неопределено Тогда
		ЭлементОтчета = Параметры.Показатель;
	КонецЕсли;
	Если ЭлементОтчета.ВидЭлемента = ВидыЭлементов.МонетарныйПоказатель 
		ИЛИ ЭлементОтчета.ВидЭлемента = ВидыЭлементов.НемонетарныйПоказатель Тогда
		Результат = ЗначениеПростогоПоказателя(Параметры, Показатель);
	ИначеЕсли ЭлементОтчета.ВидЭлемента = ВидыЭлементов.ПроизводныйПоказатель Тогда
		Результат = ЗначениеПроизводногоПоказателя(Параметры, Показатель);
	ИначеЕсли ЭлементОтчета.ВидЭлемента = ВидыЭлементов.ИтогПоГруппе
		И ЭлементОтчета.ЭтоСвязанный Тогда
		Результат = ЗначениеИтогаПоГруппе(Параметры, Показатель);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьНастройкуПериодичности(Настройки, ПериодОтчета)
	
	Для Каждого Период Из ПериодОтчета.Периодичность Цикл
		ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, Период.ИмяКолонки, Период.Представление);
		ФинансоваяОтчетностьСервер.НовыйПорядок(Настройки, Период.ИмяКолонки, Период.Сортировка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыводВТабличныйДокумент

Функция ВывестиОтчет(Параметры, ДеревоЭлементовОтчета)
	
	ВидыЭлементов = Параметры.ВидыЭлементов;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ПараметрыВывода = ПараметрыВыводаОтчета(Параметры);
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	Для Каждого ОписаниеБлока Из Параметры.БлокиОтчета Цикл
		
		Если ОписаниеБлока.ВидЭлемента = ВидыЭлементов.ЗаголовокОтчета
			ИЛИ ОписаниеБлока.ВидЭлемента = ВидыЭлементов.РедактируемыйТекст
			ИЛИ ОписаниеБлока.ВидЭлемента = ВидыЭлементов.НередактируемыйТекст Тогда
			ВывестиТекст(Параметры.МакетВывода, ОписаниеБлока, ДокументРезультат, ВидыЭлементов, Параметры.МаксКоличествоКолонок);
			
		ИначеЕсли ОписаниеБлока.ВидЭлемента = ВидыЭлементов.МонетарныйПоказатель
			ИЛИ ОписаниеБлока.ВидЭлемента = ВидыЭлементов.НемонетарныйПоказатель 
			ИЛИ ОписаниеБлока.ВидЭлемента = ВидыЭлементов.ПроизводныйПоказатель
			ИЛИ ОписаниеБлока.ВидЭлемента = ВидыЭлементов.ИтогПоГруппе Тогда
			
			ВывестиПоказатель(Параметры, ОписаниеБлока, ДокументРезультат);
			
		ИначеЕсли ОписаниеБлока.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВСтроках
			ИЛИ ОписаниеБлока.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВКолонках 
			ИЛИ ОписаниеБлока.ВидЭлемента = ВидыЭлементов.ТаблицаСложная Тогда
			
			ВывестиТаблицу(Параметры, ОписаниеБлока, ДокументРезультат);
			
		КонецЕсли;
		
	КонецЦикла;
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ПараметрыВыводаОтчета(Параметры)
	
	ВидыЭлементов = Параметры.ВидыЭлементов;
	МакетОформления = Справочники.ВидыФинансовыхОтчетов.ПолучитьМакет("ФинансовыйОтчет");
	МакетВывода = Новый Структура;
	МакетВывода.Вставить("ВидЭлемента", Новый Соответствие);
	
	// Все макеты вывода
	МакетВывода.Вставить("ЗаголовокОтчета" , МакетОформления.ПолучитьОбласть("ЗаголовокОтчета"));
	МакетВывода.Вставить("Текст"           , МакетОформления.ПолучитьОбласть("Текст"));
	МакетВывода.Вставить("ЗаголовокТаблицы", МакетОформления.ПолучитьОбласть("ЗаголовокТаблицы"));
	МакетВывода.Вставить("ПустаяСтрока"    , МакетОформления.ПолучитьОбласть("ПустаяСтрока"));
	МакетВывода.Вставить("ИтогКолонки"     , МакетОформления.ПолучитьОбласть("Группировка|Значение"));
	
	МакетВывода.Вставить("Шапка", МакетСтроки(МакетОформления, "Шапка"));
	МакетВывода.Вставить("СтрокаОтчета", МакетСтроки(МакетОформления, "СтрокаОтчета"));
	МакетВывода.Вставить("Группировка", МакетСтроки(МакетОформления, "Группировка"));
	МакетВывода.Вставить("ИтогПоСтрокам", МакетСтроки(МакетОформления, "ИтогПоСтрокам"));
	МакетВывода.Вставить("ОдиночныйПоказатель", МакетСтроки(МакетОформления, "ОдиночныйПоказатель"));
	МакетВывода.Вставить("ОдиночныйПоказательВыделенный", МакетСтроки(МакетОформления, "ОдиночныйПоказательВыделенный"));
	МакетВывода.Вставить("НижняяГраницаТаблицы", МакетСтроки(МакетОформления, "НижняяГраницаТаблицы"));
	
	// Разложим по видам элементов
	МакетСтроки = МакетСтроки(МакетОформления, "СтрокаОтчета");
	МакетВывода.ВидЭлемента.Вставить(ВидыЭлементов.МонетарныйПоказатель  , МакетСтроки);
	МакетВывода.ВидЭлемента.Вставить(ВидыЭлементов.НемонетарныйПоказатель, МакетСтроки);
	МакетВывода.ВидЭлемента.Вставить(ВидыЭлементов.ПроизводныйПоказатель , МакетСтроки);
	МакетВывода.ВидЭлемента.Вставить(ВидыЭлементов.ЭлементТаблицы        , МакетСтроки);
	
	МакетСтроки = МакетСтроки(МакетОформления, "Группировка");
	МакетВывода.ВидЭлемента.Вставить(ВидыЭлементов.Измерение, МакетСтроки);
	МакетВывода.ВидЭлемента.Вставить(ВидыЭлементов.Группа, МакетСтроки);
	
	МакетСтроки = МакетСтроки(МакетОформления, "ИтогПоСтрокам");
	МакетВывода.ВидЭлемента.Вставить(ВидыЭлементов.ИтогПоГруппе, МакетСтроки);
	
	Параметры.Вставить("МакетВывода", МакетВывода);
	
	Возврат МакетВывода;
	
КонецФункции

Процедура ВывестиТекст(МакетВывода, ЭлементВывода, ДокументРезультат, ВидыЭлементов, ШиринаТекста)
	
	Если ЭлементВывода.ВидЭлемента = ВидыЭлементов.ЗаголовокОтчета Тогда
		Область = МакетВывода.ЗаголовокОтчета;
		Область.Параметры.ЗаголовокОтчета = ЭлементВывода.Описание.Текст;
	ИначеЕсли ЭлементВывода.ВидЭлемента = ВидыЭлементов.ТаблицаСложная
		ИЛИ ЭлементВывода.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВКолонках
		ИЛИ ЭлементВывода.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВСтроках Тогда
		Область = МакетВывода.ЗаголовокТаблицы;
		Область.Параметры.ЗаголовокТаблицы = ЭлементВывода.НаименованиеДляПечати;
	Иначе
		Область = МакетВывода.Текст;
		Область.Параметры.Текст  = ЭлементВывода.Описание.Текст;
	КонецЕсли;
	ОбъединитьПоГоризонтали(Область, 1, 3, 2);
	НоваяОбласть = ДокументРезультат.Вывести(Область, 0);
	
	Если ЭлементВывода.ВидЭлемента = ВидыЭлементов.РедактируемыйТекст Тогда
		ОбластьТекста = ДокументРезультат.Область(НоваяОбласть.Верх+1,1);
		ОбластьТекста.Защита = Ложь;
		ОбластьТекста.ЦветФона = Новый Цвет(255,255,192);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПоказатель(Параметры, ЭлементВывода, ДокументРезультат)
	
	ВидыЭлементов = Параметры.ВидыЭлементов;
	МакетСтроки = Параметры.МакетВывода.ОдиночныйПоказатель;
	Если ЭлементВывода.Описание.ВыделитьЭлемент Тогда
		МакетСтроки = Параметры.МакетВывода.ОдиночныйПоказательВыделенный;
	КонецЕсли;
	
	МакетСтроки.Показатель.Параметры.Наименование = ЭлементВывода.НаименованиеДляПечати;
	МакетСтроки.Показатель.Параметры.Расшифровка = ЭлементВывода.ЭлементОтчета;
	ОбластьВывода = ДокументРезультат.Вывести(МакетСтроки.Показатель);
	
	МакетЯчейки = МакетСтроки.Значение;
	МакетЯчейки.Параметры.Значение = Формат(ЭлементВывода.Описание.Значение, Параметры.ФорматЗначений);
	МакетЯчейки.Параметры.Расшифровка = ЭлементВывода.Описание.Расшифровка;
	ДокументРезультат.Присоединить(МакетЯчейки);
	
КонецПроцедуры

#Область ВыводТаблицы

Процедура ВывестиТаблицу(Параметры, ЭлементВывода, ДокументРезультат)
	
	Если ЭлементВывода.Описание.ШапкаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементВывода.ВыводитьЗаголовокЭлемента Тогда
		ВывестиТекст(Параметры.МакетВывода, ЭлементВывода, ДокументРезультат, Параметры.ВидыЭлементов, Параметры.МаксКоличествоКолонок);
	КонецЕсли;
	ВывестиШапкуТаблицы(Параметры, ЭлементВывода, ДокументРезультат);
	
	ДеревоСтрок = ЭлементВывода.Описание.ДеревоСтрок;
	Для Каждого СтрокаТаблицы Из ДеревоСтрок.Строки Цикл
		Параметры.Вставить("ОтборСтроки", Новый Структура);
		ВывестиСтрокуТаблицы(СтрокаТаблицы, ДокументРезультат, ЭлементВывода.Описание, Параметры);
	КонецЦикла;
	ДокументРезультат.Вывести(Параметры.МакетВывода.ПустаяСтрока);
	Параметры.Удалить("ОтборСтроки");
	
КонецПроцедуры

Процедура ВывестиШапкуТаблицы(Параметры, ЭлементВывода, ДокументРезультат)
	
	МакетВывода = Параметры.МакетВывода.Шапка;
	СоответствиеЭлементовПоУровням = Новый Соответствие;
	ШапкаТаблицы = ЭлементВывода.Описание.ШапкаТаблицы;
	КоличествоУровнейШапки = ЭлементВывода.Описание.КоличествоУровнейШапки + 1;
	РаспределитьЭлементыПоУровням(ШапкаТаблицы.Строки, КоличествоУровнейШапки, СоответствиеЭлементовПоУровням);
	
	ПерваяСтрокаШапки = Неопределено;
	ПодчиненныхЭлементов = 0;
	
	Для Сч = 1 по КоличествоУровнейШапки Цикл
		
		ВыведеннаяОбласть = ДокументРезультат.Вывести(МакетВывода.Показатель, 0);
		
		Если ПерваяСтрокаШапки = Неопределено Тогда
			ПерваяСтрокаШапки = ВыведеннаяОбласть.Верх;
		КонецЕсли;
		Если Параметры.ВыводитьКодСтроки Тогда
			ДокументРезультат.Присоединить(МакетВывода.КодСтрокиОтчета);
		КонецЕсли;
		Если Параметры.ВыводитьПримечание Тогда
			ДокументРезультат.Присоединить(МакетВывода.Примечание);
		КонецЕсли;
		
		Если СоответствиеЭлементовПоУровням.Количество() Тогда // проверка на наличие значений колонок
			
			ЭлементыУровня = СоответствиеЭлементовПоУровням[Сч];
			Для Каждого ЭлементУровня из ЭлементыУровня Цикл
				Секция = МакетВывода.Значение;
				
				Если ЭлементУровня = Неопределено
					ИЛИ НЕ ЗначениеЗаполнено(ЭлементУровня.НаименованиеДляПечати) Тогда
					Секция.Параметры.Наименование = "";
				ИначеЕсли НЕ ЭлементУровня.ВыводитьЗаголовокЭлемента Тогда
					Продолжить;
				ИначеЕсли ЗначениеЗаполнено(ЭлементУровня.НаименованиеДляПечати) Тогда
					Секция.Параметры.Наименование = ЭлементУровня.НаименованиеДляПечати;
				КонецЕсли;
				
				ВыведеннаяОбласть = ДокументРезультат.Присоединить(Секция);
				Если ЭлементУровня = Неопределено Тогда
					Область = ДокументРезультат.Область(ВыведеннаяОбласть.Верх - 1,
														ВыведеннаяОбласть.Лево,
														ВыведеннаяОбласть.Верх,
														ВыведеннаяОбласть.Лево);
					Область.Объединить();
					Продолжить;
				КонецЕсли;
				ПодчиненныхЭлементов = ЭлементУровня.ПодчиненныхЭлементов;
				Если ПодчиненныхЭлементов > 1 Тогда
					Для НомерСекции = 1 по ПодчиненныхЭлементов - 1 Цикл
						ДокументРезультат.Присоединить(Секция);
					КонецЦикла;
					ОбъединитьПоГоризонтали(ДокументРезультат, ВыведеннаяОбласть.Лево, ПодчиненныхЭлементов, ВыведеннаяОбласть.Верх);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПерваяКолонкаШапки = 1;
	ОбъединитьПоВертикали(ДокументРезультат, ПерваяСтрокаШапки, КоличествоУровнейШапки, ПерваяКолонкаШапки);
	Если Параметры.ВыводитьКодСтроки Тогда
		ПерваяКолонкаШапки = ПерваяКолонкаШапки + 1;
		ОбъединитьПоВертикали(ДокументРезультат, ПерваяСтрокаШапки, КоличествоУровнейШапки, ПерваяКолонкаШапки, НСтр("ru='Код строки';uk='Код рядка'"), Истина);
	КонецЕсли;
	Если Параметры.ВыводитьПримечание Тогда
		ПерваяКолонкаШапки = ПерваяКолонкаШапки + 1;
		ОбъединитьПоВертикали(ДокументРезультат, ПерваяСтрокаШапки, КоличествоУровнейШапки, ПерваяКолонкаШапки, НСтр("ru='Примечание';uk='Примітка'"), Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСтрокуТаблицы(ДанныеСтрокиТаблицы, ДокументРезультат, ОписаниеТаблицы, Параметры, Уровень = 0)
	
	Если ДанныеСтрокиТаблицы.ВыводитьЗаголовокЭлемента Тогда
		ВывестиЯчейкиСтроки(ДанныеСтрокиТаблицы, ДокументРезультат, ОписаниеТаблицы, Параметры, Уровень);
	Иначе
		Уровень = Уровень - 1;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из ДанныеСтрокиТаблицы.Строки Цикл
		ВывестиСтрокуТаблицы(СтрокаТаблицы, ДокументРезультат, ОписаниеТаблицы, Параметры, Уровень+1);
	КонецЦикла;
	
	Если ДанныеСтрокиТаблицы.ВидЭлемента = Параметры.ВидыЭлементов.Группа Тогда
		Параметры.Отбор.Удалить(ДанныеСтрокиТаблицы.ИдентификаторЭлемента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиЯчейкиСтроки(ДанныеСтрокиТаблицы, ДокументРезультат, ОписаниеТаблицы, Параметры, Уровень)
	
	ВидыЭлементов = Параметры.ВидыЭлементов;
	Если ДанныеСтрокиТаблицы.ВидЭлемента = ВидыЭлементов.ИтогПоГруппе И ДанныеСтрокиТаблицы.РасположениеИтога = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИтогВНачале = ДанныеСтрокиТаблицы.РасположениеИтога = 0;
	ЭтоГруппа = ДанныеСтрокиТаблицы.ВидЭлемента = ВидыЭлементов.Группа;
	ЭтоИзмерениеПериода = ЗначениеЗаполнено(ДанныеСтрокиТаблицы.ПредставлениеПериода);
	// Заголовки групп выводим без ресурсов
	ВыводитьРесурсы = ((ЕстьИтогВНачале И ЭтоГруппа)//группы с итогами в начале группы выводятся с ресурсами
						ИЛИ НЕ ЭтоГруппа)// показатели, измерения, итоги выводятся с ресурсами
						И НЕ (ОписаниеТаблицы.ЭтоПроизвольная И ЭтоИзмерениеПериода);//измерения периода в матричных отчетах выводятся без ресурсов
						
	
	МакетСтроки = Параметры.МакетВывода.ВидЭлемента[ДанныеСтрокиТаблицы.ВидЭлемента];
	Если ДанныеСтрокиТаблицы.ВидЭлемента = ВидыЭлементов.ИтогПоГруппе И ДанныеСтрокиТаблицы.ЭтоСвязанный Тогда
		МакетСтроки = Параметры.МакетВывода.СтрокаОтчета;
	КонецЕсли;
	Если ДанныеСтрокиТаблицы.ВыделитьЭлемент Тогда
		МакетСтроки = Параметры.МакетВывода.Группировка;
	КонецЕсли;
	
	МакетСтроки.Показатель.Параметры.Наименование = ДанныеСтрокиТаблицы.НаименованиеДляПечати;
	МакетСтроки.Показатель.Параметры.Расшифровка = ДанныеСтрокиТаблицы.ЭлементОтчета;
	ОбластьВывода = ДокументРезультат.Вывести(МакетСтроки.Показатель, Уровень);
	
	Для Каждого Колонка Из ОписаниеТаблицы.КолонкиОтчета Цикл
		
		Если МакетСтроки.Свойство(Колонка.ИмяКолонки) Тогда
			МакетЯчейки = МакетСтроки[Колонка.ИмяКолонки];
		Иначе
			МакетЯчейки = МакетСтроки.Значение;
		КонецЕсли;
		Если ВыводитьРесурсы Тогда
			МакетЯчейки.Параметры.Значение = Формат(ДанныеСтрокиТаблицы[Колонка.ИмяКолонки], Параметры.ФорматЗначений);
			МакетЯчейки.Параметры.Расшифровка = РасшифровкаЯчейки(ОписаниеТаблицы, ДанныеСтрокиТаблицы, Колонка.ИмяКолонки);
		Иначе
			МакетЯчейки.Параметры.Значение = "";
			МакетЯчейки.Параметры.Расшифровка = Неопределено;
		КонецЕсли;
		ДокументРезультат.Присоединить(МакетЯчейки);
		
	КонецЦикла;// по ячейкам строки
	
КонецПроцедуры

Процедура РаспределитьЭлементыПоУровням(Строки, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая = 0) Экспорт
	
	Если ГлубинаТекущая > ГлубинаВсего Тогда
		Возврат;
	КонецЕсли;
	
	СписокСтрок = СоответствиеСтрокУровням[ГлубинаТекущая + 1];
	Если СписокСтрок = Неопределено Тогда
		СписокСтрок = Новый Массив;
	КонецЕсли;
	СоответствиеСтрокУровням.Вставить(ГлубинаТекущая + 1, СписокСтрок);
	
	Если Строки = Неопределено ИЛИ Не Строки.Количество() Тогда
		
		СписокСтрок.Добавить(Неопределено);
		РаспределитьЭлементыПоУровням(Неопределено, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая + 1);
		
	Иначе
		
		Для Каждого СтрокаПоказателя из Строки Цикл
			
			СписокСтрок.Добавить(СтрокаПоказателя);
			РаспределитьЭлементыПоУровням(СтрокаПоказателя.Строки, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая + 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъединитьПоВертикали(Документ, НомерВерхнейСтроки, Знач КоличествоЯчеек, НомерКолонки, ТекстОбласти = "", Центрировать = Ложь)
	
	Если КоличествоЯчеек <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Область = Документ.Область(НомерВерхнейСтроки, НомерКолонки, НомерВерхнейСтроки + КоличествоЯчеек - 1, НомерКолонки);
	Область.Объединить();
	Если НЕ ПустаяСтрока(ТекстОбласти) Тогда
		Область.Текст = ТекстОбласти;
	КонецЕсли;
	Если Центрировать Тогда
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъединитьПоГоризонтали(Документ, НомерЛевойКолонки, Знач КоличествоЯчеек, НомерСтроки, ТекстОбласти = "", Центрировать = Ложь)
	
	Если КоличествоЯчеек <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Область = Документ.Область(НомерСтроки, НомерЛевойКолонки, НомерСтроки, НомерЛевойКолонки + КоличествоЯчеек - 1);
	Область.Объединить();
	Если НЕ ПустаяСтрока(ТекстОбласти) Тогда
		Область.Текст = ТекстОбласти;
	КонецЕсли;
	Если Центрировать Тогда
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	КонецЕсли;
	
КонецПроцедуры

Функция МакетСтроки(МакетОформления, ИмяОбласти)
	
	МакетСтроки = Новый Структура;
	МакетСтроки.Вставить("Показатель"     , МакетОформления.ПолучитьОбласть(ИмяОбласти + "|Показатель"));
	МакетСтроки.Вставить("КодСтрокиОтчета", МакетОформления.ПолучитьОбласть(ИмяОбласти + "|КодСтрокиОтчета"));
	МакетСтроки.Вставить("Примечание"     , МакетОформления.ПолучитьОбласть(ИмяОбласти + "|Примечание"));
	МакетСтроки.Вставить("Значение"       , МакетОформления.ПолучитьОбласть(ИмяОбласти + "|Значение"));
	Возврат МакетСтроки;
	
КонецФункции

Функция РасшифровкаЯчейки(ОписаниеТаблицы, ДанныеСтрокиТаблицы, ИмяКолонки)
	
	ИдСтрокиОтчета = ДанныеСтрокиТаблицы.ЭлементОтчета;
	Если ОписаниеТаблицы.ТаблицаПоказателиВКолонках Тогда
		ИдСтрокиОтчета = ДанныеСтрокиТаблицы.ЗначениеГруппировки;
	КонецЕсли;
	РашифровкаСтроки = ОписаниеТаблицы.Расшифровка[ИдСтрокиОтчета];
	Если РашифровкаСтроки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Расшифрока = РашифровкаСтроки[ИмяКолонки];
	Если ТипЗнч(Расшифрока) = Тип("Структура") Тогда
		Расшифрока = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Расшифрока);
		Если ОписаниеТаблицы.ТаблицаПоказателиВКолонках Тогда
			ЗначениеГруппировки = ДанныеСтрокиТаблицы.ЗначениеГруппировки;
			ИмяКолонкиГруппировки = ДанныеСтрокиТаблицы.ИмяКолонки;
		ИначеЕсли ЗначениеЗаполнено(ДанныеСтрокиТаблицы.Родитель) Тогда
			ЗначениеГруппировки = ДанныеСтрокиТаблицы.Родитель.ЗначениеГруппировки;
			ИмяКолонкиГруппировки = ДанныеСтрокиТаблицы.Родитель.ИмяКолонки;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяКолонкиГруппировки) Тогда
			Расшифрока.Отбор.Вставить(ИмяКолонкиГруппировки, ЗначениеГруппировки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Расшифрока;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииРасшифровкиОтчета

Процедура РасшифровкаПроизводногоПоказателя(ПараметрыОтчета)
	
	ДанныеПоказателя = ПараметрыОтчета.ДанныеПоказателя;
	ОбратныйЗнак = ДанныеПоказателя.ОбратныйЗнак;
	Валюта = МеждународнаяОтчетностьВызовСервера.УчетнаяВалюта();
	
	// Подготовить макет
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = Отчеты.МеждународныйОтчет.ПолучитьМакет("РасшифровкаПроизводногоПоказателя");
	ОбластьСекции = Макет.ПолучитьОбласть("Секция");
	
	///////////////////////////////////////////////////////////////////////////////////
	// Вывести заголовок отчета
	Область = Макет.ПолучитьОбласть("Показатель");
	Область.Параметры.Показатель = ДанныеПоказателя.НаименованиеДляПечати;
	ТабличныйДокумент.Вывести(Область);
	ВывестиСтроку(ТабличныйДокумент, ОбластьСекции);
	
	///////////////////////////////////////////////////////////////////////////////////
	// Вывести секцию параметров
	ОбластьЗаголовокСекции = Макет.ПолучитьОбласть("ЗаголовокСекции");
	ОбластьЗаголовокСекции.Параметры.Заголовок = "Параметры";
	ТабличныйДокумент.Вывести(ОбластьЗаголовокСекции);
	ТабличныйДокумент.НачатьГруппуСтрок();
	// Период
	Период = ПараметрыОтчета.ПериодОтчета;
	ПериодСтрокой = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Период.НачалоПериода, Период.КонецПериода);
	ВывестиСтроку(ТабличныйДокумент, ОбластьСекции, НСтр("ru='Период';uk='Період'")+": "+ПериодСтрокой);
	// Валюта
	СтрокаВалюты = ?(ПараметрыОтчета.Ресурс = "Сумма",Валюта.Функциональная,Валюта.Представления);
	Шаблон = НСтр("ru='Валюта';uk='Валюта'")+": %1";
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаВалюты);
	ВывестиСтроку(ТабличныйДокумент, ОбластьСекции, Текст);
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	ВывестиСтроку(ТабличныйДокумент, ОбластьСекции);
	
	///////////////////////////////////////////////////////////////////////////////////
	// Вывести секцию отбора
	Если ПараметрыОтчета.Отбор.Количество() Тогда
		ОбластьЗаголовокСекции.Параметры.Заголовок = НСтр("ru='Отбор';uk='Відбір'");
		ТабличныйДокумент.Вывести(ОбластьЗаголовокСекции);
		ТабличныйДокумент.НачатьГруппуСтрок();
		Для Каждого ЭлементОтбора Из ПараметрыОтчета.Отбор Цикл
			Если ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда
				Шаблон = "%1: %2";
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				ВывестиСтроку(ТабличныйДокумент, ОбластьСекции, Текст);
			КонецЕсли;
		КонецЦикла;
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
		ВывестиСтроку(ТабличныйДокумент, ОбластьСекции);
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// Вывести текст формулы
	ТекстФормулы = ДанныеПоказателя.Формула;
	Если ОбратныйЗнак Тогда
		ТекстФормулы = "-("+ТекстФормулы+")";
	КонецЕсли;
	ОбластьЗаголовокСекции.Параметры.Заголовок = НСтр("ru='Формула расчета';uk='Формула розрахунку'");
	ТабличныйДокумент.Вывести(ОбластьЗаголовокСекции);
	ТабличныйДокумент.НачатьГруппуСтрок();
	ВывестиСтроку(ТабличныйДокумент, ОбластьСекции, ТекстФормулы);
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
	// Получим значения операндов формулы
	ТекстФормулы = "";
	ОперандыФормулы = ПолучитьОперандыФормулы(ДанныеПоказателя, ПараметрыОтчета, ТекстФормулы);
	
	///////////////////////////////////////////////////////////////////////////////////
	// Вывести текст формулы с подставленными значениями
	Если ОперандыФормулы.Количество() Тогда
		Если ОбратныйЗнак Тогда
			ТекстФормулы = "-("+ТекстФормулы+")";
		КонецЕсли;
		ОбластьЗаголовокСекции.Параметры.Заголовок = НСтр("ru='Вычисления';uk='Обчислення'");
		ТабличныйДокумент.Вывести(ОбластьЗаголовокСекции);
		ТабличныйДокумент.НачатьГруппуСтрок();
		ВывестиСтроку(ТабличныйДокумент, ОбластьСекции, ТекстФормулы);
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// Вывести результат расчета
	Область = Макет.ПолучитьОбласть("ЗначениеПоказателя");
	Область.Параметры.Результат = ДанныеПоказателя.Значение;
	ТабличныйДокумент.Вывести(Область);
	ВывестиСтроку(ТабличныйДокумент, ОбластьСекции);
	ВывестиСтроку(ТабличныйДокумент, ОбластьСекции);
	
	///////////////////////////////////////////////////////////////////////////////////
	// Вывести значения операндов
	ОбластьЗаголовокСекции.Параметры.Заголовок = НСтр("ru='Операнды формулы';uk='Операнди формули'");
	ТабличныйДокумент.Вывести(ОбластьЗаголовокСекции);
	
	Область = Макет.ПолучитьОбласть("ШапкаОперандов");
	ТабличныйДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Операнд");
	Для Каждого Операнд Из ОперандыФормулы Цикл
		Область.Параметры.Заполнить(Операнд);
		ДанныеРасшифровки = Новый Структура("Показатель, ДатаНачала, ДатаОкончания", Операнд.ЭлементОтчета);
		ДанныеРасшифровки.Вставить("ДатаНачала", Период.НачалоПериода);
		ДанныеРасшифровки.Вставить("ДатаОкончания", Период.КонецПериода);
		Если ДанныеПоказателя.Свойство("Субконто1") Тогда
			ДанныеРасшифровки.Вставить("Субконто1", ДанныеПоказателя.Субконто1);
			ДанныеРасшифровки.Вставить("ВидСубконто", ДанныеПоказателя.ВидСубконто);
		КонецЕсли;
		Область.Параметры.Показатель = ДанныеРасшифровки;
		ТабличныйДокумент.Вывести(Область);
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////
	// Установить дополнительные параметры табличного документа
	ТабличныйДокумент.ЧерноБелаяПечать = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ПараметрыОтчета.Вставить("Результат", ТабличныйДокумент);
	
КонецПроцедуры

Процедура ВывестиСтроку(ТабличныйДокумент, Область, Текст = "")
	
	Область.Параметры.Строка = Текст;
	ТекущаяОбласть = ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

Функция ПолучитьОперандыФормулы(ДанныеЭлемента, ПараметрыОтчета, ТекстФормулы)
	
	ВидОтчета = ДанныеЭлемента.Ссылка.Владелец;
	Показатель = ДанныеЭлемента.Ссылка;
	Если ЗначениеЗаполнено(ДанныеЭлемента.СвязанныйЭлемент) Тогда
		Показатель = ДанныеЭлемента.СвязанныйЭлемент;
	КонецЕсли;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаДерева = Отчеты.МеждународныйОтчет.ПолучитьМакет("ОперандыПроизводногоПоказателя");
	КомпоновщикДерева = ФинОтчеты.КомпоновщикСхемы(СхемаДерева);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "ВидОтчета", ВидОтчета);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "ЭлементОтчета", ДанныеЭлемента.Ссылка);
	КэшРеквизитов = ФинОтчеты.КэшДополнительныеРеквизиты(ВидОтчета);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "КэшРеквизитов", КэшРеквизитов);
	
	ОперандыФормулы = ФинОтчеты.ВыгрузитьРезультатСКД(СхемаДерева, КомпоновщикДерева);
	ТекстФормулы = ДанныеЭлемента.Формула;
	ПараметрыПоказателя = ПараметрыПолученияПоказателя(ПараметрыОтчета);
	Для Каждого Операнд Из ОперандыФормулы Цикл
		СтрокаОтбора = "";
		Если Операнд.ЕстьНастройки Тогда
			НастройкаОтбора = Операнд.ДополнительныйОтбор.Получить();
			Если НастройкаОтбора <> Неопределено Тогда
				СтрокаОтбора = Строка(НастройкаОтбора.Отбор);
			КонецЕсли;
		КонецЕсли;
		Операнд.Отбор = СтрокаОтбора;
		Операнд.ПредставлениеИтога = ПредставлениеТипаИтога(Операнд.ТипИтога, Операнд.НачальноеСальдо);
		ЗначенияОперанда = ЗначениеПростогоПоказателя(ПараметрыПоказателя, Операнд);
		Если ЗначенияОперанда.Количество() Тогда
			Значение = ЗначенияОперанда.Итог("Значение");
			Операнд.Значение = Формат(Значение, ПараметрыОтчета.ФорматЗначений);
			Результат = ЗначенияОперанда[0];
			СтрокаЗначения = Формат(Результат.Значение, ПараметрыОтчета.ФорматЗначений);
			Если Значение = 0 Тогда
				СтрокаЗначения = "0";
			КонецЕсли;
			ТекстФормулы = СтрЗаменить(ТекстФормулы, "["+Операнд.Идентификатор+"]", СтрокаЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстФормулы) Тогда
		ТекстФормулы = "0";
	КонецЕсли;
	
	Возврат ОперандыФормулы;
	
КонецФункции

Функция ПредставлениеТипаИтога(ТипИтога, НачальноеСальдо)
	
	Результат = "";
	ТипыИтогов = Перечисления.ТипыИтогов;
	Если ТипИтога = ТипыИтогов.Сальдо И НачальноеСальдо Тогда
		Результат = НСтр("ru='Сальдо на начало периода';uk='Сальдо на початок періоду'");
	ИначеЕсли ТипИтога = ТипыИтогов.СальдоДт И НачальноеСальдо Тогда
		Результат = НСтр("ru='Дебетовое сальдо на начало периода';uk='Дебетове сальдо на початок періоду'");
	ИначеЕсли ТипИтога = ТипыИтогов.СальдоКт И НачальноеСальдо Тогда
		Результат = НСтр("ru='Кредитовое сальдо на начало периода';uk='Кредитове сальдо на початок періоду'");
	ИначеЕсли ТипИтога = ТипыИтогов.Сальдо И НЕ НачальноеСальдо Тогда
		Результат = НСтр("ru='Сальдо на конец периода';uk='Сальдо на кінець періоду'");
	ИначеЕсли ТипИтога = ТипыИтогов.СальдоДт И НЕ НачальноеСальдо Тогда
		Результат = НСтр("ru='Дебетовое сальдо на конец периода';uk='Дебетове сальдо на кінець періоду'");
	ИначеЕсли ТипИтога = ТипыИтогов.СальдоКт И НЕ НачальноеСальдо Тогда
		Результат = НСтр("ru='Кредитовое сальдо на конец периода';uk='Кредитове сальдо на кінець періоду'");
	ИначеЕсли ТипИтога = ТипыИтогов.Оборот Тогда
		Результат = НСтр("ru='Оборот за период';uk='Оборот за період'");
	ИначеЕсли ТипИтога = ТипыИтогов.ОборотДт Тогда
		Результат = НСтр("ru='Дебетовый оборот за период';uk='Дебетовий оборот за період'");
	ИначеЕсли ТипИтога = ТипыИтогов.ОборотКт Тогда
		Результат = НСтр("ru='Кредитовый оборот за период';uk='Кредитовий оборот за період'");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункцииФормированиеОтчетности

Функция ПериодОтчета(НачалоПериода = Неопределено,КонецПериода = Неопределено) Экспорт
	
	Возврат Новый Структура("НачалоПериода,КонецПериода,Периодичность",
							 НачалоПериода,КонецПериода,Новый Массив);
	
КонецФункции

Функция ИдентификаторЭлемента(Элемент) Экспорт
	
	Если ТипЗнч(Элемент) = Тип("СтрокаДереваЗначений") Тогда
		СтрокаВидаЭлемента = НаименованиеСсылки(Элемент.ВидЭлемента) + Строка(Элемент.Код);
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Элемент,"Код,ВидЭлемента");
		СтрокаВидаЭлемента = НаименованиеСсылки(Реквизиты.ВидЭлемента) + Строка(Реквизиты.Код);
	ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда
		СтрокаВидаЭлемента = Элемент.Идентификатор;
	Иначе
		СтрокаВидаЭлемента = СтрЗаменить(ТРег(Строка(Элемент))," ","");
	КонецЕсли;
	
	СтрокаВидаЭлемента = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()/",СтрокаВидаЭлемента,"");
	
	Возврат СтрокаВидаЭлемента;
	
КонецФункции

Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник)
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник);
	
КонецПроцедуры

Функция НаименованиеСсылки(ИсходнаяСтрока)
	
	Возврат СтрЗаменить(ТРег(Строка(ИсходнаяСтрока))," ","");
	
КонецФункции

Функция НовыеПараметрыПолученияПоказателя()
	
	Результат = Новый Структура;
	Результат.Вставить("Показатель");
	Результат.Вставить("Ресурс", "Сумма");
	Результат.Вставить("ПериодОтчета", ПериодОтчета());
	Результат.Вставить("ИнтервалыОтчета");
	Результат.Вставить("ОтборОтчета", Новый СписокЗначений);
	Результат.Вставить("Субконто");
	Результат.Вставить("Измерения", Новый СписокЗначений);
	Результат.Вставить("СообщенияОбОшибках");
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеТаблицы(ЭтоПроизвольная = Ложь, ТаблицаПоказателиВКолонках = Ложь)
	
	ТипДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0));
	ТипЧисло = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипСсылкаЭлементов = Новый ОписаниеТипов("СправочникСсылка.ЭлементыФинансовыхОтчетов");
	
	ОписаниеТаблицы = Новый Структура;
	ОписаниеТаблицы.Вставить("ЭтоПроизвольная"    , ЭтоПроизвольная);
	ОписаниеТаблицы.Вставить("ТаблицаПоказателиВКолонках", ТаблицаПоказателиВКолонках);
	ОписаниеТаблицы.Вставить("Показатели"         , Новый Соответствие);
	ОписаниеТаблицы.Вставить("Периодичность"      , Новый Массив);
	ОписаниеТаблицы.Вставить("СтрокаРесурсов"     , Неопределено);
	
	// Общие колонки дерева строк и дерева колонок
	ДеревоСтрок = Новый ДеревоЗначений;
	ДеревоСтрок.Колонки.Добавить("ВидЭлемента");
	ДеревоСтрок.Колонки.Добавить("ИдентификаторЭлемента");
	ДеревоСтрок.Колонки.Добавить("ЭлементОтчета");
	ДеревоСтрок.Колонки.Добавить("НаименованиеДляПечати");
	ДеревоСтрок.Колонки.Добавить("ВыводитьЗаголовокЭлемента", ТипБулево);
	ДеревоСтрок.Колонки.Добавить("ВыделитьЭлемент", ТипБулево);
	ДеревоСтрок.Колонки.Добавить("РасположениеИтога");
	ДеревоСтрок.Колонки.Добавить("ОбратныйЗнак", ТипБулево);
	ДеревоСтрок.Колонки.Добавить("ПредставлениеПериода");
	ДеревоСтрок.Колонки.Добавить("Периодичность");
	ДеревоСтрок.Колонки.Добавить("ИмяКолонки");
	ДеревоСтрок.Колонки.Добавить("Сортировка");
	
	// Дополним таблицу колонок
	ДеревоКолонок = ДеревоСтрок.Скопировать();
	ДеревоКолонок.Колонки.Добавить("Операнды");
	ДеревоКолонок.Колонки.Добавить("ПодчиненныхЭлементов", ТипЧисло);
	ДеревоКолонок.Колонки.Добавить("ЗначениеПоказателя");
	ДеревоКолонок.Колонки.Добавить("Описание");
	
	// Дополним таблицу строк
	ДеревоСтрок.Колонки.Добавить("КодСтрокиОтчета");
	ДеревоСтрок.Колонки.Добавить("Примечание");
	ДеревоСтрок.Колонки.Добавить("ЭтоСвязанный"   , ТипБулево);
	ДеревоСтрок.Колонки.Добавить("ЗначениеГруппировки");
	
	ЗначенияПоказателей = Новый ТаблицаЗначений;
	ЗначенияПоказателей.Колонки.Добавить("ЭлементОтчета"        , ТипСсылкаЭлементов);
	ЗначенияПоказателей.Колонки.Добавить("НаименованиеДляПечати", ТипСтрока);
	ЗначенияПоказателей.Колонки.Добавить("КодСтрокиОтчета"      , ТипСтрока);
	ЗначенияПоказателей.Колонки.Добавить("Примечание"           , ТипСтрока);
	
	ОписаниеКолонок = Новый ТаблицаЗначений;
	ОписаниеКолонок.Колонки.Добавить("ИмяКолонки", ТипСтрока);
	ОписаниеКолонок.Колонки.Добавить("ВидЭлемента");
	ОписаниеКолонок.Колонки.Добавить("ЭлементОтчета", ТипСсылкаЭлементов);
	ОписаниеКолонок.Колонки.Добавить("НаименованиеДляПечати", ТипСтрока);
	ОписаниеКолонок.Колонки.Добавить("ОбратныйЗнак", ТипБулево);
	ОписаниеКолонок.Колонки.Добавить("Операнды");
	ОписаниеКолонок.Колонки.Добавить("Отбор");
	ОписаниеКолонок.Колонки.Добавить("УровеньИтога", ТипЧисло);
	ОписаниеКолонок.Колонки.Добавить("ЭтоИтог", ТипБулево);
	
	ОписаниеТаблицы.Вставить("ЗначенияПоказателей"    , ЗначенияПоказателей);
	ОписаниеТаблицы.Вставить("ШапкаТаблицы"           , Неопределено);
	ОписаниеТаблицы.Вставить("КоличествоУровнейШапки" , 0);
	ОписаниеТаблицы.Вставить("ВсегоУровнейКолонок"    , 0);
	ОписаниеТаблицы.Вставить("НомерКолонки"           , 1);
	ОписаниеТаблицы.Вставить("Ресурсы"                , Новый Массив);
	ОписаниеТаблицы.Вставить("Расшифровка"            , Новый Соответствие);
	
	ОписаниеТаблицы.Вставить("ДеревоКолонок"          , ДеревоКолонок);
	ОписаниеТаблицы.Вставить("ДеревоСтрок"            , ДеревоСтрок);
	
	ОписаниеТаблицы.Вставить("ТекущийУровень"         , Неопределено);
	ОписаниеТаблицы.Вставить("ТекущийРодитель"        , Неопределено);
	ОписаниеТаблицы.Вставить("ТекущийПоказатель"      , Неопределено);
	
	ОписаниеТаблицы.Вставить("КолонкиОтчета"          , ОписаниеКолонок);
	ОписаниеТаблицы.Вставить("ВертикальныеГруппировки", Новый Соответствие);
	
	ОписаниеТаблицы.Вставить("ИзмеренияРегистра"  , Новый Массив);
	ОписаниеТаблицы.Вставить("ИзмеренияТаблицы"   , Новый Массив);
	ОписаниеТаблицы.Вставить("ИзмеренияСтрок"     , Новый Массив);
	ОписаниеТаблицы.Вставить("ТекущиеГруппировки" , Новый Структура);
	
	Если ЭтоПроизвольная Тогда
		ОписаниеТаблицы.Вставить("СтрокаПоказателя"  , Неопределено);
		ОписаниеТаблицы.Вставить("КолонкаПоказателя" , Неопределено);
	КонецЕсли;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

Функция ДанныеТаблицыНаПечать()
	
	ДанныеНаПечать = Новый Структура;
	ДанныеНаПечать.Вставить("ВидыЭлементов");
	ДанныеНаПечать.Вставить("ДеревоСтрок");
	ДанныеНаПечать.Вставить("ЗначенияПоказателей");
	ДанныеНаПечать.Вставить("КоличествоУровнейШапки");
	ДанныеНаПечать.Вставить("КолонкиОтчета");
	ДанныеНаПечать.Вставить("Расшифровка");
	ДанныеНаПечать.Вставить("Ресурсы");
	ДанныеНаПечать.Вставить("ТаблицаПоказателиВКолонках");
	ДанныеНаПечать.Вставить("ШапкаТаблицы");
	ДанныеНаПечать.Вставить("ЭтоПроизвольная");
	
	Возврат ДанныеНаПечать;
	
КонецФункции

Функция ПустоеЗначениеПоказателя(ИнтервалыОтчета, Измерения = Неопределено) Экспорт
	
	Результат = ИнтервалыОтчета.Скопировать();
	Результат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2)));
	Для Каждого Измерение Из Измерения Цикл
		Результат.Колонки.Добавить(Измерение.Значение,, Измерение.Представление);
		Если Измерение.Значение = "Субконто1" Тогда
			Результат.Колонки.Добавить("ВидСубконто",, "ВидСубконто");
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ЭтоПоказатель(ВидЭлемента, ЭтоСвязанный = Ложь, ВидыЭлементов)
	
	Возврат ВидЭлемента = ВидыЭлементов.МонетарныйПоказатель
			ИЛИ ВидЭлемента = ВидыЭлементов.НемонетарныйПоказатель 
			ИЛИ ВидЭлемента = ВидыЭлементов.ПроизводныйПоказатель
			ИЛИ ВидЭлемента = ВидыЭлементов.ИтогПоГруппе И ЭтоСвязанный;
	
КонецФункции

Процедура ДобавитьСообщениеОбОшибке(МассивСообщений, ТекстСообщенияПользователю, КлючДанных = Неопределено)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.КлючДанных = КлючДанных;
	
	МассивСообщений.Добавить(Сообщение);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииСтандартныхБухгалтерскихОтчетов

Процедура УстановитьГруппировкуВалюты(КомпоновщикНастроек, Включить) Экспорт
	
	ГруппировкаВалюты = ФинансоваяОтчетностьСервер.НайтиГруппировку(КомпоновщикНастроек.Настройки.Структура, "Валюта");
	Если ГруппировкаВалюты <> Неопределено Тогда
		Ид = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(ГруппировкаВалюты);
		ПользовательскаяГруппировка = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(Ид);
		Если ПользовательскаяГруппировка <> Неопределено Тогда
			ПользовательскаяГруппировка.Использование = Включить;
			КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВалюту(ДокументРезультат, Валюта, ПредставлениеВалюты) Экспорт
	
	Область = ДокументРезультат.НайтиТекст(ПредставлениеВалюты + ":");
	Если СтрНайти(Область.Текст, ": " + НСтр("ru='Да';uk='Так'")) > 0 Тогда
		Область.Текст = ПредставлениеВалюты + ": " + Строка(Валюта);
	Иначе
		УдаляемаяСтрока = Лев(Область.Имя,Найти(Область.Имя,"C")-1);
		УдаляемаяОбласть = ДокументРезультат.Область(УдаляемаяСтрока);
		ДокументРезультат.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		ДокументРезультат.ФиксацияСверху = ДокументРезультат.ФиксацияСверху - 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовкиПолей(НаборДанных, ВалютаПредставления, ФункциональнаяВалюта) Экспорт
	
	Для Каждого ПолеНабораДанных Из НаборДанных.Поля Цикл
		Если ТипЗнч(ПолеНабораДанных) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
			
			Если СтрНайти(ПолеНабораДанных.Поле,"ВалютнаяСумма") > 0 Тогда 
				ПолеНабораДанных.Заголовок = "Вал.";
				
			ИначеЕсли СтрНайти(ПолеНабораДанных.Поле,"СуммаПредставления") > 0 Тогда 
				ПолеНабораДанных.Заголовок = Строка(ВалютаПредставления.Значение);
				
			ИначеЕсли СтрНайти(ПолеНабораДанных.Поле,"Сумма") > 0 Тогда 
				ПолеНабораДанных.Заголовок = Строка(ФункциональнаяВалюта.Значение);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьПоляВыбора(ПоказателиОтчета, ПоляВыбора) Экспорт
	
	Для Каждого ПолеВыбора Из ПоляВыбора Цикл
		
		ИмяПоля = Строка(ПолеВыбора.Поле);
		Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			НастроитьПоляВыбора(ПоказателиОтчета, ПолеВыбора.Элементы);
		Иначе
			Для Каждого Показатель Из ПоказателиОтчета Цикл
				Если СтрНайти(ИмяПоля, Показатель.Ключ) > 0 Тогда
					ПолеВыбора.Использование = Показатель.Значение.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииФормированияДеревьевЭлементов

// Процедура заполняет палитру новых элементов, доступных
// для выбора в экземпляре вида отчета, форме конструктора формул
//
// Параметры:
//  Форма  - УправляемаяФорма - форма, для элементов которых
//                              производится заполнение
//  Параметры  - Структура - дополнительные параметры дерева
//
Процедура ОбновитьДеревоНовыхЭлементов(Форма, Параметры) Экспорт
	
	БыстрыйПоиск = Неопределено;
	ИмяЭлементаДерева = Параметры.ИмяЭлементаДерева;
	БыстрыйПоиск = Параметры.БыстрыйПоиск;
	РежимРаботы = Параметры.РежимРаботы;
	ВидПоказателей = Параметры.ВидПоказателей;
	
	ВидыПоказателейОтчетности = Перечисления.ВидыПоказателейОтчетности;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = ФинансоваяОтчетностьСервер.ТаблицаИндексовКартинок();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаНовыеЭлементыОтчета(БыстрыйПоиск);
	
	ДоступныеВидыЭлементов = ДоступныеНовыеЭлементыОтчетов(РежимРаботы);
	Запрос.УстановитьПараметр("ДоступныеВидыЭлементов", ДоступныеВидыЭлементов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДеревоЭлементов = Форма.РеквизитФормыВЗначение(ИмяЭлементаДерева);
	ДеревоЭлементов.Строки.Очистить();
	
	// Создадим базовую структуру
	ФинансоваяОтчетностьСервер.РезультатЗапросаВДерево(МассивРезультатов[0], ДеревоЭлементов);
	// Пустой немонетарный показатель недоступен для выбора
	ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель");
	СтрокаПоказателей = ДеревоЭлементов.Строки.Найти(ВидЭлемента);
	СтрокаПоказателей.ЭтоГруппа = Истина;
	
	// Добавим сальдовые монетарные показатели
	ЗаголовокПоказателяМежд = НСтр("ru='Монетарный показатель международного учета';uk='Монетарний показник міжнародного обліку'");
	ЗаголовокПоказателяРегл = НСтр("ru='Монетарный показатель регламентированного учета';uk='Монетарний показник регламентованого обліку'");
	ПустойСчетМУ = ПланыСчетов.Международный.ПустаяСсылка();
	ПустойСчетРегл = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Если ВидПоказателей = ВидыПоказателейОтчетности.Международные Тогда
		ДобавитьМонетарныеПоказатели(ДеревоЭлементов, МассивРезультатов[1], ПустойСчетМУ, ЗаголовокПоказателяМежд);
	ИначеЕсли ВидПоказателей = ВидыПоказателейОтчетности.Регламентированные Тогда
		ДобавитьМонетарныеПоказатели(ДеревоЭлементов, МассивРезультатов[2], ПустойСчетРегл, ЗаголовокПоказателяРегл);
	ИначеЕсли ВидПоказателей = ВидыПоказателейОтчетности.МеждународныеИРегламентированные Тогда
		ДобавитьМонетарныеПоказатели(ДеревоЭлементов, МассивРезультатов[1], ПустойСчетМУ, ЗаголовокПоказателяМежд);
		ДобавитьМонетарныеПоказатели(ДеревоЭлементов, МассивРезультатов[2], ПустойСчетРегл, ЗаголовокПоказателяРегл, Истина);
	КонецЕсли;
	
	// Добавим немонетарные показатели
	СтрокаНемонетарных = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель);
	ФинансоваяОтчетностьСервер.РезультатЗапросаВДерево(МассивРезультатов[3], СтрокаНемонетарных);
	
	Если РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаОтчета Тогда
	
		// Добавим элементы таблицы
		СтрокаТаблицы = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
		СтрокаЭлемент = СтрокаТаблицы.Строки.Добавить();
		ЭлементТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы;
		СтрокаЭлемент.НестандартнаяКартинка = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(ЭлементТаблицы);
		СтрокаЭлемент.Наименование = Строка(ЭлементТаблицы);
		СтрокаЭлемент.НаименованиеДляПечати = Строка(ЭлементТаблицы);
		СтрокаЭлемент.ВидЭлемента = ЭлементТаблицы;
		
		// Добавим измерения
		ДобавитьИзмеренияВДеревоНовыхЭлементов(ДеревоЭлементов, ВидПоказателей, БыстрыйПоиск);
		
	КонецЕсли;// РежимРаботы = НастройкаВидаОтчета
	
	Форма.ЗначениеВРеквизитФормы(ДеревоЭлементов, ИмяЭлементаДерева);
	
КонецПроцедуры

// Функция возвращает дерево элементов вида отчета 
//
// Параметры:
//  ВидОтчета  - СправочникСсылка.ВидыФинансовыхОтчетов - вид отчета, для которого требуется построить дерево
//  ВыводитьЭлементаСложнойТаблицы  - Булево - признак, что требуется выводить элементы, 
//                                             подчиненные элементу "Настройка Ячеек"
//
// Возвращаемое значение:
//   ДеревоЗначений - дерево элементов финансового отчета
//
Функция ОбновитьДеревоОтчета(ВидОтчета, Знач РодительЭлементов = Неопределено, КэшРеквизитов = Неопределено, ВыводитьЭлементыСложнойТаблицы = Ложь) Экспорт
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаДерева = Справочники.ВидыФинансовыхОтчетов.ПолучитьМакет("ДеревоЭлементовОтчета");
	Если ЗначениеЗаполнено(РодительЭлементов) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РодительЭлементов,"ВидЭлемента,Родитель");
		Если Реквизиты.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе Тогда
			РодительЭлементов = Реквизиты.Родитель;
			СхемаДерева.СвязиНаборовДанных.Удалить(СхемаДерева.СвязиНаборовДанных[0]);
			ТекстЗапроса = СхемаДерева.НаборыДанных.ЭлементыОтчета.Запрос;
			СхемаДерева.НаборыДанных.ЭлементыОтчета.Запрос = СтрЗаменить(ТекстЗапроса, "И ЭлементыФинОтчетов.Родитель В(&Родители)", "");
		КонецЕсли;
	КонецЕсли;
	КомпоновщикДерева = ФинОтчеты.КомпоновщикСхемы(СхемаДерева);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "ВыводитьЭлементыСложнойТаблицы", ВыводитьЭлементыСложнойТаблицы);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "ВидОтчета", ВидОтчета);
	КэшРеквизитов = ФинОтчеты.КэшДополнительныеРеквизиты(ВидОтчета);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "КэшРеквизитов", КэшРеквизитов);
	
	Если РодительЭлементов <> Неопределено Тогда
		ФинОтчеты.УстановитьОтбор(КомпоновщикДерева.Настройки.Отбор,"ЭлементОтчета",РодительЭлементов,ВидСравненияКомпоновкиДанных.ВИерархии);
	КонецЕсли;
	
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(СхемаДерева, КомпоновщикДерева,,Истина);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьДеревоСохраненныхЭлементов(Форма, Параметры) Экспорт
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	ИмяЭлементаДерева = ФинОтчеты.ПолучитьПараметр(Параметры,"ИмяЭлементаДерева");
	ФильтрПоВидуОтчета = ФинОтчеты.ПолучитьПараметр(Параметры,"ФильтрПоВидуОтчета");
	ТекущийВидОтчета = ФинОтчеты.ПолучитьПараметр(Параметры,"ТекущийВидОтчета");
	БыстрыйПоиск = ФинОтчеты.ПолучитьПараметр(Параметры,"БыстрыйПоиск");
	ВыводитьЭлементыСложнойТаблицы = ФинОтчеты.ПолучитьПараметр(Параметры,"ВыводитьЭлементыСложнойТаблицы", Ложь);
	РежимРаботы = Параметры.РежимРаботы;
	ВидПоказателей = Параметры.ВидПоказателей;
	ДоступныеВидыЭлементов = ДоступныеСохраненныеЭлементыОтчетов(РежимРаботы);
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаДерева = Справочники.ВидыФинансовыхОтчетов.ПолучитьМакет("ДеревоСохраненныхЭлементов");
	КомпоновщикДерева = ФинОтчеты.КомпоновщикСхемы(СхемаДерева);
	НастройкиКД = КомпоновщикДерева.Настройки;
	ФинОтчеты.НовоеПолеВыбора(НастройкиКД,"СвязанныйЭлемент.[Счет плана счетов]","Счет плана счетов");
	ФинОтчеты.НовоеПолеВыбора(НастройкиКД,"СвязанныйЭлемент.[Тип итога]","Тип итога");
	ФинОтчеты.НовоеПолеВыбора(НастройкиКД,"СвязанныйЭлемент.[Начальное сальдо]","Начальное сальдо");
	ФинОтчеты.НовоеПолеВыбора(НастройкиКД,"СвязанныйЭлемент.[Немонетарный показатель]","Немонетарный показатель");
	ФинОтчеты.НовоеПолеВыбора(НастройкиКД,"СвязанныйЭлемент.[Выводить заголовок элемента]","Выводить заголовок элемента");
	
	ФинОтчеты.УстановитьПараметрКомпоновки(НастройкиКД, "ДоступныеВидыЭлементов", ДоступныеВидыЭлементов);
	ФинОтчеты.УстановитьПараметрКомпоновки(НастройкиКД, "ВыводитьЭлементыСложнойТаблицы", ВыводитьЭлементыСложнойТаблицы);
	ФинОтчеты.УстановитьПараметрКомпоновки(НастройкиКД, "ВидПоказателей", ВидПоказателей);
	ФинОтчеты.УстановитьПараметрКомпоновки(НастройкиКД, "ТекущийОтчет", ТекущийВидОтчета);
	
	ФинОтчеты.УстановитьОтбор(НастройкиКД.Отбор, "НаименованиеДляПечати", БыстрыйПоиск,,ЗначениеЗаполнено(БыстрыйПоиск));
	ФинОтчеты.УстановитьОтбор(НастройкиКД.Отбор, "ВидОтчета", ФильтрПоВидуОтчета,,ЗначениеЗаполнено(ФильтрПоВидуОтчета));
	
	ДеревоЭлементов = ФинОтчеты.ВыгрузитьРезультатСКД(СхемаДерева, КомпоновщикДерева,,Истина);
	
	ДопРеквизиты = Новый Структура("СчетПланаСчетов,ТипИтога,НачальноеСальдо,НемонетарныйПоказатель,ВыводитьЗаголовокЭлемента");
	Для Каждого Колонка Из ДеревоЭлементов.Колонки Цикл
		Для Каждого Реквизит Из ДопРеквизиты Цикл
			Если СтрНайти(Колонка.Имя, Реквизит.Ключ) > 0 Тогда
				Колонка.Имя = Реквизит.Ключ;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель");
	Отбор = Новый Структура("ВидЭлемента", ВидЭлемента);
	МонетарныеПоказатели = ДеревоЭлементов.Строки.НайтиСтроки(Отбор, Истина);
	Для Каждого Показатель Из МонетарныеПоказатели Цикл
		Если ТипЗнч(Показатель.СчетПланаСчетов) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
			Показатель.НестандартнаяКартинка = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(ВидЭлемента, "Регл");
		КонецЕсли;
	КонецЦикла;
		
	СгруппироватьДеревоПоВидамОтчетов(ДеревоЭлементов);
	
	Форма.ЗначениеВРеквизитФормы(ДеревоЭлементов, ИмяЭлементаДерева);
	
КонецПроцедуры

Процедура ОбновитьДеревоСсылокЭлемента(Форма, Параметры) Экспорт
	
	БыстрыйПоиск = Неопределено;
	ИмяЭлементаДерева = ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры,"ИмяЭлементаДерева");
	ЭлементОтчета = ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры,"ЭлементОтчета");
	СчетПланаСчетов = ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры,"СчетПланаСчетов");
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = ФинансоваяОтчетностьСервер.ТаблицаИндексовКартинок();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаСсылокНаЭлементОтчета();
	ЭтоСчетМУ = Истина;
	Если ЗначениеЗаполнено(СчетПланаСчетов) Тогда
		ЭтоСчетМУ = ТипЗнч(СчетПланаСчетов) = Тип("ПланСчетовСсылка.Международный");
	КонецЕсли;
	Запрос.УстановитьПараметр("ЭтоСчетМУ", ЭтоСчетМУ);
	Запрос.УстановитьПараметр("ЭлементОтчета", ЭлементОтчета);
	Запрос.УстановитьПараметр("Владелец", ЭлементОтчета.Владелец);
	РезультатЗапроса = Запрос.Выполнить();
	
	ДеревоЭлементов = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Параметры.Вставить("КоличествоСсылок", ДеревоЭлементов.Строки.Количество());
	
	СгруппироватьДеревоПоВидамОтчетов(ДеревоЭлементов);
	
	Форма.ЗначениеВРеквизитФормы(ДеревоЭлементов, ИмяЭлементаДерева);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаНовыеЭлементыОтчета(БыстрыйПоиск)
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|// 1. БАЗОВАЯ СТРУКТУРА
	|"
	+
	"ВЫБРАТЬ
	|	ВидыЭлементовОтчетов.Ссылка КАК ВидЭлемента,
	|	ТаблицаИндексовКартинок.ИндексКартинки КАК НестандартнаяКартинка,
	|	ПРЕДСТАВЛЕНИЕ(ВидыЭлементовОтчетов.Ссылка) КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ВидыЭлементовОтчетов.Ссылка) КАК НаименованиеДляПечати
	|
	|ИЗ
	|	Перечисление.ВидыЭлементовФинансовогоОтчета КАК ВидыЭлементовОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок
	|		ПО ВидыЭлементовОтчетов.Ссылка = ТаблицаИндексовКартинок.ВидЭлемента
	|		И ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """"
	|
	|ГДЕ
	|	ВидыЭлементовОтчетов.Ссылка В (&ДоступныеВидыЭлементов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЭлементовОтчетов.Порядок"
	+"
	|;";
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|// 2.1.1 БАЗОВЫЕ МОНЕТАРНЫЕ ПОКАЗАТЕЛИ ПО МЕЖДУНАРОДНОМУ ПЛАНУ СЧЕТОВ
	|"
	+
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель) КАК ВидЭлемента,
	|	ТаблицаИндексовКартинок.ИндексКартинки КАК НестандартнаяКартинка,
	|	ЭлементыФинОтчетов.Ссылка КАК ЭлементВидаОтчетности,
	|	ЭлементыФинОтчетов.Код КАК КодСчета,
	|	ЭлементыФинОтчетов.Порядок КАК Код,
	|	ЭлементыФинОтчетов.Наименование КАК Наименование,
	|	ЭлементыФинОтчетов.Наименование КАК НаименованиеДляПечати
	|ИЗ
	|	ПланСчетов.Международный КАК ЭлементыФинОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок КАК ТаблицаИндексовКартинок
	|		ПО (ТаблицаИндексовКартинок.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель))
	|			И (ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """")
	|ГДЕ
	|	ЭлементыФинОтчетов.ПометкаУдаления = ЛОЖЬ"
	+ ?(ЗначениеЗаполнено(БыстрыйПоиск), "	И (ЭлементыФинОтчетов.Наименование ПОДОБНО ""%" +  СокрЛП(БыстрыйПоиск) + "%""
							|		ИЛИ ЭлементыФинОтчетов.Код ПОДОБНО ""%" +  СокрЛП(БыстрыйПоиск) + "%"")", "") + 
	"
	|УПОРЯДОЧИТЬ ПО 
	|	Код ИЕРАРХИЯ"
	+"
	|;";
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|// 2.1.2 БАЗОВЫЕ МОНЕТАРНЫЕ ПОКАЗАТЕЛИ ПО РЕГЛАМЕНТИРОВАННОМУ ПЛАНУ СЧЕТОВ
	|"
	+
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель) КАК ВидЭлемента,
	|	ТаблицаИндексовКартинок.ИндексКартинки КАК НестандартнаяКартинка,
	|	ЭлементыФинОтчетов.Ссылка КАК ЭлементВидаОтчетности,
	|	ЭлементыФинОтчетов.Код КАК КодСчета,
	|	ЭлементыФинОтчетов.Порядок КАК Код,
	|	ЭлементыФинОтчетов.Наименование КАК Наименование,
	|	ЭлементыФинОтчетов.Наименование КАК НаименованиеДляПечати
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ЭлементыФинОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок КАК ТаблицаИндексовКартинок
	|		ПО (ТаблицаИндексовКартинок.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель))
	|			И (ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = ""Регл"")
	|ГДЕ
	|	ЭлементыФинОтчетов.ПометкаУдаления = ЛОЖЬ"
	+ ?(ЗначениеЗаполнено(БыстрыйПоиск), "	И (ЭлементыФинОтчетов.Наименование ПОДОБНО ""%" +  СокрЛП(БыстрыйПоиск) + "%""
										|		ИЛИ ЭлементыФинОтчетов.Код ПОДОБНО ""%" +  СокрЛП(БыстрыйПоиск) + "%"")", "") + 
	"
	|УПОРЯДОЧИТЬ ПО 
	|	Код ИЕРАРХИЯ
	|;";
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|// 2.2. НЕМОНЕТАРНЫЕ ПОКАЗАТЕЛИ
	|"
	+
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель) КАК ВидЭлемента,
	|	ТаблицаИндексовКартинок.ИндексКартинки КАК НестандартнаяКартинка,
	|	НемонетарныеПоказатели.Ссылка КАК ЭлементВидаОтчетности,
	|	НемонетарныеПоказатели.Код КАК Код,
	|	НемонетарныеПоказатели.Наименование КАК Наименование,
	|	НемонетарныеПоказатели.НаименованиеДляПечати КАК НаименованиеДляПечати,
	|	НемонетарныеПоказатели.ЭтоГруппа КАК ЭтоГруппа
	|
	|ИЗ
	|	Справочник.НемонетарныеПоказатели КАК НемонетарныеПоказатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок КАК ТаблицаИндексовКартинок
	|		ПО (ВЫБОР
	|				КОГДА НемонетарныеПоказатели.ЭтоГруппа
	|					ТОГДА ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = ""Группа""
	|				ИНАЧЕ ТаблицаИндексовКартинок.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель)
	|						И ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """"
	|			КОНЕЦ)
	|ГДЕ
	|	НемонетарныеПоказатели.ПометкаУдаления = ЛОЖЬ
	|	И НемонетарныеПоказатели.Предопределенный = ЛОЖЬ
	|"
	+ ?(ЗначениеЗаполнено(БыстрыйПоиск), "	И НемонетарныеПоказатели.НаименованиеДляПечати ПОДОБНО ""%" +  СокрЛП(БыстрыйПоиск) + "%""", "") + 
	"
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа ИЕРАРХИЯ,
	|	Наименование
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСсылокНаЭлементОтчета() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЭлементыФинОтчетов.Владелец КАК ВидОтчета,
	|	ЭлементыФинОтчетов.Ссылка КАК ЭлементОтчета,
	|	ЭлементыФинОтчетов.НаименованиеДляПечати КАК НаименованиеДляПечати,
	|	ТаблицаИндексовКартинок.ИндексКартинки + 1 КАК НестандартнаяКартинка
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок
	|		ПО ЭлементыФинОтчетов.ВидЭлемента = ТаблицаИндексовКартинок.ВидЭлемента
	|		И ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """"
	|ГДЕ
	|	ЭлементыФинОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И (ЭлементыФинОтчетов.СвязанныйЭлемент = &ЭлементОтчета
	|				И (ЭлементыФинОтчетов.Владелец <> &Владелец ИЛИ &Владелец = НЕОПРЕДЕЛЕНО)
	|	)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеДляПечати";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СгруппироватьДеревоПоВидамОтчетов(Дерево)
	
	ДеревоПоВидамОтчетов = Дерево.Скопировать();
	ДеревоПоВидамОтчетов.Строки.Очистить();
	
	СтрокиДерева = Дерево.Строки;
	СтрокиДерева.Сортировать("ВидОтчета");
	СтрокиДереваПоВидамОтчетов = ДеревоПоВидамОтчетов.Строки;
	ГруппирующаяСтрока = Неопределено;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл 
		
		Если ГруппирующаяСтрока = Неопределено ИЛИ ГруппирующаяСтрока.ВидОтчета <> СтрокаДерева.ВидОтчета Тогда
			ГруппирующаяСтрока = СтрокиДереваПоВидамОтчетов.Добавить();
			ГруппирующаяСтрока.НаименованиеДляПечати = СтрокаДерева.ВидОтчета;
			ГруппирующаяСтрока.ВидОтчета = СтрокаДерева.ВидОтчета;
			ГруппирующаяСтрока.НестандартнаяКартинка = 43;
		КонецЕсли;

		ФинансоваяОтчетностьКлиентСервер.УстановитьНовогоРодителя(СтрокаДерева, ГруппирующаяСтрока, Истина);
		
	КонецЦикла;
	
	Дерево = ДеревоПоВидамОтчетов;
	
КонецПроцедуры

Функция ДоступныеНовыеЭлементыОтчетов(РежимДерева = Неопределено)
	
	РежимыРаботыДерева = Перечисления.РежимыОтображенияДереваНовыхЭлементов;
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель);
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель);
	Если РежимДерева = РежимыРаботыДерева.НастройкаВидаОтчетаТолькоПоказатели Тогда
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
	КонецЕсли;
	
	Если РежимДерева = РежимыРаботыДерева.НастройкаВидаОтчета Тогда// остальные
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НередактируемыйТекст);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемыйТекст);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Группа);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе);
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция ДоступныеСохраненныеЭлементыОтчетов(РежимДерева)
	
	РежимыРаботыДерева = Перечисления.РежимыОтображенияДереваНовыхЭлементов;
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель);
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель);
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
	
	Если РежимДерева = РежимыРаботыДерева.НастройкаВидаОтчета Тогда// остальные кроме измерений
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НередактируемыйТекст);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемыйТекст);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Группа);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе);
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Процедура ДобавитьМонетарныеПоказатели(ДеревоЭлементов, РезультатЗапроса, Счет, НаименованиеДляПечати, ДобавитьСтроку = Ложь)
	
	ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель");
	// Добавим сальдовые монетарные показатели
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СтрокаПоказателей = ДеревоЭлементов.Строки.Найти(ВидЭлемента);
		Если ДобавитьСтроку Тогда
			СтрокаПоказателей.Наименование = СтрокаПоказателей.НаименованиеДляПечати;
			Индекс = ДеревоЭлементов.Строки.Индекс(СтрокаПоказателей);
			СтрокаПоказателей = ДеревоЭлементов.Строки.Вставить(Индекс + 1);
			СтрокаПоказателей.ВидЭлемента = ВидЭлемента;
			СтрокаПоказателей.Наименование = НаименованиеДляПечати;
		КонецЕсли;
		СтрокаПоказателей.ЭлементВидаОтчетности = Счет;
		СтрокаПоказателей.НестандартнаяКартинка = ?(ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Международный"),9,39);
		СтрокаПоказателей.НаименованиеДляПечати = НаименованиеДляПечати;
		ФинансоваяОтчетностьСервер.РезультатЗапросаВДерево(РезультатЗапроса, СтрокаПоказателей);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИзмеренияВДеревоНовыхЭлементов(ДеревоЭлементов, ВидПоказателей, БыстрыйПоиск)

	ВидыПоказателейОтчетности = Перечисления.ВидыПоказателейОтчетности;
	СтрокаИзмерения = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение);
	СтрокаИзмерения.ВидЭлемента = Неопределено; //группировочная запись измерений не может быть перенесена в элементы отчета
	
	// Добавление периода
	СтрокаПериод = ДобавитьСтрокуИзмерения(СтрокаИзмерения, "Период");
	СтрокаПериод.ВидЭлемента = Неопределено; //группировочная запись измерений не может быть перенесена в элементы бюджета
	СтрокаПериод.ЭтоГруппа = Истина;
	СтрокаПериод.НестандартнаяКартинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(Неопределено, "Группа");
	
	ДобавитьСтрокуИзмерения(СтрокаПериод, НСтр("ru='Год';uk='Рік'")      , ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
	ДобавитьСтрокуИзмерения(СтрокаПериод, НСтр("ru='Полугодие';uk='Півріччя'"), ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие"));
	ДобавитьСтрокуИзмерения(СтрокаПериод, НСтр("ru='Квартал';uk='Квартал'")  , ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"));
	ДобавитьСтрокуИзмерения(СтрокаПериод, НСтр("ru='Месяц';uk='Місяць'")    , ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
	
	// Добавление видов субконто
	ЗаголовокМежд = НСтр("ru='Виды субконто международные';uk='Види субконто міжнародні'");
	ЗаголовокРегл = НСтр("ru='Виды субконто хозрасчетные';uk='Види субконто госпрозрахункові'");
	Если ВидПоказателей = ВидыПоказателейОтчетности.Международные Тогда
		ДобавитьВидыСубконто(СтрокаИзмерения, ЗаголовокМежд, БыстрыйПоиск);
	ИначеЕсли ВидПоказателей = ВидыПоказателейОтчетности.Регламентированные Тогда
		ДобавитьВидыСубконто(СтрокаИзмерения, ЗаголовокРегл, БыстрыйПоиск, "ВидыСубконтоХозрасчетные");
	ИначеЕсли ВидПоказателей = ВидыПоказателейОтчетности.МеждународныеИРегламентированные Тогда
		ДобавитьВидыСубконто(СтрокаИзмерения, ЗаголовокМежд, БыстрыйПоиск);
		ДобавитьВидыСубконто(СтрокаИзмерения, ЗаголовокРегл, БыстрыйПоиск, "ВидыСубконтоХозрасчетные");
	КонецЕсли;
	
	// Добавление организации
	ДобавитьСтрокуИзмерения(СтрокаИзмерения, "Организация");
	
	// Добавление подразделения
	ДобавитьСтрокуИзмерения(СтрокаИзмерения, "Подразделение");
	
КонецПроцедуры

Процедура ДобавитьВидыСубконто(СтрокаИзмерения, ИмяГруппы, БыстрыйПоиск, ИмяТаблицы = "")
	
	СтрокаСубконто = ДобавитьСтрокуИзмерения(СтрокаИзмерения, ИмяГруппы);
	СтрокаСубконто.ВидЭлемента = Неопределено;	//группировочная запись о измерениях 
	СтрокаСубконто.ЭтоГруппа = Истина; 		//не может быть перенесена в элементы отчета
	СтрокаСубконто.НестандартнаяКартинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(Неопределено, "Группа");
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыСубконто.Ссылка,
	|	ВидыСубконто.Наименование КАК Наименование
	|ИЗ
	|	ПланВидовХарактеристик.ВидыСубконтоМеждународные КАК ВидыСубконто
	|ГДЕ
	|	НЕ ВидыСубконто.ПометкаУдаления
	|"+ ?(ЗначениеЗаполнено(БыстрыйПоиск),
			"	И ВидыСубконто.Наименование ПОДОБНО ""%" +  СокрЛП(БыстрыйПоиск) + "%""","") 
	+"
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Если НЕ ПустаяСтрока(ИмяТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВидыСубконтоМеждународные",ИмяТаблицы);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДобавитьСтрокуИзмерения(СтрокаСубконто, Выборка.Наименование, Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьСтрокуИзмерения(СтрокаКудаДобавлять, Наименование, ЭлементОтчета = Неопределено)
	
	НоваяСтрока = СтрокаКудаДобавлять.Строки.Добавить();
	Измерение = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.Измерение");
	НоваяСтрока.ВидЭлемента = Измерение;
	НоваяСтрока.НестандартнаяКартинка = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(Измерение);
	НоваяСтрока.Наименование = Наименование;
	НоваяСтрока.НаименованиеДляПечати = Наименование;
	НоваяСтрока.ЭлементВидаОтчетности = ?(ЭлементОтчета = Неопределено, Наименование, ЭлементОтчета);
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция КомплектОтчетностиВидаОтчета(ВидОтчета) Экспорт
	
	Результат = Справочники.КомплектыФинансовыхОтчетов.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КомплектыФинансовыхОтчетовВидыОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КомплектыФинансовыхОтчетов.ВидыОтчетов КАК КомплектыФинансовыхОтчетовВидыОтчетов
	|ГДЕ
	|	КомплектыФинансовыхОтчетовВидыОтчетов.ВидФинансовогоОтчета = &ВидФинансовогоОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ВидФинансовогоОтчета", ВидОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет содержится ли в отборе переданные значения счета, вида субконто и значения субконто.
// Результат равен истина если все не пустые значения содержутся в отборе. 
// Если значение пустое, то его наличие в отборе не проверяется и на результат функции оно не оказывает влияния.
// Например: Если передан счет и вид субконто, то результат будет равен истина если в отборе содержится и счет 
//           и в отборе есть поля с типом содержащиеся в типе вида субконто.
//           Если передан только счет, то результат будет истина если он содержится в отборе.
Функция ХранилищеОтбораСодержитЗначения(ХранилищеОтбора, Счет, ВидСубконто, ЗначениеСубконто, ИсключитьСчет = Ложь) Экспорт
	
	Если ХранилищеОтбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьСчет = ЗначениеЗаполнено(Счет) И НЕ ИсключитьСчет;
	ЕстьВид  = ЗначениеЗаполнено(ВидСубконто);
	ЕстьЗнач = ЗначениеЗаполнено(ЗначениеСубконто);
	Если НЕ ЕстьСчет И НЕ ЕстьВид И НЕ ЕстьЗнач Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиОтбора = ХранилищеОтбора.Получить();
	Если НастройкиОтбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СчетОК = ЕстьСчет И ОтборСодержитЗначение(НастройкиОтбора.Отбор, Счет);
	ВидОК  = ЕстьВид И ОтборСодержитТип(НастройкиОтбора.Отбор, ВидСубконто);
	ЗначОК = ЕстьЗнач И ОтборСодержитЗначение(НастройкиОтбора.Отбор, ЗначениеСубконто);
	
	Возврат НЕ ЕстьСчет И (ВидОК И (НЕ ЕстьЗнач ИЛИ ЗначОК) 
							ИЛИ НЕ ЕстьВид И ЗначОК)
			ИЛИ СчетОК И (ВидОК И (НЕ ЕстьЗнач ИЛИ ЗначОК) 
							ИЛИ НЕ ЕстьВид И (НЕ ЕстьЗнач ИЛИ ЗначОК));
	
КонецФункции

Функция ОтборСодержитЗначение(ОтборКД, Значение)
	
	Результат = Ложь;
	Для Каждого ЭлементОтбора Из ОтборКД.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = ОтборСодержитЗначение(ЭлементОтбора, Значение);
			Если Результат Тогда
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
			ЭлементСписка = ЭлементОтбора.ПравоеЗначение.НайтиПоЗначению(Значение);
			Если ЭлементСписка <> Неопределено Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ЭлементОтбора.ПравоеЗначение = Значение И ЭлементОтбора.ПравоеЗначение <> Неопределено Тогда
			Результат = Истина;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ОтборСодержитТип(ОтборКД, ВидСубконто)
	
	Если НЕ ЗначениеЗаполнено(ВидСубконто) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	Для Каждого ЭлементОтбора Из ОтборКД.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = ОтборСодержитТип(ЭлементОтбора, ВидСубконто);
			Если Результат Тогда
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ЭлементОтбора.ПравоеЗначение = Неопределено Тогда
			// Пропустить ход
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
			Для Каждого Элемент Из ЭлементОтбора.ПравоеЗначение Цикл
				Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Элемент.Значение)) Тогда
					Результат = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЭлементОтбора.ПравоеЗначение)) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
