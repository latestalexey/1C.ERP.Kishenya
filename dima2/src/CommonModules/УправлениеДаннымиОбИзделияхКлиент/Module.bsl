////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Спецификации

// Формирует массив из данных формы
//
// Параметры:
//  АльтернативныеВидыРЦ	- ДанныеФормыКоллекция - табличная часть, содержащая альтернативные виды РЦ
//
// Возвращаемое значение:
//   Массив   - содержит массив структур
//
Функция ПолучитьМассивВидовРЦ(СписокСтрок) Экспорт

	МассивВидовРЦ = Новый Массив;
	
	Для каждого ЭлементКоллекции Из СписокСтрок Цикл
		НоваяСтрока = Новый Структура("ВидРабочегоЦентра,ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
										|ВремяРаботы,ЕдиницаИзмерения,ВариантНаладки");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		МассивВидовРЦ.Добавить(НоваяСтрока);
	КонецЦикла; 

	Возврат МассивВидовРЦ;
	
КонецФункции

// Копирует спецификацию и этапы
//
// Параметры:
//  Источник							- СправочникСсылка.РесурсныеСпецификации - спецификация, которую нужно скопировать
//  ОписаниеОбработкиПослеКопирования	- ОписаниеОповещения - содержит описание процедуры, которую нужно вызвать после копирования
//
Функция КопироватьРесурснуюСпецификацию(Источник, ОписаниеОбработкиПослеКопирования = Неопределено) Экспорт

	ТекстВопроса = НСтр("ru='Будет создана и записана копия ресурсной спецификации (включая этапы производственного процесса).
                                |Скопировать?'
                                |;uk='Буде створена та записана копія ресурсної специфікації (включаючи етапи виробничого процесу).
                                |Скопіювати?'");
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Скопировать';uk='Скопіювати'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ДополнительныеПараметры = Новый Структура("Источник,ОписаниеОбработкиПослеКопирования", Источник, ОписаниеОбработкиПослеКопирования);
	ОписаниеОповещения = Новый ОписаниеОповещения("КопироватьРесурснуюСпецификациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	
КонецФункции

// Формирует оповещение о записи основной спецификации
// Используется для обновления данных в формах и для информирования пользователя о завершенной операции
//
// Параметры        	
//  СвойстваЗаписи - Структура или Запись регистра - содержит значения свойств записи
//  НавигационнаяСсылка - Строка - навигационная ссылка на измененную запись
//
Процедура ОповеститьОЗаписиОсновнойСпецификации(СвойстваЗаписи = Неопределено, НавигационнаяСсылка = Неопределено) Экспорт

	Если СвойстваЗаписи <> Неопределено Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Подразделение",  СвойстваЗаписи.Подразделение);
		СтруктураЗаписи.Вставить("Номенклатура",   СвойстваЗаписи.Номенклатура);
		СтруктураЗаписи.Вставить("Характеристика", СвойстваЗаписи.Характеристика);
		СтруктураЗаписи.Вставить("Спецификация",   СвойстваЗаписи.Спецификация);
	Иначе
		СтруктураЗаписи = Неопределено;
	КонецЕсли; 
	
	Оповестить("Запись_ОсновныеСпецификации", СтруктураЗаписи);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ОсновныеСпецификации"));
	
	Если НавигационнаяСсылка <> Неопределено Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Изменена основная спецификация';uk='Змінена основна специфікація'"), НавигационнаяСсылка);
		ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
	КонецЕсли; 
	
КонецПроцедуры

// Назначает спецификацию основной для указанного изделия и подразделения
//
// Параметры
//  Подразделение	- СправочникСсылка.СтруктураПредприятия - подразделение за которым закреплено обеспечение изделием
//  Номенклатура	- СправочникСсылка.Номенклатура - производимое изделие
//  Характеристика	- СправочникСсылка.ХарактеристикиНоменклатуры - характеристика производимого изделия
//  Спецификация	- СправочникСсылка.РесурсныеСпецификации - основная спецификация
//
// Возвращаемое значение:
//   Булево   - Истина, если спецификация назначена основной
//
Функция НазначитьОсновнойСпецификацией(Подразделение, Номенклатура, Характеристика, Спецификация) Экспорт
	Перем СтруктураОшибки;
	
	СвойстваЗаписи = Новый Структура;
	СвойстваЗаписи.Вставить("Подразделение",  Подразделение);
	СвойстваЗаписи.Вставить("Номенклатура",   Номенклатура);
	СвойстваЗаписи.Вставить("Характеристика", Характеристика);
	СвойстваЗаписи.Вставить("Спецификация",   Спецификация);
	
	НавигационнаяСсылка = Неопределено;
	Результат = УправлениеДаннымиОбИзделияхВызовСервера.НазначитьОсновнойСпецификацией(СвойстваЗаписи, НавигационнаяСсылка, СтруктураОшибки);
	
	Если Результат Тогда
		ОповеститьОЗаписиОсновнойСпецификации(СвойстваЗаписи, НавигационнаяСсылка);
	ИначеЕсли СтруктураОшибки.Свойство("ТекстОшибки") Тогда
		ПоказатьПредупреждение(,СтруктураОшибки.ТекстОшибки,, НСтр("ru='Не удалось назначить спецификацию основной';uk='Не вдалося призначити специфікацію основною'"));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Открывает форму основных спецификаций для указанного изделия
//
// Параметры
//  Номенклатура 				- СправочникСсылка.Номенклатура - производимое изделие.
//  ПараметрыВыполненияКоманды	- ПараметрыВыполненияКоманды - описывает структуру, передаваемую в обработчик команды.
//
Процедура ПоказатьОсновныеСпецификацииИзделия(Номенклатура, Спецификация = Неопределено, ПараметрыВыполненияКоманды = Неопределено) Экспорт

	СтруктураБыстрогоОтбора = Новый Структура("Номенклатура", Номенклатура);
	ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора,ДляЗаданнойНоменклатуры", СтруктураБыстрогоОтбора, Истина);
	Если Спецификация <> Неопределено И НЕ Спецификация.Пустая() Тогда
		ПараметрыФормы.Вставить("ДляЗаданнойСпецификации", Спецификация);
	КонецЕсли;
	
	Если ПараметрыВыполненияКоманды = Неопределено Тогда
		ОткрытьФорму("РегистрСведений.ОсновныеСпецификации.ФормаСписка", ПараметрыФормы);
	Иначе
		ОткрытьФорму("РегистрСведений.ОсновныеСпецификации.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	КонецЕсли; 
	
КонецПроцедуры

// Устанавливает новый статус для спецификаций
//
// Параметры:
//	НовыйСтатус				- ПеречислениеСсылка.СтатусыСпецификаций - новый статус
//	ПредставлениеСтатуса	- Строка - представление нового статуса
//  МассивСпецификаций		- Массив - список спецификаций
//
Процедура УстановитьСтатусСпецификаций(НовыйСтатус, ПредставлениеСтатуса, МассивСпецификаций) Экспорт
	
	Если МассивСпецификаций.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеСтатуса",      НовыйСтатус);
	ДополнительныеПараметры.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
	ДополнительныеПараметры.Вставить("ВыделенныеСсылки",     МассивСпецификаций);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусСпецификацийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru='Выбранным спецификациям будет установлен статус ""%1"". Продолжить?';uk='Вибраним специфікаціям буде встановлено статус ""%1"". Продовжити?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеСтатуса);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

//++ НЕ УТКА

// Открывает форму для ввода параметров новой спецификации
//
// Параметры:
//	ТекущиеДанные		- ДанныеФормыСтруктура - содержит данные о продукции
//  						* Номенклатура		- СправочникСсылка.Номенклатура - производимое изделие
//  						* Характеристика	- СправочникСсылка.ХарактеристикиНоменклатуры - характеристика производимого изделия
//  						* Спецификация		- СправочникСсылка.РесурсныеСпецификации - основная спецификация
//  ОписаниеОповещения	- ОписаниеОповещения - обработчик завершения ввода параметров, расположенный в контексте данных спецификации заказа
//
Процедура СоздатьСпецификациюНаОснованииСпецификацииЗаказа(ТекущиеДанные, ОписаниеОповещения) Экспорт

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ПараметрыФормы.Вставить("Спецификация", ТекущиеДанные.Спецификация);
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.СозданиеСпецификацииНаОснованииСпецификацииЗаказа", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

//++ НЕ УТКА

#Область МаршрутныеКарты

// Формирует оповещение о записи основной маршрутной карты
// Используется для обновления данных в формах и для информирования пользователя о завершенной операции
//
// Параметры        	
//  СвойстваЗаписи - Структура или Запись регистра - содержит значения свойств записи
//  НавигационнаяСсылка - Строка - навигационная ссылка на измененную запись
//
Процедура ОповеститьОЗаписиОсновнойМаршрутнойКарты(СвойстваЗаписи = Неопределено, НавигационнаяСсылка = Неопределено) Экспорт

	Если СвойстваЗаписи <> Неопределено Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Подразделение",   СвойстваЗаписи.Подразделение);
		СтруктураЗаписи.Вставить("Номенклатура",    СвойстваЗаписи.Номенклатура);
		СтруктураЗаписи.Вставить("Характеристика",  СвойстваЗаписи.Характеристика);
		СтруктураЗаписи.Вставить("МаршрутнаяКарта", СвойстваЗаписи.МаршрутнаяКарта);
	Иначе
		СтруктураЗаписи = Неопределено;
	КонецЕсли; 
	
	Оповестить("Запись_ОсновныеМаршрутныеКарты", СтруктураЗаписи);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ОсновныеМаршрутныеКарты"));
	
	Если НавигационнаяСсылка <> Неопределено Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Изменена основная маршрутная карта';uk='Змінена основна маршрутна карта'"), НавигационнаяСсылка);
		ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
	КонецЕсли; 
	
КонецПроцедуры

// Устанавливает новый статус для спецификаций
//
// Параметры:
//	НовыйСтатус				- ПеречислениеСсылка.СтатусыСпецификаций - новый статус
//	ПредставлениеСтатуса	- Строка - представление нового статуса
//  МассивОбъектов			- Массив - список маршрутных карт
//
Процедура УстановитьСтатусМаршрутныхКарт(НовыйСтатус, ПредставлениеСтатуса, МассивОбъектов) Экспорт
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеСтатуса",      НовыйСтатус);
	ДополнительныеПараметры.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
	ДополнительныеПараметры.Вставить("ВыделенныеСсылки",     МассивОбъектов);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусМаршрутныхКартЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru='Выбранным маршрутным картам будет установлен статус ""%1"". Продолжить?';uk='Вибраним маршрутним карткам буде встановлено статус ""%1"". Продовжити?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеСтатуса);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

//++ НЕ УТКА

#Область АвтовыборМатериалов

// Открывает форму настройки автовыбора номенклатуры
//
// Параметры        	
//  ДанныеСтроки						- Строка табличной части для которой настраивается автовыбор
//  СоответствиеСвойств					- Табличная часть - содержит свойства по которым выполняется автовыбор характеристики
//  ВидИзделийИлиНоменклатура           - определяет список доступных свойств для выбора
//  НазваниеСвойстваУказываетсяВНСИ		- Строка - заголовок значения перечисления УказываетсяВНСИ
//  ФормаВладелец						- Форма - форма из которой вызывается настройка автовыбора
//  ТолькоПросмотр						- Булево - открыть форму только для просмотра
//
// Возвращаемое значение:
//   Булево - Истина, если выполнена настройка
//
Процедура НастроитьАвтоподборНоменклатуры(ДанныеСтроки, СоответствиеСвойств, ВидИзделийИлиНоменклатура, НазваниеСвойстваУказываетсяВНСИ, ФормаВладелец, ТолькоПросмотр = Ложь) Экспорт

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	СоответствиеСвойствТекущегоМатериала = Новый Массив;
	СтруктураПоиска = Новый Структура("КлючСвязиМатериал", ДанныеСтроки.КлючСвязи);
	СписокСтрок = СоответствиеСвойств.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаСоответствие Из СписокСтрок Цикл
		НастройкаСоответствия = Новый Структура("СвойствоМатериала,СвойствоПродукции", 
												СтрокаСоответствие.СвойствоМатериала, СтрокаСоответствие.СвойствоПродукции);
		СоответствиеСвойствТекущегоМатериала.Добавить(НастройкаСоответствия);
	КонецЦикла; 
	ПараметрыФормы.Вставить("СоответствиеСвойств", СоответствиеСвойствТекущегоМатериала);
	
	ПараметрыФормы.Вставить("ВидИзделийИлиНоменклатура",      ВидИзделийИлиНоменклатура);
	ПараметрыФормы.Вставить("СвойствоСодержащееНоменклатуру", ДанныеСтроки.СвойствоСодержащееНоменклатуру);
	ПараметрыФормы.Вставить("СпособАвтовыбораНоменклатуры",   ДанныеСтроки.СпособАвтовыбораНоменклатуры);
	ПараметрыФормы.Вставить("СпособАвтовыбораХарактеристики", ДанныеСтроки.СпособАвтовыбораХарактеристики);
	
	ПараметрыФормы.Вставить("Номенклатура",   ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика", ДанныеСтроки.Характеристика);
	ПараметрыФормы.Вставить("ПрименениеМатериала", ДанныеСтроки.ПрименениеМатериала);
	
	ПараметрыФормы.Вставить("НазваниеСвойстваУказываетсяВНСИ", НазваниеСвойстваУказываетсяВНСИ);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаАвтовыбораМатериала", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Открывает форму настройки потребления номенклатуры
//
// Параметры        	
//  ДанныеСтроки				- Строка табличной части для которой настраивается потребление
//  Изделие						- определяет список доступных свойств для выбора
//  ВидИзделийИлиНоменклатура	- определяет список доступных свойств для выбора
//  ТолькоПросмотр				- Булево - открыть форму только для просмотра
//
// Возвращаемое значение:
//   Булево - Истина, если выполнена настройка
//
Процедура НастроитьПотреблениеНоменклатуры(ДанныеСтроки, ВидИзделийИлиНоменклатура, ФормаВладелец, ТолькоПросмотр = Ложь) Экспорт
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр",               ТолькоПросмотр);
	ПараметрыФормы.Вставить("ВидИзделийИлиНоменклатура",    ВидИзделийИлиНоменклатура);
	ПараметрыФормы.Вставить("ВидИзделийИлиНоменклатура",    ВидИзделийИлиНоменклатура);
	ПараметрыФормы.Вставить("Номенклатура",                 ДанныеСтроки.Номенклатура);
	ПараметрыФормы.Вставить("ОтборСвойство",                ДанныеСтроки.ОтборСвойство);
	ПараметрыФормы.Вставить("ОтборЗначениеСвойства",        ДанныеСтроки.ОтборЗначениеСвойства);
	ПараметрыФормы.Вставить("АлгоритмРасчетаКоличества",    ДанныеСтроки.АлгоритмРасчетаКоличества);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаПотребленияМатериала", ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

// Выполняет действия при удалении материалов из табличной части
// - удаляет настройки автовыбора
//
// Параметры:
//  ТаблицаФормы				- ТаблицаФормы - таблица формы на которой расположен список материалов
//  МатериалыИУслуги			- ДанныеФормыКоллекция - табличная часть "МатериалыИУслуги"
//  СоответствиеСвойств			- ДанныеФормыКоллекция - табличная часть "СоответствиеСвойств"
//
Процедура ПередУдалениемМатериалов(ТаблицаФормы, МатериалыИУслуги, СоответствиеСвойств) Экспорт

	НоменклатураУказываетсяВНСИ   = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
	ХарактеристикаУказываетсяВНСИ = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
	
	ВыделенныеСтроки = ТаблицаФормы.ВыделенныеСтроки;
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(ИдентификаторСтроки);
		
		Если ДанныеСтроки.СпособАвтовыбораНоменклатуры = НоменклатураУказываетсяВНСИ
			И ДанныеСтроки.СпособАвтовыбораХарактеристики = ХарактеристикаУказываетсяВНСИ Тогда
			Продолжить;
		КонецЕсли;
		
		СписокСтрок = СоответствиеСвойств.НайтиСтроки(Новый Структура("СвойствоМатериала", ДанныеСтроки.КлючСвязи));
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			СоответствиеСвойств.Удалить(НайденнаяСтрока);
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет действия при удалении видов рабочих центров из табличной части
// - удаляет альтернативные виды рабочих центров
//
// Параметры:
//  ТаблицаФормы								- ТаблицаФормы - таблица формы на которой расположен список видов рабочих центров
//  АльтернативныеВидыРабочихЦентров			- ДанныеФормыКоллекция - табличная часть, содержащая альтернативные виды рабочих центров
//
Процедура ПередУдалениемВидовРабочихЦентров(ТаблицаФормы, АльтернативныеВидыРабочихЦентров) Экспорт

	ВыделенныеСтроки = ТаблицаФормы.ВыделенныеСтроки;
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(ИдентификаторСтроки);
		
		СтруктураПоиска = Новый Структура("КлючСвязиВидыРабочихЦентров", ДанныеСтроки.КлючСвязи);
		СписокСтрок = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			АльтернативныеВидыРабочихЦентров.Удалить(НайденнаяСтрока);
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура КопироватьРесурснуюСпецификациюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = УправлениеДаннымиОбИзделияхВызовСервера.КопироватьРесурснуюСпецификацию(ДополнительныеПараметры.Источник);
	
	Если Ссылка <> Неопределено Тогда
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.РесурсныеСпецификации"));
		Оповестить("Запись_ЭтапыПроизводства");
		ПоказатьЗначение(, Ссылка);
		
		ПоказатьОповещениеПользователя(
				НСтр("ru='Создание:';uk='Створення:'"), 
				ПолучитьНавигационнуюСсылку(Ссылка), 
				Ссылка);
		
		Если ДополнительныеПараметры.ОписаниеОбработкиПослеКопирования <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОбработкиПослеКопирования, Ссылка);
		КонецЕсли; 
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru='Не удалось скопировать ресурсную спецификацию.';uk='Не вдалося скопіювати ресурсну специфікацію.'"));
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьСтатусСпецификацийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = УправлениеДаннымиОбИзделияхВызовСервера.УстановитьСтатусСпецификаций(
										ДополнительныеПараметры.ВыделенныеСсылки, 
										ДополнительныеПараметры.ЗначениеСтатуса);
										
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
			Неопределено,
			КоличествоОбработанных, 
			ДополнительныеПараметры.ВыделенныеСсылки.Количество(), 
			ДополнительныеПараметры.ПредставлениеСтатуса);
			
	Оповестить("Запись_РесурсныеСпецификации");
	ОповеститьОбИзменении(Тип("СправочникСсылка.РесурсныеСпецификации"));
	
КонецПроцедуры

//++ НЕ УТКА

Процедура УстановитьСтатусМаршрутныхКартЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = УправлениеДаннымиОбИзделияхВызовСервера.УстановитьСтатусМаршрутныхКарт(
										ДополнительныеПараметры.ВыделенныеСсылки, 
										ДополнительныеПараметры.ЗначениеСтатуса);
										
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
			Неопределено,
			КоличествоОбработанных, 
			ДополнительныеПараметры.ВыделенныеСсылки.Количество(), 
			ДополнительныеПараметры.ПредставлениеСтатуса);
			
	Оповестить("Запись_МаршрутныеКарты");
	ОповеститьОбИзменении(Тип("СправочникСсылка.МаршрутныеКарты"));
	
КонецПроцедуры

//-- НЕ УТКА

Функция НастроитьАвтоподборНоменклатурыЗавершение(РезультатНастройки, ДанныеСтроки, СоответствиеСвойств) Экспорт

	Если РезультатНастройки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, 
							РезультатНастройки, 
							"Номенклатура,Характеристика,НоменклатураСтрокой,ХарактеристикаСтрокой,
							|СпособАвтовыбораНоменклатуры,СпособАвтовыбораХарактеристики,
							|СвойствоСодержащееНоменклатуру,ПрименениеМатериала");
							
	// Удалим старые настройки
	СтруктураПоиска = Новый Структура("КлючСвязиМатериал", ДанныеСтроки.КлючСвязи);
	СписокСтрок = СоответствиеСвойств.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаСоответствие Из СписокСтрок Цикл
		СоответствиеСвойств.Удалить(СтрокаСоответствие);
	КонецЦикла;
	
	// Обновим данные
	Если ДанныеСтроки.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции") Тогда
		Для каждого ЭлКоллекции Из РезультатНастройки.СоответствиеСвойств Цикл
			НоваяНастройка = СоответствиеСвойств.Добавить();
			НоваяНастройка.СвойствоМатериала  = ЭлКоллекции.СвойствоМатериала;
			НоваяНастройка.СвойствоПродукции  = ЭлКоллекции.СвойствоПродукции;
			НоваяНастройка.КлючСвязиМатериал = ДанныеСтроки.КлючСвязи;
		КонецЦикла; 
	КонецЕсли; 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    ДанныеСтроки.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ДанныеСтроки.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, Неопределено);
	
	Возврат Истина;
	
КонецФункции

Функция НастроитьПотреблениеНоменклатурыЗавершение(РезультатНастройки, ДанныеСтроки) Экспорт

	Если РезультатНастройки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеСтроки.ОтборСвойство         = РезультатНастройки.ОтборСвойство;
	ДанныеСтроки.ОтборЗначениеСвойства = РезультатНастройки.ОтборЗначениеСвойства;
	
	ДанныеСтроки.АлгоритмРасчетаКоличества = РезультатНастройки.АлгоритмРасчетаКоличества;
	ДанныеСтроки.РасчетПоФормуле = НЕ ПустаяСтрока(ДанныеСтроки.АлгоритмРасчетаКоличества);
	
	ДанныеСтроки.МатериалПотребляетсяНеВсегда = НЕ ДанныеСтроки.ОтборСвойство.Пустая();
	
	Возврат Истина;
	
КонецФункции

Процедура ВидыРабочихЦентровПередНачаломДобавления(ТекущиеДанные, ВсеВидыРабочихЦентров, ЭлементВсеВидыРабочихЦентров, Отказ) Экспорт

	Если ТекущиеДанные = Неопределено Тогда
		// Можно использовать стандартное добавление
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ЭлементРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ЭлементРодитель = Неопределено Тогда
		КоллекцияОсновныхВидовРЦ = ВсеВидыРабочихЦентров.ПолучитьЭлементы();
	Иначе
		КоллекцияОсновныхВидовРЦ = ЭлементРодитель.ПолучитьЭлементы();
	КонецЕсли; 
	
	НоваяСтрока = КоллекцияОсновныхВидовРЦ.Добавить();
	НоваяСтрока.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");
	
	ЭлементВсеВидыРабочихЦентров.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ЭлементВсеВидыРабочихЦентров.ИзменитьСтроку();
	
КонецПроцедуры

Процедура ДобавитьАльтернативныйВидРЦ(ТекущиеДанные, ВсеВидыРабочихЦентров, ЭлементВсеВидыРабочихЦентров) Экспорт

	Если ТекущиеДанные = Неопределено Тогда
		// Не понятно для какого вида РЦ нужно добавить альтернативный
		Возврат;
	КонецЕсли;
	
	ЭлементРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ЭлементРодитель = Неопределено Тогда
		ЭлементРодитель = ТекущиеДанные;
	КонецЕсли;
	
	КоллекцияАльтернативныхВидовРЦ = ЭлементРодитель.ПолучитьЭлементы();
	
	НоваяСтрока = КоллекцияАльтернативныхВидовРЦ.Добавить();
	НоваяСтрока.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");
	НоваяСтрока.Альтернативный = Истина;
	
	ЭлементВсеВидыРабочихЦентров.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ЭлементВсеВидыРабочихЦентров.ИзменитьСтроку();
	
КонецПроцедуры

#КонецОбласти
