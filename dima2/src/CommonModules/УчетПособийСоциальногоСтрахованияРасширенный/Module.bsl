	
#Область ПрограммныйИнтерфейс

// Устарела (см. функцию УчетПособийСоциальногоСтрахования.ПредельнаяВеличинаБазыСтраховыхВзносов)
//
Функция ПредельнаяВеличинаБазыСтраховыхВзносов(Годы) Экспорт
	
	Возврат УчетПособийСоциальногоСтрахования.ПредельнаяВеличинаБазыСтраховыхВзносов(Годы);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Заполняется таблица показателей для предопределенных способов расчета пособий
//
Процедура ЗаполнитьПоказателиРасчетаПособий(ТаблицаПоказателей) Экспорт
	
	// Календарные дни
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПособиеПоУходуЗаРебенкомДоПолутораЛет;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МРОТ");
	
КонецПроцедуры

// Процедура вызывает конкретные алгоритмы расчета результата.
//
// Параметры
//	- СпособРасчета - ПеречислениеСсылка.СпособыРасчетаНачислений, ПеречислениеСсылка.СпособыРасчетаУдержаний,
//	- СтрокиРасчета - массив строк таблицы значений данных для расчета с колонками:
//			- ЗаписьРасчета - строка набора записей регистра расчета
//			- ИсходныеДанные - структура со значениями показателями, используемыми в контексте расчета
//	- НаборыЗаписей - структура наборов записей, моделирующая коллекцию движений документа 
//			с установленным отбором по временному регистратору
//	- ДополнительныеПараметры - структура, в которой передаются значения, используемые при расчете:
//		ДанныеФормыОбъект - объект редактируемый в рассчитываемой форме
//		Организация
//		МесяцНачисления.
//
Процедура РассчитатьПособие(СпособРасчета, СтрокиРасчета, НаборыЗаписей, ДополнительныеПараметры) Экспорт
	Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного Тогда
		УчетПособийСоциальногоСтрахования.РассчитатьПособиеПоНетрудоспособности(СтрокиРасчета, ДополнительныеПараметры.ДанныеФормыОбъект);
	КонецЕсли;
КонецПроцедуры

// Формирует движения по регистру УсловияОплатыОтпускаПоУходуЗаРебенком
// Параметры:
//		Движения - коллекция движений регистратора
//		ЗаписиУсловийОплатыОтпуска - таблица значений с колонками 
//			Организация
//			СтраховойСлучай
//			Период
//			Сотрудник
//			ФизическоеЛицо
//			СреднийДневнойЗаработок
//			КоличествоДетей
//			КоличествоПервыхДетей
//			ПрименятьЛьготыПриНачисленииПособия
//
//		Допустимо присутствие других колонок в передаваемой таблице значений.
//
Процедура СформироватьДвиженияУсловийОплатыОтпускаПоУходуЗаРебенком(Движения, ЗаписиУсловийОплатыОтпуска) Экспорт
	Для Каждого Запись Из ЗаписиУсловийОплатыОтпуска Цикл
		Движения.УсловияОплатыОтпускаПоУходуЗаРебенком.Записывать = Истина;
		Движение = Движения.УсловияОплатыОтпускаПоУходуЗаРебенком.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Запись);
	КонецЦикла;
	
	Если Движения.УсловияОплатыОтпускаПоУходуЗаРебенком.Записывать Тогда
		Движения.УсловияОплатыОтпускаПоУходуЗаРебенком.Записать();
		Движения.УсловияОплатыОтпускаПоУходуЗаРебенком.Записывать = Ложь;
	КонецЕсли;
КонецПроцедуры	

// Предназначен для сбора дат, которые подсистема «Расчет зарплаты» использует 
// для разделения строк начислений на отдельные периоды.
//
// Подробнее см. комментарий к методу 
//	РасчетЗарплатыРасширенныйПереопределяемый.СоздатьВТПериодыИзмененияОтдельныхНачислений.
//
Процедура СоздатьВТДатыИзмененияЗаписейРасчетаПособияДоПолутораЛет(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ) Экспорт
	
	ТекстЗапроса =	
	"ВЫБРАТЬ
	|	НачисленияСотрудников.Сотрудник,
	|	НачисленияСотрудников.Начисление,
	|	НачисленияСотрудников.ДокументОснование,
	|	УсловияОплатыОтпускаПоУходуЗаРебенком.Период КАК Период
	|ПОМЕСТИТЬ ВТДатыИзмененияНачисленийПособияДоПолутораЛет
	|ИЗ
	|	ВТНачисленияСотрудников КАК НачисленияСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияОплатыОтпускаПоУходуЗаРебенком КАК УсловияОплатыОтпускаПоУходуЗаРебенком
	|		ПО НачисленияСотрудников.Сотрудник = УсловияОплатыОтпускаПоУходуЗаРебенком.Сотрудник
	|			И (УсловияОплатыОтпускаПоУходуЗаРебенком.Период МЕЖДУ &Начало И &Окончание)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияСотрудников.Начисление = Начисления.Ссылка
	|			И (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Окончание", Окончание);
	Запрос.Выполнить();
	
	// Добавляем упоминание временной таблицы
	ИменаВТ.Добавить("ВТДатыИзмененияНачисленийПособияДоПолутораЛет");
	
КонецПроцедуры


// Возвращает размер государственного пособия на дату
//
// Параметры
//  ВидПособия - строка, соответствующая имени ресурса 
//	Дата - Дата на которую получается размер пособия
//
// Возвращаемое значение:
//   Размер пособия - число.
//
Функция РазмерГосударственногоПособия(ВидПособия, Период) Экспорт
	РазмерПособия = 0;         
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период
	|ПОМЕСТИТЬ ВТИсходныеДанные";
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РазмерыГосударственныхПособий",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанные"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерПособия.Период,
	|	РазмерПособия.ВСвязиСоСмертью
	|ИЗ
	|	ВТРазмерыГосударственныхПособийСрезПоследних КАК РазмерПособия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		РазмерПособия = Выборка[ВидПособия];
	КонецЕсли;
	
	Возврат РазмерПособия
КонецФункции

// Процедура подготавливает таблицы для формирования движений по пособиям
Процедура ЗаполнитьСведенияОПособиях(ДанныеДляПроведения, ПособиеПлатитУчастникПилотногоПроекта) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность)
	|		ИНАЧЕ Начисления.ВидПособияСоциальногоСтрахования
	|	КОНЕЦ КАК ВидПособияСоциальногоСтрахования,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоБольничныйЗаСчетРаботодателя
	|ПОМЕСТИТЬ ВТОписаниеПособий
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииПособий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пособия.ВидПособияСоциальногоСтрахования,
	|	ТаблицаНачислений.Ссылка,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости КАК ВидЗанятости,
	|	ТаблицаНачислений.Сторно КАК Сторно,
	|	СУММА(ВЫБОР
	|			КОГДА Пособия.ЭтоБольничныйЗаСчетРаботодателя
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаНачислений.ОплаченоДней
	|		КОНЕЦ) КАК ОплаченныеДни,
	|	СУММА(ВЫБОР
	|			КОГДА Пособия.ЭтоБольничныйЗаСчетРаботодателя
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаНачислений.Результат
	|		КОНЕЦ) КАК СуммаВсего,
	|	СУММА(ВЫБОР
	|			КОГДА Пособия.ЭтоБольничныйЗаСчетРаботодателя
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаНачислений.РезультатВТомЧислеЗаСчетФБ
	|		КОНЕЦ) КАК СуммаСверхНорм,
	|	СУММА(ВЫБОР
	|			КОГДА Пособия.ЭтоБольничныйЗаСчетРаботодателя
	|				ТОГДА ТаблицаНачислений.Результат
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаФинансируемаяРаботодателем
	|ПОМЕСТИТЬ ВТСвернутыеНачисленияДляУчетаПособий
	|ИЗ
	|	ВТНачисленияДляУчетаПособий КАК ТаблицаНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОписаниеПособий КАК Пособия
	|		ПО (Пособия.Ссылка = ТаблицаНачислений.Начисление)
	|
	|СГРУППИРОВАТЬ ПО
	|	Пособия.ВидПособияСоциальногоСтрахования,
	|	ТаблицаНачислений.Ссылка,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНачислений.ВидПособияСоциальногоСтрахования,
	|	ТаблицаНачислений.Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаНачислений.ВидЗанятости КАК ВидЗанятости,
	|	БольничныйЛист.ЛьготаПоПособию,
	|	БольничныйЛист.ДатаНачалаСобытия КАК ДатаСтраховогоСлучая,
	|	СУММА(ВЫБОР
	|			КОГДА БольничныйЛист.ЯвляетсяПродолжениемБолезни
	|					ИЛИ ТаблицаНачислений.ОплаченныеДни = 0
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ТаблицаНачислений.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК СтраховыеСлучаи,
	|	СУММА(ТаблицаНачислений.ОплаченныеДни) КАК ОплаченныеДни,
	|	СУММА(ТаблицаНачислений.СуммаВсего) КАК СуммаВсего,
	|	СУММА(ТаблицаНачислений.СуммаСверхНорм) КАК СуммаСверхНорм,
	|	СУММА(ТаблицаНачислений.СуммаФинансируемаяРаботодателем) КАК СуммаФинансируемаяРаботодателем
	|ИЗ
	|	ВТСвернутыеНачисленияДляУчетаПособий КАК ТаблицаНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|		ПО ТаблицаНачислений.Ссылка = БольничныйЛист.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ТаблицаНачислений.Сотрудник = Сотрудники.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачислений.ВидПособияСоциальногоСтрахования,
	|	БольничныйЛист.ЛьготаПоПособию,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сотрудник,
	|	БольничныйЛист.ДатаНачалаСобытия,
	|	Сотрудники.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНачислений.ВидПособияСоциальногоСтрахования,
	|	ТаблицаНачислений.Сотрудник,
	|	Сотрудники.ФизическоеЛицо,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ЗНАЧЕНИЕ(Перечисление.ОснованияЛьготПоПособию.ПустаяСсылка),
	|	Отпуск.ДатаНачалаСобытия,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаНачислений.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ),
	|	СУММА(ТаблицаНачислений.ОплаченныеДни),
	|	СУММА(ТаблицаНачислений.СуммаВсего),
	|	СУММА(ТаблицаНачислений.СуммаСверхНорм),
	|	СУММА(ТаблицаНачислений.СуммаФинансируемаяРаботодателем)
	|ИЗ
	|	ВТСвернутыеНачисленияДляУчетаПособий КАК ТаблицаНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК Отпуск
	|		ПО ТаблицаНачислений.Ссылка = Отпуск.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ТаблицаНачислений.Сотрудник = Сотрудники.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачислений.ВидПособияСоциальногоСтрахования,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сотрудник,
	|	Отпуск.ДатаНачалаСобытия,
	|	Сотрудники.ФизическоеЛицо";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
			
	КатегорииПособий = Новый Массив;
	
	Если Не ПособиеПлатитУчастникПилотногоПроекта Тогда
		КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
		КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
		КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
		КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	КонецЕсли;
	
	КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами);
	КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускНаСанаторноКурортноеЛечение);
	
	Запрос.УстановитьПараметр("КатегорииПособий", КатегорииПособий); 	

	ДанныеДляПроведения.Вставить("Пособия", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Процедура подготавливает таблицы для формирования движений по пособиям
Процедура ЗаполнитьСведенияОПособияхПоУходуЗаРебенком(Ссылка, ПособиеПлатитУчастникПилотногоПроекта, ДанныеДляПроведения, ИмяТабличнойЧасти = "Пособия", ИмяТабличнойЧастиПерерасчет = Неопределено, СписокФизическихЛиц = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат
	КонецЕсли;
	
	Если ПособиеПлатитУчастникПилотногоПроекта Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяДокумента = Ссылка.Метаданные().ПолноеИмя();

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц =  Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ 
	|	ТаблицаНачислений.ДатаНачала,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.ИдентификаторСтрокиВидаРасчета КАК НомерСтроки,
	|	ТаблицаНачислений.ЛьготаПоПособию,
	|	ТаблицаНачислений.СтраховойСлучай,
	|	ТаблицаНачислений.КоличествоДетей,
	|	ТаблицаНачислений.КоличествоПервыхДетей,
	|	ТаблицаНачислений.СуммаВсегоПоУходуЗаПервымРебенком,
	|	ТаблицаНачислений.СуммаСверхНормПоУходуЗаПервымРебенком,
	|	ТаблицаНачислений.СуммаВсегоПоУходуЗаВторымРебенком,
	|	ТаблицаНачислений.СуммаСверхНормПоУходуЗаВторымРебенком,
	|	ТаблицаНачислений.Результат,
	|	ТаблицаНачислений.РезультатВТомЧислеЗаСчетФБ,
	|	Ложь КАК Сторно
	|ПОМЕСТИТЬ ВТТаблицаНачислений
	|ИЗ
	|	ИмяТаблицы КАК ТаблицаНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Ссылка = ТаблицаНачислений.Начисление)
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка
	|	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ПолноеИмяДокумента + "." + ИмяТабличнойЧасти);
	Если СписокФизическихЛиц <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И ТаблицаНачислений.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
	КонецЕсли; 
	
	Если Не ИмяТабличнойЧастиПерерасчет = Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"ОБЪЕДИНИТЬ ВСЕ 
		|	ВЫБРАТЬ 
		|	ТаблицаНачислений.ДатаНачала,
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.ВидЗанятости,
		|	ТаблицаНачислений.ИдентификаторСтрокиВидаРасчета КАК НомерСтроки,
		|	ТаблицаНачислений.ЛьготаПоПособию,
		|	ТаблицаНачислений.СтраховойСлучай,
		|	ТаблицаНачислений.КоличествоДетей,
		|	ТаблицаНачислений.КоличествоПервыхДетей,
		|	ТаблицаНачислений.СуммаВсегоПоУходуЗаПервымРебенком,
		|	ТаблицаНачислений.СуммаСверхНормПоУходуЗаПервымРебенком,
		|	ТаблицаНачислений.СуммаВсегоПоУходуЗаВторымРебенком,
		|	ТаблицаНачислений.СуммаСверхНормПоУходуЗаВторымРебенком,
		|	ТаблицаНачислений.Результат,
		|	ТаблицаНачислений.РезультатВТомЧислеЗаСчетФБ,
		|	ТаблицаНачислений.Сторно
		|ИЗ
		|	ИмяТаблицы КАК ТаблицаНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = ТаблицаНачислений.Начисление)
		|ГДЕ
		|	ТаблицаНачислений.Ссылка = &Ссылка
		|	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ПолноеИмяДокумента + "." + ИмяТабличнойЧастиПерерасчет);
		Если СписокФизическихЛиц <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ТаблицаНачислений.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
		КонецЕсли; 
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.НомерСтроки,
	|	ТаблицаНачислений.ДатаНачала,
	|	ТаблицаНачислений.ЛьготаПоПособию КАК ЛьготаПоПособию,
	|	ТаблицаНачислений.СтраховойСлучай КАК СтраховойСлучай,
	|	ТаблицаНачислений.КоличествоДетей КАК КоличествоДетей,
	|	ТаблицаНачислений.КоличествоПервыхДетей КАК КоличествоПервыхДетей,
	|	ТаблицаНачислений.Сторно КАК Сторно
	|ПОМЕСТИТЬ ВТУсловияОплатыПоСтраховымСлучаям
	|ИЗ
	|	ВТТаблицаНачислений КАК ТаблицаНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТУсловияОплатыПоСтраховымСлучаям.НомерСтроки,
	|	ВТУсловияОплатыПоСтраховымСлучаям.ДатаНачала,
	|	ВТУсловияОплатыПоСтраховымСлучаям.ЛьготаПоПособию,
	|	ВЫБОР
	|		КОГДА ВТУсловияОплатыПоСтраховымСлучаямРанее.СтраховойСлучай ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ВТУсловияОплатыПоСтраховымСлучаям.Сторно
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СтраховыеСлучаи,
	|	ВЫБОР
	|		КОГДА ВТУсловияОплатыПоСтраховымСлучаямРанее.СтраховойСлучай ЕСТЬ NULL 
	|				И ВТУсловияОплатыПоСтраховымСлучаям.КоличествоПервыхДетей > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ВТУсловияОплатыПоСтраховымСлучаям.Сторно
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СтраховыеСлучаиПоУходуЗаПервымРебенком,
	|	ВЫБОР
	|		КОГДА ВТУсловияОплатыПоСтраховымСлучаямРанее.СтраховойСлучай ЕСТЬ NULL 
	|				И ВТУсловияОплатыПоСтраховымСлучаям.КоличествоПервыхДетей < ВТУсловияОплатыПоСтраховымСлучаям.КоличествоДетей
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ВТУсловияОплатыПоСтраховымСлучаям.Сторно
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СтраховыеСлучаиПоУходуЗаВторымРебенком
	|ПОМЕСТИТЬ ВТУсловияОплаты
	|ИЗ
	|	ВТУсловияОплатыПоСтраховымСлучаям КАК ВТУсловияОплатыПоСтраховымСлучаям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловияОплатыПоСтраховымСлучаям КАК ВТУсловияОплатыПоСтраховымСлучаямРанее
	|		ПО ВТУсловияОплатыПоСтраховымСлучаям.СтраховойСлучай = ВТУсловияОплатыПоСтраховымСлучаямРанее.СтраховойСлучай
	|			И ВТУсловияОплатыПоСтраховымСлучаям.ДатаНачала > ВТУсловияОплатыПоСтраховымСлучаямРанее.ДатаНачала
	|			И ВТУсловияОплатыПоСтраховымСлучаям.Сторно = ВТУсловияОплатыПоСтраховымСлучаямРанее.Сторно
	|			И (НАЧАЛОПЕРИОДА(ВТУсловияОплатыПоСтраховымСлучаям.ДатаНачала, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВТУсловияОплатыПоСтраховымСлучаямРанее.ДатаНачала, МЕСЯЦ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаНачислений.ВидЗанятости КАК ВидЗанятости,
	|	ТаблицаНачислений.ДатаНачала КАК ДатаСтраховогоСлучая,
	|	ТаблицаНачислений.ЛьготаПоПособию КАК ЛьготаПоПособию,
	|	СУММА(ЕСТЬNULL(УсловияОплаты.СтраховыеСлучаи, 1)) КАК СтраховыеСлучаи,
	|	СУММА(ЕСТЬNULL(УсловияОплаты.СтраховыеСлучаиПоУходуЗаПервымРебенком, 1)) КАК СтраховыеСлучаиПоУходуЗаПервымРебенком,
	|	СУММА(ЕСТЬNULL(УсловияОплаты.СтраховыеСлучаиПоУходуЗаВторымРебенком, 1)) КАК СтраховыеСлучаиПоУходуЗаВторымРебенком,
	|	СУММА(ТаблицаНачислений.СуммаВсегоПоУходуЗаПервымРебенком) КАК СуммаВсегоПоУходуЗаПервымРебенком,
	|	СУММА(ТаблицаНачислений.СуммаСверхНормПоУходуЗаПервымРебенком) КАК СуммаСверхНормПоУходуЗаПервымРебенком,
	|	СУММА(ТаблицаНачислений.СуммаВсегоПоУходуЗаВторымРебенком) КАК СуммаВсегоПоУходуЗаВторымРебенком,
	|	СУММА(ТаблицаНачислений.СуммаСверхНормПоУходуЗаВторымРебенком) КАК СуммаСверхНормПоУходуЗаВторымРебенком,
	|	СУММА(ТаблицаНачислений.Результат) КАК СуммаВсего
	|ИЗ
	|	ВТТаблицаНачислений КАК ТаблицаНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловияОплаты КАК УсловияОплаты
	|		ПО ТаблицаНачислений.НомерСтроки = УсловияОплаты.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНачислений.Сотрудник.ФизическоеЛицо,
	|	ТаблицаНачислений.ЛьготаПоПособию,
	|	ТаблицаНачислений.ДатаНачала,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сотрудник";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ДанныеДляПроведения.Вставить("ПособияПоУходу", Результат.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиРезультатыРасчетаПособия(СтрокаДанных, ИсходныеДанные) Экспорт
	
	Если Не ИсходныеДанные.Свойство("КатегорияНачисления") Тогда
		Возврат;
	КонецЕсли;
	
	УходЗаРебенком = ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком();
	
	Нетрудоспособность = Новый Массив;
	Нетрудоспособность.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	
	ИменаПолей = Новый Массив;
	
	Если УходЗаРебенком.Найти(ИсходныеДанные.КатегорияНачисления) <> Неопределено Тогда
		ИменаПолей.Добавить("РезультатВТомЧислеЗаСчетФБ");
		ИменаПолей.Добавить("СуммаВсегоПоУходуЗаПервымРебенком");
		ИменаПолей.Добавить("СуммаСверхНормПоУходуЗаПервымРебенком");
		ИменаПолей.Добавить("СуммаВсегоПоУходуЗаВторымРебенком");
		ИменаПолей.Добавить("СуммаСверхНормПоУходуЗаВторымРебенком");
		ИменаПолей.Добавить("ЛьготаПоПособию");
		ИменаПолей.Добавить("СтраховойСлучай");
		ИменаПолей.Добавить("КоличествоДетей");
		ИменаПолей.Добавить("КоличествоПервыхДетей");
	КонецЕсли;
	
	Если Нетрудоспособность.Найти(ИсходныеДанные.КатегорияНачисления) <> Неопределено Тогда
		ИменаПолей.Добавить("РезультатВТомЧислеЗаСчетФБ");
	КонецЕсли;
	
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		Если РасчетЗарплатыРасширенный.ЕстьПолеВСтрокеКоллекции(СтрокаДанных, ИмяПоля) 
			И ИсходныеДанные.Свойство(ИмяПоля) Тогда
			СтрокаДанных[ИмяПоля] = ИсходныеДанные[ИмяПоля];
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиРезультатыРасчетаОтпускаНаСанаторноКурортноеЛечение(СтрокаДанных, ИсходныеДанные, ДополнительныеПараметры) Экспорт
	
	Если Не (ИсходныеДанные.Свойство("КатегорияНачисления")
		И ИсходныеДанные.КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускНаСанаторноКурортноеЛечение) Тогда
		Возврат;
	КонецЕсли;
	
	// для участвующих в пилотном проекте ФСС отпуск не начисляется
	ПособияПоОбязательномуСтрахованиюВыплачиваетФСС = ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(ДополнительныеПараметры.МесяцНачисления, ДополнительныеПараметры.Организация);
	
	Если ПособияПоОбязательномуСтрахованиюВыплачиваетФСС Тогда
		
		ИменаПолей = Новый Массив;
		
		ИменаПолей.Добавить("Результат");
		ИменаПолей.Добавить("РезультатВТомЧислеЗаСчетФБ");
		
		Для Каждого ИмяПоля Из ИменаПолей Цикл
			Если РасчетЗарплатыРасширенный.ЕстьПолеВСтрокеКоллекции(СтрокаДанных, ИмяПоля) 
				И ИсходныеДанные.Свойство(ИмяПоля) Тогда
				СтрокаДанных[ИмяПоля] = Неопределено;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком() Экспорт
	
	КатегорииПособий = Новый Массив;
	КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	КатегорииПособий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	
	Возврат КатегорииПособий; 
	
КонецФункции

Функция НеобходимоОтбиратьУчастниковПилотногоПроекта(Параметры) Экспорт
	
	Возврат ЕстьСвойствоЭтоУчастникПилотногоПроекта(Параметры);	
	
КонецФункции

Процедура ПолучитьДанныеВыбораСправочникаОрганизации(Источник, ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Не ЕстьСвойствоЭтоУчастникПилотногоПроекта(Параметры) Тогда
	    Возврат;
	КонецЕсли;
	
	ЭтоУчастникПилотногоПроекта = Параметры.ЭтоУчастникПилотногоПроекта;
	
	Если ТипЗнч(ЭтоУчастникПилотногоПроекта) = Тип("Булево") Тогда
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования КАК НастройкиУчетаПособийСоциальногоСтрахования
		|		ПО Организации.Ссылка = НастройкиУчетаПособийСоциальногоСтрахования.Организация
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ЭтоУчастникПилотногоПроекта
		|				ТОГДА ЕСТЬNULL(НастройкиУчетаПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|			ИНАЧЕ ЕСТЬNULL(НастройкиУчетаПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ
		|	И &ДополнительноеУсловие";
		
		Запрос.УстановитьПараметр("ЭтоУчастникПилотногоПроекта", ЭтоУчастникПилотногоПроекта);
		ЗарплатаКадры.ЗаполнитьДанныеВыбораСправочника(ДанныеВыбора, Метаданные.Справочники.Организации, Параметры, Запрос, "Организации");
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ЕстьСвойствоЭтоУчастникПилотногоПроекта(Параметры)
	Возврат Параметры.Свойство("ЭтоУчастникПилотногоПроекта");
КонецФункции

// Добавляет команду печати "Расчет среднего заработка", вызывается из модулей
// менеджеров документов.
//
Процедура ДобавитьКомандуПечатиРасчетаСреднегоЗаработка(КомандыПечати, МенеджерПечати) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")
		И Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеРабочегоВремениНачисленнойЗарплаты,ЧтениеРабочегоВремениНачисленнойЗарплаты", , Ложь) Тогда
				
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = МенеджерПечати;
		КомандаПечати.Идентификатор = "РасчетСреднегоЗаработка";
		КомандаПечати.Представление = НСтр("ru='Расчет среднего заработка';uk='Розрахунок середнього заробітку'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
				
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает массив ссылок из ПВР Начисления, соответствующих облагаемым взносами компенсациям, возмещаемым из бюджета ФСС 
// (в частности, оплата 4-х дополнительных выходных дней для ухода за детьми инвалидами).
//
// Параметры:
//	нет
// 
// Возвращаемое значение:
//	Массив
// 
Функция НачисленияОблагаемыхВзносамиПособий() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ДополнительныеВыходныеДниПоУходуЗаДетьмиИнвалидами)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

Функция НачислениеЯвляетсяПособиемЗаСчетФСС(Начисление) Экспорт
	Возврат Не Начисление.ВидПособияСоциальногоСтрахования.Пустая();
КонецФункции 
#Область СреднийЗаработокФСС

// Процедура выполняет заполнение значений специализированных показателей 
//  учета среднего заработка.
//
// Параметры:
//		ТаблицаПоказателей - таблица показателей, которые не удалось заполнить по данным подсистемы.
//
Процедура ЗаполнитьЗначенияПоказателейРасчетаЗарплаты(ТаблицаПоказателей) Экспорт
	
	СреднийЗаработокФССПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС");
	
	Для Каждого СтрокаПоказателей Из ТаблицаПоказателей Цикл
		
		Если СтрокаПоказателей.Показатель <> СреднийЗаработокФССПоказатель Тогда
			Продолжить;
		КонецЕсли;

		ПериодРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодРасчетаСреднегоЗаработкаФСС(СтрокаПоказателей.ДатаНачала);
		ПорядокРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(СтрокаПоказателей.ДатаНачала);
		
		ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС();
		ДополнительныеПараметры.НачалоПериода = ПериодРасчета.ДатаНачала;
		ДополнительныеПараметры.ОкончаниеПериода = ПериодРасчета.ДатаОкончания;
		ДополнительныеПараметры.ПорядокРасчета = ПорядокРасчета;
		
		ДанныеДляРасчета = ДанныеДляРасчетаСреднегоЗаработкаФСССотрудника(СтрокаПоказателей.Сотрудник, ДополнительныеПараметры);
		
		ПараметрыРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
		ПараметрыРасчета.ДатаНачалаСобытия = СтрокаПоказателей.ДатаНачала;
		ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало = ПериодРасчета.ДатаНачала;
		ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчета.ДатаОкончания;
		РасчетныеГоды = Новый Массив;
		РасчетныеГоды.Добавить(Год(ПериодРасчета.ДатаНачала));
		РасчетныеГоды.Добавить(Год(ПериодРасчета.ДатаОкончания));
		ПараметрыРасчета.РасчетныеГоды = РасчетныеГоды;			
		ПараметрыРасчета.НеполныйРасчетныйПериод = УчетПособийСоциальногоСтрахования.ПособиеЗаНеполныйРасчетныйПериод(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПоказателей.Сотрудник,"ФизическоеЛицо"), СтрокаПоказателей.ДатаНачала);
		ПараметрыРасчета.ПорядокРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(ПараметрыРасчета.ДатаНачалаСобытия);
		ПараметрыРасчета.ДанныеНачислений = ДанныеДляРасчета.ДанныеОНачислениях;
		ПараметрыРасчета.ДанныеВремени = ДанныеДляРасчета.ДанныеОВремени;
		ПараметрыРасчета.ДанныеСтрахователей = ДанныеДляРасчета.ДанныеСтрахователей;
		
		СреднийЗаработок = УчетПособийСоциальногоСтрахования.СреднийДневнойЗаработокФСС(ПараметрыРасчета);
		
		СтрокаПоказателей.Значение = СреднийЗаработок;
		СтрокаПоказателей.КомандаРасшифровки = УчетСреднегоЗаработкаКлиентСервер.ПредставлениеКомандыРасшифровки();
		СтрокаПоказателей.ЗначениеОпределено = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру содержащую таблицы значений с данными о начислениях для расчета среднего заработка ФСС.
//      	 
// Параметры:
//      Сотрудник 
//		НачалоПериода - начало периода расчета среднего заработка.
//		ОкончаниеПериода - окончание периода расчета среднего заработка.
//		ПорядокРасчета - правила расчета общего среднего заработка.
//
// Возвращаемое значение:
// 		ДанныеДляРасчетаСреднего - структура, содержащая следующие поля:
//		ДанныеОНачислениях - таблица значений с колонками
//			ФизическоеЛицо
//			ГоловнаяОрганизация.
//			Период
//			ПорядокРасчета
//			Сумма
//		ДанныеОВремени - таблица значений с колонками
//			ФизическоеЛицо
//			ГоловнаяОрганизация.
//			Период
//			ОтработаноДнейКалендарных
//
Функция ДанныеДляРасчетаСреднегоЗаработкаФСССотрудника(Сотрудник, ДополнительныеПараметры) Экспорт
	
	// Извлекаем дополнительные параметры.
	НачалоПериода = ДополнительныеПараметры.НачалоПериода;
	ОкончаниеПериода = ДополнительныеПараметры.ОкончаниеПериода;
	ПорядокРасчета = ДополнительныеПараметры.ПорядокРасчета;
	
	ИсходныеДанные = ТаблицаРасчетаСреднегоФСС(Сотрудник, НачалоПериода, ОкончаниеПериода, ПорядокРасчета);
	
	ДанныеДляРасчета = ДанныеДляРасчетаСреднегоЗаработкаФСССотрудников(ИсходныеДанные, ДополнительныеПараметры);
	
	// Получаем данные периодов отсутствия.
	РеквизитыСотрудника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сотрудник, "ФизическоеЛицо, ГоловнаяОрганизация");
	ДанныеДляРасчета.ПериодыОтсутствий = ПериодыДнейБолезниУходаЗаДетьми(РеквизитыСотрудника.ФизическоеЛицо, Сотрудник, РеквизитыСотрудника.ГоловнаяОрганизация, НачалоПериода, ОкончаниеПериода, Истина);
	
	Возврат ДанныеДляРасчета;
	
КонецФункции
Функция ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС() Экспорт
	ДополнительныеПараметры = Новый Структура(
		"НачалоПериода, 
		|ОкончаниеПериода, 
		|ПорядокРасчета, 
		|ДокументСсылка, 
		|ОтборМесяцев, 
		|УчитыватьЗаработокПредыдущихСтрахователей,
		|ПричинаНетрудоспособности,
		|НомерЛисткаНетрудоспособности,
		|УчитыватьКорректировки");
	
	ДополнительныеПараметры.УчитыватьКорректировки = Истина;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция определяет на переданную дату оплачивает ли организация пособия или оплата передана в ФСС
//
// Параметры
//	Организация - СправочникСсылка.Организации.
//
Функция ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(ДатаАктуальности, Организация) Экспорт
	
	Возврат Неопределено
	
КонецФункции

Процедура РегистрыУчетаПособийСоциальногоСтрахованияРасширенная(МассивРегистров) Экспорт
	
	МассивРегистров.Добавить(Метаданные.РегистрыСведений.ДанныеОВремениДляРасчетаСреднегоФСС);
	МассивРегистров.Добавить(Метаданные.РегистрыНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС);
	МассивРегистров.Добавить(Метаданные.РегистрыНакопления.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС);
				
КонецПроцедуры

#Область СреднийЗаработокФСС

#Область РегистрацияДанныхДляРасчетаСреднегоЗаработкаФСС

// Выполняет запись сведений о времени для расчета среднего заработка ФСС, 
// вычисляемых автоматически с использованием вспомогательных данных с разбивкой по дням.
// Используется при записи набора записей регистра данных по дням.
//
// Параметры:
//	- НаборДанныхВремениПоДням, РегистрСведенийНаборЗаписей.ДанныеОВремениДляРасчетаСреднегоФСС
//
Процедура ЗарегистрироватьДанныеОВремениСреднегоЗаработкаФСС(НаборДанныхВремениПоДням) Экспорт
	
	// Данные по календарным дням используем для получения суммы отработанных дней за месяц физическим лицом.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлючевыеИзмерения.ФизическоеЛицо,
	|	КлючевыеИзмерения.Сотрудник,
	|	КлючевыеИзмерения.ГоловнаяОрганизация,
	|	КлючевыеИзмерения.Месяц
	|ПОМЕСТИТЬ ВТКлючевыеИзмерения
	|ИЗ
	|	&КлючевыеИзмерения КАК КлючевыеИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|	ВЫБРАТЬ
	|		ДанныеВремениПоДням.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ДанныеВремениПоДням.Сотрудник КАК Сотрудник,
	|		ДанныеВремениПоДням.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		ДанныеВремениПоДням.Месяц КАК Месяц,
	|		ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень1) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень1) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень2) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень2) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень3) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень3) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень4) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень4) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень5) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень5) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень6) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень6) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень7) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень7) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень8) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень8) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень9) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень9) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень10) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень10) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень11) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень11) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень12) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень12) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень13) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень13) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень14) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень14) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень15) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень15) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень16) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень16) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень17) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень17) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень18) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень18) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень19) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень19) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень20) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень20) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень21) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень21) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень22) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень22) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень23) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень23) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень24) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень24) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень25) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень25) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень26) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень26) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень27) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень27) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень28) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень28) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень29) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень29) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень30) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень30) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень31) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.НеотработанДень31) = ЛОЖЬ
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОтработаноДней,
	|		ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень1) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень2) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень3) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень4) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень5) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень6) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень7) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень8) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень9) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень10) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень11) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень12) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень13) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень14) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень15) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень16) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень17) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень18) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень19) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень20) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень21) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень22) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень23) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень24) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень25) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень26) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень27) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень28) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень29) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень30) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень31) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ДнейБолезниУходаЗаДетьми	
	|ПОМЕСТИТЬ ВТДанныеВремени1
	|	ИЗ
	|		РегистрСведений.ДанныеОВремениДляРасчетаСреднегоФСС КАК ДанныеВремениПоДням
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлючевыеИзмерения КАК КлючевыеИзмерения
	|			ПО (КлючевыеИзмерения.ФизическоеЛицо = ДанныеВремениПоДням.ФизическоеЛицо)
	|				И (КлючевыеИзмерения.Сотрудник = ДанныеВремениПоДням.Сотрудник)
	|				И (КлючевыеИзмерения.ГоловнаяОрганизация = ДанныеВремениПоДням.ГоловнаяОрганизация)
	|				И (КлючевыеИзмерения.Месяц = ДанныеВремениПоДням.Месяц)
	|
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеВремениПоДням.ФизическоеЛицо,
	|		ДанныеВремениПоДням.Сотрудник,
	|		ДанныеВремениПоДням.ГоловнаяОрганизация,
	|		ДанныеВремениПоДням.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|	ВЫБРАТЬ
	|		ДанныеВремениПоДням.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ДанныеВремениПоДням.Сотрудник КАК Сотрудник,
	|		ДанныеВремениПоДням.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		ДанныеВремениПоДням.Месяц КАК Месяц,
	|		ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень1) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень1) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень2) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень2) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень3) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень3) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень4) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень4) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень5) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень5) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень6) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень6) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень7) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень7) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень8) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень8) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень9) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень9) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень10) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень10) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень11) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень11) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень12) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень12) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень13) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень13) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень14) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень14) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень15) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень15) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень16) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень16) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень17) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень17) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень18) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень18) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень19) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень19) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень20) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень20) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень21) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень21) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень22) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень22) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень23) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень23) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень24) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень24) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень25) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень25) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень26) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень26) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень27) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень27) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень28) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень28) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень29) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень29) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень30) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень30) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА  МАКСИМУМ(ДанныеВремениПоДням.ОтработанДень31) = ИСТИНА
	|					И МАКСИМУМ(ДанныеВремениПоДням.БолезньУходЗаДетьмиДень31) = ИСТИНА
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК УчитываетсяДнейБолезниУходаЗаДетьми
	|ПОМЕСТИТЬ ВТДанныеВремени2
	|	ИЗ
	|		РегистрСведений.ДанныеОВремениДляРасчетаСреднегоФСС КАК ДанныеВремениПоДням
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлючевыеИзмерения КАК КлючевыеИзмерения
	|			ПО (КлючевыеИзмерения.ФизическоеЛицо = ДанныеВремениПоДням.ФизическоеЛицо)
	|				И (КлючевыеИзмерения.Сотрудник = ДанныеВремениПоДням.Сотрудник)
	|				И (КлючевыеИзмерения.ГоловнаяОрганизация = ДанныеВремениПоДням.ГоловнаяОрганизация)
	|				И (КлючевыеИзмерения.Месяц = ДанныеВремениПоДням.Месяц)
	|				И (ДанныеВремениПоДням.ВидБолезниУходаЗаДетьми = ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) ИЛИ НЕ (ДанныеВремениПоДням.ВидБолезниУходаЗаДетьми.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииУхода)))
	|
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеВремениПоДням.ФизическоеЛицо,
	|		ДанныеВремениПоДням.Сотрудник,
	|		ДанныеВремениПоДням.ГоловнаяОрганизация,
	|		ДанныеВремениПоДням.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|		ДанныеВремениПоДням.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ДанныеВремениПоДням.Сотрудник КАК Сотрудник,
	|		ДанныеВремениПоДням.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		ДанныеВремениПоДням.Месяц,
	|		ДанныеВремениПоДням.ОтработаноДней КАК ОтработаноДней,
	|		ДанныеВремениПоДням.ДнейБолезниУходаЗаДетьми КАК ДнейБолезниУходаЗаДетьми,
	|		0 КАК УчитываетсяДнейБолезниУходаЗаДетьми
	|ПОМЕСТИТЬ ВТДанныеВремениПолные
	|ИЗ
	|   ВТДанныеВремени1 КАК ДанныеВремениПоДням
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		ДанныеВремениПоДням.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ДанныеВремениПоДням.Сотрудник КАК Сотрудник,
	|		ДанныеВремениПоДням.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		ДанныеВремениПоДням.Месяц,
	|		0 КАК ОтработаноДней,
	|		0 КАК ДнейБолезниУходаЗаДетьми,
	|		ДанныеВремениПоДням.УчитываетсяДнейБолезниУходаЗаДетьми КАК УчитываетсяДнейБолезниУходаЗаДетьми
	|ИЗ
	|   ВТДанныеВремени2 КАК ДанныеВремениПоДням
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеВремениПоДням.ФизическоеЛицо,
	|	ДанныеВремениПоДням.Сотрудник,
	|	ДанныеВремениПоДням.ГоловнаяОрганизация,
	|	ДанныеВремениПоДням.Месяц,
	|	СУММА(ДанныеВремениПоДням.ОтработаноДней) КАК ОтработаноДнейКалендарных,
	|	СУММА(ДанныеВремениПоДням.ДнейБолезниУходаЗаДетьми) КАК ДнейБолезниУходаЗаДетьми,
	|	СУММА(ДанныеВремениПоДням.УчитываетсяДнейБолезниУходаЗаДетьми) КАК УчитываетсяДнейБолезниУходаЗаДетьми
	|ИЗ
	|   ВТДанныеВремениПолные КАК ДанныеВремениПоДням
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВремениПоДням.ФизическоеЛицо,
	|	ДанныеВремениПоДням.Сотрудник,
	|	ДанныеВремениПоДням.ГоловнаяОрганизация,
	|	ДанныеВремениПоДням.Месяц
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеВремениПоДням.ФизическоеЛицо,
	|	ДанныеВремениПоДням.Сотрудник,
	|	ДанныеВремениПоДням.ГоловнаяОрганизация,
	|	ДанныеВремениПоДням.Месяц";
	
	
	
	КлючевыеИзмерения = Новый ТаблицаЗначений;
	КлючевыеИзмерения.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	КлючевыеИзмерения.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	КлючевыеИзмерения.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КлючевыеИзмерения.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	
	// Таблицу ключевых измерений составляем из предыдущих и текущих значений полей.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборДанныхВремениПоДням, КлючевыеИзмерения);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НаборДанныхВремениПоДням.ДополнительныеСвойства["КлючевыеИзмерения"], КлючевыеИзмерения);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КлючевыеИзмерения", КлючевыеИзмерения);
	Запрос.УстановитьПараметр("КатегорииУхода", ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком());
	
	ТаблицаСведений = Запрос.Выполнить().Выгрузить();
	ТаблицаСведений.Колонки.Добавить("ДанныеРассчитаныАвтоматически", Новый ОписаниеТипов("Булево"));
	ТаблицаСведений.ЗаполнитьЗначения(Истина, "ДанныеРассчитаныАвтоматически");
	
	// Записываем наборы записей, устанавливая отбор по таблицы ключевых изменений.
	ИменаИзмерений = "ФизическоеЛицо, Сотрудник, ГоловнаяОрганизация, Месяц";
	КлючевыеИзмерения.Свернуть(ИменаИзмерений);
	ОтборСтрок = Новый Структура(ИменаИзмерений);
	Для Каждого СтрокаИзмерений Из КлючевыеИзмерения Цикл
		// Отбираем строки, соответствующие текущему набору измерений.
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаИзмерений);
		НайденныеСтроки = ТаблицаСведений.НайтиСтроки(ОтборСтрок);
		// Создаем и заполняем набор записей.
		НаборЗаписей = РегистрыСведений.СведенияОВремениДляРасчетаСреднегоФCC.СоздатьНаборЗаписей();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НайденныеСтроки, НаборЗаписей);
		// Устанавливаем отборы
		Для Каждого КлючИЗначение Из ОтборСтрок Цикл
			НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
		КонецЦикла;
		// Записываем набор
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Выполняет регистрацию данных для расчета среднего заработка, поступивших от другого работодателя (страхователя).
//
// Параметры:
//	Движения
//	Отказ
//	Дата - дата регистрации данных.
//	Регистратор - ссылка на документ, выполняющий движения.
//	Сотрудник
//	Страхователь
//	ДанныеПоМесяцам - таблица значений с колонками.
//		- Месяц
//		- Сумма
//		- ДнейБолезниУходаЗаДетьми
//	НачалоПериода
//	ОкончаниеПериода
//
Процедура ЗарегистрироватьДанныеСтрахователей(Движения, Отказ, Дата, Регистратор, Сотрудник, Страхователь, ДанныеПоМесяцам, НачалоПериода = Неопределено, ОкончаниеПериода = Неопределено) Экспорт
	
	Если ДанныеПоМесяцам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ГоловнаяОрганизация,ФизическоеЛицо", Неопределено)[0];
	
	// Проверяем наличие данных этого страхователя за указанный год.
	Если ЗначениеЗаполнено(Страхователь) Тогда
		ПроверитьНаличиеЗарегистрированныхДанныхСтрахователя(
		Отказ, Страхователь, ДанныеСотрудника.ФизическоеЛицо, ДанныеСотрудника.ГоловнаяОрганизация, ДанныеПоМесяцам.ВыгрузитьКолонку("Месяц"), Регистратор);			
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем движения
	ДанныеПоМесяцам.Свернуть("Месяц, Страхователь", "Сумма,ДнейБолезниУходаЗаДетьми,ДнейСтажа");
	Для Каждого СтрокаПоМесяцам Из ДанныеПоМесяцам Цикл
		Если НЕ ЗначениеЗаполнено(Страхователь) Тогда
			ПроверитьНаличиеЗарегистрированныхДанныхСтрахователя(
			Отказ, СтрокаПоМесяцам.Страхователь, ДанныеСотрудника.ФизическоеЛицо, ДанныеСотрудника.ГоловнаяОрганизация, СтрокаПоМесяцам.Месяц, Регистратор);			
		КонецЕсли;
		Если Отказ Тогда
			Прервать;;
		КонецЕсли;
		
		НоваяСтрока = Движения.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС.Добавить();
		НоваяСтрока.Период = Дата;
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудника.ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация	= ДанныеСотрудника.ГоловнаяОрганизация;
		НоваяСтрока.Страхователь = ?(ЗначениеЗаполнено(Страхователь), Страхователь, СтрокаПоМесяцам.Страхователь);
		НоваяСтрока.Месяц = СтрокаПоМесяцам.Месяц;
		НоваяСтрока.Сумма = СтрокаПоМесяцам.Сумма;
		НоваяСтрока.ДнейСтажа = СтрокаПоМесяцам.ДнейСтажа;
		НоваяСтрока.ДнейБолезниУходаЗаДетьми = СтрокаПоМесяцам.ДнейБолезниУходаЗаДетьми;
		НоваяСтрока.НачалоПериода = НачалоПериода;
		НоваяСтрока.ОкончаниеПериода = ОкончаниеПериода;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС.Записывать = Истина;
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеСреднегоЗаработкаФСС(Движения, Отказ, МенеджерВременныхТаблиц, ЗаписыватьДвижения = Ложь, ИмяВТНачисления = "ВТНачисления") Экспорт
	

	// Регистрация сумм начислений для среднего заработка ФСС.
	
	// Суммы начислений для расчета среднего заработка ФСС по правилам с 4 июля 2015 года заполняем по данным учета
	// доходов страховых взносов.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Отбор.Регистратор.Значение);
	
	Если ИмяВТНачисления <> "ВТНачисления" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	*
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ
			|	#ВТНачисления КАК Начисления";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТНачисления", ИмяВТНачисления);
		Запрос.Выполнить();
	КонецЕсли;
	

	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
			|	ВЫБОР
			|		КОГДА НастройкиНачисления.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
			|			ТОГДА Начисления.ДатаНачала
			|		ИНАЧЕ Начисления.ПериодДействия
			|	КОНЕЦ КАК ДатаДействия,
			|	СУММА(Начисления.Сумма) КАК Сумма
			|ПОМЕСТИТЬ ВТНачисленияПоСтатьямФинансирования
			|ИЗ
			|	ВТНачисления КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК НастройкиНачисления
			|		ПО (НастройкиНачисления.Ссылка = Начисления.Начисление)
			|
			|СГРУППИРОВАТЬ ПО
			|	Начисления.Сотрудник,
			|	Начисления.Начисление,
			|	Начисления.СтатьяФинансирования,
			|	ВЫБОР
			|		КОГДА НастройкиНачисления.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
			|			ТОГДА Начисления.ДатаНачала
			|		ИНАЧЕ Начисления.ПериодДействия
			|	КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Начисления.Сотрудник,
			|	Начисления.Начисление,
			|	Начисления.ДатаДействия,
			|	СУММА(1) КАК КоличествоСтрок
			|ПОМЕСТИТЬ ВТКоличествоСтрокПоСтатьямФинансирования
			|ИЗ
			|	ВТНачисленияПоСтатьямФинансирования КАК Начисления
			|
			|СГРУППИРОВАТЬ ПО
			|	Начисления.Сотрудник,
			|	Начисления.Начисление,
			|	Начисления.ДатаДействия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Начисления.ДокументСсылка
			|ПОМЕСТИТЬ ВТДокументыНачислений
			|ИЗ
			|	ВТНачисления КАК Начисления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоходыСтраховыхВзносов.Период КАК Период,
			|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2010) КАК ПорядокРасчета,
			|	ДоходыСтраховыхВзносов.ФизическоеЛицо,
			|	ДоходыСтраховыхВзносов.ГоловнаяОрганизация,
			|	ДоходыСтраховыхВзносов.Сотрудник КАК Сотрудник,
			|	ДоходыСтраховыхВзносов.Начисление,
			|	ДоходыСтраховыхВзносов.ДатаНачала КАК ДатаДействия,
			|	СУММА(ДоходыСтраховыхВзносов.Сумма - ДоходыСтраховыхВзносов.Скидка) КАК Сумма
			|ПОМЕСТИТЬ ВТДоходыСтраховыхВзносов
			|ИЗ
			|	РегистрНакопления.СведенияОДоходахСтраховыеВзносы КАК ДоходыСтраховыхВзносов
			|ГДЕ
			|	ДоходыСтраховыхВзносов.Регистратор = &Регистратор
			|	И ДоходыСтраховыхВзносов.ВидДохода.ВходитВБазуФСС
			|
			|СГРУППИРОВАТЬ ПО
			|	ДоходыСтраховыхВзносов.Период,
			|	ДоходыСтраховыхВзносов.ГоловнаяОрганизация,
			|	ДоходыСтраховыхВзносов.ФизическоеЛицо,
			|	ДоходыСтраховыхВзносов.Сотрудник,
			|	ДоходыСтраховыхВзносов.Начисление,
			|	ДоходыСтраховыхВзносов.ДатаНачала
			|
			|ИМЕЮЩИЕ
			|	СУММА(ДоходыСтраховыхВзносов.Сумма - ДоходыСтраховыхВзносов.Скидка) <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоходыСтраховыхВзносов.Период,
			|	ДоходыСтраховыхВзносов.ПорядокРасчета,
			|	ДоходыСтраховыхВзносов.ФизическоеЛицо,
			|	ДоходыСтраховыхВзносов.ГоловнаяОрганизация,
			|	ДоходыСтраховыхВзносов.Сотрудник КАК Сотрудник,
			|	ДоходыСтраховыхВзносов.Начисление КАК Начисление,
			|	ДоходыСтраховыхВзносов.ДатаДействия КАК ДатаДействия,
			|	ДоходыСтраховыхВзносов.Сумма,
			|	ЕСТЬNULL(КоличествоСтрокПоСтатьямФинансирования.КоличествоСтрок, 0) КАК КоличествоСтрок
			|ИЗ
			|	ВТДоходыСтраховыхВзносов КАК ДоходыСтраховыхВзносов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоСтрокПоСтатьямФинансирования КАК КоличествоСтрокПоСтатьямФинансирования
			|		ПО ДоходыСтраховыхВзносов.Сотрудник = КоличествоСтрокПоСтатьямФинансирования.Сотрудник
			|			И ДоходыСтраховыхВзносов.Начисление = КоличествоСтрокПоСтатьямФинансирования.Начисление
			|			И ДоходыСтраховыхВзносов.ДатаДействия = КоличествоСтрокПоСтатьямФинансирования.ДатаДействия
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	Начисление,
			|	ДатаДействия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
			|	Начисления.ДатаДействия,
			|	Начисления.Сумма КАК Сумма
			|ИЗ
			|	ВТНачисленияПоСтатьямФинансирования КАК Начисления
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	Начисление,
			|	Начисления.ДатаДействия";
			
	Иначе
		
		Запрос.УстановитьПараметр("ВходитВБазуФСС", УчетСтраховыхВзносовРасширенный.ВидыЕСВВходитВБазуФСС());
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДоходыСтраховыхВзносов.Период КАК Период,
			|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2010) КАК ПорядокРасчета,
			|	ДоходыСтраховыхВзносов.ФизическоеЛицо,
			|	ДоходыСтраховыхВзносов.Организация,
			|	ДоходыСтраховыхВзносов.Сотрудник КАК Сотрудник,
			|	ДоходыСтраховыхВзносов.Начисление,
			|	ДоходыСтраховыхВзносов.ДатаНачала КАК ДатаДействия,
			|	ДоходыСтраховыхВзносов.НалоговыйПериод КАК НалоговыйПериод,
			|	СУММА(ДоходыСтраховыхВзносов.Сумма) КАК Сумма
			|ПОМЕСТИТЬ ВТДоходыСтраховыхВзносов
			|ИЗ
			|	РегистрНакопления.СведенияОДоходахСтраховыеВзносы КАК ДоходыСтраховыхВзносов
			|ГДЕ
			|	ДоходыСтраховыхВзносов.Регистратор = &Регистратор
			|	И ДоходыСтраховыхВзносов.ВидЕСВ В (&ВходитВБазуФСС)
			|
			|СГРУППИРОВАТЬ ПО
			|	ДоходыСтраховыхВзносов.Период,
			|	ДоходыСтраховыхВзносов.Организация,
			|	ДоходыСтраховыхВзносов.ФизическоеЛицо,
			|	ДоходыСтраховыхВзносов.Сотрудник,
			|	ДоходыСтраховыхВзносов.Начисление,
			|	ДоходыСтраховыхВзносов.ДатаНачала,
			|	ДоходыСтраховыхВзносов.НалоговыйПериод
			|
			|ИМЕЮЩИЕ
			|	СУММА(ДоходыСтраховыхВзносов.Сумма) <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоходыСтраховыхВзносов.Период,
			|	ДоходыСтраховыхВзносов.ПорядокРасчета,
			|	ДоходыСтраховыхВзносов.ФизическоеЛицо,
			|	ДоходыСтраховыхВзносов.Организация КАК ГоловнаяОрганизация,
			|	ДоходыСтраховыхВзносов.Сотрудник КАК Сотрудник,
			|	ДоходыСтраховыхВзносов.Начисление КАК Начисление,
			|	ДоходыСтраховыхВзносов.ДатаДействия КАК ДатаДействия,
			|	ДоходыСтраховыхВзносов.НалоговыйПериод КАК НалоговыйПериод,
			|	ДоходыСтраховыхВзносов.Сумма,
			|	0 КАК КоличествоСтрок //Для алгоритма далее
			|ИЗ
			|	ВТДоходыСтраховыхВзносов КАК ДоходыСтраховыхВзносов
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	Начисление,
			|	ДатаДействия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоходыСтраховыхВзносов.Период,
			|	ДоходыСтраховыхВзносов.ПорядокРасчета,
			|	ДоходыСтраховыхВзносов.ФизическоеЛицо,
			|	ДоходыСтраховыхВзносов.Организация КАК ГоловнаяОрганизация,
			|	ДоходыСтраховыхВзносов.Сотрудник КАК Сотрудник,
			|	ДоходыСтраховыхВзносов.Начисление КАК Начисление,
			|	ДоходыСтраховыхВзносов.ДатаДействия КАК ДатаДействия,
			|	ДоходыСтраховыхВзносов.НалоговыйПериод КАК НалоговыйПериод,
			|	ДоходыСтраховыхВзносов.Сумма,
			|	0 КАК КоличествоСтрок 
			|ИЗ
			|	ВТДоходыСтраховыхВзносов КАК ДоходыСтраховыхВзносов
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	Начисление,
			|	ДатаДействия
			|";		
	КонецЕсли;	
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();	
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДвижений.Колонки.Добавить("НалоговыйПериод", Новый ОписаниеТипов("Дата"));
	ТаблицаДвижений.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДвижений.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДвижений.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС"));
	ТаблицаДвижений.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ТаблицаДвижений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДвижений.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	
	ВыборкаСумм = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	ВыборкаПоСтатьямФинансирования = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	
	СтруктураПоиска = Новый Структура(
		"Сотрудник, 
		|Начисление, 
		|ДатаДействия");
	
	Пока ВыборкаСумм.Следующий() Цикл
		Если ВыборкаСумм.КоличествоСтрок = 0 Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСумм);
			Продолжить;
		КонецЕсли;
		// Есть данные по статьям финансирования, выполняем распределение.
		СтрокиРаспределения = Новый Массив;
		КоэффициентыРаспределения = Новый Массив;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаСумм);
		Для Индекс = 1 По ВыборкаСумм.КоличествоСтрок Цикл
			ВыборкаПоСтатьямФинансирования.НайтиСледующий(СтруктураПоиска);
			НоваяСтрока = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоСтатьямФинансирования);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСумм);
			СтрокиРаспределения.Добавить(НоваяСтрока);
			КоэффициентыРаспределения.Добавить(ВыборкаПоСтатьямФинансирования.Сумма);
		КонецЦикла;
		Если ВыборкаСумм.КоличествоСтрок < 2 Тогда
			Продолжить;
		КонецЕсли;
		РаспределенныеСуммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(ВыборкаСумм.Сумма, КоэффициентыРаспределения);
		Если РаспределенныеСуммы <> Неопределено Тогда
			Индекс = 0;
			Пока Индекс < СтрокиРаспределения.Количество() Цикл
				СтрокиРаспределения[Индекс].Сумма = РаспределенныеСуммы[Индекс];
				Индекс = Индекс + 1;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДвижений.Количество() > 0 Тогда
		Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Записывать = Истина;
	КонецЕсли;
	
    ТаблицаДвижений.Свернуть("Период, НалоговыйПериод, ФизическоеЛицо, ГоловнаяОрганизация, ПорядокРасчета, Сотрудник, СтатьяФинансирования", "Сумма");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвижений, Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС);
	
	Если ЗаписыватьДвижения Тогда
		Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Записать();
		Движения.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС.Записывать = Ложь;
	КонецЕсли;
	
	// Регистрация отработанного времени для среднего заработка ФСС.
	
	// Составляем коллекцию отработанных дней и дней болезни и/или ухода за больными детьми 
	// для регистрации в учете среднего ФСС.
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	МИНИМУМ(Начисления.ДатаНачала) КАК Начало,
		|	МАКСИМУМ(Начисления.ДатаОкончания) КАК Окончание
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
        |			И (ВидыРасчета.ЗачетНормыВремени)
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(Начисления.ДатаНачала) ЕСТЬ НЕ NULL ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();

	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, Выборка.Начало, Выборка.Окончание, "ДЕНЬ", "Дата", "ВТДаты");
	
	// Определяем начисления, период применения которых следует регистрировать как дни, 
	// исключаемые из расчета среднего (поля БолезньУходЗаДетьмиДень1..31).
	

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПВРНачисления.Ссылка КАК Начисление
		|ПОМЕСТИТЬ ВТНачисленияОплачиваемыеОтсутствия
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК ПВРНачисления
		|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|   Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
		|		ПО (ПВРНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = ВидыИспользованияРабочегоВремени.Ссылка)
		|			И (ВидыИспользованияРабочегоВремени.УважительнаяПричинаДляБольничных)
		|";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Начисления.ДокументСсылка КАК ДокументОснование,
		|	НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ГоловнаяОрганизация,
		|	ОплачиваемыеОтсутствия.Начисление КАК ВидБолезниУходаЗаДетьми,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 1
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень1,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 2
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень2,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 3
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень3,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 4
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень4,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 5
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень5,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 6
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень6,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 7
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень7,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 8
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень8,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 9
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень9,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 10
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень10,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 11
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень11,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 12
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень12,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 13
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень13,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 14
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень14,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 15
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень15,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 16
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень16,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 17
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень17,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 18
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень18,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 19
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень19,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 20
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень20,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 21
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень21,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 22
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень22,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 23
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень23,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 24
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень24,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 25
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень25,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 26
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень26,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 27
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень27,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 28
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень28,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 29
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень29,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 30
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень30,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 31
		|				ТОГДА ПВРНачисления.ЗачетОтработанногоВремени
		|						И ПВРНачисления.ЗачетНормыВремени
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ОтработанДень31,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 1
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень1,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 2
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень2,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 3
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень3,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 4
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень4,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 5
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень5,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 6
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень6,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 7
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень7,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 8
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень8,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 9
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень9,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 10
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень10,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 11
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень11,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 12
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень12,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 13
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень13,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 14
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень14,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 15
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень15,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 16
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень16,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 17
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень17,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 18
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень18,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 19
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень19,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 20
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень20,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 21
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень21,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 22
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень22,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 23
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень23,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 24
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень24,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 25
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень25,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 26
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень26,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 27
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень27,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 28
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень28,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 29
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень29,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 30
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень30,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ДЕНЬ(ДанныеКалендаря.Дата) = 31
		|					И ОплачиваемыеОтсутствия.Начисление ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК БолезньУходЗаДетьмиДень31
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = Начисления.Сотрудник)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПВРНачисления
		|		ПО (ПВРНачисления.Ссылка = Начисления.Начисление)
		|			И (ПВРНачисления.ЗачетНормыВремени)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДаты КАК ДанныеКалендаря
		|		ПО (ДанныеКалендаря.Дата МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияОплачиваемыеОтсутствия КАК ОплачиваемыеОтсутствия
		|		ПО (ОплачиваемыеОтсутствия.Начисление = Начисления.Начисление)
		|ГДЕ
		|	Начисления.Сторно = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ДокументСсылка,
		|	Сотрудники.Ссылка,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация,
		|	ОплачиваемыеОтсутствия.Начисление,
		|	НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Движения.ДанныеОВремениДляРасчетаСреднегоФСС.Добавить(), Выборка);
		Движения.ДанныеОВремениДляРасчетаСреднегоФСС.Записывать = Истина;
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Движения.ДанныеОВремениДляРасчетаСреднегоФСС.Записать();
		Движения.ДанныеОВремениДляРасчетаСреднегоФСС.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры
// Выполняет регистрацию данных для расчета среднего заработка, уже учтенных по другим местам работы.
//
// Параметры:
//	Движения
//	Отказ
//	ГоловнаяОрганизация - Организация
//	НомерЛисткаНетрудоспособности - номер больничного листа по основному месту работы 
//	Сотрудник
//	УчтенныеДанныеСреднегоЗаработкаФСС - таблица значений с колонками:
//		- Месяц
//		- Сумма
//		- ФизическоеЛицо
//
Процедура ЗарегистрироватьУчтенныеДляСреднегоЗаработкаФСССуммы(Движения, Отказ, ГоловнаяОрганизация, НомерЛисткаНетрудоспособности, УчтенныеДанныеСреднегоЗаработкаФСС) Экспорт
	
	Если УчтенныеДанныеСреднегоЗаработкаФСС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем движения
	УчтенныеДанныеСреднегоЗаработкаФСС.Свернуть("Период, ФизическоеЛицо", "Сумма");
	Для Каждого СтрокаПоМесяцам Из УчтенныеДанныеСреднегоЗаработкаФСС Цикл
		НоваяСтрока = Движения.ДанныеОбУчтенныхСуммахДляРасчетаСреднегоЗаработкаФСС.Добавить();
		НоваяСтрока.Месяц = СтрокаПоМесяцам.Период;
		НоваяСтрока.Период = СтрокаПоМесяцам.Период;
		НоваяСтрока.ФизическоеЛицо = СтрокаПоМесяцам.ФизическоеЛицо;
		НоваяСтрока.НомерЛисткаНетрудоспособности = НомерЛисткаНетрудоспособности;
		НоваяСтрока.ГоловнаяОрганизация	= ГоловнаяОрганизация;
		НоваяСтрока.УчтеннаяСумма = СтрокаПоМесяцам.Сумма;
	КонецЦикла;
	
	Движения.ДанныеОбУчтенныхСуммахДляРасчетаСреднегоЗаработкаФСС.Записывать = Истина;
	
КонецПроцедуры


Функция ПараметрыЗаписиКорректировокСреднегоЗаработкаФСС() Экспорт
	
	Параметры = Новый Структура(
		"КорректировкиНачислений, 
		|КорректировкиВремени, 
		|ПериодыОтсутствий, 
		|ПереноситьВДругойПорядокРасчета");
		
	Параметры.ПереноситьВДругойПорядокРасчета = Истина;
		
	Возврат Параметры;
	
КонецФункции

// Процедура выполняет запись сведений о среднем заработке ФСС
//  на основе данных, введенных пользователем.
//
// Параметры:
//	Организация
//	Сотрудник
//	КорректировкиНачислений - таблица значений, структуры аналогичной набору записей 
//								регистра сведений СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС.
//	КорректировкиВремени	- таблица значений, структуры аналогичной набору записей 
//								регистра сведений СведенияОВремениДляРасчетаСреднегоФСС.
//	ПереноситьВДругойПорядокРасчета - признак необходимости переноса данных для других правил расчета среднего заработка.
//
Процедура ЗаписатьКорректировкиСреднегоЗаработкаФСС(Организация, Сотрудник, НачалоПериода, ОкончаниеПериода, ПараметрыКорректировок) Экспорт
	
	КорректировкиНачислений = ПараметрыКорректировок.КорректировкиНачислений;
	КорректировкиВремени = ПараметрыКорректировок.КорректировкиВремени;
	ПериодыОтсутствий = ПараметрыКорректировок.ПериодыОтсутствий;
 	ПереноситьВДругойПорядокРасчета = ПараметрыКорректировок.ПереноситьВДругойПорядокРасчета;
	
	// Корректировки начислений
	ПереименоватьКолонкуПериодВМесяц(КорректировкиНачислений);
	
	ИзмеренияНачислений = "ФизическоеЛицо, ПорядокРасчета, Месяц";
	КорректировкиНачислений.Свернуть(ИзмеренияНачислений, "Сумма");
	
	// Если данные необходимо перенести для расчетов по другому порядку расчета, 
	// необходимо скопировать их и по другим правилам.
	
	Если ПереноситьВДругойПорядокРасчета Тогда
		КоличествоСтрок = КорректировкиНачислений.Количество();
		Для Индекс = 0 По КоличествоСтрок - 1 Цикл
			ДругиеПорядкиРасчета = ДругиеПорядкиРасчетаСреднегоФСС(КорректировкиНачислений[Индекс].ПорядокРасчета);
			Для Каждого ДругойПорядокРасчета Из ДругиеПорядкиРасчета Цикл
				НоваяСтрока = КорректировкиНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, КорректировкиНачислений[Индекс]);
				НоваяСтрока.ПорядокРасчета = ДругойПорядокРасчета;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
			
	// Удаляем избыточные данные
	УдалитьИзбыточныеДанныеРасчетаСреднегоЗаработкаФСС(КорректировкиНачислений);
	
	// Заполняем головную организацию и сотрудника.
	КорректировкиНачислений.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КорректировкиНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для Каждого СтрокаТаблицы Из КорректировкиНачислений Цикл
		СтрокаТаблицы.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		СтрокаТаблицы.Сотрудник = Сотрудник;
	КонецЦикла;
	
	// Определяем значения по умолчанию для заполнения нулевых строк.
	ЗначенияПоУмолчанию = Новый Структура(
		"ГоловнаяОрганизация, 
		|Сотрудник");
	ЗначенияПоУмолчанию.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	ЗначенияПоУмолчанию.Сотрудник = Сотрудник;
	
	УчетСреднегоЗаработка.ЗаписатьТаблицуЗначенийВРегистрСведений(
		КорректировкиНачислений, 
		РегистрыСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС.СоздатьНаборЗаписей(), 
		ИзмеренияНачислений,
		НачалоПериода, 
		ОкончаниеПериода, 
		Истина,
		ЗначенияПоУмолчанию);
	
	// Корректировки времени
	Если КорректировкиВремени <> Неопределено Тогда
		ПереименоватьКолонкуПериодВМесяц(КорректировкиВремени);
		
		КорректировкиВремени.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		Для Каждого СтрокаТаблицы Из КорректировкиВремени Цикл
			СтрокаТаблицы.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		КонецЦикла;
		
		ИзмеренияВремени = "ФизическоеЛицо, ГоловнаяОрганизация, Месяц";
		КорректировкиВремени.Свернуть(ИзмеренияВремени, "ОтработаноДнейКалендарных, ДнейБолезниУходаЗаДетьми");
		
		УчетСреднегоЗаработка.ЗаписатьТаблицуЗначенийВРегистрСведений(
			КорректировкиВремени, 
			РегистрыСведений.СведенияОВремениДляРасчетаСреднегоФCC.СоздатьНаборЗаписей(), 
			ИзмеренияВремени,
			НачалоПериода, 
			ОкончаниеПериода, 
			Истина);
	КонецЕсли;
	
	Если РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты().ПереноситьДанныеВДругойУчетСреднегоЗаработка Тогда
		УчетСреднегоЗаработка.ПеренестиКорректировкиВСреднийЗаработокОбщий(КорректировкиНачислений, КорректировкиВремени, Организация, НачалоПериода, ОкончаниеПериода);	
	КонецЕсли;
		
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
		
	// Периоды отсутствия записываем по годам.
	НаборыПоГодам = Новый Соответствие;
	Для Каждого Строка Из ПериодыОтсутствий Цикл
		НаборЗаписей = НаборыПоГодам[Год(Строка.Начало)];
		Если НаборЗаписей = Неопределено Тогда
			НаборЗаписей = РегистрыСведений.ПериодыБолезниУходаЗаДетьми.СоздатьНаборЗаписей();
			НаборыПоГодам.Вставить(Год(Строка.Начало), НаборЗаписей);
		КонецЕсли;
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		НоваяСтрока.Год = Год(Строка.Начало);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из НаборыПоГодам Цикл
		НаборЗаписей = КлючИЗначение.Значение;
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
		НаборЗаписей.Отбор.Год.Установить(КлючИЗначение.Ключ);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПеренестиКорректировкиВСреднийЗаработокФСС(КорректировкиНачислений, КорректировкиВремени, НачалоПериода, ОкончаниеПериода) Экспорт
	
	КорректировкиЗаработкаФСС = СведенияСреднегоЗаработкаФССПоКорректировкамОбщегоЗаработка(КорректировкиНачислений, КорректировкиВремени);
	
	Если КорректировкиЗаработкаФСС.Свойство("КорректировкиНачислений") Тогда
		// Удаляем избыточные данные
		КорректировкиНачисленийФСС = КорректировкиЗаработкаФСС["КорректировкиНачислений"]; 
		УдалитьИзбыточныеДанныеРасчетаСреднегоЗаработкаФСС(КорректировкиНачисленийФСС);
		УчетСреднегоЗаработка.ЗаписатьТаблицуЗначенийВРегистрСведений(
			КорректировкиНачисленийФСС,
			РегистрыСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС.СоздатьНаборЗаписей(), 
			"ФизическоеЛицо, ГоловнаяОрганизация, Сотрудник, ПорядокРасчета, СтатьяФинансирования, Месяц",
			НачалоПериода, 
			ОкончаниеПериода, 
			Ложь);
	КонецЕсли;
	
	Если КорректировкиЗаработкаФСС.Свойство("КорректировкиВремени") Тогда
		УчетСреднегоЗаработка.ЗаписатьТаблицуЗначенийВРегистрСведений(
			КорректировкиЗаработкаФСС["КорректировкиВремени"], 
			РегистрыСведений.СведенияОВремениДляРасчетаСреднегоФCC.СоздатьНаборЗаписей(), 
			"ФизическоеЛицо, ГоловнаяОрганизация, Месяц",
			НачалоПериода, 
			ОкончаниеПериода,
			Ложь);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхДляРасчетаСреднегоЗаработка

// Возвращает структуру содержащую таблицы значений
// с данными о начислениях и отработанном времени 
// для расчета среднего заработка по правилам ФСС.
//      	 
// Параметры:
//	ТаблицаСотрудники - таблица значений с колонками.
//		Сотрудник
//		ДатаНачалаСобытия
//	ДокументСсылка - необязательный, ссылка на документ, движения которого будут исключены из полученных данных.
//	ОтборМесяцев - необязательный, массив месяцев, если определен, данные будут получены только за указанные месяцы.
//
// Возвращаемое значение - структура таблиц значений.
//	ДанныеОНачислениях - таблица значений с колонками
//		ФизическоеЛицо.
//		Период
//		ПорядокРасчета
//		Сумма
//	ДанныеОВремени - таблица значений с колонками.
//		Сотрудник
//		Период
//		ОтработаноДнейКалендарных
//	ДанныеСтрахователей - таблица значений с колонками
//		ФизическоеЛицо,
//		Год,
//		Страхователь,
//		Сумма,
//		ДнейБолезниУходаЗаДетьмиОборот
//
Функция ДанныеДляРасчетаСреднегоЗаработкаФСССотрудников(ИсходныеДанные, ДополнительныеПараметры)
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС();
	КонецЕсли;
	
	ДокументСсылка = ДополнительныеПараметры.ДокументСсылка;
	ОтборМесяцев = ДополнительныеПараметры.ОтборМесяцев;
	УчитыватьКорректировки = ДополнительныеПараметры.УчитыватьКорректировки;
	УчитыватьЗаработокПредыдущихСтрахователей = ДополнительныеПараметры.УчитыватьЗаработокПредыдущихСтрахователей;
	ПричинаНетрудоспособности = ДополнительныеПараметры.ПричинаНетрудоспособности;
	НомерЛисткаНетрудоспособности = ДополнительныеПараметры.НомерЛисткаНетрудоспособности;

	// Нужно получить данные для расчета среднего заработка 
	// - для указанных сотрудников,
	// - за указанные месяцы (если не указаны, то за все периоды, которые предусмотрены порядком расчета)
	// - исключая движения текущего документа
	// - для указанного порядка расчета
	// - для указанного номера больничного листа (если указан)
	// - по нескольким источникам данных:
	//	* данные учета среднего заработка (накопления)
	//	* сведения введенные за период до начала эксплуатации (сведения)
	//	* данные других страхователей по месяцам
	//	* данные отработанного времени за период, когда сотрудник работал, но нет ни накоплений, ни сведений.
	//	* данные о предельных суммах (максимальная база ЕСВ)	
	//	* данные учтенных сумм для расчета среднего заработка (накопления) - по прочим местам работы (если номер больничного листа указан)
	
	// Алгоритм получения данных следующий:
	// - определяем период расчета среднего заработка (в зависимости от порядка расчета)
	// - составляем таблицу исходных данных, в которой есть Сотрудник, Период (месяц)
	// - определяем границы - минимальную и максимальную даты для построения таблицы оборотов.
	
	ДанныеДляРасчета = Новый Структура(
		"ДанныеОНачислениях, 
		|ДанныеОВремени, 
		|ПериодыОтсутствий,
		|ДанныеСтрахователей");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Добавить таблицу ВТИсходныеДанные.
	СоздатьВТИсходныеДанные(МенеджерВременныхТаблиц, ИсходныеДанные, ОтборМесяцев);
	
	// Находим граничные даты по всей таблице уже с учетом ограничений по месяцам.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ИсходныеДанные.Период) КАК Начало,
		|	МАКСИМУМ(ИсходныеДанные.Период) КАК Окончание
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ИсходныеДанные.Период) ЕСТЬ НЕ NULL  И
		|	МАКСИМУМ(ИсходныеДанные.Период) ЕСТЬ НЕ NULL ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеДляРасчета;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	НачалоРасчетногоПериода = Выборка.Начало;
	ОкончаниеРасчетногоПериода = Выборка.Окончание;
	
	Запрос.УстановитьПараметр("ДатаНачала", Выборка.Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Выборка.Окончание));
	Запрос.УстановитьПараметр("УчитыватьКорректировки", УчитыватьКорректировки);
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Периоды.Период КАК Период
		|ИЗ ВТПериоды КАК Периоды
		|";
	Месяцы = Новый Массив;
	Месяцы = Запрос.Выполнить().Выгрузить();
	// получение максимальной базы ЕСВ по каждому месяцу расчетного периода:
	УчетПособийСоциальногоСтрахования.СоздатьВТПредельнаяВеличинаБазы(Запрос.МенеджерВременныхТаблиц, Месяцы);
	
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходныеДанные.ДатаПриема КАК ДатаПриема
		|ИЗ ВТИсходныеДанные КАК ИсходныеДанные
		|";
	Выборка = Запрос.Выполнить().Выбрать();	
	ДатаПриема = '00010101';
	Если Выборка.Следующий() Тогда
		ДатаПриема = Выборка.ДатаПриема;	
	КонецЕсли;

	// Получаем данные о начислениях
	// исключаем данные по текущему регистратору.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДанныеОНачислениях.НалоговыйПериод, МЕСЯЦ) КАК Период,
		|	ДанныеОНачислениях.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеОНачислениях.Сотрудник КАК Сотрудник,
		|	ДанныеОНачислениях.ГоловнаяОрганизация,
		|	ДанныеОНачислениях.ПорядокРасчета КАК ПорядокРасчета,
		|	ДанныеОНачислениях.СтатьяФинансирования КАК СтатьяФинансирования,
		|	СУММА(ДанныеОНачислениях.Сумма) КАК Сумма,
		|	ВЫБОР
		|		КОГДА ДанныеОНачислениях.Регистратор ССЫЛКА Документ.ПереносДанных
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПереносДанных)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления)
		|	КОНЕЦ КАК Источник
		|ПОМЕСТИТЬ ВТДанныеУчетаНачисленийСреднегоЗаработкаФСС
		|ИЗ
		|	РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК ДанныеОНачислениях
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходныеДанные КАК ИсходныеДанные
		|		ПО ДанныеОНачислениях.Сотрудник = ИсходныеДанные.Сотрудник
		|			И ДанныеОНачислениях.ГоловнаяОрганизация = ИсходныеДанные.ГоловнаяОрганизация
		|			И ДанныеОНачислениях.ПорядокРасчета = ИсходныеДанные.ПорядокРасчета
		|			И (НАЧАЛОПЕРИОДА(ДанныеОНачислениях.НалоговыйПериод, МЕСЯЦ) = ИсходныеДанные.Период)
		|			И (ДанныеОНачислениях.НалоговыйПериод МЕЖДУ &ДатаНачала И &ДатаОкончания)
		|			И (ДанныеОНачислениях.Регистратор <> &Регистратор)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеОНачислениях.НалоговыйПериод,
		|	ДанныеОНачислениях.ФизическоеЛицо,
		|	ДанныеОНачислениях.Сотрудник,
		|	ДанныеОНачислениях.ГоловнаяОрганизация,
		|	ДанныеОНачислениях.ПорядокРасчета,
		|	ДанныеОНачислениях.СтатьяФинансирования,
		|	ВЫБОР
		|		КОГДА ДанныеОНачислениях.Регистратор ССЫЛКА Документ.ПереносДанных
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПереносДанных)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления)
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ДанныеОНачислениях.Сумма) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК Приоритет,
		|	ДанныеНачислений.Период,
		|	ДанныеНачислений.ФизическоеЛицо,
		|	ДанныеНачислений.Сотрудник,
		|	ДанныеНачислений.ПорядокРасчета,
		|	ДанныеНачислений.СтатьяФинансирования,
		|	ДанныеНачислений.Источник КАК Источник,
		|	ДанныеНачислений.Сумма
		|ПОМЕСТИТЬ ВТНачисленияДляРасчетаСреднегоЗаработкаФСС
		|ИЗ
		|	ВТДанныеУчетаНачисленийСреднегоЗаработкаФСС КАК ДанныеНачислений
		|ГДЕ
		|	ДанныеНачислений.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПереносДанных)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	СведенияНачислений.Месяц,
		|	СведенияНачислений.ФизическоеЛицо,
		|	СведенияНачислений.Сотрудник,
		|	СведенияНачислений.ПорядокРасчета,
		|	СведенияНачислений.СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации),
		|	СведенияНачислений.Сумма
		|ИЗ
		|	РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК СведенияНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходныеДанные КАК ИсходныеДанные
		|		ПО СведенияНачислений.Сотрудник = ИсходныеДанные.Сотрудник
		|			И СведенияНачислений.ГоловнаяОрганизация = ИсходныеДанные.ГоловнаяОрганизация
		|			И СведенияНачислений.Месяц = ИсходныеДанные.Период
		|			И СведенияНачислений.ПорядокРасчета = ИсходныеДанные.ПорядокРасчета
		|			И (СведенияНачислений.Сумма <> 0)
		|			И (&УчитыватьКорректировки = ИСТИНА
		|				ИЛИ НЕ ИСТИНА В
		|						(ВЫБРАТЬ ПЕРВЫЕ 1
		|							ИСТИНА
		|						ИЗ
		|							ВТДанныеУчетаНачисленийСреднегоЗаработкаФСС КАК ДанныеНачислений
		|						ГДЕ
		|							ДанныеНачислений.Сотрудник = СведенияНачислений.Сотрудник
		|							И ДанныеНачислений.ГоловнаяОрганизация = СведенияНачислений.ГоловнаяОрганизация
		|							И ДанныеНачислений.Период = СведенияНачислений.Месяц
		|							И ДанныеНачислений.ПорядокРасчета = СведенияНачислений.ПорядокРасчета))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ДанныеНачислений.Период,
		|	ДанныеНачислений.ФизическоеЛицо,
		|	ДанныеНачислений.Сотрудник,
		|	ДанныеНачислений.ПорядокРасчета,
		|	ДанныеНачислений.СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления),
		|	ДанныеНачислений.Сумма
		|ИЗ
		|	ВТДанныеУчетаНачисленийСреднегоЗаработкаФСС КАК ДанныеНачислений
		|ГДЕ
		|	ДанныеНачислений.Источник = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Период,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Сотрудник,
		|	МИНИМУМ(Начисления.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТНачисленияДляРасчетаСреднегоЗаработкаФССМинимальныйПриоритет
		|ИЗ
		|	ВТНачисленияДляРасчетаСреднегоЗаработкаФСС КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Период,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Период КАК Период,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ПорядокРасчета КАК ПорядокРасчета,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.Источник КАК Источник,
		|	СУММА(Начисления.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	(ВЫБРАТЬ
		|		Начисления.Период КАК Период,
		|		Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|		Начисления.Сотрудник КАК Сотрудник,
		|		Начисления.ПорядокРасчета КАК ПорядокРасчета,
		|		Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|		Начисления.Источник КАК Источник,
		|		Начисления.Сумма КАК Сумма
		|	ИЗ
		|		ВТНачисленияДляРасчетаСреднегоЗаработкаФСС КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияДляРасчетаСреднегоЗаработкаФССМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО (МинимальныйПриоритет.Период = Начисления.Период)
		|				И (МинимальныйПриоритет.Сотрудник = Начисления.Сотрудник)
		|				И (МинимальныйПриоритет.Приоритет = Начисления.Приоритет)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Начисления.Период,
		|		Начисления.ФизическоеЛицо,
		|		Начисления.Сотрудник,
		|		Начисления.ПорядокРасчета,
		|		Начисления.СтатьяФинансирования,
		|		Начисления.Источник,
		|		Начисления.Сумма
		|	ИЗ
		|		ВТНачисленияДляРасчетаСреднегоЗаработкаФСС КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияДляРасчетаСреднегоЗаработкаФССМинимальныйПриоритет КАК МинимальныйПриоритет
		|			ПО (МинимальныйПриоритет.Период = Начисления.Период)
		|				И (МинимальныйПриоритет.Сотрудник = Начисления.Сотрудник)
		|				И (Начисления.Приоритет = 3)
		|				И (МинимальныйПриоритет.Приоритет = 1)) КАК Начисления
		|
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Период,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Сотрудник,
		|	Начисления.ПорядокРасчета,
		|	Начисления.СтатьяФинансирования,
		|	Начисления.Источник
		|";
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	Запрос.Выполнить();
	 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеУчетаВремени.ФизическоеЛицо,
		|	ДанныеУчетаВремени.Сотрудник,
		|	ДанныеУчетаВремени.ГоловнаяОрганизация,
		|	ДанныеУчетаВремени.Месяц,
		|	ДанныеУчетаВремени.ОтработаноДнейКалендарных,
		|	ДанныеУчетаВремени.ДнейБолезниУходаЗаДетьми,
		|	ДанныеУчетаВремени.УчитываетсяДнейБолезниУходаЗаДетьми,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления) КАК Источник
		|ПОМЕСТИТЬ ВТДанныеУчетаВремени
		|ИЗ
		|	РегистрСведений.СведенияОВремениДляРасчетаСреднегоФCC КАК ДанныеУчетаВремени
		|ГДЕ
		|	ДанныеУчетаВремени.ДанныеРассчитаныАвтоматически = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеУчетаВремени.ФизическоеЛицо,
		|	ДанныеУчетаВремени.Сотрудник,
		|	ДанныеУчетаВремени.ГоловнаяОрганизация,
		|	ДанныеУчетаВремени.Месяц,
		|	ДанныеУчетаВремени.ОтработаноДнейКалендарных,
		|	ДанныеУчетаВремени.ДнейБолезниУходаЗаДетьми,
		|	ДанныеУчетаВремени.УчитываетсяДнейБолезниУходаЗаДетьми,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)
		|ИЗ
		|	РегистрСведений.СведенияОВремениДляРасчетаСреднегоФCC КАК ДанныеУчетаВремени
		|ГДЕ
		|	ДанныеУчетаВремени.ДанныеРассчитаныАвтоматически = ЛОЖЬ
		|	И (ДанныеУчетаВремени.ОтработаноДнейКалендарных <> 0
		|			ИЛИ ДанныеУчетаВремени.ДнейБолезниУходаЗаДетьми <> 0)
		|	И (&УчитыватьКорректировки = ИСТИНА
		|			ИЛИ НЕ ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВТДанныеУчетаНачисленийСреднегоЗаработкаФСС КАК ДанныеНачислений
		|					ГДЕ
		|						ДанныеНачислений.Сотрудник = ДанныеУчетаВремени.Сотрудник
		|						И ДанныеНачислений.Период = ДанныеУчетаВремени.Месяц))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ГоловнаяОрганизация,
		|	ИсходныеДанные.Период,
		|	ЕСТЬNULL(ДанныеУчетаВремени.ОтработаноДнейКалендарных, 0) - ЕСТЬNULL(ДанныеУчетаВремени.УчитываетсяДнейБолезниУходаЗаДетьми, 0) КАК ОтработаноДнейКалендарных,
		|	ЕСТЬNULL(ДанныеУчетаВремени.ДнейБолезниУходаЗаДетьми, 0) КАК ДнейБолезниУходаЗаДетьми,
		|	ЕСТЬNULL(ДанныеУчетаВремени.Источник, ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка)) КАК Источник
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаВремени КАК ДанныеУчетаВремени
		|		ПО (ДанныеУчетаВремени.Сотрудник = ИсходныеДанные.Сотрудник)
		|			И (ДанныеУчетаВремени.ГоловнаяОрганизация = ИсходныеДанные.ГоловнаяОрганизация)
		|			И (ДанныеУчетаВремени.Месяц = ИсходныеДанные.Период)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсходныеДанные.Сотрудник.ФизическоеЛицо,
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.Период";
	
	ДанныеОВремени = Запрос.Выполнить().Выгрузить();
	// Получаем данные других страхователей по месяцам.
	СоздатьВТДанныеСтрахователей(МенеджерВременныхТаблиц, НачалоРасчетногоПериода, ОкончаниеРасчетногоПериода);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеСтрахователей.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеСтрахователей.Месяц КАК Месяц,
		|	ДанныеСтрахователей.Месяц КАК Период,
		|	ДанныеСтрахователей.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДанныеСтрахователей.Страхователь КАК Страхователь,
		|	ДанныеСтрахователей.Сумма,
		|	ДанныеСтрахователей.ДнейБолезниУходаЗаДетьми
		|ИЗ
		|	ВТДанныеСтрахователей КАК ДанныеСтрахователей
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Месяц,
		|	Страхователь";
	
	ДанныеСтрахователей = Запрос.Выполнить().Выгрузить();
	СоздатьВТДанныеУчтенныхНачислений(МенеджерВременныхТаблиц, НачалоРасчетногоПериода, ОкончаниеРасчетногоПериода, НомерЛисткаНетрудоспособности, ДокументСсылка);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеУчтенныхНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеУчтенныхНачислений.Месяц КАК Месяц,
		|	ДанныеУчтенныхНачислений.Месяц КАК Период,
		|	ДанныеУчтенныхНачислений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДанныеУчтенныхНачислений.УчтеннаяСумма
		|ИЗ
		|	ВТДанныеУчтенныхНачислений КАК ДанныеУчтенныхНачислений
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Месяц";
	
	ДанныеУчтенныхНачислений = Запрос.Выполнить().Выгрузить();
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Период КАК Период,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ПорядокРасчета КАК ПорядокРасчета,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.Источник КАК Источник,
		|	ВЫБОР
		|		КОГДА &ПричинаНетрудоспособности В (ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.Профзаболевание), ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве))
		|			ТОГДА Начисления.Сумма + ЕСТЬNULL(ДанныеУчтенныхНачислений.УчтеннаяСумма, 0)
		|		ИНАЧЕ Начисления.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА НЕ &ПричинаНетрудоспособности В (ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.Профзаболевание), ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве))
		|			ТОГДА ЕСТЬNULL(ДанныеУчтенныхНачислений.УчтеннаяСумма, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК УчтеннаяСумма,
		|	ПредельнаяВеличинаБазыСтраховыхВзносов.Размер КАК Предел 
		|ПОМЕСТИТЬ ВТНачисленияУчтенныеСуммы
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчтенныхНачислений КАК ДанныеУчтенныхНачислений
		|		ПО Начисления.ФизическоеЛицо = ДанныеУчтенныхНачислений.ФизическоеЛицо
		|			И Начисления.Период = ДанныеУчтенныхНачислений.Месяц
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВТПредельнаяВеличинаБазы КАК ПредельнаяВеличинаБазыСтраховыхВзносов
		|		ПО
		|   		Начисления.Период = ПредельнаяВеличинаБазыСтраховыхВзносов.Месяц";
		
	Запрос.УстановитьПараметр("ПричинаНетрудоспособности", ПричинаНетрудоспособности);	
	
	Запрос.Выполнить();
	Если УчитыватьЗаработокПредыдущихСтрахователей Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Начисления.Период КАК Период,
			|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.ПорядокРасчета КАК ПорядокРасчета,
			|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
			|	Начисления.Источник КАК Источник,
			|	Начисления.Сумма + ЕСТЬNULL(ВТДанныеСтрахователей.Сумма, 0) КАК Сумма,
			|	Начисления.УчтеннаяСумма КАК УчтеннаяСумма,
			|	Начисления.Предел КАК Предел
			|ИЗ
			|	ВТНачисленияУчтенныеСуммы КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеСтрахователей КАК ВТДанныеСтрахователей
			|		ПО Начисления.ФизическоеЛицо = ВТДанныеСтрахователей.ФизическоеЛицо
			|			И Начисления.Период = ВТДанныеСтрахователей.Месяц
			|           И ВТДанныеСтрахователей.Месяц < &ДатаПриема			
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТДанныеСтрахователей.Месяц,
			|	ВТДанныеСтрахователей.ФизическоеЛицо,
			|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка),
			|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2010),
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка),
			|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления),
			|	ВТДанныеСтрахователей.Сумма,
			|	0,
			|	0
			|ИЗ
			|	ВТДанныеСтрахователей КАК ВТДанныеСтрахователей
			|ГДЕ
			|	ВТДанныеСтрахователей.Месяц < &ДатаПриема
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФизическоеЛицо,
			|	Сотрудник,
			|	ПорядокРасчета,
			|	Период,
			|	СтатьяФинансирования"; 
			
				
		
		Запрос.УстановитьПараметр("ДатаПриема", ДатаПриема);	
		Запрос.Выполнить();
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Период КАК Период,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ПорядокРасчета КАК ПорядокРасчета,
		|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
		|	Начисления.Источник КАК Источник,
		|	Начисления.Сумма КАК Сумма,
		|	Начисления.УчтеннаяСумма КАК УчтеннаяСумма,
		|	Начисления.Предел КАК Предел
		|ИЗ
		|	ВТНачисленияУчтенныеСуммы КАК Начисления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Сотрудник,
		|	ПорядокРасчета,
		|	Период,
		|	СтатьяФинансирования"; 
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ДанныеОНачислениях = Запрос.Выполнить().Выгрузить();
	Если ДанныеОНачислениях.Колонки.Найти("СуммаСУчетомОграничений") = Неопределено Тогда
		ДанныеОНачислениях.Колонки.Добавить("СуммаСУчетомОграничений",Новый ОписаниеТипов("Число"));
	КонецЕсли;

	
	Если УчитыватьЗаработокПредыдущихСтрахователей Тогда
		Для Каждого СтрокаСтрахователей Из ДанныеСтрахователей Цикл
			Если СтрокаСтрахователей.Месяц < ДатаПриема Тогда	
				СтрокаДанныхОВремени = ДанныеОВремени.Найти(СтрокаСтрахователей.Период,"Период");
				Если НЕ СтрокаДанныхОВремени = Неопределено Тогда
					СтрокаДанныхОВремени.ДнейБолезниУходаЗаДетьми = СтрокаДанныхОВремени.ДнейБолезниУходаЗаДетьми + СтрокаСтрахователей.ДнейБолезниУходаЗаДетьми;	
					СтрокаДанныхОВремени.ОтработаноДнейКалендарных = День(КонецМесяца(СтрокаСтрахователей.Период)) - СтрокаСтрахователей.ДнейБолезниУходаЗаДетьми;
				Иначе
					СтрокаДанныхОВремени = ДанныеОВремени.Добавить();
					СтрокаДанныхОВремени.ФизическоеЛицо 			= СтрокаСтрахователей.ФизическоеЛицо;
					СтрокаДанныхОВремени.Период 					= СтрокаСтрахователей.Период;
					СтрокаДанныхОВремени.ГоловнаяОрганизация 		= СтрокаСтрахователей.ГоловнаяОрганизация;
					СтрокаДанныхОВремени.ДнейБолезниУходаЗаДетьми 	= СтрокаСтрахователей.ДнейБолезниУходаЗаДетьми;
					СтрокаДанныхОВремени.ОтработаноДнейКалендарных  = День(КонецМесяца(СтрокаСтрахователей.Период));
					СтрокаДанныхОВремени.Источник  					= Перечисления.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;	
	
	ДанныеДляРасчета.ДанныеОНачислениях = ДанныеОНачислениях;
	ДанныеДляРасчета.ДанныеОВремени = ДанныеОВремени;
	ДанныеДляРасчета.ДанныеСтрахователей = ДанныеСтрахователей;
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

// Возвращает структуру содержащую таблицы значений с данными о начислениях для расчета среднего заработка ФСС,
// сгруппированную по годам.
//
// Параметры:
//      Сотрудник 
//		НачалоПериода - начало периода расчета среднего заработка.
//		ОкончаниеПериода - окончание периода расчета среднего заработка.
//		ПорядокРасчета - правила расчета общего среднего заработка.
//
// Возвращаемое значение:
// 		ДанныеДляРасчетаСреднего - структура, содержащая следующие поля:
//		Начисления - таблица значений с колонками.
//			Год
//			Сумма
//		ДанныеВремени - таблица значений с колонками.
//			Год
//			ОтработаноДнейКалендарных
//          ДнейБолезниУходаЗаДетьми.
//
Функция ДанныеДляРасчетаСреднегоЗаработкаФСССотрудникаПоГодам(Сотрудник, НачалоПериода, ОкончаниеПериода, ПорядокРасчета, ДокументСсылка = Неопределено, ОтборМесяцев = Неопределено)
		
	ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС();
	ДополнительныеПараметры.НачалоПериода = НачалоПериода;
	ДополнительныеПараметры.ОкончаниеПериода = ОкончаниеПериода;
	ДополнительныеПараметры.ПорядокРасчета = ПорядокРасчета;
	ДополнительныеПараметры.ДокументСсылка = ДокументСсылка;
	ДополнительныеПараметры.ОтборМесяцев = ОтборМесяцев;
	
	ДанныеДляРасчета = ДанныеДляРасчетаСреднегоЗаработкаФСССотрудника(Сотрудник, ДополнительныеПараметры);
	
	НачисленияПоГодам = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ДанныеДляРасчета.ДанныеОНачислениях Цикл
		Год = Год(СтрокаТаблицы.Период);
		СуммаЗаГод = НачисленияПоГодам[Год];
		Если СуммаЗаГод = Неопределено Тогда
			СуммаЗаГод = 0;
		КонецЕсли;
		НачисленияПоГодам.Вставить(Год, СуммаЗаГод + СтрокаТаблицы.Сумма);
	КонецЦикла;
	
	ДанныеВремениПоГодам = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ДанныеДляРасчета.ДанныеОВремени Цикл
		Год = Год(СтрокаТаблицы.Период);
		ДанныеЗаГод = ДанныеВремениПоГодам[Год];
		Если ДанныеЗаГод = Неопределено Тогда
			ДанныеЗаГод = Новый Структура("ОтработаноДнейКалендарных,ДнейБолезниУходаЗаДетьми", 0, 0);
		КонецЕсли;
		ДанныеЗаГод.ОтработаноДнейКалендарных = ДанныеЗаГод.ОтработаноДнейКалендарных + СтрокаТаблицы.ОтработаноДнейКалендарных;
		ДанныеЗаГод.ДнейБолезниУходаЗаДетьми = ДанныеЗаГод.ДнейБолезниУходаЗаДетьми + СтрокаТаблицы.ДнейБолезниУходаЗаДетьми;
		ДанныеВремениПоГодам.Вставить(Год, ДанныеЗаГод);
	КонецЦикла;
	
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	Начисления.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Для Каждого КлючИЗначение Из НачисленияПоГодам Цикл
		НоваяСтрока = Начисления.Добавить();
		НоваяСтрока.Год = КлючИЗначение.Ключ;
		НоваяСтрока.Сумма = КлючИЗначение.Значение;
	КонецЦикла;
	
	ДанныеВремени = Новый ТаблицаЗначений;
	ДанныеВремени.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	ДанныеВремени.Колонки.Добавить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число"));
	ДанныеВремени.Колонки.Добавить("ДнейБолезниУходаЗаДетьми", Новый ОписаниеТипов("Число"));
	
	Для Каждого КлючИЗначение Из ДанныеВремениПоГодам Цикл
		НоваяСтрока = ДанныеВремени.Добавить();
		НоваяСтрока.Год = КлючИЗначение.Ключ;
		НоваяСтрока.ОтработаноДнейКалендарных = КлючИЗначение.Значение.ОтработаноДнейКалендарных;
		НоваяСтрока.ДнейБолезниУходаЗаДетьми = КлючИЗначение.Значение.ДнейБолезниУходаЗаДетьми;
	КонецЦикла;
	
	Возврат Новый Структура("Начисления, ДанныеВремени", Начисления, ДанныеВремени);
	
КонецФункции
	  
// Позволяет получить таблицу данных страхователей отдельно от других данных, 
// необходимых для расчета среднего заработка.
//
// Параметры:
//	Сотрудник
//	ДатаНачалаСобытия
//
Функция ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСССотрудника(Сотрудник, НачалоПериода, ОкончаниеПериода, ПорядокРасчета, ОтборМесяцев = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Составляем временные таблицы с исходными данными.
	СоздатьВТИсходныеДанныеПоСотруднику(МенеджерВременныхТаблиц, Сотрудник, НачалоПериода, ОкончаниеПериода, ПорядокРасчета, ОтборМесяцев);
	
	// Получаем данные ВТ с данными страхователей.
	СоздатьВТДанныеСтрахователей(МенеджерВременныхТаблиц, НачалоПериода, ОкончаниеПериода);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеСтрахователей.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеСтрахователей.Месяц КАК Месяц,
	|	ДанныеСтрахователей.Страхователь КАК Страхователь,
	|	ДанныеСтрахователей.Сумма,
	|	ДанныеСтрахователей.ДнейБолезниУходаЗаДетьми
	|ИЗ
	|	ВТДанныеСтрахователей КАК ДанныеСтрахователей
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	Месяц,
	|	Страхователь";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция составляет периоды, исключаемые из количества календарных дней при расчете среднего заработка 
// 
//
// Параметры:
//	ФизическоеЛицо
//	ГоловнаяОрганизация
//	Начало - дата начала анализируемого периода.
//	Окончание - дата окончания анализируемого периода.
//	ПоНаименованиямПериодов - булево, надо ли подменять виды расчетов ассоциированными наименованиями.
//
// Возвращаемое значение - таблица значений с колонками
//	ФизическоеЛицо
//	ГоловнаяОрганизация.
//	ВидБолезниУходаЗаДетьми - Если &ПоНаименованиямПериодов = Истина, то строка, наименование ассоциированное с
//	                          отсутствием,   иначе ПланВидовРасчетаСсылка.Начисления, вид расчета, связанный с
//	                          отсутствием. Т.к. у разных видов расчетов может быть одно наименование, то может повлиять
//	                          на группировку периодов, периодов по видам расчетов может быть больше.
//	Начало - дата начала интервала.
//	Окончание - дата окончания интервала.
//	Дни - количество дней
//
Функция ПериодыДнейБолезниУходаЗаДетьми(ФизическоеЛицо, Сотрудник, ГоловнаяОрганизация, Начало, Окончание, ПоНаименованиямПериодов = Ложь)
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Создаем таблицу подневных записей.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, Начало, Окончание, "ДЕНЬ", "Дата");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеВремени.ФизическоеЛицо,
		|	ДанныеВремени.Сотрудник,
		|	ДанныеВремени.ГоловнаяОрганизация,
		|	ВЫБОР
		|		КОГДА НЕ &ПоНаименованиямПериодов
		|			ТОГДА ДанныеВремени.ВидБолезниУходаЗаДетьми
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание))
		|					ТОГДА &НаименованиеПериодаНетрудоспособности
		|				КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам)
		|					ТОГДА &НаименованиеПериодаОтпускаПоБеременности
		|				КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет))
		|					ТОГДА &НаименованиеПериодаОтпускаПоУходу
		|				ИНАЧЕ Начисления.Наименование
		|			КОНЕЦ
		|	КОНЕЦ КАК ВидБолезниУходаЗаДетьми,
		|	ВЫБОР
		|		КОГДА ДанныеВремени.ВидБолезниУходаЗаДетьми.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам))
		|			ТОГДА 1
		|		КОГДА ДанныеВремени.ВидБолезниУходаЗаДетьми.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет)
		|			ТОГДА 2
		|		ИНАЧЕ 99
		|	КОНЕЦ КАК Приоритет,
		|	ДатыДней.Дата
		|ПОМЕСТИТЬ ВТДатыДнейБолезниУходаЗаДетьми
		|ИЗ
		|	РегистрСведений.ДанныеОВремениДляРасчетаСреднегоФСС КАК ДанныеВремени
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО ДанныеВремени.ВидБолезниУходаЗаДетьми = Начисления.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК ДатыДней
		|		ПО (НАЧАЛОПЕРИОДА(ДатыДней.Дата, МЕСЯЦ) = ДанныеВремени.Месяц)
		|			И (ДанныеВремени.ФизическоеЛицо = &ФизическоеЛицо)
		|			И (ДанныеВремени.Сотрудник = &Сотрудник)
		|			И (ДанныеВремени.ГоловнаяОрганизация = &ГоловнаяОрганизация)
		|			И (ДанныеВремени.Месяц МЕЖДУ &Начало И &Окончание)
		|			И (ВЫБОР
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 1
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень1
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 2
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень2
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 3
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень3
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 4
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень4
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 5
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень5
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 6
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень6
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 7
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень7
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 8
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень8
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 9
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень9
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 10
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень10
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 11
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень11
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 12
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень12
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 13
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень13
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 14
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень14
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 15
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень15
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 16
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень16
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 17
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень17
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 18
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень18
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 19
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень19
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 20
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень20
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 21
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень21
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 22
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень22
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 23
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень23
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 24
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень24
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 25
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень25
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 26
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень26
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 27
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень27
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 28
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень28
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 29
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень29
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 30
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень30
		|				КОГДА ДЕНЬ(ДатыДней.Дата) = 31
		|					ТОГДА ДанныеВремени.БолезньУходЗаДетьмиДень31
		|			КОНЕЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыДнейБолезниУходаЗаДетьми.ФизическоеЛицо,
		|	ДатыДнейБолезниУходаЗаДетьми.Сотрудник,
		|	ДатыДнейБолезниУходаЗаДетьми.ГоловнаяОрганизация,
		|	ДатыДнейБолезниУходаЗаДетьми.Дата,
		|	МИНИМУМ(ДатыДнейБолезниУходаЗаДетьми.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТПриоритеты
		|ИЗ
		|	ВТДатыДнейБолезниУходаЗаДетьми КАК ДатыДнейБолезниУходаЗаДетьми
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыДнейБолезниУходаЗаДетьми.ФизическоеЛицо,
		|	ДатыДнейБолезниУходаЗаДетьми.Сотрудник,
		|	ДатыДнейБолезниУходаЗаДетьми.ГоловнаяОрганизация,
		|	ДатыДнейБолезниУходаЗаДетьми.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыДнейБолезни.ФизическоеЛицо,
		|	ДатыДнейБолезни.Сотрудник,
		|	ДатыДнейБолезни.ГоловнаяОрганизация,
		|	МИНИМУМ(ДатыДнейБолезни.ВидБолезниУходаЗаДетьми) КАК ВидБолезниУходаЗаДетьми,
		|	ДатыДнейБолезни.Дата
		|ПОМЕСТИТЬ ВТДатыДнейБолезниУходаЗаДетьмиПоПриоритету
		|ИЗ
		|	ВТДатыДнейБолезниУходаЗаДетьми КАК ДатыДнейБолезни
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритеты КАК Приоритеты
		|		ПО (Приоритеты.ФизическоеЛицо = ДатыДнейБолезни.ФизическоеЛицо)
		|			И (Приоритеты.Сотрудник = ДатыДнейБолезни.Сотрудник)
		|			И (Приоритеты.ГоловнаяОрганизация = ДатыДнейБолезни.ГоловнаяОрганизация)
		|			И (Приоритеты.Дата = ДатыДнейБолезни.Дата)
		|			И (Приоритеты.Приоритет = ДатыДнейБолезни.Приоритет)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыДнейБолезни.ФизическоеЛицо,
		|	ДатыДнейБолезни.Сотрудник,
		|	ДатыДнейБолезни.ГоловнаяОрганизация,
		|	ДатыДнейБолезни.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыДней.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДатыДней.Сотрудник КАК Сотрудник,
		|	ДатыДней.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДатыДней.ВидБолезниУходаЗаДетьми КАК ВидБолезниУходаЗаДетьми,
		|	ВЫБОР
		|		КОГДА ДатыДнейПред.Дата ЕСТЬ NULL 
		|			ТОГДА ДатыДней.Дата
		|	КОНЕЦ КАК Начало
		|ПОМЕСТИТЬ ВТДатыНачалаИнтервалов
		|ИЗ
		|	ВТДатыДнейБолезниУходаЗаДетьмиПоПриоритету КАК ДатыДней
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыДнейБолезниУходаЗаДетьмиПоПриоритету КАК ДатыДнейПред
		|		ПО ДатыДней.ФизическоеЛицо = ДатыДнейПред.ФизическоеЛицо
		|			И ДатыДней.Сотрудник = ДатыДнейПред.Сотрудник
		|			И ДатыДней.ГоловнаяОрганизация = ДатыДнейПред.ГоловнаяОрганизация
		|			И ДатыДней.ВидБолезниУходаЗаДетьми = ДатыДнейПред.ВидБолезниУходаЗаДетьми
		|			И (ДатыДней.Дата = ДОБАВИТЬКДАТЕ(ДатыДнейПред.Дата, ДЕНЬ, 1))
		|ГДЕ
		|	ДатыДнейПред.Дата ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыДней.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДатыДней.Сотрудник КАК Сотрудник,
		|	ДатыДней.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ДатыДней.ВидБолезниУходаЗаДетьми КАК ВидБолезниУходаЗаДетьми,
		|	ВЫБОР
		|		КОГДА ДатыДнейСлед.Дата ЕСТЬ NULL 
		|			ТОГДА ДатыДней.Дата
		|	КОНЕЦ КАК Окончание
		|ПОМЕСТИТЬ ВТДатыОкончанияИнтервалов
		|ИЗ
		|	ВТДатыДнейБолезниУходаЗаДетьмиПоПриоритету КАК ДатыДней
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыДнейБолезниУходаЗаДетьмиПоПриоритету КАК ДатыДнейСлед
		|		ПО ДатыДней.ФизическоеЛицо = ДатыДнейСлед.ФизическоеЛицо
		|			И ДатыДней.Сотрудник = ДатыДнейСлед.Сотрудник
		|			И ДатыДней.ГоловнаяОрганизация = ДатыДнейСлед.ГоловнаяОрганизация
		|			И ДатыДней.ВидБолезниУходаЗаДетьми = ДатыДнейСлед.ВидБолезниУходаЗаДетьми
		|			И (ДатыДней.Дата = ДОБАВИТЬКДАТЕ(ДатыДнейСлед.Дата, ДЕНЬ, -1))
		|ГДЕ
		|	ДатыДнейСлед.Дата ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыНачалаИнтервалов.ФизическоеЛицо,
		|	ДатыНачалаИнтервалов.Сотрудник,
		|	ДатыНачалаИнтервалов.ГоловнаяОрганизация,
		|	ДатыНачалаИнтервалов.ВидБолезниУходаЗаДетьми,
		|	ДатыНачалаИнтервалов.Начало,
		|	МИНИМУМ(ДатыОкончанияИнтервалов.Окончание) КАК Окончание
		|ПОМЕСТИТЬ ВТИнтервалы
		|ИЗ
		|	ВТДатыНачалаИнтервалов КАК ДатыНачалаИнтервалов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыОкончанияИнтервалов КАК ДатыОкончанияИнтервалов
		|		ПО ДатыНачалаИнтервалов.ФизическоеЛицо = ДатыОкончанияИнтервалов.ФизическоеЛицо
		|			И ДатыНачалаИнтервалов.Сотрудник = ДатыОкончанияИнтервалов.Сотрудник
		|			И ДатыНачалаИнтервалов.ГоловнаяОрганизация = ДатыОкончанияИнтервалов.ГоловнаяОрганизация
		|			И ДатыНачалаИнтервалов.ВидБолезниУходаЗаДетьми = ДатыОкончанияИнтервалов.ВидБолезниУходаЗаДетьми
		|			И ДатыНачалаИнтервалов.Начало <= ДатыОкончанияИнтервалов.Окончание
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыНачалаИнтервалов.ФизическоеЛицо,
		|	ДатыНачалаИнтервалов.Сотрудник,
		|	ДатыНачалаИнтервалов.ГоловнаяОрганизация,
		|	ДатыНачалаИнтервалов.ВидБолезниУходаЗаДетьми,
		|	ДатыНачалаИнтервалов.Начало
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Сотрудник,
		|	Интервалы.ГоловнаяОрганизация,
		|	Интервалы.ВидБолезниУходаЗаДетьми,
		|	Интервалы.Начало КАК Начало,
		|	Интервалы.Окончание,
		|	КОЛИЧЕСТВО(ДатыДней.Дата) КАК Дни,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.Начисления) КАК Источник
		|ИЗ
		|	ВТИнтервалы КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыДнейБолезниУходаЗаДетьмиПоПриоритету КАК ДатыДней
		|		ПО Интервалы.ФизическоеЛицо = ДатыДней.ФизическоеЛицо
		|			И Интервалы.Сотрудник = ДатыДней.Сотрудник
		|			И Интервалы.ГоловнаяОрганизация = ДатыДней.ГоловнаяОрганизация
		|			И Интервалы.ВидБолезниУходаЗаДетьми = ДатыДней.ВидБолезниУходаЗаДетьми
		|			И (ДатыДней.Дата МЕЖДУ Интервалы.Начало И Интервалы.Окончание)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Сотрудник,
		|	Интервалы.ГоловнаяОрганизация,
		|	Интервалы.ВидБолезниУходаЗаДетьми,
		|	Интервалы.Начало,
		|	Интервалы.Окончание
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыБолезниУходаЗаДетьми.ФизическоеЛицо,
		|	ПериодыБолезниУходаЗаДетьми.Сотрудник,
		|	ПериодыБолезниУходаЗаДетьми.ГоловнаяОрганизация,
		|	ПериодыБолезниУходаЗаДетьми.ВидБолезниУходаЗаДетьми,
		|	ПериодыБолезниУходаЗаДетьми.Начало,
		|	ПериодыБолезниУходаЗаДетьми.Окончание,
		|	ПериодыБолезниУходаЗаДетьми.Дни,
		|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхДляРасчетаСреднегоЗаработка.СведенияДоНачалаЭксплуатации)
		|ИЗ
		|	РегистрСведений.ПериодыБолезниУходаЗаДетьми КАК ПериодыБолезниУходаЗаДетьми
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалы КАК Интервалы
		|		ПО (Интервалы.Начало <= ПериодыБолезниУходаЗаДетьми.Окончание)
		|			И (Интервалы.Окончание >= ПериодыБолезниУходаЗаДетьми.Начало)
		|ГДЕ
		|	Интервалы.Начало ЕСТЬ NULL 
		|	И ПериодыБолезниУходаЗаДетьми.ФизическоеЛицо = &ФизическоеЛицо
		|	И ПериодыБолезниУходаЗаДетьми.Сотрудник = &Сотрудник
		|	И ПериодыБолезниУходаЗаДетьми.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И ПериодыБолезниУходаЗаДетьми.Начало МЕЖДУ &Начало И &Окончание
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начало";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Окончание", Окончание);
	
	Запрос.УстановитьПараметр("ПоНаименованиямПериодов", ПоНаименованиямПериодов);
	Запрос.УстановитьПараметр("НаименованиеПериодаНетрудоспособности", 		НСтр("ru='Период временной нетрудоспособности';uk='Період тимчасової непрацездатності'"));
	Запрос.УстановитьПараметр("НаименованиеПериодаОтпускаПоБеременности", 	НСтр("ru='Отпуск по беременности и родам';uk='Відпустка у зв''язку з вагітністю та пологами'"));
	Запрос.УстановитьПараметр("НаименованиеПериодаОтпускаПоУходу", 			НСтр("ru='Отпуск по уходу за ребенком';uk='Відпустка по догляду за дитиною'"));

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти 

#Область ПолучениеДанныхДляРасчетаСреднегоЗаработкаПоДокументу

// Создает временную таблицу с реквизитами документов необходимыми для формирования
// структуры параметров расчета среденго заработка ФСС
//
// Параметры:
//  МенеджерВременныхТаблиц	 - менеджер временных таблиц, куда будет помещена временная таблица ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС 
//  МассивСсылок			 - массив ссылок, по которым необходимо получить данные, допустимые типы элементов - "ДокументСсылка.БольничныйЛист", "ДокументСсылка.ОтпускПоУходуЗаРебенком" 
//
Процедура СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(МенеджерВременныхТаблиц, МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);

	Запрос.Текст =   
	"ВЫБРАТЬ
	|	БольничныйЛист.Ссылка,
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	ВЫБОР
	|		КОГДА БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве)
	|				ИЛИ БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.Профзаболевание)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПрименятьПредельнуюВеличину,
	|	ВЫБОР
	|		КОГДА БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьДниБолезниУходаЗаДетьми
	|ПОМЕСТИТЬ ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФССБезМРОТ
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускПоУходуЗаРебенком.Ссылка,
	|	ОтпускПоУходуЗаРебенком.Сотрудник,
	|	ОтпускПоУходуЗаРебенком.ДатаНачала,
	|	ИСТИНА,
	|	ИСТИНА
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|ГДЕ
	|	ОтпускПоУходуЗаРебенком.Ссылка В(&МассивСсылок)";	
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФССБезМРОТ");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", "ДатаНачалаСобытия");

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"МинимальнаяОплатаТруда",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		,
		"ВТМинимальнаяОплатаТруда");
		
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ДанныеДокументаРасчетаСреднего.Ссылка,
	|	ДанныеДокументаРасчетаСреднего.Сотрудник,
	|	ДанныеДокументаРасчетаСреднего.ДатаНачалаСобытия,
	|	ДанныеДокументаРасчетаСреднего.ПрименятьПредельнуюВеличину,
	|	ДанныеДокументаРасчетаСреднего.ИспользоватьДниБолезниУходаЗаДетьми,
	|	МинимальнаяОплатаТруда.Размер КАК МинимальныйРазмерОплатыТруда
	|ПОМЕСТИТЬ ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС
	|ИЗ
	|	ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФССБезМРОТ КАК ДанныеДокументаРасчетаСреднего
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМинимальнаяОплатаТруда КАК МинимальнаяОплатаТруда
	|		ПО ДанныеДокументаРасчетаСреднего.ДатаНачалаСобытия = МинимальнаяОплатаТруда.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФССБезМРОТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТМинимальнаяОплатаТруда";	
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Функция - Таблицы данных среднего заработка ФСС
//
// Параметры:
//  ИмяДокумента - Строка, имя документа для которого надо получить данные для расчета среднего заработка
//  МассивСсылок - массив, "ДокументСсылка.БольничныйЛист", "ДокументСсылка.ОтпускПоУходуЗаРебенком" 
// 
// Возвращаемое значение:
//  ДанныеДляРасчета - структура, содержит поля с таблицами данных для расчета среднего заработка по МассивСсылок 
//					ДанныеОНачислениях, Таблица значений	
//					ДанныеОВремени, Таблица значений	
//					ДанныеСтрахователей, Таблица значений	
//
Функция ТаблицыДанныхСреднегоЗаработкаФСС(ИмяДокумента, МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СреднийЗаработокФСС.Ссылка,
		|	СреднийЗаработокФСС.ПорядокРасчета,
		|	СреднийЗаработокФСС.ФизическоеЛицо,
		|	СреднийЗаработокФСС.СтатьяФинансирования,
		|	СреднийЗаработокФСС.Период,
		|	СреднийЗаработокФСС.СуммаСУчетомОграничений,
		|	СреднийЗаработокФСС.УчтеннаяСумма,
		|	СреднийЗаработокФСС.Сумма
		|ИЗ
		|	Документ.#ИмяДокумента#.СреднийЗаработокФСС КАК СреднийЗаработокФСС
		|ГДЕ
		|	СреднийЗаработокФСС.Ссылка В (&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтработанноеВремяДляСреднегоФСС.Ссылка,
		|	ОтработанноеВремяДляСреднегоФСС.ФизическоеЛицо,
		|	ОтработанноеВремяДляСреднегоФСС.Период,
		|	ОтработанноеВремяДляСреднегоФСС.ОтработаноДнейКалендарных,
		|	ОтработанноеВремяДляСреднегоФСС.ДнейБолезниУходаЗаДетьми,
		|	ОтработанноеВремяДляСреднегоФСС.Источник
		|ИЗ
		|	Документ.#ИмяДокумента#.ОтработанноеВремяДляСреднегоФСС КАК ОтработанноеВремяДляСреднегоФСС
		|ГДЕ
		|	ОтработанноеВремяДляСреднегоФСС.Ссылка В (&МассивСсылок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументДанныеДругихСтрахователей.Ссылка,
		|	ДокументДанныеДругихСтрахователей.ФизическоеЛицо,
		|	ДокументДанныеДругихСтрахователей.Месяц,
		|	ДокументДанныеДругихСтрахователей.Страхователь,
		|	ДокументДанныеДругихСтрахователей.Сумма,
		|	ДокументДанныеДругихСтрахователей.ДнейБолезниУходаЗаДетьми
		|ИЗ
		|	Документ.#ИмяДокумента#.СреднийЗаработокДанныеСтрахователей КАК ДокументДанныеДругихСтрахователей
		|ГДЕ
		|	ДокументДанныеДругихСтрахователей.Ссылка В (&МассивСсылок)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяДокумента#", ИмяДокумента);
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДанныеОНачислениях 	= Результат[0].Выгрузить();
	ДанныеВремени 		= Результат[1].Выгрузить();
	ДанныеСтрахователей	= Результат[2].Выгрузить();
	
	ДанныеДляРасчета 	= Новый Структура("ДанныеОНачислениях,ДанныеОВремени,ДанныеСтрахователей", ДанныеОНачислениях, ДанныеВремени, ДанныеСтрахователей);
	
	Возврат ДанныеДляРасчета;
	
КонецФункции 

Функция ОписаниеТипаСтраховательСреднийЗаработокФСС() Экспорт
	Возврат Новый ОписаниеТипов("СправочникСсылка.Работодатели,СправочникСсылка.Организации");
КонецФункции 

#КонецОбласти 

#Область МетодыОбслуживанияФормДокументовДляРасчетаСреднегоЗаработка

// Процедура заполняет таблицы документа данными учета среднего заработка
// по результатам их редактирования.
//
Процедура ЗаполнитьДанныеУчетаСреднегоЗаработкаФСС(Объект, СреднийЗаработок, Форма) Экспорт
	
	РедактируемыеНачисления = ПолучитьИзВременногоХранилища(СреднийЗаработок.ДанныеОНачислениях);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РедактируемыеНачисления, Объект.СреднийЗаработокФСС);
	
	Если СреднийЗаработок.Свойство("ДанныеОВремени") И ЗначениеЗаполнено(СреднийЗаработок.ДанныеОВремени) Тогда 
		РедактируемоеВремя = ПолучитьИзВременногоХранилища(СреднийЗаработок.ДанныеОВремени);
		Если РедактируемоеВремя <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РедактируемоеВремя, Объект.ОтработанноеВремяДляСреднегоФСС);
		КонецЕсли;	
	КонецЕсли;	
	
	Если Объект.Свойство("СреднийЗаработокДанныеСтрахователей") И СреднийЗаработок.Свойство("ДанныеСтрахователей") Тогда
		РедактируемыеДанныеСтрахователей = ПолучитьИзВременногоХранилища(СреднийЗаработок.ДанныеСтрахователей);
		Если РедактируемыеДанныеСтрахователей <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РедактируемыеДанныеСтрахователей, Объект.СреднийЗаработокДанныеСтрахователей);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Свойство("ПериодыБолезниУходаЗаДетьми") И СреднийЗаработок.Свойство("ПериодыОтсутствий") Тогда
		ПериодыБолезниУходаЗаДетьми = ПолучитьИзВременногоХранилища(СреднийЗаработок.ПериодыОтсутствий);
		Если ПериодыБолезниУходаЗаДетьми <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПериодыБолезниУходаЗаДетьми, Объект.ПериодыБолезниУходаЗаДетьми);
		КонецЕсли;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры	
Функция ПараметрыОбновленияДанныхУчетаСреднегоЗаработкаФСС() Экспорт
	Параметры = Новый Структура(
		"ДанныеОНачислениях, 
		|ДанныеОВремени, 
		|ДанныеСтрахователей, 
		|ПериодыОтсутствий,     
		|ДокументСсылка,
		|УчитыватьЗаработокПредыдущихСтрахователей,
		|ПричинаНетрудоспособности,
		|НомерЛисткаНетрудоспособности,
		|ПорядокРасчета");
		
	Возврат Параметры;
	
КонецФункции

// Процедура выполняет объединение данных среднего заработка 
// из учета с аналогичными данными документа.
// Выполняется, например, при изменении периода расчета среднего заработка.
// Обеспечивает сохранение пользовательских данных в документе.
//
Процедура ОбновитьДанныеУчетаСреднегоЗаработкаФСС(Сотрудник, НачалоПериода, ОкончаниеПериода, ДополнительныеПараметры) Экспорт
	ДанныеОНачислениях = ДополнительныеПараметры.ДанныеОНачислениях;
	ДанныеОВремени = ДополнительныеПараметры.ДанныеОВремени;
	ДанныеСтрахователей = ДополнительныеПараметры.ДанныеСтрахователей;
	ПериодыОтсутствий = ДополнительныеПараметры.ПериодыОтсутствий;
	ПорядокРасчета = ДополнительныеПараметры.ПорядокРасчета;
	УчитыватьЗаработокПредыдущихСтрахователей = ДополнительныеПараметры.УчитыватьЗаработокПредыдущихСтрахователей;	
	ПричинаНетрудоспособности = ДополнительныеПараметры.ПричинаНетрудоспособности;
	НомерЛисткаНетрудоспособности = ДополнительныеПараметры.НомерЛисткаНетрудоспособности;
	ДокументСсылка = ДополнительныеПараметры.ДокументСсылка;
	// Удаляем строки, "не попадающие" в новый период расчета среднего.
	УчетСреднегоЗаработка.УдалитьДанныеВнеПериодаРасчетаСреднегоЗаработка(ДанныеОНачислениях, НачалоПериода, ОкончаниеПериода, ПорядокРасчета); 
	УчетСреднегоЗаработка.УдалитьДанныеВнеПериодаРасчетаСреднегоЗаработка(ДанныеОВремени, НачалоПериода, ОкончаниеПериода); 
		
	ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС();
	ДополнительныеПараметры.НачалоПериода = НачалоПериода;
	ДополнительныеПараметры.ОкончаниеПериода = ОкончаниеПериода;
	ДополнительныеПараметры.ПорядокРасчета = ПорядокРасчета;
	ДополнительныеПараметры.УчитыватьЗаработокПредыдущихСтрахователей = УчитыватьЗаработокПредыдущихСтрахователей;	
	ДополнительныеПараметры.ПричинаНетрудоспособности = ПричинаНетрудоспособности;
	ДополнительныеПараметры.НомерЛисткаНетрудоспособности = НомерЛисткаНетрудоспособности;
	ДополнительныеПараметры.ДокументСсылка = ДокументСсылка;
	ДанныеДляРасчета = ДанныеДляРасчетаСреднегоЗаработкаФСССотрудника(Сотрудник, ДополнительныеПараметры);
	
	// Объединение данных, полученных из учета, с данными документа осуществляется по следующим правилам
	// Данные в документе заменяются данными из учета в одном из следующих случаев
	//	- источник данных в документе не относится к группе источников "Результаты редактирования" (СведенияДоНачалаЭксплуатации и Исправления)
	//	- порядковый номер источника из учета (приоритет) выше, чем в документе 
	
	// Следовательно, необходимо в разрезе сотрудника и месяца для каждой коллекции определить максимальный приоритет источника 
	// и наличие результатов редактирования.
	
	ПриоритетИсточников = Перечисления.ИсточникиДанныхДляРасчетаСреднегоЗаработка.ПриоритетИсточников();
	СохраняемыеЗначения = Перечисления.ИсточникиДанныхДляРасчетаСреднегоЗаработка.РезультатыРедактирования();
	
	СочетанияЗамены = Новый ТаблицаЗначений;
	СочетанияЗамены.Колонки.Добавить("ФизическоеЛицо");
	СочетанияЗамены.Колонки.Добавить("Период");
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо, Период");
	
	СоответствиеКоллекций = Новый Соответствие;
	СоответствиеКоллекций.Вставить(ДанныеДляРасчета.ДанныеОНачислениях, ДанныеОНачислениях);
	СоответствиеКоллекций.Вставить(ДанныеДляРасчета.ДанныеОВремени, ДанныеОВремени);
	
	Для Каждого КлючИЗначение Из СоответствиеКоллекций Цикл
		КоллекцияУчета = КлючИЗначение.Ключ;
		КоллекцияДокумента = КлючИЗначение.Значение;
		СочетанияЗамены.Очистить();
		Для Каждого СтрокаДанных Из КоллекцияУчета Цикл
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаДанных);
			НайденныеСочетания = СочетанияЗамены.НайтиСтроки(ОтборСтрок);
			Если НайденныеСочетания.Количество() > 0 Тогда
				// Такое сочетание уже есть, пропускаем.
				Продолжить;
			КонецЕсли;
			НайденныеСтроки = КоллекцияДокумента.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() = 0 Тогда
				// Строк за этот месяц вовсе нет в документе, добавляем.
				ЗаполнитьЗначенияСвойств(СочетанияЗамены.Добавить(), СтрокаДанных);
				Продолжить;
			КонецЕсли;
			ЕстьСохраняемыеЗначения = Ложь;
			ПриоритетИзДокумента = 0;
			Для Каждого СтрокаДокумента Из НайденныеСтроки Цикл
				Если СохраняемыеЗначения.Найти(СтрокаДокумента.Источник) <> Неопределено Тогда
					// Источник относится к сохраняемым значениям, пропускаем.
					ЕстьСохраняемыеЗначения = Истина;
				КонецЕсли;
				Приоритет = ПриоритетИсточников[СтрокаДокумента.Источник];
				Если ПриоритетИзДокумента < Приоритет Тогда
					ПриоритетИзДокумента = Приоритет;
				КонецЕсли;
			КонецЦикла;
			Если Не ЕстьСохраняемыеЗначения Тогда
				ЗаполнитьЗначенияСвойств(СочетанияЗамены.Добавить(), СтрокаДанных);
				Продолжить;
			КонецЕсли;
			// Сравниваем приоритет.
			ПриоритетИзУчета = ПриоритетИсточников[СтрокаДанных.Источник];
			Если ПриоритетИзУчета > ПриоритетИзДокумента Тогда
				ЗаполнитьЗначенияСвойств(СочетанияЗамены.Добавить(), СтрокаДанных);
			КонецЕсли;
		КонецЦикла;
		
		// Удаляем все строки, соответствующие отобранным сочетаниям Сотрудник + Период.
		Для Каждого Сочетание Из СочетанияЗамены Цикл
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Сочетание);
			// Переносим.
			// Удаляем существующие строки...
			СтрокиДокумента = КоллекцияДокумента.НайтиСтроки(ОтборСтрок);
			Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
				КоллекцияДокумента.Удалить(СтрокаДокумента);
			КонецЦикла;
			// ..и добавляем из данных расчета.
			СтрокиУчета = КоллекцияУчета.НайтиСтроки(ОтборСтрок);
			Для Каждого СтрокаУчета Из СтрокиУчета Цикл
				ЗаполнитьЗначенияСвойств(КоллекцияДокумента.Добавить(), СтрокаУчета);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Данные страхователей обновляем полностью, т.к. они не редактируются.
	ДанныеСтрахователей.Очистить();
	ТаблицаДанныхСтрахователей = ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСССотрудника(Сотрудник, НачалоПериода, ОкончаниеПериода, ПорядокРасчета);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДанныхСтрахователей, ДанныеСтрахователей);
	
	// Объединить сведения о периодах отсутствия.
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаКоллекции Из ПериодыОтсутствий Цикл
		Если СохраняемыеЗначения.Найти(СтрокаКоллекции.Источник) = Неопределено Тогда
			// Не корректировки удаляем.
			УдаляемыеСтроки.Добавить(СтрокаКоллекции);
			Продолжить;
		КонецЕсли;
		// Удаляем только в случае, если в новых данных есть период, захватывающий указанный.
		Для Каждого СтрокаТаблицы Из ДанныеДляРасчета.ПериодыОтсутствий Цикл
			Если СтрокаКоллекции.Начало <= СтрокаТаблицы.Окончание И СтрокаКоллекции.Окончание >= СтрокаТаблицы.Начало Тогда
				УдаляемыеСтроки.Добавить(СтрокаКоллекции);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ПериодыОтсутствий.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляРасчета.ПериодыОтсутствий, ПериодыОтсутствий);
	
КонецПроцедуры

// Выполняет упаковку данных среднего заработка ФСС формы документа для передачи в форму редактирования.
//
Процедура ЗаполнитьТаблицыДанныхСреднегоЗаработкаФССПоДокументу(ДанныеФормыОбъект, ПараметрыРедактирования) Экспорт
	// Переносим содержимое табличных частей в таблицы значений и помещаем последние во временное хранилище
	// - начисления.
	ДанныеНачислений = УчетПособийСоциальногоСтрахованияРасширенный.ПустаяТаблицаНачисленийСреднийЗаработокФСС();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыОбъект.СреднийЗаработокФСС, ДанныеНачислений);
	ПараметрыРедактирования.ДанныеОНачислениях = ПоместитьВоВременноеХранилище(ДанныеНачислений);
	
	// - отработанное время
	ОтработанноеВремя = УчетПособийСоциальногоСтрахованияРасширенный.ПустаяТаблицаОтработанноеВремяСреднийЗаработокФСС();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыОбъект.ОтработанноеВремяДляСреднегоФСС, ОтработанноеВремя);
	ПараметрыРедактирования.ДанныеОВремени = ПоместитьВоВременноеХранилище(ОтработанноеВремя);

	Если ДанныеФормыОбъект.УчитыватьЗаработокПредыдущихСтрахователей Тогда
		// - данные страхователей
		ДанныеСтрахователей = УчетПособийСоциальногоСтрахования.ПустаяТаблицаДанныеСтрахователейСреднийЗаработокФСС();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыОбъект.СреднийЗаработокДанныеСтрахователей, ДанныеСтрахователей);
		ПараметрыРедактирования.ДанныеСтрахователей = ПоместитьВоВременноеХранилище(ДанныеСтрахователей);
	КонецЕсли;
	
	// Периоды отсутствия.
	ПериодыОтсутствий = ПустаяТаблицаПериодыБолезниУходаЗаДетьми();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыОбъект.ПериодыБолезниУходаЗаДетьми, ПериодыОтсутствий);
	ПараметрыРедактирования.ПериодыОтсутствий = ПоместитьВоВременноеХранилище(ПериодыОтсутствий);
	
КонецПроцедуры

#Область ИнформацияОЗаполненностиДанныхСреднегоЗаработка

// Функция формирует структуру информационных сведений о заполненности данных 
//  для расчета общего среднего заработка сотрудника.
//
// Параметры:
//	Ссылка				- ДокументСсылка на документ а котором рассчитывается средний заработок
//	ЗаполнениеВыполнено	- Булево, Истина, если в документе произведено заполнение расчета среднего заработка
// 	Сотрудник
//	НачалоРасчета - дата начала периода расчета среднего заработка.
//	ОкончаниеРасчета - дата окончания периода расчета среднего заработка.
//	ДанныеНачислений - данные формы табличной части начислений общего среднего заработка.
//	ДанныеОВремени - данные формы табличной части времени общего среднего заработка.
//	УчитыватьДанныеОВремени - булево, необходимость проверки заполненности данных о времени.
//	ЭтоПорядокРасчета2011 - булево, расчет среднего заработка по правилам 2011 года.
//	РасчетныеМесяцы - массив лет для формирования надписи.
//
Функция ИнформацияОЗаполненностиДанныхСреднегоЗаработка(Ссылка, ЗаполнениеВыполнено, ПараметрыРасчетаСреднегоЗаработка, СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок) Экспорт
	
	Если УчетСреднегоЗаработка.ТребуетсяПерезаполнитьСведенияОСреднемЗаработке(Ссылка, ЗаполнениеВыполнено) Тогда
		
		СтруктураИнфонадписи = УчетСреднегоЗаработка.ИнфонадписьТребуетсяПерезаполнитьСведенияОСреднемЗаработке();
		
	ИначеЕсли ТребуетсяДозаполнитьСведенияОСреднемЗаработке(ПараметрыРасчетаСреднегоЗаработка) Тогда
		
		СтруктураИнфонадписи = УчетСреднегоЗаработка.ИнфонадписьТребуетсяДозаполнитьСведенияОСреднемЗаработке();
		
	Иначе 
		
		Если ПараметрыРасчетаСреднегоЗаработка.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011 Тогда
			СтруктураИнфонадписи = ИнфонадписьИспользованныеДанныеОСреднемЗаработкеФСС(ПараметрыРасчетаСреднегоЗаработка.РасчетныеГоды);
		иначе
			СтруктураИнфонадписи = УчетСреднегоЗаработка.ИнфонадписьИспользованныеДанныеОСреднемЗаработке(ПараметрыРасчетаСреднегоЗаработка.ПериодРасчетаСреднегоЗаработкаНачало, ПараметрыРасчетаСреднегоЗаработка.ПериодРасчетаСреднегоЗаработкаОкончание);
		КонецЕсли;
		Если ПараметрыРасчетаСреднегоЗаработка.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			Если ПараметрыРасчетаСреднегоЗаработка.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереДвухММОТ Тогда
				Если ПредупредитьОРасчетеИзДвойногоМинимальногоСреднего(СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок) Тогда 
					ПредупреждениеОРасчетеИзМинимальногоСреднегоЗаработка = ПредупреждениеОРасчетеИзДвойногоМинимальногоСреднегоЗаработка(МинимальныйСреднедневнойЗаработок);
					СтруктураИнфонадписи.Текст = Новый ФорматированнаяСтрока(ПредупреждениеОРасчетеИзМинимальногоСреднегоЗаработка, Символы.ПС, СтруктураИнфонадписи.Текст);
				ИначеЕсли ПредупредитьОРасчетеИзМинимальногоСреднего(СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок) Тогда 
					ПредупреждениеОРасчетеИзМинимальногоСреднегоЗаработка = ПредупреждениеОРасчетеИзМинимальногоСреднегоЗаработка(МинимальныйСреднедневнойЗаработок);
					СтруктураИнфонадписи.Текст = Новый ФорматированнаяСтрока(ПредупреждениеОРасчетеИзМинимальногоСреднегоЗаработка, Символы.ПС, СтруктураИнфонадписи.Текст);
				КонецЕсли
			ИначеЕсли ПредупредитьОРасчетеИзМинимальногоСреднего(СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок) Тогда 
				ПредупреждениеОРасчетеИзМинимальногоСреднегоЗаработка = ПредупреждениеОРасчетеИзМинимальногоСреднегоЗаработка(МинимальныйСреднедневнойЗаработок);
				СтруктураИнфонадписи.Текст = Новый ФорматированнаяСтрока(ПредупреждениеОРасчетеИзМинимальногоСреднегоЗаработка, Символы.ПС, СтруктураИнфонадписи.Текст);
			КонецЕсли;
		Иначе
			Если ПараметрыРасчетаСреднегоЗаработка.ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОграничениеВРазмереММОТ Тогда
				Если ПредупредитьОбОграниченииМинимальнымСредним(СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок) Тогда
					ПредупреждениеОРасчетеИзМинимальногоСреднегоЗаработка = ПредупреждениеОРасчетеИзМинимальногоСреднегоЗаработка(МинимальныйСреднедневнойЗаработок);
					СтруктураИнфонадписи.Текст = Новый ФорматированнаяСтрока(ПредупреждениеОРасчетеИзМинимальногоСреднегоЗаработка, Символы.ПС, СтруктураИнфонадписи.Текст);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат СтруктураИнфонадписи;
	
КонецФункции

// Функция возвращает структуру для заполнения инфонадписи о заполненности данных для расчета
// среднего заработка сотрудника.
//
// Параметры:
//	РасчетныеГоды - массив лет для формирования надписи.
//
Функция ИнфонадписьИспользованныеДанныеОСреднемЗаработкеФСС(РасчетныеГоды)
	
	// Формируем представление годов вида 2009, 2010, 2011.
	ГодыПредставление = "";
	Для каждого РасчетныйГод Из РасчетныеГоды Цикл
		ГодыПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2, ", 
		ГодыПредставление,
		Формат(РасчетныйГод, "ЧГ="));
	КонецЦикла;	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ГодыПредставление, 2);
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Использованы данные о заработке за %1 г.';uk='Використані дані про заробіток за %1 р.'"), ГодыПредставление);
	
	Картинка = БиблиотекаКартинок.Информация;
	
	Возврат УчетСреднегоЗаработка.ЗаполненнаяСтруктураИнфонадписиОСреднемЗаработке(ТекстСообщения, Картинка);
	
КонецФункции

Функция ТребуетсяДозаполнитьСведенияОСреднемЗаработке(ПараметрыРасчетаСреднегоЗаработка)
	
	Возврат УчетСреднегоЗаработка.ТребуетсяДозаполнитьСведенияОСреднемЗаработке(ПараметрыРасчетаСреднегоЗаработка.Сотрудник, 
																ПараметрыРасчетаСреднегоЗаработка.ПериодРасчетаСреднегоЗаработкаНачало, 
																ПараметрыРасчетаСреднегоЗаработка.ПериодРасчетаСреднегоЗаработкаОкончание, 
																ПараметрыРасчетаСреднегоЗаработка.ДатаНачалаСобытия, 
																ПараметрыРасчетаСреднегоЗаработка.ДанныеНачислений, 
																ПараметрыРасчетаСреднегоЗаработка.ДанныеВремени, 
																НЕ ПараметрыРасчетаСреднегоЗаработка.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011);

КонецФункции 

Функция ПредупредитьОРасчетеИзМинимальногоСреднего(СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок)
	
	Возврат СреднийДневнойЗаработок < МинимальныйСреднедневнойЗаработок;
	
КонецФункции

Функция ПредупреждениеОРасчетеИзМинимальногоСреднегоЗаработка(МинимальныйСреднедневнойЗаработок)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Пособие рассчитывается на основании среднедневного заработка из МРОТ: %1 грн.';uk='Допомога розраховується на підставі середньоденного заробітку з МРОП: %1 грн.'"), МинимальныйСреднедневнойЗаработок);
	
КонецФункции
Функция ПредупредитьОбОграниченииМинимальнымСредним(СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок)
	
	Возврат СреднийДневнойЗаработок > МинимальныйСреднедневнойЗаработок;
	
КонецФункции
Функция ПредупредитьОРасчетеИзДвойногоМинимальногоСреднего(СреднийДневнойЗаработок, МинимальныйСреднедневнойЗаработок)
	
	Возврат СреднийДневнойЗаработок > МинимальныйСреднедневнойЗаработок*2;
	
КонецФункции
Функция ПредупреждениеОРасчетеИзДвойногоМинимальногоСреднегоЗаработка(МинимальныйСреднедневнойЗаработок)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Пособие рассчитывается на основании среднедневного заработка из МРОТ в двойном размере: %1 грн.';uk='Допомога розраховується на підставі середньоденного заробітку з МРОП в подвійному розмірі: %1 грн.'"), МинимальныйСреднедневнойЗаработок*2);
	
КонецФункции


#КонецОбласти

#КонецОбласти

#Область КонструкторыТаблицДанныхСреднегоЗаработка

// Создает таблицу значений со структурой аналогичной структуре табличной части СреднийЗаработокФСС
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаНачисленийСреднийЗаработокФСС() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС"));
	ТаблицаДанных.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	ТаблицаДанных.Колонки.Добавить("Предел", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(12, 2));
	ТаблицаДанных.Колонки.Добавить("УчтеннаяСумма", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("СуммаСУчетомОграничений", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(15, 2));

	Возврат ТаблицаДанных;
	
КонецФункции

// Создает таблицу значений со структурой аналогичной структуре табличной части ОтработанноеВремяДляСреднегоФСС
// для хранения данных среднего заработка в документе.
//
Функция ПустаяТаблицаОтработанноеВремяСреднийЗаработокФСС() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 0));
	ТаблицаДанных.Колонки.Добавить("ДнейБолезниУходаЗаДетьми", Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(7, 0));
	ТаблицаДанных.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПустаяТаблицаИсходныхДанныхРасчетаСреднегоЗаработкаФСС()
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС"));
	ИсходныеДанные.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("ОкончаниеПериода", Новый ОписаниеТипов("Дата"));
	
	Возврат ИсходныеДанные;
	
КонецФункции

Функция ПустаяТаблицаПериодыБолезниУходаЗаДетьми()
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Дни", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ВидБолезниУходаЗаДетьми", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

#КонецОбласти

// Процедура выполняет удаление в таблице данных о начислениях 
//  избыточных с точки зрения применения данных.
// Например, для порядка расчета Постановление2010 
//  не имеет смысла регистрация данных с начала января 2013 года.
//
// Параметры:
//	- ДанныеОНачислениях - таблица значений с данными о начислениях для 
//  	расчета среднего заработка.
//
Процедура УдалитьИзбыточныеДанныеРасчетаСреднегоЗаработкаФСС(ДанныеОНачислениях)
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаТаблицы Из ДанныеОНачислениях Цикл
		Если СтрокаТаблицы.Месяц >= Дата(2013, 1, 1)
			И СтрокаТаблицы.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2010 Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ДанныеОНачислениях.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу ВТИсходныеДанные
// в которых дополняет таблицу сотрудников (с полями Сотрудник, ДатаНачалаСобытия)
// колонками (и строками), достаточными для получения данных для расчета среднего заработка.
// Для каждого сотрудника создает отдельные строки для каждого месяца, входящего в период расчета среднего заработка.
//
Процедура СоздатьВТИсходныеДанныеПоСотруднику(МенеджерВременныхТаблиц, Сотрудник, НачалоПериода, ОкончаниеПериода, ПорядокРасчета, ОтборМесяцев = Неопределено) 
	
	ИсходныеДанные = ПустаяТаблицаИсходныхДанныхРасчетаСреднегоЗаработкаФСС();
	
	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.НачалоПериода = НачалоПериода;
	НоваяСтрока.ОкончаниеПериода = ОкончаниеПериода;
	НоваяСтрока.ПорядокРасчета = ПорядокРасчета;
	
	СоздатьВТИсходныеДанные(МенеджерВременныхТаблиц, ИсходныеДанные, ОтборМесяцев);	
	
КонецПроцедуры

// Функция составляет массив правил расчета среднего ФСС, 
// отличных от указанного
//
// Параметры:
//	- ПорядокРасчета, тип ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаФСС.
//
Функция ДругиеПорядкиРасчетаСреднегоФСС(ПорядокРасчета) Экспорт
	
	ДругиеПорядкиРасчета = Новый Массив;
	
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.ЗначенияПеречисления Цикл
		Если Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС[ЗначениеПеречисления.Имя] = ПорядокРасчета Тогда
			Продолжить;
		КонецЕсли;
		ДругиеПорядкиРасчета.Добавить(Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС[ЗначениеПеречисления.Имя]);
	КонецЦикла;
	
	Возврат ДругиеПорядкиРасчета;
	
КонецФункции

// Функция создает таблицу значения, 
//  добавляет и заполняет в ней единственную строку по указанным параметрам.
//
Функция ТаблицаРасчетаСреднегоФСС(Сотрудник, НачалоПериода, ОкончаниеПериода, ПорядокРасчета)
	
	ИсходныеДанные = ПустаяТаблицаИсходныхДанныхРасчетаСреднегоЗаработкаФСС();
	
	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.НачалоПериода = НачалоПериода;
	НоваяСтрока.ОкончаниеПериода = ОкончаниеПериода;
	НоваяСтрока.ПорядокРасчета = ПорядокРасчета;
	
	Возврат ИсходныеДанные;
	
КонецФункции

// Формирует таблицу ВТИсходныеДанные
// в которых дополняет таблицу сотрудников (с полями Сотрудник, ДатаНачалаСобытия)
// колонками (и строками), достаточными для получения данных для расчета среднего заработка.
// Для каждого сотрудника создает отдельные строки для каждого месяца, входящего в период расчета среднего заработка.
//
Процедура СоздатьВТИсходныеДанные(МенеджерВременныхТаблиц, ИсходныеДанные, ОтборМесяцев = Неопределено)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудники.Сотрудник,
	|	ТаблицаСотрудники.НачалоПериода КАК Начало,
	|	ТаблицаСотрудники.ОкончаниеПериода КАК Окончание,
	|	ТаблицаСотрудники.ОкончаниеПериода КАК Период,
	|	ТаблицаСотрудники.ПорядокРасчета
	|ПОМЕСТИТЬ ВТТаблицаСотрудники
	|ИЗ
	|	&ТаблицаСотрудники КАК ТаблицаСотрудники";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСотрудники", ИсходныеДанные);
	Запрос.Выполнить();
	
	// Запрашиваем КадровыйУчет для получения кадровых данных сотрудников.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц,
		"ВТТаблицаСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Сотрудник, ГоловнаяОрганизация, ДатаПриема");
		
	// Находим граничные даты по всей таблице.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаСотрудники.Начало) КАК Начало,
	|	МАКСИМУМ(ТаблицаСотрудники.Окончание) КАК Окончание
	|ИЗ
	|	ВТТаблицаСотрудники КАК ТаблицаСотрудники";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	// Создаем таблицу ВТПериоды с месяцами.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, Выборка.Начало, Выборка.Окончание);
		
	// Формируем таблицу исходных данных.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.ГоловнаяОрганизация,
	|	Периоды.Период,
	|	ТаблицаСотрудники.ПорядокРасчета,
	|   Сотрудники.ДатаПриема КАК ДатаПриема
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	ВТТаблицаСотрудники КАК ТаблицаСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК Сотрудники
	|		ПО (Сотрудники.Сотрудник = ТаблицаСотрудники.Сотрудник)
	|			И (Сотрудники.Период = ТаблицаСотрудники.Период)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК Периоды
	|		ПО (Периоды.Период МЕЖДУ ТаблицаСотрудники.Начало И ТаблицаСотрудники.Окончание)
	|			И (Периоды.Период В (&ОтборМесяцев)
	|				ИЛИ &БезОтбораПоМесяцам)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудники.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	
	Запрос.УстановитьПараметр("ОтборМесяцев", ОтборМесяцев);
	Запрос.УстановитьПараметр("БезОтбораПоМесяцам", ОтборМесяцев = Неопределено);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Ожидает ВТИсходныеДанные с полями ФизическоеЛицо, ГоловнаяОрганизация, Период.
// Формирует таблицу ВТДанныеСтрахователей.
//            
Процедура СоздатьВТДанныеСтрахователей(МенеджерВременныхТаблиц, ДатаНачалаРасчетногоПериода, ДатаОкончанияРасчетногоПериода)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеДанные.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсходныеДанные.ГоловнаяОрганизация,
	|	ИсходныеДанные.Период КАК Месяц
	|ПОМЕСТИТЬ ВТИсходныеДанныеПоМесяцам
	|ИЗ
	|	ВТИсходныеДанные КАК ИсходныеДанные
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСтрахователейОбороты.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеСтрахователейОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеСтрахователейОбороты.Месяц КАК Месяц,
	|	ДанныеСтрахователейОбороты.Страхователь КАК Страхователь,
	|	ДанныеСтрахователейОбороты.СуммаОборот КАК Сумма,
	|	ДанныеСтрахователейОбороты.ДнейБолезниУходаЗаДетьмиОборот КАК ДнейБолезниУходаЗаДетьми
	|ПОМЕСТИТЬ ВТДанныеСтрахователей
	|ИЗ
	|	РегистрНакопления.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС.Обороты(
	|			,
	|			,
	|			,
	|			(ФизическоеЛицо, ГоловнаяОрганизация) В
	|				(ВЫБРАТЬ
	|					ВТИсходныеДанныеПоМесяцам.ФизическоеЛицо,
	|					ВТИсходныеДанныеПоМесяцам.ГоловнаяОрганизация
	|				ИЗ
	|					ВТИсходныеДанныеПоМесяцам) 
	|				И (Месяц МЕЖДУ &ДатаНачалаРасчетногоПериода И &ДатаОкончанияРасчетногоПериода)) КАК ДанныеСтрахователейОбороты";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНачалаРасчетногоПериода", ДатаНачалаРасчетногоПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияРасчетногоПериода", ДатаОкончанияРасчетногоПериода);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ДанныеСтрахователей = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура СоздатьВТДанныеУчтенныхНачислений(МенеджерВременныхТаблиц, ДатаНачалаРасчетногоПериода, ДатаОкончанияРасчетногоПериода, НомерЛисткаНетрудоспособности, Регистратор)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеУчтенныхНачисленийОбороты.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеУчтенныхНачисленийОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеУчтенныхНачисленийОбороты.Месяц КАК Месяц,
	|	СУММА(ДанныеУчтенныхНачисленийОбороты.УчтеннаяСуммаОборот) КАК УчтеннаяСумма
	|ПОМЕСТИТЬ ВТДанныеУчтенныхНачислений
	|ИЗ
	|	РегистрНакопления.ДанныеОбУчтенныхСуммахДляРасчетаСреднегоЗаработкаФСС.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			(ФизическоеЛицо, ГоловнаяОрганизация) В
	|					(ВЫБРАТЬ
	|						ВТИсходныеДанныеПоМесяцам.ФизическоеЛицо,
	|						ВТИсходныеДанныеПоМесяцам.ГоловнаяОрганизация
	|					ИЗ
	|						ВТИсходныеДанныеПоМесяцам)
	|				И (Месяц МЕЖДУ &ДатаНачалаРасчетногоПериода И &ДатаОкончанияРасчетногоПериода)
	|				И НомерЛисткаНетрудоспособности = &НомерЛисткаНетрудоспособности) КАК ДанныеУчтенныхНачисленийОбороты
	|ГДЕ
	|	ДанныеУчтенныхНачисленийОбороты.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеУчтенныхНачисленийОбороты.ГоловнаяОрганизация,
	|	ДанныеУчтенныхНачисленийОбороты.ФизическоеЛицо,
	|	ДанныеУчтенныхНачисленийОбороты.Месяц";

	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ПоляСуммирования = Новый Массив;
	
	ПоляСуммирования.Добавить("УчтеннаяСуммаОборот");
	
	Запрос.УстановитьПараметр("ДатаНачалаРасчетногоПериода", ДатаНачалаРасчетногоПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияРасчетногоПериода", ДатаОкончанияРасчетногоПериода);
	Запрос.УстановитьПараметр("НомерЛисткаНетрудоспособности", НомерЛисткаНетрудоспособности);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ДанныеУчтенныхНачислений = Запрос.Выполнить().Выгрузить();
	
	
КонецПроцедуры	

// Метод проверяет наличие зарегистрированных данных за указанные годы.
// При наличии данных выводится сообщение об ошибке.
//
// Параметры:
//	Отказ
//	Сотрудник
//	Страхователь
//	ФизическоеЛицо
//	ГоловнаяОрганизация
//	Месяцы - массив месяцев
//	Регистратор
//
Процедура ПроверитьНаличиеЗарегистрированныхДанныхСтрахователя(Отказ, Страхователь, ФизическоеЛицо, ГоловнаяОрганизация, Месяцы, Регистратор)	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуществующиеДанные.Месяц
	|ИЗ
	|	РегистрНакопления.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС КАК СуществующиеДанные
	|ГДЕ
	|	СуществующиеДанные.Страхователь = &Страхователь
	|	И СуществующиеДанные.ФизическоеЛицо = &ФизическоеЛицо
	|	И СуществующиеДанные.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|	И СуществующиеДанные.Месяц В(&Месяцы)
	|	И СуществующиеДанные.Регистратор <> &Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Страхователь", Страхователь);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Месяцы", Месяцы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	// Данные уже зарегистрированы.
	ПредставлениеМесяцев = "";
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставлениеМесяцев = ПредставлениеМесяцев + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1, ", Формат(Выборка.Месяц, "ЧГ="));
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПредставлениеМесяцев, 2);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='За %1 %2 данные о заработке уже зарегистрированы другим документом.';uk='За %1 %2 дані про заробіток вже зареєстровані іншим документом.'"), 
		ПредставлениеМесяцев, ?(Выборка.Количество() > 1, НСтр("ru='месяцы';uk='місяці'"), НСтр("ru='месяц';uk='місяць'")));
		
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Регистратор, , , Отказ);
	
КонецПроцедуры

Процедура ПереименоватьКолонкуПериодВМесяц(ТаблицаЗначений)
	
	КолонкаПериод = ТаблицаЗначений.Колонки.Найти("Период");
	
	Если КолонкаПериод <> Неопределено Тогда
		КолонкаПериод.Имя = "Месяц";
	КонецЕсли;
	
КонецПроцедуры

// Функция выполняет преобразование сведений об общем среднем заработке
//  в сведения по правилам ФСС.
//
Функция СведенияСреднегоЗаработкаФССПоКорректировкамОбщегоЗаработка(КорректировкиНачисленийОбщий, КорректировкиВремениОбщий)
	
	КорректировкиЗаработкаФСС = Новый Структура;
	
	Если КорректировкиНачисленийОбщий.Количество() > 0 Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// Перенос выполняем только тех сведений, 
		// для которых в учете среднего заработка ФСС нет «собственных» корректировок.
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	КорректировкиНачисленийОбщий.Сотрудник,
			|	КорректировкиНачисленийОбщий.Месяц КАК Период,
			|	КорректировкиНачисленийОбщий.Год КАК Год,
			|	КорректировкиНачисленийОбщий.ПорядокРасчета,
			|	КорректировкиНачисленийОбщий.СтатьяФинансирования,
			|	КорректировкиНачисленийОбщий.Сумма
			|ПОМЕСТИТЬ ВТКорректировкиНачисленийОбщий
			|ИЗ
			|	&КорректировкиНачисленийОбщий КАК КорректировкиНачисленийОбщий";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("КорректировкиНачисленийОбщий", КорректировкиНачисленийОбщий);
		Запрос.Выполнить();
		
		// Запрашиваем КадровыйУчет для получения кадровых данных сотрудников.
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц,
			"ВТКорректировкиНачисленийОбщий");
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФизическоеЛицо, ГоловнаяОрганизация");
			
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Корректировки.ФизическоеЛицо,
			|	Корректировки.ГоловнаяОрганизация,
			|	Корректировки.Сотрудник,
			|	Корректировки.Месяц,
			|	Корректировки.СтатьяФинансирования,
			|	Корректировки.ПорядокРасчета,
			|	СУММА(Корректировки.Сумма) КАК Сумма,
			|	Корректировки.ДанныеИзУчетаСреднегоОбщий
			|ПОМЕСТИТЬ ВТКорректировкиСреднегоФСС
			|ИЗ
			|	(ВЫБРАТЬ
			|		Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|		Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|		КорректировкиНачисленийОбщий.Сотрудник КАК Сотрудник,
			|		ВЫБОР
			|			КОГДА КорректировкиНачисленийОбщий.Период = ДАТАВРЕМЯ(1, 1, 1)
			|				ТОГДА ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 12, 1), ГОД, КорректировкиНачисленийОбщий.Год - 1)
			|			ИНАЧЕ КорректировкиНачисленийОбщий.Период
			|		КОНЕЦ КАК Месяц,
			|		КорректировкиНачисленийОбщий.СтатьяФинансирования КАК СтатьяФинансирования,
			|		ПорядокРасчетаСреднегоЗаработкаФСС.Ссылка КАК ПорядокРасчета,
			|		КорректировкиНачисленийОбщий.Сумма КАК Сумма,
			|		ИСТИНА КАК ДанныеИзУчетаСреднегоОбщий
			|	ИЗ
			|		ВТКорректировкиНачисленийОбщий КАК КорректировкиНачисленийОбщий
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК Сотрудники
			|			ПО (Сотрудники.Сотрудник = КорректировкиНачисленийОбщий.Сотрудник)
			|				И (Сотрудники.Период = КорректировкиНачисленийОбщий.Период)
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС КАК ПорядокРасчетаСреднегоЗаработкаФСС
			|			ПО (ИСТИНА)
			|	ГДЕ
			|		КорректировкиНачисленийОбщий.ПорядокРасчета = &ПорядокРасчетаОбщий) КАК Корректировки
			|
			|СГРУППИРОВАТЬ ПО
			|	Корректировки.ФизическоеЛицо,
			|	Корректировки.ГоловнаяОрганизация,
			|	Корректировки.Сотрудник,
			|	Корректировки.Месяц,
			|	Корректировки.СтатьяФинансирования,
			|	Корректировки.ПорядокРасчета,
			|	Корректировки.ДанныеИзУчетаСреднегоОбщий
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КорректировкиФСС.ФизическоеЛицо,
			|	КорректировкиФСС.ГоловнаяОрганизация,
			|	КорректировкиФСС.Месяц
			|ПОМЕСТИТЬ ВТСуществующиеЗаписи
			|ИЗ
			|	ВТКорректировкиСреднегоФСС КАК КорректировкиФСС
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК СведенияОНачислениях
			|		ПО (СведенияОНачислениях.ФизическоеЛицо = КорректировкиФСС.ФизическоеЛицо)
			|			И (СведенияОНачислениях.ГоловнаяОрганизация = КорректировкиФСС.ГоловнаяОрганизация)
			|			И (СведенияОНачислениях.Месяц = КорректировкиФСС.Месяц)
			|			И (СведенияОНачислениях.ДанныеИзУчетаСреднегоОбщий = ЛОЖЬ)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КорректировкиФСС.ФизическоеЛицо,
			|	КорректировкиФСС.ГоловнаяОрганизация,
			|	КорректировкиФСС.Месяц
			|ИЗ
			|	ВТКорректировкиСреднегоФСС КАК КорректировкиФСС
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК ДанныеНачислений
			|		ПО (ДанныеНачислений.ФизическоеЛицо = КорректировкиФСС.ФизическоеЛицо)
			|			И (ДанныеНачислений.ГоловнаяОрганизация = КорректировкиФСС.ГоловнаяОрганизация)
			|			И (ДанныеНачислений.Период = КорректировкиФСС.Месяц)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкиФСС.ФизическоеЛицо,
			|	КорректировкиФСС.ГоловнаяОрганизация,
			|	КорректировкиФСС.Сотрудник,
			|	КорректировкиФСС.Месяц,
			|	КорректировкиФСС.СтатьяФинансирования КАК СтатьяФинансирования,
			|	КорректировкиФСС.ПорядокРасчета,
			|	КорректировкиФСС.Сумма,
			|	ИСТИНА КАК ДанныеИзУчетаСреднегоОбщий
			|ИЗ
			|	ВТКорректировкиСреднегоФСС КАК КорректировкиФСС
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуществующиеЗаписи КАК СуществующиеЗаписи
			|		ПО (СуществующиеЗаписи.ФизическоеЛицо = КорректировкиФСС.ФизическоеЛицо)
			|			И (СуществующиеЗаписи.ГоловнаяОрганизация = КорректировкиФСС.ГоловнаяОрганизация)
			|			И (СуществующиеЗаписи.Месяц = КорректировкиФСС.Месяц)
			|ГДЕ
			|	СуществующиеЗаписи.Месяц ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("ПорядокРасчетаОбщий", КорректировкиНачисленийОбщий[0]["ПорядокРасчета"]);
		
		КорректировкиЗаработкаФСС.Вставить("КорректировкиНачислений", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	Если КорректировкиВремениОбщий.Количество() > 0 Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	КорректировкиВремениОбщий.Сотрудник,
			|	КорректировкиВремениОбщий.Месяц КАК Период,
			|	КорректировкиВремениОбщий.ПорядокРасчета,
			|	КорректировкиВремениОбщий.ОтработаноДнейКалендарных
			|ПОМЕСТИТЬ ВТКорректировкиВремениОбщий
			|ИЗ
			|	&КорректировкиВремениОбщий КАК КорректировкиВремениОбщий";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("КорректировкиВремениОбщий", КорректировкиВремениОбщий);
		Запрос.Выполнить();
		
		// Запрашиваем КадровыйУчет для получения кадровых данных сотрудников.
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц,
			"ВТКорректировкиВремениОбщий");
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФизическоеЛицо, ГоловнаяОрганизация");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.ФизическоеЛицо,
			|	Сотрудники.ГоловнаяОрганизация,
			|	КорректировкиВремениОбщий.Сотрудник,
			|	КорректировкиВремениОбщий.Период КАК Месяц,
			|	КорректировкиВремениОбщий.ОтработаноДнейКалендарных
			|ПОМЕСТИТЬ ВТКорректировкиВремениФСС
			|ИЗ
			|	ВТКорректировкиВремениОбщий КАК КорректировкиВремениОбщий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК Сотрудники
			|		ПО (Сотрудники.Сотрудник = КорректировкиВремениОбщий.Сотрудник)
			|			И (Сотрудники.Период = КорректировкиВремениОбщий.Период)
			|ГДЕ
			|	КорректировкиВремениОбщий.ПорядокРасчета = &ПорядокРасчетаОбщий
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КорректировкиВремениФСС.Сотрудник,
			|	КорректировкиВремениФСС.Месяц
			|ПОМЕСТИТЬ ВТСуществующиеЗаписи
			|ИЗ
			|	ВТКорректировкиВремениФСС КАК КорректировкиВремениФСС
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаФСС КАК СведенияОВремени
			|		ПО (СведенияОВремени.Сотрудник = КорректировкиВремениФСС.Сотрудник)
			|			И (СведенияОВремени.Месяц = КорректировкиВремениФСС.Месяц)
			|			И (СведенияОВремени.ДанныеИзУчетаСреднегоОбщий = ЛОЖЬ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкиВремениФСС.ФизическоеЛицо,
			|	КорректировкиВремениФСС.ГоловнаяОрганизация,
			|	КорректировкиВремениФСС.Сотрудник,
			|	КорректировкиВремениФСС.Месяц,
			|	КорректировкиВремениФСС.ОтработаноДнейКалендарных,
			|	ИСТИНА КАК ДанныеИзУчетаСреднегоОбщий
			|ИЗ
			|	ВТКорректировкиВремениФСС КАК КорректировкиВремениФСС
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуществующиеЗаписи КАК СуществующиеЗаписи
			|		ПО (СуществующиеЗаписи.Сотрудник = КорректировкиВремениФСС.Сотрудник)
			|			И (СуществующиеЗаписи.Месяц = КорректировкиВремениФСС.Месяц)
			|ГДЕ
			|	СуществующиеЗаписи.Месяц ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("ПорядокРасчетаОбщий", КорректировкиВремениОбщий[0]["ПорядокРасчета"]);
		
		КорректировкиЗаработкаФСС.Вставить("КорректировкиВремени", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	Возврат КорректировкиЗаработкаФСС;
	
КонецФункции

#КонецОбласти

#Область БлокФункцийПервоначальногоЗаполненияИОбновленияИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти