
#Область ПрограммныйИнтерфейс

#Область ГрафическоеПредставлениеПроцесса

Функция СформироватьГрафическоеПредставлениеПроцесса(ЭтапыПроцесса, ПараметрыВывода = Неопределено) Экспорт
	
	Перем Уровни;

	Если ПараметрыВывода = Неопределено Тогда
		ПараметрыВывода = НовыеПараметрыВывода();
	КонецЕсли;
	
	ДобавитьОбязательныеКолонкиВЭтапыПроцесса(ЭтапыПроцесса);
	
	ОбработатьЭтапыПроцесса(ЭтапыПроцесса, Уровни);
	
	Результат = ВывестиДиаграммуЭтапов(ЭтапыПроцесса, Уровни, ПараметрыВывода);
	
	Этапы  = Неопределено;
	Уровни = Неопределено;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьОбязательныеКолонкиВЭтапыПроцесса(ЭтапыПроцесса) Экспорт

	Если ЭтапыПроцесса.Колонки.Найти("ПараметрыВывода") = Неопределено Тогда
		ЭтапыПроцесса.Колонки.Добавить("ПараметрыВывода", Новый ОписаниеТипов("Структура"));
	КонецЕсли; 
	
	Если ЭтапыПроцесса.Колонки.Найти("ДлительностьДней") = Неопределено Тогда
		ЭтапыПроцесса.Колонки.Добавить("ДлительностьДней", Новый ОписаниеТипов("Число"));
	КонецЕсли; 
	
	Если ЭтапыПроцесса.Колонки.Найти("Родитель") = Неопределено Тогда
		ЭтапыПроцесса.Колонки.Добавить("Родитель");
	КонецЕсли; 
	
	Если ЭтапыПроцесса.Колонки.Найти("ПорядковыйНомер") = Неопределено Тогда
		ЭтапыПроцесса.Колонки.Добавить("ПорядковыйНомер", Новый ОписаниеТипов("Число"));
	КонецЕсли; 
	
	Если ЭтапыПроцесса.Колонки.Найти("ЭтапыПредшественники") = Неопределено Тогда
		ЭтапыПроцесса.Колонки.Добавить("ЭтапыПредшественники", Новый ОписаниеТипов("ТаблицаЗначений"));
	КонецЕсли; 
	
КонецПроцедуры

Функция НовыеПараметрыВывода() Экспорт

	ПараметрыВывода = Новый Структура; 
	ПараметрыВывода.Вставить("ВысотаОтступа", 4);
	ПараметрыВывода.Вставить("ШиринаОтступа", 4);
	ПараметрыВывода.Вставить("ШиринаИзгиба",  1.2);
	ПараметрыВывода.Вставить("ШиринаЭтапа",   40);
	ПараметрыВывода.Вставить("ВысотаЭтапа",   28);
	ПараметрыВывода.Вставить("ТекущийЭтап",   Неопределено);

	Возврат ПараметрыВывода;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

// Функция определяет положение этапа на графике по оси Y
// 
Функция ОпределитьНовуюПозициюВУровнеY(СтрокаЭтапа, ЗанятыеУровниПоУ, Предпочтение = Неопределено)
	
	Если Не Предпочтение = Неопределено и ЗанятыеУровниПоУ[Предпочтение] = Неопределено Тогда
		Результат = Предпочтение;
	Иначе
		Результат = 0;
		
		Пока Не ЗанятыеУровниПоУ[Результат] = Неопределено Цикл
			Результат = Результат + 1;
		КонецЦикла;
		
	КонецЕсли;
	ЗанятыеУровниПоУ.Вставить(Результат, Истина);
	Возврат Результат;
	
КонецФункции

// Процедура расчитывает положение этапа на графике по оси Х
// 
Процедура РассчитатьУровеньX(СтрокаЭтапа, Этапы)
	
	Если Не СтрокаЭтапа.УровеньХ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЭтапа.ЭтапыПредшественники.Колонки.Добавить("СтрокаЭтапаПредшественника");
	Если СтрокаЭтапа.ЭтапыПредшественники.Количество() Тогда
		МаксУровень = 0;
		Для каждого СтрокаПредшественника Из СтрокаЭтапа.ЭтапыПредшественники Цикл
			
			СтрокаПредшественника.СтрокаЭтапаПредшественника = Этапы.Найти(СтрокаПредшественника.ЭтапПроцесса, "Этап");
			РассчитатьУровеньX(СтрокаПредшественника.СтрокаЭтапаПредшественника, Этапы);
			МаксУровень = Макс(МаксУровень, СтрокаПредшественника.СтрокаЭтапаПредшественника.УровеньХ);
			
		КонецЦикла;
		СтрокаЭтапа.УровеньХ = МаксУровень + 1;
	Иначе
		СтрокаЭтапа.УровеньХ = 0;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает таблицу этапов по шаблону процесса, 
// с дополнительными промежуточными данными
//
Процедура ОбработатьЭтапыПроцесса(ЭтапыПроцесса, Уровни)
	
	ЭтапыПроцесса.Колонки.Добавить("УровеньХ");
	ЭтапыПроцесса.Колонки.Добавить("КоличествоПредшественников");
	ЭтапыПроцесса.Колонки.Добавить("ДлительностьНарастающая", Новый ОписаниеТипов("Число"));
	
	Для каждого СтрокаЭтапа Из ЭтапыПроцесса Цикл
		РассчитатьУровеньX(СтрокаЭтапа, ЭтапыПроцесса);
		СтрокаЭтапа.КоличествоПредшественников = СтрокаЭтапа.ЭтапыПредшественники.Количество();
	КонецЦикла;
	
	ЭтапыПроцесса.Сортировать("УровеньХ, КоличествоПредшественников, Родитель, ПорядковыйНомер");
	
	ЭтапыПроцесса.Колонки.Добавить("УровеньУ");
	
	Уровни = Новый Структура("Х, У", Новый Соответствие, Новый Соответствие);
	УровеньХ = 0;
	СтрокиУровня = ЭтапыПроцесса.НайтиСтроки(Новый Структура("УровеньХ", УровеньХ));
	Пока СтрокиУровня.Количество() Цикл
		СтруктураХ = Новый Структура("ОтступХ, ЗанятыеУровниПоУ", 0, Новый Соответствие);
		Уровни.Х.Вставить(УровеньХ, СтруктураХ);
		УровеньУ = -1;
		Для каждого СтрокаЭтапа Из СтрокиУровня Цикл
			
			СтрокаЭтапа.ЭтапыПредшественники.Колонки.Добавить("ОтступХ", Новый ОписаниеТипов("Число"));
			СтрокаЭтапа.ЭтапыПредшественники.Колонки.Добавить("ОтступУ", Новый ОписаниеТипов("Число"));
			Если СтрокаЭтапа.ЭтапыПредшественники.Количество() = 0 Тогда
				СтрокаЭтапа.ДлительностьНарастающая = СтрокаЭтапа.ДлительностьДней;
				УровеньУ = УровеньУ + 1;
			Иначе
				
				Если СтрокаЭтапа.ЭтапыПредшественники.Количество() = 1 Тогда
					Предпочтение =СтрокаЭтапа.ЭтапыПредшественники[0].СтрокаЭтапаПредшественника.УровеньУ;
				Иначе
					Предпочтение = Неопределено;
				КонецЕсли;
				
				УровеньУ = ОпределитьНовуюПозициюВУровнеY(СтрокаЭтапа, СтруктураХ.ЗанятыеУровниПоУ, Предпочтение);
				
				Для каждого СтрокаПредшественника Из СтрокаЭтапа.ЭтапыПредшественники Цикл
					
					СтрокаЭтапа.ДлительностьНарастающая = Макс(СтрокаЭтапа.ДлительностьНарастающая, СтрокаПредшественника.СтрокаЭтапаПредшественника.ДлительностьНарастающая + СтрокаЭтапа.ДлительностьДней);
					
					СтруктураХ.ОтступХ = СтруктураХ.ОтступХ + 1;
					
					Если Не СтрокаЭтапа.УровеньХ = СтрокаПредшественника.СтрокаЭтапаПредшественника.УровеньХ + 1 Тогда
						СтруктураУ = Уровни.У[СтрокаПредшественника.СтрокаЭтапаПредшественника.УровеньУ];
						СтруктураУ.ОтступУ = СтруктураУ.ОтступУ + 1;
						СтрокаПредшественника.ОтступУ = СтруктураУ.ОтступУ;
					КонецЕсли;
					
					СтрокаПредшественника.ОтступХ = СтруктураХ.ОтступХ;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СтруктураУ = Уровни.У[УровеньУ];
			Если СтруктураУ = Неопределено Тогда
				СтруктураУ = Новый Структура("ОтступУ", 0);
				Уровни.У.Вставить(УровеньУ, СтруктураУ);
			КонецЕсли;
			
			СтрокаЭтапа.УровеньУ = УровеньУ;
			
		КонецЦикла;
		
		УровеньХ = УровеньХ + 1;
		СтрокиУровня = ЭтапыПроцесса.НайтиСтроки(Новый Структура("УровеньХ", УровеньХ));
	КонецЦикла;
	
КонецПроцедуры

// Процедура выводит диаграмму этапов в поле табличного документа
//
Функция ВывестиДиаграммуЭтапов(ЭтапыПроцесса, Уровни, ПараметрыВывода)
	
	ШиринаОтступа = ПараметрыВывода.ШиринаОтступа;
	ШиринаЭтапа   = ПараметрыВывода.ШиринаЭтапа;
	ВысотаОтступа = ПараметрыВывода.ВысотаОтступа;
	ВысотаЭтапа   = ПараметрыВывода.ВысотаЭтапа;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ЛевоЭтапа = ШиринаОтступа;
	Для каждого СтруктураХ Из Уровни.Х Цикл
		
		Если СтруктураХ.Ключ Тогда
			ЛевоЭтапа = ЛевоЭтапа + Макс(СтруктураХ.Значение.ОтступХ + 1, 2) * ШиринаОтступа + ШиринаЭтапа;
		КонецЕсли;
		
		СтруктураХ.Значение.Вставить("ЛевоЭтапа", ЛевоЭтапа);
		
	КонецЦикла;
	
	ВерхЭтапа = ВысотаОтступа;
	Для каждого СтруктураУ Из Уровни.У Цикл
		
		Если СтруктураУ.Ключ Тогда
			ВерхЭтапа = ВерхЭтапа + Макс(Уровни.У[СтруктураУ.Ключ - 1].ОтступУ + 1, 1) * ВысотаОтступа + ВысотаЭтапа;
		КонецЕсли;
		
		СтруктураУ.Значение.Вставить("ВерхЭтапа", ВерхЭтапа);
		
	КонецЦикла;
	
	Для каждого СтруктураХ Из Уровни.Х Цикл
		
		СтрокиУровня = ЭтапыПроцесса.НайтиСтроки(Новый Структура("УровеньХ", СтруктураХ.Ключ));
		
		Для каждого СтрокаЭтапа Из СтрокиУровня Цикл
			
			НарисоватьСвязи(ТабличныйДокумент, СтрокаЭтапа, Уровни, ПараметрыВывода);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДлительностьНарастающая = 0;
	Для каждого СтруктураХ Из Уровни.Х Цикл
		
		СтрокиУровня = ЭтапыПроцесса.НайтиСтроки(Новый Структура("УровеньХ", СтруктураХ.Ключ));
		
		Для каждого СтрокаЭтапа Из СтрокиУровня Цикл
			НарисоватьЭтап(ТабличныйДокумент, СтрокаЭтапа, Уровни, ПараметрыВывода);
			ДлительностьНарастающая = Макс(ДлительностьНарастающая, СтрокаЭтапа.ДлительностьНарастающая)
		КонецЦикла;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ДлительностьНарастающая", ДлительностьНарастающая);
	Результат.Вставить("ТабличныйДокумент",       ТабличныйДокумент);
	
	Возврат Результат;
	
КонецФункции

// Процедура рисует этап на поле табличного документа
//
Процедура НарисоватьЭтап(ТабличныйДокумент, СтрокаЭтапа, Уровни, ПараметрыВывода)
	
	ЦветФонаЭтапа = Неопределено;
	Если СтрокаЭтапа.ПараметрыВывода.Свойство("ЦветФонаЭтапа") Тогда
		ЦветФонаЭтапа = СтрокаЭтапа.ПараметрыВывода.ЦветФонаЭтапа;
	КонецЕсли; 
	
	ЦветЛинииЭтапа = Неопределено;
	Если СтрокаЭтапа.НомерОперации = ПараметрыВывода.ТекущийЭтап Тогда
		ЦветЛинииЭтапа = WebЦвета.Синий;
	КонецЕсли; 
	
	ШиринаЭтапа = ПараметрыВывода.ШиринаЭтапа;	
	ВысотаЭтапа = ПараметрыВывода.ВысотаЭтапа;	
	
	ВерхЭтапа = Уровни.У[СтрокаЭтапа.УровеньУ].ВерхЭтапа;
	ЛевоЭтапа = Уровни.Х[СтрокаЭтапа.УровеньХ].ЛевоЭтапа;
	
	Рисунок = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямоугольник);
	Рисунок.Лево = ЛевоЭтапа;
	Рисунок.Верх = ВерхЭтапа;
	Рисунок.Ширина = ШиринаЭтапа;
	Рисунок.Высота = ВысотаЭтапа;
	
	Если ЦветФонаЭтапа <> Неопределено Тогда
		Рисунок.ЦветФона = ЦветФонаЭтапа;
	КонецЕсли; 
	Если ЦветЛинииЭтапа <> Неопределено Тогда
		Рисунок.ЦветЛинии = ЦветЛинииЭтапа;
	КонецЕсли; 
	
	Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
	
	ВысотаСтрокиТекста = 4;
	
	Расшифровка = СтрокаЭтапа.Расшифровка;
	
	Текст = ""  + СтрокаЭтапа.ПредставлениеЭтапа;
	Рисунок = НарисоватьТекст(ТабличныйДокумент, 
									Текст, 
									Расшифровка, 
									ЛевоЭтапа, 
									ВерхЭтапа, 
									ШиринаЭтапа, 
									ВысотаСтрокиТекста * 3, 
									ЦветФонаЭтапа, 
									ЦветЛинииЭтапа);
									
	Рисунок.Шрифт = Новый Шрифт(Рисунок.Шрифт,,,Истина);
	Рисунок.Имя = СтрокаЭтапа.НомерОперации;
	
	Если СтрокаЭтапа.Текст1 <> "" Тогда
		Рисунок = НарисоватьТекст(ТабличныйДокумент, 
									СтрокаЭтапа.Текст1, 
									Расшифровка, 
									ЛевоЭтапа, 
									ВерхЭтапа + ВысотаСтрокиТекста * 3,
									ШиринаЭтапа, 
									ВысотаСтрокиТекста * 2, 
									ЦветФонаЭтапа, 
									ЦветЛинииЭтапа);
		
		Если СтрокаЭтапа.ПараметрыВывода.Свойство("РазмещениеТекста1") Тогда
			Рисунок.РазмещениеТекста = СтрокаЭтапа.ПараметрыВывода.РазмещениеТекста1;
		КонецЕсли; 
	КонецЕсли;
	
	Если СтрокаЭтапа.Текст2 <> "" Тогда
		Рисунок = НарисоватьТекст(ТабличныйДокумент,
									СтрокаЭтапа.Текст2, 
									Расшифровка, 
									ЛевоЭтапа, 
									ВерхЭтапа + ВысотаСтрокиТекста * 5, 
									ШиринаЭтапа, 
									ВысотаЭтапа - ВысотаСтрокиТекста * 5, 
									ЦветФонаЭтапа, 
									ЦветЛинииЭтапа);
									
		Если СтрокаЭтапа.ПараметрыВывода.Свойство("РазмещениеТекста2") Тогда
			Рисунок.РазмещениеТекста = СтрокаЭтапа.ПараметрыВывода.РазмещениеТекста2;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура рисует связи этапа на поле табличного документа
//
Процедура НарисоватьСвязи(ТабличныйДокумент, СтрокаЭтапа, Уровни, ПараметрыВывода)
	
	ШиринаИзгиба   = ПараметрыВывода.ШиринаИзгиба;	
	ВысотаЭтапа    = ПараметрыВывода.ВысотаЭтапа;	
	ШиринаЭтапа    = ПараметрыВывода.ШиринаЭтапа;	
	ВысотаОтступа  = ПараметрыВывода.ВысотаОтступа;	
	ШиринаОтступа  = ПараметрыВывода.ШиринаОтступа;	
	
	ВерхЭтапа = Уровни.У[СтрокаЭтапа.УровеньУ].ВерхЭтапа;
	
	ЛевоЭтапа = Уровни.Х[СтрокаЭтапа.УровеньХ].ЛевоЭтапа;
	
	Для каждого СтрокаПредшественника Из СтрокаЭтапа.ЭтапыПредшественники Цикл
		
		СтрокаЭтапаПредшественника = СтрокаПредшественника.СтрокаЭтапаПредшественника;
		
		ВерхПредшественника = Уровни.У[СтрокаЭтапаПредшественника.УровеньУ].ВерхЭтапа;
		ЛевоПредшественника = Уровни.Х[СтрокаЭтапаПредшественника.УровеньХ].ЛевоЭтапа;
		
		Расшифровка = Новый Структура("Этап, ЭтапПредшественник", СтрокаЭтапа.Этап, СтрокаПредшественника.ЭтапПроцесса);
		Флаг = ?(СтрокаЭтапаПредшественника.УровеньУ > СтрокаЭтапа.УровеньУ, -1, 1);
		Если СтрокаЭтапаПредшественника.УровеньХ + 1 = СтрокаЭтапа.УровеньХ Тогда
			ЛевоЛинии   = ЛевоПредшественника + ШиринаЭтапа;
			ВерхЛинии   = ВерхПредшественника + ВысотаЭтапа / 4;
			
			НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ЛевоЭтапа - ЛевоЛинии - СтрокаПредшественника.ОтступХ*ШиринаОтступа - ШиринаИзгиба, 0);
			Если СтрокаЭтапаПредшественника.УровеньУ = СтрокаЭтапа.УровеньУ Тогда
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, ШиринаИзгиба);
				НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, 0, ВысотаЭтапа / 2 - ШиринаИзгиба * 2);
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, ШиринаИзгиба);
			Иначе
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, Флаг * ШиринаИзгиба);
				НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, 0, ВерхЭтапа + ВысотаЭтапа / 4 * 3 - ВерхЛинии - Флаг * ШиринаИзгиба);
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, Флаг * ШиринаИзгиба);
			КонецЕсли;
			
			НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ЛевоЭтапа - ЛевоЛинии, 0);
			НарисоватьСтрелку(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии);
			
		Иначе
			
			ЛевоЛинии   = ЛевоПредшественника + ШиринаЭтапа / 4 * 3;
			ВерхЛинии   = ВерхПредшественника + ВысотаЭтапа;
			
			НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, 0, ВысотаОтступа* СтрокаПредшественника.ОтступУ - ШиринаИзгиба);
			НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, ШиринаИзгиба);
			
			НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ЛевоЭтапа - ЛевоЛинии - СтрокаПредшественника.ОтступХ*ШиринаОтступа - ШиринаИзгиба, 0);
			
			Если СтрокаЭтапаПредшественника.УровеньУ = СтрокаЭтапа.УровеньУ Тогда
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, - ШиринаИзгиба);
				НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, 0, ВерхЭтапа + ВысотаЭтапа / 4 * 3 - ВерхЛинии + ШиринаИзгиба);
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, - ШиринаИзгиба);
			Иначе
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, Флаг * ШиринаИзгиба);
				НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, 0, ВерхЭтапа + ВысотаЭтапа / 4 * 3 - ВерхЛинии - Флаг * ШиринаИзгиба);
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, Флаг * ШиринаИзгиба);
			КонецЕсли;
			
			НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ЛевоЭтапа - ЛевоЛинии, 0);
			НарисоватьСтрелку(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция выводит рисунок типа "текст" в табличный документ 
//
Функция НарисоватьТекст(ТабличныйДокумент, Текст, Расшифровка, Лево, Верх, Ширина, Высота, ЦветФона = Неопределено, ЦветЛинии = Неопределено)

	Рисунок = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
	Рисунок.Лево   = Лево;
	Рисунок.Верх   = Верх;
	Рисунок.Ширина = Ширина;
	Рисунок.Высота = Высота;
	
	Рисунок.Расшифровка = Расшифровка;
	Рисунок.Текст = Текст;
	
	Если ЦветФона <> Неопределено Тогда
		Рисунок.ЦветФона = ЦветФона;
	КонецЕсли; 
	
	Если ЦветЛинии <> Неопределено Тогда
		Рисунок.ЦветЛинии = ЦветЛинии;
	КонецЕсли; 
	
	Возврат Рисунок;
	
КонецФункции

// Функция выводит рисунок типа "линия" в табличный документ
//
Процедура НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаЛинии, ВысотаЛинии);
	
	Линия = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.Лево   = ЛевоЛинии;
	Линия.Верх   = ВерхЛинии;
	Линия.Ширина = ШиринаЛинии;
	Линия.Высота = ВысотаЛинии;
	
	Линия.Расшифровка = Расшифровка;
	Линия.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
	
	ЛевоЛинии = ЛевоЛинии + ШиринаЛинии;
	ВерхЛинии = ВерхЛинии + ВысотаЛинии;
	
КонецПроцедуры

// Функция выводит рисунок из линий, в виде изгиба, в табличный документ
//
Процедура НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаЛинии, ВысотаЛинии);
	
	Отступ = 0.1;
	СдвигЛево = ?(ШиринаЛинии > 0, Отступ, -Отступ);
	СдвигВерх = ?(ВысотаЛинии > 0, Отступ, -Отступ);
	
	Линия = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.Лево   = ЛевоЛинии + СдвигЛево;
	Линия.Верх   = ВерхЛинии + СдвигВерх;
	Линия.Ширина = ШиринаЛинии - СдвигЛево * 2;
	Линия.Высота = ВысотаЛинии - СдвигВерх * 2;
	
	Линия.Расшифровка = Расшифровка;
	Линия.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
	
	ЛевоЛинии = ЛевоЛинии + ШиринаЛинии;
	ВерхЛинии = ВерхЛинии + ВысотаЛинии;
	
КонецПроцедуры

// Функция выводит рисунок из линий, в виде стрелки, в табличный документ
//
Процедура НарисоватьСтрелку(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии)
	
	Линия = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.Лево   = ЛевоЛинии - 2;
	Линия.Верх   = ВерхЛинии - 1.5;
	Линия.Ширина = 1.5;
	Линия.Высота = 1.5;
	
	Линия.Расшифровка = Расшифровка;
	Линия.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
	
	Линия = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.Лево   = ЛевоЛинии - 2;
	Линия.Верх   = ВерхЛинии + 1.5;
	Линия.Ширина = 1.5;
	Линия.Высота = -1.5;
	
	Линия.Расшифровка = Расшифровка;
	Линия.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
