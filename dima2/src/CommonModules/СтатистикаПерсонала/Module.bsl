////////////////////////////////////////////////////////////////////////////////
// Подсистема "Статистика персонала".
// Процедуры и функции, предназначенные для обслуживания форм статистической отчетности.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область СправочникДолжности

Процедура ДополнитьФормуЭлементаСправочникаДолжности(Форма, ИмяГруппыДляВставки = "ГруппаКатегории") Экспорт
	
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Функции для регламентированной отчетности.

// Возвращает среднесписочную численность, в т.ч. женщин и инвалидов
// 
// Параметры:
//		Организация
//		НачалоПериода
//		КонецПериода
//		ДанныеЧисленности - Структура - с полями ЧисленностьРаботников, ЧисленностьЖенщин, ЧисленностьИнвалидов.
//
Процедура СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода, ДанныеЧисленности) Экспорт

	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация", Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", НачалоПериода);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета", КонецПериода);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаВыборки", НачалоПериода);
	
	// Получение данных отчета
	ДанныеОтчета = Новый ДеревоЗначений;
	ДанныеДляЗаполненияРегламентированнойОтчетностиКадры("СреднесписочнаяЧисленность",
		ПараметрыОтчета, ДанныеОтчета);
	
	СтрокаОрганизации = ДанныеОтчета.Строки.Найти(Организация, "Организация");
	
	Если СтрокаОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоМесяцев = 12*(Год(НачалоПериода) - Год(КонецПериода)) + Месяц(КонецПериода) - Месяц(НачалоПериода) + 1;
	
	Если ЧислоМесяцев = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеЧисленности.ЧисленностьЖенщин = ?(Не ЗначениеЗаполнено(СтрокаОрганизации.СреднесписочнаяЧисленностьЖенщин), 0, Окр(Окр(СтрокаОрганизации.СреднесписочнаяЧисленностьЖенщин/ЧислоМесяцев, 5)));
	ДанныеЧисленности.ЧисленностьИнвалидов = ?(Не ЗначениеЗаполнено(СтрокаОрганизации.СреднесписочнаяЧисленностьИнвалидов), 0,Окр(Окр(СтрокаОрганизации.СреднесписочнаяЧисленностьИнвалидов/ЧислоМесяцев, 5)));
	ДанныеЧисленности.ЧисленностьРаботников = ?(Не ЗначениеЗаполнено(СтрокаОрганизации.СреднесписочнаяЧисленность), 0, Окр(Окр(СтрокаОрганизации.СреднесписочнаяЧисленность/ЧислоМесяцев, 5)));	
	ДанныеЧисленности.ЧисленностьВнешнихСовместителей = ?(Не ЗначениеЗаполнено(СтрокаОрганизации.СреднесписочнаяЧисленностьВнешнихСовместителей), 0, Окр(Окр(СтрокаОрганизации.СреднесписочнаяЧисленностьВнешнихСовместителей/ЧислоМесяцев, 5)));	
	ДанныеЧисленности.ЧисленностьЧисленностьРаботниковГПХ = ?(Не ЗначениеЗаполнено(СтрокаОрганизации.СреднесписочнаяЧисленностьРаботниковГПХ), 0, Окр(Окр(СтрокаОрганизации.СреднесписочнаяЧисленностьРаботниковГПХ/ЧислоМесяцев, 5)));
	ДанныеЧисленности.ЧисленностьЛицСГарантиями = ?(Не ЗначениеЗаполнено(СтрокаОрганизации.СреднесписочнаяЧисленностьЛицСГарантиями), 0, Окр(Окр(СтрокаОрганизации.СреднесписочнаяЧисленностьЛицСГарантиями/ЧислоМесяцев, 5)));	
	ДанныеЧисленности.ЧисленностьЛицСГарантиямиМеньше10ЛетДоПенсии = ?(Не ЗначениеЗаполнено(СтрокаОрганизации.СреднесписочнаяЧисленностьЛицСГарантиямиМеньше10ЛетДоПенсии), 0, Окр(Окр(СтрокаОрганизации.СреднесписочнаяЧисленностьЛицСГарантиямиМеньше10ЛетДоПенсии/ЧислоМесяцев, 5)));	
	ДанныеЧисленности.ЧисленностьЛицСГарантиямиНеИнвалиды = ?(Не ЗначениеЗаполнено(СтрокаОрганизации.СреднесписочнаяЧисленностьЛицСГарантиямиНеИнвалиды), 0, Окр(Окр(СтрокаОрганизации.СреднесписочнаяЧисленностьЛицСГарантиямиНеИнвалиды/ЧислоМесяцев, 5)));	
	
КонецПроцедуры

Процедура СписочнаяЧисленностьРаботающих(Организация, ДатаАктуальности, ДанныеЧисленности) Экспорт

	
КонецПроцедуры

Процедура ДанныеДляЗаполненияРегламентированнойОтчетностиКадры(Вариант, ПараметрыОтчета, ДанныеОтчета)
	
	СхемаКомпоновки = Отчеты.СтатистикаПерсонала.ПолучитьМакет("СхемаКомпоновкиДанныхКадры");
	
	ПараметрыОтчета.Вставить("Вариант", Вариант);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(Новый Структура("СхемаКомпоновкиДанных", СхемаКомпоновки));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НастройкиОтчета = ЗаполнитьКомпоновщикНастроек(Вариант, ПараметрыОтчета, СхемаКомпоновки.ВариантыНастроек[Вариант].Настройки);
	
	// Запрос данных
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки,
		НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

Функция ЗаполнитьКомпоновщикНастроек(Вариант, ПараметрыОтчета, НастройкиВарианта)
	
	Организация = ПараметрыОтчета.Организация;
	ДатаНачалаПериодаОтчета = ПараметрыОтчета.ДатаНачалаПериодаВыборки;
	ДатаКонцаПериодаОтчета = ПараметрыОтчета.ДатаКонцаПериодаОтчета;
	
	// Настройка отборов
	ИсключитьДанныеОбособленныхПодразделений = Ложь;
	Если Не ПараметрыОтчета.Свойство("ИсключитьДанныеОбособленныхПодразделений", ИсключитьДанныеОбособленныхПодразделений) Тогда
		ИсключитьДанныеОбособленныхПодразделений = Ложь
	КонецЕсли;
	
	Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Если Не ПараметрыОтчета.Свойство("ОбособленноеПодразделение", Подразделение) Тогда
		Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка()
	КонецЕсли;
	
	МассивПодразделений = ПодразделенияИсключения(Организация, Подразделение, ИсключитьДанныеОбособленныхПодразделений);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных; 
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиВарианта);
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КлючВарианта", Вариант);
	
	ПараметрПериод = ОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
	Если ПараметрПериод = Неопределено Тогда
		ПараметрПериод = ОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодОтчета");
	КонецЕсли;
	ПараметрПериод.Значение.ДатаНачала = ДатаНачалаПериодаОтчета;
	ПараметрПериод.Значение.ДатаОкончания = ДатаКонцаПериодаОтчета;
	
	Если ПараметрыОтчета.Свойство("СНачалаГода") Тогда
		ПараметрСНачалаГода = ОтчетыКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "СНачалаГода");
		Если ПараметрСНачалаГода <> Неопределено Тогда
			ПараметрСНачалаГода.Значение = ПараметрыОтчета.СНачалаГода;
		КонецЕсли;
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	Отбор = Настройки.Отбор;
	Отбор.Элементы.Очистить();
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Организация", ВидСравненияКомпоновкиДанных.Равно, Организация);
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Подразделение", ВидСравненияКомпоновкиДанных.ВСписке, МассивПодразделений);
	КонецЕсли;
	Если ИсключитьДанныеОбособленныхПодразделений Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Подразделение", ВидСравненияКомпоновкиДанных.НеВСписке, МассивПодразделений);
	КонецЕсли;
	
	// Далее следует настройка варианта расшифровки.
	Если Вариант <> "Расшифровка" Тогда
		Возврат КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
	НомерСтроки = ПараметрыОтчета.НомерСтроки;
	НомерКолонки = ПараметрыОтчета.НомерКолонки;
	
	ВидОтчета = ПараметрыОтчета.ВидОтчета;
	
	// Включение полей отчета, по которым выводится расшифровка.
	ВключитьВычисляемоеПоле(Настройки.Выбор, "Сотрудник");
	
	ВариантРасчетаПоказателей = ?(ПараметрыОтчета.Свойство("ВариантРасчетаПоказателей"), ПараметрыОтчета.ВариантРасчетаПоказателей, 0);
	//ОпределитьВидСКД(ВидОтчета, НомерКолонки, ВариантРасчетаПоказателей, Настройки);
	
	// Добавление отборов
	СтатистикаПерсонала.ЗаполнитьОтборДляОтчетаРасшифровки(Отбор, ПараметрыОтчета, НомерСтроки);
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции

Процедура ВключитьВычисляемоеПоле(ВыбранныеПоля, ИмяПоля)
	
	Если Лев(ИмяПоля, 20) = "ПользовательскиеПоля" Тогда
		ИмяПоля = СтрЗаменить(ИмяПоля, "ПользовательскиеПоля", "ПользовательскиеПоля.");
	КонецЕсли;
	
	ИскомоеПоле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	Для Каждого НастройкаПоля Из ВыбранныеПоля.Элементы Цикл
		Если НастройкаПоля.Поле = ИскомоеПоле Тогда
			НастройкаПоля.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодразделенияИсключения(Организация, Подразделение, ИсключитьДанныеОбособленныхПодразделений)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Если ИсключитьДанныеОбособленныхПодразделений  Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ПОМЕСТИТЬ ВТПодразделенияВерхнегоУровня
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Владелец = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ПодразделенияВерхнегоУровня.Ссылка
		|			ИЗ
		|				ВТПодразделенияВерхнегоУровня КАК ПодразделенияВерхнегоУровня)
		|	И ПодразделенияОрганизаций.Владелец = &Организация";
		ПустыеКоды = Новый Массив;
		ПустыеКоды.Добавить("");
		ПустыеКоды.Добавить("              ");
		Запрос.УстановитьПараметр("ПустыеКоды", ПустыеКоды);
		
	ИначеЕсли ЗначениеЗаполнено(Подразделение) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&Подразделение)
		|	И ПодразделенияОрганизаций.Владелец = &Организация";
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
	Иначе
		
		Возврат Новый Массив
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции 



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Чтение настроек подсистемы статистики персонала.
// Если формирование отчетных форм статистики отключено, функция возвращает
// структуру с единственным реквизитом ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы,
// установленным в значение ЛОЖЬ.
//
// ВозвращаемоеЗначение:
//  Структура настроек
//
Функция НастройкиСтатистикиПерсонала() Экспорт

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы", Ложь);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы") Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НастройкиСтатистикиПерсонала.ИспользоватьОтчетностьМониторингаРаботниковСоциальнойСферы,
		|	НастройкиСтатистикиПерсонала.ФормаОтчетностиМониторингаРаботниковСоциальнойСферы
		|ИЗ
		|	РегистрСведений.НастройкиСтатистикиПерсонала КАК НастройкиСтатистикиПерсонала";

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Если РезультатЗапроса.Количество() > 0 Тогда
		СтруктураНастроек = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса[0]);
	КонецЕсли;
	
	Возврат СтруктураНастроек;

КонецФункции

Процедура УстановитьПустоеЗначение(Значение, ИмяЯчейки, Контейнер) Экспорт
	Если Контейнер.ПолеТабличногоДокументаФормаОтчета.Свойство(ИмяЯчейки) И (Значение = 0 Или Значение = Null) Тогда
		Контейнер.ПолеТабличногоДокументаФормаОтчета[ИмяЯчейки] = "ЧН=-";
	КонецЕсли;		
КонецПроцедуры

Процедура УстановитьПустоеЗначениеЧисленности(Значение, ИмяЯчейки, Контейнер) Экспорт
	Если Контейнер.ПолеТабличногоДокументаФормаОтчета.Свойство(ИмяЯчейки) И (Значение = Null Или Значение < 0.1) Тогда
		Контейнер.ПолеТабличногоДокументаФормаОтчета[ИмяЯчейки] = "ЧН=-";
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Блок функций первоначального заполнения и обновления ИБ.

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	

КонецПроцедуры

#КонецОбласти
