////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет, что спецификацию можно назначить основной
//
// Параметры
//  СвойстваСпецификации	- Структура - содержит свойства спецификации
//  СтруктураОшибки			- Структура - содержит результат проверки: 
//								1. ТекстОшибки: причина по которой спецификация не может быть основной
//
// Возвращаемое значение:
//   Булево   - Истина, если можно назначить основной
//
Функция СпецификациюМожноНазначитьОсновной(СвойстваСпецификации, СтруктураОшибки) Экспорт

	Если СвойстваСпецификации.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует") Тогда
		СтруктураОшибки.Вставить("ТекстОшибки", НСтр("ru='Спецификация может быть основной только в статусе ""Действует"".';uk='Специфікація може бути основною тільки в статусі ""Діє"".'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Формирует представление этапа, которое можно использовать для вывода пользователю
//
// Параметры:
//  СпецификацияПредставление			- Строка - Представление спецификации
//  ЭтапПредставление					- Строка - Представление этапа
//  МногоэтапныйПроизводственныйПроцесс	- Булево - Признак того что производственный процесс состоит из нескольких этапов
//  ЭтапВосстановленияБрака				- Булево - Признак того что этап создан для восстановление брака 
//
// Возвращаемое значение:
//   Строка   - представление этапа
//
Функция ПредставлениеЭтапа(СпецификацияПредставление, ЭтапПредставление, МногоэтапныйПроизводственныйПроцесс, ЭтапВосстановленияБрака = Ложь) Экспорт

	Если МногоэтапныйПроизводственныйПроцесс Тогда
		СпецификацияСтрока = ЭтапПредставление + ", " + СпецификацияПредставление;
	Иначе
		СпецификацияСтрока = СпецификацияПредставление;
	КонецЕсли;
	Если ЭтапВосстановленияБрака Тогда
		СпецификацияСтрока = СпецификацияСтрока + " (" + НСтр("ru='восстановление брака';uk='відновлення браку'") + ")";
	КонецЕсли; 

	Возврат СпецификацияСтрока;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АвтовыборМатериалов

// Выполняет стандартные действия при изменении материала
//
Процедура ПриИзмененииНоменклатурыВСтрокеМатериалов(ДанныеСтроки, Объект) Экспорт

	Если ДанныеСтроки.СпособАвтовыбораНоменклатуры <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ") Тогда
		ДанныеСтроки.СпособАвтовыбораНоменклатуры = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
		ДанныеСтроки.НоменклатураСтрокой = "";
	КонецЕсли; 
		
КонецПроцедуры

// Выполняет стандартные действия при изменении характеристики
//
Процедура ПриИзмененииХарактеристикиВСтрокеМатериалов(ДанныеСтроки, Объект) Экспорт

	Если ДанныеСтроки.СпособАвтовыбораХарактеристики <> ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ") Тогда
		ДанныеСтроки.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
		ДанныеСтроки.ХарактеристикаСтрокой = "";
	КонецЕсли;
	
	ЗаданныеСвойства = Объект.СоответствиеСвойств.НайтиСтроки(Новый Структура("КлючСвязиМатериал", ДанныеСтроки.КлючСвязи));
	Для каждого ЭлементКоллекции Из ЗаданныеСвойства Цикл
		Объект.СоответствиеСвойств.Удалить(ЭлементКоллекции);
	КонецЦикла; 
	
КонецПроцедуры

// Выполняет стандартные действия при вводе новой строки материалов
// - устанавливает способ автовыбора материала
// - устанавливает способ автовыбора характеристики
// - копирует настройки автовыбора
//
// Параметры
//  ДанныеСтроки				- ДанныеФормыСтруктура - содержит данные строки
//  КлючСвязиИсточника			- Число, Неопределено - ключ связи источника (при копировании строки)
//  СоответствиеСвойств			- ДанныеФормыКоллекция - табличная часть "СоответствиеСвойств"
//
Процедура ПриВводеНовойСтрокиМатериалов(ДанныеСтроки, КлючСвязиИсточника = Неопределено, СоответствиеСвойств = Неопределено) Экспорт

	Если КлючСвязиИсточника <> Неопределено Тогда
		
		// Копирование
		
		СписокСтрок = СоответствиеСвойств.НайтиСтроки(Новый Структура("КлючСвязиМатериал", КлючСвязиИсточника));
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			НоваяСтрока = СоответствиеСвойств.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			НоваяСтрока.КлючСвязиМатериал = ДанныеСтроки.КлючСвязи;
		КонецЦикла; 
		
	Иначе	
		
		// Новая строка
		
		ДанныеСтроки.СпособАвтовыбораНоменклатуры   = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ");
		ДанныеСтроки.СпособАвтовыбораХарактеристики = ПредопределенноеЗначение("Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ");
	
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет информацию по автовыбору материала в строке табличной части
//
Процедура ЗаполнитьИнформациюПоАвтовыборуМатериала(СтрокаМатериал) Экспорт
	
	СтрокаМатериал.ИнформацияКМатериалу = СтрокаМатериал.СведенияАвтовыбора
		+ ?(СтрокаМатериал.СведенияАвтовыбора = "", "", Символы.ПС);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

#Область СписокВидовРабочихЦентров

// Выполняет стандартные действия при вводе новой строки видов рабочих центров
// - устанавливает количество альтернативных видов рабочих центров
//
// Параметры
//  ДанныеСтроки						- ДанныеФормыСтруктура - содержит данные строки
//  Копирование							- Булево - Истина, если выполняется копирование строки
//  АльтернативныеВидыРабочихЦентров	- ТабличнаяЧасть - таблица содержащая данные ТЧ "АльтернативныеВидыРабочихЦентров"
//
Процедура ПриВводеНовойСтрокиВидовРабочихЦентров(ДанныеСтроки, Копирование, АльтернативныеВидыРабочихЦентров = Неопределено) Экспорт

	Если НЕ Копирование Тогда
		
		ДанныеСтроки.ЕдиницаИзмерения  = ОсновнаяЕдиницаВремени();
		
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью списка видов рабочих центров
//
Процедура ВидимостьСпискаВидовРЦ(ПланироватьРаботуВидовРабочихЦентров, ПроизводствоНаСтороне, Форма) Экспорт

	Если ПроизводствоНаСтороне Тогда
		ТекущаяСтраница = Форма.Элементы.ПланироватьРаботуВидовРабочихЦентровБезРЦ;
	ИначеЕсли ПланироватьРаботуВидовРабочихЦентров Тогда
		ТекущаяСтраница = Форма.Элементы.ПланироватьРаботуВидовРабочихЦентровПоРЦ;
	Иначе
		ТекущаяСтраница = Форма.Элементы.ПланироватьРаботуВидовРабочихЦентровБезРЦ;
	КонецЕсли; 
	
    Форма.Элементы.ПланироватьРаботуВидовРабочихЦентровСтраницы.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область Прочее

Функция ОсновнаяЕдиницаВремени() Экспорт

	Возврат ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");

КонецФункции

#КонецОбласти

#КонецОбласти
