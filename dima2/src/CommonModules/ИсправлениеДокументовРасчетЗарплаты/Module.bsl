
#Область СлужебныйПрограммныйИнтерфейс

// Формирует таблицу с данными перерасчета на основании данных "первичных" начислений.
// Процедура предполагает стандартные структуры данных формы Начисления и НачисленияПерерасчет.
// При формировании перерасчетов заполняются как сторнируемые начисления, так и записи зависимых 
// начислений ("отменяющие" сторно-записи и новые записи).
// Параметры предназначены для передачи сведений о документе, для которого формируются перерасчеты
// 		ПериодРегистрации.
//		Начисления - коллекция уже сформированных начислений.
//		НачисленияПерерасчет - таблица с перерасчетами, которая заполняется в процедуре
//		ДокументСсылка.
//
Процедура СформироватьДанныеПерерасчета(ПериодРегистрации, Начисления, НачисленияПерерасчет, ДокументСсылка, ОписаниеДокумента = Неопределено, Объект = Неопределено) Экспорт
	Перем ПредыдущаяСтрока;
	
	НачисленияПерерасчет.Очистить();
	
	Если Не ТребуетсяПерерасчет(ДокументСсылка, ПериодРегистрации, Начисления) Тогда
		Возврат;
	КонецЕсли;
	
	НачисленияНабор = РасчетЗарплатыРасширенный.НаборЗаписейНачисления();
	
	ОтменятьТранзакцию = Ложь;
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьТранзакцию = Истина;
	КонецЕсли;
	
	// Удаляем текущие движения для исключения влияния на заполнение перерасчетов прошлого периода.
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		НачисленияНабор.Отбор.Регистратор.Установить(ДокументСсылка);
		НачисленияНабор.Записать(); 
	КонецЕсли;
	
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНабор.Отбор.Регистратор.Установить(ВременнаяСсылка);
	НачисленияНабор.ДополнительныеСвойства.Удалить("ЭтоВременныйНаборЗаписей");
	
	НачисленияЗаднимЧислом = ПустаяТаблицаНачисленийЗаднимЧислом();
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Сотрудник", Истина);
	ДанныеСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСотрудников, "ФизическоеЛицо,ГоловнаяОрганизация");
	
	Для Каждого СтрокаНачисления Из Начисления Цикл
		НоваяСтрока = НачисленияНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудников[НоваяСтрока.Сотрудник].ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[НоваяСтрока.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = ВременнаяСсылка;
		
		Если ОписаниеДокумента = Неопределено Или НЕ ОписаниеДокумента.ВидНачисленияВШапке  Тогда
			НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
		Иначе
			НоваяСтрока.ВидРасчета = Объект[ОписаниеДокумента.ВидНачисленияИмя];
		КонецЕсли;
		
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
		НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаНачисления.ДатаОкончания);
		
		СтрокаНачисленийЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисленийЗаднимЧислом, НоваяСтрока);
		
	КонецЦикла;
	// Дополним записи по совместителям и подработкам
	ДобавленныеЗаписи = Новый Массив;
	РегистрыРасчета.Начисления.ДополнитьНаборЗаписейНачислениямиСовместителейИПодработок(НачисленияНабор, ДобавленныеЗаписи, Истина, Ложь);
	Если ДобавленныеЗаписи.Количество() > 0 Тогда
		// получим массив уникальных сотрудников из добавленных строк
		МассивСотрудников = Новый Массив;
		УникальныеЗначения = Новый Соответствие;
		Для Каждого НоваяСтрока Из ДобавленныеЗаписи Цикл
			Если УникальныеЗначения[НоваяСтрока.Сотрудник] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивСотрудников.Добавить(НоваяСтрока.Сотрудник);
			УникальныеЗначения.Вставить(НоваяСтрока.Сотрудник, Истина);
		КонецЦикла;
		
		// получим данные о новых сотрудниках
		ДанныеДобавленныхСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСотрудников, "ФизическоеЛицо,ГоловнаяОрганизация");
		Для Каждого ЭлементСоответствия Из ДанныеДобавленныхСотрудников Цикл
			ДанныеСотрудников[ЭлементСоответствия.Ключ] = ЭлементСоответствия.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
	СторноЗаписи = НачисленияНабор.ПолучитьДополнение();
	СторноЗаписи.Колонки.Добавить("НулевоеСторно", Новый ОписаниеТипов("Булево"));
	СторноЗаписи.Сортировать("Сотрудник,ВидРасчета,ПериодРегистрации,ПериодДействияНачалоСторно,Результат", Новый СравнениеЗначений());
	СторноЗаписи.ЗаполнитьЗначения(Ложь, "ФиксРасчет, ФиксРасчетВремени");
	ПерваяЗапись = Истина;
	Для Каждого СтрокаСторно Из СторноЗаписи Цикл
		Если ПерваяЗапись Тогда
			ПерваяЗапись = Ложь;
		Иначе
			Если СтрокаСторно.Сотрудник = ПредыдущаяСтрока.Сотрудник И 
				СтрокаСторно.ВидРасчета = ПредыдущаяСтрока.ВидРасчета И 
				СтрокаСторно.ПериодРегистрации = ПредыдущаяСтрока.ПериодРегистрации И 
				СтрокаСторно.ПериодДействияНачалоСторно = ПредыдущаяСтрока.ПериодДействияНачалоСторно И 
				СтрокаСторно.Результат = - ПредыдущаяСтрока.Результат Тогда
				// обе строки - "нулевое" сторно
				СтрокаСторно.НулевоеСторно = Истина;
				ПредыдущаяСтрока.НулевоеСторно = Истина;
			КонецЕсли;
		КонецЕсли;
		ПредыдущаяСтрока = СтрокаСторно;
	КонецЦикла;
		
	НачисленияНабор.Очистить();
	НачисленияНабор.Записать();
	
	РегистраторНаборДляЗаполненияПерерасчета = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборДляЗаполненияПерерасчета = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(РегистраторНаборДляЗаполненияПерерасчета);
	
	ИдентификаторСтроки = 1;
	
	Для Каждого СтрокаСторно Из СторноЗаписи Цикл
		СтрокаНачисленийЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисленийЗаднимЧислом, СтрокаСторно);
		СтрокаНачисленийЗаднимЧислом.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
		СтрокаНачисленийЗаднимЧислом.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаНачисленийЗаднимЧислом.РегистраторПоказателей = СтрокаСторно.Регистратор;
		СтрокаНачисленийЗаднимЧислом.ИдентификаторСтрокиПоказателей = СтрокаСторно.ИдентификаторСтроки;
		СтрокаНачисленийЗаднимЧислом.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		СтрокаНачисленийЗаднимЧислом.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		СтрокаНачисленийЗаднимЧислом.Сторно = Истина;
		СтрокаНачисленийЗаднимЧислом.СторнируемыйДокумент = СтрокаСторно.Регистратор;
		
		НоваяСтрока = НаборДляЗаполненияПерерасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСторно);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудников[НоваяСтрока.Сотрудник].ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[НоваяСтрока.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		НоваяСтрока.Сторно = Истина;
		НоваяСтрока.ПериодРегистрации = СтрокаСторно.ПериодРегистрацииСторно;
		НоваяСтрока.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		
	КонецЦикла;
	
	// Записать сторно-записи перед получением данных для расчета.
	НаборДляЗаполненияПерерасчета.Записать();
	
	ЗаполнитьНачисленияПерерасчетПоНачисленияЗаднимЧислом(ПериодРегистрации, НачисленияЗаднимЧислом, НачисленияПерерасчет, РегистраторНаборДляЗаполненияПерерасчета);
	
	Если Не ОтменятьТранзакцию Тогда
		НаборДляЗаполненияПерерасчета.Очистить();
		НаборДляЗаполненияПерерасчета.Записать();
	КонецЕсли;
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу с данными перерасчета на основании данных исправляемого документа.
// Параметры:
//		Организация, 
//		ПериодРегистрации, 
//		ИсправленныйДокумент, 
//		Начисления - таблица с начислениями.
//		НачисленияПерерасчет -  таблица с перерасчетами.
//		ДокументСсылка - ссылка на  документ, данные перерасчета которого формируются.
//		РеквизитНачислениеДокумента - имя реквизита с видом расчета, если он задается в "шапке" документа. 
//					Не обязательный, по умолчанию - "".
//
// Процедура предполагает "стандартные" структуры данных формы Начисления и НачисленияПерерасчет.
// При формировании перерасчетов заполняются 
//		- сторнируемые начисления
//		- доначисления плановых начислений, если исправление документа 
//			приводит к "освобождению" ранее занятого периода
//		- "отменяющие" сторно-записи зависимых начислений
//		- новые записи зависимых начислений.
//
Процедура СформироватьДанныеПерерасчетаДляИсправления(Организация, ПериодРегистрации, ИсправленныйДокумент, Начисления, НачисленияПерерасчет, ДокументСсылка, РеквизитНачислениеДокумента = "", РеквизитПериодРегистрации = "ПериодРегистрации", Сотрудник = Неопределено) Экспорт
	
	МетаданныеДокумента = ИсправленныйДокумент.Метаданные();
	
	ДокументБезДатаНачала = Ложь;
	ДокументБезВТомЧислеЗаСчетФБ = Ложь;
	Если МетаданныеДокумента.ТабличныеЧасти.Начисления.Реквизиты.Найти("ДатаНачала") = Неопределено Тогда
		ДокументБезДатаНачала = Истина;
	КонецЕсли;
	Если МетаданныеДокумента.ТабличныеЧасти.Начисления.Реквизиты.Найти("РезультатВТомЧислеЗаСчетФБ") = Неопределено Тогда
		ДокументБезВТомЧислеЗаСчетФБ = Истина;
	КонецЕсли;
	
	НачислениеДокумента = Неопределено;
	
	НачисленияПерерасчет.Очистить();
	
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНабор = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылка);
	
	НачисленияЗаднимЧислом = ПустаяТаблицаНачисленийЗаднимЧислом();
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ИсправленныйДокумент);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Начисления.Ссылка.РеквизитПериодРегистрации КАК ПериодРегистрации, *
	|ИЗ
	|	#Таблица КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ИсправленныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Начисления.ДатаНачала) КАК НачалоСтарогоПериода,
	|	МАКСИМУМ(Начисления.ДатаОкончания) КАК ОкончаниеСтарогоПериода,
	|	Начисления.Ссылка.ВидРасчета КАК Начисление
	|ИЗ
	|	#Таблица КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ИсправленныйДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Ссылка.ВидРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	#Таблица КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ИсправленныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	#Таблица КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК РегистрНачисления
	|		ПО Начисления.Сотрудник = РегистрНачисления.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) = РегистрНачисления.ПериодДействия)
	|			И Начисления.ДатаНачала < РегистрНачисления.ПериодДействияКонец
	|			И Начисления.ДатаОкончания > РегистрНачисления.ПериодДействияНачало
	|ГДЕ
	|	Начисления.Ссылка = &ИсправленныйДокумент
	|	И РегистрНачисления.Регистратор <> &ИсправленныйДокумент");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ИмяТаблицы + ".Начисления");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеквизитПериодРегистрации", РеквизитПериодРегистрации);
	Если ДокументБезДатаНачала Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаНачала", "Начисления.Ссылка." + РеквизитПериодРегистрации);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.ДатаОкончания", "КОНЕЦПЕРИОДА(Начисления.Ссылка." + РеквизитПериодРегистрации + ", МЕСЯЦ)");
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитНачислениеДокумента) Тогда
		// Получаем начисление из "шапки" документа.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Ссылка.ВидРасчета", "Начисления.Ссылка." + РеквизитНачислениеДокумента);
	Иначе
		// Удаляем фрагменты запроса связанные с получением начисление из "шапки" документа.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
		|	Начисления.Ссылка.ВидРасчета КАК Начисление", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Ссылка.ВидРасчета", "");
	КонецЕсли;
	Если Сотрудник <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Ссылка = &ИсправленныйДокумент",
		"Начисления.Ссылка = &ИсправленныйДокумент И Начисления.Сотрудник = &Сотрудник");
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаДанныеИсправленногоДокумента = Результаты[0].Выбрать();
	УчитыватьСуммуВычета = Результаты[0].Колонки.Найти("СуммаВычета") <> Неопределено;
	ВыборкаДатыПериода = Результаты[1].Выбрать();
	ВыборкаСтарыеСотрудники = Результаты[2].Выбрать();
	ТребуетсяВосстановлениеНачислений = Не Результаты[3].Пустой();
	
	ВыборкаДатыПериода.Следующий();
	НачалоСтарогоПериода = ВыборкаДатыПериода.НачалоСтарогоПериода;
	ОкончаниеСтарогоПериода = ВыборкаДатыПериода.ОкончаниеСтарогоПериода;
	Если ЗначениеЗаполнено(РеквизитНачислениеДокумента) Тогда
		НачислениеДокумента = ВыборкаДатыПериода.Начисление;
	КонецЕсли;
	
	// "старые" сотрудники
	// таблица для использования в РасчетЗарплатыРасширенный.ДанныеДляНачисленияЗарплаты
	ТаблицаСтарыхСотрудников = Новый ТаблицаЗначений;
	ТаблицаСтарыхСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСтарыхСотрудников.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	// Организации и физлица старых сотрудников.
	ГоловныеОрганизацииСотрудников = Новый Соответствие;
	ФизическиеЛицаСотрудников = Новый Соответствие;
	
	Сотрудники = Новый Массив;
	Пока ВыборкаСтарыеСотрудники.Следующий() Цикл
		ГоловныеОрганизацииСотрудников[ВыборкаСтарыеСотрудники.Сотрудник] = ВыборкаСтарыеСотрудники.ГоловнаяОрганизация;
		ФизическиеЛицаСотрудников[ВыборкаСтарыеСотрудники.Сотрудник] = ВыборкаСтарыеСотрудники.ФизическоеЛицо;
		Сотрудники.Добавить(ВыборкаСтарыеСотрудники.Сотрудник);
	КонецЦикла;
	
	Если ТребуетсяВосстановлениеНачислений Тогда
		// Получим данные плановых начислений за исправляемый период.
		ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДанныхДляНачисленияЗарплаты();
		ДополнительныеПараметры.Сотрудники = Сотрудники;
		ДополнительныеПараметры.ДокументСсылка = ДокументСсылка;
		
		Если ЗначениеЗаполнено(НачалоСтарогоПериода) И ЗначениеЗаполнено(ОкончаниеСтарогоПериода) Тогда
			ПлановыеНачисления = РасчетЗарплатыРасширенный.ДанныеДляНачисленияЗарплатыБезКорректировкиПериода(Организация, НачалоСтарогоПериода, ОкончаниеСтарогоПериода, ПериодРегистрации, ДополнительныеПараметры);
		Иначе
			ПлановыеНачисления = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления();
		КонецЕсли;
	КонецЕсли;
	
	// "новые" сотрудники
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Сотрудник", Истина);
	ДанныеСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСотрудников, "ФизическоеЛицо,ГоловнаяОрганизация");
	
	ОтменятьТранзакцию = Ложь;
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьТранзакцию = Истина;
	КонецЕсли;
	
	// 1. 
	// Получаем записи, которые, возможно, нужно сторнировать из-за расширения периода начисления.
	
	// Для чего временно удаляем движения регистра "Начисления".
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ТекущийНабор = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
		ТекущийНабор.Отбор.Регистратор.Установить(ДокументСсылка);
		ТекущийНабор.Записывать = Истина;
		ТекущийНабор.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		ТекущийНабор.ДополнительныеСвойства.Вставить("ЭтоВременныйНаборЗаписей");
		ТекущийНабор.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		ТекущийНабор.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		ТекущийНабор.Записать();
	КонецЕсли;
	
	// "Новые" записи документа
	Для Каждого СтрокаНачисления Из Начисления Цикл
		Если Не ДокументБезДатаНачала Тогда
			Если СтрокаНачисления.ДатаНачала >= ПериодРегистрации Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока = НачисленияНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудников[НоваяСтрока.Сотрудник].ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[НоваяСтрока.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = ВременнаяСсылка;
		Если ЗначениеЗаполнено(НачислениеДокумента) Тогда
			НоваяСтрока.ВидРасчета = НачислениеДокумента;
		Иначе
			НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
		КонецЕсли;
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		Если ДокументБезДатаНачала Тогда
			НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ПериодДействия;
			НоваяСтрока.ПериодДействияКонец = КонецМесяца(СтрокаНачисления.ПериодДействия);
		Иначе
			НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
			НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаНачисления.ДатаОкончания);
		КонецЕсли;
		
	КонецЦикла;
	СторноЗаписи = НачисленияНабор.ПолучитьДополнение();
	НачисленияНабор.Очистить();
	
	РегистраторНаборДляЗаполненияПерерасчета = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборДляЗаполненияПерерасчета = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(РегистраторНаборДляЗаполненияПерерасчета);
	
	ИдентификаторСтроки = 1;
	
	Для Каждого СтрокаСторно Из СторноЗаписи Цикл
		СтрокаНачисленийЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисленийЗаднимЧислом, СтрокаСторно);
		СтрокаНачисленийЗаднимЧислом.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
		СтрокаНачисленийЗаднимЧислом.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаНачисленийЗаднимЧислом.РегистраторПоказателей = СтрокаСторно.Регистратор;
		СтрокаНачисленийЗаднимЧислом.ИдентификаторСтрокиПоказателей = СтрокаСторно.ИдентификаторСтроки;
		СтрокаНачисленийЗаднимЧислом.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		СтрокаНачисленийЗаднимЧислом.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		СтрокаНачисленийЗаднимЧислом.Сторно = Истина;
		СтрокаНачисленийЗаднимЧислом.СторнируемыйДокумент = СтрокаСторно.Регистратор;
		
		НоваяСтрока = НаборДляЗаполненияПерерасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСторно);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудников[НоваяСтрока.Сотрудник].ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[НоваяСтрока.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		НоваяСтрока.Сторно = Истина;
		НоваяСтрока.ПериодРегистрации = СтрокаСторно.ПериодРегистрацииСторно;
		НоваяСтрока.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		
	КонецЦикла;
	
	// 2.
	// Выявляем начисления, которые необходимо доначислить в связи с исправлением.
	// Необходимо восстановить начисления в "старых" периодах по "старым" сотрудникам.
	
	ВременнаяСсылкаФизлицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
	ВременныйПериодРегистрации = ПериодРегистрации;
	ВременныйСледующийПериодРегистрации = ДобавитьМесяц(ВременныйПериодРегистрации, 1);
	
	ЗначенияПоказателейНабор = РегистрыСведений.ЗначенияПоказателейНачислений.СоздатьНаборЗаписей();
	ЗначенияПоказателейНабор.Отбор.Регистратор.Установить(РегистраторНаборДляЗаполненияПерерасчета);
	
	// Добавим во временный набор новые, исправленные записи.
	Для Каждого СтрокаНачисления Из Начисления Цикл
		НоваяСтрока = НачисленияНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.ФизическоеЛицо = ВременнаяСсылкаФизлицо; // ссылка на физлицо
		// Головная организация "нового" сотрудника.
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[СтрокаНачисления.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник; // Настоящий "новый" сотрудник.
		НоваяСтрока.Регистратор = ВременнаяСсылка;
		Если ЗначениеЗаполнено(НачислениеДокумента) Тогда
			НоваяСтрока.ВидРасчета = НачислениеДокумента;
		Иначе
			НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
		КонецЕсли;
		НоваяСтрока.ПериодРегистрации = ВременныйПериодРегистрации;
		Если ДокументБезДатаНачала Тогда
			НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ПериодДействия;
			НоваяСтрока.ПериодДействияКонец = КонецМесяца(СтрокаНачисления.ПериодДействия);
		Иначе
			НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
			НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаНачисления.ДатаОкончания);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете();
	
	ИдентификаторСтрокиПлановые = 1;
	
	Если ТребуетсяВосстановлениеНачислений Тогда
		
		// Добавим во временный набор плановые начисления исправляемого периода.
		Для Каждого СтрокаНачисления Из ПлановыеНачисления Цикл
			НоваяСтрока = НачисленияНабор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			// Фиктивная ссылка для того, чтобы не пересекаться с настоящими записями регистра.
			НоваяСтрока.ФизическоеЛицо = ВременнаяСсылкаФизлицо;
			// Настоящая головная организация.
			НоваяСтрока.ГоловнаяОрганизация = ГоловныеОрганизацииСотрудников[СтрокаНачисления.Сотрудник];
			НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник; // Настоящий "старый" сотрудник.
			НоваяСтрока.Регистратор = ВременнаяСсылка;
			НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтрокиПлановые;
			НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
			НоваяСтрока.ПериодРегистрации = ВременныйПериодРегистрации;
			НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
			НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаНачисления.ДатаОкончания);
			
			// Сохраним показатели во временный набор записей.
			Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
				Показатель = СтрокаНачисления["Показатель" + НомерПоказателя];
				Если ЗначениеЗаполнено(Показатель) Тогда
					НоваяСтрокаПоказателя = ЗначенияПоказателейНабор.Добавить();
					НоваяСтрокаПоказателя.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
					НоваяСтрокаПоказателя.РегистраторИзмерение = РегистраторНаборДляЗаполненияПерерасчета;
					НоваяСтрокаПоказателя.ИдентификаторСтроки = ИдентификаторСтрокиПлановые;
					НоваяСтрокаПоказателя.Показатель = Показатель;
					НоваяСтрокаПоказателя.Значение = СтрокаНачисления["Значение" + НомерПоказателя];
				КонецЕсли;
			КонецЦикла;
			
			ИдентификаторСтрокиПлановые = ИдентификаторСтрокиПлановые + 1;
			
		КонецЦикла;
		
		НачисленияНабор.Записать();
	КонецЕсли;
	
	ВременнаяСсылкаПолучениеДополнения = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНаборПолучениеДополнения = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылкаПолучениеДополнения);
	
	ДанныеПерерасчетовСторно = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	
	// Формируем набор для получения дополнения и вычисления плановых 
	// начислений, которые потребуется доначислить.
	Пока ВыборкаДанныеИсправленногоДокумента.Следующий() Цикл
		// Заполнение набора записей для получения доначислений из-за смещения периода.
		НоваяСтрока = НачисленияНаборПолучениеДополнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДанныеИсправленногоДокумента);
		// Фиктивная ссылка для того, чтобы не пересекаться с настоящими записями регистра.
		НоваяСтрока.ФизическоеЛицо = ВременнаяСсылкаФизлицо;
		// Настоящая головная организация
		НоваяСтрока.ГоловнаяОрганизация = ГоловныеОрганизацииСотрудников[ВыборкаДанныеИсправленногоДокумента.Сотрудник];
		// НоваяСтрока.Сотрудник 			// "старого" сотрудника оставляем.
		НоваяСтрока.Регистратор = ВременнаяСсылкаПолучениеДополнения;
		Если ЗначениеЗаполнено(НачислениеДокумента) Тогда
			НоваяСтрока.ВидРасчета = НачислениеДокумента;
		Иначе
			НоваяСтрока.ВидРасчета = ВыборкаДанныеИсправленногоДокумента.Начисление;
		КонецЕсли;
		НоваяСтрока.ПериодРегистрации = ВременныйСледующийПериодРегистрации;
		Если ДокументБезДатаНачала Тогда
			НоваяСтрока.ПериодДействияНачало = ВыборкаДанныеИсправленногоДокумента.ПериодДействия;
			НоваяСтрока.ПериодДействияКонец = КонецМесяца(ВыборкаДанныеИсправленногоДокумента.ПериодДействия);
		Иначе
			НоваяСтрока.ПериодДействияНачало = ВыборкаДанныеИсправленногоДокумента.ДатаНачала;
			НоваяСтрока.ПериодДействияКонец = КонецДня(ВыборкаДанныеИсправленногоДокумента.ДатаОкончания);
		КонецЕсли;
		
		// Заполнение начислений перерасчета для сторнирования прежних записей исправляемого документа.
		НоваяСтрокаПерерасчета = ДанныеПерерасчетовСторно.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПерерасчета, ВыборкаДанныеИсправленногоДокумента);
		НоваяСтрокаПерерасчета.Результат = - ВыборкаДанныеИсправленногоДокумента.Результат;
		Если ЗначениеЗаполнено(НачислениеДокумента) Тогда
			НоваяСтрокаПерерасчета.Начисление = НачислениеДокумента;
		Иначе
			НоваяСтрокаПерерасчета.Начисление = ВыборкаДанныеИсправленногоДокумента.Начисление;
		КонецЕсли;
		Если ДокументБезДатаНачала Тогда
			НоваяСтрокаПерерасчета.ДатаНачала = ВыборкаДанныеИсправленногоДокумента.ПериодРегистрации;
			НоваяСтрокаПерерасчета.ДатаОкончания = КонецМесяца(ВыборкаДанныеИсправленногоДокумента.ПериодРегистрации);
		Иначе
			НоваяСтрокаПерерасчета.ДатаНачала = ВыборкаДанныеИсправленногоДокумента.ДатаНачала;
			НоваяСтрокаПерерасчета.ДатаОкончания = ВыборкаДанныеИсправленногоДокумента.ДатаОкончания;
		КонецЕсли;
		Если Не ДокументБезВТомЧислеЗаСчетФБ Тогда
			НоваяСтрокаПерерасчета.РезультатВТомЧислеЗаСчетФБ = - ВыборкаДанныеИсправленногоДокумента.РезультатВТомЧислеЗаСчетФБ;
		КонецЕсли;
		Если Не ДокументБезДатаНачала Тогда
			НоваяСтрокаПерерасчета.ОтработаноДней = - ВыборкаДанныеИсправленногоДокумента.ОтработаноДней;
			НоваяСтрокаПерерасчета.ОтработаноЧасов = - ВыборкаДанныеИсправленногоДокумента.ОтработаноЧасов;
			НоваяСтрокаПерерасчета.ОплаченоДней = - ВыборкаДанныеИсправленногоДокумента.ОплаченоДней;
			НоваяСтрокаПерерасчета.ОплаченоЧасов = - ВыборкаДанныеИсправленногоДокумента.ОплаченоЧасов;
		КонецЕсли;
		НоваяСтрокаПерерасчета.Сторно = Истина;
		НоваяСтрокаПерерасчета.ФиксСторно = Истина;  // по умолчанию сторнируемые строки не пересчитываем
		НоваяСтрокаПерерасчета.СторнируемыйДокумент = ВыборкаДанныеИсправленногоДокумента.Ссылка;
		
	КонецЦикла;
	
	// Вычисляем изменлся ли ФПД сторнируемых строк и если да - делаем строки рассчитываемыми (ФиксСторно = Ложь) 
	ВременнаяСсылкаПолучениеФПД = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНаборПолучениеФПД = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылкаПолучениеФПД);
	Для Каждого Строка Из ДанныеПерерасчетовСторно Цикл
		НоваяСтрока = НачисленияНаборПолучениеФПД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ФизическоеЛицо = ФизическиеЛицаСотрудников[НоваяСтрока.Сотрудник];
		НоваяСтрока.ВидРасчета = Строка.Начисление;
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрока.ПериодДействияНачало = Строка.ДатаНачала;
		НоваяСтрока.ПериодДействияКонец = КонецДня(Строка.ДатаОкончания);
		НоваяСтрока.ГоловнаяОрганизация = ГоловныеОрганизацииСотрудников[НоваяСтрока.Сотрудник];
		НоваяСтрока.Регистратор = ВременнаяСсылкаПолучениеФПД;
	КонецЦикла;
	НачисленияНаборПолучениеФПД.Записать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НачисленияФактическийПериодДействия.НомерСтроки,
	|	НачисленияФактическийПериодДействия.Сотрудник,
	|	НачисленияФактическийПериодДействия.ВидРасчета,
	|	НачисленияФактическийПериодДействия.ПериодДействияНачало,
	|	НачисленияФактическийПериодДействия.ПериодДействияКонец
	|ПОМЕСТИТЬ ВТНовыйФПД
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(Регистратор = &Регистратор) КАК НачисленияФактическийПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияФактическийПериодДействия.НомерСтроки,
	|	НачисленияФактическийПериодДействия.Сотрудник,
	|	НачисленияФактическийПериодДействия.ВидРасчета,
	|	НачисленияФактическийПериодДействия.ПериодДействияНачало,
	|	НачисленияФактическийПериодДействия.ПериодДействияКонец
	|ПОМЕСТИТЬ ВТСтарыйФПД
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(Регистратор = &ИсправленныйДокумент) КАК НачисленияФактическийПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыйФПД.НомерСтроки,
	|	НовыйФПД.ПериодДействияНачало,
	|	НовыйФПД.ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА СтарыйФПД.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ФПДСовпадает
	|ПОМЕСТИТЬ ВТПоверочныйФПД
	|ИЗ
	|	ВТНовыйФПД КАК НовыйФПД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтарыйФПД КАК СтарыйФПД
	|		ПО НовыйФПД.Сотрудник = СтарыйФПД.Сотрудник
	|			И НовыйФПД.ВидРасчета = СтарыйФПД.ВидРасчета
	|			И НовыйФПД.ПериодДействияКонец = СтарыйФПД.ПериодДействияКонец
	|			И НовыйФПД.ПериодДействияНачало = СтарыйФПД.ПериодДействияНачало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоверочныйФПД.НомерСтроки
	|ПОМЕСТИТЬ ВТИзмененныеСтроки
	|ИЗ
	|	ВТПоверочныйФПД КАК ПоверочныйФПД
	|ГДЕ
	|	НЕ ПоверочныйФПД.ФПДСовпадает
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ИзмененныеСтроки.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА Начисления.ПериодДействияНачало
	|		ИНАЧЕ НовыйФПД.ПериодДействияНачало
	|	КОНЕЦ КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА ИзмененныеСтроки.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА Начисления.ПериодДействияКонец
	|		ИНАЧЕ НовыйФПД.ПериодДействияКонец
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА ИзмененныеСтроки.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтрокаНеИзменилась
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИзмененныеСтроки КАК ИзмененныеСтроки
	|		ПО Начисления.НомерСтроки = ИзмененныеСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНовыйФПД КАК НовыйФПД
	|		ПО Начисления.НомерСтроки = НовыйФПД.НомерСтроки
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ИзмененныеСтроки.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА Начисления.ПериодДействияНачало
	|		ИНАЧЕ НовыйФПД.ПериодДействияНачало
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Регистратор", ВременнаяСсылкаПолучениеФПД);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеПерерасчетов = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрокаПерерасчета = ДанныеПерерасчетов.Добавить();
		Строка = ДанныеПерерасчетовСторно[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПерерасчета, Строка);
		НоваяСтрокаПерерасчета.ДатаНачала = Выборка.ПериодДействияНачало;
		НоваяСтрокаПерерасчета.ДатаОкончания = Выборка.ПериодДействияКонец;
		// если ФПД сторнируемой строки изменился - считаем её
		Если Не Выборка.СтрокаНеИзменилась Тогда
			НоваяСтрокаПерерасчета.ФиксСторно = Ложь;
		КонецЕсли;
	КонецЦикла;
	НачисленияНаборПолучениеФПД.Очистить();
	НачисленияНаборПолучениеФПД.Записать();
	
	// Значения показателей заполняем по сторнируемому документу.
	ЗаполнитьЗначенияПоказателейПоСторнируемомуДокументу(ДанныеПерерасчетов);
	
	// Перенумеруем строки после(!) заполнения показателей. При заполнении показателей ИдентификаторСтрокиВидаРасчета
	// используется для связи со значениями показателей.
	ИдентификаторСтрокиВидаРасчета = 1;
	Для Каждого Строка Из ДанныеПерерасчетов Цикл
		Строка.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
	КонецЦикла;
	
	// То, что сторнировалось бы при вводе прежнего начисления, это и есть то, что нужно 
	// доначислить сейчас, при его "отмене".
	ЗаписиДоначисления = НачисленияНаборПолучениеДополнения.ПолучитьДополнение();
	
	Для Каждого СтрокаДоначисления Из ЗаписиДоначисления Цикл
		СтрокаНачисленийЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисленийЗаднимЧислом, СтрокаДоначисления);
		СтрокаНачисленийЗаднимЧислом.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
		СтрокаНачисленийЗаднимЧислом.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаНачисленийЗаднимЧислом.РегистраторПоказателей = РегистраторНаборДляЗаполненияПерерасчета;
		СтрокаНачисленийЗаднимЧислом.ИдентификаторСтрокиПоказателей = СтрокаДоначисления.ИдентификаторСтроки;
		СтрокаНачисленийЗаднимЧислом.ПериодДействияНачало = СтрокаДоначисления.ПериодДействияНачалоСторно;
		СтрокаНачисленийЗаднимЧислом.ПериодДействияКонец = КонецДня(СтрокаДоначисления.ПериодДействияКонецСторно);
		СтрокаНачисленийЗаднимЧислом.Сторно = Ложь;
		
		НоваяСтрока = НаборДляЗаполненияПерерасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДоначисления);
		НоваяСтрока.ФизическоеЛицо = ФизическиеЛицаСотрудников[НоваяСтрока.Сотрудник];
		НоваяСтрока.ГоловнаяОрганизация = ГоловныеОрганизацииСотрудников[НоваяСтрока.Сотрудник];
		НоваяСтрока.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		НоваяСтрока.Сторно = Ложь;
		НоваяСтрока.ПериодРегистрации = СтрокаДоначисления.ПериодРегистрацииСторно;
		НоваяСтрока.ПериодДействияНачало = СтрокаДоначисления.ПериодДействияНачалоСторно;
		НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаДоначисления.ПериодДействияКонецСторно);
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		
	КонецЦикла;
	НачисленияНабор.Очистить();
	НачисленияНабор.Записать();
	
	НаборДляЗаполненияПерерасчета.Записать();
	ЗначенияПоказателейНабор.Записать();
	
	// 3.
	// Получим начисления, зависимые от введенных сторно и доначислений.
	ЗаполнитьНачисленияПерерасчетПоНачисленияЗаднимЧислом(ПериодРегистрации, НачисленияЗаднимЧислом, НачисленияПерерасчет, РегистраторНаборДляЗаполненияПерерасчета, ДанныеПерерасчетов);
	
	Если Не ОтменятьТранзакцию Тогда
		НаборДляЗаполненияПерерасчета.Очистить();
		НаборДляЗаполненияПерерасчета.Записать();
		Если ТребуетсяВосстановлениеНачислений Тогда
			ЗначенияПоказателейНабор.Очистить();
			ЗначенияПоказателейНабор.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Функция ПустаяТаблицаНачисленийЗаднимЧислом() Экспорт
	
	НачисленияЗаднимЧислом = Новый ТаблицаЗначений;
	НачисленияЗаднимЧислом.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	НачисленияЗаднимЧислом.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияЗаднимЧислом.Колонки.Добавить("Регистратор", Метаданные.РегистрыРасчета.Начисления.СтандартныеРеквизиты.Регистратор.Тип);
	НачисленияЗаднимЧислом.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	НачисленияЗаднимЧислом.Колонки.Добавить("РегистраторПоказателей", Метаданные.РегистрыРасчета.Начисления.СтандартныеРеквизиты.Регистратор.Тип);
	НачисленияЗаднимЧислом.Колонки.Добавить("ИдентификаторСтрокиПоказателей", Новый ОписаниеТипов("Число"));
	НачисленияЗаднимЧислом.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	НачисленияЗаднимЧислом.Колонки.Добавить("ПериодДействияНачало", Новый ОписаниеТипов("Дата"));
	НачисленияЗаднимЧислом.Колонки.Добавить("ПериодДействияКонец", Новый ОписаниеТипов("Дата"));
	НачисленияЗаднимЧислом.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	НачисленияЗаднимЧислом.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	НачисленияЗаднимЧислом.Колонки.Добавить("НулевоеСторно", Новый ОписаниеТипов("Булево"));
	НачисленияЗаднимЧислом.Колонки.Добавить("СторнируемыйДокумент", ОписаниеТиповСторнируемогоДокумента());
	
	Возврат НачисленияЗаднимЧислом;
	
КонецФункции

Функция ОписаниеТиповСторнируемогоДокумента() Экспорт
	
	МассивТиповСторнируемыхДокументов = Новый Массив;
	МассивТиповСторнируемыхДокументов.Добавить(Тип("ДокументСсылка.БольничныйЛист"));
	МассивТиповСторнируемыхДокументов.Добавить(Тип("ДокументСсылка.ДоходВНатуральнойФорме"));
	МассивТиповСторнируемыхДокументов.Добавить(Тип("ДокументСсылка.Командировка"));
	МассивТиповСторнируемыхДокументов.Добавить(Тип("ДокументСсылка.МатериальнаяПомощь"));
	МассивТиповСторнируемыхДокументов.Добавить(Тип("ДокументСсылка.НачислениеЗарплаты"));
	МассивТиповСторнируемыхДокументов.Добавить(Тип("ДокументСсылка.ОплатаПоСреднемуЗаработку"));
	МассивТиповСторнируемыхДокументов.Добавить(Тип("ДокументСсылка.Отпуск"));
	МассивТиповСторнируемыхДокументов.Добавить(Тип("ДокументСсылка.Премия"));
	МассивТиповСторнируемыхДокументов.Добавить(Тип("ДокументСсылка.ПростойСотрудников"));
	МассивТиповСторнируемыхДокументов.Добавить(Тип("ДокументСсылка.РазовоеНачисление"));
	МассивТиповСторнируемыхДокументов.Добавить(Тип("ДокументСсылка.Увольнение"));
	МассивТиповСторнируемыхДокументов.Добавить(Тип("ДокументСсылка.УвольнениеСписком"));
	МассивТиповСторнируемыхДокументов.Добавить(Тип("ДокументСсылка.ПереносДанных"));
	
	Возврат Новый ОписаниеТипов(МассивТиповСторнируемыхДокументов);
	
КонецФункции

Процедура ЗаполнитьНачисленияПерерасчетПоНачисленияЗаднимЧислом(ПериодРегистрации, НачисленияЗаднимЧислом, НачисленияПерерасчет, ИсключаемыйРегистратор, ДанныеПерерасчетов = Неопределено, Показатели = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(НачисленияЗаднимЧислом.ВидРасчета КАК ПланВидовРасчета.Начисления) КАК ВидРасчета,
	|	НачисленияЗаднимЧислом.Сотрудник,
	|	НачисленияЗаднимЧислом.Регистратор,
	|	НачисленияЗаднимЧислом.СторнируемыйДокумент,
	|	НачисленияЗаднимЧислом.ИдентификаторСтроки,
	|	НачисленияЗаднимЧислом.РегистраторПоказателей,
	|	НачисленияЗаднимЧислом.ИдентификаторСтрокиПоказателей,
	|	НачисленияЗаднимЧислом.Сторно,
	|	НачисленияЗаднимЧислом.НулевоеСторно,
	|	НачисленияЗаднимЧислом.ПериодРегистрации,
	|	НачисленияЗаднимЧислом.ПериодДействияНачало,
	|	НачисленияЗаднимЧислом.ПериодДействияКонец
	|ПОМЕСТИТЬ ВТНачисленияЗаднимЧислом
	|ИЗ
	|	&НачисленияЗаднимЧислом КАК НачисленияЗаднимЧислом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Регистратор,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействия,
	|	Начисления.ПериодРегистрации,
	|	Начисления.Результат,
	|	Начисления.Регистратор КАК СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТВозможныеЗаписиДляПерерасчета
	|ИЗ
	|	ВТНачисленияЗаднимЧислом КАК НачисленияЗаднимЧислом
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК ВедущиеНачисления
	|		ПО (ВедущиеНачисления.ВидРасчета = НачисленияЗаднимЧислом.ВидРасчета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияЗаднимЧислом КАК ДублирующиеНачисления
	|			ПО Начисления.ВидРасчета = ДублирующиеНачисления.ВидРасчета
	|				И (НЕ(ДублирующиеНачисления.ВидРасчета.ТребуетсяРасчетБазы
	|						И ДублирующиеНачисления.Сторно))
	|				И (Начисления.ПериодРегистрации = НАЧАЛОПЕРИОДА(ДублирующиеНачисления.ПериодДействияНачало, МЕСЯЦ))
	|		ПО (Начисления.ВидРасчета = ВедущиеНачисления.Ссылка)
	|			И (Начисления.Сотрудник = НачисленияЗаднимЧислом.Сотрудник)
	|			И (Начисления.ПериодРегистрации >= НАЧАЛОПЕРИОДА(НачисленияЗаднимЧислом.ПериодДействияНачало, МЕСЯЦ))
	|			И (Начисления.ПериодРегистрации < &ПериодРегистрации)
	|			И (ВЫБОР
	|				КОГДА Начисления.ВидРасчета.ПериодДействияБазовый
	|					ТОГДА НачисленияЗаднимЧислом.ПериодДействияНачало <= Начисления.ПериодДействияКонец
	|							И НачисленияЗаднимЧислом.ПериодДействияКонец >= Начисления.ПериодДействияНачало
	|				ИНАЧЕ НачисленияЗаднимЧислом.ПериодДействияНачало <= Начисления.БазовыйПериодКонец
	|						И НачисленияЗаднимЧислом.ПериодДействияКонец >= Начисления.БазовыйПериодНачало
	|			КОНЕЦ)
	|			И (ДублирующиеНачисления.ВидРасчета ЕСТЬ NULL )
	|ГДЕ
	|	НЕ НачисленияЗаднимЧислом.НулевоеСторно
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Регистратор,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействия,
	|	Начисления.ПериодРегистрации,
	|	Начисления.Результат,
	|	Начисления.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозможныеЗаписиДляПерерасчета.Регистратор,
	|	ВозможныеЗаписиДляПерерасчета.ИдентификаторСтроки,
	|	ВозможныеЗаписиДляПерерасчета.Сотрудник,
	|	ВозможныеЗаписиДляПерерасчета.ВидРасчета,
	|	ВозможныеЗаписиДляПерерасчета.ПериодДействия,
	|	ВозможныеЗаписиДляПерерасчета.ПериодРегистрации,
	|	ВозможныеЗаписиДляПерерасчета.СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТНачисленияПериоды
	|ИЗ
	|	ВТВозможныеЗаписиДляПерерасчета КАК ВозможныеЗаписиДляПерерасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВозможныеЗаписиДляПерерасчета КАК ВозможныеЗаписиДляПерерасчетаВспом
	|		ПО ВозможныеЗаписиДляПерерасчета.Сотрудник = ВозможныеЗаписиДляПерерасчетаВспом.Сотрудник
	|			И ВозможныеЗаписиДляПерерасчета.ВидРасчета = ВозможныеЗаписиДляПерерасчетаВспом.ВидРасчета
	|			И ВозможныеЗаписиДляПерерасчета.ПериодДействия = ВозможныеЗаписиДляПерерасчетаВспом.ПериодДействия
	|			И (ВозможныеЗаписиДляПерерасчета.Результат = -ВозможныеЗаписиДляПерерасчетаВспом.Результат)
	|ГДЕ
	|	ВозможныеЗаписиДляПерерасчетаВспом.Сотрудник ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПериоды.Сотрудник,
	|	НачисленияПериоды.ПериодДействия,
	|	НачисленияПериоды.ПериодРегистрации
	|ПОМЕСТИТЬ ВТДляПолученияПериодовРегистрацииВремени
	|ИЗ
	|	ВТНачисленияПериоды КАК НачисленияПериоды
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленияЗаднимЧислом.Сотрудник,
	|	НАЧАЛОПЕРИОДА(НачисленияЗаднимЧислом.ПериодДействияНачало, МЕСЯЦ),
	|	НачисленияЗаднимЧислом.ПериодРегистрации
	|ИЗ
	|	ВТНачисленияЗаднимЧислом КАК НачисленияЗаднимЧислом";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачисленияЗаднимЧислом", НачисленияЗаднимЧислом);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	Запрос.Выполнить();
	
	// Необходимо получить актуальный период регистрации времени.
	УчетРабочегоВремени.СоздатьВТПериодыРегистрацииВремениСотрудников(МенеджерВременныхТаблиц, ПериодРегистрации, "ВТДляПолученияПериодовРегистрацииВремени");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Месяц
	|ПОМЕСТИТЬ ВТИндивидуальныеГрафики
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРегистрацииВремениСотрудников КАК ПериодыРегистрацииВремени
	|		ПО (ПериодыРегистрацииВремени.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы)
	|			И (ПериодыРегистрацииВремени.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц)
	|			И (ПериодыРегистрацииВремени.ПериодРегистрации = ГрафикиРаботыПоВидамВремени.ПериодРегистрации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПериоды.СторнируемыйДокумент,
	|	Начисления.ВидРасчета,
	|	Начисления.ДокументОснование,
	|	Начисления.ПериодДействия,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.БазовыйПериодНачало,
	|	Начисления.БазовыйПериодКонец,
	|	Начисления.ВидРасчета.ИспользованиеПериода КАК ИспользованиеПериода,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.ГоловнаяОрганизация,
	|	СУММА(Начисления.Результат) КАК Результат,
	|	СУММА(Начисления.РезультатВТомЧислеЗаСчетФБ) КАК РезультатВТомЧислеЗаСчетФБ,
	|	СУММА(Начисления.ОтработаноДней) КАК ОтработаноДней,
	|	СУММА(Начисления.ОтработаноЧасов) КАК ОтработаноЧасов,
	|	Начисления.ГрафикРаботы КАК ГрафикРаботыСторноЗаписей,
	|	ЕСТЬNULL(ИндивидуальныеГрафики.ГрафикРаботы, Начисления.ГрафикРаботы) КАК ГрафикРаботыЗаписейПерерасчета,
	|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНормаСторноЗаписей,
	|	ЕСТЬNULL(ИндивидуальныеГрафики.ГрафикРаботы, Начисления.ГрафикРаботыНорма) КАК ГрафикРаботыНормаЗаписейПерерасчета,
	|	Начисления.ВидУчетаВремени,
	|	Начисления.ВремяВЧасах,
	|	Начисления.Организация,
	|	Начисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремениСторноЗаписей,
	|	ПериодыРегистрацииВремени.ПериодРегистрации КАК ПериодРегистрацииВремениЗаписейПерерасчета,
	|	НачисленияПериоды.Регистратор КАК Регистратор,
	|	НачисленияПериоды.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Показатели.Показатель,
	|	ЗначенияПоказателейНачислений.Значение
	|ИЗ
	|	ВТНачисленияПериоды КАК НачисленияПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|		ПО (Начисления.ВидРасчета = НачисленияПериоды.ВидРасчета)
	|			И (Начисления.Результат <> 0)
	|			И (Начисления.Сотрудник = НачисленияПериоды.Сотрудник)
	|			И (Начисления.ПериодДействия = НачисленияПериоды.ПериодДействия)
	|			И (Начисления.ПериодРегистрации <= &ПериодРегистрации)
	|			И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРегистрацииВремениСотрудников КАК ПериодыРегистрацииВремени
	|		ПО (ПериодыРегистрацииВремени.Сотрудник = НачисленияПериоды.Сотрудник)
	|			И (ПериодыРегистрацииВремени.ПериодДействия = НачисленияПериоды.ПериодДействия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИндивидуальныеГрафики КАК ИндивидуальныеГрафики
	|		ПО (ИндивидуальныеГрафики.ГрафикРаботы = НачисленияПериоды.Сотрудник)
	|			И (ИндивидуальныеГрафики.Месяц = НачисленияПериоды.ПериодДействия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК Показатели
	|		ПО (Показатели.Ссылка = НачисленияПериоды.ВидРасчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
	|		ПО (ЗначенияПоказателейНачислений.Регистратор = НачисленияПериоды.Регистратор)
	|			И (Показатели.Показатель = ЗначенияПоказателейНачислений.Показатель)
	|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = НачисленияПериоды.ИдентификаторСтроки)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПериоды.СторнируемыйДокумент,
	|	Начисления.ВидРасчета,
	|	Начисления.ДокументОснование,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.ГоловнаяОрганизация,
	|	ИндивидуальныеГрафики.ГрафикРаботы,
	|	Начисления.ГрафикРаботы,
	|	Начисления.ВидУчетаВремени,
	|	Начисления.ВремяВЧасах,
	|	Начисления.ГрафикРаботыНорма,
	|	Начисления.Организация,
	|	Начисления.ПериодРегистрацииВремени,
	|	ПериодыРегистрацииВремени.ПериодРегистрации,
	|	НачисленияПериоды.Регистратор,
	|	НачисленияПериоды.ИдентификаторСтроки,
	|	Показатели.Показатель,
	|	ЗначенияПоказателейНачислений.Значение,
	|	Начисления.ПериодДействия,
	|	Начисления.ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец,
	|	Начисления.БазовыйПериодНачало,
	|	Начисления.БазовыйПериодКонец,
	|	Начисления.ВидРасчета.ИспользованиеПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета.РеквизитДопУпорядочивания,
	|	ВЫБОР
	|		КОГДА Начисления.ВидРасчета.ПериодДействияБазовый
	|			ТОГДА Начисления.ПериодДействияНачало
	|		ИНАЧЕ Начисления.БазовыйПериодНачало
	|	КОНЕЦ,
	|	НачисленияПериоды.Регистратор,
	|	НачисленияПериоды.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияПериоды.Сотрудник,
	|	НачисленияПериоды.ВидРасчета,
	|	НачисленияПериоды.ПериодДействия
	|ПОМЕСТИТЬ ВТРазличныеНачисленияПериоды
	|ИЗ
	|	ВТНачисленияПериоды КАК НачисленияПериоды";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияПерерасчета.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	Начисления.ВидРасчета,
	|	Начисления.ВидРасчета.ТребуетсяРасчетБазы КАК ТребуетсяРасчетБазы,
	|	Начисления.ДокументОснование,
	|	Начисления.ПериодДействия,
	|	Начисления.ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец,
	|	Начисления.БазовыйПериодНачало,
	|	Начисления.БазовыйПериодКонец,
	|	НачисленияПерерасчета.Сторно,
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА НачисленияПерерасчета.Сторно
	|			ТОГДА Начисления.ГрафикРаботы
	|		ИНАЧЕ ЕСТЬNULL(ИндивидуальныеГрафики.ГрафикРаботы, Начисления.ГрафикРаботы)
	|	КОНЕЦ КАК ГрафикРаботы,
	|	Начисления.ВидУчетаВремени,
	|	Начисления.ВремяВЧасах,
	|	ВЫБОР
	|		КОГДА НачисленияПерерасчета.Сторно
	|			ТОГДА Начисления.ГрафикРаботыНорма
	|		ИНАЧЕ ЕСТЬNULL(ИндивидуальныеГрафики.ГрафикРаботы, Начисления.ГрафикРаботыНорма)
	|	КОНЕЦ КАК ГрафикРаботыНорма,
	|	ВЫБОР
	|		КОГДА НачисленияПерерасчета.Сторно
	|			ТОГДА Начисления.ПериодРегистрацииВремени
	|		ИНАЧЕ ПериодыРегистрацииВремени.ПериодРегистрации
	|	КОНЕЦ КАК ПериодРегистрацииВремени,
	|	ВЫБОР
	|		КОГДА НачисленияПерерасчета.НулевоеСторно
	|				ИЛИ НЕ НачисленияПериоды.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НулевоеСторно,
	|	Начисления.Организация,
	|	Начисления.ФиксСтрока,
	|	Начисления.ФиксЗаполнение,
	|	Начисления.ФиксРасчетВремени,
	|	Начисления.ФиксРасчет,
	|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
	|	НачисленияПерерасчета.РегистраторПоказателей КАК Регистратор,
	|	НачисленияПерерасчета.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтроки,
	|	Показатели.Показатель,
	|	ЗначенияПоказателейНачислений.Значение
	|ИЗ
	|	ВТНачисленияЗаднимЧислом КАК НачисленияПерерасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРегистрацииВремениСотрудников КАК ПериодыРегистрацииВремени
	|		ПО (ПериодыРегистрацииВремени.Сотрудник = НачисленияПерерасчета.Сотрудник)
	|			И (ПериодыРегистрацииВремени.ПериодДействия = НАЧАЛОПЕРИОДА(НачисленияПерерасчета.ПериодДействияНачало, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИндивидуальныеГрафики КАК ИндивидуальныеГрафики
	|		ПО (ИндивидуальныеГрафики.ГрафикРаботы = НачисленияПерерасчета.Сотрудник)
	|			И (ИндивидуальныеГрафики.Месяц = НАЧАЛОПЕРИОДА(НачисленияПерерасчета.ПериодДействияНачало, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазличныеНачисленияПериоды КАК НачисленияПериоды
	|		ПО НачисленияПерерасчета.Сотрудник = НачисленияПериоды.Сотрудник
	|			И НачисленияПерерасчета.ВидРасчета = НачисленияПериоды.ВидРасчета
	|			И (НАЧАЛОПЕРИОДА(НачисленияПерерасчета.ПериодДействияНачало, МЕСЯЦ) = НачисленияПериоды.ПериодДействия)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Регистратор = НачисленияПерерасчета.Регистратор)
	|			И (Начисления.ИдентификаторСтроки = НачисленияПерерасчета.ИдентификаторСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК Показатели
	|		ПО (Показатели.Ссылка = НачисленияПерерасчета.ВидРасчета)
	|			И (НачисленияПериоды.Сотрудник ЕСТЬ NULL )
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
	|		ПО (ЗначенияПоказателейНачислений.Регистратор = НачисленияПерерасчета.РегистраторПоказателей)
	|			И (Показатели.Показатель = ЗначенияПоказателейНачислений.Показатель)
	|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = НачисленияПерерасчета.ИдентификаторСтрокиПоказателей)
	|			И (НачисленияПериоды.Сотрудник ЕСТЬ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ПериодРегистрации,
	|	Начисления.ВидРасчета.РеквизитДопУпорядочивания,
	|	Начисления.ДокументОснование,
	|	Начисления.Сторно УБЫВ,
	|	Начисления.ПериодДействияНачало,
	|	НачисленияПерерасчета.Регистратор,
	|	НачисленияПерерасчета.ИдентификаторСтроки,
	|	Показатели.НомерСтроки";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекущийРегистратор = Неопределено;
	ТекущийИдентификаторСтроки = Неопределено;
	ТекущийПериодДействияНачало = Неопределено;
	
	Если ДанныеПерерасчетов = Неопределено Тогда
		ДанныеПерерасчетов = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	КонецЕсли;
	
	ИдентификаторСтрокиВидаРасчета = 0;
	Если Показатели = Неопределено Тогда
		НомерПоказателя = 0;
		Пока Выборка.Следующий() Цикл
			Если ТекущийИдентификаторСтроки <> Выборка.ИдентификаторСтроки 
				Или ТекущийРегистратор <> Выборка.Регистратор 
				Или ТекущийПериодДействияНачало <> Выборка.ПериодДействияНачало Тогда
				НомерПоказателя = 1;
				НовыйПерерасчет = ДанныеПерерасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйПерерасчет, Выборка);
				НовыйПерерасчет.ДатаНачала = Выборка.ПериодДействияНачало;
				НовыйПерерасчет.ДатаОкончания = Выборка.ПериодДействияКонец;
				НовыйПерерасчет.Начисление = Выборка.ВидРасчета;
				Если Выборка.НулевоеСторно Тогда
					НовыйПерерасчет.Результат = 0;
					НовыйПерерасчет.ФиксСторно = Истина;
				КонецЕсли;
			КонецЕсли;
			НовыйПерерасчет["Показатель" + НомерПоказателя] = Выборка.Показатель;
			НовыйПерерасчет["Значение" + НомерПоказателя] = Выборка.Значение;
			
			НомерПоказателя = НомерПоказателя + 1;
			ТекущийИдентификаторСтроки = Выборка.ИдентификаторСтроки;
			ТекущийРегистратор = Выборка.Регистратор;
			ТекущийПериодДействияНачало = Выборка.ПериодДействияНачало;
			
		КонецЦикла;
	Иначе
		Пока Выборка.Следующий() Цикл
			Если ТекущийИдентификаторСтроки <> Выборка.ИдентификаторСтроки 
				Или ТекущийРегистратор <> Выборка.Регистратор 
				Или ТекущийПериодДействияНачало <> Выборка.ПериодДействияНачало Тогда
				НовыйПерерасчет = ДанныеПерерасчетов.Добавить();
				ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
				ЗаполнитьЗначенияСвойств(НовыйПерерасчет, Выборка);
				НовыйПерерасчет.ДатаНачала = Выборка.ПериодДействияНачало;
				НовыйПерерасчет.ДатаОкончания = Выборка.ПериодДействияКонец;
				НовыйПерерасчет.Начисление = Выборка.ВидРасчета;
				Если Выборка.НулевоеСторно Тогда
					НовыйПерерасчет.Результат = 0;
					НовыйПерерасчет.ФиксСторно = Истина;
				КонецЕсли;
				НовыйПерерасчет.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			КонецЕсли;
			НоваяСтрокаПоказателей = Показатели.Добавить();
			НоваяСтрокаПоказателей.Показатель = Выборка.Показатель;
			НоваяСтрокаПоказателей.Значение = Выборка.Значение;
			НоваяСтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			
			ТекущийИдентификаторСтроки = Выборка.ИдентификаторСтроки;
			ТекущийРегистратор = Выборка.Регистратор;
			ТекущийПериодДействияНачало = Выборка.ПериодДействияНачало;
			
		КонецЦикла;
	КонецЕсли;
	
	// Новые записи зависимых начислений.
	НовыеНачисления = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления();
	
	// Запоминаем строки, в которых затем потребуется скорректировать период базовых начислений.
	СтрокиБазовыйПериод = Новый Массив;
	
	ТекущийРегистратор = Неопределено;
	ТекущийИдентификаторСтроки = Неопределено;
	ТекущийПериодДействияНачало = Неопределено;
	
	Выборка = Результаты[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТекущийИдентификаторСтроки <> Выборка.ИдентификаторСтроки 
			Или ТекущийРегистратор <> Выборка.Регистратор 
			Или ТекущийПериодДействияНачало <> Выборка.ПериодДействияНачало Тогда
			
			ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
			
			// Сторнирование прежних зависимых начислений.
			НовыйПерерасчетСторно = ДанныеПерерасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПерерасчетСторно, Выборка);
			НовыйПерерасчетСторно.ДатаНачала = Выборка.ПериодДействияНачало;
			НовыйПерерасчетСторно.ДатаОкончания = Выборка.ПериодДействияКонец;
			НовыйПерерасчетСторно.НачалоБазовогоПериода = Выборка.БазовыйПериодНачало;
			НовыйПерерасчетСторно.ОкончаниеБазовогоПериода = Выборка.БазовыйПериодКонец;
			НовыйПерерасчетСторно.Начисление = Выборка.ВидРасчета;
			
			НовыйПерерасчетСторно.Результат = - Выборка.Результат;
			НовыйПерерасчетСторно.РезультатВТомЧислеЗаСчетФБ = - Выборка.РезультатВТомЧислеЗаСчетФБ;
			НовыйПерерасчетСторно.ОтработаноДней = - Выборка.ОтработаноДней;
			НовыйПерерасчетСторно.ОтработаноЧасов = - Выборка.ОтработаноЧасов;
			НовыйПерерасчетСторно.СторнируемыйДокумент = Выборка.СторнируемыйДокумент;
			НовыйПерерасчетСторно.ФиксРасчет = Истина;
			НовыйПерерасчетСторно.ФиксСторно = Истина;
			НовыйПерерасчетСторно.ПериодРегистрацииВремени = Выборка.ПериодРегистрацииВремениСторноЗаписей;
			НовыйПерерасчетСторно.ГрафикРаботы = Выборка.ГрафикРаботыСторноЗаписей;
			НовыйПерерасчетСторно.ГрафикРаботыНорма = Выборка.ГрафикРаботыНормаСторноЗаписей;
			НовыйПерерасчетСторно.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			
			НовыйПерерасчет = НовыеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПерерасчет, Выборка);
			НовыйПерерасчет.ДатаНачала = Выборка.ПериодДействияНачало;
			НовыйПерерасчет.ДатаОкончания = Выборка.ПериодДействияКонец;
			НовыйПерерасчет.НачалоБазовогоПериода = Выборка.БазовыйПериодНачало;
			НовыйПерерасчет.ОкончаниеБазовогоПериода = Выборка.БазовыйПериодКонец;
			НовыйПерерасчет.Начисление = Выборка.ВидРасчета;
			НовыйПерерасчет.ПериодРегистрацииВремени = Выборка.ПериодРегистрацииВремениЗаписейПерерасчета;
			НовыйПерерасчет.ГрафикРаботы = Выборка.ГрафикРаботыЗаписейПерерасчета;
			НовыйПерерасчет.ГрафикРаботыНорма = Выборка.ГрафикРаботыНормаЗаписейПерерасчета;
			НовыйПерерасчет.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			
			Если Выборка.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
				// Запоминаем эти строки, чтобы после получения сведений и показателей, заполнить даты начала и окончания базовым периодом.
				СтрокиБазовыйПериод.Добавить(НовыйПерерасчетСторно);
				СтрокиБазовыйПериод.Добавить(НовыйПерерасчет);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Показатели <> НеОпределено Тогда
			НоваяСтрокаПоказателей = Показатели.Добавить();
			НоваяСтрокаПоказателей.Показатель = Выборка.Показатель;
			НоваяСтрокаПоказателей.Значение = Выборка.Значение;
			НоваяСтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		КонецЕсли;
		
		ТекущийИдентификаторСтроки = Выборка.ИдентификаторСтроки;
		ТекущийРегистратор = Выборка.Регистратор;
		ТекущийПериодДействияНачало = Выборка.ПериодДействияНачало;
		
	КонецЦикла;
	
	// Заполняем сведения о сотрудниках в данных перерасчета.
	РасчетЗарплатыРасширенный.ЗаполнитьСведенияСотрудниковДляРасчета(ДанныеПерерасчетов, ПериодРегистрации, "Подразделение");
	
	// Получить значения показателей.
	РасчетЗарплатыРасширенный.ЗаполнитьСведенияСотрудниковДляРасчета(НовыеНачисления, ПериодРегистрации);
	РасчетЗарплатыРасширенный.ЗаполнитьЗначенияПоказателейНачислений(НовыеНачисления);
	
	// Заполняем даты базовым периодом.
	Для Каждого Строка Из СтрокиБазовыйПериод Цикл
		Строка.ДатаНачала = Строка.НачалоБазовогоПериода;
		Строка.ДатаОкончания = Строка.ОкончаниеБазовогоПериода;
	КонецЦикла;
	
	// Переносим строки в таблицу значений ДанныеПерерасчетов.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НовыеНачисления, ДанныеПерерасчетов);
	
	ЗарплатаКадрыРасширенный.ОбъединитьСтрокиОбразующиеНепрерывныеИнтервалы(ДанныеПерерасчетов, "ДатаНачала", "ДатаОкончания", "", "ИдентификаторСтрокиВидаРасчета");
	
	// Переносим строки в коллекцию НачисленияПерерасчет.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчетов, НачисленияПерерасчет);
	
КонецПроцедуры

Функция ВидРасчетаЯвляетсяВытесняющим(ВидРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачисленияВытесняющиеВидыРасчета.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК НачисленияВытесняющиеВидыРасчета
	|ГДЕ
	|	НачисленияВытесняющиеВидыРасчета.ВидРасчета = &ВидРасчета";
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет требуется ли выполнять проверку необходимости сторнирования.
Функция ТребуетсяПерерасчет(Регистратор, ПериодРегистрации, Начисления)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СотрудникиПериоды.Сотрудник,
	|	СотрудникиПериоды.ДатаНачала КАК ПериодДействия
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	&Начисления КАК СотрудникиПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
	|		ПО (СотрудникиПериоды.Сотрудник = Начисления.Сотрудник)
	|			И (СотрудникиПериоды.ПериодДействия = Начисления.ПериодДействия)
	|ГДЕ
	|	Начисления.Регистратор <> &Регистратор
	|	И Начисления.ПериодРегистрации < &ПериодРегистрации");
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	СотрудникиПериодыДействия = Начисления.Выгрузить(, "Сотрудник,ДатаНачала");
	Для Каждого Строка Из СотрудникиПериодыДействия Цикл
		Строка.ДатаНачала = НачалоМесяца(Строка.ДатаНачала);
	КонецЦикла;
	Запрос.УстановитьПараметр("Начисления", СотрудникиПериодыДействия);
	
	Возврат (Не Запрос.Выполнить().Пустой());
	
КонецФункции

// Переносит значения показателей, зарегистрированные "при" сторнируемом документе в таблицу Начисления.
//
// Параметры:
//	Начисления - таблица значений см. РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления.
//
Процедура ЗаполнитьЗначенияПоказателейПоСторнируемомуДокументу(Начисления)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Начисление,
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.ИдентификаторСтрокиВидаРасчета
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.ИдентификаторСтрокиВидаРасчета,
	|	Начисления.Начисление,
	|	Показатели.Показатель,
	|	ЗначенияПоказателейНачислений.Значение
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК Показатели
	|		ПО (Показатели.Ссылка = Начисления.Начисление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
	|		ПО (ЗначенияПоказателейНачислений.Регистратор = Начисления.СторнируемыйДокумент)
	|			И (Показатели.Показатель = ЗначенияПоказателейНачислений.Показатель)
	|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = Начисления.ИдентификаторСтрокиВидаРасчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.ИдентификаторСтрокиВидаРасчета,
	|	Показатели.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущийРегистратор = Неопределено;
	ТекущийИдентификаторСтроки = Неопределено;
	
	ОтборСтрок = Новый Структура("СторнируемыйДокумент, ИдентификаторСтрокиВидаРасчета");
	
	НомерПоказателя = 0;
	Пока Выборка.Следующий() Цикл
		Если ТекущийИдентификаторСтроки <> Выборка.ИдентификаторСтрокиВидаРасчета 
			Или ТекущийРегистратор <> Выборка.СторнируемыйДокумент Тогда
			НомерПоказателя = 1;
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
			НайденныеСтроки = Начисления.НайтиСтроки(ОтборСтрок);
		КонецЕсли;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока["Показатель" + НомерПоказателя] = Выборка.Показатель;
			НайденнаяСтрока["Значение" + НомерПоказателя] = Выборка.Значение;
		КонецЦикла;
		НомерПоказателя = НомерПоказателя + 1;
		ТекущийИдентификаторСтроки = Выборка.ИдентификаторСтрокиВидаРасчета;
		ТекущийРегистратор = Выборка.СторнируемыйДокумент;
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу с данными перерасчета на основании данных исправляемого документа.
// Параметры:
//		Организация, 
//		ПериодРегистрации, 
//		ИсправленныйДокумент, 
//		Начисления - таблица с начислениями.
//		НачисленияПерерасчет -  - таблица с показателями перерасчета.
//		РеквизитНачислениеДокумента - имя реквизита с видом расчета, если он задается в "шапке" документа. 
//					Не обязательный, по умолчанию - "".
//
// Процедура предполагает "стандартные" структуры данных формы Начисления и НачисленияПерерасчет.
// При формировании перерасчетов заполняются 
//		- сторнируемые начисления
//		- доначисления плановых начислений, если исправление документа 
//			приводит к "освобождению" ранее занятого периода
//		- "отменяющие" сторно-записи зависимых начислений
//		- новые записи зависимых начислений.
//
Процедура СформироватьДанныеПерерасчетаДляИсправленияПособий(ИсправленныйДокумент, ПериодРегистрации, Пособия, ПособияПерерасчет, НачисленияПерерасчет, ОписаниеТаблицыПособияПерерасчеты, Сотрудник = Неопределено) Экспорт
	
	ПособияПерерасчет.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	#Таблица КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ИсправленныйДокумент");
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ИсправленныйДокумент);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ИмяТаблицы + ".Пособия");
	
	Если Сотрудник <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Ссылка = &ИсправленныйДокумент",
			"Начисления.Ссылка = &ИсправленныйДокумент И Начисления.Сотрудник = &Сотрудник");
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДанныеПерерасчетов = РасчетЗарплатыРасширенный.ПустаяТаблицаПособия(Истина);
	
	// Формируем набор для получения дополнения и вычисления плановых 
	// начислений, которые потребуется доначислить.
	Пока Выборка.Следующий() Цикл
		// Заполнение начислений перерасчета для сторнирования прежних записей исправляемого документа.
		НоваяСтрокаПерерасчета = ДанныеПерерасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПерерасчета, Выборка);
		
		НоваяСтрокаПерерасчета.Результат 								= - Выборка.Результат;
		НоваяСтрокаПерерасчета.РезультатВТомЧислеЗаСчетФБ 				= - Выборка.РезультатВТомЧислеЗаСчетФБ;
		НоваяСтрокаПерерасчета.СуммаВсегоПоУходуЗаПервымРебенком 		= - Выборка.СуммаВсегоПоУходуЗаПервымРебенком;
		НоваяСтрокаПерерасчета.СуммаСверхНормПоУходуЗаПервымРебенком 	= - Выборка.СуммаСверхНормПоУходуЗаПервымРебенком;
		НоваяСтрокаПерерасчета.СуммаВсегоПоУходуЗаВторымРебенком 		= - Выборка.СуммаВсегоПоУходуЗаВторымРебенком;
		НоваяСтрокаПерерасчета.СуммаСверхНормПоУходуЗаВторымРебенком 	= - Выборка.СуммаСверхНормПоУходуЗаВторымРебенком;
		
		НоваяСтрокаПерерасчета.Начисление = Выборка.Начисление;
		
		НоваяСтрокаПерерасчета.ДатаНачала = Выборка.ДатаНачала;
		НоваяСтрокаПерерасчета.ДатаОкончания = Выборка.ДатаОкончания;
		НоваяСтрокаПерерасчета.ОплаченоДней = - Выборка.ОплаченоДней;
		НоваяСтрокаПерерасчета.ОплаченоЧасов = - Выборка.ОплаченоЧасов;
		
		НоваяСтрокаПерерасчета.Сторно = Истина;
		НоваяСтрокаПерерасчета.СторнируемыйДокумент = Выборка.Ссылка;
		НоваяСтрокаПерерасчета.ФиксРасчет = Истина;
		НоваяСтрокаПерерасчета.ФиксСторно = Истина;
		НоваяСтрокаПерерасчета.ФиксРасчетВремени = Истина;
		
	КонецЦикла;
	
	// Значения показателей заполняем по сторнируемому документу.
	ЗаполнитьЗначенияПоказателейПоСторнируемомуДокументу(ДанныеПерерасчетов);
	
	// Перенумеруем строки после(!) заполнения показателей. При заполнении показателей ИдентификаторСтрокиВидаРасчета
	// используется для связи со значениями показателей.
	ИдентификаторСтрокиВидаРасчета = ОписаниеТаблицыПособияПерерасчеты.НомерТаблицы * 1000000 + 1;
	Для Каждого Строка Из ДанныеПерерасчетов Цикл
		Строка.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
	КонецЦикла;
	
	// Переносим строки в коллекцию ПособияПерерасчет.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчетов, ПособияПерерасчет);
	
КонецПроцедуры

#КонецОбласти
