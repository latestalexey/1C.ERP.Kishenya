
#Область ПрограммныйИнтерфейс

// Возвращает запрос с временной таблицей амортизации
//
// Возвращаемое значение:
// 		Запрос - Объект запроса для получения пустой временной таблицы "втТаблицаАмортизации"
//
Функция ЗапросПустаяВременнаяТаблицаАмортизации() Экспорт
	
	Возврат Новый Запрос(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|	0 КАК ОбъектУчета,
	|	0 КАК Подразделение,
	|	0 КАК СуммаБУ,
	|	0 КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	0 КАК СуммаВР,
	|	0 КАК СтатьяРасходов,
	|	0 КАК АналитикаРасходов,
	|	0 КАК НалоговоеНазначениеКт,
	|	ЛОЖЬ КАК ЭтоАмортизационнаяПремия,
	|	ЛОЖЬ КАК ЭтоЦелевыеСредства,
	|	0 КАК ДокументАмортизационнойПремии,
	|	ЛОЖЬ КАК ПередаватьРасходыВДругуюОрганизацию,
	|	0 КАК ОрганизацияПолучательРасходов,
	|	0 КАК СчетПередачиРасходов
	|ПОМЕСТИТЬ втТаблицаАмортизации
	|ГДЕ
	|	ЛОЖЬ");
	
КонецФункции

// Выполняет проверку ошибок в заполнении способов отражения расходов по амортизации
//
// Параметры:
// 		ЭтотОбъект - ДокументОбъект.АмортизацияНМА - Объект документа амортизации
//
Процедура ПроверитьСпособыОтраженияРасходовНаПрочиеАктивы(ЭтотОбъект, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", КонецМесяца(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.Организация КАК Организация,
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив КАК ОбъектУчета
	|ПОМЕСТИТЬ втАктуальныеОбъекты
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(&Дата, Организация В (&Организация)) КАК СостоянияНМАОрганизацийСрезПоследних
	|ГДЕ
	|	СостоянияНМАОрганизацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Организация КАК Организация,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК ОбъектУчета
	|ПОМЕСТИТЬ втОбъектыКНачислению
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			(Организация, НематериальныйАктив) В
	|				(ВЫБРАТЬ
	|					Т.Организация,
	|					Т.ОбъектУчета
	|				ИЗ
	|					втАктуальныеОбъекты КАК Т)) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|ГДЕ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Организация,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	|			&Дата,
	|			(Организация, НематериальныйАктив) В
	|				(ВЫБРАТЬ
	|					Т.Организация,
	|					Т.ОбъектУчета
	|				ИЗ
	|					втАктуальныеОбъекты КАК Т)) КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|ГДЕ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК ОбъектУчета,
	|	ЕСТЬNULL(ИзменениеПараметровНМАОтражениеАмортизационныхРасходов.СтатьяРасходов, СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СтатьяРасходов) КАК СтатьяРасходов
	|ПОМЕСТИТЬ втСтатьиАмортизации
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			(Организация, НематериальныйАктив) В
	|				(ВЫБРАТЬ
	|					Т.Организация,
	|					Т.ОбъектУчета
	|				ИЗ
	|					втОбъектыКНачислению КАК Т)) КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеПараметровНМА.ОтражениеАмортизационныхРасходов КАК ИзменениеПараметровНМАОтражениеАмортизационныхРасходов
	|		ПО СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов = ИзменениеПараметровНМАОтражениеАмортизационныхРасходов.Ссылка
	|			И (СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовЗаданДокументом)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК СтатьяРасходов,
	|	втСтатьиАмортизации.ОбъектУчета КАК ОбъектУчета
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтатьиАмортизации КАК втСтатьиАмортизации
	|		ПО (втСтатьиАмортизации.СтатьяРасходов = СтатьиРасходов.Ссылка)
	|ГДЕ
	|	СтатьиРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)";
	#КонецОбласти
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СообщениеОбОшибке =
		НСтр("ru='В способе отражения расходов по амортизации для ""%1"" использована статья ""%2"" с не поддерживаемым вариантом распределения расходов ""На прочие активы""
        |Измените способ отражения расходов для данного актива с помощью документа ""Изменение параметров НМА""'
        |;uk='У способі відображення витрат по амортизації для ""%1"" використана стаття ""%2"" з варіантом розподілу витрат ""На інші активи"", що не підтримується 
        |Змінить спосіб відображення витрат для даного активу з допомогою документа ""Зміна параметрів НМА""'");
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			СообщениеОбОшибке,
			Выборка.ОбъектУчета,
			Выборка.СтатьяРасходов);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СообщениеОбОшибке,,,,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текст запроса временных таблиц для отражения амортизации в регламентированном учете
//
// Параметры:
// Параметры:
// 		ИмяДокумента - Строка - Строка имени метаданных
//
// Возвращаемое значение:
// 		Строка - Текст запроса
//

// Возвращает текст запроса временных таблиц для отражения амортизации в регламентированном учете
//
// Параметры:
// Параметры:
// 		ИмяДокумента - Строка - Строка имени метаданных
//
// Возвращаемое значение:
// 		Строка - Текст запроса
//
Функция ТекстЗапросаВТОтраженияВРеглУчетеНачисленнойАмортизацииУКР(ИмяДокумента) Экспорт
	
	ТекстВТ = ТекстЗапросаВТНачисленнаяАмортизацияУКР(ИмяДокумента)
		+ ТекстЗапросаВТОбъектыДокумента(ИмяДокумента)
		+ ТекстЗапросаВТСчетаОтражения()
		+ ТекстЗапросаВТПервоначальныеСведенияУКР()
		+ ТекстЗапросаВТМестонахожденияНМА();
	Возврат ТекстВТ;
	
КонецФункции

// Возвращает текст запроса временной таблицы остатков по счетам учета
//
// Параметры:
//
// Возвращаемое значение:
// 		Строка - Текст запроса
//
Функция ТекстЗапросаВТОтраженияВРеглУчетеОстаткиПоСчетамУКР() Экспорт
	
	Возврат
	"ВЫБРАТЬ
	|	втНачисленнаяАмортизация.ОбъектУчета КАК ОбъектУчета,
	|	ЛОЖЬ КАК ЭтоЦелевыеСредства,
	|	СУММА(ЕСТЬNULL(втНачисленнаяАмортизация.СуммаБУ, 0)) КАК СуммаБУ,
	|	СУММА(ЕСТЬNULL(втНачисленнаяАмортизация.СуммаНУ, 0)) КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	0 КАК СуммаВР
	|ПОМЕСТИТЬ втАмортизацияСгруппированная
	|ИЗ
	|	втНачисленнаяАмортизация КАК втНачисленнаяАмортизация
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленнаяАмортизация.ОбъектУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втСчетаОтражения.СчетУчета КАК Счет
	|ПОМЕСТИТЬ втВсеСчета
	|ИЗ
	|	втСчетаОтражения КАК втСчетаОтражения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втСчетаОтражения.СчетНачисленияАмортизации
	|ИЗ
	|	втСчетаОтражения КАК втСчетаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОбъектыДокумента.Организация КАК Организация,
	|	Местонахождение.Подразделение КАК Подразделение,
	|	ВЫБОР КОГДА &ИспользоватьУчетВнеоборотныхАктивовПоНаправлениямДеятельности
	|		ТОГДА ОбъектыУчета.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	втОбъектыДокумента.ОбъектУчета КАК ОбъектУчета
	|ПОМЕСТИТЬ втОбъектыСгруппированные
	|ИЗ
	|	втОбъектыДокумента КАК втОбъектыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМестонахожденияНМА КАК Местонахождение
	|		ПО втОбъектыДокумента.ОбъектУчета = Местонахождение.ОбъектУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НематериальныеАктивы КАК ОбъектыУчета
	|		ПО втОбъектыДокумента.ОбъектУчета = ОбъектыУчета.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОбъектУчета,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПР,
	|	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВР
	|ПОМЕСТИТЬ втХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаМесяцОкончание,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Т.Счет
	|				ИЗ
	|					втВсеСчета КАК Т),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			(Организация, Подразделение, НаправлениеДеятельности, Субконто1) В
	|				(ВЫБРАТЬ
	|					Т.Организация,
	|					Т.Подразделение,
	|					Т.НаправлениеДеятельности,
	|					Т.ОбъектУчета
	|				ИЗ
	|					втОбъектыСгруппированные КАК Т)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыСгруппированные.ОбъектУчета КАК ОбъектУчета,
	|	втОстаткиСчетАмортизации.НалоговоеНазначение КАК НалоговоеНазначениеСчетАмортизации,
	|	втОстаткиСчетУчета.НалоговоеНазначение 		 КАК НалоговоеНазначениеСчетУчета,
	|	ЕСТЬNULL(втОстаткиСчетУчета.СуммаБУ, 0) КАК ВосстановительнаяСтоимостьБУ,
	|	ЕСТЬNULL(втОстаткиСчетУчета.СуммаНУ, 0) КАК ВосстановительнаяСтоимостьНУ,
	|	0 КАК ВосстановительнаяСтоимостьПР,
	|	0 КАК ВосстановительнаяСтоимостьВР,
	|	
	|	ЕСТЬNULL(-втОстаткиСчетАмортизации.СуммаБУ, 0) + ЕСТЬNULL(втАмортизация.СуммаБУ, 0) КАК НакопленнаяАмортизацияБУ,
	|	ЕСТЬNULL(-втОстаткиСчетАмортизации.СуммаНУ, 0) + ЕСТЬNULL(втАмортизация.СуммаНУ, 0) КАК НакопленнаяАмортизацияНУ,
	|	0 КАК НакопленнаяАмортизацияПР,
	|	0 КАК НакопленнаяАмортизацияВР,
	|	
	|	ЕСТЬNULL(втОстаткиСчетУчета.СуммаБУ, 0) - (-ЕСТЬNULL(втОстаткиСчетАмортизации.СуммаБУ, 0) + ЕСТЬNULL(втАмортизация.СуммаБУ, 0)) КАК ОстаточнаяСтоимостьБУ,
	|	ЕСТЬNULL(втОстаткиСчетУчета.СуммаНУ, 0) - (-ЕСТЬNULL(втОстаткиСчетАмортизации.СуммаНУ, 0) + ЕСТЬNULL(втАмортизация.СуммаНУ, 0)) КАК ОстаточнаяСтоимостьНУ,
	|	0 КАК ОстаточнаяСтоимостьПР,
	|	0 КАК ОстаточнаяСтоимостьВР
	|	
	|	
	|ПОМЕСТИТЬ втОстаткиПоСчетам
	|ИЗ
	|	втОбъектыСгруппированные КАК втОбъектыСгруппированные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСчетаОтражения КАК втСчетаОтражения
	|		ПО втОбъектыСгруппированные.ОбъектУчета = втСчетаОтражения.ОбъектУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАмортизацияСгруппированная КАК втАмортизация
	|		ПО втОбъектыСгруппированные.ОбъектУчета = втАмортизация.ОбъектУчета
	|			И (НЕ втАмортизация.ЭтоЦелевыеСредства)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втХозрасчетныйОстатки КАК втОстаткиСчетУчета
	|		ПО втОбъектыСгруппированные.ОбъектУчета = втОстаткиСчетУчета.ОбъектУчета
	|			И (втСчетаОтражения.СчетУчета = втОстаткиСчетУчета.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втХозрасчетныйОстатки КАК втОстаткиСчетАмортизации
	|		ПО втОбъектыСгруппированные.ОбъектУчета = втОстаткиСчетАмортизации.ОбъектУчета
	|			И (втСчетаОтражения.СчетНачисленияАмортизации = втОстаткиСчетАмортизации.Счет)
	|			" + ";";
КонецФункции


Функция ТекстОтраженияВРеглУчетеНачисленнойАмортизацииУКР() Экспорт
	
	Разделитель = Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС;
	
	ТекстОтражения = ТекстОтраженияАмортизацияУКР()
	+ Разделитель + ТекстОтраженияАмортизацияНаПрочиеОперацииУКР()
	;
		
	Возврат ТекстОтражения;
	
КонецФункции

// Возвращает таблицу начисленной амортизации
//
// Параметры:
// 		ТаблицаОбъектовУчета - ТаблицаЗначений - Таблица объектов для начисления амортизации
// 		ТаблицаРеквизитов - ТаблицаЗначений - Таблица реквизитов документа
// 		Отказ - Булево - Признак удачного заверешения функции начисления амортизации
//
// Возвращаемое значение:
// 		ТаблицаЗначений - Таблица начисленных расходов по амортизации (формат представлен в функции УчетОСВызовСервера.ПустаяТаблицаЗначенийНачисленнойАмортизации)
//
Функция НачисленнаяАмортизация(ТаблицаОбъектовУчета, ТаблицаРеквизитов, Отказ) Экспорт
	
	Возврат ПодготовитьТаблицуАмортизацияНМА(ТаблицаОбъектовУчета, ТаблицаРеквизитов, Отказ);
	
КонецФункции

#Область БлокировкаПриОбновленииИБ

// Заполняет входящие данные рассчета и отражения амортизации, необходимые для проверки выполенных обновлений ИБ
//
// Параметры:
// 		ВходящиеДанные - Соответствие
// 			Ключ - Строка, ОбъектМетаданныхКонфигурации - входящие данные, используемые  операцией
// 			Значение - см. ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки, параметр Отбор
//
Процедура ЗаполнитьВходящиеДанныеАмортизации(ВходящиеДанные) Экспорт
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы);
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыБухгалтерии.Хозрасчетный);
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПервоначальныеСведенияНМАНалоговыйУчет);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет);
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ВыработкаНМА);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СостоянияНМАОрганизаций);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СчетаБухгалтерскогоУчетаНМА);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Функция ТекстЗапросаВТНачисленнаяАмортизацияУКР(ИмяДокумента)
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Временная таблица втНачисленнаяАмортизация
	|"+
	"ВЫБРАТЬ
	|	ТаблицаАмортизации.Ссылка.Организация КАК Организация,
	|	ТаблицаАмортизации.ОбъектУчета КАК ОбъектУчета,
	|	СправочникОбъектыУчета.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаАмортизации.Подразделение КАК Подразделение,
	|	ТаблицаАмортизации.СуммаБУ КАК СуммаБУ,
	|	ТаблицаАмортизации.СуммаНУ КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	0 КАК СуммаВР,
	|	ТаблицаАмортизации.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаАмортизации.АналитикаРасходов КАК АналитикаРасходов,
	|	ТаблицаАмортизации.НалоговоеНазначение КАК НалоговоеНазначениеКт
	|ПОМЕСТИТЬ втНачисленнаяАмортизация
	|ИЗ
	|	Документ.СписаниеНМА.НачисленнаяАмортизация КАК ТаблицаАмортизации
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НематериальныеАктивы КАК СправочникОбъектыУчета
	|		ПО ТаблицаАмортизации.ОбъектУчета = СправочникОбъектыУчета.Ссылка
	 
	
	|ГДЕ
	|	ТаблицаАмортизации.Ссылка = &Ссылка" + ";";
	
	Если ИмяДокумента = "АмортизацияНМА" Тогда
		
		ТекстВыборкиТаблицыПараметра = 
		"ВЫБРАТЬ
		|	ТаблицаАмортизации.Организация КАК Организация,
		|	ТаблицаАмортизации.ОбъектУчета КАК ОбъектУчета,
		|	СправочникОбъектыУчета.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТаблицаАмортизации.Подразделение КАК Подразделение,
		|	ТаблицаАмортизации.СуммаБУ КАК СуммаБУ,
		|	ТаблицаАмортизации.СуммаНУ КАК СуммаНУ,
		|	ТаблицаАмортизации.СуммаПР КАК СуммаПР,
		|	ТаблицаАмортизации.СуммаВР КАК СуммаВР,
		|	ТаблицаАмортизации.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаАмортизации.АналитикаРасходов КАК АналитикаРасходов,
		|	ТаблицаАмортизации.НалоговоеНазначениеКт КАК НалоговоеНазначениеКт
		|ИЗ
		|	втТаблицаАмортизации КАК ТаблицаАмортизации
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НематериальныеАктивы КАК СправочникОбъектыУчета
		|		ПО ТаблицаАмортизации.ОбъектУчета = СправочникОбъектыУчета.Ссылка";
		
		ТекстВыборкиТаблицыПараметра = Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС
			+ ТекстВыборкиТаблицыПараметра;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Ссылка", "&Ссылка" + ТекстВыборкиТаблицыПараметра);
		
	КонецЕсли;
	
	Возврат СтрЗаменить(ТекстЗапроса, "Документ.СписаниеНМА", "Документ."+ИмяДокумента);
	
КонецФункции

Функция ТекстЗапросаВТОбъектыДокумента(ИмяДокумента)
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Временная таблица втВсеОбъектыДокумента
	|"+
	"ВЫБРАТЬ
	|	ТаблицаАмортизации.Организация КАК Организация,
	|	ТаблицаАмортизации.ОбъектУчета КАК ОбъектУчета
	|ПОМЕСТИТЬ втВсеОбъектыДокумента
	|ИЗ
	|	втНачисленнаяАмортизация КАК ТаблицаАмортизации";
	
	Если ИмяДокумента <> "АмортизацияНМА" Тогда
		
		ТекстВыборкиТаблицыПараметра = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.НематериальныйАктив КАК ОбъектУчета
		|ИЗ
		|	Документ.СписаниеНМА КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + ТекстВыборкиТаблицыПараметра;
			
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ";";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.СписаниеНМА", "Документ."+ИмяДокумента);
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "
	|////////////////////////////////////////////////////////////////////////////////
	|// Временная таблица втОбъектыДокумента
	|"+
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втВсеОбъектыДокумента.Организация КАК Организация,
	|	втВсеОбъектыДокумента.ОбъектУчета КАК ОбъектУчета
	|ПОМЕСТИТЬ втОбъектыДокумента
	|ИЗ
	|	втВсеОбъектыДокумента КАК втВсеОбъектыДокумента" + ";";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТСчетаОтражения()
	
	Возврат "
	|////////////////////////////////////////////////////////////////////////////////
	|// Таблица ВТСчетаОтражения
	|"+
	"ВЫБРАТЬ
	|	втОбъектыДокумента.ОбъектУчета КАК ОбъектУчета,
	|	ЕСТЬNULL(СчетаОтражения.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
	|	ЕСТЬNULL(СчетаОтражения.СчетНачисленияАмортизации, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетНачисленияАмортизации,
	|	НЕ ПараметрыЦелевогоФинансирования.НематериальныйАктив ЕСТЬ NULL КАК ПрименениеЦелевогоФинансирования,
	|	ЕСТЬNULL(ПараметрыЦелевогоФинансирования.СтатьяДоходов, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)) КАК СтатьяДоходов,
	|	ЕСТЬNULL(ПараметрыЦелевогоФинансирования.АналитикаДоходов, НЕОПРЕДЕЛЕНО) КАК АналитикаДоходов,
	|	ЕСТЬNULL(ПараметрыЦелевогоФинансирования.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчетаЦФ,
	|	ЕСТЬNULL(ПараметрыЦелевогоФинансирования.СчетАмортизации, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетНачисленияАмортизацииЦФ
	|ПОМЕСТИТЬ втСчетаОтражения
	|ИЗ
	|	втОбъектыДокумента КАК втОбъектыДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&Дата,
	|			Регистратор <> &Ссылка
	|			И (Организация, НематериальныйАктив) В
	|				(ВЫБРАТЬ
	|					Т.Организация, Т.ОбъектУчета
	|				ИЗ
	|					втОбъектыДокумента КАК Т)) КАК СчетаОтражения
	|		ПО втОбъектыДокумента.ОбъектУчета = СчетаОтражения.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЦелевогоФинансированияНМА.СрезПоследних(
	|				&Дата,
	|				Регистратор <> &Ссылка
	|					И НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							Т.ОбъектУчета
	|						ИЗ
	|							втОбъектыДокумента КАК Т)) КАК ПараметрыЦелевогоФинансирования
	|		ПО втОбъектыДокумента.ОбъектУчета = ПараметрыЦелевогоФинансирования.НематериальныйАктив
	|			И (ПараметрыЦелевогоФинансирования.ПрименениеЦелевогоФинансирования)" + ";";
	
КонецФункции

Функция ТекстЗапросаВТМестонахожденияНМА()
	
	Возврат "
	|////////////////////////////////////////////////////////////////////////////////
	|// Таблица ВТМестонахожденияНМА
	|"+
	"ВЫБРАТЬ
	|	втОбъектыДокумента.ОбъектУчета КАК ОбъектУчета,
	|	ЕСТЬNULL(ДанныеСчетУчета.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение
	|ПОМЕСТИТЬ втМестонахожденияНМА
	|ИЗ
	|	втОбъектыДокумента КАК втОбъектыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаОтражения КАК втСчетаОтражения
	|		ПО втОбъектыДокумента.ОбъектУчета = втСчетаОтражения.ОбъектУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&Дата,
	|				Счет В
	|					(ВЫБРАТЬ
	|						Т.СчетУчета
	|					ИЗ
	|						втСчетаОтражения КАК Т),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|				(Организация, Субконто1) В
	|					(ВЫБРАТЬ
	|						Т.Организация,
	|						Т.ОбъектУчета
	|					ИЗ
	|						втОбъектыДокумента КАК Т)) КАК ДанныеСчетУчета
	|		ПО втОбъектыДокумента.ОбъектУчета = ДанныеСчетУчета.Субконто1
	|			И (втСчетаОтражения.СчетУчета = ДанныеСчетУчета.Счет)
	|" + ";";
	 	
КонецФункции

Функция ПоготовитьТаблицуНМАИзРеквизитаШапки(НематериальныйАктив) Экспорт
	
	ТаблицаНМА = Новый ТаблицаЗначений();
	ТаблицаНМА.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаНМА.Колонки.Добавить("НематериальныйАктив", Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	ТаблицаНма.Добавить().НематериальныйАктив = НематериальныйАктив;
	
	Возврат ТаблицаНМА;
	
КонецФункции //ПоготовитьТаблицуНМАИзРеквизитаШапкиДокумента


Функция ТекстОтраженияАмортизацияУКР()
	
	Возврат "
	|////////////////////////////////////////////////////////////////////////////////////////////////////
	|// Амортизация НМА (Дт 20, 25, 44 :: Кт СчетАмортизации)
	|ВЫБРАТЬ
	|	
	|	&Ссылка КАК Ссылка,
	|	&Дата КАК Период,
	|	Строки.Организация КАК Организация,
	|	"""" КАК ИдентификаторСтроки,
	|	
	|	Строки.СуммаБУ КАК Сумма,
	|	
	|	// Дт ///////////////////////////////////////////////////////////////////////////////////////////
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаДт,
	|	Строки.СтатьяРасходов КАК АналитикаУчетаДт,
	|	Строки.Подразделение КАК МестоУчетаДт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначениеДт,//НужноДобавитьНалоговоеНазначениеДт
	|	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Строки.СтатьяРасходов КАК СубконтоДт1,
	|	Строки.ОбъектУчета КАК СубконтоДт2,
	|	Строки.АналитикаРасходов КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	Строки.СуммаНУ КАК СуммаНУДт,
	|	Строки.СуммаПР КАК СуммаПРДт,
	|	Строки.СуммаВР КАК СуммаВРДт,
	|	
	|	// Кт ///////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	Местонахождения.Подразделение КАК ПодразделениеКт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|	Строки.НалоговоеНазначениеКт КАК НалоговоеНазначениеКт,
	|
	|		СчетаОтражения.СчетНачисленияАмортизации  КАК СчетКт,
	|	Строки.ОбъектУчета КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	Строки.СуммаНУ КАК СуммаНУКт,
	|	Строки.СуммаПР КАК СуммаПРКт,
	|	Строки.СуммаВР КАК СуммаВРКт,
	|	
	|	/////////////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	""Начисление амортизации"" КАК Содержание
	|ИЗ
	|	втНачисленнаяАмортизация КАК Строки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСчетаОтражения КАК СчетаОтражения
	|		ПО Строки.ОбъектУчета = СчетаОтражения.ОбъектУчета
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ втМестонахожденияНМА КАК Местонахождения
	|		ПО Строки.ОбъектУчета = Местонахождения.ОбъектУчета
	|	
	|ГДЕ
	|	Строки.СтатьяРасходов.ВариантРаспределенияРасходов <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|";
	
КонецФункции



Функция ТекстОтраженияАмортизацияНаПрочиеОперацииУКР()
	
	Возврат "
	|////////////////////////////////////////////////////////////////////////////////////////////////////
	|// Амортизация НМА (Дт 20, 25, 44 :: Кт СчетАмортизации)
	|ВЫБРАТЬ
	|	
	|	&Ссылка КАК Ссылка,
	|	&Дата КАК Период,
	|	Строки.Организация КАК Организация,
	|	"""" КАК ИдентификаторСтроки,
	|	
	|	Строки.СуммаБУ КАК Сумма,
	|	
	|	// Дт ///////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеОперации) КАК ВидСчетаДт,
	|	Строки.СтатьяРасходов КАК АналитикаУчетаДт,
	|	Строки.Подразделение КАК МестоУчетаДт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначениеДт,//НужноДобавитьНалоговоеНазначениеДт
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	Строки.СуммаБУ КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	// Кт ///////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	Местонахождения.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначениеКт,//НужноДобавитьНалоговоеНазначениеКт
	|
	|	СчетаОтражения.СчетНачисленияАмортизации КАК СчетКт,
	|	Строки.ОбъектУчета КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	Строки.СуммаНУ КАК СуммаНУКт,
	|	Строки.СуммаПР КАК СуммаПРКт,
	|	Строки.СуммаВР КАК СуммаВРКт,
	|	
	|	/////////////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	""Начисление амортизации"" КАК Содержание
	|ИЗ
	|	втНачисленнаяАмортизация КАК Строки
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьяПрочиеОперации
	|	ПО Строки.СтатьяРасходов = СтатьяПрочиеОперации.Ссылка
	|		И СтатьяПрочиеОперации.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСчетаОтражения КАК СчетаОтражения
	|		ПО Строки.ОбъектУчета = СчетаОтражения.ОбъектУчета
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ втМестонахожденияНМА КАК Местонахождения
	|		ПО Строки.ОбъектУчета = Местонахождения.ОбъектУчета
	|	
	|ГДЕ
	|	Строки.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|";
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ, ОТРАЖАЮЩИЕ ХОЗЯЙСТВЕННЫЕ ОПЕРАЦИИ В ПОДСИСТЕМЕ НМА

// АМОРТИЗАЦИЯ НМА

Функция ПолучитьПустуюТаблицуАмортизацииНМА()
	
	ТаблицаАмортизации = Новый ТаблицаЗначений();
	
	ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетНачисленияАмортизации", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииБУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииНУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииВР", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииПР", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаАмортизации.Колонки.Добавить("НомерСтроки", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(5, 0));
	ТаблицаАмортизации.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	ТаблицаАмортизации.Колонки.Добавить("АналитикаРасходов", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
	ТаблицаАмортизации.Колонки.Добавить("НалоговоеНазначениеКт",  Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаАмортизации.Колонки.Добавить("НалоговоеНазначение",    Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаАмортизации.Колонки.Добавить("СпособОтраженияРасходовЗаданДокументом", Новый ОписаниеТипов("Булево"));
	ТаблицаАмортизации.Колонки.Добавить("СпособОтраженияРасходов", Новый ОписаниеТипов("ДокументСсылка.ИзменениеПараметровНМА"));
	ТаблицаАмортизации.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	
	ТаблицаАмортизации.Колонки.Добавить("ПередаватьРасходыВДругуюОрганизацию", Новый ОписаниеТипов("Булево"));
	ТаблицаАмортизации.Колонки.Добавить("ОрганизацияПолучательРасходов", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаАмортизации.Колонки.Добавить("СчетПередачиРасходов", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ТаблицаАмортизации.Колонки.Добавить("НачислятьИзнос", Новый ОписаниеТипов("Булево"));
	
	ТаблицаАмортизации.Колонки.Добавить("ЭтоЦелевыеСредства", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаАмортизации;
	
КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияНМАПринятыКУчетуНМАВсе()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ СписокНМА
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СостоянияНМАОрганизацийСрезПоследних
	|ГДЕ
	|	СостоянияНМАОрганизацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМА.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&КонецПериода, Организация = &Организация) КАК НачислениеАмортизации
	|		ПО (НачислениеАмортизации.НематериальныйАктив = СостоянияНМА.НематериальныйАктив)
	|			И (НачислениеАмортизации.НачислятьАмортизацию)
	|			И (СостоянияНМА.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету))
	|			И (СостоянияНМА.Период МЕЖДУ &НачалоПериодаДата И &КонецПериода)
	|ГДЕ
	|	НачислениеАмортизации.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции)
	|	И СостоянияНМА.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияНМАПринятыКУчетуНМАПоТаблице()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ СписокНМА
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|			&НачалоПериода,
	|			НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)
	|				И Организация = &Организация) КАК СостоянияНМАОрганизацийСрезПоследних
	|ГДЕ
	|	СостоянияНМАОрганизацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМА.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			&КонецПериода,
	|			НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)
	|					И Организация = &Организация) КАК НачислениеАмортизации
	|		ПО (НачислениеАмортизации.НематериальныйАктив = СостоянияНМА.НематериальныйАктив)
	|			И (НачислениеАмортизации.НачислятьАмортизацию)
	|			И (СостоянияНМА.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету))
	|			И (СостоянияНМА.Период МЕЖДУ &НачалоПериодаДата И &КонецПериода)
	|ГДЕ
	|	НачислениеАмортизации.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции)
	|	И СостоянияНМА.Организация = &Организация
	|";
	

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаСчетаУчета()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СтатьяРасходов КАК СтатьяРасходов,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.АналитикаРасходов КАК АналитикаРасходов,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовЗаданДокументом КАК СпособОтраженияРасходовЗаданДокументом,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов КАК СпособОтраженияРасходов
	|ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И Регистратор <> &Регистратор
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СтатьяРасходов КАК СтатьяРасходов,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.АналитикаРасходов КАК АналитикаРасходов,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовЗаданДокументом КАК СпособОтраженияРасходовЗаданДокументом,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов КАК СпособОтраженияРасходов
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Регистратор <> &Регистратор
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив
	|					ИЗ
	|						СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу
	|							КАК СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу)) КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив
	|					ИЗ
	|						СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу
	|						 КАК СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу)) КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК Счет
	|ПОМЕСТИТЬ втВсеСчета
	|ИЗ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации
	|ИЗ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК Счет
	|ПОМЕСТИТЬ втВсеСчетаУчетаСтоимости
	|ИЗ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации КАК Счет
	|ПОМЕСТИТЬ втВсеСчетаНакопленнойАмортизации
	|ИЗ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|";
		
КонецФункции

Функция ПолучитьТекстЗапросаНачисленнаяАмортизацияЗаПериод()
	
	Возврат
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета КАК НМА
	|ПОМЕСТИТЬ втАктивыВДокументахЗаПериод
	|ИЗ
	|	Документ.АмортизацияНМА КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АмортизацияНМА.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета КАК НМА
	|ИЗ
	|	Документ.ПереоценкаНМА КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаНМА.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета
	|ИЗ
	|	Документ.ПодготовкаКПередачеНМА КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодготовкаКПередачеНМА.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета
	|ИЗ
	|	Документ.СписаниеНМА КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеНМА.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета
	|ИЗ
	|	Документ.МодернизацияНМА КАК Документ 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МодернизацияНМА.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета
	|ИЗ
	|	Документ.ПеремещениеНМА КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеНМА.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета
	|ИЗ
	|	Документ.ИзменениеПараметровНМА КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеПараметровНМА.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериодаДата,
	|			&КонецПериода,
	|			Регистратор <> &Регистратор
	|				И Регистратор ССЫЛКА Документ.АмортизацияНМА
	|				И СчетКт В
	|					(ВЫБРАТЬ
	|						Т.СчетНачисленияАмортизации
	|					ИЗ
	|						СчетаБухгалтерскогоУчетаНМАСрезПоследних КАК Т),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втАктивыВДокументахЗаПериод.НМА
	|ПОМЕСТИТЬ втАмортизированныеАктивы
	|ИЗ
	|	втАктивыВДокументахЗаПериод КАК втАктивыВДокументахЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втАктивыВДокументахЗаПериод";
	
КонецФункции

Функция ПолучитьТекстЗапросаСпособовОтраженияРасходов()
	
	Возврат
	"ВЫБРАТЬ
	|	ИзменениеПараметровНМА.Ссылка КАК СпособОтраженияРасходов,
	|	ИзменениеПараметровНМА.ОтражениеАмортизационныхРасходов.(
	|		НомерСтроки,
	|		Подразделение,
	|		СтатьяРасходов,
	|		АналитикаРасходов,
	|		Коэффициент
	|	)
	|ИЗ
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних КАК СпособыОтраженияРасходовБУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеПараметровНМА КАК ИзменениеПараметровНМА
	|		ПО СпособыОтраженияРасходовБУ.СпособОтраженияРасходов = ИзменениеПараметровНМА.Ссылка
	|ГДЕ
	|	СпособыОтраженияРасходовБУ.СпособОтраженияРасходовЗаданДокументом";
	
КонецФункции

Функция ТекстЗапросаВТПервоначальныеСведенияУКР()
	
	Возврат "
	|////////////////////////////////////////////////////////////////////////////////
	|// Таблица ВТПервоначальныеСведения
	|"+
	"ВЫБРАТЬ
	|	втОбъектыДокумента.ОбъектУчета КАК ОбъектУчета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СчетаБухгалтерскогоУчетаНМА.СчетНачисленияАмортизации, НЕОПРЕДЕЛЕНО) В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьСчетАмортизации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПервоначальныеСведенияБУ.НачислятьАмортизацию, ЛОЖЬ) 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачислятьИзнос,
	|	0 КАК МножительПримененияИзноса
	|ПОМЕСТИТЬ втПервоначальныеСведения
	|ИЗ
	|	втОбъектыДокумента КАК втОбъектыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|				&Дата,
	|				Регистратор <> &Ссылка
	|					И (Организация, НематериальныйАктив) В
	|						(ВЫБРАТЬ
	|							Т.Организация,
	|							Т.ОбъектУчета
	|						ИЗ
	|							втОбъектыДокумента КАК Т)) КАК ПервоначальныеСведенияБУ
	|		ПО втОбъектыДокумента.ОбъектУчета = ПервоначальныеСведенияБУ.НематериальныйАктив 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|				&Дата,
	|				Регистратор <> &Ссылка
	|				И (Организация, НематериальныйАктив) В
	|						(ВЫБРАТЬ
	|							Т.Организация,
	|							Т.ОбъектУчета
	|						ИЗ
	|							втОбъектыДокумента КАК Т)) КАК СчетаБухгалтерскогоУчетаНМА
	|		ПО втОбъектыДокумента.ОбъектУчета = СчетаБухгалтерскогоУчетаНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	|				&Дата,
	|				Регистратор <> &Ссылка
	|					И (Организация, НематериальныйАктив) В
	|						(ВЫБРАТЬ
	|							Т.Организация,
	|							Т.ОбъектУчета
	|						ИЗ
	|							втОбъектыДокумента КАК Т)) КАК ПервоначальныеСведенияНУ
	|		ПО втОбъектыДокумента.ОбъектУчета = ПервоначальныеСведенияНУ.НематериальныйАктив" + ";";
КонецФункции

Процедура СообщитьОбОшибкеПриНачисленииАмортизации(Выборка, ТекстСообщения, РегОперация, Отказ, Ссылка = Неопределено)
	
	ШаблонСообщения = НСтр("ru='%1 для нематериального актива %2 (%3).';uk='%1 для нематеріального активу %2 (%3).'");
	ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстСообщения, 
		Выборка.НематериальныйАктивПредставление, Выборка.Код);
		
	Если Ссылка = Неопределено Тогда
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС
			+ НСтр("ru='Укажите эти данные в документах принятия к учету или изменения параметров начисления амортизации.';uk='Вкажіть ці дані в документах прийняття до обліку або зміни параметрів нарахування амортизації.'");
		СсылкаСообщения = "e1cib/navigationpoint/ВнеоборотныеАктивы";
	ИначеЕсли Ссылка = Ложь Тогда
		СсылкаСообщения = Неопределено;
	Иначе
		СсылкаСообщения = Ссылка;
	КонецЕсли;
	
	БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстСообщенияОбОшибке, СсылкаСообщения, Отказ, РегОперация);
	
КонецПроцедуры // СообщитьОбОшибкеПриНачисленииАмортизации()

Функция ПодготовитьТаблицуАмортизацияНМА(ТаблицаНМА, ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыАмортизацияНМА(ТаблицаНМА, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаАмортизации = УчетОСВызовСервера.ПустаяТаблицаЗначенийНачисленнойАмортизации();
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Реквизиты.ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериодаДата", НачалоМесяца(Реквизиты.ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", Новый Граница(НачалоМесяца(Реквизиты.ДатаРасчета), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Реквизиты.ДатаРасчета));
	Запрос.УстановитьПараметр("Период", Реквизиты.ДатаРасчета);
	Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	
	// Получим список нематериальных активов для расчета амортизации
	Если Параметры.ТаблицаНМА.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаНМА", Параметры.ТаблицаНМА);
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияНМАПринятыКУчетуНМАПоТаблице();
	Иначе
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияНМАПринятыКУчетуНМАВсе();
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = ПолучитьТекстЗапросаСчетаУчета();
	Запрос.Выполнить();
	
	Запрос.Текст = ПолучитьТекстЗапросаНачисленнаяАмортизацияЗаПериод();
	Запрос.Выполнить();
	
	// Заполнение соответствия способов отражения расходов
	СоответствиеСпособовОтражения = Новый Соответствие;
	Запрос.Текст = ПолучитьТекстЗапросаСпособовОтраженияРасходов();
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеСпособовОтражения.Вставить(Выборка.СпособОтраженияРасходов, Выборка.ОтражениеАмортизационныхРасходов.Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	  
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Период КАК Период,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизацию
	|ПОМЕСТИТЬ ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|ГДЕ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ 
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Период КАК Период,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизацию
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив
	|					ИЗ
	|						СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу 
	|							КАК СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу)) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|ГДЕ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(ПервоначальныеСведенияНМАБухгалтерскийУчет.Период) КАК ДатаПервойАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ втДатаПервойАмортизации
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет КАК ПервоначальныеСведенияНМАБухгалтерскийУчет
	|ГДЕ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.Организация = &Организация
	|	И ПервоначальныеСведенияНМАБухгалтерскийУчет.НачислятьАмортизацию
	|
	|СГРУППИРОВАТЬ ПО
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Период КАК Период,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СпособНачисленияАмортизацииНУ КАК СпособНачисленияАмортизацииНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизацию
	|ПОМЕСТИТЬ ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|ГДЕ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК НематериальныйАктив,
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокДт КАК СуммаНУНачальныйОстатокДт,
	|	0 КАК СуммаПРНачальныйОстатокДт,
	|	0 КАК СуммаВРНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокКт КАК СуммаНУНачальныйОстатокКт,
	|	0 КАК СуммаПРНачальныйОстатокКт,
	|	0 КАК СуммаВРНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокДт КАК СуммаНУКонечныйОстатокДт,
	|	0 КАК СуммаПРКонечныйОстатокДт,
	|	0 КАК СуммаВРКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокКт КАК СуммаНУКонечныйОстатокКт,
	|	0 КАК СуммаПРКонечныйОстатокКт,
	|	0 КАК СуммаВРКонечныйОстатокКт
	|ПОМЕСТИТЬ ХозрасчетныйОстаткиИОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.Счет
	|				ИЗ
	|					втВсеСчета КАК Т),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И Подразделение В (&Подразделение)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							СписокНМА.НематериальныйАктив
	|						ИЗ
	|							СписокНМА КАК СписокНМА)) КАК ХозрасчетныйОстаткиИОбороты
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ 
	|
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК НематериальныйАктив,
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение,
	|
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокДт КАК СуммаНУНачальныйОстатокДт,
	|
	|	0 КАК СуммаПРНачальныйОстатокДт,
	|	0 КАК СуммаВРНачальныйОстатокДт,
	|
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокКт КАК СуммаНУНачальныйОстатокКт,
	|
	|	0 КАК СуммаПРНачальныйОстатокКт,
	|	0 КАК СуммаВРНачальныйОстатокКт,
	|
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокДт КАК СуммаНУКонечныйОстатокДт,
	|
	|	0 КАК СуммаПРКонечныйОстатокДт,
	|	0 КАК СуммаВРКонечныйОстатокДт,
	| 
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокКт КАК СуммаНУКонечныйОстатокКт,
	|
	|	0 КАК СуммаПРКонечныйОстатокКт,
	|	0 КАК СуммаВРКонечныйОстатокКт
   	|
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&КонецПериода,
	|			&КонецПериода,
	|			Период,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.Счет
	|				ИЗ
	|					втВсеСчета КАК Т),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И Подразделение В (&Подразделение)
	
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив
	|						ИЗ
	|							СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу 
	|								КАК СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу)) КАК ХозрасчетныйОстаткиИОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК НематериальныйАктив,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК СуммаНУОборотКт,
	|	0 КАК СуммаПРОборотКт,
	|	0 КАК СуммаВРОборотКт
	|ПОМЕСТИТЬ ХозрасчетныйОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.Счет
	|				ИЗ
	|					втВсеСчетаНакопленнойАмортизации КАК Т),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И Подразделение В (&Подразделение)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							СписокНМА.НематериальныйАктив
	|						ИЗ
	|							СписокНМА КАК СписокНМА),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК НематериальныйАктив,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК СуммаНУОборотКт,
	|
	|	0 КАК СуммаПРОборотКт,
	|	0 КАК СуммаВРОборотКт
	| 
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&КонецПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.Счет
	|				ИЗ
	|					втВсеСчетаНакопленнойАмортизации КАК Т),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И Подразделение В (&Подразделение)
	 
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив
	|						ИЗ
	|							СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу 
	|								КАК СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК НематериальныйАктив,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СтоимостьНаНачалоГода
	|ПОМЕСТИТЬ СтоимостьНМАНаНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоГода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.Счет
	|				ИЗ
	|					втВсеСчета КАК Т),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаНМАОбороты.НематериальныйАктив,
	|	ВыработкаНМАОбороты.КоличествоОборот
	|ПОМЕСТИТЬ ВыработкаНМАОбороты
	|ИЗ
	|	РегистрНакопления.ВыработкаНМА.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК ВыработкаНМАОбороты
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыработкаНМАОбороты.НематериальныйАктив,
	|	ВыработкаНМАОбороты.КоличествоОборот
	|
	|ИЗ
	|	РегистрНакопления.ВыработкаНМА.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив
	|					ИЗ
	|						СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу
	|		 					КАК СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу)) КАК ВыработкаНМАОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМАОрганизаций.НематериальныйАктив,
	|	МАКСИМУМ(СостоянияНМАОрганизаций.Период) КАК ДатаВводаВЭксплуатацию
	|ПОМЕСТИТЬ СостоянияНМАОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|ГДЕ
	|	СостоянияНМАОрганизаций.Организация = &Организация
	|	И СостоянияНМАОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияНМАОрганизаций.НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокНМА.НематериальныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(СписокНМА.НематериальныйАктив) КАК НематериальныйАктивПредставление,
	|	СписокНМА.НематериальныйАктив.Код КАК Код,
	|	СтоимостьНМА.Подразделение КАК Подразделение,
	|	
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНачальныйОстатокДт, 0) 	КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНУНачальныйОстатокДт, 0) КАК СтоимостьНУНачальныйОстаток,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НалоговоеНазначение КАК НалоговоеНазначениеКт,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаНачальныйОстатокКт, 0)   КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаНУНачальныйОстатокКт, 0) КАК АмортизацияНУНачальныйОстаток,
	|	
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0)   КАК АмортизацияОборот,
	|	
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотКт, 0) КАК АмортизацияНУОборот,
	|	
	|	
	|	ЕСТЬNULL(ВыработкаНМАОбороты.КоличествоОборот, 0) КАК Количество,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Период КАК Период,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизациюБУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость,0) КАК ЛиквидационнаяСтоимость,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СтатьяРасходов КАК СтатьяРасходов,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.АналитикаРасходов КАК АналитикаРасходов,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовЗаданДокументом КАК СпособОтраженияРасходовЗаданДокументом,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	ЕСТЬNULL(СтоимостьНМАНаНачалоГода.СтоимостьНаНачалоГода, 0) КАК СтоимостьНаНачалоГода,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Период КАК ДатаПринятияКУчету,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизациюНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СпособНачисленияАмортизацииНУ КАК СпособНачисленияАмортизацииНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ЕСТЬNULL(втДатаПервойАмортизации.ДатаПервойАмортизации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервойАмортизации,
	|	
	|	
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНачальныйОстатокДт, 0) - ЕСТЬNULL(АмортизацияНМА.СуммаНачальныйОстатокКт, 0) КАК ОстаточнаяСтоимостьБУ,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНУНачальныйОстатокДт, 0) - ЕСТЬNULL(АмортизацияНМА.СуммаНУНачальныйОстатокКт, 0) КАК ОстаточнаяСтоимостьНУ,
	|	ВЫБОР 
	|		КОГДА втАмортизированныеАктивы.НМА ЕСТЬ NULL ТОГДА 
	|			ЛОЖЬ 
	|		ИНАЧЕ 
	|			ИСТИНА КОНЕЦ КАК ЕстьНачислениеАмортизацииЗаПериод
	|ИЗ
	|	СписокНМА КАК СписокНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаНМАСрезПоследних КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК СтоимостьНМА
	|		ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = СтоимостьНМА.НематериальныйАктив
	|			И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета = СтоимостьНМА.Счет
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК АмортизацияНМА
	|		ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = АмортизацияНМА.НематериальныйАктив
	|			И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации = АмортизацияНМА.Счет
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|		ПО СписокНМА.НематериальныйАктив = ХозрасчетныйОбороты.НематериальныйАктив
	|			И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации = ХозрасчетныйОбороты.Счет
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМАНаНачалоГода КАК СтоимостьНМАНаНачалоГода
	|		ПО СписокНМА.НематериальныйАктив = СтоимостьНМАНаНачалоГода.НематериальныйАктив
	|			И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета = СтоимостьНМАНаНачалоГода.Счет
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаНМАОбороты КАК ВыработкаНМАОбороты
	|		ПО СписокНМА.НематериальныйАктив = ВыработкаНМАОбороты.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|		ПО СписокНМА.НематериальныйАктив = СостоянияНМАОрганизаций.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАмортизированныеАктивы КАК втАмортизированныеАктивы
	|		ПО СписокНМА.НематериальныйАктив = втАмортизированныеАктивы.НМА
	|ЛЕВОЕ СОЕДИНЕНИЕ втДатаПервойАмортизации КАК втДатаПервойАмортизации
	|		ПО СписокНМА.НематериальныйАктив = втДатаПервойАмортизации.НематериальныйАктив
	|ГДЕ
	|	(НЕ(ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) = ЛОЖЬ
	|				И ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) = ЛОЖЬ))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив) КАК НематериальныйАктивПредставление,
	
	|	СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив.Код КАК Код,
	
	|	СтоимостьНМА.Подразделение КАК Подразделение,
	|	
	
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНачальныйОстатокДт, 0) 	КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНУНачальныйОстатокДт, 0) КАК СтоимостьНУНачальныйОстаток,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НалоговоеНазначение КАК НалоговоеНазначениеКт,
	
	|	ЕСТЬNULL(АмортизацияНМА.СуммаНачальныйОстатокКт, 0)   КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаНУНачальныйОстатокКт, 0) КАК АмортизацияНУНачальныйОстаток,
	 
	|	
	
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0)   КАК АмортизацияОборот,
	|	
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотКт, 0) КАК АмортизацияНУОборот,
	|	
	
	|	
	|	ЕСТЬNULL(ВыработкаНМАОбороты.КоличествоОборот, 0) КАК Количество,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	 
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Период КАК Период,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизациюБУ,
	
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость,0) КАК ЛиквидационнаяСтоимость,
	
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СтатьяРасходов КАК СтатьяРасходов,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.АналитикаРасходов КАК АналитикаРасходов,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовЗаданДокументом КАК СпособОтраженияРасходовЗаданДокументом,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	ЕСТЬNULL(СтоимостьНМАНаНачалоГода.СтоимостьНаНачалоГода, 0) КАК СтоимостьНаНачалоГода,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Период КАК ДатаПринятияКУчету,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования,
	|	ЛОЖЬ КАК НачислятьАмортизациюНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СпособНачисленияАмортизацииНУ КАК СпособНачисленияАмортизацииНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ЕСТЬNULL(втДатаПервойАмортизации.ДатаПервойАмортизации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПервойАмортизации,
	|	
	 
	|	
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНачальныйОстатокДт, 0) - ЕСТЬNULL(АмортизацияНМА.СуммаНачальныйОстатокКт, 0) КАК ОстаточнаяСтоимостьБУ,
	 
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНУНачальныйОстатокДт, 0) - ЕСТЬNULL(АмортизацияНМА.СуммаНУНачальныйОстатокКт, 0) КАК ОстаточнаяСтоимостьНУ,
	 
	|	ВЫБОР 
	|		КОГДА втАмортизированныеАктивы.НМА ЕСТЬ NULL ТОГДА 
	|			ЛОЖЬ 
	|		ИНАЧЕ 
	|			ИСТИНА КОНЕЦ КАК ЕстьНачислениеАмортизацииЗаПериод
	
	|ИЗ
	|	СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу КАК СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|		ПО СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|		ПО СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаНМАСрезПоследних КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|		ПО СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив = СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив
	
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК СтоимостьНМА
	|		ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = СтоимостьНМА.НематериальныйАктив
	|			И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета = СтоимостьНМА.Счет
	
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК АмортизацияНМА
	|		ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = АмортизацияНМА.НематериальныйАктив
	|			И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации = АмортизацияНМА.Счет
	
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|		ПО СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив = ХозрасчетныйОбороты.НематериальныйАктив
	|			И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации = ХозрасчетныйОбороты.Счет
	
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМАНаНачалоГода КАК СтоимостьНМАНаНачалоГода
	|		ПО СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив = СтоимостьНМАНаНачалоГода.НематериальныйАктив
	|			И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета = СтоимостьНМАНаНачалоГода.Счет
	
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаНМАОбороты КАК ВыработкаНМАОбороты
	|		ПО СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив = ВыработкаНМАОбороты.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|		ПО СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|		ПО СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив = СостоянияНМАОрганизаций.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАмортизированныеАктивы КАК втАмортизированныеАктивы
	|		ПО СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив = втАмортизированныеАктивы.НМА
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ втДатаПервойАмортизации КАК втДатаПервойАмортизации
	|		ПО СписокНМАПринятыхВТекущемМесяцеПоПроизводственномуСпособу.НематериальныйАктив = втДатаПервойАмортизации.НематериальныйАктив
	|
	|ГДЕ
	|	(НЕ(ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) = ЛОЖЬ
	|				И ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) = ЛОЖЬ))

	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПоНМА 	 = РезультатЗапроса.Выбрать(); 
	
	Пока ВыборкаПоНМА.Следующий() Цикл
		
		СуммаАмортизацииБУ = 0;
		СуммаАмортизацииНУ = 0;
		СуммаАмортизацииПР = 0;
		СуммаАмортизацииВР = 0;
		
		СписатьОстатокБУ = Ложь;
		СписатьОстатокНУ = Ложь;
		СписатьОстатокПР = Ложь;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СчетНачисленияАмортизации) Тогда
			Если Реквизиты.ВыдаватьСообщения Тогда
				СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru='Не указан счет для начисления амортизации';uk='Не зазначений рахунок для нарахування амортизації'"),
					Реквизиты.Регистратор, Отказ);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Пропустить = Ложь;
		
		Если ВыборкаПоНМА.НачислятьАмортизациюБУ Тогда
			
			Если ВыборкаПоНМА.ЕстьНачислениеАмортизацииЗаПериод Тогда
				Пропустить = Истина;
				Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='По НМА %1 есть начисление амортизации за период';uk='По НМА %1 є нарахування амортизації за період'"), ВыборкаПоНМА.НематериальныйАктив),СтатусСообщения.Информация);
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СпособНачисленияАмортизации) Тогда
				Если Реквизиты.ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru='Не указан способ амортизации';uk='Не вказаний спосіб амортизації'"),
						Реквизиты.Регистратор, Отказ);
				КонецЕсли; 
				Пропустить = Истина;
			КонецЕсли;

			Если ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации = 0 Тогда
				Если Реквизиты.ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru='Стоимость равна нулю';uk='Вартість дорівнює нулю'"),
						Реквизиты.Регистратор, Отказ);
				КонецЕсли; 
				Пропустить = Истина;
			КонецЕсли;

			Если (ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации = 0)
				И (ВыборкаПоНМА.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции) Тогда
				Если Реквизиты.ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru='Срок использования равен нулю';uk='Строк використання дорівнює нулю'"),
						Реквизиты.Регистратор, Отказ);
				КонецЕсли;
				Пропустить = Истина;
			КонецЕсли;

			Если НЕ Пропустить Тогда
			
				СуммаАмортизации = 0;
				СтоимостьДляВычисленияАмортизации = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации;
				АмортизируемаяСтоимость	= ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации - ВыборкаПоНМА.ЛиквидационнаяСтоимость;

				Если ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный Тогда
		 
					СуммаГодовойАмортизации = АмортизируемаяСтоимость / ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации * 12;
					СуммаАмортизации        = СуммаГодовойАмортизации / 12;

				ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда

					Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.Количество) Тогда
						Пропустить = Истина;
					КонецЕсли;

					Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
						Если Реквизиты.ВыдаватьСообщения Тогда
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru='Объем продукции для вычисления не определен';uk='Об''єм продукції для обчислення не визначено'"),
								Реквизиты.Регистратор, Отказ);
						КонецЕсли; 
						Пропустить = Истина;
					КонецЕсли;

					Если Пропустить Тогда
						СуммаАмортизации = 0 ;
					Иначе
						СуммаАмортизации = АмортизируемаяСтоимость * ВыборкаПоНМА.Количество / ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации;
					КонецЕсли;
					

				//
				ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда

					Если ВыборкаПоНМА.ЛиквидационнаяСтоимость = 0 Тогда
						
						Если Реквизиты.ВыдаватьСообщения Тогда
							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' при расчете по способу %1 не указана ликвидационная стоимость!';uk=' при розрахунку за способом %1 не вказана ліквідаційна вартість!'"), ВыборкаПоНМА.СпособНачисленияАмортизации),
								Реквизиты.Регистратор, Отказ);
							
						КонецЕсли;
						
						Продолжить;
						
					КонецЕсли;
					
					
					Если Год(ВыборкаПоНМА.Период)  
							= Год(Реквизиты.ДатаРасчета) Тогда
							
						СтоимостьИтоговая = СтоимостьДляВычисленияАмортизации;
						
					Иначе
						
						СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьНаНачалоГода;
						
					КонецЕсли;
					
				Если ВыборкаПоНМА.ДатаПервойАмортизации = Дата(1,1,1) Тогда
						
						Если Реквизиты.ВыдаватьСообщения Тогда
							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата первой амортизации!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не визначилася дата першої амортизації!'"), ВыборкаПоНМА.НематериальныйАктив,ВыборкаПоНМА.СпособНачисленияАмортизации),
								Реквизиты.Регистратор, Отказ);
							
						КонецЕсли;
						
						Продолжить;
						
				КонецЕсли;
					
					РазностьЛет = Год(Реквизиты.ДатаРасчета) - Год(ВыборкаПоНМА.ДатаПервойАмортизации);
					
					Если РазностьЛет > 0 Тогда
						
						ОсталосьЭксплуатироватьВЭтомГоду = ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации 
						                                   - РазностьЛет * 12
						                                   + Месяц(ВыборкаПоНМА.ДатаПервойАмортизации)
														   
					ИначеЕсли ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
						
						ОсталосьЭксплуатироватьВЭтомГоду = ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации;
														   
					Иначе
						
						ОсталосьЭксплуатироватьВЭтомГоду = 0;
														   
					КонецЕсли;
															   
					Если (ОсталосьЭксплуатироватьВЭтомГоду < 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
						
						// Последний год применяем прямолинейный метод
						
						СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ВыборкаПоНМА.ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду;
						
					ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
						
						СуммаГодовойАмортизации = СтоимостьИтоговая * (1 - Pow(ВыборкаПоНМА.ЛиквидационнаяСтоимость / ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации,
						                                                       12 / ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации));
																			   
					Иначе // Срок использования исчерпан
						
						СуммаГодовойАмортизации = 0;
						
						Если Реквизиты.ВыдаватьСообщения Тогда
							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 срок использования исчерпан!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации),
								Реквизиты.Регистратор, ЛОЖЬ); 
						КонецЕсли;                            
						
					КонецЕсли;

					СуммаАмортизации   = СуммаГодовойАмортизации / 12;
					
					
				ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка Тогда
					
					
					Если  ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации <= 24 Тогда
						
						Если Реквизиты.ВыдаватьСообщения Тогда
							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 срок использования %3 мес.!';uk='Бух. розрахунок амортизації: для нематеріального активу, %1 при розрахунку за способом %2 термін використання %3 міс.!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации, ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации),
								Реквизиты.Регистратор, Отказ);
							
						КонецЕсли;
						
					КонецЕсли; 
					
					Если Год(ВыборкаПоНМА.Период) = Год(Реквизиты.ДатаРасчета) Тогда
						
						СтоимостьИтоговая = СтоимостьДляВычисленияАмортизации;
						
					Иначе
						
						СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьНаНачалоГода;
						
					КонецЕсли;
					
					Если ВыборкаПоНМА.ДатаПервойАмортизации = Дата(1,1,1) Тогда
						
						Если Реквизиты.ВыдаватьСообщения Тогда
							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата первой амортизации!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не визначилася дата першої амортизації!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации),
								Реквизиты.Регистратор, Отказ);
							
						КонецЕсли;
						
						Продолжить;
						
					КонецЕсли;

					
					РазностьЛет = Год(Реквизиты.ДатаРасчета) - Год(ВыборкаПоНМА.ДатаПервойАмортизации);
					
					Если РазностьЛет > 0 Тогда
						
						ОсталосьЭксплуатироватьВЭтомГоду = ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации 
						                                   - РазностьЛет * 12
						                                   + Месяц(ВыборкаПоНМА.ДатаПервойАмортизации)
														   
					ИначеЕсли ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
						
						ОсталосьЭксплуатироватьВЭтомГоду = ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации;
														   
					Иначе
						
						ОсталосьЭксплуатироватьВЭтомГоду = 0;
														   
					КонецЕсли;
															   
					Если (ОсталосьЭксплуатироватьВЭтомГоду < 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
						
						// Последний год применяем прямолинейный метод
						
						СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ВыборкаПоНМА.ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду;
						
					ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
						
						СуммаГодовойАмортизации = 2 * (СтоимостьИтоговая) / ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации * 12;
						
					Иначе // Срок использования исчерпан
						
						СуммаГодовойАмортизации = 0;
						
						Если Реквизиты.ВыдаватьСообщения Тогда
							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 срок использования исчерпан!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизацииНУ),
								Реквизиты.Регистратор, ЛОЖЬ); 
						КонецЕсли;                            

					
					КонецЕсли;
					
					СуммаАмортизации   = СуммаГодовойАмортизации / 12;
					//	
					ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Кумулятивный Тогда

						
						Если ВыборкаПоНМА.ДатаПервойАмортизации = Дата(1,1,1) Тогда
							
							Если Реквизиты.ВыдаватьСообщения Тогда
								
								СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата первой амортизации!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не визначилася дата першої амортизації!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации),
									Реквизиты.Регистратор, Отказ);
								
							КонецЕсли;
							
							Продолжить;
							
						КонецЕсли;

						ЧислоЛетПользования	= Макс(1, ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации / 12);
						
						ЧислоЛетПользования	= Цел(ЧислоЛетПользования) + ?(ЧислоЛетПользования  
													- Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому 
						
						ГодИспользования	= Год(Реквизиты.ДатаРасчета) - Год(ВыборкаПоНМА.ДатаПервойАмортизации) + 1;
						
						Если Месяц(ВыборкаПоНМА.ДатаПервойАмортизации) >= Месяц(Реквизиты.ДатаРасчета) Тогда
							
							ГодИспользования = ГодИспользования - 1;
							
						КонецЕсли; 

						СуммаГодовойАмортизации   = АмортизируемаяСтоимость * (ЧислоЛетПользования - ГодИспользования + 1)
								/ (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
													  
						СуммаАмортизации = СуммаГодовойАмортизации / 12;
						
					Иначе 
						
						Если Реквизиты.ВыдаватьСообщения  Тогда
							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='установлен способ расчета амортизации, не поддерживаемый в бухгалтерском учете (%1)!';uk='встановлений спосіб розрахунку амортизації, який не підтримується в бухгалтерському обліку (%1)!'"), ВыборкаПоНМА.СпособНачисленияАмортизации),
									Реквизиты.Регистратор, Отказ);
						
						КонецЕсли;
						
						Продолжить;
						
					КонецЕсли;
				ВсегоОсталосьСписать = ВыборкаПоНМА.СтоимостьНачальныйОстаток - ВыборкаПоНМА.ЛиквидационнаяСтоимость - ВыборкаПоНМА.АмортизацияНачальныйОстаток;
				
				СписатьОстатокБУ = (ВсегоОсталосьСписать < СуммаАмортизации);
				СуммаАмортизацииБУ   = Окр(Мин(СуммаАмортизации, ВсегоОсталосьСписать), 2);
				
				КонецЕсли;

		КонецЕсли;
		
		Пропустить = Ложь;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если ВыборкаПоНМА.НачислятьАмортизациюНУ Тогда
				
				Если  ВыборкаПоНМА.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					Если Реквизиты.ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru='указано нехоз. налоговое назначение. Амортизация (НУ) не начислена';uk='зазначено негосп. податкове призначення. Амортизація (ПО) не нарахована'"),
							Реквизиты.Регистратор, Отказ);
					КонецЕсли;
					Пропустить = Истина;
				КонецЕсли;
				
				Если ВыборкаПоНМА.ЕстьНачислениеАмортизацииЗаПериод Тогда
					Пропустить = Истина; 
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СпособНачисленияАмортизацииНУ) Тогда
					Если Реквизиты.ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru='Не указан метод начисления амортизации (НУ) в учетной политике организации';uk='Не зазначений метод нарахування амортизації ПО) в обліковій політиці організації'"),
							Реквизиты.Регистратор, Отказ);
					КонецЕсли;
					Пропустить = Истина;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СтоимостьНУНачальныйОстаток) Тогда
					Пропустить = Истина;
				КонецЕсли;
				
					Если ВыборкаПоНМА.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный
					И ВыборкаПоНМА.СрокПолезногоИспользования = 0 Тогда
					Если Реквизиты.ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru='Срок использования (НУ) равен нулю';uk='Строк використання (ПО) дорівнює нулю'"),
							Реквизиты.Регистратор, Отказ);
					КонецЕсли; 
					Пропустить = Истина;
				КонецЕсли;
				

				Если НЕ Пропустить Тогда
					
					СуммаАмортизации = 0;
					
					СтоимостьНУНачальныйОстаток	= ВыборкаПоНМА.СтоимостьНУНачальныйОстаток;
					СтоимостьДляВычисления = ВыборкаПоНМА.ПервоначальнаяСтоимостьНУ - ВыборкаПоНМА.ЛиквидационнаяСтоимость;

					СрокИспользованияДляВычисления = Макс(1, ВыборкаПоНМА.СрокПолезногоИспользования);
					
					
					Если ВыборкаПоНМА.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный Тогда
		 
						СуммаГодовойАмортизации = СтоимостьДляВычисления / СрокИспользованияДляВычисления * 12;
						СуммаАмортизации        = СуммаГодовойАмортизации / 12;



					ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда

					
						Если Год(ВыборкаПоНМА.Период)  
								= Год(Реквизиты.ДатаРасчета) Тогда
							
							СтоимостьИтоговая = СтоимостьНУНачальныйОстаток;
							
						Иначе
							
							СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьНаНачалоГода;
							
						КонецЕсли;
							
						Если ВыборкаПоНМА.ДатаПервойАмортизации = Дата(1,1,1) Тогда
								
								Если Реквизиты.ВыдаватьСообщения Тогда
									
									СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата первой амортизации!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не визначилася дата першої амортизації!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации),
										Реквизиты.Регистратор, Отказ);
									
								КонецЕсли;
								
								Продолжить;
								
						КонецЕсли;
							
							РазностьЛет = Год(Реквизиты.ДатаРасчета) - Год(ВыборкаПоНМА.ДатаПервойАмортизации);
							
							Если РазностьЛет > 0 Тогда
								
								ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисления 
								                                   - РазностьЛет * 12
								                                   + Месяц(ВыборкаПоНМА.ДатаПервойАмортизации)
																   
							ИначеЕсли ВыборкаПоНМА.СрокПолезногоИспользования < 12 Тогда											   
								
								ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисления;
																   
							Иначе
								
								ОсталосьЭксплуатироватьВЭтомГоду = 0;
																   
							КонецЕсли;
																	   
							Если (ОсталосьЭксплуатироватьВЭтомГоду < 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
								
								// Последний год применяем прямолинейный метод
								
								СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ВыборкаПоНМА.ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
								
							ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
								СуммаГодовойАмортизации = СтоимостьИтоговая * (1 - Pow(ВыборкаПоНМА.ЛиквидационнаяСтоимость / СтоимостьНУНачальныйОстаток,
								                                                       12 / СрокИспользованияДляВычисления));
																					   
							Иначе // Срок использования исчерпан
								
								СуммаГодовойАмортизации = 0;
								
								Если Реквизиты.ВыдаватьСообщения Тогда
									
									СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 срок использования исчерпан!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации),
										Реквизиты.Регистратор, Отказ);
								КонецЕсли;
								
							КонецЕсли;

							СуммаАмортизации   = СуммаГодовойАмортизации / 12;
							
					ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка Тогда

					
						Если Год(ВыборкаПоНМА.Период)  
								= Год(Реквизиты.ДатаРасчета) Тогда
								
							СтоимостьИтоговая = СтоимостьНУНачальныйОстаток;
							
						Иначе
							
							СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьНаНачалоГода;
							
						КонецЕсли;
							
						Если ВыборкаПоНМА.ДатаПервойАмортизации = Дата(1,1,1) Тогда
								
								Если Реквизиты.ВыдаватьСообщения Тогда
									
									СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата первой амортизации!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не визначилася дата першої амортизації!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации),
										Реквизиты.Регистратор, Отказ);
									
								КонецЕсли;
								
								Продолжить;
								
						КонецЕсли;
							
							РазностьЛет = Год(Реквизиты.ДатаРасчета) - Год(ВыборкаПоНМА.ДатаПервойАмортизации);
							
							Если РазностьЛет > 0 Тогда
								
								ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисления 
								                                   - РазностьЛет * 12
								                                   + Месяц(ВыборкаПоНМА.ДатаПервойАмортизации);
																   
							ИначеЕсли ВыборкаПоНМА.СрокПолезногоИспользования < 12 Тогда											   
								
								ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисления;
																   
							Иначе
								
								ОсталосьЭксплуатироватьВЭтомГоду = 0;
																   
							КонецЕсли;
																	   
							Если (ОсталосьЭксплуатироватьВЭтомГоду < 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
								
								// Последний год применяем прямолинейный метод
								СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ВыборкаПоНМА.ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду;
								
							ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
								
								СуммаГодовойАмортизации = 2 * СтоимостьИтоговая / СрокИспользованияДляВычисления * 12;
								

																					   
							Иначе // Срок использования исчерпан
								
								СуммаГодовойАмортизации = 0;
								
								Если Реквизиты.ВыдаватьСообщения Тогда
									
									СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 срок использования исчерпан!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизаци),
										Реквизиты.Регистратор, Отказ);
								КонецЕсли;
								
							КонецЕсли;

							СуммаАмортизации   = СуммаГодовойАмортизации / 12;
						
					ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.Кумулятивный Тогда

						
						Если ВыборкаПоНМА.ДатаПервойАмортизации = Дата(1,1,1) Тогда
							
							Если Реквизиты.ВыдаватьСообщения Тогда
								
								СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата первой амортизации!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не визначилася дата першої амортизації!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизаци),
									Реквизиты.Регистратор, Отказ);
								
							КонецЕсли;
							
							Продолжить;
							
						КонецЕсли;

						ЧислоЛетПользования	= Макс(1, СрокИспользованияДляВычисления / 12);
						
						ЧислоЛетПользования	= Цел(ЧислоЛетПользования) + ?(ЧислоЛетПользования  
													- Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому 
						
						ГодИспользования	= Год(Реквизиты.ДатаРасчета) - Год(ВыборкаПоНМА.ДатаПервойАмортизации) + 1;
						
						Если Месяц(ВыборкаПоНМА.ДатаПервойАмортизации) >= Месяц(Реквизиты.ДатаРасчета) Тогда
							
							ГодИспользования = ГодИспользования - 1;
							
						КонецЕсли; 

						СуммаГодовойАмортизации   = СтоимостьДляВычисления * (ЧислоЛетПользования - ГодИспользования + 1)
								/ (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
													  
						СуммаАмортизации = СуммаГодовойАмортизации / 12;
						
					Иначе 
						
						Если Реквизиты.ВыдаватьСообщения  Тогда
							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='установлен способ расчета амортизации, не поддерживаемый в бухгалтерском учете (%1)!';uk='встановлений спосіб розрахунку амортизації, який не підтримується в бухгалтерському обліку (%1)!'"), ВыборкаПоНМА.СпособНачисленияАмортизации),
									Реквизиты.Регистратор, Отказ);
						
						КонецЕсли;
						
						Продолжить;
						
					КонецЕсли;
					
					ВсегоОсталосьСписать = ВыборкаПоНМА.СтоимостьНУНачальныйОстаток - ВыборкаПоНМА.ЛиквидационнаяСтоимость - ВыборкаПоНМА.АмортизацияНУНачальныйОстаток;
					
					СписатьОстатокНУ = (ВсегоОсталосьСписать < СуммаАмортизации);
					СуммаАмортизацииНУ = Окр(Мин(ВсегоОсталосьСписать, СуммаАмортизации), 2);
					НалоговоеНазначениеКт =  ВыборкаПоНМА.НалоговоеНазначениеКт;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СпособОтражения = Неопределено;
		Если ВыборкаПоНМА.СпособОтраженияРасходовЗаданДокументом Тогда
			СпособОтражения = СоответствиеСпособовОтражения.Получить(ВыборкаПоНМА.СпособОтраженияРасходов);
		КонецЕсли;
		
		Если ВыборкаПоНМА.НачислятьАмортизациюБУ  И (СуммаАмортизацииБУ = 0) И (СуммаАмортизацииНУ > 0) Тогда
			 СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: амортизация равна 0! ';uk='Бух. розрахунок амортизації: амортизація дорівнює 0! '"), ВыборкаПоНМА.НематериальныйАктив),
					Реквизиты.Регистратор, Ложь, Реквизиты.Регистратор);
		КонецЕсли; 

		
		НовыеСтроки = ПодготовитьСтрокиВТаблицуАмортизации(
			ВыборкаПоНМА,
			НалоговоеНазначениеКт,
			СуммаАмортизацииБУ, СуммаАмортизацииНУ, СуммаАмортизацииПР,
			СписатьОстатокБУ, СписатьОстатокНУ, СписатьОстатокПР);
		ДобавитьСтрокиВТаблицуАмортизации(ТаблицаАмортизации, ВыборкаПоНМА, НовыеСтроки, СпособОтражения);
		
	КонецЦикла;
	
	Возврат ТаблицаАмортизации;
	
КонецФункции

Функция ПодготовитьСтрокиВТаблицуАмортизации(
		ВыборкаДанных,
		НалоговоеНазначениеКт,
		СуммаАмортизацииБУ, СуммаАмортизацииНУ, СуммаАмортизацииПР,
		СписатьОстатокБУ=Ложь, СписатьОстатокНУ=Ложь, СписатьОстатокПР=Ложь)
	
	ПоляСтроки = "ОбъектУчета, НалоговоеНазначениеКт, СуммаБУ, СуммаНУ, СуммаПР, СуммаВР, Коэффициент, ЭтоЦелевыеСредства";
	СтрокаАмортизации = Новый Структура(ПоляСтроки);
	СтрокаАмортизацииЦФ = Новый Структура(ПоляСтроки);
	
	МассивРезультат = Новый Массив;
	
	Если СуммаАмортизацииБУ > 0  
		ИЛИ СуммаАмортизацииНУ > 0	Тогда
				
		МассивРезультат.Добавить(СтрокаАмортизации);
		
		ЗаполнитьЗначенияСвойств(СтрокаАмортизации, ВыборкаДанных);
		
		СтрокаАмортизации.ОбъектУчета = ВыборкаДанных.НематериальныйАктив;
		
		СтрокаАмортизации.НалоговоеНазначениеКт = ВыборкаДанных.НалоговоеНазначениеКт;
		
		СтрокаАмортизации.СуммаБУ = СуммаАмортизацииБУ;
		СтрокаАмортизации.СуммаНУ = СуммаАмортизацииНУ;
		СтрокаАмортизации.СуммаПР = 0;
		СтрокаАмортизации.СуммаВР = 0;
		
		Если ВыборкаДанных.СтоимостьНачальныйОстаток <= ВыборкаДанных.АмортизацияНачальныйОстаток Тогда
			СтрокаАмортизации.Коэффициент = 1;
		Иначе
			СтрокаАмортизации.Коэффициент = СуммаАмортизацииБУ / (ВыборкаДанных.СтоимостьНачальныйОстаток - ВыборкаДанных.АмортизацияНачальныйОстаток);
		КонецЕсли;
		 
				
		СтрокаАмортизации.ЭтоЦелевыеСредства = Ложь;
				
		СтрокаАмортизации.СуммаБУ = ?(СписатьОстатокБУ, ВыборкаДанных.ОстаточнаяСтоимостьБУ - ВыборкаДанных.ЛиквидационнаяСтоимость, СтрокаАмортизации.СуммаБУ);
		СтрокаАмортизации.СуммаНУ = ?(СписатьОстатокНУ, ВыборкаДанных.ОстаточнаяСтоимостьНУ - ВыборкаДанных.ЛиквидационнаяСтоимость, СтрокаАмортизации.СуммаНУ);
		
		СтрокаАмортизации.СуммаПР =0;
		СтрокаАмортизации.СуммаВР =0;
		СтрокаАмортизации.Коэффициент = СтрокаАмортизации.Коэффициент;
				//СтрокаАмортизации.СуммаПР = ?(СписатьОстатокПР, ВыборкаДанных.ОстаточнаяСтоимостьПР, СтрокаАмортизации.СуммаПР - СтрокаАмортизацииЦФ.СуммаПР);
				
			
	КонецЕсли;
	
	Возврат МассивРезультат;
	
КонецФункции

Процедура ДобавитьСтрокиВТаблицуАмортизации(Таблица, ВыборкаДанных, НовыеСтроки, ТаблицаРаспределения)
	
	Для Каждого Строка Из НовыеСтроки Цикл
		
		Если (Строка.СуммаБУ = 0) И (Строка.СуммаНУ=0) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаРаспределения = Неопределено Тогда
			СтрокаТаблицыЗатрат = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗатрат, ВыборкаДанных);
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗатрат, Строка);
		Иначе
			МассивКоэффицентов = ТаблицаРаспределения.ВыгрузитьКолонку("Коэффициент");
			СуммыБУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Строка.СуммаБУ, МассивКоэффицентов);
			СуммыНУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Строка.СуммаНУ, МассивКоэффицентов);
			СуммыПР = 0;
			СуммыВР = 0;
			Коэффициенты = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Строка.Коэффициент, МассивКоэффицентов, 100);
			
			Если СуммыБУ = Неопределено И СуммыНУ = Неопределено И СуммыПР = Неопределено И СуммыВР = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Индекс=0 По ТаблицаРаспределения.Количество()-1 Цикл
				ПравилоОтражения = ТаблицаРаспределения[Индекс];
				СтрокаТаблицыЗатрат = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗатрат, ВыборкаДанных);
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗатрат, Строка);
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗатрат, ПравилоОтражения);
				СтрокаТаблицыЗатрат.СуммаБУ = ?(СуммыБУ=Неопределено, 0, СуммыБУ[Индекс]);
				СтрокаТаблицыЗатрат.СуммаНУ = ?(СуммыНУ=Неопределено, 0, СуммыНУ[Индекс]);
				СтрокаТаблицыЗатрат.СуммаПР = 0;
				СтрокаТаблицыЗатрат.СуммаВР = 0;
				СтрокаТаблицыЗатрат.Коэффициент = ?(Коэффициенты=Неопределено, 0, Коэффициенты[Индекс]);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьТаблицыАмортизацииНМА(ТаблицаНМА, ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыАмортизацияНМА(ТаблицаНМА, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ПараметрыНачисленияАмортизации = Новый Структура;
	
	ТаблицаАмортизации = ПодготовитьТаблицуАмортизацияНМА(Параметры.ТаблицаНМА, Параметры.Реквизиты, Отказ);
	
	ПараметрыАмортизации = Новый Структура;
	ПараметрыАмортизации.Вставить("ТаблицаАмортизации", ТаблицаАмортизации);
	ПараметрыАмортизации.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыНачисленияАмортизации.Вставить("Амортизация", ПараметрыАмортизации);
	
	ТаблицаРаспределения = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
		ТаблицаАмортизации, Параметры.Реквизиты, Отказ);
	
	ПараметрыРаспределения = Новый Структура;
	ПараметрыРаспределения.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыРаспределения.Вставить("ТаблицаЗатрат", ТаблицаРаспределения);
	ПараметрыНачисленияАмортизации.Вставить("РаспределениеАмортизации", ПараметрыРаспределения);
	
	Возврат ПараметрыНачисленияАмортизации;
	
КонецФункции

Функция ПодготовитьПараметрыАмортизацияНМА(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"         // <Число, 5, 0>
	+ "НематериальныйАктив"; // <СправочникСсылка.НематериальныйАктив>

	Параметры.Вставить("ТаблицаНМА",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ДатаРасчета," // <Дата>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Подразделение," // <СправочникСсылка.Подразделения>
	+ "Регистратор," // <ДокументСсылка.*>
	+ "ИмяСписка,"   // <Строка>
	+ "ВыдаватьСообщения";

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции


// ВЫБЫТИЕ НМА

Функция ПодготовитьТаблицыСведенийПоВыбытиюНМА(ТаблицаНМА, ТаблицаРеквизиты, Отказ, ВыдаватьСообщения = Ложь) Экспорт

	Параметры = ПодготовитьПараметрыПодготовитьТаблицыСведенийПоВыбытиюНМА(ТаблицаНМА, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	// Проинициализируем структуру, чтобы в случае "досрочного" выхода в структуре были все таблицы, хоть и пустые
	ПараметрыВыбытия = ПолучитьИнициализированнуюСтруктуруПараметровВыбытия();

	Параметры.Реквизиты.Колонки.Добавить("ДатаРасчета", Новый ОписаниеТипов("Дата"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Реквизиты.Период, "ДатаРасчета");
	Параметры.Реквизиты.Колонки.Добавить("ВыдаватьСообщения", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(ВыдаватьСообщения = Истина, "ВыдаватьСообщения");
	Если Параметры.ТаблицаНМА.Количество() = 0 Тогда
		ТаблицаАмортизации = ПолучитьПустуюТаблицуАмортизацииНМА();
	Иначе
		ТаблицаАмортизации = ПодготовитьТаблицуАмортизацияНМА(Параметры.ТаблицаНМА, Параметры.Реквизиты, Отказ);
		Если Отказ Тогда
			Возврат ПараметрыВыбытия;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТабАмортизации", ТаблицаАмортизации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабАмортизации.ОбъектУчета КАК ОбъектУчета,
	|	ТабАмортизации.СуммаАмортизацииБУ КАК СуммаАмортизацииБУ,
	|	ТабАмортизации.СуммаАмортизацииНУ КАК СуммаАмортизацииНУ,
	|	ТабАмортизации.СуммаАмортизацииПР КАК СуммаАмортизацииПР,
	|	ТабАмортизации.СуммаАмортизацииВР КАК СуммаАмортизацииВР
	|ПОМЕСТИТЬ ТабАмортизации
	|ИЗ
	|	&ТабАмортизации КАК ТабАмортизации";
	Запрос.Выполнить();

	ТаблицаЗатрат = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(ТаблицаАмортизации, Параметры.Реквизиты, Отказ);
	Если Отказ Тогда
		Возврат ПараметрыВыбытия;
	КонецЕсли;

	ПараметрыНачисленияАмортизации = Новый Структура;
	ПараметрыНачисленияАмортизации.Вставить("ТаблицаЗатрат", ТаблицаЗатрат);
	ПараметрыНачисленияАмортизации.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);

	// Параметры для процедуры СформироватьДвиженияНачислениеАмортизации
	ПараметрыВыбытия.Вставить("НачислениеАмортизации", ПараметрыНачисленияАмортизации);
	
	Запрос.УстановитьПараметр("Дата", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ТаблицаНМА", Параметры.ТаблицаНМА);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	СчетаУчетаНМА.СчетУчета КАК СчетУчета,
	|	СчетаУчетаНМА.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаУчетаНМА
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)) КАК СчетаУчетаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаНМА.СчетУчета КАК Счет
	|ПОМЕСТИТЬ РазличныеСчетаУчетаНМА
	|ИЗ
	|	СчетаУчетаНМА КАК СчетаУчетаНМА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаНМА.СчетНачисленияАмортизации
	|ИЗ
	|	СчетаУчетаНМА КАК СчетаУчетаНМА";
	Запрос.Выполнить();

	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		// Блокировка регистра бухгалтерии.
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных, ИмяВременнойТаблицы",
			"РегистрБухгалтерии", "Хозрасчетный", Запрос.МенеджерВременныхТаблиц, "РазличныеСчетаУчетаНМА");
		СтруктураЗначенийБлокировки = Новый Структура("Период, Организация",
			Новый Диапазон(, КонецМесяца(Реквизиты.Период)), Реквизиты.Организация);
		СтруктураИсточникаДанных = Новый Структура("Счет", "Счет");
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);
	КонецЕсли;

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтоимостьНМА.Субконто1 КАК НематериальныйАктив,
	|	СтоимостьНМА.Счет КАК Счет,
	|	СтоимостьНМА.СуммаОстатокДт КАК СуммаОстатокДт,
	|	СтоимостьНМА.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	|	СтоимостьНМА.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	СтоимостьНМА.СуммаВРОстатокДт КАК СуммаВРОстатокДт,
	|	СтоимостьНМА.СуммаОстатокКт КАК СуммаОстатокКт,
	|	СтоимостьНМА.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	СтоимостьНМА.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	|	СтоимостьНМА.СуммаВРОстатокКт КАК СуммаВРОстатокКт,
	|	СтоимостьНМА.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ СтоимостьНМА
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет В
	|				(ВЫБРАТЬ
	|					РазличныеСчетаУчетаНМА.Счет
	|				ИЗ
	|					РазличныеСчетаУчетаНМА КАК РазличныеСчетаУчетаНМА),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)) КАК СтоимостьНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	СтоимостьНМА.Подразделение КАК Подразделение,
	|	СчетаУчетаНМА.СчетУчета КАК СчетУчета,
	|	СчетаУчетаНМА.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаОстатокДт, 0) КАК СтоимостьНМАБУ,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНУОстатокДт, 0) КАК СтоимостьНМАНУ,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаПРОстатокДт, 0) КАК СтоимостьНМАПР,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаВРОстатокДт, 0) КАК СтоимостьНМАВР,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииБУ, 0) КАК АмортизацияНМАБУ,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаНУОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииНУ, 0) КАК АмортизацияНМАНУ,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаПРОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииПР, 0) КАК АмортизацияНМАПР,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаВРОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииВР, 0) КАК АмортизацияНМАВР
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаНМА КАК СчетаУчетаНМА
	|		ПО ТаблицаНМА.НематериальныйАктив = СчетаУчетаНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМА КАК СтоимостьНМА
	|		ПО (СчетаУчетаНМА.НематериальныйАктив = СтоимостьНМА.НематериальныйАктив)
	|			И (СчетаУчетаНМА.СчетУчета = СтоимостьНМА.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМА КАК АмортизацияНМА
	|		ПО (СчетаУчетаНМА.НематериальныйАктив = АмортизацияНМА.НематериальныйАктив)
	|			И (СчетаУчетаНМА.СчетНачисленияАмортизации = АмортизацияНМА.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабАмортизации КАК ТабАмортизации
	|		ПО ТаблицаНМА.НематериальныйАктив = ТабАмортизации.ОбъектУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаПараметрыСписания = Запрос.Выполнить().Выгрузить();
	ПараметрыВыбытия.Вставить("ТаблицаПараметрыСписания", ТаблицаПараметрыСписания);

	Возврат ПараметрыВыбытия;

КонецФункции

Функция ПодготовитьПараметрыПодготовитьТаблицыСведенийПоВыбытиюНМА(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"         // <Число, 5, 0>
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныеАктивы>
	+ "Регистратор";         // <ДокументСсылка.*>

	Параметры.Вставить("ТаблицаНМА",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," 
	+ "Содержание,"    // <Строка, 150>
	+ "ИмяСписка,"     // <Строка>
	+ "Регистратор";   // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПолучитьИнициализированнуюСтруктуруПараметровВыбытия()

	ПараметрыВыбытия = Новый Структура;
	
	// НачислениеАмортизации, структура из двух таблиц: ТаблицаЗатрат и ТаблицаРеквизиты
	ПараметрыВыбытия.Вставить("НачислениеАмортизации",
		Новый Структура("ТаблицаЗатрат, ТаблицаРеквизиты",
			УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьПустуюТаблицуЗначенийСКолонками(Новый Структура("ОбъектУчета, ПодразделениеЗатрат, Подразделение,
				|Субконто1, Субконто2, Субконто3, СуммаБУ, СуммаНУ, СуммаПР, СуммаВР, СчетЗатрат, СчетАмортизации")), // ТаблицаЗатрат
			УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьПустуюТаблицуЗначенийСКолонками(Новый Структура("Период, Организация, Содержание")))); // ТаблицаРеквизиты

	// ТаблицаПараметрыСписания, таблица значений
	ПараметрыВыбытия.Вставить("ТаблицаПараметрыСписания", Новый ТаблицаЗначений); // Достаточно указать ТЗ без строк, колонки прописывать не нужно

	Возврат ПараметрыВыбытия;

КонецФункции

Процедура СформироватьДвиженияВыбытиеНМА(ТаблицаРеквизиты, ПараметрыВыбытия, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВыбытиеНМА(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	УправлениеВнеоборотнымиАктивамиПереопределяемый.СформироватьДвиженияНачислениеАмортизации(
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаЗатрат,
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты,
		Движения, Отказ);
	
	ОтражатьВНалоговомУчете 		=	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из ПараметрыВыбытия.ТаблицаПараметрыСписания Цикл
		
		Если Реквизиты.Подразделение <> Неопределено Тогда
			ПодразделениеПроводки = Реквизиты.Подразделение;
		Иначе
			ПодразделениеПроводки = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		СчетУчетаСтоимости   = СтрокаТаблицы.СчетУчета;
		СчетУчетаАмортизации = СтрокаТаблицы.СчетНачисленияАмортизации;
		
		// списание амортизации Д (Счет амортизации) К (счет учета)
		СуммаПроводки   = СтрокаТаблицы.АмортизацияНМАБУ;
		СуммаПроводкиНУ = СтрокаТаблицы.АмортизацияНМАНУ;
		СуммаПроводкиПР = СтрокаТаблицы.АмортизацияНМАПР;
		СуммаПроводкиВР = СтрокаТаблицы.АмортизацияНМАВР;

		Если ((СуммаПроводки <> 0) 
			  ИЛИ (СуммаПроводкиНУ <> 0)
			  ИЛИ (СуммаПроводкиПР <> 0)
			  ИЛИ (СуммаПроводкиВР <> 0))
			И НЕ (СчетУчетаСтоимости = СчетУчетаАмортизации) Тогда

			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;
			Проводка.Сумма       = СуммаПроводки;
			
			Проводка.СчетДт = СчетУчетаАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР"		 , СтрокаТаблицы.НематериальныйАктив);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;
			
			Проводка.СчетКт = СчетУчетаСтоимости;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"		 , СтрокаТаблицы.НематериальныйАктив);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					//КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// списание остаточной стоимости
		СуммаПроводки   = СтрокаТаблицы.СтоимостьНМАБУ - СтрокаТаблицы.АмортизацияНМАБУ;
		СуммаПроводкиНУ = СтрокаТаблицы.СтоимостьНМАНУ - СтрокаТаблицы.АмортизацияНМАНУ;
		СуммаПроводкиПР = СтрокаТаблицы.СтоимостьНМАПР - СтрокаТаблицы.АмортизацияНМАПР;
		СуммаПроводкиВР = СтрокаТаблицы.СтоимостьНМАВР - СтрокаТаблицы.АмортизацияНМАВР;

		Если СуммаПроводки <> 0
		 ИЛИ СуммаПроводкиНУ <> 0 
		 ИЛИ СуммаПроводкиПР <> 0 
		 ИЛИ СуммаПроводкиВР <> 0 Тогда
		
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;
			Проводка.Сумма       = СуммаПроводки;
			
			Проводка.СчетДт = Реквизиты.СчетСписания;
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.КоличествоСубконто > 0 Тогда
				Если СвойстваСчетаДт.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(Реквизиты.СубконтоСписания)) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто1, Реквизиты.СубконтоСписания);
				КонецЕсли;
			КонецЕсли;
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;
			
			Проводка.СчетКт = СчетУчетаСтоимости;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"		 , СтрокаТаблицы.НематериальныйАктив);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
	// Вызов переопределяемой процедуры для возможности выполнения дополнительных действий при списании НМА.
	УправлениеВнеоборотнымиАктивамиПереопределяемый.ВыполнитьДополнительныеДействияСписаниеНМА(ПараметрыВыбытия.ТаблицаПараметрыСписания, ТаблицаРеквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыбытиеНМА(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "Подразделение,"             
	+ "Содержание,"                // <Строка, 150>
	+ "СчетСписания,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "СубконтоСписания"           // 
	;
	
	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


// ВЫРАБОТКА НМА

Процедура СформироватьДвиженияВыработкаНМА(ТаблицаНМА, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыВыработкаНМА(ТаблицаНМА);
	
	Если Параметры.ТаблицаНМА.Количество() > 0 Тогда
		
		Движения.ВыработкаНМА.Загрузить(Параметры.ТаблицаНМА);
		Движения.ВыработкаНМА.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыработкаНМА(ТаблицаНМА)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаНМА:
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "Организация,"
	+ "НомерСтроки,"
	+ "НематериальныйАктив,"
	+ "Количество,"
	;
	Параметры.Вставить("ТаблицаНМА", УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// Изменение способов отражения расходов по амортизации НМА

Процедура СформироватьДвиженияИзменениеСпособовОтраженияРасходовПоАмортизацииНМА(ТаблицаНМА, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииНМА(ТаблицаНМА);
	
	Если Параметры.ТаблицаНМА.Количество() > 0 Тогда
		
		Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Загрузить(Параметры.ТаблицаНМА);
		Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииНМА(ТаблицаНМА)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаНМА:
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "Организация,"
	+ "НомерСтроки,"
	+ "СтатьяРасходов,"
	+ "АналитикаРасходов,"
	+ "НематериальныйАктив";
	
	Параметры.Вставить("ТаблицаНМА", УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции



// ПОСТУПЛЕНИЕ НМА

Процедура СформироватьДвиженияПоступлениеНМА(ТаблицаНМА, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПоступлениеНМА(ТаблицаНМА, ТаблицаРеквизиты);

	Если Параметры.ТаблицаНМА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаНМА Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;
		
		Проводка.СчетДт      = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт      = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.Сумма =  СтрокаТаблицы.СуммаБУ;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРДт = 0;
			КонецЕсли;
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеНМА(ТаблицаНМА, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныеАктивы> - поступающий НМА
	+ "СуммаВзаиморасчетов," // <Число,15,2> - сумма в валюте взаиморасчетов с поставщиком
	+ "СуммаБУ,"             // <Число,15,2> - сумма в гривнах
	+ "СуммаНУ,"             // <Число,15,2> - сумма в гривнах (НУ)
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется НМА
	+ "ВидОбъектаУчета,"     // <ПеречислениеСсылка.ВидыОбъектовУчетаНМА> - вид объекта учета
	+ "Содержание";          // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаНМА", УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает НМА
	+ "Подразделение,"                  // Подразделение, в которое поступает НМА
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты> - поставщик НМА
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому поступает НМА
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с поставщиком, обычно 60.01
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов с поставщиком

	Параметры.Вставить("Реквизиты",  УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Движения по состоянию НМА

Процедура СформироватьДвиженияСостоянияНМАОрганизаций(ТаблицаНМА, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыСостоянияНМАОрганизаций(ТаблицаНМА, ТаблицаРеквизиты);
	Если Параметры.СостоянияНМАОрганизаций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.СостоянияНМАОрганизаций.Загрузить(Параметры.СостоянияНМАОрганизаций);
	Движения.СостоянияНМАОрганизаций.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСостоянияНМАОрганизаций(ТаблицаНМА, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы СостоянияНМАОрганизаций:
	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив,"	// <СправочникСсылка.НематериальныйАктив>
	+ "Состояние"				// <ПеречислениеСсылка.ВидыСостоянийНМА>
	;
	
	СостоянияНМАОрганизаций = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок);
	
	// Подготовка реквизитов
	СписокОбязательныхКолонок = ""
	+ "Период,"                 // <Дата> - Дата движения
	+ "Организация";			// <СправочникСсылка.Организации> - организация документа
	
	Реквизиты = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок);
	
	СостоянияНМАОрганизаций.Колонки.Добавить("Организация", Реквизиты.Колонки.Организация.ТипЗначения);
	СостоянияНМАОрганизаций.Колонки.Добавить("Период", Реквизиты.Колонки.Период.ТипЗначения);
	СостоянияНМАОрганизаций.ЗаполнитьЗначения(Реквизиты[0].Организация, "Организация");
	СостоянияНМАОрганизаций.ЗаполнитьЗначения(Реквизиты[0].Период, "Период");
	
	Параметры.Вставить("СостоянияНМАОрганизаций", СостоянияНМАОрганизаций);
	
	Возврат Параметры;
	
КонецФункции

// ПРОВЕРКИ ДАННЫХ НМА НА КОРРЕКТНОСТЬ

Процедура ПроверитьСоответствиеНМАОрганизации(ТаблицаНМА, ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыСоответствиеНМАОрганизации(ТаблицаНМА, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаНМА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаНМА", Параметры.ТаблицаНМА);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаНМА.НематериальныйАктив КАК Справочник.НематериальныеАктивы) КАК НематериальныйАктив
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАБУ.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ ПервоначальныеСведенияНМАБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)) КАК ПервоначальныеСведенияНМАБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияНМАБУ.НематериальныйАктив ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ТаблицаНМА.НематериальныйАктив.Код КАК КодНМА
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМАБУ КАК ПервоначальныеСведенияНМАБУ
	|		ПО ТаблицаНМА.НематериальныйАктив = ПервоначальныеСведенияНМАБУ.НематериальныйАктив
	|ГДЕ
	|	ПервоначальныеСведенияНМАБУ.НематериальныйАктив ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНМА.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияБУ = НСтр("ru='Нематериальный Актив <%1 (%2)> не отражалось в бухгалтерском учете по организации <%3>';uk='Нематеріальний Актив <%1 (%2)> не відображалось в бухгалтерському обліку по організації <%3>'");

		Пока Выборка.Следующий() Цикл
			
			Если НЕ Выборка.ОтражалосьВБухгалтерскомУчете Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияБУ,
					Выборка.ОсновноеСредство, Выборка.КодНМА, Реквизиты.Организация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, 
				Реквизиты.НематериальныйАктив, 		
				"Объект", Отказ);
			КонецЕсли;
				
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСоответствиеНМАОрганизации(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "НематериальныйАктив"; // <СправочникСсылка.НематериальныеАктивы>

	Параметры.Вставить("ТаблицаНМА",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСостояниеНМАПринятоКУчету(ТаблицаНМА, ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыСостояниеНМАПринятоКУчету(ТаблицаНМА, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаНМА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаНМА", Параметры.ТаблицаНМА);
	Запрос.УстановитьПараметр("Дата", Реквизиты.Период);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаНМА.НематериальныйАктив КАК Справочник.НематериальныеАктивы) КАК НематериальныйАктив
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМАОрганизаций.НематериальныйАктив КАК НематериальныйАктив,
	|	СостоянияНМАОрганизаций.Период КАК ДатаСостояния,
	|	СостоянияНМАОрганизаций.Регистратор,
	|	СостоянияНМАОрганизаций.Состояние,
	|	СостоянияНМАОрганизаций.Организация
	|ПОМЕСТИТЬ СостоянияНМА
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНМА КАК ТаблицаНМА
	|		ПО СостоянияНМАОрганизаций.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
	|			И (СостоянияНМАОрганизаций.Период < &Дата)
	|			И (СостоянияНМАОрганизаций.Организация = &Организация)
	|			И (СостоянияНМАОрганизаций.Активность = ИСТИНА)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	МАКСИМУМ(СостоянияНМА.ДатаСостояния) КАК ДатаСостояния
	|ПОМЕСТИТЬ ДатыПоследнихСостоянийНМА
	|ИЗ
	|	СостоянияНМА КАК СостоянияНМА
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияНМА.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	СостоянияНМА.ДатаСостояния,
	|	СостоянияНМА.Регистратор,
	|	СостоянияНМА.Организация,
	|	СостоянияНМА.Состояние
	|ПОМЕСТИТЬ ПоследниеСостоянияНМА
	|ИЗ
	|	ДатыПоследнихСостоянийНМА КАК ДатыПоследнихСостоянийНМА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияНМА КАК СостоянияНМА
	|		ПО ДатыПоследнихСостоянийНМА.НематериальныйАктив = СостоянияНМА.НематериальныйАктив
	|			И ДатыПоследнихСостоянийНМА.ДатаСостояния = СостоянияНМА.ДатаСостояния
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНМА.НематериальныйАктив,
	|	ТаблицаНМА.НематериальныйАктив.Код КАК КодНМА,
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ПоследниеСостоянияНМА.ДатаСостояния,
	|	ПоследниеСостоянияНМА.Регистратор,
	|	ПоследниеСостоянияНМА.Организация,
	|	ПоследниеСостоянияНМА.Состояние
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеСостоянияНМА КАК ПоследниеСостоянияНМА
	|		ПО ТаблицаНМА.НематериальныйАктив = ПоследниеСостоянияНМА.НематериальныйАктив
	|ГДЕ
	|	(ПоследниеСостоянияНМА.Состояние ЕСТЬ NULL
	|			ИЛИ ПоследниеСостоянияНМА.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			Если Выборка.Состояние = Null Тогда
				ШаблонСообщения = НСтр("ru='По состоянию на %4.
                    |Нематериальный актив <%1 (%2)> не принят к учету в организации <%3>.'
                    |;uk='Станом на %4.
                    |Нематеріальний актив <%1 (%2)> не прийнятий до обліку в організації <%3>.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.НематериальныйАктив,
					Выборка.КодНМА, Реквизиты.Организация, Формат(Реквизиты.Период, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, 
					Реквизиты.ИмяСписка + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].НематериальныйАктив",
					"Объект", Отказ);
			Иначе
				ШаблонСообщения = НСтр("ru='Нематериальный актив <%1 (%2)> списан с учета в организации <%3>
                    |документом <%4>. Дата состояния: %5'
                    |;uk='Нематеріальний актив <%1 (%2)> списаний з обліку в організації <%3>
                    |документом <%4>. Дата стану: %5'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.НематериальныйАктив,
					Выборка.КодНМА, Реквизиты.Организация, Выборка.Регистратор, Формат(Выборка.ДатаСостояния, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, 
				Реквизиты.ИмяСписка + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].НематериальныйАктив", 
 				"Объект", Отказ);
			КонецЕсли;
		КонецЦикла;

		Возврат;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСостояниеНМАПринятоКУчету(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "НематериальныйАктив"; // <СправочникСсылка.НематериальныеАктивы>

	Параметры.Вставить("ТаблицаНМА",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСоответствиеМестонахожденияНМА(ТаблицаНМА, ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыСоответствиеМестонахожденияНМА(ТаблицаНМА, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаНМА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаНМА", Параметры.ТаблицаНМА);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("МОЛ", Реквизиты.МОЛ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаНМА.НематериальныйАктив КАК Справочник.НематериальныеАктивы) КАК НематериальныйАктив
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеНМАБУ.НематериальныйАктив КАК НематериальныйАктив,
	|	МестонахождениеНМАБУ.МОЛ,
	|	МестонахождениеНМАБУ.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ МестонахождениеНМАБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)) КАК МестонахождениеНМАБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ТаблицаНМА.НематериальныйАктив.Код КАК КодНМА,
	|	МестонахождениеНМАБУ.МОЛ,
	|	МестонахождениеНМАБУ.Подразделение
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеНМАБУ КАК МестонахождениеНМАБУ
	|		ПО ТаблицаНМА.НематериальныйАктив = МестонахождениеНМАБУ.НематериальныйАктив
	|ГДЕ
	|	(МестонахождениеНМАБУ.НематериальныйАктив ЕСТЬ NULL
	|			ИЛИ МестонахождениеНМАБУ.Подразделение <> &Подразделение
	|			ИЛИ &МОЛ <> НЕОПРЕДЕЛЕНО
	|				И МестонахождениеНМАБУ.МОЛ <> &МОЛ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНМА.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияПодразделение = НСтр("ru='Нематериальный актив <%1 (%2)> не отражался в учете в местонахождении <%3>';uk='Нематеріальний актив <%1 (%2)> не відображався в обліку в місцезнаходженні <%3>'");
		ШаблонСообщенияМОЛ = НСтр("ru='Нематериальный актив <%1 (%2)> не отражался в учете за МОЛ <%3>';uk='Нематеріальний актив <%1 (%2)> не відображався в обліку за МВО <%3>'");

		Пока Выборка.Следующий() Цикл
			Если Выборка.Подразделение <> Реквизиты.Подразделение Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияПодразделение,
					Выборка.НематериальныйАктив, Выборка.КодНМА, Реквизиты.Подразделение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор,
				Реквизиты.ИмяСписка + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].НематериальныйАктив", 
				"Объект", Отказ);
			КонецЕсли;

			Если Реквизиты.МОЛ <> Неопределено И Выборка.МОЛ <> Реквизиты.МОЛ Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияМОЛ,
					Выборка.НематериальныйАктив, Выборка.КодНМА, Реквизиты.МОЛ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор,
				Реквизиты.ИмяСписка + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].НематериальныйАктив", 
				"Объект", Отказ);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСоответствиеМестонахожденияНМА(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "НематериальныйАктив"; // <СправочникСсылка.НематериальныеАктивы>

	Параметры.Вставить("ТаблицаНМА",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "ИмяСписка,"     // <Строка, 0>
	+ "МОЛ,"           // <СправочникСсылка.ФизическиеЛица> - МОЛ, за которым закреплено ОС
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // Подразделение в котором находится ОС
	+ "Регистратор";   // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСоответствиеПодразделениюНМА(ТаблицаНМА, ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыСоответствиеПодразделениюНМА(ТаблицаНМА, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаНМА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаНМА", Параметры.ТаблицаНМА);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаНМА.НематериальныйАктив КАК Справочник.НематериальныеАктивы) КАК НематериальныйАктив
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеНМАБУ.НематериальныйАктив КАК НематериальныйАктив,
	|	МестонахождениеНМАБУ.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ МестонахождениеНМАБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)) КАК МестонахождениеНМАБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ТаблицаНМА.НематериальныйАктив.Код КАК КодНМА,
	|	МестонахождениеНМАБУ.Подразделение
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеНМАБУ КАК МестонахождениеНМАБУ
	|		ПО ТаблицаНМА.НематериальныйАктив = МестонахождениеНМАБУ.НематериальныйАктив
	|ГДЕ
	|	(МестонахождениеНМАБУ.НематериальныйАктив ЕСТЬ NULL
	|			ИЛИ МестонахождениеНМАБУ.Подразделение <> &Подразделение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНМА.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияПодразделение = НСтр("ru='Нематериальный актив <%1 (%2)> не отражался в учете в местонахождении <%3>';uk='Нематеріальний актив <%1 (%2)> не відображався в обліку в місцезнаходженні <%3>'");

		Пока Выборка.Следующий() Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияПодразделение,
					Выборка.НематериальныйАктив, Выборка.КодНМА, Реквизиты.Подразделение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор,
				Реквизиты.ИмяСписка + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].НематериальныйАктив", 
				"Объект", Отказ);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСоответствиеПодразделениюНМА(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "НематериальныйАктив"; // <СправочникСсылка.НематериальныеАктивы>

	Параметры.Вставить("ТаблицаНМА",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "ИмяСписка,"     // <Строка, 0>
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // Подразделение в котором находится ОС
	+ "Регистратор";   // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьЗаполнениеСчетаУчетаНМА(ТаблицаНМА, ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыЗаполнениеСчетаУчетаНМА(ТаблицаНМА, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаНМА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаНМА", Параметры.ТаблицаНМА);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаНМА.НематериальныйАктив КАК Справочник.НематериальныеАктивы) КАК НематериальныйАктив
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаНМА.НематериальныйАктив,
	|	СчетаУчетаНМА.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ СчетаУчетаНМА
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)) КАК СчетаУчетаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ТаблицаНМА.НематериальныйАктив.Код КАК КодНМА,
	|	СчетаУчетаНМА.СчетУчета
	|ИЗ
	|	ТаблицаНМА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	СчетаУчетаНМА
	|	ПО
	|		ТаблицаНМА.НематериальныйАктив = СчетаУчетаНМА.НематериальныйАктив
	|ГДЕ
	|	(СчетаУчетаНМА.НематериальныйАктив ЕСТЬ NULL
	|			ИЛИ СчетаУчетаНМА.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНМА.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщения = НСтр("ru='Для Нематериального актива <%1 (%2)> не указан счет учета.';uk='Для Нематеріального активу <%1 (%2)> не вказано рахунок обліку.'");

		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Выборка.НематериальныйАктив, Выборка.КодНМА);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор,
			Реквизиты.ИмяСписка + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].НематериальныйАктив", 
			"Объект", Отказ);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыЗаполнениеСчетаУчетаНМА(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "НематериальныйАктив"; // <СправочникСсылка.НематериальныеАктивы>

	Параметры.Вставить("ТаблицаНМА",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСоответствиеНМАНалоговомуНазначению(ТаблицаНМА, ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыСоответствиеНМАНалоговомуНазначению(ТаблицаНМА, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаНМА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("НалоговоеНазначение", Реквизиты.НалоговоеНазначение);
	Запрос.УстановитьПараметр("ТаблицаНМА", Параметры.ТаблицаНМА);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаНМА.НомерСтроки,
		|	ВЫРАЗИТЬ(ТаблицаНМА.НематериальныйАктив КАК Справочник.НематериальныеАктивы) КАК НематериальныйАктив
		|ПОМЕСТИТЬ ТаблицаНМА
		|ИЗ
		|	&ТаблицаНМА КАК ТаблицаНМА
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НематериальныйАктив
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НалоговыеНазначенияНМА.НематериальныйАктив,
		|	НалоговыеНазначенияНМА.НалоговоеНазначение
		|ПОМЕСТИТЬ НалоговыеНазначенияНМА
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И НематериальныйАктив В
		|					(ВЫБРАТЬ
		|						ТаблицаНМА.НематериальныйАктив
		|					ИЗ
		|						ТаблицаНМА КАК ТаблицаНМА)) КАК НалоговыеНазначенияНМА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНМА.НомерСтроки,
		|	ТаблицаНМА.НематериальныйАктив,
		|	ТаблицаНМА.НематериальныйАктив.Код КАК КодНМА,
		|	НалоговыеНазначенияНМА.НалоговоеНазначение
		|ИЗ
		|	ТаблицаНМА КАК ТаблицаНМА
		|		ЛЕВОЕ СОЕДИНЕНИЕ НалоговыеНазначенияНМА КАК НалоговыеНазначенияНМА
		|		ПО ТаблицаНМА.НематериальныйАктив = НалоговыеНазначенияНМА.НематериальныйАктив
		|ГДЕ
		|	НалоговыеНазначенияНМА.НалоговоеНазначение <> &НалоговоеНазначение
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаНМА.НомерСтроки";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияБУ = НСтр("ru='Налоговое Назначение НМА <%1 (%2)> отличается от указанного в документе <%3>';uk='Податкове Призначення НМА <%1 (%2)> відрізняється від зазначеного в документі <%3>'");

		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияБУ,
				Выборка.НематериальныйАктив, Выборка.КодНМА, Реквизиты.НалоговоеНазначение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор,
				Реквизиты.ИмяСписка + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].НематериальныйАктив", 
			"Объект", Отказ);
				
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСоответствиеНМАНалоговомуНазначению(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "НематериальныйАктив"; // <СправочникСсылка.НематериальныеАктивы>

	Параметры.Вставить("ТаблицаНМА",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "НалоговоеНазначение," // <СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции		

// ПРИНЯТИЕ К УЧЕТУ НМА

// Регистрация состояний НМА

Процедура ПроверитьВозможностьИзмененияСостоянияНМА(ТаблицаНМА, ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыВозможностьИзмененияСостоянияНМА(ТаблицаНМА, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаНМА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация );
	Запрос.УстановитьПараметр("Состояние", Реквизиты.Состояние);
	Запрос.УстановитьПараметр("Документ", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ТаблицаНМА", Параметры.ТаблицаНМА);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаНМА.НематериальныйАктив КАК Справочник.НематериальныеАктивы) КАК НематериальныйАктив
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив";
	
	Запрос.Выполнить();
	
	Если Реквизиты.Состояние = Перечисления.ВидыСостоянийНМА.ПринятКУчету Тогда
		
		Запрос.УстановитьПараметр("Дата", Реквизиты.Период);
		Запрос.УстановитьПараметр("Документ", Реквизиты.Регистратор);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияНМАОрганизаций.НематериальныйАктив КАК НематериальныйАктив,
		|	СостоянияНМАОрганизаций.Период КАК ДатаСостояния,
		|	ТаблицаНМА.НомерСтроки,
		|	СостоянияНМАОрганизаций.Регистратор,
		|	СостоянияНМАОрганизаций.Состояние,
		|	СостоянияНМАОрганизаций.Организация
		|ПОМЕСТИТЬ СостоянияНМА
		|ИЗ
		|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНМА КАК ТаблицаНМА
		|		ПО СостоянияНМАОрганизаций.НематериальныйАктив = ТаблицаНМА.НематериальныйАктив
		|			И (СостоянияНМАОрганизаций.Период < &Дата)
		|			И (СостоянияНМАОрганизаций.Регистратор <> &Документ)
		|			И (СостоянияНМАОрганизаций.Активность = ИСТИНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НематериальныйАктив
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияНМА.НематериальныйАктив КАК НематериальныйАктив,
		|	МАКСИМУМ(СостоянияНМА.ДатаСостояния) КАК ДатаСостояния
		|ПОМЕСТИТЬ ДатыПоследнихСостоянийНМА
		|ИЗ
		|	СостоянияНМА КАК СостоянияНМА
		|
		|СГРУППИРОВАТЬ ПО
		|	СостоянияНМА.НематериальныйАктив
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НематериальныйАктив
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияНМА.НематериальныйАктив,
		|	СостоянияНМА.НематериальныйАктив.Код КАК КодНМА,
		|	СостоянияНМА.ДатаСостояния,
		|	СостоянияНМА.НомерСтроки КАК НомерСтроки,
		|	СостоянияНМА.Регистратор,
		|	СостоянияНМА.Организация
		|ИЗ
		|	ДатыПоследнихСостоянийНМА КАК ДатыПоследнихСостоянийНМА
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияНМА КАК СостоянияНМА
		|		ПО ДатыПоследнихСостоянийНМА.НематериальныйАктив = СостоянияНМА.НематериальныйАктив
		|			И ДатыПоследнихСостоянийНМА.ДатаСостояния = СостоянияНМА.ДатаСостояния
		|ГДЕ
		|	СостоянияНМА.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			
			ШаблонСообщения = НСтр("ru='Нематериальный актив <%1 (%2)> принят к учету в организации <%3>
                |документом <%4>. Дата состояния: %5'
                |;uk='Нематеріальний актив <%1 (%2)> прийнятий до обліку в організації <%3>
                |документом <%4>. Дата стану: %5'");
			
			Пока Выборка.Следующий() Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.НематериальныйАктив,
					Выборка.КодНМА, Выборка.Организация, Выборка.Регистратор, Формат(Выборка.ДатаСостояния, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, 
				Реквизиты.ИмяСписка + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].НематериальныйАктив", 
					"Объект", Отказ);
			КонецЦикла;
			
			Возврат;
		КонецЕсли;
	ИначеЕсли Реквизиты.Состояние = Перечисления.ВидыСостоянийНМА.Списан Тогда
		ПроверитьСостояниеНМАПринятоКУчету(Параметры.ТаблицаНМА, Параметры.Реквизиты, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВозможностьИзмененияСостоянияНМА(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "НематериальныйАктив"; // <СправочникСсылка.НематериальныйАктив>

	Параметры.Вставить("ТаблицаНМА",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Состояние," // <ПеречислениеСсылка.ВидыСостоянийНМА> - состояние НМА, которое требуется установить
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Проводки НМА по счетам

Процедура СформироватьДвиженияПринятиеКУчетуНМА(ТаблицаРеквизиты, ТаблицаСпособОтраженияРасходов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПринятиеКУчетуНМА(ТаблицаРеквизиты, ТаблицаСпособОтраженияРасходов);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	Проводка = Движения.Хозрасчетный.Добавить();

	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Проводка.Сумма       = Реквизиты.СтоимостьБУ;
	
	Проводка.СчетДт          = Реквизиты.СчетУчета;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", Реквизиты.НематериальныйАктив);
	
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

	Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеДт = Реквизиты.ПодразделениеДт;
	КонецЕсли;
	
	Проводка.СчетКт          = Реквизиты.СчетУчетаВнеоборотногоАктива;
	
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
	
	Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеКт = Реквизиты.ПодразделениеКт;
	КонецЕсли;
	
	Проводка.Содержание = НСтр("ru='Принят к учету НМА';uk='Прийнятий до обліку НМА'");
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", Реквизиты.НематериальныйАктив);

	 	
	Если ОтражатьВНалоговомУчете Тогда
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = Реквизиты.СтоимостьНУ;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = Реквизиты.СтоимостьНУ;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете Тогда
		Для Каждого СтрокаСписания Из Параметры.ТаблицаСпособОтраженияРасходов Цикл
			
			Проводка             = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма       = 0;
			Проводка.Содержание = НСтр("ru='Приняты к учету расходы на НИОКР';uk='Прийняті до обліку витрати на НДДКР'");
			
			Проводка.СчетДт      = СтрокаСписания.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаСписания.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаСписания.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаСписания.Субконто3);

			Проводка.СчетКт      = Реквизиты.СчетУчетаВнеоборотногоАктива;

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаСписания.Подразделение;
			КонецЕсли;
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.ПодразделениеКт;
			КонецЕсли;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР", Реквизиты.НематериальныйАктив);

			Проводка.СуммаНУДт = СтрокаСписания.СуммаНУДт;
			Проводка.СуммаНУКт = СтрокаСписания.СуммаНУКт;
			
		КонецЦикла;
	КонецЕсли;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеКУчетуНМА(ТаблицаРеквизиты, ТаблицаСпособОтраженияРасходов)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата>
	+ "НематериальныйАктив,"          // <СправочникСсылка.НематериальныеАктивы>
	+ "Организация,"                  // <СправочникСсылка.Организации>
	+ "ПодразделениеДт,"              
	+ "ПодразделениеКт,"              
	+ "Регистратор,"                  // <ДокументСсылка.*>
	+ "СчетУчета,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет на который принимается к учету НМА
	+ "СчетУчетаВнеоборотногоАктива," // <ПланСчетовСсылка.Хозрасчетный> - счет учета нематериального актива
	+ "СтоимостьБУ,"
	+ "СтоимостьНУ"
	;

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"                  // <Число>
	+ "СчетЗатрат,"                   // <ПланСчетовСсылка.Хозрасчетный>
	+ "Подразделение,"                // 
	+ "Субконто1,"                    //
	+ "Субконто2,"                    //
	+ "Субконто3,"                    //
	+ "Коэффициент,"                  // <Число>
	+ "СуммаНУДт,"                    // <Число>
	+ "СуммаПРДт,"                    // <Число>
	+ "СуммаВРДт,"                    // <Число>
	+ "СуммаНУКт,"                    // <Число>
	+ "СуммаПРКт,"                    // <Число>
	+ "СуммаВРКт"                    // <Число>
	;

	Параметры.Вставить("ТаблицаСпособОтраженияРасходов",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаСпособОтраженияРасходов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// Отражение НМА в учете

Процедура СформироватьДвиженияРегистрацияСчетовБухгалтерскогоУчетаНМА(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияСчетовБухгалтерскогоУчетаНМА(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Движение = Движения.СчетаБухгалтерскогоУчетаНМА.Добавить();
	Движение.Период                    = Реквизиты.Период;
	Движение.НематериальныйАктив       = Реквизиты.НематериальныйАктив;
	Движение.Организация               = Реквизиты.Организация;
	Движение.СчетУчета                 = Реквизиты.СчетУчета;
	Движение.СчетНачисленияАмортизации = Реквизиты.СчетНачисленияАмортизации;

	Движения.СчетаБухгалтерскогоУчетаНМА.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияСчетовБухгалтерскогоУчетаНМА(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "НематериальныйАктив,"       // <СправочникСсылка.НематериальныеАктивы>
	+ "СчетНачисленияАмортизации," // <ПланСчетовСсылка.Хозрасчетный> - счет начисления амортизации ОС
	+ "СчетУчета";                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета ОС

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияИзменениеСпособовОтраженияРасходовПоАмортизацииНМАБУ(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииНМАБУ(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Движение = Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Реквизиты);

	Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииНМАБУ(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                // <Дата>
	+ "Организация,"                           // <СправочникСсылка.Организации>
	+ "НематериальныйАктив,"                           // <СправочникСсылка.НематериальныеАктивы
	+ "СтатьяРасходов, АналитикаРасходов";

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Первоначальниые сведения НМА

Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийНМАБУ(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАБУ(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
	Движение.Период                      = Реквизиты.Период;
	Движение.НематериальныйАктив         = Реквизиты.НематериальныйАктив;
	Движение.Организация                 = Реквизиты.Организация;
	Движение.ПервоначальнаяСтоимость     = Реквизиты.СтоимостьБУ;
	Движение.НачислятьАмортизацию        = Реквизиты.НачислятьАмортизациюБУ;
	Движение.СпособНачисленияАмортизации = Реквизиты.СпособНачисленияАмортизацииБУ;
	Движение.СрокПолезногоИспользования  = Реквизиты.СрокПолезногоИспользованияБУ;
	 
	Если Реквизиты.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции тогда
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = Реквизиты.ОбъемПродукцииРаботДляВычисленияАмортизации;
	КонецЕсли;

	Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАБУ(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                      // <Дата>
	+ "НематериальныйАктив,"           
	+ "Организация,"                 // <СправочникСсылка.Организации>
	+ "СтоимостьБУ,"           
	+ "НачислятьАмортизациюБУ,"           
	+ "СпособНачисленияАмортизацииБУ," // <ПеречислениеСсылка.СпособыНачисленияАмортизацииНМА> - способ начисления
		// амортизации НМА по бухгалтерскому учету
	+ "ОбъемПродукцииРаботДляВычисленияАмортизации,"
	+ "СрокПолезногоИспользованияБУ";            
	 
	

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийНМАНУ(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАНУ(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
	Движение.Период                     = Реквизиты.Период;
	Движение.Организация                = Реквизиты.Организация;
	Движение.НематериальныйАктив        = Реквизиты.НематериальныйАктив;
	Движение.НачислятьАмортизацию       = Реквизиты.НачислятьАмортизациюНУ;
	Движение.ПервоначальнаяСтоимостьНУ  = Реквизиты.СтоимостьНУ;
	Движение.СрокПолезногоИспользования = Реквизиты.СрокПолезногоИспользованияНУ;

	Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАНУ(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата>
	+ "Организация,"                  // <СправочникСсылка.Организации>
	+ "НачислятьАмортизациюНУ,"
	+ "СрокПолезногоИспользованияНУ," // <Число, 4, 0> - срок полезного использования ОС для целей начисления
										// амортизации по налоговому учету
	+ "НематериальныйАктив,"          // <СправочникСсылка.НематериальныхАктивов>
	+ "СтоимостьНУ";                  // <Число, 15, 2> - первоначальная стоимость ОС по данным налогового учета

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции



// СОСТОЯНИЕ НМА

//Получает документ и дату для указанного состояния нематериального актива по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияНМА(НематериальныйАктив, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеНМА", 	Состояние);
	Запрос.УстановитьПараметр("НМА",            НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияНМАОрганизаций.Регистратор КАК Документ
		|ИЗ
		|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
		|ГДЕ
		|	СостоянияНМАОрганизаций.НематериальныйАктив = &НМА
		|	И СостоянияНМАОрганизаций.Организация = &Организация
		|	И СостоянияНМАОрганизаций.Состояние = &СостояниеНМА
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияНМАОрганизаций.Период УБЫВ";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Документ.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

