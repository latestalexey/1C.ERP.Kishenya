////////////////////////////////////////////////////////////////////////////////
// КонтрактыДоговорыСотрудников: Процедуры и функции подсистемы учета договоров и контрактов сотрудников.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет движения документа
//		СведенияКонтрактаДоговораСотрудника.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить кадровые движения.
//	СведенияКонтрактаДоговораСотрудника - таблица значений с полями аналогичными структуре регистра сведений
//	                                      СведенияКонтрактаДоговораСотрудника.
// 		
Процедура СформироватьДвиженияОсновныхДанныхИСведенийОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах, ЗаписыватьОсновныеДанные = Истина) Экспорт
		
	Если ЗаписыватьОсновныеДанные Тогда
		СформироватьДвиженияОсновныхДанныхОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах);
	КонецЕсли;	
	
	СформироватьДвиженияСведенийОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах);
	
КонецПроцедуры

// Возвращает структуру описывающую временную таблицу отборов для получения сведений
// о контрактах и договорах сотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц
//		ИмяВТОтборов			- Строка
//
// Возвращаемое значение:
//		Структура - содержит ключи:
//			* МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц.
//			* ИмяВТОтборов				- Строка.
//
Функция ОписательВременныхТаблицДляСоздатьВТСведенияОКонтрактахДоговорахСотрудников(МенеджерВременныхТаблиц, ИмяВТОтборов = "ВТСотрудникиПериоды") Экспорт
	
	ОписательВТ = Новый Структура;
	
	ОписательВТ.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВТ.Вставить("ИмяВТОтборов", 			ИмяВТОтборов);
	
	Возврат ОписательВТ;
	
КонецФункции

// Создает временную таблицу, содержащую записи регистра сведений ОсновныеДанныеКонтрактаДоговораСотрудника и 
// СведенияКонтрактаДоговораСотрудника по отбору переданному во временной таблице, содержащейся в
// МенеджереВременныхТаблиц.
//
// Параметры:
//		ТолькоРазрешенные						- Булево
//		ОписательВременныхТаблиц				- Структура (см.
//		                              ОписательВременныхТаблицДляСоздатьВТСведенияОКонтрактахДоговорахСотрудников).
//
// Возвращаемое значение:
//		РезультатЗапроса
//
Процедура СоздатьВТСведенияОКонтрактахДоговорахСотрудников(ТолькоРазрешенные, ОписательВременныхТаблиц) Экспорт
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
	"ОсновныеДанныеКонтрактаДоговораСотрудника",
	ОписательВременныхТаблиц.МенеджерВременныхТаблиц,
	Истина,
	ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписательВременныхТаблиц.ИмяВТОтборов),
	ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
	"СведенияКонтрактаДоговораСотрудника",
	ОписательВременныхТаблиц.МенеджерВременныхТаблиц,
	Истина,
	ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписательВременныхТаблиц.ИмяВТОтборов),
	ПараметрыПостроения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СотрудникиПериоды.Период,
	|	СотрудникиПериоды.Сотрудник,";
	
	ОсновныеДанныеДоговораКонтракта = ОсновныеДанныеДоговораКонтракта();
	Для каждого Поле Из ОсновныеДанныеДоговораКонтракта Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ОсновныеДанныеКонтрактаДоговора." + Поле + ","
	КонецЦикла;
	
	СведенияОДоговореКонтракте = СведенияОДоговореКонтракте();
	Для каждого Поле Из СведенияОДоговореКонтракте Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	СведенияОДоговореКонтракте." + Поле + ","
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ВТСведенияОКонтрактахДоговорахСотрудников
	|ИЗ
	|	 " + ОписательВременныхТаблиц.ИмяВТОтборов + " КАК СотрудникиПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеДанныеКонтрактаДоговораСотрудникаСрезПоследних КАК ОсновныеДанныеКонтрактаДоговора
	|		ПО СотрудникиПериоды.Сотрудник = ОсновныеДанныеКонтрактаДоговора.Сотрудник
	|			И СотрудникиПериоды.Период = ОсновныеДанныеКонтрактаДоговора.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияКонтрактаДоговораСотрудникаСрезПоследних КАК СведенияОДоговореКонтракте
	|		ПО СотрудникиПериоды.Сотрудник = СведенияОДоговореКонтракте.Сотрудник
	|			И СотрудникиПериоды.Период = СведенияОДоговореКонтракте.Период";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает структуру содержащую сведения о договоре или контракте сотрудника.
//
// Параметры:
//		Период		- Дата
//		Сотрудник 	- СправочникСсылка.Сотрудники
//
// Возвращаемое значение:
//		Структура (см. ОписательВременныхТаблицДляСоздатьВТСведенияОКонтрактахДоговорахСотрудников).
//
Функция СведенияОКонтрактеДоговореСотрудника(Период, Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиПериоды";
	
	Запрос.УстановитьПараметр("Период", 	Период);
	Запрос.УстановитьПараметр("Сотрудник", 	Сотрудник);
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = ОписательВременныхТаблицДляСоздатьВТСведенияОКонтрактахДоговорахСотрудников(Запрос.МенеджерВременныхТаблиц);
	
	СоздатьВТСведенияОКонтрактахДоговорахСотрудников(Истина, ОписательВременныхТаблиц);
	
	СведенияОКонтрактеДоговореСотрудника = СтруктураСведенийОДоговореКонтракте();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ";
	Для каждого Поле Из СведенияОКонтрактеДоговореСотрудника Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	СведенияОКонтрактахДоговорах." + Поле.Ключ + ",";
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	ВТСведенияОКонтрактахДоговорахСотрудников КАК СведенияОКонтрактахДоговорах";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СведенияОКонтрактеДоговореСотрудника, Выборка);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат СведенияОКонтрактеДоговореСотрудника;
	
КонецФункции

#Область ПервоначальноеЗаполнениеИОбновлениеИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	

	//ВРЕМЕННО
	//Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров) Тогда
	//	Обработчик = Обработчики.Добавить();
	//	Обработчик.Версия = "3.0.18.35";
	//	Обработчик.Процедура = "Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров.НачальноеЗаполнение";
	//	Обработчик.НачальноеЗаполнение = Истина;
	//	Обработчик.ОбщиеДанные = Истина;
	//КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьПризнакСрочныйДоговорВДокументеПриемНаРаботу() Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемНаРаботу.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора <> ДАТАВРЕМЯ(1, 1, 1)";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.СрочныйДоговор = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьВидДоговораВКадровомУчетеСотрудников(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СотрудникиДокумента = Новый Массив;
	ВидДоговораОбновлен = Ложь;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПриемНаРаботу.Ссылка,
	|	ПриемНаРаботу.Сотрудник,
	|	ПриемНаРаботу.Проведен
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)";
	Результат = Запрос.Выполнить();	
	Если Не Результат.Пустой() Тогда
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СотрудникиДокумента.Очистить();
			СотрудникиДокумента.Добавить(Выборка.Сотрудник);
			ЗаполнитьВидДоговораДокумента(Выборка.Ссылка, Выборка.Проведен, СотрудникиДокумента);
		КонецЦикла;	
	КонецЕсли;
	
	Если Параметры.ОбработкаЗавершена Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	НачальнаяШтатнаяРасстановкаСотрудники.Ссылка КАК Ссылка,
		|	НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник КАК Сотрудник,
		|	НачальнаяШтатнаяРасстановкаСотрудники.Ссылка.Проведен
		|ИЗ
		|	Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК НачальнаяШтатнаяРасстановкаСотрудники
		|ГДЕ
		|	НачальнаяШтатнаяРасстановкаСотрудники.Ссылка.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Сотрудник";
		Результат = Запрос.Выполнить();	
		Если Не Результат.Пустой() Тогда
			
			Параметры.ОбработкаЗавершена = Ложь;
			
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
				
				СотрудникиДокумента.Очистить();
				
				Пока Выборка.Следующий()  Цикл
					Если СотрудникиДокумента.Найти(Выборка.Сотрудник) = Неопределено Тогда
						СотрудникиДокумента.Добавить(Выборка.Сотрудник);
					КонецЕсли;
				КонецЦикла;  
				
				ЗаполнитьВидДоговораДокумента(Выборка.Ссылка, Выборка.Проведен, СотрудникиДокумента);
				
			КонецЦикла;	
			
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ОбработкаЗавершена Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.Сотрудник,
		|	КадровыйПеревод.Проведен
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)";
		Результат = Запрос.Выполнить();	
		Если Не Результат.Пустой() Тогда
			
			Параметры.ОбработкаЗавершена = Ложь;
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СотрудникиДокумента.Очистить();
				СотрудникиДокумента.Добавить(Выборка.Сотрудник);
				ЗаполнитьВидДоговораДокумента(Выборка.Ссылка, Выборка.Проведен, СотрудникиДокумента);
				
			КонецЦикла;	
			
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ОбработкаЗавершена Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Увольнение.Ссылка,
		|	Увольнение.Сотрудник,
		|	Увольнение.Проведен
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО Увольнение.Ссылка = КадроваяИсторияСотрудников.Регистратор
		|			И (КадроваяИсторияСотрудников.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))";
		Результат = Запрос.Выполнить();	
		Если Не Результат.Пустой() Тогда
			
			Параметры.ОбработкаЗавершена = Ложь;
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СотрудникиДокумента.Очистить();
				СотрудникиДокумента.Добавить(Выборка.Сотрудник);
				ЗаполнитьВидДоговораДокумента(Выборка.Ссылка, Выборка.Проведен, СотрудникиДокумента);
				
			КонецЦикла;	
			
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ОбработкаЗавершена Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка
		|ПОМЕСТИТЬ ВТДокументыБезСведенийОДоговорах
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
		|		ПО (СведенияКонтрактаДоговораСотрудника.Регистратор = ПриемНаРаботу.Ссылка)
		|ГДЕ
		|	СведенияКонтрактаДоговораСотрудника.Регистратор ЕСТЬ NULL 
		|	И ПриемНаРаботу.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
		|		ПО (СведенияКонтрактаДоговораСотрудника.Регистратор = КадровыйПеревод.Ссылка)
		|ГДЕ
		|	СведенияКонтрактаДоговораСотрудника.Регистратор ЕСТЬ NULL 
		|	И КадровыйПеревод.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ВТДокументыБезСведенийОДоговорах.Ссылка
		|ПОМЕСТИТЬ ВТДокументыБезСведенийОДоговорах1000
		|ИЗ
		|	ВТДокументыБезСведенийОДоговорах КАК ВТДокументыБезСведенийОДоговорах
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка КАК Регистратор,
		|	ПриемНаРаботу.ДатаПриема КАК Период,
		|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.Организация КАК Организация,
		|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора КАК ДатаОкончания,
		|	ПриемНаРаботу.Руководитель КАК ПредставительНанимателя,
		|	ПриемНаРаботу.ДолжностьРуководителя КАК ДолжностьПредставителяНанимателя,
		|	ПриемНаРаботу.ОснованиеПредставителяНанимателя,
		|	ПриемНаРаботу.ВидАктаГосоргана,
		|	ПриемНаРаботу.СрочныйДоговор,
		|	ПриемНаРаботу.СрокЗаключенияДоговора,
		|	ПриемНаРаботу.ОснованиеСрочногоДоговора,
		|	ПриемНаРаботу.ОборудованиеРабочегоМеста,
		|	ПриемНаРаботу.ИныеУсловияДоговора,
		|	ПриемНаРаботу.ТрудовойДоговорДата КАК УдалитьДатаДоговораКонтракта,
		|	ПриемНаРаботу.ДатаПриема КАК УдалитьДатаНачала,
		|	ПриемНаРаботу.ТрудовойДоговорНомер КАК УдалитьНомерДоговораКонтракта,
		|	ПриемНаРаботу.ПоступлениеНаСлужбуВпервые КАК УдалитьПоступлениеНаСлужбуВпервые,
		|	ПриемНаРаботу.СпособПоступленияНаСлужбу КАК УдалитьСпособПоступленияНаСлужбу
		|ИЗ
		|	ВТДокументыБезСведенийОДоговорах1000 КАК ВТДокументыБезСведенийОДоговорах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ПО ВТДокументыБезСведенийОДоговорах.Ссылка = ПриемНаРаботу.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.ДатаНачала,
		|	КадровыйПеревод.Сотрудник,
		|	КадровыйПеревод.ФизическоеЛицо,
		|	КадровыйПеревод.Организация,
		|	КадровыйПеревод.ДатаЗавершенияТрудовогоДоговора,
		|	КадровыйПеревод.Руководитель,
		|	КадровыйПеревод.ДолжностьРуководителя,
		|	КадровыйПеревод.ОснованиеПредставителяНанимателя,
		|	КадровыйПеревод.ВидАктаГосоргана,
		|	КадровыйПеревод.СрочныйДоговор,
		|	КадровыйПеревод.СрокЗаключенияДоговора,
		|	КадровыйПеревод.ОснованиеСрочногоДоговора,
		|	КадровыйПеревод.ОборудованиеРабочегоМеста,
		|	КадровыйПеревод.ИныеУсловияДоговора,
		|	КадровыйПеревод.ТрудовойДоговорДата,
		|	КадровыйПеревод.ДатаНачала,
		|	КадровыйПеревод.ТрудовойДоговорНомер,
		|	КадровыйПеревод.ПоступлениеНаСлужбуВпервые,
		|	КадровыйПеревод.СпособПоступленияНаСлужбу
		|ИЗ
		|	ВТДокументыБезСведенийОДоговорах1000 КАК ВТДокументыБезСведенийОДоговорах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод КАК КадровыйПеревод
		|		ПО ВТДокументыБезСведенийОДоговорах.Ссылка = КадровыйПеревод.Ссылка";
		Результат = Запрос.Выполнить();	
		Если Не Результат.Пустой() Тогда
			
			Параметры.ОбработкаЗавершена = Ложь;
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НачатьТранзакцию();
				Попытка
					
					Блокировка = Новый БлокировкаДанных;					
					ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияКонтрактаДоговораСотрудника.НаборЗаписей");
					ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
					Блокировка.Заблокировать();
					// Заполним сведения о контрактах и договорах сотрудников.
					
					НаборЗаписей = РегистрыСведений.СведенияКонтрактаДоговораСотрудника.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
					Запись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Выборка);
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
					
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					
					ТекстСообщения = НСтр("ru='Не удалось обработать %Документ% по причине: %Причина%';uk='Не вдалося обробити %Документ% з причини: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Выборка.Регистратор);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Регистратор.Метаданные(),
					Выборка.Регистратор,
					ТекстСообщения);
					
				КонецПопытки;
				
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПеренестиОсновныеДанныеДоговоровКонтрактовСотрудников() Экспорт
	
	УдалитьСведенияКонтрактаДоговораНепроведенныхРегистраторов();
	
	ПеренестиЗаписиОсновныхДанныхДоговоровКонтрактовСотрудников();
	
	ПеренестиИсправленияОсновныхДанныхДоговоровКонтрактовСотрудников();
	
КонецПроцедуры

Процедура УдалитьСведенияКонтрактаДоговораНепроведенныхРегистраторов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияКонтрактаДоговораСотрудника.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ПО СведенияКонтрактаДоговораСотрудника.Регистратор = ПриемНаРаботу.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПриемНаРаботу.Ссылка ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ПриемНаРаботу.Проведен = ЛОЖЬ
	|		КОНЕЦ";
	
	Результат = Запрос.Выполнить();	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.СведенияКонтрактаДоговораСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Регистратор"].Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиЗаписиОсновныхДанныхДоговоровКонтрактовСотрудников()
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияКонтрактаДоговораСотрудника.УдалитьНомерДоговораКонтракта КАК НомерДоговораКонтракта,
	|	СведенияКонтрактаДоговораСотрудника.УдалитьДатаДоговораКонтракта КАК ДатаДоговораКонтракта,
	|	СведенияКонтрактаДоговораСотрудника.УдалитьПоступлениеНаСлужбуВпервые КАК ПоступлениеНаСлужбуВпервые,
	|	СведенияКонтрактаДоговораСотрудника.УдалитьСпособПоступленияНаСлужбу КАК СпособПоступленияНаСлужбу,
	|	СведенияКонтрактаДоговораСотрудника.Период,
	|	СведенияКонтрактаДоговораСотрудника.Регистратор КАК Регистратор,
	|	СведенияКонтрактаДоговораСотрудника.НомерСтроки,
	|	СведенияКонтрактаДоговораСотрудника.Сотрудник,
	|	СведенияКонтрактаДоговораСотрудника.ФизическоеЛицо,
	|	СведенияКонтрактаДоговораСотрудника.Организация
	|ИЗ
	|	РегистрСведений.СведенияКонтрактаДоговораСотрудника КАК СведенияКонтрактаДоговораСотрудника
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Результат = Запрос.Выполнить();	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			НаборЗаписей = РегистрыСведений.ОсновныеДанныеКонтрактаДоговораСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["Регистратор"].Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиИсправленияОсновныхДанныхДоговоровКонтрактовСотрудников()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияКонтрактаДоговораСотрудникаИспр.РегистраторИзмерение КАК РегистраторИзмерение,
	|	СведенияКонтрактаДоговораСотрудникаИспр.ПериодИзмерение,
	|	СведенияКонтрактаДоговораСотрудникаИспр.Сотрудник,
	|	СведенияКонтрактаДоговораСотрудникаИспр.ФизическоеЛицо,
	|	СведенияКонтрактаДоговораСотрудникаИспр.Организация,
	|	СведенияКонтрактаДоговораСотрудникаИспр.УдалитьДатаДоговораКонтракта КАК ДатаДоговораКонтракта,
	|	СведенияКонтрактаДоговораСотрудникаИспр.УдалитьНомерДоговораКонтракта КАК НомерДоговораКонтракта,
	|	СведенияКонтрактаДоговораСотрудникаИспр.УдалитьПоступлениеНаСлужбуВпервые КАК ПоступлениеНаСлужбуВпервые,
	|	СведенияКонтрактаДоговораСотрудникаИспр.УдалитьСпособПоступленияНаСлужбу КАК СпособПоступленияНаСлужбу
	|ИЗ
	|	РегистрСведений.СведенияКонтрактаДоговораСотрудникаИспр КАК СведенияКонтрактаДоговораСотрудникаИспр";
	
	Результат = Запрос.Выполнить();	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ОсновныеДанныеКонтрактаДоговораСотрудникаИспр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор["РегистраторИзмерение"].Установить(Выборка.РегистраторИзмерение);
			НаборЗаписей.Отбор["ПериодИзмерение"].Установить(Выборка.ПериодИзмерение);
			НаборЗаписей.Отбор["Сотрудник"].Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор["ФизическоеЛицо"].Установить(Выборка.ФизическоеЛицо);
			НаборЗаписей.Отбор["Организация"].Установить(Выборка.Организация);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательные процедуры и функции для обновления ИБ.

// Предназначена для обновления вида договора по ссылке на ПриемНаРаботу, КадровыйПеревод, Увольнение,
// НачальнаяШтатнаяРасстановка.
// Вид договора заполняется непосредственно в в документе и в движениях по регистру сведений "Кадровая история" этого
// документа.
// Для документа Увольнение - только в регистре "Кадровая история".
//
Процедура ЗаполнитьВидДоговораДокумента(Ссылка, Проведен, СотрудникиДокумента)
	
	НачатьТранзакцию();
	
	Попытка
		
		МетаданныеДокумента = Ссылка.Метаданные();
		
		Если МетаданныеДокумента.Реквизиты.Найти("ВидДоговора") = Неопределено
			И НЕ Проведен Тогда
			Возврат;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		// Если в документе нет реквизита ВидДоговора, то блокировать его не надо, записывать его не будем.
		Если НЕ МетаданныеДокумента.Реквизиты.Найти("ВидДоговора") = Неопределено Тогда
			ЭлементБлокировки = Блокировка.Добавить("Документ." + МетаданныеДокумента.Имя);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		КонецЕсли;
		
		Если Проведен Тогда
			// Регистр КадроваяИстория подчинен регистратору, заблокируем по нему.
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КадроваяИсторияСотрудников.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Ссылка);
			
			// Регистр ТекущиеКадровыеДанные не подчинен регистратору, но "настоящее" измерение только одно - Сотрудник.
			Для каждого Сотрудник Из СотрудникиДокумента Цикл
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТекущиеКадровыеДанныеСотрудников");
				ЭлементБлокировки.УстановитьЗначение("Сотрудник", Сотрудник);
			КонецЦикла;		
		КонецЕсли;
		
		Блокировка.Заблокировать();
		
		// Заполним реквизит "ВидДоговора" в документе.
		Если НЕ МетаданныеДокумента.Реквизиты.Найти("ВидДоговора") = Неопределено Тогда
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если ДокументОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			Если ДокументОбъект.ВидДоговора <> Перечисления.ВидыДоговоровССотрудниками.ПустаяСсылка() Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;				
			
			ДокументОбъект.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		КонецЕсли;
		
		Если Проведен Тогда
			// Заполним данные кадровой истории сотрудников.
			НаборЗаписей = РегистрыСведений.КадроваяИсторияСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
			НаборЗаписей.Прочитать();
			Для каждого Запись Из НаборЗаписей Цикл
				Запись.ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			// Заполним текущие кадровые данные сотрудников.
			Для каждого Сотрудник Из СотрудникиДокумента Цикл
				НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник); 
				НаборЗаписей.Прочитать();
				Для каждого Запись Из НаборЗаписей Цикл
					Запись.ТекущийВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор;
				КонецЦикла;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Не удалось обработать %Документ% по причине: %Причина%';uk='Не вдалося обробити %Документ% з причини: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Предупреждение,
		МетаданныеДокумента,
		Ссылка,
		ТекстСообщения);
		
	КонецПопытки;
КонецПроцедуры

#КонецОбласти 

#Область ОбновлениеКлассификаторовОснованийПриемаУвольненияСотрудников

// Процедура - Заполнить справочник из макета классификатора
//
// Параметры:
//  ИмяСправочника	 				- Строка - Имя объекта метаданных классификатор которого надо получить, например: "ОснованияЗаключенияСрочныхТрудовыхДоговоров"
//  ИмяМакетаСКлассификатором		- Строка - Имя макета, содержащего классификатор справочника в XML формате
//  СоответствиеПолей			 	- Соответствие - ключ - имя реквизита справочника, значение - имя поля данных классификатора  
//
Процедура ЗаполнитьСправочникИзМакетаКлассификатора(ИмяСправочника, ИмяМакетаСКлассификатором, СоответствиеПолей) Экспорт
	
	Если СправочникЗаполнен(ИмяСправочника) Тогда 
		Возврат;
	КонецЕсли;	
	
	КлассификаторСправочника = КлассификаторСправочникаИзМакета(ИмяСправочника, ИмяМакетаСКлассификатором);
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник." + ИмяСправочника);
	
	Для Каждого СтрокаКлассификатора Из КлассификаторСправочника Цикл
		СправочникОбъект = Менеджер.СоздатьЭлемент();
		Для каждого Поле Из СоответствиеПолей Цикл
			СправочникОбъект[Поле.Ключ] = СтрокаКлассификатора[Поле.Значение];
		КонецЦикла;
		СправочникОбъект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
		СправочникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Обновляет поля справочника из макета классификатора
//
// Параметры:
//  ИмяСправочника	 				- Строка - Имя объекта метаданных классификатор которого надо получить, например: "ОснованияЗаключенияСрочныхТрудовыхДоговоров"
//  ИмяМакетаСКлассификатором		- Строка - Имя макета, содержащего классификатор справочника в XML формате
//  ИмяРеквизитаПоиска			 	- Строка - имя реквизита по которому будет искаться обновляемый элемент справочника 
//  ИмяПоляЗначенияПоиска		 	- Строка - имя поля в данных классификатора которое содержит ключ для поиска элемента классификатора
//  ОбновляемыеПоля				 	- Соответствие - ключ - имя реквизита справочника, значение - имя поля данных классификатора  
//
Процедура ОбновитьПоляСправочникаИзМакетаКлассификатора(ИмяСправочника, ИмяМакетаСКлассификатором, ИмяРеквизитаПоиска, ИмяПоляЗначенияПоиска, ОбновляемыеПоля) Экспорт 
	
	Если Не СправочникЗаполнен(ИмяСправочника) Тогда 
		Возврат;
	КонецЕсли;	
	
	КлассификаторСправочника = КлассификаторСправочникаИзМакета(ИмяСправочника, ИмяМакетаСКлассификатором);
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник." + ИмяСправочника);
	
	Для Каждого СтрокаКлассификатора Из КлассификаторСправочника Цикл
		
		СправочникСсылка = Менеджер.НайтиПоРеквизиту(ИмяРеквизитаПоиска, СтрокаКлассификатора[ИмяПоляЗначенияПоиска]);
		
		Если ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
			
			Для каждого ОбновляемоеПоле Из ОбновляемыеПоля Цикл
				СправочникОбъект[ОбновляемоеПоле.Ключ] = СтрокаКлассификатора[ОбновляемоеПоле.Значение];
			КонецЦикла;
			
			СправочникОбъект.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
			СправочникОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция получает классификатор справочника из XML-классификатора хранимого в макете
//
// Параметры:
//  ИмяСправочника	 - Строка - Имя объекта метаданных классификатор которого надо получить, например: "ОснованияЗаключенияСрочныхТрудовыхДоговоров"
//  ИмяМакетаСКлассификатором		 - Строка - Имя макета, содержащего классификатор справочника в XML формате
// 
// Возвращаемое значение:
//  Данные - таблица значений, содержащая данные из XML-классификатора хранимого в макете
//
Функция КлассификаторСправочникаИзМакета(ИмяСправочника, ИмяМакетаСКлассификатором) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник." + ИмяСправочника);
	
	Макет = Менеджер.ПолучитьМакет(ИмяМакетаСКлассификатором);	
	
	КлассификаторXML = Макет.ПолучитьТекст();
	
	Возврат ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
КонецФункции

// Функция - Справочник заполнен
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, заполненность которого надо проверить
// 
// Возвращаемое значение:
//  Булево - Истина, если справочник содержит хотя бы один элемент
//
Функция СправочникЗаполнен(ИмяСправочника) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	&ИмяСправочника КАК Справочник";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция СтруктураСведенийОДоговореКонтракте()
	
	СтруктураСведений = Новый Структура;
	
	ОсновныеДанныеДоговораКонтракта = ОсновныеДанныеДоговораКонтракта();
	Для каждого Поле Из ОсновныеДанныеДоговораКонтракта Цикл
		СтруктураСведений.Вставить(Поле);
	КонецЦикла;
	
	СведенияОДоговореКонтракте = СведенияОДоговореКонтракте();
	Для каждого Поле Из СведенияОДоговореКонтракте Цикл
		СтруктураСведений.Вставить(Поле);
	КонецЦикла;
	
	Возврат СтруктураСведений;
	
КонецФункции 

Функция ОсновныеДанныеДоговораКонтракта()
	
	ОсновныеДанные = Новый Массив;
	
	ОсновныеДанные.Добавить("ДатаДоговораКонтракта");
	ОсновныеДанные.Добавить("НомерДоговораКонтракта");
	ОсновныеДанные.Добавить("ДатаНачала");
	ОсновныеДанные.Добавить("ПоступлениеНаСлужбуВпервые");
	
	Возврат ОсновныеДанные;
	
КонецФункции

Функция СведенияОДоговореКонтракте()
	
	Сведения = Новый Массив;
	
	Сведения.Добавить("ПредставительНанимателя");
	Сведения.Добавить("ДолжностьПредставителяНанимателя");
	Сведения.Добавить("ОснованиеПредставителяНанимателя");
	Сведения.Добавить("ОборудованиеРабочегоМеста");
	Сведения.Добавить("ИныеУсловияДоговора");
	Сведения.Добавить("ВидАктаГосоргана");
	Сведения.Добавить("СрочныйДоговор");
	Сведения.Добавить("ДатаОкончания");
	Сведения.Добавить("СрокЗаключенияДоговора");
	Сведения.Добавить("ОснованиеСрочногоДоговора");
	
	Возврат Сведения; 
	
КонецФункции

Процедура СформироватьДвиженияОсновныхДанныхОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах)
	
	Если СведенияОКонтрактахДоговорах.Количество() > 0 Тогда
		Движения.ОсновныеДанныеКонтрактаДоговораСотрудника.Записывать = Истина;
	КонецЕсли; 
	
	Для Каждого СтрокаДанных Из СведенияОКонтрактахДоговорах Цикл	
		ДобавитьДвижениеОсновныхДанныхКонтрактаДоговораСотрудника(Движения, СтрокаДанных);
	КонецЦикла;
	
	Движения.ОсновныеДанныеКонтрактаДоговораСотрудника.Записать();
	Движения.ОсновныеДанныеКонтрактаДоговораСотрудника.Записывать = Ложь;
	
КонецПроцедуры

Процедура ДобавитьДвижениеОсновныхДанныхКонтрактаДоговораСотрудника(Движения, ДанныеДоговора)
	
	НоваяСтрока = Движения.ОсновныеДанныеКонтрактаДоговораСотрудника.Добавить();
	
	НоваяСтрока.Период 			= ДанныеДоговора.Период;
	НоваяСтрока.Сотрудник 		= ДанныеДоговора.Сотрудник;
	НоваяСтрока.ФизическоеЛицо 	= ДанныеДоговора.ФизическоеЛицо;
	НоваяСтрока.Организация 	= ДанныеДоговора.Организация;
	
	НоваяСтрока.ДатаДоговораКонтракта 		= ДанныеДоговора.ДатаДоговораКонтракта; 
	НоваяСтрока.НомерДоговораКонтракта 		= ДанныеДоговора.НомерДоговораКонтракта;
	НоваяСтрока.ДатаНачала 					= ДанныеДоговора.ДатаНачала;
	НоваяСтрока.ПоступлениеНаСлужбуВпервые 	= ДанныеДоговора.ПоступлениеНаСлужбуВпервые;
	
КонецПроцедуры

Процедура СформироватьДвиженияСведенийОКонтрактахДоговорах(Движения, СведенияОКонтрактахДоговорах)
	
	Если СведенияОКонтрактахДоговорах.Количество() > 0 Тогда
		Движения.СведенияКонтрактаДоговораСотрудника.Записывать = Истина;
	КонецЕсли; 
	
	Для Каждого СтрокаСведений Из СведенияОКонтрактахДоговорах Цикл	
		ДобавитьДвижениеСведенийКонтрактаДоговораСотрудника(Движения, СтрокаСведений);
	КонецЦикла;
	
	Движения.СведенияКонтрактаДоговораСотрудника.Записать();
	Движения.СведенияКонтрактаДоговораСотрудника.Записывать = Ложь;
	
КонецПроцедуры

Процедура ДобавитьДвижениеСведенийКонтрактаДоговораСотрудника(Движения, ДанныеДоговора)
	
	НоваяСтрока = Движения.СведенияКонтрактаДоговораСотрудника.Добавить();
	
	НоваяСтрока.Период 			= ДанныеДоговора.Период;
	НоваяСтрока.Сотрудник 		= ДанныеДоговора.Сотрудник;
	НоваяСтрока.ФизическоеЛицо 	= ДанныеДоговора.ФизическоеЛицо;
	НоваяСтрока.Организация 	= ДанныеДоговора.Организация;
	
	НоваяСтрока.ПредставительНанимателя 			= ДанныеДоговора.ПредставительНанимателя;
	НоваяСтрока.ДолжностьПредставителяНанимателя 	= ДанныеДоговора.ДолжностьПредставителяНанимателя;
	НоваяСтрока.ОснованиеПредставителяНанимателя 	= ДанныеДоговора.ОснованиеПредставителяНанимателя;
	НоваяСтрока.ОборудованиеРабочегоМеста 			= ДанныеДоговора.ОборудованиеРабочегоМеста;
	НоваяСтрока.ИныеУсловияДоговора 				= ДанныеДоговора.ИныеУсловияДоговора;
	НоваяСтрока.ВидАктаГосоргана 					= ДанныеДоговора.ВидАктаГосоргана;
	
	Если ДанныеДоговора.СрочныйДоговор Тогда
		НоваяСтрока.СрочныйДоговор 					= ДанныеДоговора.СрочныйДоговор;
		НоваяСтрока.ДатаОкончания 					= ДанныеДоговора.ДатаОкончания;
		НоваяСтрока.СрокЗаключенияДоговора 			= ДанныеДоговора.СрокЗаключенияДоговора;
		НоваяСтрока.ОснованиеСрочногоДоговора 		= ДанныеДоговора.ОснованиеСрочногоДоговора;
	КонецЕсли;

КонецПроцедуры

Процедура УточнитьВидЗанятостиВПриказеОПриемеНаРаботуПоВидуДоговора(ПриказОПриемеНаРаботу) Экспорт
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.УточнитьВидЗанятостиВПриказеОПриемеНаРаботуПоВидуДоговора(ПриказОПриемеНаРаботу);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

