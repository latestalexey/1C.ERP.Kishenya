////////////////////////////////////////////////////////////////////////////////
// КадровыйУчетРасширенный: Процедуры и функции подсистемы Кадровый учет.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Получает сотрудников, работающих в указанной организации по списку физических лиц.
// Соответствие между сотрудниками и физическими лицами не устанавливается.
//
// Параметры:
//	- ФизическиеЛица - массив,
//	- Организация
//	- ОтбиратьПоГоловнойОрганизации (необязательный) по умолчанию Истина, 
//		см. комментарий к методу КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц.
//
// Возвращаемое значение - массив сотрудников.
//
Функция СотрудникиФизическихЛиц(ФизическиеЛица, Организация, ОтбиратьПоГоловнойОрганизации = Истина, РаботникиПоДоговорамГПХ = Неопределено) Экспорт
	
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыЗапроса.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыЗапроса.Организация = Организация;
	ПараметрыЗапроса.ОтбиратьПоГоловнойОрганизации = ОтбиратьПоГоловнойОрганизации;
	ПараметрыЗапроса.РаботникиПоДоговорамГПХ = РаботникиПоДоговорамГПХ;
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыЗапроса);
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиОрганизации, "Сотрудник", Истина);
	
КонецФункции

// Возвращает основного сотрудника физического лица в организации.
//
// Параметры:
//		ФизическоеЛицо		- СправочникСсылка.ФизическиеЛица
//		Организация			- СправочникСсылка.Организации
//		ДатаСведений		- Дата
//		ВыводитьСообщения	- Булево
//
// Возвращаемое значение:
//		СправочникСсылка.Сотрудники, Неопределено если сотрудника нет.
//
Функция ОсновнойСотрудникФизЛица(ФизическоеЛицо, Организация, ДатаСведений, ВыводитьСообщения = Истина) Экспорт
	
	ПодобранныйСотрудник = Неопределено;
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо), Истина, Организация, ДатаСведений);
			
		Если Не ОсновныеСотрудники.Количество() > 0 Тогда
				
			Если ВыводитьСообщения Тогда
				ТекстСообщения = НСтр("ru='%1 не работает в организации на %2.';uk='%1 не працює в організації на %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ФизическоеЛицо, Формат(ДатаСведений,"ДЛФ=D"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Сотрудник");
			КонецЕсли;
			
		Иначе
			ПодобранныйСотрудник = ОсновныеСотрудники[0].Сотрудник;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодобранныйСотрудник;
	
КонецФункции

// Получает всех сотрудников физического лица, исключая указанного.
//
Функция ДругиеСотрудникиФизическогоЛица(ФизическоеЛицо, Организация, Сотрудник, ДатаНачала, ДатаОкончания) Экспорт
	
	ДругиеСотрудники = Новый Массив;
	
	ПараметрыСоздания = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыСоздания.Организация = Организация;
	ПараметрыСоздания.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыСоздания.НачалоПериода = ДатаНачала;
	ПараметрыСоздания.ОкончаниеПериода = ДатаОкончания;
	ПараметрыСоздания.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыСоздания);
	
	Для Каждого СтрокаТаблицы Из СотрудникиОрганизации Цикл
		Если СтрокаТаблицы.Сотрудник <> Сотрудник Тогда
			ДругиеСотрудники.Добавить(СтрокаТаблицы.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДругиеСотрудники;
	
КонецФункции

// Создает элемент справочника Сотрудники, подчиненный головному.
//
// Параметры:
//		ГоловнойСотрудник		- СправочникСсылка.Сотрудники
//		УточнениеНаименования	- Строка
//
// Возвращаемое значение:
//		СправочникСсылка.Сотрудники
//
Функция СоздатьПодработкуСотрудника(ГоловнойСотрудник, УточнениеНаименования) Экспорт
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина, ГоловнойСотрудник, "ГоловнойСотрудник,ТабельныйНомер,ГоловнаяОрганизация,Фамилия,Имя,Отчество");
		
	Если КадровыеДанные.Количество() = 0
			Или ГоловнойСотрудник <> КадровыеДанные[0].ГоловнойСотрудник Тогда
			
		ВызватьИсключение НСтр("ru='Не верно указан основной сотрудник';uk='Не вірно вказаний основний співробітник'");
		
	КонецЕсли; 
	
	КадровыеДанныеСотрудника = КадровыеДанные[0];
	
	СотрудникОбъект = Справочники.Сотрудники.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(СотрудникОбъект, КадровыеДанныеСотрудника, "ФизическоеЛицо,ГоловнаяОрганизация");
	СотрудникОбъект.Код = КадровыеДанныеСотрудника.ТабельныйНомер;
	
	СотрудникОбъект.ГоловнойСотрудник = ГоловнойСотрудник;
	СотрудникОбъект.УточнениеНаименования = УточнениеНаименования;
	
	СотрудникОбъект.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
		КадровыеДанныеСотрудника.Фамилия,
		КадровыеДанныеСотрудника.Имя,
		КадровыеДанныеСотрудника.Отчество,
		,
		СотрудникОбъект.УточнениеНаименования);
	
	СотрудникОбъект.Записать();
	
	Возврат СотрудникОбъект.Ссылка;
	
КонецФункции

Функция ДоговорыФизическихЛиц(ТаблицаФизическихЛиц) Экспорт
	
	ТаблицаДоговоров = Новый ТаблицаЗначений;
	ТаблицаДоговоров.Колонки.Добавить("ФизическоеЛицо", 	Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДоговоров.Колонки.Добавить("ВидДоговора", 		Новый ОписаниеТипов("Булево"));
	ТаблицаДоговоров.Колонки.Добавить("ВидДоговораГПХ", 	Новый ОписаниеТипов("Булево"));
	ТаблицаДоговоров.Колонки.Добавить("Номер", 				Новый ОписаниеТипов("Строка"));
	ТаблицаДоговоров.Колонки.Добавить("Дата", 				Новый ОписаниеТипов("Дата"));
	ТаблицаДоговоров.Колонки.Добавить("Организация", 		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДоговоров.Колонки.Добавить("Начало",				Новый ОписаниеТипов("Дата"));
	ТаблицаДоговоров.Колонки.Добавить("Окончание",			Новый ОписаниеТипов("Дата"));
	
	ТаблицаГоловныхОрганизаций = ТаблицаФизическихЛиц.Скопировать(, "ГоловнаяОрганизация,НачалоПериода,ОкончаниеПериода");
	ТаблицаГоловныхОрганизаций.Свернуть("ГоловнаяОрганизация,НачалоПериода,ОкончаниеПериода");
	
	Для каждого СтрокаГоловнойОрганизации Из ТаблицаГоловныхОрганизаций Цикл
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("НачалоПериода", СтрокаГоловнойОрганизации.НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", СтрокаГоловнойОрганизации.ОкончаниеПериода);
		
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация = СтрокаГоловнойОрганизации.ГоловнаяОрганизация;
		ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
		ПараметрыПолученияСотрудников.НачалоПериода		= СтрокаГоловнойОрганизации.НачалоПериода;
		ПараметрыПолученияСотрудников.ОкончаниеПериода	= СтрокаГоловнойОрганизации.ОкончаниеПериода;
		ПараметрыПолученияСотрудников.КадровыеДанные	= "ТрудовойДоговорНомер,ТрудовойДоговорДата,ДатаПриема,ДатаУвольнения,ПриказОПриемеДатаЗавершенияТрудовогоДоговора";
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
		
		СписокФизическихЛиц = ТаблицаФизическихЛиц.Скопировать(Новый Структура("ГоловнаяОрганизация,НачалоПериода,ОкончаниеПериода",
			СтрокаГоловнойОрганизации.ГоловнаяОрганизация, СтрокаГоловнойОрганизации.НачалоПериода, СтрокаГоловнойОрганизации.ОкончаниеПериода),
			"ФизическоеЛицо").ВыгрузитьКолонку("ФизическоеЛицо");
		
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = СписокФизическихЛиц;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизации.Сотрудник,
			|	&НачалоПериода КАК НачалоПериода,
			|	&ОкончаниеПериода КАК ОкончаниеПериода
			|ПОМЕСТИТЬ ВТСотрудникиПериоды
			|ИЗ
			|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
			
		Запрос.Выполнить();
		
		ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
		ПараметрыПолученияРабочихМест.РаботникиПоДоговорамГПХ = Истина;
		КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияРабочихМест);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РабочиеМестаСотрудников.Период,
			|	РабочиеМестаСотрудников.Сотрудник,
			|	РабочиеМестаСотрудников.ФизическоеЛицо,
			|	ВЫБОР
			|		КОГДА РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ВидДоговора,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(РабочиеМестаСотрудников.ДокументОснование) = ТИП(Документ.ДоговорРаботыУслуги)
			|			ТОГДА ЛОЖЬ
			|		КОГДА ТИПЗНАЧЕНИЯ(РабочиеМестаСотрудников.ДокументОснование) = ТИП(Документ.ДоговорАвторскогоЗаказа)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ НЕОПРЕДЕЛЕНО
			|	КОНЕЦ КАК ВидДоговораГПХ,
			|	ВЫБОР
			|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование ЕСТЬ NULL 
			|			ТОГДА СотрудникиОрганизации.ТрудовойДоговорНомер
			|		ИНАЧЕ ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование.Номер
			|	КОНЕЦ КАК Номер,
			|	ВЫБОР
			|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование ЕСТЬ NULL 
			|			ТОГДА НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ТрудовойДоговорДата, ДЕНЬ)
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование.Дата, ДЕНЬ)
			|	КОНЕЦ КАК Дата,
			|	РабочиеМестаСотрудников.Организация,
			|	ВЫБОР
			|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование ЕСТЬ NULL 
			|			ТОГДА НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ДатаПриема, ДЕНЬ)
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала, ДЕНЬ)
			|	КОНЕЦ КАК Начало,
			|	ВЫБОР
			|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование ЕСТЬ NULL 
			|			ТОГДА ВЫБОР
			|					КОГДА ВЫБОР
			|							КОГДА СотрудникиОрганизации.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
			|								ТОГДА НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ПриказОПриемеДатаЗавершенияТрудовогоДоговора, ДЕНЬ)
			|							ИНАЧЕ НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ДатаУвольнения, ДЕНЬ)
			|						КОНЕЦ МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|						ТОГДА ВЫБОР
			|								КОГДА СотрудникиОрганизации.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
			|									ТОГДА НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ПриказОПриемеДатаЗавершенияТрудовогоДоговора, ДЕНЬ)
			|								ИНАЧЕ НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ДатаУвольнения, ДЕНЬ)
			|							КОНЕЦ
			|					ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА НАЧАЛОПЕРИОДА(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания, ДЕНЬ) МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|					ТОГДА НАЧАЛОПЕРИОДА(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания, ДЕНЬ)
			|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
			|			КОНЕЦ
			|	КОНЕЦ КАК Окончание
			|ПОМЕСТИТЬ ВТДоговорыПредварительно
			|ИЗ
			|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
			|		ПО РабочиеМестаСотрудников.Сотрудник = СотрудникиОрганизации.Сотрудник
			|			И (РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|		ПО РабочиеМестаСотрудников.ДокументОснование = ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование
			|			И (РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник))";
			
		Запрос.Выполнить();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Договоры.Период,
			|	Договоры.Сотрудник,
			|	Договоры.ФизическоеЛицо,
			|	Договоры.ВидДоговора,
			|	Договоры.ВидДоговораГПХ,
			|	Договоры.Номер,
			|	Договоры.Дата,
			|	Договоры.Организация,
			|	Договоры.Начало,
			|	Договоры.Окончание,
			|	МИНИМУМ(НАЧАЛОПЕРИОДА(ДоговорыДругаяОрганизация.Период, ДЕНЬ)) КАК СледующийПериод
			|ПОМЕСТИТЬ ВТДоговорыСОкончанием
			|ИЗ
			|	ВТДоговорыПредварительно КАК Договоры
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоговорыПредварительно КАК ДоговорыДругаяОрганизация
			|		ПО Договоры.Сотрудник = ДоговорыДругаяОрганизация.Сотрудник
			|			И Договоры.Организация <> ДоговорыДругаяОрганизация.Организация
			|			И Договоры.Период < ДоговорыДругаяОрганизация.Период
			|
			|СГРУППИРОВАТЬ ПО
			|	Договоры.Период,
			|	Договоры.Сотрудник,
			|	Договоры.ФизическоеЛицо,
			|	Договоры.ВидДоговора,
			|	Договоры.ВидДоговораГПХ,
			|	Договоры.Номер,
			|	Договоры.Дата,
			|	Договоры.Организация,
			|	Договоры.Начало,
			|	Договоры.Окончание
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДоговорыСОкончанием.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДоговорыСОкончанием.ВидДоговора КАК ВидДоговора,
			|	ДоговорыСОкончанием.ВидДоговораГПХ КАК ВидДоговораГПХ,
			|	ДоговорыСОкончанием.Номер КАК Номер,
			|	ДоговорыСОкончанием.Дата КАК Дата,
			|	ДоговорыСОкончанием.Организация КАК Организация,
			|	ЕСТЬNULL(ДоговорыСНовымНачалом.СледующийПериод, ДоговорыСОкончанием.Начало) КАК Начало,
			|	ВЫБОР
			|		КОГДА ДоговорыСОкончанием.СледующийПериод <> ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ДОБАВИТЬКДАТЕ(ДоговорыСОкончанием.СледующийПериод, ДЕНЬ, -1)
			|		ИНАЧЕ ДоговорыСОкончанием.Окончание
			|	КОНЕЦ КАК Окончание
			|ИЗ
			|	ВТДоговорыСОкончанием КАК ДоговорыСОкончанием
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоговорыСОкончанием КАК ДоговорыСНовымНачалом
			|		ПО ДоговорыСОкончанием.Сотрудник = ДоговорыСНовымНачалом.Сотрудник
			|			И (НАЧАЛОПЕРИОДА(ДоговорыСОкончанием.Период, ДЕНЬ) = ДоговорыСНовымНачалом.СледующийПериод)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Организация,
			|	ФизическоеЛицо,
			|	ВидДоговора УБЫВ,
			|	Начало";
			
		ТаблицаДоговоровГоловнойОрганизации = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаТаблицаДоговоровГоловнойОрганизации Из ТаблицаДоговоровГоловнойОрганизации Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДоговоров.Добавить(), СтрокаТаблицаДоговоровГоловнойОрганизации);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДоговоров;
	
КонецФункции

// Возвращает массив подработок сотрудников.
//
// Параметры:
//		ТолькоРазрешенные				- Булево
//		ПараметрыПолученияРабочихМест 	- Структура, см. КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников
//		ВключатьГоловныхСотрудников		- Булево, если значение параметра Ложь, из возвращаемого списка будут
//											исключены головные сотрудники.
//
// Возвращаемое значение:
//		Массив - СправочникСсылка.Сотрудники
//
Функция ПодработкиСотрудников(ТолькоРазрешенные, ПараметрыПолученияРабочихМест, ВключатьГоловныхСотрудников = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияПодработок = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияПодработок, ПараметрыПолученияРабочихМест);
	
	ПараметрыПолученияПодработок.РаботникиПоТрудовымДоговорам = ВключатьГоловныхСотрудников;
	ПараметрыПолученияПодработок.ПодработкиРаботниковПоТрудовымДоговорам = Истина;
	ПараметрыПолученияПодработок.РаботникиПоДоговорамГПХ = Неопределено;
	
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПолученияПодработок);

	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМеста.Сотрудник
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста";
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

#Область ПолучениеРабочихМестСотрудниковОрганизации

Функция ПараметрыДляЗапросВТРабочиеМестаСотрудников() Экспорт
	
	ПараметрыДляЗапроса = КадровыйУчетБазовый.ПараметрыДляЗапросВТРабочиеМестаСотрудников();
	ПараметрыДляЗапроса.Вставить("РаботникиПоТрудовымДоговорам", Истина);
	ПараметрыДляЗапроса.Вставить("ПодработкиРаботниковПоТрудовымДоговорам", Ложь);
	ПараметрыДляЗапроса.Вставить("РаботникиПоДоговорамГПХ", Ложь);
	
	Возврат ПараметрыДляЗапроса;
	
КонецФункции

Функция ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, Параметры, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	
	РаботникиПоТрудовымДоговорам = Ложь;
	ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
	РаботникиПоДоговорамГПХ = Ложь;
	
	Если Параметры.Свойство("РаботникиПоТрудовымДоговорам")
		И Параметры.РаботникиПоТрудовымДоговорам = Истина Тогда
		
		РаботникиПоТрудовымДоговорам = Истина;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки")
		И Параметры.Свойство("ПодработкиРаботниковПоТрудовымДоговорам")
		И Параметры.ПодработкиРаботниковПоТрудовымДоговорам = Истина Тогда
		
		ПодработкиРаботниковПоТрудовымДоговорам = Истина;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам")
		И Параметры.Свойство("РаботникиПоДоговорамГПХ")
		И Параметры.РаботникиПоДоговорамГПХ = Истина Тогда
		
		РаботникиПоДоговорамГПХ = Истина;
		
	КонецЕсли;
	
	Если Не РаботникиПоТрудовымДоговорам
		И Не ПодработкиРаботниковПоТрудовымДоговорам
		И Не РаботникиПоДоговорамГПХ Тогда
		
		РаботникиПоТрудовымДоговорам = Истина;
	
	КонецЕсли; 
	
	Если РаботникиПоТрудовымДоговорам Тогда
		
		Если ПодработкиРаботниковПоТрудовымДоговорам
			Или РаботникиПоДоговорамГПХ Тогда
			
			ИмяВТРабочиеМестаПоТрудовымДоговорам = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТРабочиеМестаПоТрудовымДоговорам");
			
		Иначе
			ИмяВТРабочиеМестаПоТрудовымДоговорам = ИмяВТРабочиеМестаСотрудников;
		КонецЕсли;
		
		Запрос = КадровыйУчетБазовый.ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаПоТрудовымДоговорам, Параметры, МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
	Если ПодработкиРаботниковПоТрудовымДоговорам
		Или РаботникиПоДоговорамГПХ Тогда
		
		Если РаботникиПоТрудовымДоговорам Тогда
			
			ТекстЗапросаРабочиеМеста =
				"ВЫБРАТЬ
				|	РабочиеМестаПоТрудовымДоговорам.Период,
				|	РабочиеМестаПоТрудовымДоговорам.ПериодЗаписи,
				|	РабочиеМестаПоТрудовымДоговорам.ГоловнаяОрганизация,
				|	РабочиеМестаПоТрудовымДоговорам.Организация,
				|	РабочиеМестаПоТрудовымДоговорам.Сотрудник,
				|	РабочиеМестаПоТрудовымДоговорам.ГоловнойСотрудник,
				|	РабочиеМестаПоТрудовымДоговорам.ФизическоеЛицо,
				|	РабочиеМестаПоТрудовымДоговорам.Подразделение,
				|	РабочиеМестаПоТрудовымДоговорам.Должность,
				|	РабочиеМестаПоТрудовымДоговорам.ДолжностьПоШтатномуРасписанию,
				|	РабочиеМестаПоТрудовымДоговорам.КоличествоСтавок,
				|	РабочиеМестаПоТрудовымДоговорам.ВидЗанятости,
				|	РабочиеМестаПоТрудовымДоговорам.ВидСобытия,
				|	РабочиеМестаПоТрудовымДоговорам.ВидДоговора,
				|	РабочиеМестаПоТрудовымДоговорам.РольСотрудника,
				|	РабочиеМестаПоТрудовымДоговорам.ДокументОснование
				|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
				|ИЗ
				|	ВТРабочиеМестаПоТрудовымДоговорам КАК РабочиеМестаПоТрудовымДоговорам";
				
			ТекстЗапросаРабочиеМеста = СтрЗаменить(ТекстЗапросаРабочиеМеста, "ВТРабочиеМестаСотрудников", ИмяВТРабочиеМестаСотрудников);
			ТекстЗапросаРабочиеМеста = СтрЗаменить(ТекстЗапросаРабочиеМеста, "ВТРабочиеМестаПоТрудовымДоговорам", ИмяВТРабочиеМестаПоТрудовымДоговорам);
			
		Иначе
			
			ТекстЗапросаРабочиеМеста = "";
			
		КонецЕсли; 
		
		Если ПодработкиРаботниковПоТрудовымДоговорам Тогда
			
			ИмяВТПодработкиПериоды = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПодработкиПериоды");
			ИмяВТПодработкиГоловныхСотрудниковПериоды = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПодработкиГоловныхСотрудниковПериоды");

			Если ПустаяСтрока(Параметры.ИмяПоляСотрудник) Тогда
				
				ТекстЗапросаОтбораПодработок =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Сотрудники.Ссылка КАК Сотрудник,
					|	СотрудникиПериоды.ДатаНачала КАК ДатаНачала,
					|	СотрудникиПериоды.ДатаОкончания КАК ДатаОкончания
					|ПОМЕСТИТЬ ВТПодработкиГоловныхСотрудниковПериоды
					|ИЗ
					|	Справочник.Сотрудники КАК Сотрудники
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
					|		ПО (ИСТИНА)
					|ГДЕ
					|	Сотрудники.Ссылка <> Сотрудники.ГоловнойСотрудник";
				
			Иначе
				
				ТекстЗапросаОтбораПодработок =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	Сотрудники.Ссылка КАК Сотрудник,
					|	СотрудникиПериоды.ДатаНачала КАК ДатаНачала,
					|	СотрудникиПериоды.ДатаОкончания КАК ДатаОкончания
					|ПОМЕСТИТЬ ВТПодработкиГоловныхСотрудниковПериоды
					|ИЗ
					|	Справочник.Сотрудники КАК Сотрудники
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
					|		ПО Сотрудники.ГоловнойСотрудник = СотрудникиПериоды.Сотрудник
					|			И Сотрудники.Ссылка <> СотрудникиПериоды.Сотрудник
					|ГДЕ
					|	Сотрудники.Ссылка <> Сотрудники.ГоловнойСотрудник";
				
			КонецЕсли;
			
			ТекстЗапросаОтбораПодработок = ТекстЗапросаОтбораПодработок
				+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
				+ "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ПодработкиГоловныхСотрудников.Сотрудник КАК Сотрудник,
				|	ПодработкиГоловныхСотрудников.ДатаНачала КАК ДатаНачала,
				|	ПодработкиГоловныхСотрудников.ДатаОкончания КАК ДатаОкончания
				|ПОМЕСТИТЬ ВТПодработкиПериоды
				|ИЗ
				|	ВТПодработкиГоловныхСотрудниковПериоды КАК ПодработкиГоловныхСотрудников";
				
			Если Не ПустаяСтрока(Параметры.ИмяПоляСотрудник) Тогда
				
				ТекстЗапросаОтбораПодработок = ТекстЗапросаОтбораПодработок
					+ "
					|ОБЪЕДИНИТЬ ВСЕ
					|"
					+ "ВЫБРАТЬ
					|	СотрудникиПериоды.Сотрудник,
					|	СотрудникиПериоды.ДатаНачала,
					|	СотрудникиПериоды.ДатаОкончания
					|ИЗ
					|	ВТСотрудникиПериоды КАК СотрудникиПериоды
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодработкиГоловныхСотрудниковПериоды КАК ПодработкиГоловныхСотрудников
					|		ПО СотрудникиПериоды.ДатаНачала = ПодработкиГоловныхСотрудников.ДатаНачала
					|			И СотрудникиПериоды.ДатаОкончания = ПодработкиГоловныхСотрудников.ДатаОкончания
					|			И СотрудникиПериоды.Сотрудник = ПодработкиГоловныхСотрудников.Сотрудник
					|ГДЕ
					|	ПодработкиГоловныхСотрудников.Сотрудник ЕСТЬ NULL 
					|	И СотрудникиПериоды.Сотрудник <> ВЫРАЗИТЬ(СотрудникиПериоды.Сотрудник КАК Справочник.Сотрудники).ГоловнойСотрудник";
					
			КонецЕсли;
			
			ТекстЗапросаОтбораПодработок = СтрЗаменить(ТекстЗапросаОтбораПодработок, "ВТПодработкиПериоды", ИмяВТПодработкиПериоды);
			ТекстЗапросаОтбораПодработок = СтрЗаменить(ТекстЗапросаОтбораПодработок, "ВТПодработкиГоловныхСотрудниковПериоды", ИмяВТПодработкиГоловныхСотрудниковПериоды);
			ТекстЗапросаОтбораПодработок = СтрЗаменить(ТекстЗапросаОтбораПодработок, "ВТСотрудникиПериоды", Параметры.ИмяВТСотрудникиПериоды);
			ТекстЗапросаОтбораПодработок = СтрЗаменить(ТекстЗапросаОтбораПодработок, "СотрудникиПериоды.Сотрудник", "СотрудникиПериоды." + Параметры.ИмяПоляСотрудник);
			ТекстЗапросаОтбораПодработок = СтрЗаменить(ТекстЗапросаОтбораПодработок, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + Параметры.ИмяПоляНачалоПериода);
			ТекстЗапросаОтбораПодработок = СтрЗаменить(ТекстЗапросаОтбораПодработок, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + Параметры.ИмяПоляОкончаниеПериода);
			
			ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаОтбораПодработок);
			
			// Инициализация параметров получения таблицы регистра.
			ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				ИмяВТПодработкиПериоды,
				?(ПустаяСтрока(Параметры.ИмяПоляСотрудник), "", "Сотрудник"));
				
			ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
			
			// Установка отбора по организации.
			ПараметрыОтбораПоОрганизациям = КадровыйУчет.ПараметрыОтбораПоОрганизациям(Параметры);
			Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.Организации) Тогда
				Если Параметры.ОтбиратьПоГоловнойОрганизации Тогда
					ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ГоловнаяОрганизация", "В", ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации);
				Иначе
					ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Организация", "В", ПараметрыОтбораПоОрганизациям.Организации);
				КонецЕсли;
			КонецЕсли; 
			
			// Установка отбора по подразделению.
			Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Подразделение", " В ИЕРАРХИИ ", Параметры.Подразделение);
			КонецЕсли; 
			
			// Дополнение таблицы регистра значениями на начало периода.
			ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
			
			// Исключение из записей на начало периода ранее уволенных.
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода, "ВидСобытия", " <> ", Перечисления.ВидыКадровыхСобытий.Увольнение);
			
			ИмяВТСостоянияПодработокСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСостоянияПодработокСотрудников");
			ИмяВТМинимальныеПериодыСобытийПодработок = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТМинимальныеПериодыСобытийПодработок");
			
			// Получение готового запроса
			ЗапросПоПодработкамСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
				"СостоянияПодработок",
				ТолькоРазрешенные,
				ОписаниеФильтра,
				ПараметрыПостроения,
				ИмяВТСостоянияПодработокСотрудников);
				
			ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ЗапросПоПодработкамСотрудников.Текст);
			ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросПоПодработкамСотрудников);
			
			ТекстЗапросаВТМинимальныеПериодыСобытийПодработок =
				"ВЫБРАТЬ
				|	МИНИМУМ(СостоянияПодработок.ПериодЗаписи) КАК ПериодЗаписи,
				|	СостоянияПодработок.Сотрудник,
				|	СостоянияПодработок.ВидСобытия
				|ПОМЕСТИТЬ ВТМинимальныеПериодыСобытийПодработок
				|ИЗ
				|	ВТСостоянияПодработокСотрудников КАК СостоянияПодработок
				|
				|СГРУППИРОВАТЬ ПО
				|	СостоянияПодработок.Сотрудник,
				|	СостоянияПодработок.ВидСобытия";
			
			ТекстЗапросаВТМинимальныеПериодыСобытийПодработок = СтрЗаменить(
				ТекстЗапросаВТМинимальныеПериодыСобытийПодработок, "ВТСостоянияПодработокСотрудников", ИмяВТСостоянияПодработокСотрудников);
				
			ТекстЗапросаВТМинимальныеПериодыСобытийПодработок = СтрЗаменить(
				ТекстЗапросаВТМинимальныеПериодыСобытийПодработок, "ВТМинимальныеПериодыСобытийПодработок", ИмяВТМинимальныеПериодыСобытийПодработок);
				
			Запрос.Текст = Запрос.Текст
				+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
				+ ТекстЗапросаВТМинимальныеПериодыСобытийПодработок;
				
			ТекстЗапросаПодработкам =
				"ВЫБРАТЬ
				|	СостоянияПодработок.Период,
				|	СостоянияПодработок.ПериодЗаписи,
				|	СостоянияПодработок.ГоловнаяОрганизация,
				|	СостоянияПодработок.Организация,
				|	СостоянияПодработок.Сотрудник,
				|	ВЫРАЗИТЬ(СостоянияПодработок.Сотрудник КАК Справочник.Сотрудники).ГоловнойСотрудник КАК ГоловнойСотрудник,
				|	СостоянияПодработок.ФизическоеЛицо,
				|	СостоянияПодработок.Подразделение,
				|	СостоянияПодработок.Должность,
				|	СостоянияПодработок.ДолжностьПоШтатномуРасписанию,
				|	СостоянияПодработок.КоличествоСтавок,
				|	СостоянияПодработок.ВидЗанятости,
				|	СостоянияПодработок.ВидСобытия,
				|	СостоянияПодработок.ВидДоговора,
				|	ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник) КАК РольСотрудника,
				|	СостоянияПодработок.Регистратор КАК ДокументОснование
				|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
				|ИЗ
				|	ВТМинимальныеПериодыСобытийПодработок КАК ВТМинимальныеПериодыСобытийПодработок
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСостоянияПодработокСотрудников КАК СостоянияПодработок
				|		ПО ВТМинимальныеПериодыСобытийПодработок.ПериодЗаписи = СостоянияПодработок.ПериодЗаписи
				|			И ВТМинимальныеПериодыСобытийПодработок.Сотрудник = СостоянияПодработок.Сотрудник
				|			И ВТМинимальныеПериодыСобытийПодработок.ВидСобытия = СостоянияПодработок.ВидСобытия";
				
			ТекстЗапросаПодработкам = СтрЗаменить(
				ТекстЗапросаПодработкам, "ВТСостоянияПодработокСотрудников", ИмяВТСостоянияПодработокСотрудников);
				
			ТекстЗапросаПодработкам = СтрЗаменить(
				ТекстЗапросаПодработкам, "ВТМинимальныеПериодыСобытийПодработок", ИмяВТМинимальныеПериодыСобытийПодработок);
				
			Если ПустаяСтрока(ТекстЗапросаРабочиеМеста) Тогда
				ТекстЗапросаПодработкам = СтрЗаменить(ТекстЗапросаПодработкам, "ВТРабочиеМестаСотрудников", ИмяВТРабочиеМестаСотрудников);
			Иначе
				ТекстЗапросаПодработкам = СтрЗаменить(ТекстЗапросаПодработкам, "ПОМЕСТИТЬ ВТРабочиеМестаСотрудников", "");
				ТекстЗапросаРабочиеМеста = ТекстЗапросаРабочиеМеста + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
			КонецЕсли;
			
			ТекстЗапросаРабочиеМеста = ТекстЗапросаРабочиеМеста + Символы.ПС + ТекстЗапросаПодработкам;
			
		КонецЕсли; 
		
		Если РаботникиПоДоговорамГПХ Тогда
			
			ИмяВТРабочиеМестаПоДоговорамГПХ = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТРабочиеМестаПоДоговорамГПХ");
			
			УсловияОтбора = "";
			Если ЗначениеЗаполнено(Параметры.Организация) Тогда
				
				Если Параметры.ОтбиратьПоГоловнойОрганизации Тогда
					УсловияОтбора = "ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник.ГоловнаяОрганизация = &ПериодыДействияДоговоровГражданскоПравовогоХарактераОрганизация";
					ТекущиеКадровыеДанныеСотрудниковОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Параметры.Организация);
				Иначе
					УсловияОтбора = "ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация = &ПериодыДействияДоговоровГражданскоПравовогоХарактераОрганизация";
					ТекущиеКадровыеДанныеСотрудниковОрганизация = Параметры.Организация;
				КонецЕсли;
				
				Запрос.УстановитьПараметр("ПериодыДействияДоговоровГражданскоПравовогоХарактераОрганизация", ТекущиеКадровыеДанныеСотрудниковОрганизация);
				
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
				
				УсловияОтбора = ?(ПустаяСтрока(УсловияОтбора), "", УсловияОтбора + Символы.ПС + "	И ")
					+ "ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение В ИЕРАРХИИ (&ПериодыДействияДоговоровГражданскоПравовогоХарактераПодразделение)";
					
				Запрос.УстановитьПараметр("ПериодыДействияДоговоровГражданскоПравовогоХарактераПодразделение", Параметры.Подразделение);
				
			КонецЕсли; 
			
			ТекстЗапросаПоДоговорамГПХ =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ВЫБОР
				|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала > СотрудникиПериоды.НачалоПериода
				|			ТОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала
				|		ИНАЧЕ СотрудникиПериоды.ОкончаниеПериода
				|	КОНЕЦ КАК Период,
				|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
				|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация,
				|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
				|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо,
				|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение,
				|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование
				|ПОМЕСТИТЬ ВТРабочиеМестаПоДоговорамГПХ
				|ИЗ
				|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
				|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала <= СотрудникиПериоды.ОкончаниеПериода
				|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= СотрудникиПериоды.НачалоПериода
				|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник = СотрудникиПериоды.Сотрудник";
				
			Если ПустаяСтрока(Параметры.ИмяПоляСотрудник) Тогда
				
				ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ,
					"И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник = СотрудникиПериоды.Сотрудник", "");
				
			КонецЕсли;
				
			Если Не ПустаяСтрока(УсловияОтбора) Тогда
				
				ТекстЗапросаПоДоговорамГПХ = ТекстЗапросаПоДоговорамГПХ
					+ 	"
						|ГДЕ
						|"
					+ УсловияОтбора;
				
			КонецЕсли; 
				
			ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "ВТСотрудникиПериоды", Параметры.ИмяВТСотрудникиПериоды);
			ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "СотрудникиПериоды.Сотрудник", "СотрудникиПериоды." + Параметры.ИмяПоляСотрудник);
			ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "СотрудникиПериоды.НачалоПериода", "СотрудникиПериоды." + Параметры.ИмяПоляНачалоПериода);
			ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "СотрудникиПериоды.ОкончаниеПериода", "СотрудникиПериоды." + Параметры.ИмяПоляОкончаниеПериода);
			ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "ВТРабочиеМестаПоДоговорамГПХ", ИмяВТРабочиеМестаПоДоговорамГПХ);
				
			ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаПоДоговорамГПХ);
			
			ТекстЗапросаРабочиеМестаПоДоговорамГПХ =
				"ВЫБРАТЬ
				|	РабочиеМестаПоДоговорамГПХ.Период КАК Период,
				|	РабочиеМестаПоДоговорамГПХ.Период КАК ПериодЗаписи,
				|	РабочиеМестаПоДоговорамГПХ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
				|	РабочиеМестаПоДоговорамГПХ.Организация КАК Организация,
				|	РабочиеМестаПоДоговорамГПХ.Сотрудник КАК Сотрудник,
				|	ВЫРАЗИТЬ(РабочиеМестаПоДоговорамГПХ.Сотрудник КАК Справочник.Сотрудники).ГоловнойСотрудник КАК ГоловнойСотрудник,
				|	РабочиеМестаПоДоговорамГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
				|	РабочиеМестаПоДоговорамГПХ.Подразделение КАК Подразделение,
				|	NULL КАК Должность,
				|	NULL КАК ДолжностьПоШтатномуРасписанию,
				|	NULL КАК КоличествоСтавок,
				|	NULL КАК ВидЗанятости,
				|	NULL КАК ВидСобытия,
				|	NULL КАК ВидДоговора,
				|	ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник) КАК РольСотрудника,
				|	РабочиеМестаПоДоговорамГПХ.ДокументОснование КАК ДокументОснование
				|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
				|ИЗ
				|	ВТРабочиеМестаПоДоговорамГПХ КАК РабочиеМестаПоДоговорамГПХ";
				
			ТекстЗапросаРабочиеМестаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаРабочиеМестаПоДоговорамГПХ, "ВТРабочиеМестаПоДоговорамГПХ", ИмяВТРабочиеМестаПоДоговорамГПХ);
			
			Если ПустаяСтрока(ТекстЗапросаРабочиеМеста) Тогда
				ТекстЗапросаРабочиеМестаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаРабочиеМестаПоДоговорамГПХ, "ВТРабочиеМестаСотрудников", ИмяВТРабочиеМестаСотрудников);
			Иначе
				ТекстЗапросаРабочиеМестаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаРабочиеМестаПоДоговорамГПХ, "ПОМЕСТИТЬ ВТРабочиеМестаСотрудников", "");
				ТекстЗапросаРабочиеМеста = ТекстЗапросаРабочиеМеста + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
			КонецЕсли;
			
			ТекстЗапросаРабочиеМеста = ТекстЗапросаРабочиеМеста + Символы.ПС + ТекстЗапросаРабочиеМестаПоДоговорамГПХ;
			
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаРабочиеМеста);
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ПоляВТРабочиеМестаСотрудников() Экспорт
	
	ПоляВТРабочиеМеста = КадровыйУчетБазовый.ПоляВТРабочиеМестаСотрудников();
	ПоляВТРабочиеМеста.Вставить("ГоловнойСотрудник", "Сотрудник.ГоловнойСотрудник");
	ПоляВТРабочиеМеста.Вставить("КоличествоСтавок");
	ПоляВТРабочиеМеста.Вставить("РольСотрудника", "ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник)");
	ПоляВТРабочиеМеста.Вставить("ДолжностьПоШтатномуРасписанию");
	ПоляВТРабочиеМеста.Вставить("ВидДоговора");
	
	Возврат ПоляВТРабочиеМеста;
	
КонецФункции

#КонецОбласти

#Область ФункцииДляРегламентированнойОтчетности

// Функция рассчитывает среднесписочную численность работников, 
// среднесписочную численность женщин, среднесписочную численность инвалидов за период.
//
// Параметры:
//		Организация
//		НачалоПериода
//		КонецПериода
//
Функция СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЧисленности = Новый Структура("ЧисленностьРаботников, ЧисленностьЖенщин, ЧисленностьИнвалидов, ЧисленностьВнешнихСовместителей, ЧисленностьЧисленностьРаботниковГПХ, ЧисленностьЛицСГарантиями, ЧисленностьЛицСГарантиямиМеньше10ЛетДоПенсии, ЧисленностьЛицСГарантиямиНеИнвалиды", 0, 0, 0, 0);
	СтатистикаПерсонала.СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода, ДанныеЧисленности);
	
	Возврат ДанныеЧисленности;
	
КонецФункции

#КонецОбласти

#Область КадровыеДанныеФизическихЛиц

Функция ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц) Экспорт
	
	ТекстОписанияПолей = "";
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли;
	
	ТекстЗапросаПолученияРазличныхЗаписей = "";
	
	Для каждого ИмяКадровыхДанных Из ИменаКадровыхДанных Цикл
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхФизическогоЛица(ИмяКадровыхДанных) Тогда
			 Продолжить;
		ИначеЕсли ДобавитьПоляСведенийОСтажахФизическихЛиц(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОСостоянияхВБракеФизическихЛиц(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОВоинскомУчетеФизическихЛиц(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОБронированииСотрудников(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПараметрахИсчисленияСеверногоСтажа(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСведенийОКлассномЧинеРанге(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСведенийОВоинскомСпециальномЗвании(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных) Тогда
				
			Продолжить;
			
		Иначе
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеФизическихЛиц", ИмяКадровыхДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаБазовыхКадровыхДанных = ИсточникиДанных.Получить("БазовыеКадровыеДанныеФизическихЛиц");
	Если ИменаБазовыхКадровыхДанных = Неопределено Тогда
		
		ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		Если ФормироватьТаблицуРазличных Тогда
			
			ИмяВТОтборовРазличныхФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтборовРазличныхФизическихЛиц");
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц = ИмяВТОтборовРазличныхФизическихЛиц;
			
			ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
			
		Иначе
			ОписательВТОтборов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписательВременнойТаблицыОтборов);
			ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц = ОписательВТОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОтборовФизическихЛиц.Период КАК Период,
			|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТКадровыеДанныеФизическихЛиц
			|ИЗ
			|	ВТОтборовРазличныхФизическихЛиц КАК ТаблицаОтборовФизическихЛиц";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		Если ФормироватьТаблицуРазличных Тогда
			
			ТекстЗапросаПолученияРазличныхЗаписей =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТаблицаОтборовФизическихЛиц.Период КАК Период,
				|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТОтборовРазличныхФизическихЛиц
				|ИЗ
				|	ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц";
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовРазличныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборовФизическихЛиц.Период", "ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			
		Иначе
			
			КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст,
				"ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
				
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборовФизическихЛиц.Период", "ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			
		КонецЕсли;
		
	Иначе
		
		ФормироватьТаблицуРазличных = Ложь;
		
		Запрос = КадровыйУчетБазовый.ЗапросВТКадровыеДанныеФизическихЛиц(
			ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИменаБазовыхКадровыхДанных, ПоляОтбораПериодическихДанных, ИсточникиДанных, "ВТКадровыеДанныеФизическихЛиц");
			
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		
		ПозицияТочкиЗапятой = СтрНайти(Запрос.Текст, ";");
		ТекстЗапросаПолученияРазличныхЗаписей = Лев(Запрос.Текст, ПозицияТочкиЗапятой - 1);
		Запрос.Текст = Сред(Запрос.Текст, ПозицияТочкиЗапятой + 1);
		
	КонецЕсли;
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстОписанияПолей, "ПОМЕСТИТЬ ВТКадровыеДанныеФизическихЛиц");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТКадровыеДанныеФизическихЛиц", ИмяВТКадровыеДанныеФизическихЛиц);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	ДобавитьТекстЗапросаВТСведенияОСтажахФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОСостоянияхВБракеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОВоинскомУчетеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОБронированииСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОПараметрахИсчисленияСеверногоСтажа(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба.ДобавитьТекстЗапросаВТСведенияОКлассныхЧинахРангах(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
		МодульГосударственнаяСлужба.ДобавитьТекстЗапросаВТСведенияОВоинскихСпециальныхЗваниях(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстЗапросаПолученияРазличныхЗаписей) Тогда
		
		Запрос.Текст =
			ТекстЗапросаПолученияРазличныхЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц) Экспорт
	
	ТекстОписанияПолей = "";
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли;
	
	ТекстЗапросаПолученияРазличныхЗаписей = "";
	
	Для каждого ИмяКадровыхДанных Из ИменаКадровыхДанных Цикл
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхФизическогоЛица(ИмяКадровыхДанных) Тогда
			 Продолжить;
		ИначеЕсли ДобавитьПолеСведенийОбОбразованииФизическихЛиц(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОбУченыхСтепеняхФизическихЛиц(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОбУченыхЗванияхФизическихЛиц(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОЗнанияхЯзыковФизическихЛиц(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПрофессияхФизическихЛиц(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОЛьготахГражданПодвергшихсяРадиации(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПочетныхЗванияхФизическихЛиц(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСтроковыхСведенийФизическихЛиц(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСведенийОГосударственныхСлужащих(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеВключаетсяВРеестрГосслужащих(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных) Тогда
			
			Продолжить;
			
		Иначе
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеПостоянныеКадровыеДанныеФизическихЛиц", ИмяКадровыхДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаБазовыхКадровыхДанных = ИсточникиДанных.Получить("БазовыеПостоянныеКадровыеДанныеФизическихЛиц");
	Если ИменаБазовыхКадровыхДанных = Неопределено Тогда
		
		ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		Если ФормироватьТаблицуРазличных Тогда
			
			ИмяВТОтборовРазличныхФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтборовРазличныхФизическихЛиц");
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц = ИмяВТОтборовРазличныхФизическихЛиц;
			
			ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
			
		Иначе
			ОписательВТОтборов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписательВременнойТаблицыОтборов);
			ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц = ОписательВТОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТПостоянныеКадровыеДанныеФизическихЛиц
			|ИЗ
			|	ВТОтборовРазличныхФизическихЛиц КАК ТаблицаОтборовФизическихЛиц";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		Если ФормироватьТаблицуРазличных Тогда
			
			ТекстЗапросаПолученияРазличныхЗаписей =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТОтборовРазличныхПостоянныхФизическихЛиц
				|ИЗ
				|	ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц";
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовРазличныхПостоянныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
				
		Иначе
			
			КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст,
				"ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
			
		КонецЕсли;
		
	Иначе
		
		ФормироватьТаблицуРазличных = Ложь;
		
		Запрос = КадровыйУчетБазовый.ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(
			ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИменаБазовыхКадровыхДанных, ИсточникиДанных, "ВТПостоянныеКадровыеДанныеФизическихЛиц");
		
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		
		ПозицияТочкиЗапятой = СтрНайти(Запрос.Текст, ";");
		ТекстЗапросаПолученияРазличныхЗаписей = Лев(Запрос.Текст, ПозицияТочкиЗапятой - 1);
		Запрос.Текст = Сред(Запрос.Текст, ПозицияТочкиЗапятой + 1);
		
	КонецЕсли;
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстОписанияПолей, "ПОМЕСТИТЬ ВТПостоянныеКадровыеДанныеФизическихЛиц");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПостоянныеКадровыеДанныеФизическихЛиц", ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	ДобавитьТекстЗапросаВТСведенияОбОбразованииФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОбУченыхСтепеняхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОбУченыхЗванияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОЗнанияхЯзыковФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОПрофессияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаСведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОПочетныхЗванияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСтроковыеСведенияФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба.ДобавитьТекстЗапросаВТСведенияОГосударственныхСлужащих(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
		МодульГосударственнаяСлужба.ДобавитьТекстЗапросаВТСведенийРеестраГосслужащих(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	КонецЕсли; 
	
	Если Не ПустаяСтрока(ТекстЗапросаПолученияРазличныхЗаписей) Тогда
		
		Запрос.Текст =
			ТекстЗапросаПолученияРазличныхЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТОбразованияФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТОбразованияФизическихЛиц = "ВТОбразованияФизическихЛиц") Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛицаОбразование.Владелец КАК ФизическоеЛицо,
		|	ФизическиеЛицаОбразование.Ссылка,
		|	ФизическиеЛицаОбразование.ОсновноеОбразование,
		|	ФизическиеЛицаОбразование.ВидОбразования,
		|	ФизическиеЛицаОбразование.ВидПослевузовскогоОбразования,
		|	ФизическиеЛицаОбразование.ВидДополнительногоОбучения,
		|	ФизическиеЛицаОбразование.УчебноеЗаведение,
		|	ФизическиеЛицаОбразование.Начало,
		|	ФизическиеЛицаОбразование.Окончание,
		|	ФизическиеЛицаОбразование.Специальность,
		|	ФизическиеЛицаОбразование.Квалификация,
		|	ФизическиеЛицаОбразование.НаименованиеКурса,
		|	ФизическиеЛицаОбразование.КоличествоЧасов,
		|	ФизическиеЛицаОбразование.ВидДокумента,
		|	ФизическиеЛицаОбразование.Серия,
		|	ФизическиеЛицаОбразование.Номер,
		|	ФизическиеЛицаОбразование.ДатаВыдачи,
		|	ФизическиеЛицаОбразование.Основание,
		|	ФизическиеЛицаОбразование.ФормаОбучения
		|ПОМЕСТИТЬ ВТОбразованияФЛ
		|ИЗ
		|	Справочник.ОбразованиеФизическихЛиц КАК ФизическиеЛицаОбразование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц
		|		ПО ФизическиеЛицаОбразование.Владелец = ТаблицаОтборовФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	НЕ ФизическиеЛицаОбразование.ПометкаУдаления
		|{ГДЕ
		|	ФизическиеЛицаОбразование.Владелец.* КАК ФизическоеЛицо,
		|	ФизическиеЛицаОбразование.ОсновноеОбразование,
		|	ФизическиеЛицаОбразование.ВидОбразования.*,
		|	ФизическиеЛицаОбразование.ВидПослевузовскогоОбразования.*,
		|	ФизическиеЛицаОбразование.ВидДополнительногоОбучения.*,
		|	ФизическиеЛицаОбразование.УчебноеЗаведение.*,
		|	ФизическиеЛицаОбразование.Начало,
		|	ФизическиеЛицаОбразование.Окончание,
		|	ФизическиеЛицаОбразование.Специальность.*,
		|	ФизическиеЛицаОбразование.Квалификация,
		|	ФизическиеЛицаОбразование.НаименованиеКурса,
		|	ФизическиеЛицаОбразование.КоличествоЧасов,
		|	ФизическиеЛицаОбразование.ВидДокумента.*,
		|	ФизическиеЛицаОбразование.Серия,
		|	ФизическиеЛицаОбразование.Номер,
		|	ФизическиеЛицаОбразование.ДатаВыдачи,
		|	ФизическиеЛицаОбразование.Основание,
		|	ФизическиеЛицаОбразование.ФормаОбучения}";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст, "ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТОбразованияФЛ", ИмяВТОбразованияФизическихЛиц);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТТрудоваяДеятельностьФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТТрудоваяДеятельностьФизическихЛиц = "ВТТрудоваяДеятельностьФизическихЛиц") Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТрудоваяДеятельностьФизическихЛиц.Организация,
		|	ТрудоваяДеятельностьФизическихЛиц.ДатаНачала,
		|	ТрудоваяДеятельностьФизическихЛиц.ДатаОкончания,
		|	ТрудоваяДеятельностьФизическихЛиц.Должность
		|ПОМЕСТИТЬ ВТТрудоваяДеятельностьФизическихЛиц
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТрудоваяДеятельностьФизическихЛиц КАК ТрудоваяДеятельностьФизическихЛиц
		|		ПО ТаблицаОтборовФизическихЛиц.ФизическоеЛицо = ТрудоваяДеятельностьФизическихЛиц.ФизическоеЛицо";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст, "ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТТрудоваяДеятельностьФизическихЛиц", ИмяВТТрудоваяДеятельностьФизическихЛиц);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСпециальностиФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТСпециальностиФизическихЛиц = "ВТСпециальностиФизическихЛиц") Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"СпециальностиФизическихЛиц", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСпециальностиФизическихЛиц);
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСтажиФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПолучатьБудущиеЗначенияСтажей = Ложь, ИмяВТСтажиФизическихЛиц = "ВТСтажиФизическихЛиц", ИмяПоляВидСтажа = "") Экспорт
	
	Запрос = Новый Запрос;
	
	ИмяВТДатыОтсчетаСтажей = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТДатыОтсчетаСтажей");
	ИмяВТСтажиПромежуточная = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСтажиПромежуточная");
	ИмяВТСтажиСДатойОтсчетаДляКонтроля = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСтажиСДатойОтсчетаДляКонтроля");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборовФизическихЛиц.Период КАК Период,
		|	СтажиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	СтажиФизическихЛиц.ДатаОтсчета КАК ПериодРегистрации,
		|	СтажиФизическихЛиц.РазмерМесяцев,
		|	СтажиФизическихЛиц.РазмерДней,
		|	СтажиФизическихЛиц.ИсчисляетсяСДатыПриема,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(СтажиФизическихЛиц.ДатаОтсчета, ДЕНЬ, -СтажиФизическихЛиц.РазмерДней), МЕСЯЦ, -СтажиФизическихЛиц.РазмерМесяцев) КАК ДатаОтсчета
		|ПОМЕСТИТЬ ВТДатыОтсчетаСтажей
		|ИЗ
		|	РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц
		|		ПО СтажиФизическихЛиц.ФизическоеЛицо = ТаблицаОтборовФизическихЛиц.ФизическоеЛицо
		|			И СтажиФизическихЛиц.ВидСтажа = ТаблицаОтборовФизическихЛиц.ВидСтажа
		|{ГДЕ
		|	СтажиФизическихЛиц.ФизическоеЛицо.*,
		|	СтажиФизическихЛиц.ВидСтажа.*}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыОтсчетаСтажей.ФизическоеЛицо,
		|	ДатыОтсчетаСтажей.ВидСтажа,
		|	ДатыОтсчетаСтажей.ДатаОтсчета,
		|	ДатыОтсчетаСтажей.Период,
		|	ДатыОтсчетаСтажей.ПериодРегистрации,
		|	ДатыОтсчетаСтажей.РазмерМесяцев,
		|	ДатыОтсчетаСтажей.РазмерДней,
		|	ДатыОтсчетаСтажей.ИсчисляетсяСДатыПриема,
		|	РАЗНОСТЬДАТ(ДатыОтсчетаСтажей.ДатаОтсчета, ДатыОтсчетаСтажей.Период, ГОД) - ВЫБОР
		|		КОГДА МЕСЯЦ(ДатыОтсчетаСтажей.ДатаОтсчета) > МЕСЯЦ(ДатыОтсчетаСтажей.Период)
		|			ТОГДА 1
		|		КОГДА МЕСЯЦ(ДатыОтсчетаСтажей.ДатаОтсчета) = МЕСЯЦ(ДатыОтсчетаСтажей.Период)
		|				И ДЕНЬ(ДатыОтсчетаСтажей.ДатаОтсчета) > ДЕНЬ(ДатыОтсчетаСтажей.Период)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Лет,
		|	РАЗНОСТЬДАТ(ДатыОтсчетаСтажей.ДатаОтсчета, ДатыОтсчетаСтажей.Период, МЕСЯЦ) - ВЫБОР
		|		КОГДА ДЕНЬ(ДатыОтсчетаСтажей.ДатаОтсчета) > ДЕНЬ(ДатыОтсчетаСтажей.Период)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВсегоМесяцев,
		|	РАЗНОСТЬДАТ(ДатыОтсчетаСтажей.ДатаОтсчета, ДатыОтсчетаСтажей.Период, ДЕНЬ) КАК ВсегоДней
		|ПОМЕСТИТЬ ВТСтажиПромежуточная
		|ИЗ
		|	ВТДатыОтсчетаСтажей КАК ДатыОтсчетаСтажей
		|ГДЕ
		|	ДатыОтсчетаСтажей.Период >= ДатыОтсчетаСтажей.ПериодРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтажиПромежуточная.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СтажиПромежуточная.Период КАК Период,
		|	СтажиПромежуточная.ПериодРегистрации КАК ПериодРегистрации,
		|	СтажиПромежуточная.РазмерМесяцев,
		|	СтажиПромежуточная.РазмерДней,
		|	СтажиПромежуточная.ИсчисляетсяСДатыПриема,
		|	СтажиПромежуточная.ВидСтажа КАК ВидСтажа,
		|	СтажиПромежуточная.ДатаОтсчета КАК ДатаОтсчета,
		|	СтажиПромежуточная.Лет КАК Лет,
		|	СтажиПромежуточная.ВсегоМесяцев КАК ВсегоМесяцев,
		|	СтажиПромежуточная.ВсегоДней КАК ВсегоДней,
		|	РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(СтажиПромежуточная.ДатаОтсчета, ГОД, СтажиПромежуточная.Лет), СтажиПромежуточная.Период, МЕСЯЦ) - ВЫБОР
		|		КОГДА ДЕНЬ(СтажиПромежуточная.ДатаОтсчета) > ДЕНЬ(СтажиПромежуточная.Период)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Месяцев,
		|	РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(СтажиПромежуточная.ДатаОтсчета, МЕСЯЦ, СтажиПромежуточная.ВсегоМесяцев), СтажиПромежуточная.Период, ДЕНЬ) КАК Дней,
		|	ДОБАВИТЬКДАТЕ(СтажиПромежуточная.Период, МЕСЯЦ, -СтажиПромежуточная.ВсегоМесяцев) КАК ДатаОтсчетаДляКонтроля
		|ПОМЕСТИТЬ ВТСтажиСДатойОтсчетаДляКонтроля
		|ИЗ
		|	ВТСтажиПромежуточная КАК СтажиПромежуточная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтажиФизическихЛиц.ФизическоеЛицо,
		|	СтажиФизическихЛиц.Период,
		|	СтажиФизическихЛиц.ПериодРегистрации,
		|	СтажиФизическихЛиц.РазмерМесяцев,
		|	СтажиФизическихЛиц.РазмерДней,
		|	СтажиФизическихЛиц.ИсчисляетсяСДатыПриема,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	СтажиФизическихЛиц.ДатаОтсчета,
		|	СтажиФизическихЛиц.Лет,
		|	СтажиФизическихЛиц.ВсегоМесяцев,
		|	СтажиФизическихЛиц.ВсегоДней,
		|	СтажиФизическихЛиц.Месяцев + ВЫБОР
		|		КОГДА СтажиФизическихЛиц.Дней = ДЕНЬ(СтажиФизическихЛиц.ДатаОтсчета)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Месяцев,
		|	ВЫБОР
		|		КОГДА СтажиФизическихЛиц.Дней = ДЕНЬ(СтажиФизическихЛиц.ДатаОтсчета)
		|			ТОГДА 0
		|		ИНАЧЕ СтажиФизическихЛиц.Дней
		|	КОНЕЦ КАК Дней
		|ПОМЕСТИТЬ ВТСтажиФизическихЛиц
		|ИЗ
		|	ВТСтажиСДатойОтсчетаДляКонтроля КАК СтажиФизическихЛиц";
	
	Если ПолучатьБудущиеЗначенияСтажей Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДатыОтсчетаСтажей.Период >= ДатыОтсчетаСтажей.ПериодРегистрации", "(ИСТИНА)");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДатыОтсчетаСтажей", ИмяВТДатыОтсчетаСтажей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСтажиПромежуточная", ИмяВТСтажиПромежуточная);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСтажиСДатойОтсчетаДляКонтроля", ИмяВТСтажиСДатойОтсчетаДляКонтроля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборовФизическихЛиц.Период", "ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст, "ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Если ПустаяСтрока(ИмяПоляВидСтажа) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СтажиФизическихЛиц.ВидСтажа = ТаблицаОтборовФизическихЛиц.ВидСтажа", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборовФизическихЛиц.ВидСтажа", "ТаблицаОтборовФизическихЛиц." + ИмяПоляВидСтажа);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСтажиФизическихЛиц", ИмяВТСтажиФизическихЛиц);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
		
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСведенияОСостоянияхВБракеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОСостоянияхВБракеФизическихЛиц = "ВТСведенияОСостоянияхВБракеФизическихЛиц") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("СостоянияВБракеФизическихЛиц", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"СостоянияВБракеФизическихЛиц", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОСостоянияхВБракеФизическихЛиц);
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОВоинскомУчетеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОВоинскомУчетеФизическихЛиц = "ВТСведенияОВоинскомУчетеФизическихЛиц") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ВоинскийУчет", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ВоинскийУчет", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОВоинскомУчетеФизическихЛиц);
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОСведенияОБронированииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОСведенияОБронированииСотрудников = "ВТСведенияОСведенияОБронированииСотрудников") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("БронированиеСотрудников", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"БронированиеСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОСведенияОБронированииСотрудников);
			
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОПараметрахИсчисленияСеверногоСтажа(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОПараметрахИсчисленияСеверногоСтажа = "ВТСведенияОПараметрахИсчисленияСеверногоСтажа") Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД = Ложь;
	
	ИмяВТПроцентыСевернойНадбавкиФизическихЛицСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПроцентыСевернойНадбавкиФизическихЛицСрезПоследних");
	
	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПроцентыСевернойНадбавкиФизическихЛиц",
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТПроцентыСевернойНадбавкиФизическихЛицСрезПоследних);
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(Запрос.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ИмяВТМаксимальныеПроцентыПорядковНачисления = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТМаксимальныеПроцентыПорядковНачисления");
	ЗапросВТМаксимальныеПроцентыПорядковНачисления = ЗарплатаКадрыРасширенный.ЗапросВТМаксимальныеПроцентыПорядковНачисленияСевернойНадбавки(ИмяВТМаксимальныеПроцентыПорядковНачисления);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТМаксимальныеПроцентыПорядковНачисления);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛицаПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛицаПериоды.Период КАК Период,
		|	ВЫБОР
		|		КОГДА ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавкиИзменяется
		|			ТОГДА ЕСТЬNULL(ПроцентыСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки, 0)
		|		ИНАЧЕ ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки
		|	КОНЕЦ КАК ПроцентСевернойНадбавки,
		|	ВЫБОР
		|		КОГДА МаксимальныеПроцентыПорядковНачисления.ПорядокНачисленияСеверныхНадбавок ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		КОГДА ВЫБОР
		|				КОГДА ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавкиИзменяется
		|					ТОГДА ЕСТЬNULL(ПроцентыСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки, 0)
		|				ИНАЧЕ ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки
		|			КОНЕЦ >= МаксимальныеПроцентыПорядковНачисления.МаксимальноеЗначение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДостигнутМаксимальныйПроцент,
		|	ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПорядокИсчисленияПроцентаСевернойНадбавки,
		|	ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавкиИзменяется
		|ПОМЕСТИТЬ ВТСведенияОПараметрахИсчисленияСеверногоСтажа
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц КАК ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТМаксимальныеПроцентыПорядковНачисления КАК МаксимальныеПроцентыПорядковНачисления
		|			ПО ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПорядокИсчисленияПроцентаСевернойНадбавки = МаксимальныеПроцентыПорядковНачисления.ПорядокНачисленияСеверныхНадбавок
		|		ПО ФизическиеЛицаПериоды.ФизическоеЛицо = ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроцентыСевернойНадбавкиФизическихЛицСрезПоследних КАК ПроцентыСевернойНадбавкиФизическихЛиц
		|		ПО ФизическиеЛицаПериоды.Период = ПроцентыСевернойНадбавкиФизическихЛиц.Период
		|			И ФизическиеЛицаПериоды.ФизическоеЛицо = ПроцентыСевернойНадбавкиФизическихЛиц.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Период";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТМаксимальныеПроцентыПорядковНачисления", ИмяВТМаксимальныеПроцентыПорядковНачисления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПроцентыСевернойНадбавкиФизическихЛицСрезПоследних", ИмяВТПроцентыСевернойНадбавкиФизическихЛицСрезПоследних);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапроса, "ФизическиеЛицаПериоды.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ФизическиеЛицаПериоды.Период", "ФизическиеЛицаПериоды." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТСведенияОПараметрахИсчисленияСеверногоСтажа", ИмяВТСведенияОПараметрахИсчисленияСеверногоСтажа);
	
	Запрос.Текст = Запрос.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапроса;
		
	Возврат Запрос;
	
КонецФункции

Функция НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(Знач ИмяПоля) Экспорт
	
	НеобходимыПостоянныеКадровыеДанные = КадровыйУчетБазовый.НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОбОбразованияхФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОбУченыхСтепеняхФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОбУченыхЗванияхФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОЗнанияхЯзыковФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОПрофессияхФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОЛьготахГражданПодвергшихсяРадиации(ИмяПоля)
		Или НеобходимыСведенияОПочетныхЗванияхФизическихЛиц(ИмяПоля)
		Или НеобходимыСтроковыеСведенияФизическихЛиц(ИмяПоля);
		
	Если Не НеобходимыПостоянныеКадровыеДанные
			И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		
		НеобходимыПостоянныеКадровыеДанные =
			Модуль.НеобходимыСведенияОГосударственныхСлужащих(ИмяПоля)
			Или Модуль.НеобходимыСведенияРеестраГосслужащих(ИмяПоля);
			
	КонецЕсли; 
	
	Возврат НеобходимыПостоянныеКадровыеДанные;
	
КонецФункции
	
Функция НеобходимаКонтактнаяИнформацияФизическогоЛица(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТелефонМобильный")
		Или ИмяПоля = ВРег("ТелефонМобильныйПредставление")
		Или КадровыйУчетБазовый.НеобходимаКонтактнаяИнформацияФизическогоЛица(ИмяПоля);
	
КонецФункции

Функция ДобавитьКритерийПоискаПоКонтактнойИнформацииФизическогоЛица(КритерииПоиска, УсловиеПоиска) Экспорт
	
	КритерийДобавлен = Ложь;
	Если НеобходимаКонтактнаяИнформацияФизическогоЛица(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяКритерия = "Справочник.ФизическиеЛица.КонтактнаяИнформация";
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ТелефонМобильный") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".ТелефонМобильный";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("ТелефонМобильныйПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".ТелефонМобильныйПредставление";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, УсловиеПоиска);
		
		ДополнительноеУсловие = Новый Структура;
		ДополнительноеУсловие.Вставить("ЛевоеЗначение", "Вид");
		ДополнительноеУсловие.Вставить("ВидСравнения", "=");
		ДополнительноеУсловие.Вставить("ПравоеЗначение", ПравоеЗначение);
		ДополнительноеУсловие.Вставить("ОтносительныйПуть", Ложь);
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, ДополнительноеУсловие);
		
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Если Не КритерийДобавлен Тогда
		КритерийДобавлен = КадровыйУчетБазовый.ДобавитьКритерийПоискаПоКонтактнойИнформацииФизическогоЛица(КритерииПоиска, УсловиеПоиска);
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

#КонецОбласти

#Область КадровыеДанныеСотрудников

Функция ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных, ИмяВТКадровыеДанныеСотрудников) Экспорт
	
	ТекстОписанияПолей = "";
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли; 
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли; 
	
	ЕстьПодсистемаОрганизационнаяСтруктура = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура");
	Если ЕстьПодсистемаОрганизационнаяСтруктура Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
	КонецЕсли;
	
	ТекстЗапросаПолученияРазличныхЗаписей = "";
	
	Для каждого ИмяКадровыхДанных Из ИменаКадровыхДанных Цикл
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхСотрудника(ИмяКадровыхДанных) Тогда
			Продолжить;
		ИначеЕсли ДобавитьПолеСведенийОТерриторияхСотрудников(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОГрафикахРаботы(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОРазрядахКатегориях(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПКУ(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОСостоянииСотрудников(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийКонтрактаДоговораСотрудника(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеОсновныхДанныхКонтрактовДоговоровСотрудников(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОДолеНеполногоРабочегоВремениСотрудников(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОМестеВыплатыЗарплаты(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОСовокупныхТарифныхСтавках(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСвойствДолжностейГосударственнойСлужбы(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьПолеСведенийОПринадлежностиДолжностиКВоеннослужащим(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ЕстьПодсистемаОрганизационнаяСтруктура
				И МодульОрганизационнаяСтруктура.ДобавитьПолеСведенийОМестеВСтруктуреПредприятия(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ОстаткиОтпусков.ДобавитьПолеСведенийОЕжегодныхОтпусках(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных) Тогда
			
			Продолжить;
			
		Иначе
			
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", ИмяКадровыхДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаБазовыхКадровыхДанных = ИсточникиДанных.Получить("БазовыеКадровыеДанныеСотрудников");
	Если ИменаБазовыхКадровыхДанных = Неопределено Тогда
		
		ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
		Если ФормироватьТаблицуРазличных Тогда
			
			ИмяВТОтборовРазличныхСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтборовРазличныхСотрудников");
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников = ИмяВТОтборовРазличныхСотрудников;
			
			ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
			
		Иначе
			ОписательВТОтборов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписательВременнойТаблицыОтборов);
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников = ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОтборовСотрудников.Период КАК Период,
			|	ТаблицаОтборовСотрудников.Сотрудник КАК Сотрудник,
			|	ТаблицаОтборовСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудник,
			|	ТаблицаОтборовСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников
			|ИЗ
			|	ВТОтборовРазличныхСотрудников КАК ТаблицаОтборовСотрудников";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
		Если ФормироватьТаблицуРазличных Тогда
			
			ТекстЗапросаПолученияРазличныхЗаписей =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТаблицаОтборовСотрудников.Период КАК Период,
				|	ТаблицаОтборовСотрудников.Сотрудник КАК Сотрудник,
				|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник,
				|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТОтборовРазличныхСотрудников
				|ИЗ
				|	ВТОтборовСотрудников КАК ТаблицаОтборовСотрудников
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО ТаблицаОтборовСотрудников.Сотрудник = Сотрудники.Ссылка";
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовРазличныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборовСотрудников.Сотрудник", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборовСотрудников.Период", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО ТаблицаОтборовСотрудников.Сотрудник = Сотрудники.Ссылка";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборовСотрудников.ГоловнойСотрудник", "Сотрудники.ГоловнойСотрудник");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборовСотрудников.ФизическоеЛицо", "Сотрудники.ФизическоеЛицо");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборовСотрудников.Сотрудник", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
				
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборовСотрудников.Период", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
			
		КонецЕсли;
		
	Иначе
		
		ФормироватьТаблицуРазличных = Ложь;
		
		Запрос = КадровыйУчетБазовый.ЗапросВТКадровыеДанныеСотрудников(
			ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИменаБазовыхКадровыхДанных, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных, "ВТКадровыеДанныеСотрудников");
		
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
		
		ПозицияТочкиЗапятой = СтрНайти(Запрос.Текст, ";");
		ТекстЗапросаПолученияРазличныхЗаписей = Лев(Запрос.Текст, ПозицияТочкиЗапятой - 1);
		Запрос.Текст = Сред(Запрос.Текст, ПозицияТочкиЗапятой + 1);
		
	КонецЕсли;
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстОписанияПолей, "ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТКадровыеДанныеСотрудников", ИмяВТКадровыеДанныеСотрудников);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	ДобавитьТекстЗапросаВТСведенийОТерриторияхСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенийОГрафикахРаботы(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенийОРазрядахКатегориях(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенийОПКУ(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенийОСостоянииСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияКонтрактаДоговораСотрудника(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТОсновныеДанныеКонтрактовДоговоровСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОСовокупныхТарифныхСтавках(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТМестаВыплатыЗарплатыСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ОстаткиОтпусков.ДобавитьТекстЗапросаВТСведенияОЕжегодныхОтпусках(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба.ДобавитьТекстыЗапросовВТСвойстваДолжностейГосударственнойСлужбы(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	КонецЕсли;
	
	Если ЕстьПодсистемаОрганизационнаяСтруктура Тогда
		МодульОрганизационнаяСтруктура.ДобавитьТекстЗапросаСведенияОМестеВСтруктуреПредприятия(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	КонецЕсли;
	
	Если ИсточникиДанных.Получить("КадроваяИсторияСотрудников") <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КадроваяИсторияСотрудников.Организация = ФункциональныеОпции.Организация",
			"(КадроваяИсторияСотрудников.Организация = ФункциональныеОпции.Организация
			|		ИЛИ СостоянияПодработок.Организация = ФункциональныеОпции.Организация)");
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстЗапросаПолученияРазличныхЗаписей) Тогда
		
		Запрос.Текст =
			ТекстЗапросаПолученияРазличныхЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТПостоянныеКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеСотрудников = "ВТПостоянныеКадровыеДанныеСотрудников") Экспорт
	
	ТекстОписанияПолей = "";
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли; 
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ТекстЗапросаПолученияРазличныхЗаписей = "";
	
	Для каждого ИмяКадровыхДанных Из ИменаКадровыхДанных Цикл
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхСотрудника(ИмяКадровыхДанных) Тогда
			 Продолжить;
		ИначеЕсли ДобавитьПолеСведенийОПодработкахСотрудников(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных) Тогда
			Продолжить;
		Иначе
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеПостоянныеКадровыеДанныеСотрудников", ИмяКадровыхДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаБазовыхКадровыхДанных = ИсточникиДанных.Получить("БазовыеПостоянныеКадровыеДанныеСотрудников");
	Если ИменаБазовыхКадровыхДанных = Неопределено Тогда
		
		ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
		Если ФормироватьТаблицуРазличных Тогда
			
			ИмяВТОтборовРазличныхСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтборовРазличныхСотрудников");
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников = ИмяВТОтборовРазличныхСотрудников;
			
			ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
			
		Иначе
			ОписательВТОтборов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписательВременнойТаблицыОтборов);
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников = ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОтборовСотрудников.Сотрудник КАК Сотрудник,
			|	ТаблицаОтборовСотрудников.ГоловнойСотрудник ГоловнойСотрудник,
			|	ТаблицаОтборовСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТПостоянныеКадровыеДанныеСотрудников
			|ИЗ
			|	ВТОтборовРазличныхПостоянныхСотрудников КАК ТаблицаОтборовСотрудников";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхПостоянныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
		Если ФормироватьТаблицуРазличных Тогда
			
			ТекстЗапросаПолученияРазличныхЗаписей =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТаблицаОтборовСотрудников.Сотрудник КАК Сотрудник,
				|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник,
				|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТОтборовРазличныхПостоянныхСотрудников
				|ИЗ
				|	ВТОтборовСотрудников КАК ТаблицаОтборовСотрудников
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО ТаблицаОтборовСотрудников.Сотрудник = Сотрудники.Ссылка";
			
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовРазличныхПостоянныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
				
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ВТОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
				
			ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
				"ТаблицаОтборовСотрудников.Сотрудник", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО ТаблицаОтборовСотрудников.Сотрудник = Сотрудники.Ссылка";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборовСотрудников.ГоловнойСотрудник", "Сотрудники.ГоловнойСотрудник");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборовСотрудников.ФизическоеЛицо", "Сотрудники.ФизическоеЛицо");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ТаблицаОтборовСотрудников.Сотрудник", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
			
		КонецЕсли;
		
	Иначе
		
		ФормироватьТаблицуРазличных = Ложь;
		
		Запрос = КадровыйУчетБазовый.ЗапросВТПостоянныеКадровыеДанныеСотрудников(
			ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИменаБазовыхКадровыхДанных, ИсточникиДанных, "ВТПостоянныеКадровыеДанныеСотрудников");
		
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(
			ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
		
		ПозицияТочкиЗапятой = СтрНайти(Запрос.Текст, ";");
		ТекстЗапросаПолученияРазличныхЗаписей = Лев(Запрос.Текст, ПозицияТочкиЗапятой - 1);
		Запрос.Текст = Сред(Запрос.Текст, ПозицияТочкиЗапятой + 1);
		
	КонецЕсли;
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстОписанияПолей, "ПОМЕСТИТЬ ВТПостоянныеКадровыеДанныеСотрудников");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПостоянныеКадровыеДанныеСотрудников", ИмяВТПостоянныеКадровыеДанныеСотрудников);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	ДобавитьТекстЗапросаВТСведенийОПодработкахСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	Если Не ПустаяСтрока(ТекстЗапросаПолученияРазличныхЗаписей) Тогда
		
		Запрос.Текст =
			ТекстЗапросаПолученияРазличныхЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСведенияОТерриторияхСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОТерриторияхСотрудников = "ВТСведенияОТерриторияхСотрудников") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ТерриторииСотрудников", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ТерриторииСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОТерриторияхСотрудников);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОГрафикахРаботы(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОГрафикахРаботы = "ВТСведенияОГрафикахРаботы") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ГрафикРаботыСотрудников", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ГрафикРаботыСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОГрафикахРаботы);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОРазрядахКатегориях(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОРазрядахКатегориях = "ВТСведенияОРазрядахКатегориях") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("РазрядыКатегорииСотрудников", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"РазрядыКатегорииСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОРазрядахКатегориях);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОПКУ(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОРазрядахКатегориях = "ВТСведенияОПКУ") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ПКУСотрудников", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПКУСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОРазрядахКатегориях);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОСостоянииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОСостоянииСотрудников = "ВТСведенияОСостоянииСотрудников") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("СостоянияСотрудников", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"СостоянияСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОСостоянииСотрудников);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияСостоянияПодработокСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияСостоянияПодработокСотрудников = "ВТСведенияСостоянияПодработокСотрудников") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("СостоянияПодработок", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"СостоянияПодработок", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияСостоянияПодработокСотрудников);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияКонтрактаДоговораСотрудника(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияКонтрактаДоговораСотрудника = "ВТСведенияКонтрактаДоговораСотрудника") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("СведенияКонтрактаДоговораСотрудника", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"СведенияКонтрактаДоговораСотрудника", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияКонтрактаДоговораСотрудника);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТОсновныеДанныеКонтрактовДоговоровСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТОсновныеДанныеКонтрактовДоговоровСотрудников = "ВТОсновныеДанныеКонтрактовДоговоровСотрудников") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ОсновныеДанныеКонтрактаДоговораСотрудника", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ОсновныеДанныеКонтрактаДоговораСотрудника", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТОсновныеДанныеКонтрактовДоговоровСотрудников);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОСовокупныхТарифныхСтавках(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОСовокупныхТарифныхСтавках = "ВТСведенияОСовокупныхТарифныхСтавках") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ЗначенияСовокупныхТарифныхСтавокСотрудников", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ЗначенияСовокупныхТарифныхСтавокСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОСовокупныхТарифныхСтавках);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция НеобходимыПостоянныеКадровыеДанныеСотрудников(ИмяПоля) Экспорт
	
	Возврат КадровыйУчетБазовый.НеобходимыПостоянныеКадровыеДанныеСотрудников(ИмяПоля)
		Или НеобходимыСведенияОПодработкахСотрудников(ИмяПоля);
	
КонецФункции

// Формирует временную таблицу ВТСтажиСотрудников и помещает ее в менеджер временных таблиц.
// Список сотрудников, видов стажей и дат, по которым необходимо получить данные, берутся из
// временной таблицы ВТИсходныеДанные в менеджере временных таблиц, переданном в качестве параметра.
// Временная таблица обязательно должна содержать колонки Сотрудник,ВидСтажа и Дата.
//
// Параметры:
//		МенеджерВременныхТаблиц
//
// Формируемая временная таблица имеет колонки Сотрудник, ВидСтажа, Дата, ДатаОтсчета(на которую введен стаж),
// РазмерМесяцев, РазмерМесяцевНаДатуОтсчета.
//
Процедура СоздатьВТСтажиСотрудников(МенеджерВременныхТаблиц, ТолькоРазрешенные = Истина, ИмяВТИсходныеДанные = "ВТИсходныеДанные", ИмяВТСтажиСотрудников = "ВТСтажиСотрудников") Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ИмяВТСотрудникиСФизическимиЛицами = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСотрудникиСФизическимиЛицами");
	ИмяВТТаблицаОтборовФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТТаблицаОтборовФизическихЛиц");
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсходныеДанные.Дата КАК Период,
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	ИсходныеДанные.ВидСтажа КАК ВидСтажа
		|ПОМЕСТИТЬ ВТСотрудникиСФизическимиЛицами
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ИсходныеДанные.Сотрудник = Сотрудники.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиСФизическимиЛицами.Период,
		|	СотрудникиСФизическимиЛицами.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТТаблицаОтборовФизическихЛиц
		|ИЗ
		|	ВТСотрудникиСФизическимиЛицами КАК СотрудникиСФизическимиЛицами";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТИсходныеДанные", ИмяВТИсходныеДанные);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСотрудникиСФизическимиЛицами", ИмяВТСотрудникиСФизическимиЛицами);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТаблицаОтборовФизическихЛиц", ИмяВТТаблицаОтборовФизическихЛиц);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	Запрос.Текст = ТекстЗапроса;
		
	Запрос.Выполнить();
	
	ИмяВТСтажиФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСтажиФизическихЛиц");
	СоздатьВТСтажиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИмяВТТаблицаОтборовФизическихЛиц, , ИмяВТСтажиФизическихЛиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиСФизическимиЛицами.Сотрудник КАК Сотрудник,
		|	СотрудникиСФизическимиЛицами.Период КАК Дата,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	СтажиФизическихЛиц.ВсегоМесяцев КАК РазмерМесяцев
		|ПОМЕСТИТЬ ВТСтажиСотрудников
		|ИЗ
		|	ВТСотрудникиСФизическимиЛицами КАК СотрудникиСФизическимиЛицами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО СотрудникиСФизическимиЛицами.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|			И СотрудникиСФизическимиЛицами.Период = СтажиФизическихЛиц.Период
		|			И СотрудникиСФизическимиЛицами.ВидСтажа = СтажиФизическихЛиц.ВидСтажа";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиСФизическимиЛицами", ИмяВТСотрудникиСФизическимиЛицами);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСтажиФизическихЛиц", ИмяВТСтажиФизическихЛиц);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСтажиСотрудников", ИмяВТСтажиСотрудников);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура создает временную таблицу с датами изменения стажей сотрудников в месяцах
// за указанные интервалы.
// В итоговую таблицу попадают только сотрудники, для которых определены данные стажа.
// 
// Параметры:
//		МенеджерВременныхТаблиц		- менеджер ВТ, в котором должна быть таблица с полями.
//			* Сотрудник, 
//			* Период,
//			* ДатаОкончания
//		ИмяВТСотрудникиПериоды		- Строка
//		ИмяВТПериодыИзмененияСтажа	- Строка
//
// В менеджере временных таблиц создается таблица ВТПериодыИзмененияСтажа.
// 		* Сотрудник,
// 		* ВидСтажа,
// 		* ДатаСтажа - дата изменения значения стажа в заданном интервале,
// 		* ЗначениеСтажа - значение стажа в месяцах на дату.
//
Процедура СоздатьВТПериодыИзмененияСтажа(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды = "ВТСотрудникиПериоды", ИмяВТПериодыИзмененияСтажа = "ВТПериодыИзмененияСтажа", ИмяПоляСотрудник = "Сотрудник",  ИмяПоляВидСтажа = "") Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	0 КАК Цифра
		|ПОМЕСТИТЬ ВТЦифры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	4
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	5
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	6
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	7
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	8
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	9
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.ВидСтажа КАК ВидСтажа,
		|	СотрудникиПериоды.Период,
		|	СотрудникиПериоды.ДатаОкончания,
		|	Единицы.Цифра + ЕСТЬNULL(Десятки.Цифра, 0) * 10 + ЕСТЬNULL(Сотни.Цифра, 0) * 100 КАК НомерМесяца
		|ПОМЕСТИТЬ ВТНомераМесяцевСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Единицы
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Десятки
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЦифры КАК Сотни
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Единицы.Цифра + ЕСТЬNULL(Десятки.Цифра, 0) * 10 + ЕСТЬNULL(Сотни.Цифра, 0) * 100 <= РАЗНОСТЬДАТ(СотрудникиПериоды.Период, СотрудникиПериоды.ДатаОкончания, МЕСЯЦ) + 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(СтажиФизическихЛиц.ДатаОтсчета, МЕСЯЦ, СтажиФизическихЛиц.ВсегоМесяцев), МЕСЯЦ, СотрудникиПериоды.НомерМесяца) < СотрудникиПериоды.Период
		|			ТОГДА СотрудникиПериоды.Период
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(СтажиФизическихЛиц.ДатаОтсчета, МЕСЯЦ, СтажиФизическихЛиц.ВсегоМесяцев), МЕСЯЦ, СотрудникиПериоды.НомерМесяца)
		|	КОНЕЦ КАК ДатаСтажа,
		|	СотрудникиПериоды.Сотрудник,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	СтажиФизическихЛиц.ВсегоМесяцев + СотрудникиПериоды.НомерМесяца КАК ЗначениеСтажа
		|ПОМЕСТИТЬ ВТПериодыИзмененияСтажа
		|ИЗ
		|	ВТНомераМесяцевСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО СотрудникиПериоды.Период = СтажиФизическихЛиц.Период
		|			И СотрудникиПериоды.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|			И (ВЫРАЗИТЬ(СотрудникиПериоды.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо)
		|ГДЕ
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(СтажиФизическихЛиц.Период, ДЕНЬ, -СтажиФизическихЛиц.Дней), МЕСЯЦ, СотрудникиПериоды.НомерМесяца) <= СотрудникиПериоды.ДатаОкончания";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	
	Если ВРег(ИмяПоляСотрудник) <> ВРег("Сотрудник") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Сотрудник", "." + ИмяПоляСотрудник);
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПоляВидСтажа) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СотрудникиПериоды.ВидСтажа КАК ВидСтажа,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И СотрудникиПериоды.ВидСтажа = СтажиФизическихЛиц.ВидСтажа", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СотрудникиПериоды.ВидСтажа", "СотрудникиПериоды." + ИмяПоляВидСтажа);
	КонецЕсли;
	
	Если ЗарплатаКадрыОбщиеНаборыДанных.ДобавлятьЗапросыУничтоженияВспомогательныхВременныхТаблиц() Тогда
		
		ИмяВТСтажиФизическихЛиц = "ВТСтажиФизическихЛиц";
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, ИмяВТСтажиФизическихЛиц);
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТЦифры");
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТНомераМесяцевСотрудникиПериоды");
		
	Иначе
		
		ИмяВТСтажиФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСтажиФизическихЛиц");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСтажиФизическихЛиц", ИмяВТСтажиФизическихЛиц);
		
		ИмяВТЦифры = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТЦифры");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЦифры", ИмяВТЦифры);
		
		ИмяВТНомераМесяцевСотрудникиПериоды = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТНомераМесяцевСотрудникиПериоды");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНомераМесяцевСотрудникиПериоды", ИмяВТНомераМесяцевСотрудникиПериоды);
		
	КонецЕсли;
	
	ОписательОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ИмяВТСотрудникиПериоды, "Сотрудник.ФизическоеЛицо");
	
	ЗапросСтажей = ЗапросВТСтажиФизическихЛиц(Ложь, ОписательОтборов, , ИмяВТСтажиФизическихЛиц, ИмяПоляВидСтажа);
	ЗапросСтажей.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗапросСтажей.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТПериодыИзмененияСтажа", ИмяВТПериодыИзмененияСтажа);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура создает временную таблицу процентов северной надбавки физических лиц
// на указанные даты.
// 
// Параметры:
//	МенеджерВременныхТаблиц - менеджер ВТ, в котором должна быть таблица ВТФизическиеЛицаПериоды с полями 
//		- ФизическоеЛицо, 
//		- Период
//	ИмяТаблицыФизическиеЛицаПериоды - можно передать имя временной таблицы в которой хранятся физические лица и периоды.
//
// В менеджере временных таблиц создается таблица ВТПроцентСевернойНадбавкиФизическихЛиц
// 	- ФизическоеЛицо,
// 	- ПроцентСевернойНадбавки - процент северной надбавки определенный для физического лица.
//
Процедура СоздатьВТПроцентСевернойНадбавкиФизическихЛиц(МенеджерВременныхТаблиц, ИмяТаблицыФизическиеЛицаПериоды = "ВТФизическиеЛицаПериоды") Экспорт
	
	ОписательВременнойТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ИмяТаблицыФизическиеЛицаПериоды);
	Запрос = ЗапросВТСведенияОПараметрахИсчисленияСеверногоСтажа(Истина, ОписательВременнойТаблицыОтборов, , "ВТПроцентСевернойНадбавкиФизическихЛиц");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ОписательВременныхТаблицДляСоздатьВТПроцентСевернойНадбавкиСотрудников(МенеджерВременныхТаблиц, ИмяВТОтбораСотрудников = "ВТСотрудникиПериоды", ИмяВТПроцентСевернойНадбавкиСотрудников = "ВТПроцентСевернойНадбавкиСотрудников") Экспорт
	
	ОписательТаблиц = Новый Структура;
	ОписательТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательТаблиц.Вставить("ИмяВТОтбораСотрудников", ИмяВТОтбораСотрудников);
	ОписательТаблиц.Вставить("ИмяВТПроцентСевернойНадбавкиСотрудников", ИмяВТПроцентСевернойНадбавкиСотрудников);
	
	Возврат ОписательТаблиц;
	
КонецФункции

// Процедура создает временную таблицу с процентом северной надбавки сотрудников 
// на указанную дату.
// 
// Параметры:
//	МенеджерВременныхТаблиц - менеджер ВТ, в котором должна быть таблица ВТСотрудникиПериоды с полями.
//		- Сотрудник, 
//		- Период,
//	ИмяТаблицыСотрудникиПериоды - можно передать имя временной таблицы в которой хранятся сотрудники и периоды.
//
// В менеджере временных таблиц создается таблица ВТПериодыИзмененияСтажа.
// 	- Сотрудник,
// 	- Период - период получения процента северной надбавки,
// 	- ПроцентСевернойНадбавки - значение стажа в месяцах на дату.
//
Процедура СоздатьВТПроцентСевернойНадбавкиСотрудников(ОписательВременныхТаблиц) Экспорт
	
	ИмяТаблицыФизическиеЛицаПериоды = "ВТФизическиеЛицаПериоды" +  ЗарплатаКадрыРасширенныйКлиентСервер.УникальноеИмяРеквизита(); 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СотрудникиПериоды.Период КАК Период,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СотрудникиПериоды.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ #ИмяТаблицыФизическиеЛицаПериоды#
	|ИЗ
	|	#ИмяТаблицыСотрудникиПериоды# КАК СотрудникиПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = СотрудникиПериоды.Сотрудник)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ФизическоеЛицо";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицыФизическиеЛицаПериоды#", ИмяТаблицыФизическиеЛицаПериоды);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицыСотрудникиПериоды#"	, ОписательВременныхТаблиц.ИмяВТОтбораСотрудников);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	Запрос.Выполнить();

	СоздатьВТПроцентСевернойНадбавкиФизическихЛиц(ОписательВременныхТаблиц.МенеджерВременныхТаблиц, ИмяТаблицыФизическиеЛицаПериоды);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаПериоды.Сотрудник КАК Сотрудник,
	|	ФизическиеЛицаПериоды.Период КАК Период,
	|	ПроцентСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавки КАК ПроцентСевернойНадбавки,
	|	ПроцентСевернойНадбавкиФизическихЛиц.ДостигнутМаксимальныйПроцент КАК ДостигнутоМаксимальноеЗначение
	|ПОМЕСТИТЬ ВТПроцентСевернойНадбавкиСотрудников
	|ИЗ
	|	#ИмяТаблицыФизическиеЛицаПериоды# КАК ФизическиеЛицаПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПроцентСевернойНадбавкиФизическихЛиц КАК ПроцентСевернойНадбавкиФизическихЛиц
	|		ПО ФизическиеЛицаПериоды.Период = ПроцентСевернойНадбавкиФизическихЛиц.Период
	|			И ФизическиеЛицаПериоды.ФизическоеЛицо = ПроцентСевернойНадбавкиФизическихЛиц.ФизическоеЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПроцентСевернойНадбавкиФизическихЛиц";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПроцентСевернойНадбавкиСотрудников", ОписательВременныхТаблиц.ИмяВТПроцентСевернойНадбавкиСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицыФизическиеЛицаПериоды#", ИмяТаблицыФизическиеЛицаПериоды);
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТТекущаяКадроваяРасстановка(ТолькоРазрешенные, Организация, Дата, ИмяВТТекущаяКадроваяРасстановка = "ВТТекущаяКадроваяРасстановка") Экспорт
	
	Запрос = Новый Запрос;
	ИмяПараметраОрганизация = "";
	
	ИмяВТОтборПоГоловнойОрганизации = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтборПоГоловнойОрганизации");
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	&Дата КАК Период,
		|	Организации.Ссылка КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТОтборПоГоловнойОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтборПоГоловнойОрганизации", ИмяВТОтборПоГоловнойОрганизации);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ТекстУсловия =
			"ГДЕ
			|	Организации.Ссылка = &Организация";

		Если ТипЗнч(Организация) = Тип("Строка") Тогда
			ТекстУсловия = СтрЗаменить(ТекстУсловия, "&Организация", Организация);
		Иначе
			ИмяПараметраОрганизация = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("Организация");
			Запрос.УстановитьПараметр("&Организация", "&" + ИмяПараметраОрганизация);
			Запрос.УстановитьПараметр(ИмяПараметраОрганизация, Организация);
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ТекстУсловия;
		
	КонецЕсли; 
	
	Если ТипЗнч(Дата) = Тип("Строка") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Дата", Дата);
	Иначе
		Запрос.УстановитьПараметр("Дата", Дата);
	КонецЕсли;
		
	ИмяВТКадроваяИсторияСотрудниковСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТКадроваяИсторияСотрудниковСрезПоследних");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТОтборПоГоловнойОрганизации, "ГоловнаяОрганизация");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	Если ЗначениеЗаполнено(Организация) Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Организация", " В ", Организация);
	КонецЕсли; 
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"КадроваяИсторияСотрудников",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТКадроваяИсторияСотрудниковСрезПоследних);
	
	ТекстЗапросаВТТекущаяКадроваяРасстановка =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудниковСрезПоследних.Организация КАК Организация,
		|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК Подразделение,
		|	КадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность,
		|	КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
		|	ШтатноеРасписание.РазрядКатегория КАК РазрядКатегория,
		|	ШтатноеРасписание.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ШтатноеРасписание.СтатьяФинансирования КАК СтатьяФинансирования,
		|	СУММА(КадроваяИсторияСотрудниковСрезПоследних.КоличествоСтавок) КАК КоличествоСтавок
		|ПОМЕСТИТЬ ВТТекущаяКадроваяРасстановка
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию = ШтатноеРасписание.Ссылка
		|ГДЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И &ОтборПоОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудниковСрезПоследних.ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудниковСрезПоследних.Организация,
		|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение,
		|	КадроваяИсторияСотрудниковСрезПоследних.Должность,
		|	КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию,
		|	ШтатноеРасписание.РазрядКатегория,
		|	ШтатноеРасписание.СпособОтраженияЗарплатыВБухучете,
		|	ШтатноеРасписание.СтатьяФинансирования";
		
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаВТТекущаяКадроваяРасстановка, ТолькоРазрешенные);
	
	ТекстУсловияОтбора = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекстУсловияОтбора = "	И (КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация)";
		Если ТипЗнч(Организация) = Тип("Строка") Тогда
			ТекстЗапросаВТТекущаяКадроваяРасстановка = СтрЗаменить(ТекстЗапросаВТТекущаяКадроваяРасстановка, "&Организация", Организация);
		Иначе
			ТекстЗапросаВТТекущаяКадроваяРасстановка = СтрЗаменить(ТекстЗапросаВТТекущаяКадроваяРасстановка, "&Организация", "&" + ИмяПараметраОрганизация);
		КонецЕсли;
	КонецЕсли; 
	
	ТекстЗапросаВТТекущаяКадроваяРасстановка = СтрЗаменить(ТекстЗапросаВТТекущаяКадроваяРасстановка, "И &ОтборПоОрганизация", ТекстУсловияОтбора);
	
	ТекстЗапросаВТТекущаяКадроваяРасстановка = СтрЗаменить(ТекстЗапросаВТТекущаяКадроваяРасстановка, "ВТКадроваяИсторияСотрудниковСрезПоследних", ИмяВТКадроваяИсторияСотрудниковСрезПоследних);
	ТекстЗапросаВТТекущаяКадроваяРасстановка = СтрЗаменить(ТекстЗапросаВТТекущаяКадроваяРасстановка, "ВТТекущаяКадроваяРасстановка", ИмяВТТекущаяКадроваяРасстановка);
	
	Запрос.Текст = ТекстЗапроса
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ЗапросВТИмяРегистраСрез.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапросаВТТекущаяКадроваяРасстановка;
		  
	Возврат Запрос;
	
КонецФункции

Процедура СоздатьВТТекущаяКадроваяРасстановка(МенеджерВременныхТаблиц, Организация = Неопределено, Дата = '00010101') Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицаФильтр = Новый ТаблицаЗначений;
	ТаблицаФильтр.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Если ЗначениеЗаполнено(Организация) Тогда
		ТаблицаФильтр.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли; 
	
	СтрокаТаблицы = ТаблицаФильтр.Добавить();
	СтрокаТаблицы.Период = Дата;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтрокаТаблицы.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	КонецЕсли; 
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаФильтр));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.Период,
		|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
		|ГДЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация";
		
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация", "");
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"СостоянияПодработок",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаФильтр));
			
		ТекстЗапросаСостояний = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СостоянияПодработок.Период,
			|	СостоянияПодработок.Сотрудник
			|ИЗ
			|	ВТСостоянияПодработокСрезПоследних КАК СостоянияПодработок
			|ГДЕ
			|	СостоянияПодработок.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
			|	И СостоянияПодработок.Организация = &Организация";
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ТекстЗапросаСостояний = СтрЗаменить(ТекстЗапросаСостояний, "И СостоянияПодработок.Организация = &Организация", "");
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|"
			+ ТекстЗапросаСостояний;
		
	КонецЕсли; 
		
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ГрафикРаботыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудники",
			"Сотрудник"));
	
	Запрос.УстановитьПараметр("ИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассыДолжностейИПрофессий",
		ПолучитьФункциональнуюОпцию("ИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассыДолжностейИПрофессий"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность,
		|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК Подразделение,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассыДолжностейИПрофессий
		|				И НЕ ШтатноеРасписание.Ссылка ЕСТЬ NULL 
		|			ТОГДА ШтатноеРасписание.РазрядКатегория
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
		|	КОНЕЦ КАК РазрядКатегория,
		|	СУММА(КадроваяИсторияСотрудниковСрезПоследних.КоличествоСтавок) КАК КоличествоСтавок,
		|	МАКСИМУМ(ГрафикиРаботыСотрудников.ГрафикРаботы) КАК ГрафикРаботыСотрудников
		|ПОМЕСТИТЬ ВТТекущаяКадроваяРасстановка
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезПоследних КАК ГрафикиРаботыСотрудников
		|		ПО КадроваяИсторияСотрудниковСрезПоследних.Сотрудник = ГрафикиРаботыСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию = ШтатноеРасписание.Ссылка
		|ГДЕ
		|	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|	И КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудниковСрезПоследних.Должность,
		|	КадроваяИсторияСотрудниковСрезПоследних.Подразделение,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассыДолжностейИПрофессий
		|				И НЕ ШтатноеРасписание.Ссылка ЕСТЬ NULL 
		|			ТОГДА ШтатноеРасписание.РазрядКатегория
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
		|	КОНЕЦ";	
		
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КадроваяИсторияСотрудниковСрезПоследних.Организация = &Организация", "");
	КонецЕсли; 
			
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
		
		ТекстЗапросаСостояний = 
			"ВЫБРАТЬ
			|	СостоянияПодработок.Должность КАК Должность,
			|	СостоянияПодработок.Подразделение КАК Подразделение,
			|	ВЫБОР
			|		КОГДА &ИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассыДолжностейИПрофессий
			|				И НЕ ШтатноеРасписание.Ссылка ЕСТЬ NULL 
			|			ТОГДА ШтатноеРасписание.РазрядКатегория
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
			|	КОНЕЦ КАК РазрядКатегория,
			|	СУММА(СостоянияПодработок.КоличествоСтавок) КАК КоличествоСтавок,
			|	МАКСИМУМ(ГрафикиРаботыСотрудников.ГрафикРаботы) КАК ГрафикРаботыСотрудников
			|ИЗ
			|	ВТСостоянияПодработокСрезПоследних КАК СостоянияПодработок
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезПоследних КАК ГрафикиРаботыСотрудников
			|		ПО СостоянияПодработок.Сотрудник = ГрафикиРаботыСотрудников.Сотрудник
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО СостоянияПодработок.ДолжностьПоШтатномуРасписанию = ШтатноеРасписание.Ссылка
			|ГДЕ
			|	СостоянияПодработок.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
			|	И СостоянияПодработок.Организация = &Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	СостоянияПодработок.Должность,
			|	СостоянияПодработок.Подразделение,
			|	ВЫБОР
			|		КОГДА &ИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассыДолжностейИПрофессий
			|				И НЕ ШтатноеРасписание.Ссылка ЕСТЬ NULL 
			|			ТОГДА ШтатноеРасписание.РазрядКатегория
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
			|	КОНЕЦ";
			
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ТекстЗапросаСостояний = СтрЗаменить(ТекстЗапросаСостояний, "И СостоянияПодработок.Организация = &Организация", "");
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|"
			+ ТекстЗапросаСостояний;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Должность,
		|	Подразделение";	
	
		
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция ЗапросВТТарифныеСтавкиСотрудников(ТолькоРазрешенные, ИмяВТТарифныеСтавкиСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных) Экспорт

	Запрос = Новый Запрос;
		
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	СотрудникиПериоды.Сотрудник,
			|	СотрудникиПериоды.Период,
			|	NULL КАК ПоказательТарифнойСтавки,
			|	0 КАК ТарифнаяСтавка,
			|	0 КАК РазмерТарифнойСтавки,
			|	0 КАК Оклад,
			|	0 КАК Надбавка,
			|	0 КАК ФОТ,
			|	NULL КАК ОсновноеНачисление,
			|	NULL КАК ПериодЗаписиНачислений,
			|	NULL КАК Регистратор
			|ПОМЕСТИТЬ ВТТарифныеСтавкиСотрудников
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСотрудникиПериоды", ИмяВременнойТаблицыОтборовСотрудников);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТарифныеСтавкиСотрудников", ИмяВТТарифныеСтавкиСотрудников);

	Иначе
		
		ИмяВТДействующиеНачисления = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТДействующиеНачисления");
		ЗапросВТПлановыеНачисления =  ЗапросВТПлановыеНачисленияСотрудников(ТолькоРазрешенные, ИмяВТДействующиеНачисления, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных);

		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТПлановыеНачисления);
		
		ИмяВТФОТСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТФОТСотрудников");
		ИмяВТМинимальныеЗначенияРеквизитовУпорядочивания = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТМинимальныеЗначенияРеквизитовУпорядочивания");
		ИмяВТОсновноеНачислениеСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОсновноеНачислениеСотрудников");
		ИмяВТНачисленияСПоказателем = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТНачисленияСПоказателем");
		
		ТекстЗапросаВТНачисленияСПоказателем = 
			"ВЫБРАТЬ
			|	ДействующиеНачисления.Период КАК Период,
			|	ДействующиеНачисления.Сотрудник КАК Сотрудник,
			|	СУММА(ВЫБОР
			|			КОГДА ОсновноеНачислениеСотрудников.Начисление ЕСТЬ NULL 
			|				ТОГДА ДействующиеНачисления.Размер
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Надбавка,
			|	СУММА(ВЫБОР
			|			КОГДА НЕ ОсновноеНачислениеСотрудников.Начисление ЕСТЬ NULL 
			|				ТОГДА ДействующиеНачисления.Размер
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Оклад,
			|	СУММА(ДействующиеНачисления.Размер) КАК ФОТ
			|ПОМЕСТИТЬ ВТФОТСотрудников
			|{ВЫБРАТЬ
			|	Период,
			|	Сотрудник,
			|	Надбавка,
			|	Оклад,
			|	ФОТ}
			|ИЗ
			|	ВТДействующиеНачисления КАК ДействующиеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДействующиеНачисления КАК ОсновноеНачислениеСотрудников
			|		ПО ДействующиеНачисления.Период = ОсновноеНачислениеСотрудников.Период
			|			И ДействующиеНачисления.Сотрудник = ОсновноеНачислениеСотрудников.Сотрудник
			|			И ДействующиеНачисления.Начисление = ОсновноеНачислениеСотрудников.Начисление
			|			И (ОсновноеНачислениеСотрудников.НачислениеТарифнойСтавки)
			|
			|СГРУППИРОВАТЬ ПО
			|	ДействующиеНачисления.Период,
			|	ДействующиеНачисления.Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОсновноеНачислениеСотрудников.Период КАК Период,
			|	ОсновноеНачислениеСотрудников.Сотрудник КАК Сотрудник,
			|	ОсновноеНачислениеСотрудников.Начисление КАК Начисление,
			|	ОсновноеНачислениеСотрудников.ОсновнойПоказатель КАК Показатель
			|ПОМЕСТИТЬ ВТНачисленияСПоказателем
			|{ВЫБРАТЬ
			|	Период,
			|	Сотрудник,
			|	Начисление,
			|	Показатель}
			|ИЗ
			|	ВТДействующиеНачисления КАК ОсновноеНачислениеСотрудников
			|ГДЕ
			|	ОсновноеНачислениеСотрудников.ОсновнойПоказатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
			|		И (ОсновноеНачислениеСотрудников.НачислениеТарифнойСтавки)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	Показатель";
			
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаВТНачисленияСПоказателем, ТолькоРазрешенные);
		
		ТекстЗапросаВТНачисленияСПоказателем = СтрЗаменить(ТекстЗапросаВТНачисленияСПоказателем, "ВТДействующиеНачисления", ИмяВТДействующиеНачисления);
		ТекстЗапросаВТНачисленияСПоказателем = СтрЗаменить(ТекстЗапросаВТНачисленияСПоказателем, "ВТФОТСотрудников", ИмяВТФОТСотрудников);
		ТекстЗапросаВТНачисленияСПоказателем = СтрЗаменить(ТекстЗапросаВТНачисленияСПоказателем, "ВТНачисленияСПоказателем", ИмяВТНачисленияСПоказателем);
		
		ТекстЗапросаВТНачисленияСПоказателем =
			ЗапросВТПлановыеНачисления.Текст
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ ТекстЗапросаВТНачисленияСПоказателем;
			
		ИмяВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних");
		
		ПоляОтбора = Неопределено;
		Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
			ПоляОтбораПериодическихДанных.Свойство("ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", ПоляОтбора);
		Иначе
			ПоляОтбора = Новый Массив;
		КонецЕсли;
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТНачисленияСПоказателем, "Сотрудник,Показатель");
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.Отборы = ПоляОтбора;
			
		ЗапросВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", 
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина,
			ИмяВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних);
			
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних);
		
		ИмяВТМаксимальныеПериодыЗаписиЗначенийПоказателей = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТМаксимальныеПериодыЗаписиЗначенийПоказателей");
		ИмяВТУникальныеЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТУникальныеЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников");
		
		ТекстЗапросаВТТарифнаяСтавкаСотрудников =
			"ВЫБРАТЬ
			|	ЗначенияПоказателей.Сотрудник,
			|	ЗначенияПоказателей.Показатель,
			|	ЗначенияПоказателей.Период,
			|	МАКСИМУМ(ЗначенияПоказателей.ПериодЗаписи) КАК ПериодЗаписи
			|ПОМЕСТИТЬ ВТМаксимальныеПериодыЗаписиЗначенийПоказателей
			|ИЗ
			|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПоказателей
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗначенияПоказателей.Сотрудник,
			|	ЗначенияПоказателей.Показатель,
			|	ЗначенияПоказателей.Период
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МаксимальныеПериодыЗаписиЗначенийПоказателей.Сотрудник,
			|	МаксимальныеПериодыЗаписиЗначенийПоказателей.Показатель,
			|	МаксимальныеПериодыЗаписиЗначенийПоказателей.Период,
			|	МаксимальныеПериодыЗаписиЗначенийПоказателей.ПериодЗаписи,
			|	МАКСИМУМ(ЗначенияПоказателей.Регистратор) КАК Регистратор,
			|	МАКСИМУМ(ЗначенияПоказателей.Значение) КАК Значение
			|ПОМЕСТИТЬ ВТУникальныеЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
			|ИЗ
			|	ВТМаксимальныеПериодыЗаписиЗначенийПоказателей КАК МаксимальныеПериодыЗаписиЗначенийПоказателей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПоказателей
			|		ПО МаксимальныеПериодыЗаписиЗначенийПоказателей.ПериодЗаписи = ЗначенияПоказателей.ПериодЗаписи
			|			И МаксимальныеПериодыЗаписиЗначенийПоказателей.Сотрудник = ЗначенияПоказателей.Сотрудник
			|			И МаксимальныеПериодыЗаписиЗначенийПоказателей.Показатель = ЗначенияПоказателей.Показатель
			|
			|СГРУППИРОВАТЬ ПО
			|	МаксимальныеПериодыЗаписиЗначенийПоказателей.Сотрудник,
			|	МаксимальныеПериодыЗаписиЗначенийПоказателей.Показатель,
			|	МаксимальныеПериодыЗаписиЗначенийПоказателей.Период,
			|	МаксимальныеПериодыЗаписиЗначенийПоказателей.ПериодЗаписи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
			|	СотрудникиПериоды.Период КАК Период,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ПериодЗаписи, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ОсновноеНачислениеСотрудников.ПериодЗаписи, ДАТАВРЕМЯ(1, 1, 1))
			|			ТОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ПериодЗаписи
			|		ИНАЧЕ ОсновноеНачислениеСотрудников.ПериодЗаписи
			|	КОНЕЦ КАК ПериодЗаписиНачислений,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ПериодЗаписи, ДАТАВРЕМЯ(1, 1, 1)) > ЕСТЬNULL(ОсновноеНачислениеСотрудников.ПериодЗаписи, ДАТАВРЕМЯ(1, 1, 1))
			|			ТОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Регистратор
			|		ИНАЧЕ ОсновноеНачислениеСотрудников.Регистратор
			|	КОНЕЦ КАК Регистратор,
			|	ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК ПоказательТарифнойСтавки,
			|	ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение, 0) КАК ТарифнаяСтавка,
			|	ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение, 0) КАК РазмерТарифнойСтавки,
			|	ЕСТЬNULL(ФОТСотрудников.Оклад, 0) КАК Оклад,
			|	ЕСТЬNULL(ФОТСотрудников.Надбавка, 0) КАК Надбавка,
			|	ЕСТЬNULL(ФОТСотрудников.ФОТ, 0) КАК ФОТ,
			|	ОсновноеНачислениеСотрудников.Начисление КАК ОсновноеНачисление
			|ПОМЕСТИТЬ ВТТарифныеСтавкиСотрудников
			|{ВЫБРАТЬ
			|	Сотрудник,
			|	Период,
			|	ПоказательТарифнойСтавки.*,
			|	ТарифнаяСтавка,
			|	РазмерТарифнойСтавки,
			|	Оклад,
			|	Надбавка,
			|	ФОТ,
			|	ОсновноеНачисление}
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФОТСотрудников КАК ФОТСотрудников
			|		ПО СотрудникиПериоды.Сотрудник = ФОТСотрудников.Сотрудник
			|			И СотрудникиПериоды.Период = ФОТСотрудников.Период
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДействующиеНачисления КАК ОсновноеНачислениеСотрудников
			|		ПО СотрудникиПериоды.Сотрудник = ОсновноеНачислениеСотрудников.Сотрудник
			|			И СотрудникиПериоды.Период = ОсновноеНачислениеСотрудников.Период
			|			И (ОсновноеНачислениеСотрудников.НачислениеТарифнойСтавки)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУникальныеЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
			|		ПО СотрудникиПериоды.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник
			|			И СотрудникиПериоды.Период = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Период
			|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение > 0)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник";
			
		ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТМаксимальныеПериодыЗаписиЗначенийПоказателей", ИмяВТМаксимальныеПериодыЗаписиЗначенийПоказателей);
		ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТУникальныеЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", ИмяВТУникальныеЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников);
		ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТСотрудникиПериоды", ИмяВременнойТаблицыОтборовСотрудников);
		ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТДействующиеНачисления", ИмяВТДействующиеНачисления);
		ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТФОТСотрудников", ИмяВТФОТСотрудников);
		ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних", ИмяВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних);
		ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТТарифныеСтавкиСотрудников", ИмяВТТарифныеСтавкиСотрудников);
			
		ТекстЗапроса = 
			ТекстЗапросаВТНачисленияСПоказателем
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ ЗапросВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Текст
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ ТекстЗапросаВТТарифнаяСтавкаСотрудников;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТПлановыеУдержанияСотрудников(ТолькоРазрешенные, ИмяВТПлановыеУдержанияСотрудников, ИмяВременнойТаблицыОтборовСотрудников, Знач ПоляОтбораСотрудников = "Сотрудник,ДатаНачала,ДатаОкончания", ПоляОтбораПериодическихДанных = Неопределено) Экспорт
	
	Если ТипЗнч(ПоляОтбораСотрудников) = Тип("Строка") Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляОтбораСотрудников, ",", , Истина);
		ПоляОтбораСотрудников = Новый Структура("Сотрудник,ДатаНачала,ДатаОкончания", МассивПолей[0], МассивПолей[1], МассивПолей[2]);
	КонецЕсли; 
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ПлановыеУдержания", ПоляОтбора);
	Иначе
		ПоляОтбора = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВременнойТаблицыОтборовСотрудников, "ФизическоеЛицо");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ПоляОтбораСотрудников.ДатаНачала);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ПоляОтбораСотрудников.Сотрудник + ".ФизическоеЛицо");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
		
	ИмяВТВсеПлановыеУдержания = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТВсеПлановыеУдержания");
	
	ЗапросВсеПлановыеУдержания = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
		"ПлановыеУдержания",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		ИмяВТВсеПлановыеУдержания);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВсеПлановыеУдержания);
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВсеПлановыеУдержания.Текст, "ИзмеренияДаты", ПоляОтбораСотрудников.Сотрудник + ".ФизическоеЛицо");
		
	ИмяВТПлановыеУдержанияСОсновнымПоказателем = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПлановыеУдержанияСОсновнымПоказателем");
	
	ТекстЗапросаОтбораУдержаний =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеПлановыеУдержания.Период,
		|	ВсеПлановыеУдержания.ФизическоеЛицо,
		|	ВсеПлановыеУдержания.Организация,
		|	ВсеПлановыеУдержания.Регистратор,
		|	ВсеПлановыеУдержания.Удержание,
		|	ВсеПлановыеУдержания.ДокументОснование,
		|	УдержанияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТПлановыеУдержанияСОсновнымПоказателем
		|ИЗ
		|	ВТВсеПлановыеУдержания КАК ВсеПлановыеУдержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
		|		ПО ВсеПлановыеУдержания.Удержание = УдержанияПоказатели.Ссылка
		|			И (УдержанияПоказатели.ОсновнойПоказатель)
		|ГДЕ
		|	ВсеПлановыеУдержания.Используется";
		
	ТекстЗапросаОтбораУдержаний = СтрЗаменить(ТекстЗапросаОтбораУдержаний, "ВТВсеПлановыеУдержания", ИмяВТВсеПлановыеУдержания);
	ТекстЗапросаОтбораУдержаний = СтрЗаменить(ТекстЗапросаОтбораУдержаний, "ВТПлановыеУдержанияСОсновнымПоказателем", ИмяВТПлановыеУдержанияСОсновнымПоказателем);
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", ПоляОтбора);
	Иначе
		ПоляОтбора = Новый Массив;
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТПлановыеУдержанияСОсновнымПоказателем, "Показатель,ФизическоеЛицо,Организация");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ИмяВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних =
		ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних");
		
	ЗапросВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников);
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборСотрудников.ДатаОкончания КАК Период,
		|	МАКСИМУМ(ОтборСотрудников.Сотрудник) КАК Сотрудник,
		|	ПлановыеУдержанияСОсновнымПоказателем.Регистратор,
		|	ПлановыеУдержанияСОсновнымПоказателем.Организация,
		|	ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо,
		|	ПлановыеУдержанияСОсновнымПоказателем.Удержание,
		|	ПлановыеУдержанияСОсновнымПоказателем.ДокументОснование,
		|	ПлановыеУдержанияСОсновнымПоказателем.Показатель КАК ОсновнойПоказатель,
		|	ПолучателиУдержаний.Контрагент,
		|	ВЫБОР
		|		КОГДА УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент ЕСТЬ NULL 
		|			ТОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УсловияУдержанияПоИсполнительномуДокументу.Процент = 0
		|					ТОГДА УсловияУдержанияПоИсполнительномуДокументу.Сумма
		|				ИНАЧЕ УсловияУдержанияПоИсполнительномуДокументу.Процент
		|			КОНЕЦ
		|	КОНЕЦ КАК Значение,
		|	ЕСТЬNULL(УсловияУдержанияПоИсполнительномуДокументу.Предел, 0) КАК Предел
		|ПОМЕСТИТЬ ВТПлановыеУдержанияСотрудников
		|ИЗ
		|	ВТОтборСотрудников КАК ОтборСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеУдержанияСОсновнымПоказателем КАК ПлановыеУдержанияСОсновнымПоказателем
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУдержаний КАК ПолучателиУдержаний
		|			ПО ПлановыеУдержанияСОсновнымПоказателем.Удержание = ПолучателиУдержаний.Удержание
		|				И ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо = ПолучателиУдержаний.ФизическоеЛицо
		|				И ПлановыеУдержанияСОсновнымПоказателем.Организация = ПолучателиУдержаний.Организация
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|			ПО ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ФизическоеЛицо
		|				И ПлановыеУдержанияСОсновнымПоказателем.Организация = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Организация
		|				И ПлановыеУдержанияСОсновнымПоказателем.Период = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Период
		|				И ПлановыеУдержанияСОсновнымПоказателем.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
		|			ПО ПлановыеУдержанияСОсновнымПоказателем.Регистратор = УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент
		|		ПО (ВЫРАЗИТЬ(ОтборСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо)
		|			И (ОтборСотрудников.Сотрудник.ГоловнаяОрганизация = ВЫРАЗИТЬ(ПлановыеУдержанияСОсновнымПоказателем.Организация КАК Справочник.Организации).ГоловнаяОрганизация)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтборСотрудников.ДатаОкончания,
		|	ПлановыеУдержанияСОсновнымПоказателем.Регистратор,
		|	ПлановыеУдержанияСОсновнымПоказателем.Организация,
		|	ПлановыеУдержанияСОсновнымПоказателем.ФизическоеЛицо,
		|	ПлановыеУдержанияСОсновнымПоказателем.Удержание,
		|	ПлановыеУдержанияСОсновнымПоказателем.ДокументОснование,
		|	ПлановыеУдержанияСОсновнымПоказателем.Показатель,
		|	ПолучателиУдержаний.Контрагент,
		|	ВЫБОР
		|		КОГДА УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент ЕСТЬ NULL 
		|			ТОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УсловияУдержанияПоИсполнительномуДокументу.Процент = 0
		|					ТОГДА УсловияУдержанияПоИсполнительномуДокументу.Сумма
		|				ИНАЧЕ УсловияУдержанияПоИсполнительномуДокументу.Процент
		|			КОНЕЦ
		|	КОНЕЦ,
		|	ЕСТЬNULL(УсловияУдержанияПоИсполнительномуДокументу.Предел, 0)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыеУдержанияСОсновнымПоказателем", ИмяВТПлановыеУдержанияСОсновнымПоказателем);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтборСотрудников", ИмяВременнойТаблицыОтборовСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыеУдержанияСотрудников", ИмяВТПлановыеУдержанияСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних", ИмяВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОтборСотрудников.Сотрудник", "ОтборСотрудников." + ПоляОтбораСотрудников.Сотрудник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОтборСотрудников.ДатаОкончания", "ОтборСотрудников." + ПоляОтбораСотрудников.ДатаОкончания);
	
	Запрос.Текст =
		ЗапросВсеПлановыеУдержания.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапросаОтбораУдержаний
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ЗапросВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТПлановыеНачисленияСотрудников(ТолькоРазрешенные, ИмяВТПлановыеНачисленияСотрудников, ИмяВременнойТаблицыОтборовСотрудников, Знач ПоляОтбораСотрудников = "Сотрудник,Период", ПоляОтбораПериодическихДанных = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	Если ТипЗнч(ПоляОтбораСотрудников) = Тип("Строка") Тогда
		ПоляОтбораСотрудников = КадровыйУчет.ПоляОтбораСотрудников(ПоляОтбораСотрудников);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	NULL КАК Период,
			|	NULL КАК ПериодЗаписи,
			|	NULL КАК Регистратор,
			|	NULL КАК Сотрудник,
			|	NULL КАК Начисление,
			|	NULL КАК Размер,
			|	NULL КАК ОсновнойПоказатель,
			|	NULL КАК НачислениеТарифнойСтавки
			|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудниковОкончательно";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыеНачисленияСотрудниковОкончательно", ИмяВТПлановыеНачисленияСотрудников);
		
	Иначе
		
		ИмяВТПлановыеНачисленияСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПлановыеНачисленияСрезПоследних");
		ИмяВТПлановыйФОТСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПлановыйФОТСрезПоследних");
		ИмяВТПлановыеНачисленияСотрудниковПредварительно = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПлановыеНачисленияСотрудниковПредварительно");
		ИмяВТПорядокОсновныхНачислений = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПорядокОсновныхНачислений");
		ИмяВТОсновныеНачисленияСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОсновныеНачисленияСотрудников");
		
		ПоляОтбора = Неопределено;
		Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
			ПоляОтбораПериодическихДанных.Свойство("ПлановыеНачисления", ПоляОтбора);
		Иначе
			ПоляОтбора = Новый Массив;
		КонецЕсли;
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ПоляОтбораСотрудников.Период);
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ПоляОтбораСотрудников.Сотрудник);
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.Отборы = ПоляОтбора;
		ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
		
		ЗапросВТПлановыеНачисленияСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"ПлановыеНачисления", 
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина,
			ИмяВТПлановыеНачисленияСрезПоследних);
			
		Если ПоляОтбора <> Неопределено Тогда
			
			ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
			ПараметрыПостроения.Отборы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПоляОтбора);
			ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
		
			Для каждого ОписаниеОтбора Из ПараметрыПостроения.Отборы Цикл
				
				Если ВРег(ОписаниеОтбора.ЛевоеЗначение) = ВРег("Регистратор") Тогда
					ОписаниеОтбора.ЛевоеЗначение = "Основание";
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли; 
			
		ЗапросВТПлановыйФОТСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"ПлановыйФОТ", 
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина,
			ИмяВТПлановыйФОТСрезПоследних);
				
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТПлановыеНачисленияСрезПоследних);
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТПлановыйФОТСрезПоследних);
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПлановыеНачисленияСрезПоследних.Период КАК Период,
			|	ПлановыеНачисленияСрезПоследних.ПериодЗаписи КАК ПериодЗаписи,
			|	ПлановыеНачисленияСрезПоследних.Регистратор КАК Регистратор,
			|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
			|	ПлановыеНачисленияСрезПоследних.Начисление КАК Начисление,
			|	ПлановыеНачисленияСрезПоследних.ДокументОснование КАК ДокументОснование,
			|	ВЫБОР
			|		КОГДА ПлановыйФОТСрезПоследних.ВкладВФОТ ЕСТЬ NULL 
			|			ТОГДА ПлановыеНачисленияСрезПоследних.Размер
			|		ИНАЧЕ ПлановыйФОТСрезПоследних.ВкладВФОТ
			|	КОНЕЦ КАК Размер,
			|	Начисления.РеквизитДопУпорядочивания КАК Порядок,
			|	ЕСТЬNULL(НачисленияПоказатели.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК ОсновнойПоказатель,
			|	Начисления.ВидВремени
			|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудниковПредварительно
			|{ВЫБРАТЬ
			|	Период,
			|	Сотрудник,
			|	Начисление,
			|	ДокументОснование,
			|	Размер}
			|ИЗ
			|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТСрезПоследних
			|		ПО ПлановыеНачисленияСрезПоследних.Сотрудник = ПлановыйФОТСрезПоследних.Сотрудник
			|			И ПлановыеНачисленияСрезПоследних.Начисление = ПлановыйФОТСрезПоследних.Начисление
			|			И ПлановыеНачисленияСрезПоследних.ДокументОснование = ПлановыйФОТСрезПоследних.ДокументОснование
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
			|			ПО Начисления.Ссылка = НачисленияПоказатели.Ссылка
			|				И (НачисленияПоказатели.ОсновнойПоказатель)
			|		ПО ПлановыеНачисленияСрезПоследних.Начисление = Начисления.Ссылка
			|ГДЕ
			|	ПлановыеНачисленияСрезПоследних.Используется
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	Порядок,
			|	Начисление
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПлановыеНачисленияСотрудников.Период КАК Период,
			|	ПлановыеНачисленияСотрудников.Сотрудник КАК Сотрудник,
			|	МИНИМУМ(ПлановыеНачисленияСотрудников.Порядок) КАК Порядок
			|ПОМЕСТИТЬ ВТПорядокОсновныхНачислений
			|ИЗ
			|	ВТПлановыеНачисленияСотрудниковПредварительно КАК ПлановыеНачисленияСотрудников
			|ГДЕ
			|	ПлановыеНачисленияСотрудников.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
			|
			|СГРУППИРОВАТЬ ПО
			|	ПлановыеНачисленияСотрудников.Период,
			|	ПлановыеНачисленияСотрудников.Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	Порядок
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПлановыеНачисленияСотрудников.Период КАК Период,
			|	ПлановыеНачисленияСотрудников.Сотрудник КАК Сотрудник,
			|	МИНИМУМ(ПлановыеНачисленияСотрудников.Начисление) КАК Начисление,
			|	ПорядокОсновногоНачисления.Порядок КАК Порядок
			|ПОМЕСТИТЬ ВТОсновныеНачисленияСотрудников
			|ИЗ
			|	ВТПлановыеНачисленияСотрудниковПредварительно КАК ПлановыеНачисленияСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядокОсновныхНачислений КАК ПорядокОсновногоНачисления
			|		ПО ПлановыеНачисленияСотрудников.Период = ПорядокОсновногоНачисления.Период
			|			И ПлановыеНачисленияСотрудников.Сотрудник = ПорядокОсновногоНачисления.Сотрудник
			|			И ПлановыеНачисленияСотрудников.Порядок = ПорядокОсновногоНачисления.Порядок
			|ГДЕ
			|	ПлановыеНачисленияСотрудников.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
			|
			|СГРУППИРОВАТЬ ПО
			|	ПлановыеНачисленияСотрудников.Период,
			|	ПлановыеНачисленияСотрудников.Сотрудник,
			|	ПорядокОсновногоНачисления.Порядок
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	Порядок,
			|	Начисление
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПлановыеНачисленияСотрудников.Период,
			|	ПлановыеНачисленияСотрудников.ПериодЗаписи,
			|	ПлановыеНачисленияСотрудников.Регистратор,
			|	ПлановыеНачисленияСотрудников.Сотрудник,
			|	ПлановыеНачисленияСотрудников.Начисление,
			|	ПлановыеНачисленияСотрудников.ДокументОснование,
			|	ПлановыеНачисленияСотрудников.Размер,
			|	ПлановыеНачисленияСотрудников.ОсновнойПоказатель,
			|	ВЫБОР
			|		КОГДА ОсновныеНачисленияСотрудников.Начисление ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК НачислениеТарифнойСтавки
			|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудниковОкончательно
			|ИЗ
			|	ВТПлановыеНачисленияСотрудниковПредварительно КАК ПлановыеНачисленияСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисленияСотрудников КАК ОсновныеНачисленияСотрудников
			|		ПО ПлановыеНачисленияСотрудников.Период = ОсновныеНачисленияСотрудников.Период
			|			И ПлановыеНачисленияСотрудников.Сотрудник = ОсновныеНачисленияСотрудников.Сотрудник
			|			И ПлановыеНачисленияСотрудников.Начисление = ОсновныеНачисленияСотрудников.Начисление
			|			И ПлановыеНачисленияСотрудников.Порядок = ОсновныеНачисленияСотрудников.Порядок";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыеНачисленияСрезПоследних", ИмяВТПлановыеНачисленияСрезПоследних);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыйФОТСрезПоследних", ИмяВТПлановыйФОТСрезПоследних);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыеНачисленияСотрудниковПредварительно", ИмяВТПлановыеНачисленияСотрудниковПредварительно);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПорядокОсновныхНачислений", ИмяВТПорядокОсновныхНачислений);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОсновныеНачисленияСотрудников", ИмяВТОсновныеНачисленияСотрудников);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыеНачисленияСотрудниковОкончательно", ИмяВТПлановыеНачисленияСотрудников);
		
		ТекстЗапроса = 
			ЗапросВТПлановыеНачисленияСрезПоследних.Текст
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ ЗапросВТПлановыйФОТСрезПоследних.Текст
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
			
КонецФункции

// Заполняет кадровые движения документа
//		КадроваяИсторияСотрудников
//		ЗанятыеПозицииШтатногоРасписания.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить кадровые движения.
//	КадровыеДвижения - таблица значений с полями:
//		ДатаСобытия
//		ВидСобытия - Перечисление.ВидыКадровыхСобытий
//		ДействуетДо (не обязательно).
//		Сотрудник
//		Позиция (не обязательно)
//		Подразделение (не обязательно).
//		Должность (не обязательно)
// 		КоличествоСтавок (не обязательно).
// 		
Процедура СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения) Экспорт
	
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(РегистраторОбъект)) Тогда
		Если РегистраторОбъект.ДополнительныеСвойства.Свойство("ТолькоБронированиеПозиции")
			И РегистраторОбъект.ДополнительныеСвойства.ТолькоБронированиеПозиции Тогда
			
			ТолькоБронированиеПозиции = Истина;
			
		Иначе
			ТолькоБронированиеПозиции = Ложь;
		КонецЕсли; 
	Иначе
		ТолькоБронированиеПозиции = Ложь;
	КонецЕсли;		
	
	Если Не ТолькоБронированиеПозиции Тогда
		КадровыйУчетБазовый.СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения, Ложь);
	КонецЕсли; 
	
	Регистратор = РегистраторОбъект.Ссылка;
	
	ДействуетДоЕсть = (КадровыеДвижения.Колонки.Найти("ДействуетДо") <> НеОпределено);
	ПозицияЕсть = (КадровыеДвижения.Колонки.Найти("Позиция") <> НеОпределено) И ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	ПодразделениеЕсть = (КадровыеДвижения.Колонки.Найти("Подразделение") <> НеОпределено);
	ДолжностьЕсть = (КадровыеДвижения.Колонки.Найти("Должность") <> НеОпределено);
	КоличествоСтавокЕсть = (КадровыеДвижения.Колонки.Найти("КоличествоСтавок") <> НеОпределено);
	ВидЗанятостиЕсть = (КадровыеДвижения.Колонки.Найти("ВидЗанятости") <> НеОпределено);
	ВидДоговораЕсть = (КадровыеДвижения.Колонки.Найти("ВидДоговора") <> НеОпределено);
	ДатаСозданияРабочегоМестаЕсть = (КадровыеДвижения.Колонки.Найти("ДатаСозданияРабочегоМеста") <> НеОпределено);
	ИзменениеДолжностиЕсть = (КадровыеДвижения.Колонки.Найти("ИзменениеДолжности") <> НеОпределено);
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.КадроваяИсторияСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	// Дополним полем Организация, получим текущие данные для записей перемещения и увольнения.
	ДополнитьТекущимиКадровымиДанными(КадровыеДвижения, ПозицияЕсть, Регистратор, ВремяРегистрацииДокумента);
	
	// Получим подразделения по позиции, если требуется.
	Если ПозицияЕсть Тогда
		ПозицииСоответствие = Новый Соответствие;
		ПозицииМассив = Новый Массив;
		
		Для Каждого СтрокаДанных Из КадровыеДвижения Цикл
			ПозицииСоответствие[СтрокаДанных.Позиция] = 0;
		КонецЦикла;
		Для Каждого ЭлементСоответствия Из ПозицииСоответствие Цикл
			ПозицииМассив.Добавить(ЭлементСоответствия.Ключ);
		КонецЦикла;
		ПодразделенияДолжностиПозиций = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПозицииМассив, "Подразделение,Должность");
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из КадровыеДвижения Цикл
		
		Если КоличествоСтавокЕсть И СтрокаДанных.КоличествоСтавок = 0 И СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
			СтрокаДанных.КоличествоСтавок = СтрокаДанных.ТекущееКоличествоСтавок;
		КонецЕсли;
		
		Если Не ТолькоБронированиеПозиции Тогда
			
			// Движение по КадроваяИсторияСотрудников.
			НоваяСтрока = Движения.КадроваяИсторияСотрудников.Добавить();
			НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
			НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
			НоваяСтрока.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
			НоваяСтрока.ГоловнаяОрганизация = СтрокаДанных.ГоловнаяОрганизация;
			НоваяСтрока.Организация = СтрокаДанных.Организация;
			Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
				НоваяСтрока.Подразделение = СтрокаДанных.ТекущееПодразделение;
				НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.ТекущаяПозиция;
				НоваяСтрока.Должность = СтрокаДанных.ТекущаяДолжность;
				НоваяСтрока.КоличествоСтавок = СтрокаДанных.ТекущееКоличествоСтавок;
				НоваяСтрока.ВидЗанятости = СтрокаДанных.ТекущийВидЗанятости;
				НоваяСтрока.ВидДоговора = СтрокаДанных.ТекущийВидДоговора;
			Иначе
				Если ПодразделениеЕсть И (Не ПозицияЕсть Или Не ЗначениеЗаполнено(СтрокаДанных.Позиция)) Тогда
					НоваяСтрока.Подразделение = СтрокаДанных.Подразделение;
				КонецЕсли;
				Если ДолжностьЕсть И (Не ПозицияЕсть Или Не ЗначениеЗаполнено(СтрокаДанных.Позиция)) Тогда
					НоваяСтрока.Должность = СтрокаДанных.Должность;
				КонецЕсли;
				Если ПозицияЕсть Тогда
					НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.Позиция;
					// Если есть позиция, то подразделение и должность берем из нее.
					Если ЗначениеЗаполнено(СтрокаДанных.Позиция) Тогда
						НоваяСтрока.Подразделение = ПодразделенияДолжностиПозиций[СтрокаДанных.Позиция].Подразделение;
						НоваяСтрока.Должность = ПодразделенияДолжностиПозиций[СтрокаДанных.Позиция].Должность;
					КонецЕсли; 
				КонецЕсли;
				Если КоличествоСтавокЕсть Тогда
					НоваяСтрока.КоличествоСтавок = СтрокаДанных.КоличествоСтавок;
				КонецЕсли;
				Если ВидЗанятостиЕсть Тогда
					НоваяСтрока.ВидЗанятости = СтрокаДанных.ВидЗанятости;
				Иначе
					НоваяСтрока.ВидЗанятости = СтрокаДанных.ТекущийВидЗанятости;
				КонецЕсли; 
				Если ВидДоговораЕсть Тогда
					НоваяСтрока.ВидДоговора = СтрокаДанных.ВидДоговора;
				Иначе
					НоваяСтрока.ВидДоговора = СтрокаДанных.ТекущийВидДоговора;
				КонецЕсли;
				НоваяСтрока.ПринятНаНовоеРабочееМесто = СтрокаДанных.ПринятНаНовоеРабочееМесто;
				Если ДатаСозданияРабочегоМестаЕсть Тогда
					НоваяСтрока.ДатаСозданияРабочегоМеста = СтрокаДанных.ДатаСозданияРабочегоМеста;
				КонецЕсли;
				Если ИзменениеДолжностиЕсть Тогда
					НоваяСтрока.ИзменениеДолжности = СтрокаДанных.ИзменениеДолжности;
					НоваяСтрока.ПредыдущаяДолжность = СтрокаДанных.ПредыдущаяДолжность;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.ВидСобытия = СтрокаДанных.ВидСобытия;
			
			// Если есть дата "обратного" события - вводим его данные.
			Если ДействуетДоЕсть Тогда
				Если ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
					НоваяСтрока.ДействуетДо = СтрокаДанных.ДействуетДо;
					Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
						НоваяСтрока.ОрганизацияПоОкончании = СтрокаДанных.Организация;
						Если ПодразделениеЕсть Тогда
							НоваяСтрока.ПодразделениеПоОкончании = СтрокаДанных.Подразделение;
						КонецЕсли;
						Если ПозицияЕсть Тогда
							НоваяСтрока.ДолжностьПоШтатномуРасписаниюПоОкончании = СтрокаДанных.Позиция;
						КонецЕсли;
						Если ДолжностьЕсть Тогда
							НоваяСтрока.ДолжностьПоОкончании = СтрокаДанных.Должность;
						КонецЕсли;
						Если КоличествоСтавокЕсть Тогда
							НоваяСтрока.КоличествоСтавокПоОкончании = СтрокаДанных.КоличествоСтавок;
						КонецЕсли;
						Если ВидЗанятостиЕсть Тогда
							НоваяСтрока.ВидЗанятостиПоОкончании = СтрокаДанных.ВидЗанятости;
						Иначе
							НоваяСтрока.ВидЗанятостиПоОкончании = СтрокаДанных.ТекущийВидЗанятости;
						КонецЕсли; 
						Если ВидДоговораЕсть Тогда
							НоваяСтрока.ВидДоговора = СтрокаДанных.ВидДоговора;
						Иначе
							НоваяСтрока.ВидДоговора = СтрокаДанных.ТекущийВидДоговора;
						КонецЕсли;
					Иначе
						НоваяСтрока.ОрганизацияПоОкончании = СтрокаДанных.ТекущаяОрганизация;
						НоваяСтрока.ПодразделениеПоОкончании = СтрокаДанных.ТекущееПодразделение;
						НоваяСтрока.ДолжностьПоШтатномуРасписаниюПоОкончании = СтрокаДанных.ТекущаяПозиция;
						НоваяСтрока.ДолжностьПоОкончании = СтрокаДанных.ТекущаяДолжность;
						НоваяСтрока.КоличествоСтавокПоОкончании = СтрокаДанных.ТекущееКоличествоСтавок;
						НоваяСтрока.ВидЗанятостиПоОкончании = СтрокаДанных.ТекущийВидЗанятости;
						НоваяСтрока.ВидДоговораПоОкончании = СтрокаДанных.ТекущийВидДоговора;
					КонецЕсли;
					Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
						НоваяСтрока.ВидСобытияПоОкончании = Перечисления.ВидыКадровыхСобытий.Увольнение;
					ИначеЕсли СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
						НоваяСтрока.ВидСобытияПоОкончании = Перечисления.ВидыКадровыхСобытий.Перемещение;
					ИначеЕсли СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
						НоваяСтрока.ВидСобытияПоОкончании = Перечисления.ВидыКадровыхСобытий.Прием;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 

		// Если передана позиция - проводим по регистру ЗанятыеПозицииШтатногоРасписания.
		Если ПозицияЕсть И КоличествоСтавокЕсть Тогда
			ДополнитьДвиженияЗанятыхПозицийПоСтрокеКадровыхДвижений(Движения, СтрокаДанных, ДействуетДоЕсть, ТолькоБронированиеПозиции);
		КонецЕсли;
		
	КонецЦикла;
	
	// При бронировании позиции предоставляем платформе самой решать в каком порядке записывать движения кадровой истории.
	Если Движения.КадроваяИсторияСотрудников.Записывать 
		И Не ТолькоБронированиеПозиции Тогда
		
		Движения.КадроваяИсторияСотрудников.Записать();
		Движения.КадроваяИсторияСотрудников.Записывать = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет кадровые движения документа
//		ЗанятыеПозицииШтатногоРасписания.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить кадровые движения.
//	ПериодыОсвобожденияСтавки - таблица значений с полями:
//		Сотрудник
//		ДатаЗанятияСтавки - дата освобождения ставки.
//		ДатаОсвобождения - Дата условного движения, которое необходимо нейтрализовать
//
Процедура ЗанятьСтавку(Движения, ЗанятыеСтавки) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьДатаОсвобождения = ЗанятыеСтавки.Колонки.Найти("ДатаОсвобождения") <> Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЗанятыеСтавки", ЗанятыеСтавки);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗанятыеСтавки.Сотрудник КАК Сотрудник,
		|	ЗанятыеСтавки.ДатаЗанятияСтавки КАК Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ЗанятыеСтавки КАК ЗанятыеСтавки";
	
	Запрос.Выполнить();
	
	ПоляОтбора = Новый Структура("КадроваяИсторияСотрудников");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПоляОтбора.КадроваяИсторияСотрудников, "Регистратор", "<>", Движения.ЗанятыеПозицииШтатногоРасписания.Отбор.Регистратор.Значение);
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДолжностьПоШтатномуРасписанию, КоличествоСтавок", ПоляОтбора);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Период КАК ДатаЗанятияСтавки,
		|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	КадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	ВыборкаКадровыхДанных = Запрос.Выполнить().Выбрать();
	
	СтрокаКадровыхДвижений = Новый Структура;
	СтрокаКадровыхДвижений.Вставить("ВидСобытия", Перечисления.ВидыКадровыхСобытий.Прием);
	
	Для каждого ЗанятаяСтавка Из ЗанятыеСтавки Цикл
		
		ВыборкаКадровыхДанных.Сбросить();
		
		ВыборкаКадровыхДанных.НайтиСледующий(Новый Структура("Сотрудник, ДатаЗанятияСтавки", ЗанятаяСтавка.Сотрудник, ЗанятаяСтавка.ДатаЗанятияСтавки));
		
		СтрокаКадровыхДвижений.Вставить("ТекущаяПозиция", ВыборкаКадровыхДанных.Позиция);
		СтрокаКадровыхДвижений.Вставить("Позиция", ВыборкаКадровыхДанных.Позиция);
		СтрокаКадровыхДвижений.Вставить("ДатаСобытия", ЗанятаяСтавка.ДатаЗанятияСтавки);
		СтрокаКадровыхДвижений.Вставить("Сотрудник", ЗанятаяСтавка.Сотрудник);
		СтрокаКадровыхДвижений.Вставить("ТекущееКоличествоСтавок", ВыборкаКадровыхДанных.КоличествоСтавок);
		СтрокаКадровыхДвижений.Вставить("КоличествоСтавок", ВыборкаКадровыхДанных.КоличествоСтавок);
		
		Если ЕстьДатаОсвобождения Тогда
			СтрокаКадровыхДвижений.Вставить("ДействуетДо", ЗанятаяСтавка.ДатаОсвобождения); 
		КонецЕсли; 
		
		ДополнитьДвиженияЗанятыхПозицийПоСтрокеКадровыхДвижений(Движения, СтрокаКадровыхДвижений, ЕстьДатаОсвобождения);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет кадровые движения документа
//		ЗанятыеПозицииШтатногоРасписания.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить кадровые движения.
//	ПериодыОсвобожденияСтавки - таблица значений с полями:
//		Сотрудник
//		ДатаОсвобождения - дата освобождения ставки.
//		ДатаВозврата     - дата с которой ставка опять занята.
//		
Процедура ОсвободитьСтавкуВременно(Движения, ПериодыОсвобожденияСтавки) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодыОсвобожденияСтавки", ПериодыОсвобожденияСтавки);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыОсвобожденияСтавки.Сотрудник КАК Сотрудник,
		|	ПериодыОсвобожденияСтавки.ДатаОсвобождения КАК Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ПериодыОсвобожденияСтавки КАК ПериодыОсвобожденияСтавки";
	
	Запрос.Выполнить();
	
	ПоляОтбора = Новый Структура("КадроваяИсторияСотрудников");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПоляОтбора.КадроваяИсторияСотрудников, "Регистратор", "<>", Движения.ЗанятыеПозицииШтатногоРасписания.Отбор.Регистратор.Значение);
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДолжностьПоШтатномуРасписанию, КоличествоСтавок", ПоляОтбора);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Период КАК ДатаОсвобождения,
		|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	КадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	ВыборкаКадровыхДанных = Запрос.Выполнить().Выбрать();
	
	СтрокаКадровыхДвижений = Новый Структура;
	СтрокаКадровыхДвижений.Вставить("ВидСобытия", Перечисления.ВидыКадровыхСобытий.Увольнение);
	СтрокаКадровыхДвижений.Вставить("ДействуетДо", '00010101');
	
	ЕстьКолонкаСторно = ПериодыОсвобожденияСтавки.Колонки.Найти("Сторно") <> Неопределено;
	ЕстьКолонкаДатаВозврата = ПериодыОсвобожденияСтавки.Колонки.Найти("ДатаВозврата") <> Неопределено;
	
	Для каждого ПериодОсвобожденияСтавки Из ПериодыОсвобожденияСтавки Цикл
		
		ВыборкаКадровыхДанных.Сбросить();
		ВыборкаКадровыхДанных.НайтиСледующий(Новый Структура("Сотрудник, ДатаОсвобождения", ПериодОсвобожденияСтавки.Сотрудник, ПериодОсвобожденияСтавки.ДатаОсвобождения));
		
		Если ЕстьКолонкаСторно Тогда
			
			Если ПериодОсвобожденияСтавки.Сторно Тогда
				СтрокаКадровыхДвижений.Вставить("ВидСобытия", Перечисления.ВидыКадровыхСобытий.Прием);
			Иначе 
				СтрокаКадровыхДвижений.Вставить("ВидСобытия", Перечисления.ВидыКадровыхСобытий.Увольнение);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаКадровыхДвижений.Вставить("ТекущаяПозиция", ВыборкаКадровыхДанных.Позиция);
		СтрокаКадровыхДвижений.Вставить("Позиция", ВыборкаКадровыхДанных.Позиция);
		СтрокаКадровыхДвижений.Вставить("ДатаСобытия", ПериодОсвобожденияСтавки.ДатаОсвобождения);
		СтрокаКадровыхДвижений.Вставить("Сотрудник", ПериодОсвобожденияСтавки.Сотрудник);
		СтрокаКадровыхДвижений.Вставить("ТекущееКоличествоСтавок", ВыборкаКадровыхДанных.КоличествоСтавок);
		СтрокаКадровыхДвижений.Вставить("КоличествоСтавок", ВыборкаКадровыхДанных.КоличествоСтавок);
		
		Если ЕстьКолонкаДатаВозврата Тогда
			СтрокаКадровыхДвижений.Вставить("ДействуетДо", ПериодОсвобожденияСтавки.ДатаВозврата); 
		КонецЕсли;
		
		ДополнитьДвиженияЗанятыхПозицийПоСтрокеКадровыхДвижений(Движения, СтрокаКадровыхДвижений, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОсвободитьСтавкиПриКадровыхПереводовСВременноОсвобожденныхСтавок(Движения, ПериодыОсвобожденияСтавки) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеЗанятыхСтавок Из ПериодыОсвобожденияСтавки Цикл
		
		СтрокаКадровыхДвижений = Новый Структура;
		СтрокаКадровыхДвижений.Вставить("ВидСобытия", Перечисления.ВидыКадровыхСобытий.Увольнение);
		СтрокаКадровыхДвижений.Вставить("ДействуетДо", ДанныеЗанятыхСтавок.ДатаОсвобождения);
		СтрокаКадровыхДвижений.Вставить("ТекущаяПозиция", ДанныеЗанятыхСтавок.ДолжностьПоШтатномуРасписанию);
		СтрокаКадровыхДвижений.Вставить("Позиция", ДанныеЗанятыхСтавок.ДолжностьПоШтатномуРасписанию);
		СтрокаКадровыхДвижений.Вставить("ДатаСобытия", ДанныеЗанятыхСтавок.ДатаЗанятияСтавки);
		СтрокаКадровыхДвижений.Вставить("Сотрудник", ДанныеЗанятыхСтавок.Сотрудник);
		СтрокаКадровыхДвижений.Вставить("ТекущееКоличествоСтавок", ДанныеЗанятыхСтавок.КоличествоСтавок);
		СтрокаКадровыхДвижений.Вставить("КоличествоСтавок", ДанныеЗанятыхСтавок.КоличествоСтавок);
		
		ДополнитьДвиженияЗанятыхПозицийПоСтрокеКадровыхДвижений(Движения, СтрокаКадровыхДвижений, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает таблицу для проведения документа по регистру
//		ЗанятыеПозицииШтатногоРасписания.
//
// Параметры:
//	Сотрудник 			- массив сотрудников.
//	ДатаОсвобождения 	- дата освобождения ставки.
//	ДатаВозврата     	- дата с которой ставка опять занята.
// 		
Процедура ЗаполнитьПериодыОсвобожденияСтавки(ДанныеДляПроведения, Сотрудники, ДатаОсвобождения, ДатаВозврата, Сторно = Ложь) Экспорт 
	
	Если ДанныеДляПроведения.Свойство("ПериодыОсвобожденияСтавки") Тогда
		ПериодыОсвобожденияСтавки = ДанныеДляПроведения.ПериодыОсвобожденияСтавки;
	Иначе	
		ПериодыОсвобожденияСтавки = Новый ТаблицаЗначений;
		ПериодыОсвобожденияСтавки.Колонки.Добавить("Сотрудник", 		Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ПериодыОсвобожденияСтавки.Колонки.Добавить("ДатаОсвобождения", 	Новый ОписаниеТипов("Дата"));
		ПериодыОсвобожденияСтавки.Колонки.Добавить("ДатаВозврата", 		Новый ОписаниеТипов("Дата"));
		ПериодыОсвобожденияСтавки.Колонки.Добавить("Сторно", 			Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Для каждого Сотрудник Из Сотрудники Цикл
			ПериодОсвобождения = ПериодыОсвобожденияСтавки.Добавить();
			ПериодОсвобождения.Сотрудник 		= Сотрудник;
			ПериодОсвобождения.ДатаОсвобождения = ДатаОсвобождения;
			ПериодОсвобождения.ДатаВозврата 	= ДатаВозврата;
			ПериодОсвобождения.Сторно 			= Сторно;
		КонецЦикла; 
	КонецЕсли;  
	
	ДанныеДляПроведения.Вставить("ПериодыОсвобожденияСтавки", ПериодыОсвобожденияСтавки);
	
КонецПроцедуры

Процедура ДополнитьДвиженияЗанятыхПозицийПоСтрокеКадровыхДвижений(Движения, СтрокаКадровыхДвижений, ДействуетДоЕсть, ТолькоБронированиеПозиции = Ложь) Экспорт

	Если ЗначениеЗаполнено(СтрокаКадровыхДвижений.Позиция)
		Или ЗначениеЗаполнено(СтрокаКадровыхДвижений.ТекущаяПозиция) Тогда
		
		Движения.ЗанятыеПозицииШтатногоРасписания.Записывать = Истина;
		
		Если ЗначениеЗаполнено(СтрокаКадровыхДвижений.Позиция)
			Или СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение И ЗначениеЗаполнено(СтрокаКадровыхДвижений.ТекущаяПозиция) Тогда
			
			// основная запись
			НоваяСтрока = Движения.ЗанятыеПозицииШтатногоРасписания.Добавить();
			
			Если СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
				Или	СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение 
				Или	СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные Тогда
				
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
				НоваяСтрока.Период = СтрокаКадровыхДвижений.ДатаСобытия;
				
			ИначеЕсли СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
				
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
				НоваяСтрока.Период = СтрокаКадровыхДвижений.ДатаСобытия;
				
			КонецЕсли;
			
			НоваяСтрока.Сотрудник = СтрокаКадровыхДвижений.Сотрудник;
			НоваяСтрока.БронированиеПозиции = ТолькоБронированиеПозиции;
			
			Если СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
				НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.ТекущаяПозиция;
				НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.ТекущееКоличествоСтавок;
			Иначе
				НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.Позиция;
				НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.КоличествоСтавок;
			КонецЕсли;
			
			// Если есть дата обратного события - вводим "условное" движение.
			Если ДействуетДоЕсть Тогда
				
				Если ЗначениеЗаполнено(СтрокаКадровыхДвижений.ДействуетДо) Тогда
					
					НоваяСтрока = Движения.ЗанятыеПозицииШтатногоРасписания.Добавить();
					
					НоваяСтрока.Период = СтрокаКадровыхДвижений.ДействуетДо;
					
					Если СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
						Или	СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
						НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
					Иначе
						НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
					КонецЕсли;
					
					НоваяСтрока.Сотрудник = СтрокаКадровыхДвижений.Сотрудник;
					НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.Позиция;
					НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.КоличествоСтавок;
					НоваяСтрока.УсловноеДвижение = Истина;
					НоваяСтрока.УсловноеКоличествоСтавок = СтрокаКадровыхДвижений.КоличествоСтавок;
					НоваяСтрока.ДатаОтменыУсловногоДвижения = СтрокаКадровыхДвижений.ДатаСобытия;
					НоваяСтрока.БронированиеПозиции = ТолькоБронированиеПозиции;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		// Если это - перемещение - "спишем" ставку с текущей позиции.
		Если ЗначениеЗаполнено(СтрокаКадровыхДвижений.ТекущаяПозиция)
			И СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение
			И Не ТолькоБронированиеПозиции Тогда
			
			НоваяСтрока = Движения.ЗанятыеПозицииШтатногоРасписания.Добавить();
			
			НоваяСтрока.Период = СтрокаКадровыхДвижений.ДатаСобытия;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Сотрудник = СтрокаКадровыхДвижений.Сотрудник;
			НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.ТекущаяПозиция;
			НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.ТекущееКоличествоСтавок;
			НоваяСтрока.БронированиеПозиции = ТолькоБронированиеПозиции;
			
			// Если есть дата обратного события - вводим "условное" 
			// движение с возвратом ставки на прежнюю позицию.
			Если ДействуетДоЕсть Тогда
				
				Если ЗначениеЗаполнено(СтрокаКадровыхДвижений.ДействуетДо) Тогда
					
					НоваяСтрока = Движения.ЗанятыеПозицииШтатногоРасписания.Добавить();
					
					НоваяСтрока.Период = СтрокаКадровыхДвижений.ДействуетДо;
					НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
					НоваяСтрока.Сотрудник = СтрокаКадровыхДвижений.Сотрудник;
					НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.ТекущаяПозиция;
					НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.ТекущееКоличествоСтавок;
					НоваяСтрока.УсловноеДвижение = Истина;
					НоваяСтрока.УсловноеКоличествоСтавок = СтрокаКадровыхДвижений.ТекущееКоличествоСтавок;
					НоваяСтрока.ДатаОтменыУсловногоДвижения = СтрокаКадровыхДвижений.ДатаСобытия;
					НоваяСтрока.БронированиеПозиции = ТолькоБронированиеПозиции;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет историю изменения графиков работы.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения по графикам работы.
//	ДвиженияГрафиков - таблица значений с полями:
//		ДатаСобытия
//		ВидСобытия - Перечисление.ВидыКадровыхСобытий
//		Сотрудник
//		ГрафикРаботы
//		ДействуетДо (не обязательно).
// 		
Процедура СформироватьИсториюИзмененияГрафиков(Движения, ДвиженияГрафиков) Экспорт
	Регистратор = Движения.ГрафикРаботыСотрудников.Отбор.Регистратор.Значение;
	
	ДействуетДоЕсть = (ДвиженияГрафиков.Колонки.Найти("ДействуетДо") <> НеОпределено);
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ГрафикРаботыСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	// Дополним полем Организация, получим текущие данные для записей перемещения и увольнения.
	ДополнитьТекущимиДаннымиГрафиков(ДвиженияГрафиков, Регистратор, ВремяРегистрацииДокумента);
	
	Для Каждого СтрокаДанных Из ДвиженияГрафиков Цикл
		Движения.ГрафикРаботыСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ГрафикРаботыСотрудников.Добавить();
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		НоваяСтрока.ГоловнаяОрганизация = СтрокаДанных.ГоловнаяОрганизация;
		Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			НоваяСтрока.ГрафикРаботы = СтрокаДанных.ТекущийГрафик;
		Иначе
			НоваяСтрока.ГрафикРаботы = СтрокаДанных.ГрафикРаботы;
		КонецЕсли;
		
		// Если есть дата "обратного" события - вводим его данные.
		Если ДействуетДоЕсть Тогда
			Если ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = СтрокаДанных.ДействуетДо;
				Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
					НоваяСтрока.ГрафикРаботыПоОкончании = СтрокаДанных.ГрафикРаботы;
				Иначе
					НоваяСтрока.ГрафикРаботыПоОкончании = СтрокаДанных.ТекущийГрафик;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Движения.ГрафикРаботыСотрудников.Записывать Тогда 
		Движения.ГрафикРаботыСотрудников.Записать();
	    Движения.ГрафикРаботыСотрудников.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает процент северной надбавки физического лица или сотрудника.
//
// Параметры:
//		Объект - СправочникСсылка.Сотрудники, СправочникСсылка.ФизическиеЛица
//		ДатаПолученияДанных
//
// ВозвращаемоеЗначение: Число
//
Функция ПроцентСевернойНадбавки(Объект, ДатаПолученияДанных) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

Функция МассивСотрудников(ФизическоеЛицо, Организация, Период, ВключаяРанееУволенных = Ложь, РаботникиПоДоговорамГПХ = Неопределено) Экспорт
	
	МассивФизическихЛиц = Новый Массив();
	МассивФизическихЛиц.Добавить(ФизическоеЛицо);
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц	= МассивФизическихЛиц;
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
	Если Не ВключаяРанееУволенных Тогда
		ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 		= Период;
	КонецЕсли; 
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода 		= Период;
	
	Если РаботникиПоДоговорамГПХ <> Неопределено
		И (ПривилегированныйРежим() Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера)) Тогда
		ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ = РаботникиПоДоговорамГПХ;
	КонецЕсли; 
	
	ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Возврат ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

// Возвращает таблицу значений, содержащую описание рабочих мест физического лица ы организации.
//
// Параметры:
//		ФизическоеЛицо
//		Организация
//		Период
//		ВключаяРанееУволенных 	- Булево, если истина, то в таблицу войдут рабочие места по уволенным сотрудникам.
//		РаботникиПоДоговорамГПХ - Булево
//
// Возвращаемое значение:
//		Таблица значений, сформированная методом ОписаниеРабочихМестСотрудников.
//
Функция РабочиеМестаФизическогоЛица(ФизическоеЛицо, Организация, Период, ВключаяРанееУволенных = Ложь, РаботникиПоДоговорамГПХ = Неопределено) Экспорт
	
	МассивРабочихМест  = КадровыйУчетРасширенный.МассивСотрудников(ФизическоеЛицо, Организация, Период, ВключаяРанееУволенных, РаботникиПоДоговорамГПХ);
	Возврат ОписаниеРабочихМестСотрудников(МассивРабочихМест, Период, ВключаяРанееУволенных, РаботникиПоДоговорамГПХ);	
	
КонецФункции

// Возвращает таблицу значений, содержащую описание рабочих мест сотрудников.
//
// Параметры:
//			Сотрудники - Массив ссылок на элементы справочника Сотрудники.
//			Период
//			ВключаяРанееУволенных - Булево, если истина, то в таблицу войдут рабочие места по уволенным сотрудникам.
//
// Возвращаемое значение:
//		Таблица значений, содержащая колонки.
//			Сотрудник
//			ФизическоеЛицо
//			Подразделение
//			Должность						- если не используется штатное расписание.
//			ДолжностьПоШтатномуРасписанию	- если используется штатное расписание.
//			ДатаПриема						- если значение параметра ВключаяРанееУволенных равно Истина.
//			ДатаУвольнения					- если значение параметра ВключаяРанееУволенных равно Истина.
//			ПредставлениеРабочегоМеста		- Строка, сформированная методом ПредставлениеРабочегоМеста.
//
Функция ОписаниеРабочихМестСотрудников(Сотрудники, Период, ВключаяРанееУволенных = Ложь, РаботникиПоДоговорамГПХ = Неопределено) Экспорт
	
	ИспользоватьШтатноеРасписание =  ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	КадровыеДанные = "Подразделение,Должность";
	
	Если ВключаяРанееУволенных Тогда
		КадровыеДанные = КадровыеДанные + ",ДатаПриема,ДатаУвольнения";
	КонецЕсли;
	
	Если ИспользоватьШтатноеРасписание Тогда
		КадровыеДанные = КадровыеДанные +",ДолжностьПоШтатномуРасписанию";
	КонецЕсли;
	
	ТаблицаОписанийРабочихМест = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудники, КадровыеДанные, Период);
	
	Если ВключаяРанееУволенных Тогда
		ТаблицаОписанийРабочихМест.Сортировать("ДатаУвольнения,ДатаПриема УБЫВ");
	КонецЕсли;
	
	ТаблицаОписанийРабочихМест.Колонки.Добавить("ПредставлениеРабочегоМеста", Новый ОписаниеТипов("Строка"));
	
	СписокДоговорниковГПХ = Новый Массив;
	СтрокиДоговорниковГПХ = Новый Соответствие;
	Для каждого СтрокаТаблицыОписанийРабочихМест Из ТаблицаОписанийРабочихМест Цикл
		
		Если РаботникиПоДоговорамГПХ = Истина
			И Не ЗначениеЗаполнено(СтрокаТаблицыОписанийРабочихМест.Должность) Тогда
			СписокДоговорниковГПХ.Добавить(СтрокаТаблицыОписанийРабочихМест.Сотрудник);
			СтрокиДоговорниковГПХ.Вставить(СтрокаТаблицыОписанийРабочихМест.Сотрудник, СтрокаТаблицыОписанийРабочихМест);
		Иначе
			СтрокаТаблицыОписанийРабочихМест.ПредставлениеРабочегоМеста =
				ПредставлениеРабочегоМеста(СтрокаТаблицыОписанийРабочихМест, ИспользоватьШтатноеРасписание, ВключаяРанееУволенных);
		КонецЕсли;
		
	КонецЦикла;
	
	Если РаботникиПоДоговорамГПХ = Истина И СписокДоговорниковГПХ.Количество() > 0 
		И (ПривилегированныйРежим() Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера)) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("Сотрудники", СписокДоговорниковГПХ);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания
			|ПОМЕСТИТЬ ВТДоговорыГПХСотрудников
			|ИЗ
			|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|ГДЕ
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала <= &Период
			|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник В(&Сотрудники)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ДоговорыГПХСотрудников.ДатаОкончания) КАК ДатаОкончания,
			|	ДоговорыГПХСотрудников.Сотрудник
			|ПОМЕСТИТЬ ВТПоследниеДатыОкончанияДоговоров
			|ИЗ
			|	ВТДоговорыГПХСотрудников КАК ДоговорыГПХСотрудников
			|
			|СГРУППИРОВАТЬ ПО
			|	ДоговорыГПХСотрудников.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоговорыГПХСотрудников.Сотрудник,
			|	МАКСИМУМ(ДоговорыГПХСотрудников.ДатаНачала) КАК ДатаНачала,
			|	ДоговорыГПХСотрудников.ДатаОкончания
			|ПОМЕСТИТЬ ВТПоследниеДатыНачалаДоговоров
			|ИЗ
			|	ВТДоговорыГПХСотрудников КАК ДоговорыГПХСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеДатыОкончанияДоговоров КАК ПоследниеДатыОкончанияДоговоров
			|		ПО ДоговорыГПХСотрудников.Сотрудник = ПоследниеДатыОкончанияДоговоров.Сотрудник
			|			И ДоговорыГПХСотрудников.ДатаОкончания = ПоследниеДатыОкончанияДоговоров.ДатаОкончания
			|
			|СГРУППИРОВАТЬ ПО
			|	ДоговорыГПХСотрудников.Сотрудник,
			|	ДоговорыГПХСотрудников.ДатаОкончания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоговорыГПХСотрудников.Сотрудник,
			|	ДоговорыГПХСотрудников.ДатаНачала,
			|	ДоговорыГПХСотрудников.ДатаОкончания,
			|	МАКСИМУМ(ДоговорыГПХСотрудников.ДокументОснование) КАК Договор,
			|	ДоговорыГПХСотрудников.ДокументОснование.Номер КАК Номер,
			|	ДоговорыГПХСотрудников.ДокументОснование.Дата КАК Дата
			|ИЗ
			|	ВТДоговорыГПХСотрудников КАК ДоговорыГПХСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеДатыНачалаДоговоров КАК ПоследниеДатыНачалаДоговоров
			|		ПО ДоговорыГПХСотрудников.Сотрудник = ПоследниеДатыНачалаДоговоров.Сотрудник
			|			И ДоговорыГПХСотрудников.ДатаНачала = ПоследниеДатыНачалаДоговоров.ДатаНачала
			|			И ДоговорыГПХСотрудников.ДатаОкончания = ПоследниеДатыНачалаДоговоров.ДатаОкончания
			|
			|СГРУППИРОВАТЬ ПО
			|	ДоговорыГПХСотрудников.Сотрудник,
			|	ДоговорыГПХСотрудников.ДатаНачала,
			|	ДоговорыГПХСотрудников.ДатаОкончания,
			|	ДоговорыГПХСотрудников.ДокументОснование.Номер,
			|	ДоговорыГПХСотрудников.ДокументОснование.Дата";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицыОписанийРабочихМест = СтрокиДоговорниковГПХ.Получить(Выборка.Сотрудник);
			Если СтрокаТаблицыОписанийРабочихМест <> Неопределено Тогда
				
				Если ТипЗнч(Выборка.Договор) = Тип("ДокументСсылка.ДоговорАвторскогоЗаказа") Тогда
					ПредставлениеДоговора = НСтр("ru='Дог. авт. заказа';uk='Дог. авт. замовлення'");
				Иначе
					ПредставлениеДоговора = НСтр("ru='Дог. (раб., услуги)';uk='Дог. (роб., послуги)'");
				КонецЕсли;
				
				СтрокаТаблицыОписанийРабочихМест.ПредставлениеРабочегоМеста = ПредставлениеДоговора + " № "
					+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер, Истина, Истина)
					+ " " + НСтр("ru='от';uk='від'") + " " + Формат(Выборка.Дата, "ДФ=dd.MM.yy")
					+ " ("  + Формат(Выборка.ДатаНачала, "ДФ=dd.MM.yy") + " - " + Формат(Выборка.ДатаОкончания, "ДФ=dd.MM.yy") + ")";
					
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
		
	Возврат ТаблицаОписанийРабочихМест;	
	
КонецФункции

// Возвращает представление рабочего места сотрудника.
// 
// Параметры:
//				СтрокаТаблицыОписанийРабочихМест - Строка таблицы значений
//				ИспользоватьШтатноеРасписание
//				УказатьПериодРаботы.
//
// Возвращаемое значение:
//			Строка - Представление позиции штатного расписания, если используется штатное расписание,
//					представление рабочего места вида "Должность /Подразделение/", если штатное расписание не ведется
//					дополняется периодом работы "по дата увольнения", для уволенных сотрудников и "с дата приема" для работающих.
//
Функция ПредставлениеРабочегоМеста(СтрокаТаблицыОписанийРабочихМест, ИспользоватьШтатноеРасписание, УказатьПериодРаботы)
	
	Если СтрокаТаблицыОписанийРабочихМест = Неопределено Тогда
		ПредставлениеРабочегоМеста = "";
	Иначе
		
		Если ИспользоватьШтатноеРасписание Тогда
			ПредставлениеРабочегоМеста = Строка(СтрокаТаблицыОписанийРабочихМест.ДолжностьПоШтатномуРасписанию);
		Иначе
			ПредставлениеРабочегоМеста =
				Строка(СтрокаТаблицыОписанийРабочихМест.Должность) +" /"+Строка(СтрокаТаблицыОписанийРабочихМест.Подразделение)+"/";
		КонецЕсли;
		
		Если УказатьПериодРаботы Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицыОписанийРабочихМест.ДатаУвольнения) Тогда
				
				ПредставлениеРабочегоМеста = ПредставлениеРабочегоМеста + " ("
					+ НСтр("ru='по';uk='по'") + " " + Формат(СтрокаТаблицыОписанийРабочихМест.ДатаУвольнения, "ДЛФ=DD") + ")";
					
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицыОписанийРабочихМест.ДатаПриема) Тогда
					
				ПредставлениеРабочегоМеста = ПредставлениеРабочегоМеста + " ("
					+ НСтр("ru='с';uk='з'") + " " + Формат(СтрокаТаблицыОписанийРабочихМест.ДатаПриема, "ДЛФ=DD") + ")";
					
			КонецЕсли;
				
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ПредставлениеРабочегоМеста;
	
КонецФункции

// Возвращает описание параметров для метода СоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице.
//
// Параметры:
//		ИмяВТФизическиеЛицаДоговорники 	- Строка
//		Организация 					- СправочникСсылка.Организации
//		НачалоПериода 					- Дата
//		ОкончаниеПериода				- Дата
//
// Возвращаемое значение:
//		Структура:
//			* ИмяВТФизическиеЛицаДоговорники 	- Строка.
//			* Организация						- СправочникСсылка.Организации, если не указывать таблица
//													сформируется по всем доступным организациям.
//			* НачалоПериода						- Дата, по умолчанию пустая дата.
//			* ОкончаниеПериода					- Дата, по умолчанию пустая дата.
//			* ИмяВТДоговорыГПХФизическихЛиц		- Строка, содержит имя создаваемой таблицы
//													по умолчанию - "ВТДоговорыГПХФизическихЛиц".
//
Функция ПараметрыДляСоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице(ИмяВТФизическиеЛицаДоговорники, Организация = Неопределено, НачалоПериода = '00010101', ОкончаниеПериода = '00010101') Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяВТФизическиеЛицаДоговорники", ИмяВТФизическиеЛицаДоговорники);
	Параметры.Вставить("Организация", Организация);
	Параметры.Вставить("НачалоПериода", НачалоПериода);
	Параметры.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	Параметры.Вставить("ИмяВТДоговорыГПХФизическихЛиц", "ВТДоговорыГПХФизическихЛиц");
	
	Возврат Параметры;
	
КонецФункции

// Создает в переданном менеджере временных таблиц, таблицу с договорами ГПХ физических лиц
// см. функцию ЗапросВТДоговорыГПХФизическихЛиц.
//
// Параметры:
//		МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные		- Булево
//		Параметры				- Структура - см. функцию ПараметрыДляСоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице.
//
Процедура СоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры) Экспорт
	
	Запрос = ЗапросВТДоговорыГПХФизическихЛиц(ТолькоРазрешенные, Параметры);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает запрос, формирующий временную таблицу с договорами ГПХ физических лиц
// по переданным параметрам. Временная таблица содержит поля:
//		* Организация		- СправочникСсылка.Организации
//		* Договор			- ДокументСсылка.ДоговорАвторскогоЗаказа
//							- ДокументСсылка.ДоговорРаботыУслуги
//		* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//		* ДатаНачала		- Дата
//		* ДатаОкончания		- Дата
//
// Параметры:
//		ТолькоРазрешенные	- Булево
//		Параметры			-Структура - см. функцию ПараметрыДляСоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице.
//
// Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТДоговорыГПХФизическихЛиц(ТолькоРазрешенные, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация КАК Организация,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Регистратор КАК Договор,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник КАК Сотрудник,
		|	ВЫРАЗИТЬ(ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала КАК ДатаНачала,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания КАК ДатаОкончания,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТДоговорыГПХФизическихЛиц
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаДоговорники КАК ФизическиеЛицаДоговорники
		|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо = ФизическиеЛицаДоговорники.ФизическоеЛицо
		|ГДЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= &ДатаНачала
		|	И (ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала <= &ДатаОкончания
		|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
		|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация = &Организация";
		
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Если ТипЗнч(Параметры.НачалоПериода) = Тип("Строка") Тогда
		ТекстДатаНачала = Параметры.НачалоПериода;
	Иначе
		ТекстДатаНачала = "ДАТАВРЕМЯ(" + Формат(Параметры.НачалоПериода, "ДФ='гггг, М, д'; ДП=") + ")";
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
		ТекстДатаОкончания = Параметры.ОкончаниеПериода;
	Иначе
		ТекстДатаОкончания = "ДАТАВРЕМЯ(" + Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д'; ДП=") + ")";
	КонецЕсли;
				
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаНачала", ТекстДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаОкончания", ТекстДатаОкончания);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаДоговорники", Параметры.ИмяВТФизическиеЛицаДоговорники);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДоговорыГПХФизическихЛиц", Параметры.ИмяВТДоговорыГПХФизическихЛиц);
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация = &Организация", "");
	КонецЕсли;
		
	Возврат Запрос;
	
КонецФункции

// Возвращает таблицу значений, содержащую права сотрудников на специальные отпуска.
//
// Параметры:
//		Сотрудники - Массив ссылок на элементы справочника Сотрудники.
//
// Возвращаемое значение:
//		ТаблицаЗначений
//			* Сотрудник			- СправочникСсылка.Сотрудники
//			* ВидОтпуска		- СправочникСсылка.ВидыОтпусков
//			* КоличествоДней	- Число
//
Функция ПраваНаСпециальныеОтпускаСотрудника(Сотрудники) Экспорт
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, "КоличествоДнейОтпускаЧАЭС");
	КадровыеДанные.Колонки.КоличествоДнейОтпускаЧАЭС.Имя = "КоличествоДней";
	КадровыеДанные.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	КадровыеДанные.Колонки.Удалить("Период");
	КадровыеДанные.Колонки.Удалить("ФизическоеЛицо");
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для каждого СтрокаДанных Из КадровыеДанные Цикл
		Если СтрокаДанных.КоличествоДней = NULL Или Не ЗначениеЗаполнено(СтрокаДанных.КоличествоДней) Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаДанных);
		Иначе
			СтрокаДанных.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		КадровыеДанные.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Возврат КадровыеДанные;
	
КонецФункции

Процедура СформироватьДвиженияПоТерриториям(Движения, ДанныеДляПроведения, Организация) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории",
		Новый Структура("Организация", Организация)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Регистратор = Движения.ТерриторииСотрудников.Отбор.Регистратор.Значение;
	
	ДействуетДоЕсть = ДанныеДляПроведения.Колонки.Найти("ДействуетДо") <> Неопределено;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудники", ДанныеДляПроведения);
	
	ИмяВТСотрудники = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСотрудники");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Период,
		|	Сотрудники.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&Сотрудники КАК Сотрудники";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудники", ИмяВТСотрудники);
		
	Запрос.Выполнить();
	
	ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, ИмяВТСотрудники);
	
	МассивОтборов = Новый Массив;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(МассивОтборов, "Регистратор", "<>", Регистратор);
	
	ПоляОтбора = Новый Структура("ТерриторииСотрудников", МассивОтборов);
		
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательТаблиц, Истина, "Территория", ПоляОтбора);
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Период,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Территория
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК Сотрудники";
		
	ДанныеТерриторий = Запрос.Выполнить().Выгрузить();
				
	Для каждого СтрокаДанныхДляПроведения Из ДанныеДляПроведения Цикл
		
		ТерриторияПрежняя = Неопределено;
		
		ДанныеСотрудника = ДанныеТерриторий.НайтиСтроки(
			Новый Структура("Период,Сотрудник", СтрокаДанныхДляПроведения.Период, СтрокаДанныхДляПроведения.Сотрудник));
			
		Если ДанныеСотрудника.Количество() > 0  Тогда
			ТерриторияПрежняя = ДанныеСотрудника[0].Территория;
		КонецЕсли; 
		
		Если СтрокаДанныхДляПроведения.Территория = ТерриторияПрежняя И Не ДействуетДоЕсть Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаДвижений = Движения.ТерриторииСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаДанныхДляПроведения);
		
		Если ДействуетДоЕсть Тогда
			СтрокаДвижений.ТерриторияПоОкончании = ТерриторияПрежняя;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если Движения.ТерриторииСотрудников.Количество() > 0 Тогда
		Движения.ТерриторииСотрудников.Записывать = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформироватьДвиженияДоговоровГПХ(Движения, ДанныеДляПроведенияДоговоровГПХ) Экспорт
	
	Для каждого ДанныеПроведения Из ДанныеДляПроведенияДоговоровГПХ Цикл
		
		Движения.ПериодыДействияДоговоровГражданскоПравовогоХарактера.Записывать = Истина;
		ЗаполнитьЗначенияСвойств(Движения.ПериодыДействияДоговоровГражданскоПравовогоХарактера.Добавить(), ДанныеПроведения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Создает ВТ со списком документов-отсутствий по сотрудникам в указанном периоде.
// Получаются все отсутствия период которых пересекается с указанным периодом
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - приемник создаваемой временной таблицы
//  Сотрудники				 - массив - сотрудники, отсутствия которых надо получить
//  НачалоПериода			 - дата - начало периода получения отсутствий
//  ОкончаниеПериода		 - дата - окончания периода получения отсутствий 
//  ТолькоРазрешенные		 - булево - по умолчанию ИСТИНА
//
Процедура СоздатьВТОтсутствияСотрудниковВПериоде(МенеджерВременныхТаблиц, Сотрудники, НачалоПериода, ОкончаниеПериода, ТолькоРазрешенные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Командировка.Ссылка,
		|	Командировка.Организация,
		|	Командировка.Сотрудник,
		|	Командировка.ДатаНачала,
		|	Командировка.ДатаОкончания
		|ПОМЕСТИТЬ ВТОтсутствияСотрудниковВПериодеПредварительно
		|ИЗ
		|	Документ.Командировка КАК Командировка
		|ГДЕ
		|	Командировка.Сотрудник В(&Сотрудники)
		|	И (Командировка.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ Командировка.ДатаОкончания МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ &НачалоПериода МЕЖДУ Командировка.ДатаНачала И Командировка.ДатаОкончания
		|			ИЛИ &ОкончаниеПериода МЕЖДУ Командировка.ДатаНачала И Командировка.ДатаОкончания)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отпуск.Ссылка,
		|	Отпуск.Организация,
		|	Отпуск.Сотрудник,
		|	Отпуск.ДатаНачалаПериодаОтсутствия,
		|	Отпуск.ДатаОкончанияПериодаОтсутствия
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Сотрудник В(&Сотрудники)
		|	И (Отпуск.ДатаНачалаПериодаОтсутствия МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ Отпуск.ДатаОкончанияПериодаОтсутствия МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ &НачалоПериода МЕЖДУ Отпуск.ДатаНачалаПериодаОтсутствия И Отпуск.ДатаОкончанияПериодаОтсутствия
		|			ИЛИ &ОкончаниеПериода МЕЖДУ Отпуск.ДатаНачалаПериодаОтсутствия И Отпуск.ДатаОкончанияПериодаОтсутствия)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускБезСохраненияОплаты.Ссылка,
		|	ОтпускБезСохраненияОплаты.Организация,
		|	ОтпускБезСохраненияОплаты.Сотрудник,
		|	ОтпускБезСохраненияОплаты.ДатаНачала,
		|	ОтпускБезСохраненияОплаты.ДатаОкончания
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|ГДЕ
		|	ОтпускБезСохраненияОплаты.Сотрудник В(&Сотрудники)
		|	И (ОтпускБезСохраненияОплаты.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ ОтпускБезСохраненияОплаты.ДатаОкончания МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ &НачалоПериода МЕЖДУ ОтпускБезСохраненияОплаты.ДатаНачала И ОтпускБезСохраненияОплаты.ДатаОкончания
		|			ИЛИ &ОкончаниеПериода МЕЖДУ ОтпускБезСохраненияОплаты.ДатаНачала И ОтпускБезСохраненияОплаты.ДатаОкончания)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БольничныйЛист.Ссылка,
		|	БольничныйЛист.Организация,
		|	БольничныйЛист.Сотрудник,
		|	БольничныйЛист.ДатаНачала,
		|	БольничныйЛист.ДатаОкончания
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	БольничныйЛист.Сотрудник В(&Сотрудники)
		|	И (БольничныйЛист.ДатаНачала МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ БольничныйЛист.ДатаОкончания МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|			ИЛИ &НачалоПериода МЕЖДУ БольничныйЛист.ДатаНачала И БольничныйЛист.ДатаОкончания
		|			ИЛИ &ОкончаниеПериода МЕЖДУ БольничныйЛист.ДатаНачала И БольничныйЛист.ДатаОкончания)";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТОтсутствияСотрудниковВПериодеПредварительно", "Сотрудник,ДатаНачала");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, ТолькоРазрешенные, "Должность,ДолжностьПоШтатномуРасписанию");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтсутствияСотрудниковВПериодеПредварительно.Ссылка,
		|	ОтсутствияСотрудниковВПериодеПредварительно.Организация,
		|	ОтсутствияСотрудниковВПериодеПредварительно.Сотрудник,
		|	КадровыеДанныеСотрудников.Должность КАК Должность,
		|	ОтсутствияСотрудниковВПериодеПредварительно.ДатаНачала,
		|	ОтсутствияСотрудниковВПериодеПредварительно.ДатаОкончания
		|ПОМЕСТИТЬ ВТОтсутствияСотрудниковВПериоде
		|ИЗ
		|	ВТОтсутствияСотрудниковВПериодеПредварительно КАК ОтсутствияСотрудниковВПериодеПредварительно
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ОтсутствияСотрудниковВПериодеПредварительно.ДатаНачала = КадровыеДанныеСотрудников.Период
		|			И ОтсутствияСотрудниковВПериодеПредварительно.Сотрудник = КадровыеДанныеСотрудников.Сотрудник";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КадровыеДанныеСотрудников.Должность", "КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Выбирает из переданной ВТ периоды в которых сотрудник либо вообще не работал, либо работал не весь период.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - приемник создаваемой временной таблицы
//  ИмяВТСотрудникиПериоды	 - имя временной таблицы в менеджере временных таблиц, содержащей сотрудников и проверяемые периоды
//  						Сотрудник	 
//  						ДатаНачала - начало проверяемого периода
//  						ДатаОкончания - окончание проверяемого периода
//
Процедура СоздатьВТПериодыВКоторыхСотрудникНеРаботал(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды = "ВТСотрудникиПериоды") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОписательТаблиц = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(ИмяВТСотрудникиПериоды);
	
	ЗапросКадровыхДанных = КадровыйУчет.ЗапросВТПостоянныеКадровыеДанныеСотрудников(
	Истина,
	ОписательТаблиц,
	"ДатаПриема,ДатаУвольнения,ТекущийВидЗанятости",
	,
	"ВТКадровыеДанныеСотрудников");
	
	ЗапросКадровыхДанных.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросКадровыхДанных.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ДатаНачала,
	|	ДанныеДокумента.ДатаОкончания
	|ПОМЕСТИТЬ ВТПериодыВКоторыхСотрудникНеРаботал
	|ИЗ
	|	ИмяВТСотрудникиПериоды КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И (КадровыеДанныеСотрудников.ТекущийВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))
	|			И (ДанныеДокумента.ДатаНачала < КадровыеДанныеСотрудников.ДатаПриема
	|				ИЛИ ДанныеДокумента.ДатаОкончания < КадровыеДанныеСотрудников.ДатаПриема
	|				ИЛИ КадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И (ДанныеДокумента.ДатаНачала > КадровыеДанныеСотрудников.ДатаУвольнения
	|						ИЛИ ДанныеДокумента.ДатаОкончания > КадровыеДанныеСотрудников.ДатаУвольнения))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НомерСледующегоТрудовогоДоговора(Организация, НомераДоговоровТекущегоДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ОсновныеДанныеКонтрактаДоговораСотрудника.НомерДоговораКонтракта) КАК НомерДоговораКонтракта
		|ИЗ
		|	РегистрСведений.ОсновныеДанныеКонтрактаДоговораСотрудника КАК ОсновныеДанныеКонтрактаДоговораСотрудника
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ОсновныеДанныеКонтрактаДоговораСотрудника.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.ОсновныеДанныеКонтрактаДоговораСотрудника КАК ОсновныеДанныеКонтрактаДоговораСотрудника
		|		ГДЕ
		|			ОсновныеДанныеКонтрактаДоговораСотрудника.Организация = &Организация И ОсновныеДанныеКонтрактаДоговораСотрудника.НомерДоговораКонтракта <> """") КАК ПоследниеПериоды
		|		ПО ОсновныеДанныеКонтрактаДоговораСотрудника.Период = ПоследниеПериоды.Период
		|ГДЕ
		|	ОсновныеДанныеКонтрактаДоговораСотрудника.Организация = &Организация";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НомерДоговораКонтракта = "";
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НомерДоговораКонтракта = Выборка.НомерДоговораКонтракта;
		Если Не ЗначениеЗаполнено(НомерДоговораКонтракта) Тогда
			НомерДоговораКонтракта = "";
		КонецЕсли; 
		
	КонецЕсли;
	
	Если НомераДоговоровТекущегоДокумента <> Неопределено Тогда
		
		Для каждого НомерДоговораДокумента Из НомераДоговоровТекущегоДокумента Цикл
			
			Если НомерДоговораКонтракта < НомерДоговораДокумента Тогда
				НомерДоговораКонтракта = НомерДоговораДокумента;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Префикс = "";
	Суффикс = "";
	Если ПустаяСтрока(НомерДоговораКонтракта) Тогда
		Номер = "00000";
	Иначе
		
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерДоговораКонтракта) Тогда
			
			Номер = "";
			
			ДлинаНомера = СтрДлина(НомерДоговораКонтракта);
			
			ЧастиНомера = Новый Массив;
			
			СимволНомера = Сред(НомерДоговораКонтракта, 1, 1);
			ЧисловаяЧасть = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СимволНомера);
			
			ОписаниеЧастиНомера = Новый Структура("ЧастьНомера,ЧисловаяЧасть", СимволНомера, ЧисловаяЧасть);
			ЧастиНомера.Добавить(ОписаниеЧастиНомера);
			
			Для НомерСимвола = 2 По ДлинаНомера Цикл
				
				СимволНомера = Сред(НомерДоговораКонтракта, НомерСимвола, 1);
				ЧисловаяЧасть = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СимволНомера);
				Если ОписаниеЧастиНомера.ЧисловаяЧасть <> ЧисловаяЧасть Тогда
					ОписаниеЧастиНомера = Новый Структура("ЧастьНомера,ЧисловаяЧасть", СимволНомера, ЧисловаяЧасть);
					ЧастиНомера.Добавить(ОписаниеЧастиНомера);
				Иначе
					ОписаниеЧастиНомера.ЧастьНомера = ОписаниеЧастиНомера.ЧастьНомера + СимволНомера;
				КонецЕсли;
				
			КонецЦикла;
			
			ИндексСамойДлиннойЧисловойЧасти = Неопределено;
			ДлинаСамойДлиннойЧасти = 0;
			Для ИндексЧастиНомера = 0 По ЧастиНомера.Количество() - 1 Цикл
				
				ОписаниеЧастиНомера = ЧастиНомера[ИндексЧастиНомера];
				Если ОписаниеЧастиНомера.ЧисловаяЧасть Тогда
					
					ДлинаЧастиНомера = СтрДлина(ОписаниеЧастиНомера.ЧастьНомера);
					Если ИндексСамойДлиннойЧисловойЧасти = Неопределено
						Или ДлинаСамойДлиннойЧасти <= ДлинаЧастиНомера Тогда
						
						ИндексСамойДлиннойЧисловойЧасти = ИндексЧастиНомера;
						ДлинаСамойДлиннойЧасти = ДлинаЧастиНомера;
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЦикла;
			
			Если ИндексСамойДлиннойЧисловойЧасти = Неопределено Тогда
				Префикс = НомерДоговораКонтракта;
				Номер = "";
			Иначе
				
				Для ИндексЧастиНомера = 0 По ИндексСамойДлиннойЧисловойЧасти - 1 Цикл
					Префикс = Префикс + ЧастиНомера[ИндексЧастиНомера].ЧастьНомера;
				КонецЦикла;
				
				Номер = ЧастиНомера[ИндексСамойДлиннойЧисловойЧасти].ЧастьНомера;
				
				Для ИндексЧастиНомера = ИндексСамойДлиннойЧисловойЧасти + 1 По ЧастиНомера.Количество() - 1 Цикл
					Суффикс = Суффикс + ЧастиНомера[ИндексЧастиНомера].ЧастьНомера;
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			Номер = НомерДоговораКонтракта;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрДлина(Номер) > 0 И Лев(Номер, 1) = "0" Тогда
		ФорматнаяСтрока = "ЧЦ=" + СтрДлина(Номер) + "; ЧВН=; ЧГ=";
	Иначе
		ФорматнаяСтрока = "ЧГ=";
	КонецЕсли; 
	
	Возврат Префикс + Формат(Число(Номер) + 1, ФорматнаяСтрока) + Суффикс;
	
КонецФункции

Процедура ПроверитьУникальностьТабельногоНомера(ТабельныйНомер, Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиКадровогоУчета.КонтролироватьУникальностьТабельныхНомеров
		|ИЗ
		|	РегистрСведений.НастройкиКадровогоУчета КАК НастройкиКадровогоУчета";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ПроверитьУникальность = РегистрыСведений.НастройкиКадровогоУчета.СоздатьМенеджерЗаписи().КонтролироватьУникальностьТабельныхНомеров;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПроверитьУникальность = Выборка.КонтролироватьУникальностьТабельныхНомеров;
		
	КонецЕсли;
	
	Если ПроверитьУникальность Тогда
		КадровыйУчетБазовый.ПроверитьУникальностьТабельногоНомера(ТабельныйНомер, Сотрудник);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьУвольнениеОсновногоСотрудника(Организация, ПроверяемыеДаты, Отказ) Экспорт
	
	СотрудникиДокумента = Новый Массив;
	Для каждого ОписаниеДаты Из ПроверяемыеДаты Цикл
		
		Если ТипЗнч(ОписаниеДаты.Значение) = Тип("СправочникСсылка.Сотрудники") Тогда
			СотрудникиДокумента.Добавить(ОписаниеДаты.Значение);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиДокумента, ОписаниеДаты.Значение);
		КонецЕсли;
		 
	КонецЦикла;
	
	Если СотрудникиДокумента.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Для каждого ОписаниеПроверяемойДаты Из ПроверяемыеДаты Цикл
			
			ДатаУвольнения = ОписаниеПроверяемойДаты.Ключ;
			Если ТипЗнч(ОписаниеДаты.Значение) = Тип("СправочникСсылка.Сотрудники") Тогда
				Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеДаты.Значение);
			Иначе
				Сотрудники = ОписаниеПроверяемойДаты.Значение;
			КонецЕсли;
			
			Для каждого Сотрудник Из Сотрудники Цикл
				
				КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
					Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), "ВидЗанятости", ДатаУвольнения);
					
				Если КадровыеДанныеСотрудника.Количество() > 0 И КадровыеДанныеСотрудника[0].ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
					
					ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
					ПараметрыПолученияСотрудников.Вставить("СписокФизическихЛиц", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КадровыеДанныеСотрудника[0].ФизическоеЛицо));
					ПараметрыПолученияСотрудников.Вставить("Организация", Организация);
					ПараметрыПолученияСотрудников.Вставить("НачалоПериода", КонецДня(ДатаУвольнения) + 1);
					ПараметрыПолученияСотрудников.Вставить("ОкончаниеПериода", КонецДня(ДатаУвольнения) + 1);
					ПараметрыПолученияСотрудников.Вставить("КадровыеДанные", "ВидЗанятости,Должность,Подразделение");
					СотрудникиФизическогоЛица = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
					МассивСовместителей = Новый Массив;
					Для каждого СотрудникФизическогоЛица Из СотрудникиФизическогоЛица Цикл
						
						Если СотрудникиДокумента.Найти(СотрудникФизическогоЛица.Сотрудник) = Неопределено Тогда
							
							// Если есть другой сотрудник с основным местом работы, то это значит, что текущего можно смело увольнять.
							Если СотрудникФизическогоЛица.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
								МассивСовместителей.Очистить();
								Прервать;
							КонецЕсли;
							
							// Сбор сведений о внутренних совместителях.
							Если СотрудникФизическогоЛица.ВидЗанятости <> Перечисления.ВидыЗанятости.Совместительство Тогда
								МассивСовместителей.Добавить(СотрудникФизическогоЛица);
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					// Если остались внутренние совместители, удалять сотрудника нельзя.
					// С начала нужно перевести совместителей на другой вид занятости, который они приобретают
					// в связи с увольнением текущего сотрудника.
					Если МассивСовместителей.Количество() > 0 Тогда
						
						ТекстСообщения = НСтр("ru  = 'Нельзя уволить %1 с основного места работы, так как он также работает по совместительству:'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Сотрудник);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
						Для каждого Совместитель Из МассивСовместителей Цикл
							ТекстСообщения = НСтр("ru  = '%1 в %2'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Совместитель.Должность, Совместитель.Подразделение);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

Функция ПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Экспорт
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеКадровогоСостоянияРасширенная,ПолныеПрава", , Ложь);
	
КонецФункции

Процедура ПроверитьПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Экспорт
	
	Если Не ПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Тогда
		ВызватьИсключение НСтр("ru='Недостаточно прав для создания';uk='Недостатньо прав для створення'");
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьПараметрСеансаПравилоФормированияПредставленияЭлементовСправочникаСотрудники() Экспорт
	
	ПараметрыСеанса.ПравилоФормированияПредставленияЭлементовСправочникаСотрудники = НастройкиКадровогоУчета().ПравилоФормированияПредставленияЭлементовСправочникаСотрудники;
	
КонецПроцедуры

Функция НастройкиКадровогоУчета() Экспорт
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(РегистрыСведений.НастройкиКадровогоУчета.СоздатьМенеджерЗаписи(), Метаданные.РегистрыСведений.НастройкиКадровогоУчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиКадровогоУчета.*
		|ИЗ
		|	РегистрСведений.НастройкиКадровогоУчета КАК НастройкиКадровогоУчета";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, Выборка);
		
	КонецЕсли; 
	
	Возврат СтруктураНастроек;
	
КонецФункции

Процедура ЗарегистрироватьВРеестреКадровыхПриказов(Движения, ДанныеРеестраКадровыхПриказов, Отказ) Экспорт
	
	Если ДанныеРеестраКадровыхПриказов.Количество() > 0 Тогда
		Движения.РеестрКадровыхПриказов.Записывать = Истина;
	КонецЕсли; 
	
	Для Каждого СтрокаТаблицы Из ДанныеРеестраКадровыхПриказов Цикл
		
		НоваяСтрока = Движения.РеестрКадровыхПриказов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗарегистрироватьВРеестреОтпусков(Движения, ДанныеРеестраОтпусков, Отказ) Экспорт
	
	Если ДанныеРеестраОтпусков.Количество() > 0 Тогда
		Движения.РеестрОтпусков.Записывать = Истина;
	КонецЕсли; 
	
	Для Каждого СтрокаТаблицы Из ДанныеРеестраОтпусков Цикл
		
		НоваяСтрока = Движения.РеестрОтпусков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеТарифнойСтавкиНадбавки(СтрокиНачисленийПоСотруднику, Показатели, ЭтоПеремещение = Ложь) Экспорт
	
	ДобавитьЗапятуюОклад = Ложь;
	ДобавитьЗапятуюНадбавки = Ложь;
	
	ОкладТариф = 0;
	СтрокаОклад = "";
	СтрокаНадбавки = "";
	
	ТочностьОклада = 0;
	
	Для каждого СтрокаНачисления Из СтрокиНачисленийПоСотруднику Цикл
		
		Если ЭтоПеремещение И СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаНачисления.Начисление) Тогда
			
			ОсновнойОПоказатель = Неопределено;
			ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачисления.Начисление);
			Для каждого ПоказательНачисления Из ИнфоОВидеРасчета.Показатели Цикл
				
				Если ПоказательНачисления.ОсновнойПоказатель Тогда
					ОсновнойОПоказатель = ПоказательНачисления;
					Прервать;
				КонецЕсли; 
				
			КонецЦикла;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ИдентификаторСтрокиВидаРасчета", СтрокаНачисления.ИдентификаторСтрокиВидаРасчета);
			Если ОсновнойОПоказатель <> Неопределено Тогда
				СтруктураПоиска.Вставить("Показатель", ОсновнойОПоказатель.Показатель);
			КонецЕсли;
			СтрокиПоказателей = Показатели.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПоказателей.Количество() > 0 Тогда
				Значение = СтрокиПоказателей[0].Значение;
			Иначе
				Значение = Неопределено;
			КонецЕсли;      
			
			Если ИнфоОВидеРасчета.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы
				Или ИнфоОВидеРасчета.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы Тогда
			
			    Если ДобавитьЗапятуюОклад Тогда
					СтрокаОклад = СтрокаОклад + ", ";
				Иначе
					ДобавитьЗапятуюОклад = Истина;
				КонецЕсли;
				
				ТочностьОклада = 0;
				Если ОсновнойОПоказатель <> Неопределено Тогда
					ТочностьОклада = ОсновнойОПоказатель.Точность;
					СтрокаОклад = СтрокаОклад + ?(ЗначениеЗаполнено(ОсновнойОПоказатель), ОсновнойОПоказатель.КраткоеНаименование,  
						СтрокаНачисления.Начисление)+ ?(ЗначениеЗаполнено(Значение), ": " + Формат(Значение, "ЧДЦ=" + ТочностьОклада + "; ЧН="), "");
				КонецЕсли;
									
				Если ЗначениеЗаполнено(Значение) Тогда
					ОкладТариф = Значение;
				КонецЕсли;
				
			Иначе
				
				Если ДобавитьЗапятуюНадбавки Тогда
					СтрокаНадбавки = СтрокаНадбавки + "; ";
				Иначе
					ДобавитьЗапятуюНадбавки = Истина;
				КонецЕсли;
				
				Если ОсновнойОПоказатель <> Неопределено Тогда
					Точность = ОсновнойОПоказатель.Точность;
				Иначе
					Точность = 0;
				КонецЕсли;
					
				СтрокаНадбавки = СтрокаНадбавки + ?(ЗначениеЗаполнено(ОсновнойОПоказатель), ОсновнойОПоказатель.КраткоеНаименование,  
					СтрокаНачисления.Начисление) + ?(ЗначениеЗаполнено(Значение), ": " + Формат(Значение, "ЧДЦ=" + Точность + "; ЧН="), "");
				
			КонецЕсли;
									
		КонецЕсли; 
		
	КонецЦикла;    
	
	Если ПустаяСтрока(СтрокаОклад) Тогда
		Возврат СтрокаНадбавки;
	ИначеЕсли ПустаяСтрока(СтрокаНадбавки) Тогда
		Возврат Формат(ОкладТариф, "ЧДЦ=" + ТочностьОклада + "; ЧН=");
	Иначе
		Возврат СтрокаОклад + ", " + СтрокаНадбавки;
	КонецЕсли;
	
КонецФункции

Функция ТаблицаРеестраКадровыхПриказов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сотрудник");
	Таблица.Колонки.Добавить("ФизическоеЛицо");
	Таблица.Колонки.Добавить("ДокументОснование");
	Таблица.Колонки.Добавить("Номер");
	Таблица.Колонки.Добавить("Дата");
	Таблица.Колонки.Добавить("Подразделение");
	Таблица.Колонки.Добавить("Должность");
	Таблица.Колонки.Добавить("Разряд");
	Таблица.Колонки.Добавить("ТарифнаяСтавкаНадбавка");
	Таблица.Колонки.Добавить("ВидДоговора");
	Таблица.Колонки.Добавить("ВидСобытия");
	Таблица.Колонки.Добавить("НомерПриказа");
	Таблица.Колонки.Добавить("ДатаПриказа");
	Таблица.Колонки.Добавить("Основание");   
	
	Возврат Таблица;	
	
КонецФункции

Функция ТаблицаРеестраОтпусков() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сотрудник");
	Таблица.Колонки.Добавить("ФизическоеЛицо");
	Таблица.Колонки.Добавить("ДокументОснование");
	Таблица.Колонки.Добавить("Номер");
	Таблица.Колонки.Добавить("ВидОтпуска");
	Таблица.Колонки.Добавить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");
	Таблица.Колонки.Добавить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск");
	Таблица.Колонки.Добавить("КоличествоДнейОтпуска");
	Таблица.Колонки.Добавить("ДатаНачалаПериодаОтсутствия");
	Таблица.Колонки.Добавить("ДатаОкончанияПериодаОтсутствия");
	Таблица.Колонки.Добавить("ВидДоговора");
	Таблица.Колонки.Добавить("Основание");   
	
	Возврат Таблица;	
	
КонецФункции

Процедура ДополнитьТаблицуВозвратнымиДанными(ДокументСсылка, Сотрудник, ДатаОкончания, ДанныеРеестраКадровыхПриказов, Номер, Основание = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеестрКадровыхПриказов.Сотрудник,
	|	РеестрКадровыхПриказов.Подразделение,
	|	РеестрКадровыхПриказов.Должность,
	|	РеестрКадровыхПриказов.Разряд,
	|	РеестрКадровыхПриказов.ТарифнаяСтавкаНадбавка,
	|	РеестрКадровыхПриказов.ВидДоговора,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия
	|ИЗ
	|	РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|ГДЕ
	|	РеестрКадровыхПриказов.Сотрудник = &Сотрудник
	|	И РеестрКадровыхПриказов.Регистратор <> &Ссылка
	|	И РеестрКадровыхПриказов.Дата < &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеестрКадровыхПриказов.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Дата", ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ДокументОснование = ДокументСсылка;
		НоваяСтрока.Номер = Номер;
		НоваяСтрока.Дата = КонецДня(ДатаОкончания) + 1;
		
		Если Основание <> Неопределено Тогда
			НоваяСтрока.Основание = Основание;
		КонецЕсли;
		
		Номер = Номер + 1;
		
	КонецЕсли;     	
	
КонецПроцедуры

Функция ОснованиеДляРеестра(ДатаПриказа, НомерПриказа) Экспорт 
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
		НомерПриказаНаПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НомерПриказа, Истина, Истина);
	Иначе
		НомерПриказаНаПечать = НомерПриказа;
	КонецЕсли;
	
	Возврат СтрШаблон(НСтр("ru='Пр. № %1 от %2';uk='Пр. № %1 від %2'"), НомерПриказаНаПечать, Формат(ДатаПриказа, "ДЛФ=D"));
		
КонецФункции

#Область ИтогиПодсчетаСтажаТрудовойДеятельностиОтчетыПоСотрудникамТрудоваяДеятельность

Функция ДнейМесяцаПриПодсчетеСтажа(Знач Дней) Экспорт
	
	Возврат Дней - ЦелыхМесяцевВДняхСтажа(Дней) * 30;
	
КонецФункции

Функция МесяцевГодаПриПодсчетеСтажа(Знач Месяцев, Знач Дней) Экспорт
	
	Месяцев = Месяцев + ЦелыхМесяцевВДняхСтажа(Дней);
	Возврат Месяцев - ЦелыхЛетВМесяцахСтажа(Месяцев) * 12;
	
КонецФункции

Функция ЛетПриПодсчетеСтажа(Знач Лет, Знач Месяцев, Знач Дней) Экспорт
	
	Возврат Лет + ЦелыхЛетВМесяцахСтажа(Месяцев + ЦелыхМесяцевВДняхСтажа(Дней));
	
КонецФункции

Функция ЦелыхМесяцевВДняхСтажа(Знач Дней)
	
	Возврат Цел(Дней / 30);
	
КонецФункции

Функция ЦелыхЛетВМесяцахСтажа(Знач Месяцев)
	
	Возврат Цел(Месяцев / 12);
	
КонецФункции

#КонецОбласти


#Область ФормированиеПредставленийЭлементовСправочникаСотрудники

Процедура ОбработкаПолученияПолейПредставленияСотрудников(Поля, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Наименование");
	Поля.Добавить("УточнениеНаименования");
	Поля.Добавить("ФизическоеЛицо");
	Поля.Добавить("Ссылка");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставленияСотрудника(Данные, Представление, СтандартнаяОбработка) Экспорт
	
	ПравилоФормированияПредставления = ПараметрыСеанса.ПравилоФормированияПредставленияЭлементовСправочникаСотрудники;
	Если ЗначениеЗаполнено(ПравилоФормированияПредставления)
		И ПравилоФормированияПредставления <> Перечисления.ВариантыПравилФормированияПредставленияЭлементовСправочникаСотрудники.ФамилияИмяОтчествоДополнение Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДанныеДляФормированияПредставления = Новый Структура;
		ДанныеДляФормированияПредставления.Вставить("ПравилоФормированияПредставления", ПравилоФормированияПредставления);
		
		Если ЗначениеЗаполнено(Данные.ФизическоеЛицо)
			И ПравилоФормированияПредставления = Перечисления.ВариантыПравилФормированияПредставленияЭлементовСправочникаСотрудники.ФамилияИОДополнение Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Данные.ФизическоеЛицо, "ФИО,УточнениеНаименования");
			ДанныеДляФормированияПредставления.Вставить("ФИОПолные", ЗначенияРеквизитов.ФИО);
			ДанныеДляФормированияПредставления.Вставить("УточнениеНаименованияФизическогоЛица", ЗначенияРеквизитов.УточнениеНаименования);
			ДанныеДляФормированияПредставления.Вставить("УточнениеНаименованияСотрудника", Данные.УточнениеНаименования);
			
			Представление = КадровыйУчетВнутреннийКлиентСервер.ПредставлениеЭлементаСправочникаСотрудники(ДанныеДляФормированияПредставления);
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Сотрудник", Данные.Ссылка);
			Запрос.УстановитьПараметр("ФизическоеЛицо", Данные.ФизическоеЛицо);
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК Справочник.ФизическиеЛица).ФИО КАК ФИОПолные,
				|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК Справочник.ФизическиеЛица).УточнениеНаименования КАК УточнениеНаименования,
				|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
				|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости КАК ВидЗанятости,
				|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК Организация
				|ИЗ
				|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
				|ГДЕ
				|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = &ФизическоеЛицо
				|	И ТекущиеКадровыеДанныеСотрудников.Сотрудник = &Сотрудник";
				
				
				Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			ДанныеДляФормированияПредставления.Вставить("ФИОПолные", ?(ЗначениеЗаполнено(Выборка.ФИОПолные), Выборка.ФИОПолные, Данные.Наименование));
			ДанныеДляФормированияПредставления.Вставить("УточнениеНаименованияФизическогоЛица", Выборка.УточнениеНаименования);
			ДанныеДляФормированияПредставления.Вставить("УточнениеНаименованияСотрудника", Данные.УточнениеНаименования);
			ДанныеДляФормированияПредставления.Вставить("Организация", Выборка.Организация);
			ДанныеДляФормированияПредставления.Вставить("ВидЗанятости", Выборка.ВидЗанятости);
			ДанныеДляФормированияПредставления.Вставить("ДатаУвольнения", Выборка.ДатаУвольнения);
			
			Представление = КадровыйУчетВнутреннийКлиентСервер.ПредставлениеЭлементаСправочникаСотрудники(ДанныеДляФормированияПредставления);
			
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(Представление) Тогда
			Представление = Данные.Наименование;
		КонецЕсли; 
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти


#Область КадровыеДанныеФизическихЛиц

// Сведения об образовании

Функция ДобавитьПолеСведенийОбОбразованииФизическихЛиц(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	ВидОбразования = Неопределено;
	
	Если НеобходимыСведенияОбОбразованииФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ВидОбразования = "СведенияОбОбразовании";
		
	ИначеЕсли НеобходимыСведенияОВысшемОбразованииФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ВидОбразования = "СведенияОВысшемОбразовании";
		
	ИначеЕсли НеобходимыСведенияОПослевузовскомОбразованииФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ВидОбразования = "СведенияОПослевузовскомОбразовании";
		
	КонецЕсли;
	
	Если ДобавленоПолеСведений Тогда
		
		СведенияОбОбразованииФизическихЛиц = ИсточникиДанных.Получить("СведенияОбОбразованииФизическихЛиц");
		Если СведенияОбОбразованииФизическихЛиц = Неопределено Тогда
			СведенияОбОбразованииФизическихЛиц = Новый Соответствие;
		КонецЕсли; 
		
		СведенияОбОбразованииФизическихЛиц.Вставить(ВидОбразования, Истина);
		ИсточникиДанных.Вставить("СведенияОбОбразованииФизическихЛиц", СведенияОбОбразованииФизическихЛиц);
		
		ПутьКДанным = ПутьКДаннымПоИмениЗапрашиваемыхДанныхОбОбразовании(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли; 
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбОбразованииФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	ВидыОбразований = ИсточникиДанных.Получить("СведенияОбОбразованииФизическихЛиц");
	Если ВидыОбразований = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТОбразованияФЛ = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОбразованияФЛ");
	ЗапросВТ = ЗапросВТОбразованияФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТОбразованияФЛ);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Если ВидыОбразований.Получить("СведенияОбОбразовании") <> Неопределено Тогда
		
		ИмяВТОбразованияПервые 						= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОбразованияПервые");
		ИмяВТОбразование1ПриоритетВидаОбразования 	= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОбразование1ПриоритетВидаОбразования");
		ИмяВТОбразование1ПриоритетГОдаОкончания 	= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОбразование1ПриоритетГОдаОкончания");
		ИмяВТОбразование1ПриоритетНомераСтроки 		= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОбразование1ПриоритетНомераСтроки");
		ИмяВТОбразованиеПервое 						= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ИмяВТОбразованиеПервое");
		ИмяВТОбразованияВторые 						= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОбразованияВторые");
		ИмяВТОбразование2ПриоритетВидаОбразования 	= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОбразование2ПриоритетВидаОбразования");
		ИмяВТОбразование2ПриоритетГОдаОкончания 	= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОбразование2ПриоритетГОдаОкончания");
		ИмяВТОбразование2ПриоритетНомераСтроки 		= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОбразование2ПриоритетНомераСтроки");
		ИмяВТОбразованиеВторое 						= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ИмяВТОбразованиеВторое");
		
		ТекстЗапросаСведений = 
			"ВЫБРАТЬ
			|	ОбразованияФЛ.Ссылка,
			|	ОбразованияФЛ.ФизическоеЛицо,
			|	ОбразованияФЛ.ОсновноеОбразование,
			|	ВЫРАЗИТЬ(ОбразованияФЛ.ВидОбразования КАК Справочник.ВидыОбразованияФизическихЛиц) КАК ВидОбразования,
			|	ОбразованияФЛ.ВидПослевузовскогоОбразования,
			|	ОбразованияФЛ.ВидДополнительногоОбучения,
			|	ОбразованияФЛ.УчебноеЗаведение,
			|	ОбразованияФЛ.Начало,
			|	ОбразованияФЛ.Окончание,
			|	ОбразованияФЛ.Специальность,
			|	ОбразованияФЛ.Квалификация,
			|	ОбразованияФЛ.НаименованиеКурса,
			|	ОбразованияФЛ.КоличествоЧасов,
			|	ОбразованияФЛ.ВидДокумента,
			|	ОбразованияФЛ.Серия,
			|	ОбразованияФЛ.Номер,
			|	ОбразованияФЛ.ДатаВыдачи
			|ПОМЕСТИТЬ ВТОбразованияПервые
			|ИЗ
			|	ВТОбразованияФЛ КАК ОбразованияФЛ
			|ГДЕ
			|	ОбразованияФЛ.ОсновноеОбразование
			|	И ОбразованияФЛ.ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееПолноеОбщееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.НачальноеПрофессиональноеОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееПрофессиональноеОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.НеполноеВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ОсновноеОбщееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееОбщееОбразование))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования,
			|	МАКСИМУМ(Образования.ВидОбразования.Код) КАК КодВидаОбразования
			|ПОМЕСТИТЬ ВТОбразование1ПриоритетКодаВидаОбразования
			|ИЗ
			|	ВТОбразованияПервые КАК Образования
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	МАКСИМУМ(Образования.ВидОбразования) КАК ВидОбразования,
			|	Образования.КодВидаОбразования
			|ПОМЕСТИТЬ ВТОбразование1ПриоритетВидаОбразования
			|ИЗ
			|	ВТОбразование1ПриоритетКодаВидаОбразования КАК Образования
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо,
			|	Образования.КодВидаОбразования
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования КАК ВидОбразования,
			|	МАКСИМУМ(Образования.Окончание) КАК Окончание
			|ПОМЕСТИТЬ ВТОбразование1ПриоритетГОдаОкончания
			|ИЗ
			|	ВТОбразованияПервые КАК Образования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетВидаОбразования КАК Образование1ПриоритетВидаОбразования
			|		ПО Образования.ФизическоеЛицо = Образование1ПриоритетВидаОбразования.ФизическоеЛицо
			|			И Образования.ВидОбразования = Образование1ПриоритетВидаОбразования.ВидОбразования
			|			И Образования.ВидОбразования.Код = Образование1ПриоритетВидаОбразования.КодВидаОбразования
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования,
			|	Образования.Окончание,
			|	МИНИМУМ(Образования.Ссылка) КАК Ссылка
			|ПОМЕСТИТЬ ВТОбразование1ПриоритетНомераСтроки
			|ИЗ
			|	ВТОбразованияПервые КАК Образования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетГОдаОкончания КАК Образование1ПриоритетГОдаОкончания
			|		ПО Образования.ФизическоеЛицо = Образование1ПриоритетГОдаОкончания.ФизическоеЛицо
			|			И Образования.ВидОбразования = Образование1ПриоритетГОдаОкончания.ВидОбразования
			|			И Образования.Окончание = Образование1ПриоритетГОдаОкончания.Окончание
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования,
			|	Образования.Окончание
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	Образования.ОсновноеОбразование КАК Образование1ОсновноеОбразование,
			|	ВЫРАЗИТЬ(Образования.ВидОбразования КАК Справочник.ВидыОбразованияФизическихЛиц) КАК Образование1ВидОбразования,
			|	Образования.ВидПослевузовскогоОбразования КАК Образование1ВидПослевузовскогоОбразования,
			|	Образования.ВидДополнительногоОбучения КАК Образование1ВидДополнительногоОбучения,
			|	Образования.УчебноеЗаведение КАК Образование1УчебноеЗаведение,
			|	Образования.Начало КАК Образование1Начало,
			|	Образования.Окончание КАК Образование1Окончание,
			|	Образования.Специальность КАК Образование1Специальность,
			|	Образования.Квалификация КАК Образование1Квалификация,
			|	Образования.НаименованиеКурса КАК Образование1НаименованиеКурса,
			|	Образования.КоличествоЧасов КАК Образование1КоличествоЧасов,
			|	Образования.ВидДокумента КАК Образование1ВидДокумента,
			|	Образования.Серия КАК Образование1Серия,
			|	Образования.Номер КАК Образование1Номер,
			|	Образования.ДатаВыдачи КАК Образование1ДатаВыдачи
			|ПОМЕСТИТЬ ВТОбразованиеПервое
			|ИЗ
			|	ВТОбразованияПервые КАК Образования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетНомераСтроки КАК Образование1ПриоритетНомераСтроки
			|		ПО Образования.ФизическоеЛицо = Образование1ПриоритетНомераСтроки.ФизическоеЛицо
			|			И Образования.ВидОбразования = Образование1ПриоритетНомераСтроки.ВидОбразования
			|			И Образования.Окончание = Образование1ПриоритетНомераСтроки.Окончание
			|			И Образования.Ссылка = Образование1ПриоритетНомераСтроки.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	Образования.ОсновноеОбразование,
			|	ВЫРАЗИТЬ(Образования.ВидОбразования КАК Справочник.ВидыОбразованияФизическихЛиц) КАК ВидОбразования,
			|	Образования.ВидПослевузовскогоОбразования,
			|	Образования.ВидДополнительногоОбучения,
			|	Образования.УчебноеЗаведение,
			|	Образования.Начало,
			|	Образования.Окончание,
			|	Образования.Специальность,
			|	Образования.Квалификация,
			|	Образования.НаименованиеКурса,
			|	Образования.КоличествоЧасов,
			|	Образования.ВидДокумента,
			|	Образования.Серия,
			|	Образования.Номер,
			|	Образования.ДатаВыдачи
			|ПОМЕСТИТЬ ВТОбразованияВторые
			|ИЗ
			|	ВТОбразованияПервые КАК Образования
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетНомераСтроки КАК Образование1ПриоритетНомераСтроки
			|		ПО Образования.ФизическоеЛицо = Образование1ПриоритетНомераСтроки.ФизическоеЛицо
			|			И Образования.Ссылка = Образование1ПриоритетНомераСтроки.Ссылка
			|ГДЕ
			|	Образование1ПриоритетНомераСтроки.Ссылка ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования,
			|	МАКСИМУМ(Образования.ВидОбразования.Код) КАК КодВидаОбразования
			|ПОМЕСТИТЬ ВТОбразование2ПриоритетКодаВидаОбразования
			|ИЗ
			|	ВТОбразованияВторые КАК Образования
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	МАКСИМУМ(Образования.ВидОбразования) КАК ВидОбразования,
			|	Образования.КодВидаОбразования
			|ПОМЕСТИТЬ ВТОбразование2ПриоритетВидаОбразования
			|ИЗ
			|	ВТОбразование2ПриоритетКодаВидаОбразования КАК Образования
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо,
			|	Образования.КодВидаОбразования
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования КАК ВидОбразования,
			|	МАКСИМУМ(Образования.Окончание) КАК Окончание
			|ПОМЕСТИТЬ ВТОбразование2ПриоритетГОдаОкончания
			|ИЗ
			|	ВТОбразованияВторые КАК Образования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование2ПриоритетВидаОбразования КАК Образование2ПриоритетВидаОбразования
			|		ПО Образования.ФизическоеЛицо = Образование2ПриоритетВидаОбразования.ФизическоеЛицо
			|			И Образования.ВидОбразования = Образование2ПриоритетВидаОбразования.ВидОбразования
			|			И Образования.ВидОбразования.Код = Образование2ПриоритетВидаОбразования.КодВидаОбразования
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования,
			|	Образования.Окончание,
			|	МИНИМУМ(Образования.УчебноеЗаведение) КАК УчебноеЗаведение
			|ПОМЕСТИТЬ ВТОбразование2ПриоритетНомераСтроки
			|ИЗ
			|	ВТОбразованияВторые КАК Образования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование2ПриоритетГОдаОкончания КАК Образование2ПриоритетГОдаОкончания
			|		ПО Образования.ФизическоеЛицо = Образование2ПриоритетГОдаОкончания.ФизическоеЛицо
			|			И Образования.ВидОбразования = Образование2ПриоритетГОдаОкончания.ВидОбразования
			|			И Образования.Окончание = Образование2ПриоритетГОдаОкончания.Окончание
			|
			|СГРУППИРОВАТЬ ПО
			|	Образования.ФизическоеЛицо,
			|	Образования.ВидОбразования,
			|	Образования.Окончание
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Образования.ФизическоеЛицо,
			|	Образования.ОсновноеОбразование КАК Образование2ОсновноеОбразование,
			|	ВЫРАЗИТЬ(Образования.ВидОбразования КАК Справочник.ВидыОбразованияФизическихЛиц) КАК Образование2ВидОбразования,
			|	Образования.ВидПослевузовскогоОбразования КАК Образование2ВидПослевузовскогоОбразования,
			|	Образования.ВидДополнительногоОбучения КАК Образование2ВидДополнительногоОбучения,
			|	Образования.УчебноеЗаведение КАК Образование2УчебноеЗаведение,
			|	Образования.Начало КАК Образование2Начало,
			|	Образования.Окончание КАК Образование2Окончание,
			|	Образования.Специальность КАК Образование2Специальность,
			|	Образования.Квалификация КАК Образование2Квалификация,
			|	Образования.НаименованиеКурса КАК Образование2НаименованиеКурса,
			|	Образования.КоличествоЧасов КАК Образование2КоличествоЧасов,
			|	Образования.ВидДокумента КАК Образование2ВидДокумента,
			|	Образования.Серия КАК Образование2Серия,
			|	Образования.Номер КАК Образование2Номер,
			|	Образования.ДатаВыдачи КАК Образование2ДатаВыдачи
			|ПОМЕСТИТЬ ВТОбразованиеВторое
			|ИЗ
			|	ВТОбразованияВторые КАК Образования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование2ПриоритетНомераСтроки КАК Образование2ПриоритетНомераСтроки
			|		ПО Образования.ФизическоеЛицо = Образование2ПриоритетНомераСтроки.ФизическоеЛицо
			|			И Образования.ВидОбразования = Образование2ПриоритетНомераСтроки.ВидОбразования
			|			И Образования.Окончание = Образование2ПриоритетНомераСтроки.Окончание
			|			И Образования.УчебноеЗаведение = Образование2ПриоритетНомераСтроки.УчебноеЗаведение";
		
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразованияПервые", 					ИмяВТОбразованияПервые);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразование1ПриоритетВидаОбразования", 	ИмяВТОбразование1ПриоритетВидаОбразования);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразование1ПриоритетГОдаОкончания", 	ИмяВТОбразование1ПриоритетГОдаОкончания);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразование1ПриоритетНомераСтроки", 	ИмяВТОбразование1ПриоритетНомераСтроки);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразованиеПервое", 					ИмяВТОбразованиеПервое);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразованияВторые", 					ИмяВТОбразованияВторые);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразование2ПриоритетВидаОбразования", 	ИмяВТОбразование2ПриоритетВидаОбразования);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразование2ПриоритетГОдаОкончания", 	ИмяВТОбразование2ПриоритетГОдаОкончания);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразование2ПриоритетНомераСтроки", 	ИмяВТОбразование2ПриоритетНомераСтроки);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразованиеВторое", 					ИмяВТОбразованиеВторое);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразованияФЛ", 						ИмяВТОбразованияФЛ);
		
		ЗапросВТ.Текст =
			ЗапросВТ.Текст
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ ТекстЗапросаСведений;
		
		Запрос.Текст = Запрос.Текст + "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТОбразованиеПервое + " КАК Образование1
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Образование1.ФизическоеЛицо}
			|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТОбразованиеВторое + " КАК Образование2
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Образование2.ФизическоеЛицо}";
		
	КонецЕсли;
	
	Если ВидыОбразований.Получить("СведенияОВысшемОбразовании") <> Неопределено Тогда
		
		ИмяВТВысшиеОбразованияФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТВысшиеОбразованияФизическихЛиц");
		ИмяВТВысшееОбразование = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТВысшееОбразование");
		
		ТекстЗапросаСведений = 
			"ВЫБРАТЬ
			|	ОбразованиеФЛ.ФизическоеЛицо,
			|	ОбразованиеФЛ.УчебноеЗаведение,
			|	ОбразованиеФЛ.Специальность,
			|	ОбразованиеФЛ.Начало,
			|	ОбразованиеФЛ.Окончание,
			|	ОбразованиеФЛ.ВидДокумента,
			|	ОбразованиеФЛ.Серия,
			|	ОбразованиеФЛ.Номер,
			|	ОбразованиеФЛ.ДатаВыдачи,
			|	ОбразованиеФЛ.Квалификация,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбразованиеФЛПредыдущие.Окончание) КАК ПорядокПолучения
			|ПОМЕСТИТЬ ВТВысшиеОбразованияФЛ
			|ИЗ
			|	ВТОбразованияФЛ КАК ОбразованиеФЛ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбразованияФЛ КАК ОбразованиеФЛПредыдущие
			|		ПО ОбразованиеФЛ.ФизическоеЛицо = ОбразованиеФЛПредыдущие.ФизическоеЛицо
			|			И ОбразованиеФЛ.ВидОбразования = ОбразованиеФЛПредыдущие.ВидОбразования
			|			И (ОбразованиеФЛ.Окончание > ОбразованиеФЛПредыдущие.Окончание
			|				ИЛИ ОбразованиеФЛ.УчебноеЗаведение < ОбразованиеФЛПредыдущие.УчебноеЗаведение)
			|ГДЕ
			|	ОбразованиеФЛ.ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура))
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбразованиеФЛ.ФизическоеЛицо,
			|	ОбразованиеФЛ.УчебноеЗаведение,
			|	ОбразованиеФЛ.Специальность,
			|	ОбразованиеФЛ.Начало,
			|	ОбразованиеФЛ.Окончание,
			|	ОбразованиеФЛ.ВидДокумента,
			|	ОбразованиеФЛ.Серия,
			|	ОбразованиеФЛ.Номер,
			|	ОбразованиеФЛ.ДатаВыдачи,
			|	ОбразованиеФЛ.Квалификация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВысшиеОбразованияФЛ.ФизическоеЛицо,
			|	ВысшиеОбразованияФЛ.УчебноеЗаведение КАК ВысшееОбразованиеУчебноеЗаведение,
			|	ВысшиеОбразованияФЛ.Специальность КАК ВысшееОбразованиеСпециальность,
			|	ВысшиеОбразованияФЛ.Начало КАК ВысшееОбразованиеНачало,
			|	ВысшиеОбразованияФЛ.Окончание КАК ВысшееОбразованиеОкончание,
			|	ВысшиеОбразованияФЛ.ВидДокумента КАК ВысшееОбразованиеВидДокумента,
			|	ВысшиеОбразованияФЛ.Серия КАК ВысшееОбразованиеСерия,
			|	ВысшиеОбразованияФЛ.Номер КАК ВысшееОбразованиеНомер,
			|	ВысшиеОбразованияФЛ.ДатаВыдачи КАК ВысшееОбразованиеДатаВыдачи,
			|	ВысшиеОбразованияФЛ.Квалификация КАК ВысшееОбразованиеКвалификация
			|ПОМЕСТИТЬ ВТВысшееОбразование
			|ИЗ
			|	ВТВысшиеОбразованияФЛ КАК ВысшиеОбразованияФЛ
			|ГДЕ
			|	ВысшиеОбразованияФЛ.ПорядокПолучения = 0";
		
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТВысшиеОбразованияФЛ", ИмяВТВысшиеОбразованияФизическихЛиц);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТВысшееОбразование", ИмяВТВысшееОбразование);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразованияФЛ", ИмяВТОбразованияФЛ);
		
		ЗапросВТ.Текст =
			ЗапросВТ.Текст
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ ТекстЗапросаСведений;
	
		Запрос.Текст = Запрос.Текст + "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТВысшееОбразование + " КАК ВысшееОбразование
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ВысшееОбразование.ФизическоеЛицо}";
		
	КонецЕсли;
	
	Если ВидыОбразований.Получить("СведенияОПослевузовскомОбразовании") <> Неопределено Тогда
		
		ИмяВТПериодыПослевузовскогоОбразования = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПериодыПослевузовскогоОбразования");
		ИмяВТНомераСтрокПослевузовскогоОбразования = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТНомераСтрокПослевузовскогоОбразования");
		ИмяВТПослевузовскоеОбразование = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПослевузовскоеОбразование");
		
		ТекстЗапросаСведений = 
			"ВЫБРАТЬ
			|	ОбразованиеФЛ.ФизическоеЛицо,
			|	МАКСИМУМ(ОбразованиеФЛ.Окончание) КАК Окончание
			|ПОМЕСТИТЬ ВТПериодыПослевузовскогоОбразования
			|ИЗ
			|	ВТОбразованиеФЛ КАК ОбразованиеФЛ
			|ГДЕ
			|	ОбразованиеФЛ.ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеПодготовкаКадровВысшейКвалификации), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПослевузовскоеОбразование))
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбразованиеФЛ.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбразованиеФЛ.ФизическоеЛицо,
			|	ОбразованиеФЛ.Окончание,
			|	МАКСИМУМ(ОбразованиеФЛ.Ссылка) КАК Ссылка
			|ПОМЕСТИТЬ ВТНомераСтрокПослевузовскогоОбразования
			|ИЗ
			|	ВТОбразованиеФЛ КАК ОбразованиеФЛ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыПослевузовскогоОбразования КАК ПериодыПослевузовскогоОбразования
			|		ПО ОбразованиеФЛ.ФизическоеЛицо = ПериодыПослевузовскогоОбразования.ФизическоеЛицо
			|			И ОбразованиеФЛ.Окончание = ПериодыПослевузовскогоОбразования.Окончание
			|			И (ОбразованиеФЛ.ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеПодготовкаКадровВысшейКвалификации), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПослевузовскоеОбразование)))
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбразованиеФЛ.ФизическоеЛицо,
			|	ОбразованиеФЛ.Окончание
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбразованиеФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ОбразованиеФЛ.ВидОбразования КАК ПослевузовскоеОбразованиеВидОбразования,
			|	ОбразованиеФЛ.ВидПослевузовскогоОбразования КАК ПослевузовскоеОбразованиеВидПослевузовскогоОбразования,
			|	ОбразованиеФЛ.УчебноеЗаведение КАК ПослевузовскоеОбразованиеУчебноеЗаведение,
			|	ОбразованиеФЛ.Специальность КАК ПослевузовскоеОбразованиеСпециальность,
			|	ОбразованиеФЛ.ВидДокумента КАК ПослевузовскоеОбразованиеВидДокумента,
			|	ОбразованиеФЛ.Начало КАК ПослевузовскоеОбразованиеНачало,
			|	ОбразованиеФЛ.Окончание КАК ПослевузовскоеОбразованиеОкончание,
			|	ОбразованиеФЛ.Серия КАК ПослевузовскоеОбразованиеСерия,
			|	ОбразованиеФЛ.Номер КАК ПослевузовскоеОбразованиеНомер,
			|	ОбразованиеФЛ.ДатаВыдачи КАК ПослевузовскоеОбразованиеДатаВыдачи,
			|	ОбразованиеФЛ.Квалификация КАК ПослевузовскоеОбразованиеКвалификация
			|ПОМЕСТИТЬ ВТПослевузовскоеОбразование
			|ИЗ
			|	ВТОбразованиеФЛ КАК ОбразованиеФЛ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНомераСтрокПослевузовскогоОбразования КАК НомераСтрокПослевузовскогоОбразования
			|		ПО ОбразованиеФЛ.ФизическоеЛицо = НомераСтрокПослевузовскогоОбразования.ФизическоеЛицо
			|			И ОбразованиеФЛ.Окончание = НомераСтрокПослевузовскогоОбразования.Окончание
			|			И ОбразованиеФЛ.Ссылка = НомераСтрокПослевузовскогоОбразования.Ссылка";
		
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПериодыПослевузовскогоОбразования", ИмяВТПериодыПослевузовскогоОбразования);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТНомераСтрокПослевузовскогоОбразования", ИмяВТНомераСтрокПослевузовскогоОбразования);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПослевузовскоеОбразование", ИмяВТПослевузовскоеОбразование);
		ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразованиеФЛ", ИмяВТОбразованияФЛ);
		
		ЗапросВТ.Текст =
			ЗапросВТ.Текст
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ ТекстЗапросаСведений;
		
		Запрос.Текст = Запрос.Текст + "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПослевузовскоеОбразование + " КАК ПослевузовскоеОбразование
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ПослевузовскоеОбразование.ФизическоеЛицо}";
		
	КонецЕсли;
	
	Запрос.Текст =
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
	
КонецПроцедуры

Функция НеобходимыСведенияОбОбразованияхФизическихЛиц(Знач ИмяПоля)
	
	Возврат НеобходимыСведенияОбОбразованииФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОВысшемОбразованииФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОПослевузовскомОбразованииФизическихЛиц(ИмяПоля);
		
КонецФункции

Функция НеобходимыСведенияОбОбразованииФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("Образование1УчебноеЗаведение")
		Или ИмяПоля = ВРег("Образование1ВидОбразования")
		Или ИмяПоля = ВРег("Образование1Специальность")
		Или ИмяПоля = ВРег("Образование1Начало")
		Или ИмяПоля = ВРег("Образование1Окончание")
		Или ИмяПоля = ВРег("Образование1ВидДокумента")
		Или ИмяПоля = ВРег("Образование1Серия")
		Или ИмяПоля = ВРег("Образование1Номер")
		Или ИмяПоля = ВРег("Образование1ДатаВыдачи")
		Или ИмяПоля = ВРег("Образование1Квалификация")
		Или ИмяПоля = ВРег("Образование2УчебноеЗаведение")
		Или ИмяПоля = ВРег("Образование2ВидОбразования")
		Или ИмяПоля = ВРег("Образование2Специальность")
		Или ИмяПоля = ВРег("Образование2Начало")
		Или ИмяПоля = ВРег("Образование2Окончание")
		Или ИмяПоля = ВРег("Образование2ВидДокумента")
		Или ИмяПоля = ВРег("Образование2Серия")
		Или ИмяПоля = ВРег("Образование2Номер")
		Или ИмяПоля = ВРег("Образование2ДатаВыдачи")
		Или ИмяПоля = ВРег("Образование2Квалификация");
		
КонецФункции
	
Функция НеобходимыСведенияОВысшемОбразованииФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВысшееОбразованиеУчебноеЗаведение")
		Или ИмяПоля = ВРег("ВысшееОбразованиеСпециальность")
		Или ИмяПоля = ВРег("ВысшееОбразованиеНачало")
		Или ИмяПоля = ВРег("ВысшееОбразованиеОкончание")
		Или ИмяПоля = ВРег("ВысшееОбразованиеВидДокумента")
		Или ИмяПоля = ВРег("ВысшееОбразованиеСерия")
		Или ИмяПоля = ВРег("ВысшееОбразованиеНомер")
		Или ИмяПоля = ВРег("ВысшееОбразованиеДатаВыдачи")
		Или ИмяПоля = ВРег("ВысшееОбразованиеКвалификация");
		
КонецФункции

Функция НеобходимыСведенияОПослевузовскомОбразованииФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПослевузовскоеОбразованиеУчебноеЗаведение")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеВидОбразования")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеВидПослевузовскогоОбразования")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеСпециальность")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеНачало")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеОкончание")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеВидДокумента")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеСерия")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеНомер")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеДатаВыдачи")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеКвалификация");
		
	КонецФункции
	
Функция ДобавитьКритерийПоискаПоСведениямОбОбразованииФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	НеобходимыСведенияОбОбразовании = ИмяПоля = Врег("ОсновноеОбразование")
		Или ИмяПоля = Врег("ВидОбразования")
		Или ИмяПоля = Врег("ВидПослевузовскогоОбразования")
		Или ИмяПоля = Врег("УчебноеЗаведение")
		Или ИмяПоля = Врег("Специальность")
		Или ИмяПоля = Врег("ВидДокумента")
		Или ИмяПоля = Врег("Серия")
		Или ИмяПоля = Врег("Номер")
		Или ИмяПоля = Врег("ДатаВыдачи")
		Или ИмяПоля = Врег("Квалификация")
		Или ИмяПоля = Врег("Начало")
		Или ИмяПоля = Врег("Окончание")
		Или ИмяПоля = Врег("НаименованиеКурса")
		Или ИмяПоля = Врег("КоличествоЧасов")
		Или ИмяПоля = Врег("ВидДополнительногоОбучения")
		Или ИмяПоля = Врег("ДокументОснование");
		
	Если НеобходимыСведенияОбОбразовании Тогда
		
		Если УсловиеПоиска.ОтносительныйПуть
			И ИмяПоля = Врег("ВидОбразования")
			И ТипЗнч(УсловиеПоиска.ПравоеЗначение) = Тип("СправочникСсылка.ВидыОбразованияФизическихЛиц") Тогда
			
			УсловиеВидаСравнения = СокрЛП(УсловиеПоиска.ВидСравнения);
			Если УсловиеВидаСравнения = "<"
				Или УсловиеВидаСравнения = "<="
				Или УсловиеВидаСравнения = ">"
				Или УсловиеВидаСравнения = ">=" Тогда
				
				ВидыОбразованийПоВажности = Новый Массив;
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ОсновноеОбщееОбразование);
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.НачальноеПрофессиональноеОбразование);
				
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.СреднееОбщееОбразование);
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.СреднееПолноеОбщееОбразование);
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.СреднееПрофессиональноеОбразование);
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.НеполноеВысшееОбразование);
				
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразование);
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат);
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура);
				
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеПодготовкаКадровВысшейКвалификации);
				ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ПослевузовскоеОбразование);
				
				ИндексТекущегоВида = ВидыОбразованийПоВажности.Найти(УсловиеПоиска.ПравоеЗначение);
				Если ИндексТекущегоВида <> Неопределено Тогда
					
					Если ИндексТекущегоВида = 0 И УсловиеВидаСравнения = ">=" Тогда
						ПравоеЗначение = ВидыОбразованийПоВажности;
					ИначеЕсли ИндексТекущегоВида = 0 И УсловиеВидаСравнения = "<" Тогда
						ПравоеЗначение = Новый Массив;
					ИначеЕсли ИндексТекущегоВида = ВидыОбразованийПоВажности.Количество() - 1 И УсловиеВидаСравнения = "<=" Тогда
						ПравоеЗначение = ВидыОбразованийПоВажности;
					ИначеЕсли ИндексТекущегоВида = ВидыОбразованийПоВажности.Количество() - 1 И УсловиеВидаСравнения = ">" Тогда
						ПравоеЗначение = Новый Массив;
					Иначе
						
						ПравоеЗначение = Новый Массив;
						
						Если УсловиеВидаСравнения = ">" Тогда
							НачальноеЗначение = ИндексТекущегоВида + 1;
						ИначеЕсли УсловиеВидаСравнения = ">=" Тогда
							НачальноеЗначение = ИндексТекущегоВида;
						Иначе
							НачальноеЗначение = 0;
						КонецЕсли; 
						
						Если УсловиеВидаСравнения = "<" Тогда
							КонечноеЗначение = ИндексТекущегоВида - 1;
						ИначеЕсли УсловиеВидаСравнения = "<=" Тогда
							КонечноеЗначение = ИндексТекущегоВида;
						Иначе
							КонечноеЗначение = ВидыОбразованийПоВажности.Количество() - 1;
						КонецЕсли;
						
						Для ИндексЭлемента = НачальноеЗначение По КонечноеЗначение Цикл
							ПравоеЗначение.Добавить(ВидыОбразованийПоВажности.Получить(ИндексЭлемента));
						КонецЦикла;
						
					КонецЕсли;
					
					УсловиеПоиска.ПравоеЗначение = ПравоеЗначение;
					УсловиеПоиска.ВидСравнения = "В";
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "Справочник.ОбразованиеФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции
	
Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхОбОбразовании(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	ПутьКДанным = "";
	
	Если СтрНайти(ИмяПоляВВерхнемРегистре, ВРег("Образование1")) > 0 Тогда
		ПутьКДанным = "Образование1." + ИмяПоля;
	ИначеЕсли СтрНайти(ИмяПоляВВерхнемРегистре, ВРег("Образование2")) > 0 Тогда
		ПутьКДанным = "Образование2." + ИмяПоля;
	ИначеЕсли СтрНайти(ИмяПоляВВерхнемРегистре, ВРег("ВысшееОбразование")) > 0 Тогда
		ПутьКДанным = "ВысшееОбразование." + ИмяПоля;
	ИначеЕсли СтрНайти(ИмяПоляВВерхнемРегистре, ВРег("ПослевузовскоеОбразование")) > 0 Тогда
		ПутьКДанным = "ПослевузовскоеОбразование." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции
	
// Сведения об ученых степенях.

Функция ДобавитьПолеСведенийОбУченыхСтепеняхФизическихЛиц(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбУченыхСтепеняхФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбУченыхСтепеняхФизическихЛиц", Истина);
		
		ПутьКДанным = "	УченыеСтепени." + ИмяПоля;
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбУченыхСтепеняхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОбУченыхСтепеняхФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТУченыеСтепени = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТУченыеСтепени");
	ИмяВТМаксимальныеДатыПрисужденияУченыхСтепеней = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТМаксимальныеДатыПрисужденияУченыхСтепеней");
	ИмяВТНомераСтрокУченыхСтепеней = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТНомераСтрокУченыхСтепеней");
	ИмяВТПредварительноУченыеСтепени = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПредварительноУченыеСтепени");
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛицаУченыеСтепени.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени) КАК ДатаПрисужденияУченойСтепени
		|ПОМЕСТИТЬ ВТМаксимальныеДатыПрисужденияУченыхСтепеней
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеСтепениФизическихЛиц КАК ФизическиеЛицаУченыеСтепени
		|		ПО ТаблицаОтборовФизическихЛиц.ФизическоеЛицо = ФизическиеЛицаУченыеСтепени.ФизическоеЛицо
		|{ГДЕ
		|	ФизическиеЛицаУченыеСтепени.ФизическоеЛицо.* КАК ФизическоеЛицо}
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛицаУченыеСтепени.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаксимальныеДатыПрисужденияУченыхСтепеней.ФизическоеЛицо,
		|	МАКСИМУМ(ФизическиеЛицаУченыеСтепени.НомерПоПорядку) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТНомераСтрокУченыхСтепеней
		|ИЗ
		|	ВТМаксимальныеДатыПрисужденияУченыхСтепеней КАК МаксимальныеДатыПрисужденияУченыхСтепеней
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеСтепениФизическихЛиц КАК ФизическиеЛицаУченыеСтепени
		|		ПО МаксимальныеДатыПрисужденияУченыхСтепеней.ФизическоеЛицо = ФизическиеЛицаУченыеСтепени.ФизическоеЛицо
		|			И МаксимальныеДатыПрисужденияУченыхСтепеней.ДатаПрисужденияУченойСтепени = ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени
		|
		|СГРУППИРОВАТЬ ПО
		|	МаксимальныеДатыПрисужденияУченыхСтепеней.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НомераСтрокУченыхСтепеней.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛицаУченыеСтепени.УченаяСтепень КАК УченаяСтепень,
		|	ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени КАК УченаяСтепеньДатаПрисуждения,
		|	ФизическиеЛицаУченыеСтепени.ОтрасльНауки КАК УченаяСтепеньОтрасльНауки,
		|	ФизическиеЛицаУченыеСтепени.ДиссертационныйСовет КАК УченаяСтепеньДиссертационныйСовет,
		|	ФизическиеЛицаУченыеСтепени.ДипломСерияНомер КАК УченаяСтепеньДипломСерияНомер,
		|	ФизическиеЛицаУченыеСтепени.ДипломВыданОрганизация КАК УченаяСтепеньОрганизация
		|ПОМЕСТИТЬ ВТПредварительноУченыеСтепени
		|ИЗ
		|	ВТНомераСтрокУченыхСтепеней КАК НомераСтрокУченыхСтепеней
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеСтепениФизическихЛиц КАК ФизическиеЛицаУченыеСтепени
		|		ПО (ФизическиеЛицаУченыеСтепени.ФизическоеЛицо = НомераСтрокУченыхСтепеней.ФизическоеЛицо)
		|			И (ФизическиеЛицаУченыеСтепени.НомерПоПорядку = НомераСтрокУченыхСтепеней.НомерСтроки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УченыеСтепени.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УченыеСтепени.УченаяСтепень КАК УченаяСтепень,
		|	УченыеСтепени.УченаяСтепеньДатаПрисуждения КАК УченаяСтепеньДатаПрисуждения,
		|	УченыеСтепени.УченаяСтепеньОтрасльНауки КАК УченаяСтепеньОтрасльНауки,
		|	УченыеСтепени.УченаяСтепеньДиссертационныйСовет КАК УченаяСтепеньДиссертационныйСовет,
		|	УченыеСтепени.УченаяСтепеньДипломСерияНомер КАК УченаяСтепеньДипломСерияНомер,
		|	УченыеСтепени.УченаяСтепеньОрганизация КАК УченаяСтепеньОрганизация
		|ПОМЕСТИТЬ ВТУченыеСтепени
		|ИЗ
		|	ВТПредварительноУченыеСтепени КАК УченыеСтепени";
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТУченыеСтепени", ИмяВТУченыеСтепени);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТМаксимальныеДатыПрисужденияУченыхСтепеней", ИмяВТМаксимальныеДатыПрисужденияУченыхСтепеней);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТНомераСтрокУченыхСтепеней", ИмяВТНомераСтрокУченыхСтепеней);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПредварительноУченыеСтепени", ИмяВТПредварительноУченыеСтепени);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	Запрос.Текст =
		ТекстЗапросаСведений
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
		Запрос.Текст = Запрос.Текст + "
		|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТУченыеСтепени + " КАК УченыеСтепени
		|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = УченыеСтепени.ФизическоеЛицо}";
		
КонецПроцедуры

Функция НеобходимыСведенияОбУченыхСтепеняхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("УченаяСтепень")
		Или ИмяПоля = ВРег("УченаяСтепеньОтрасльНауки")
		Или ИмяПоля = ВРег("УченаяСтепеньДатаПрисуждения")
		Или ИмяПоля = ВРег("УченаяСтепеньДиссертационныйСовет")
		Или ИмяПоля = ВРег("УченаяСтепеньДипломСерияНомер")
		Или ИмяПоля = ВРег("УченаяСтепеньОрганизация");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОбУченыхСтепеняхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОбУченыхСтепеняхФизическихЛиц(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("УченаяСтепеньОтрасльНауки") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ОтрасльНауки";
		ИначеЕсли ИмяПоля = ВРег("УченаяСтепеньДатаПрисуждения") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДатаПрисужденияУченойСтепени";
		ИначеЕсли ИмяПоля = ВРег("УченаяСтепеньДиссертационныйСовет") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДиссертационныйСовет";
		ИначеЕсли ИмяПоля = ВРег("УченаяСтепеньДипломСерияНомер") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДипломСерияНомер";
		ИначеЕсли ИмяПоля = ВРег("УченаяСтепеньОрганизация") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДипломВыданОрганизация";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.УченыеСтепениФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

// Сведения об ученых званиях

Функция ДобавитьПолеСведенийОбУченыхЗванияхФизическихЛиц(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбУченыхЗванияхФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбУченыхЗванияхФизическихЛиц", Истина);
		
		ПутьКДанным = "	УченыеЗвания." + ИмяПоля;
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбУченыхЗванияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОбУченыхЗванияхФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТУченыеЗвания = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТУченыеЗвания");
	ИмяВТМаксимальныеДатыПрисвоенияУченогоЗвания = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТМаксимальныеДатыПрисвоенияУченогоЗвания");
	ИмяВТНомераСтрокУченыхЗваний = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТНомераСтрокУченыхЗваний");
	ИмяВТПредварительноУченыеЗвания = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПредварительноУченыеЗвания");
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛицаУченыеЗвания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания) КАК ДатаПрисвоенияУченогоЗвания
		|ПОМЕСТИТЬ ВТМаксимальныеДатыПрисвоенияУченогоЗвания
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеЗванияФизическихЛиц КАК ФизическиеЛицаУченыеЗвания
		|		ПО (ФизическиеЛицаУченыеЗвания.ФизическоеЛицо = ТаблицаОтборовФизическихЛиц.ФизическоеЛицо)
		|{ГДЕ
		|	ФизическиеЛицаУченыеЗвания.ФизическоеЛицо.* КАК ФизическоеЛицо}
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛицаУченыеЗвания.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаксимальныеДатыПрисвоенияУченогоЗвания.ФизическоеЛицо,
		|	МАКСИМУМ(ФизическиеЛицаУченыеЗвания.НомерПоПорядку) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТНомераСтрокУченыхЗваний
		|ИЗ
		|	ВТМаксимальныеДатыПрисвоенияУченогоЗвания КАК МаксимальныеДатыПрисвоенияУченогоЗвания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеЗванияФизическихЛиц КАК ФизическиеЛицаУченыеЗвания
		|		ПО МаксимальныеДатыПрисвоенияУченогоЗвания.ФизическоеЛицо = ФизическиеЛицаУченыеЗвания.ФизическоеЛицо
		|			И МаксимальныеДатыПрисвоенияУченогоЗвания.ДатаПрисвоенияУченогоЗвания = ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания
		|
		|СГРУППИРОВАТЬ ПО
		|	МаксимальныеДатыПрисвоенияУченогоЗвания.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НомераСтрокУченыхЗваний.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛицаУченыеЗвания.УченоеЗвание КАК УченоеЗвание,
		|	ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания КАК УченоеЗваниеДатаПрисвоения,
		|	ФизическиеЛицаУченыеЗвания.АттестатСерия КАК УченоеЗваниеАттестатСерия,
		|	ФизическиеЛицаУченыеЗвания.АттестатНомер КАК УченоеЗваниеАттестатНомер,
		|	ФизическиеЛицаУченыеЗвания.АттестатВыданОрганизация КАК УченоеЗваниеОрганизация,
		|	ФизическиеЛицаУченыеЗвания.НаучнаяСпециальность КАК УченоеЗваниеСпециальность
		|ПОМЕСТИТЬ ВТПредварительноУченыеЗвания
		|ИЗ
		|	ВТНомераСтрокУченыхЗваний КАК НомераСтрокУченыхЗваний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеЗванияФизическихЛиц КАК ФизическиеЛицаУченыеЗвания
		|		ПО (ФизическиеЛицаУченыеЗвания.ФизическоеЛицо = НомераСтрокУченыхЗваний.ФизическоеЛицо)
		|			И (ФизическиеЛицаУченыеЗвания.НомерПоПорядку = НомераСтрокУченыхЗваний.НомерСтроки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УченыеЗвания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УченыеЗвания.УченоеЗвание КАК УченоеЗвание,
		|	УченыеЗвания.УченоеЗваниеДатаПрисвоения КАК УченоеЗваниеДатаПрисвоения,
		|	УченыеЗвания.УченоеЗваниеАттестатСерия КАК УченоеЗваниеАттестатСерия,
		|	УченыеЗвания.УченоеЗваниеАттестатНомер КАК УченоеЗваниеАттестатНомер,
		|	УченыеЗвания.УченоеЗваниеОрганизация КАК УченоеЗваниеОрганизация,
		|	УченыеЗвания.УченоеЗваниеСпециальность КАК УченоеЗваниеСпециальность
		|ПОМЕСТИТЬ ВТУченыеЗвания
		|ИЗ
		|	ВТПредварительноУченыеЗвания КАК УченыеЗвания";
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТУченыеЗвания", ИмяВТУченыеЗвания);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТМаксимальныеДатыПрисвоенияУченогоЗвания", ИмяВТМаксимальныеДатыПрисвоенияУченогоЗвания);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТНомераСтрокУченыхЗваний", ИмяВТНомераСтрокУченыхЗваний);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПредварительноУченыеЗвания", ИмяВТПредварительноУченыеЗвания);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	Запрос.Текст =
		ТекстЗапросаСведений
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
		Запрос.Текст = Запрос.Текст + "
		|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТУченыеЗвания + " КАК УченыеЗвания
		|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = УченыеЗвания.ФизическоеЛицо}";
		
КонецПроцедуры
	
Функция НеобходимыСведенияОбУченыхЗванияхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("УченоеЗвание")
		Или ИмяПоля = ВРег("УченоеЗваниеАттестатСерия")
		Или ИмяПоля = ВРег("УченоеЗваниеАттестатНомер")
		Или ИмяПоля = ВРег("УченоеЗваниеДатаПрисвоения")
		Или ИмяПоля = ВРег("УченоеЗваниеОрганизация")
		Или ИмяПоля = ВРег("УченоеЗваниеСпециальность");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОбУченыхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОбУченыхЗванияхФизическихЛиц(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("УченоеЗваниеАттестатСерия") Тогда
			УсловиеПоиска.ЛевоеЗначение = "АттестатСерия";
		ИначеЕсли ИмяПоля = ВРег("УченоеЗваниеАттестатНомер") Тогда
			УсловиеПоиска.ЛевоеЗначение = "АттестатНомер";
		ИначеЕсли ИмяПоля = ВРег("УченоеЗваниеДатаПрисвоения") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДатаПрисвоенияУченогоЗвания";
		ИначеЕсли ИмяПоля = ВРег("УченоеЗваниеОрганизация") Тогда
			УсловиеПоиска.ЛевоеЗначение = "АттестатВыданОрганизация";
		ИначеЕсли ИмяПоля = ВРег("УченоеЗваниеСпециальность") Тогда
			УсловиеПоиска.ЛевоеЗначение = "НаучнаяСпециальность";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.УченыеЗванияФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

// Сведения о почетных званиях.

Функция ДобавитьПолеСведенийОПочетныхЗванияхФизическихЛиц(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПочетныхЗванияхФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПочетныхЗванияхФизическихЛиц", Истина);
		
		ПутьКДанным = "	ПочетныеЗванияФизическихЛиц." + ИмяПоля;
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОПочетныхЗванияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОПочетныхЗванияхФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТПочетныеЗванияФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПочетныеЗванияФизическихЛиц");
	ИмяВТМаксимальныеДатыПрисвоенияПочетногоЗвания = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТМаксимальныеДатыПрисвоенияПочетногоЗвания");
	ИмяВТСсылкиПочетныхЗваний = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСсылкиПочетныхЗваний");
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НаградыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(НаградыФизическихЛиц.ДатаПриказа) КАК ДатаПриказа
		|ПОМЕСТИТЬ ВТМаксимальныеДатыПрисвоенияПочетногоЗвания
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц
		|		ПО ТаблицаОтборовФизическихЛиц.ФизическоеЛицо = НаградыФизическихЛиц.ФизическоеЛицо
		|{ГДЕ
		|	НаградыФизическихЛиц.ФизическоеЛицо.*,
		|	НаградыФизическихЛиц.Награда.*,
		|	НаградыФизическихЛиц.ДатаПриказа}
		|
		|СГРУППИРОВАТЬ ПО
		|	НаградыФизическихЛиц.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаксимальныеДатыПрисвоенияПочетногоЗвания.ФизическоеЛицо,
		|	МАКСИМУМ(НаградыФизическихЛиц.Награда) КАК Награда
		|ПОМЕСТИТЬ ВТСсылкиПочетныхЗваний
		|ИЗ
		|	ВТМаксимальныеДатыПрисвоенияПочетногоЗвания КАК МаксимальныеДатыПрисвоенияПочетногоЗвания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц
		|		ПО МаксимальныеДатыПрисвоенияПочетногоЗвания.ФизическоеЛицо = НаградыФизическихЛиц.ФизическоеЛицо
		|			И МаксимальныеДатыПрисвоенияПочетногоЗвания.ДатаПриказа = НаградыФизическихЛиц.ДатаПриказа
		|
		|СГРУППИРОВАТЬ ПО
		|	МаксимальныеДатыПрисвоенияПочетногоЗвания.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СсылкиПочетныхЗваний.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НаградыФизическихЛиц.Награда КАК ПочетноеЗвание
		|ПОМЕСТИТЬ ВТПочетныеЗванияФизическихЛиц
		|ИЗ
		|	ВТСсылкиПочетныхЗваний КАК СсылкиПочетныхЗваний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц
		|		ПО СсылкиПочетныхЗваний.ФизическоеЛицо = НаградыФизическихЛиц.ФизическоеЛицо
		|			И СсылкиПочетныхЗваний.Награда = НаградыФизическихЛиц.Награда";
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПочетныеЗванияФизическихЛиц", ИмяВТПочетныеЗванияФизическихЛиц);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТМаксимальныеДатыПрисвоенияПочетногоЗвания", ИмяВТМаксимальныеДатыПрисвоенияПочетногоЗвания);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТСсылкиПочетныхЗваний", ИмяВТСсылкиПочетныхЗваний);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	Запрос.Текст =
		ТекстЗапросаСведений
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
		Запрос.Текст = Запрос.Текст + "
		|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПочетныеЗванияФизическихЛиц + " КАК ПочетныеЗванияФизическихЛиц
		|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ПочетныеЗванияФизическихЛиц.ФизическоеЛицо}";
		
КонецПроцедуры
	
Функция НеобходимыСведенияОПочетныхЗванияхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПочетноеЗвание");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОПочетныхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОПочетныхЗванияхФизическихЛиц(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ПочетноеЗвание") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Награда";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.НаградыФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

// Сведения о стажах

Функция ДобавитьПоляСведенийОСтажахФизическихЛиц(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	НеобходимыСведенияОСтажах = Ложь;
	КатегорияСтажа = Неопределено;
	
	Если НеобходимыСведенияОбОбщемСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Общий;
		
	ИначеЕсли НеобходимыСведенияОСеверномСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Северный;
		
	ИначеЕсли НеобходимыСведенияОНепрерывномСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Непрерывный;
		
	ИначеЕсли НеобходимыСведенияОСтажеНаНадбавку(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛет;
		
	ИначеЕсли НеобходимыСведенияОбОбщемНаучноПедагогическийСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.ОбщийНаучноПедагогический;
		
	ИначеЕсли НеобходимыСведенияОПедагогическомСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Педагогический;
		
	ИначеЕсли НеобходимыСведенияОСтраховомСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Страховой;
		
	ИначеЕсли НеобходимыСведенияОРасширенномСтраховомСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.РасширенныйСтраховой;
		
	ИначеЕсли НеобходимыСведенияОПрочемСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Прочее;
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина")
			И ОбщегоНазначения.ОбщийМодуль("Медицина").НеобходимыСведенияОМедицинскомСтаже(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.Медицинский;
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОСтажеЗаВыслугуЛетНаГосударственнойСлужбе(ИмяПоля) Тогда
		
		НеобходимыСведенияОСтажах = Истина;
		КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛетНаГосударственнойСлужбе;
		
	КонецЕсли;
	
	Если НеобходимыСведенияОСтажах Тогда
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "СведенияОСтажах", КатегорияСтажа);
		
		ПутьКДанным = "	" + ПутьКДаннымСведенийОСтаже(ИмяПоля, ИмяТаблицыПоКатегорииСтажа(КатегорияСтажа));
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат НеобходимыСведенияОСтажах;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОСтажахФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	КатегорииСтажей = ИсточникиДанных.Получить("СведенияОСтажах");
	Если КатегорииСтажей = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТСтажиРезультирующая = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСтажиРезультирующая");
	
	ЗапросВТ = ЗапросВТСтажиФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, , ИмяВТСтажиРезультирующая);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	ТекстСоединения = "";
	Для каждого КатегорияСтажа Из КатегорииСтажей Цикл
		
		ИмяТаблицы = ИмяТаблицыПоКатегорииСтажа(КатегорияСтажа);
		ИмяПараметра = ИмяТаблицы + "_ПараметрЗапроса";
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + "
			|		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСтажиРезультирующая + " КАК " + ИмяТаблицы + "
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = " + ИмяТаблицы + ".ФизическоеЛицо
			|			И ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = " + ИмяТаблицы + ".Период
			|			И ВЫРАЗИТЬ(" + ИмяТаблицы + ".ВидСтажа КАК Справочник.ВидыСтажа).КатегорияСтажа = &" + ИмяПараметра + "}";
			
		Запрос.УстановитьПараметр(ИмяПараметра, КатегорияСтажа);
		
	КонецЦикла;
			
	Запрос.Текст = 
		Запрос.Текст
		+ ТекстСоединения;		
				
КонецПроцедуры
	
Функция НеобходимыСведенияОСтажахФизическихЛиц(Знач ИмяПоля)
	
	Возврат НеобходимыСведенияОбОбщемСтаже(ИмяПоля)
		Или НеобходимыСведенияОСеверномСтаже(ИмяПоля)
		Или НеобходимыСведенияОНепрерывномСтаже(ИмяПоля)
		Или НеобходимыСведенияОСтажеНаНадбавку(ИмяПоля)
		Или НеобходимыСведенияОбОбщемНаучноПедагогическийСтаже(ИмяПоля)
		Или НеобходимыСведенияОПедагогическомСтаже(ИмяПоля)
		Или НеобходимыСведенияОСтраховомСтаже(ИмяПоля)
		Или НеобходимыСведенияОРасширенномСтраховомСтаже(ИмяПоля)
		Или НеобходимыСведенияОПрочемСтаже(ИмяПоля)
		Или ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина")
			И ОбщегоНазначения.ОбщийМодуль("Медицина").НеобходимыСведенияОМедицинскомСтаже(ИмяПоля)
		Или ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОСтажеЗаВыслугуЛетНаГосударственнойСлужбе(ИмяПоля);
		
КонецФункции

Функция НеобходимыСведенияОбОбщемСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ОбщийСтажВид")
		Или ИмяПоля = ВРег("ОбщийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ОбщийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ОбщийСтажРазмерДней")
		Или ИмяПоля = ВРег("ОбщийСтажДней")
		Или	ИмяПоля = ВРег("ОбщийСтажМесяцев")
		Или	ИмяПоля = ВРег("ОбщийСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОСеверномСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СеверныйСтажВид")
		Или ИмяПоля = ВРег("СеверныйСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СеверныйСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СеверныйСтажРазмерДней")
		Или ИмяПоля = ВРег("СеверныйСтажДней")
		Или	ИмяПоля = ВРег("СеверныйСтажМесяцев")
		Или	ИмяПоля = ВРег("СеверныйСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОНепрерывномСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("НепрерывныйСтажВид")
		Или ИмяПоля = ВРег("НепрерывныйСтажПериодРегистрации")
		Или ИмяПоля = ВРег("НепрерывныйСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("НепрерывныйСтажРазмерДней")
		Или ИмяПоля = ВРег("НепрерывныйСтажДней")
		Или	ИмяПоля = ВРег("НепрерывныйСтажМесяцев")
		Или	ИмяПоля = ВРег("НепрерывныйСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОСтажеНаНадбавку(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетВид")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетПериодРегистрации")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетРазмерМесяцев")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетРазмерДней")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетДней")
		Или	ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетМесяцев")
		Или	ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетЛет");
		
КонецФункции

Функция НеобходимыСведенияОбОбщемНаучноПедагогическийСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажВид")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажРазмерДней")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажДней")
		Или	ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажМесяцев")
		Или	ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОПедагогическомСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПедагогическийСтажВид")
		Или ИмяПоля = ВРег("ПедагогическийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ПедагогическийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ПедагогическийСтажРазмерДней")
		Или ИмяПоля = ВРег("ПедагогическийСтажДней")
		Или	ИмяПоля = ВРег("ПедагогическийСтажМесяцев")
		Или	ИмяПоля = ВРег("ПедагогическийСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОСтраховомСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СтраховойСтажВид")
		Или ИмяПоля = ВРег("СтраховойСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СтраховойСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СтраховойСтажРазмерДней")
		Или ИмяПоля = ВРег("СтраховойСтажДней")
		Или	ИмяПоля = ВРег("СтраховойСтажМесяцев")
		Или	ИмяПоля = ВРег("СтраховойСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОРасширенномСтраховомСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("РасширенныйСтраховойСтажВид")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажПериодРегистрации")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажРазмерДней")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажДней")
		Или	ИмяПоля = ВРег("РасширенныйСтраховойСтажМесяцев")
		Или	ИмяПоля = ВРег("РасширенныйСтраховойСтажЛет");
		
КонецФункции

Функция НеобходимыСведенияОПрочемСтаже(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПрочийСтажВид")
		Или ИмяПоля = ВРег("ПрочийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ПрочийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ПрочийСтажРазмерДней")
		Или ИмяПоля = ВРег("ПрочийСтажДней")
		Или	ИмяПоля = ВРег("ПрочийСтажМесяцев")
		Или	ИмяПоля = ВРег("ПрочийСтажЛет");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОСтажахФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	Если НеобходимыСведенияОСтажахФизическихЛиц(ИмяПоля) Тогда
		
		ИмяКритерия = "РегистрСведений.СтажиФизическихЛиц";
		КритерийДобавлен = Истина;
		
		Если НеобходимыСведенияОбОбщемСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.Общий;
			ИмяКритерия = ИмяКритерия + ".Общий";
			
		ИначеЕсли НеобходимыСведенияОСеверномСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.Северный;
			ИмяКритерия = ИмяКритерия + ".Северный";
			
		ИначеЕсли НеобходимыСведенияОНепрерывномСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.Непрерывный;
			ИмяКритерия = ИмяКритерия + ".Непрерывный";
			
		ИначеЕсли НеобходимыСведенияОСтажеНаНадбавку(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.ВыслугаЛет;
			ИмяКритерия = ИмяКритерия + ".ВыслугаЛет";
			
		ИначеЕсли НеобходимыСведенияОбОбщемНаучноПедагогическийСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.ОбщийНаучноПедагогический;
			ИмяКритерия = ИмяКритерия + ".ОбщийНаучноПедагогический";
			
		ИначеЕсли НеобходимыСведенияОПедагогическомСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.Педагогический;
			ИмяКритерия = ИмяКритерия + ".Педагогический";
			
		ИначеЕсли НеобходимыСведенияОСтраховомСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.Страховой;
			ИмяКритерия = ИмяКритерия + ".Страховой";
			
		ИначеЕсли НеобходимыСведенияОРасширенномСтраховомСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.РасширенныйСтраховой;
			ИмяКритерия = ИмяКритерия + ".РасширенныйСтраховой";
			
		ИначеЕсли НеобходимыСведенияОПрочемСтаже(ИмяПоля) Тогда
			
			ПравоеЗначение = Перечисления.КатегорииСтажа.Прочее;
			ИмяКритерия = ИмяКритерия + ".Прочее";
			
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина")
			И ОбщегоНазначения.ОбщийМодуль("Медицина").НеобходимыСведенияОМедицинскомСтаже(ИмяПоля) Тогда
			
			ОписаниеСтажа = ОбщегоНазначения.ОбщийМодуль("Медицина").ОписаниеСтажаДляОпределенияКритериевПоискаСотрудников();
			
			ПравоеЗначение = ОписаниеСтажа.КатегорияСтажа;
			ИмяКритерия = ИмяКритерия + "." + ОписаниеСтажа.Идентификатор;
			
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОСтажеЗаВыслугуЛетНаГосударственнойСлужбе(ИмяПоля) Тогда
			
			ОписаниеСтажа = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").ОписаниеСтажаДляОпределенияКритериевПоискаСотрудников();
			
			ПравоеЗначение = ОписаниеСтажа.КатегорияСтажа;
			ИмяКритерия = ИмяКритерия + "." + ОписаниеСтажа.Идентификатор;
			
		КонецЕсли;
		
		ОтносительныйПуть = УсловиеПоиска.ОтносительныйПуть;
		Если Прав(ИмяПоля, 17) = ВРег("ПериодРегистрации") Тогда
			
			УсловиеПоиска.ЛевоеЗначение = "ДатаОтсчета";
			
		ИначеЕсли Прав(ИмяПоля, 7) = ВРег("Месяцев") Тогда
			
			ОтносительныйПуть = Ложь;
			
			ДатаОтсчетаСтажа = "ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Т.ДатаОтсчета, МЕСЯЦ, -Т.РазмерМесяцев), ДЕНЬ, -Т.РазмерДней)";
			УсловиеПоиска.ЛевоеЗначение = "
				|	РАЗНОСТЬДАТ(Т.ДатаОтсчета, Т.Период, МЕСЯЦ) - ВЫБОР
				|		КОГДА ДЕНЬ(Т.ДатаОтсчета) > ДЕНЬ(Т.Период)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ";
			УсловиеПоиска.ЛевоеЗначение = СтрЗаменить(УсловиеПоиска.ЛевоеЗначение, "Т.ДатаОтсчета", ДатаОтсчетаСтажа);
			
		КонецЕсли;
		УсловиеПоиска.ОтносительныйПуть = ОтносительныйПуть;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, УсловиеПоиска);
		
		ОтборПоКатегорииВидаСтажаУстановлен = Ложь;
		УсловияПоиска = КритерииПоиска.Получить(ИмяКритерия);
		Для каждого УсловиеПоиска Из УсловияПоиска Цикл
			
			Если УсловиеПоиска.ЛевоеЗначение = "ВидСтажа.КатегорияСтажа" Тогда
				ОтборПоКатегорииВидаСтажаУстановлен = Истина;
			КонецЕсли; 
			
		КонецЦикла;
		
		Если Не ОтборПоКатегорииВидаСтажаУстановлен Тогда
			
			ДополнительноеУсловие = Новый Структура;
			ДополнительноеУсловие.Вставить("ЛевоеЗначение", "ВидСтажа.КатегорияСтажа");
			ДополнительноеУсловие.Вставить("ВидСравнения", "=");
			ДополнительноеУсловие.Вставить("ПравоеЗначение", ПравоеЗначение);
			ДополнительноеУсловие.Вставить("ОтносительныйПуть", Ложь);
			КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, ДополнительноеУсловие);
			
		КонецЕсли; 
		
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Процедура УточнитьУсловияКритериевПоискаПоСведениямОСтажахФизическихЛиц(КритерииПоиска)
	
	Для каждого КритерийПоиска Из КритерииПоиска Цикл
		
		Если СтрНайти(ВРег(КритерийПоиска.Ключ), ВРег("РегистрСведений.СтажиФизическихЛиц")) = 1 Тогда
			
			ПравоеЗначениеУсловияПоПериоду = ТекущаяДатаСеанса();
			Для каждого УсловиеПоиска Из КритерийПоиска.Значение Цикл
				
				Если УсловиеПоиска.ЛевоеЗначение = "ДатаОтсчета" Тогда
					ПравоеЗначениеУсловияПоПериоду = УсловиеПоиска.ПравоеЗначение;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТипЗнч(ПравоеЗначениеУсловияПоПериоду) = Тип("Дата") Тогда
				ТекстУсловия = "ДАТАВРЕМЯ(" + Формат(ПравоеЗначениеУсловияПоПериоду, "ДФ='гггг, ММ, дд'; ДП=") + ")";
			Иначе
				ТекстУсловия = ПравоеЗначениеУсловияПоПериоду;
			КонецЕсли;
			
			Для каждого УсловиеПоиска Из КритерийПоиска.Значение Цикл
				
				Если Не УсловиеПоиска.ОтносительныйПуть Тогда
					УсловиеПоиска.ЛевоеЗначение = СтрЗаменить(УсловиеПоиска.ЛевоеЗначение, "Т.Период", ТекстУсловия);
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяТаблицыПоКатегорииСтажа(КатегорияСтажа) Экспорт
	
	ИмяТаблицы = "";
	
	Если КатегорияСтажа = Перечисления.КатегорииСтажа.Общий Тогда
		ИмяТаблицы = "ОбщиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Северный Тогда
		ИмяТаблицы = "СеверныеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Непрерывный Тогда
		ИмяТаблицы = "НепрерывныеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛет Тогда
		ИмяТаблицы = "СтажиНаВыслугаЛет";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.ОбщийНаучноПедагогический Тогда
		ИмяТаблицы = "ОбщиеНаучноПедагогическиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Педагогический Тогда
		ИмяТаблицы = "ПедагогическиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Страховой Тогда
		ИмяТаблицы = "СтраховыеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.РасширенныйСтраховой Тогда
		ИмяТаблицы = "РасширенныеСтраховыеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Прочее Тогда
		ИмяТаблицы = "ПрочиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.Медицинский Тогда
		ИмяТаблицы = "МедицинскиеСтажи";
	ИначеЕсли КатегорияСтажа = Перечисления.КатегорииСтажа.ВыслугаЛетНаГосударственнойСлужбе Тогда
		ИмяТаблицы = "ВыслугаЛетНаГосударственнойСлужбе";
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

Функция ПутьКДаннымСведенийОСтаже(Знач ИмяПоля, ИмяТаблицы)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ИмяПоля = ВРег("ОбщийСтажВид")
		Или ИмяПоля = ВРег("СеверныйСтажВид")
		Или ИмяПоля = ВРег("НепрерывныйСтажВид")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетВид")
		Или ИмяПоля = ВРег("ПедагогическийСтажВид")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажВид")
		Или ИмяПоля = ВРег("СтраховойСтажВид")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажВид")
		Или ИмяПоля = ВРег("ПрочийСтажВид") Тогда
		
		Возврат ИмяТаблицы + ".ВидСтажа";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СеверныйСтажПериодРегистрации")
		Или ИмяПоля = ВРег("НепрерывныйСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетПериодРегистрации")
		Или ИмяПоля = ВРег("ПедагогическийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажПериодРегистрации")
		Или ИмяПоля = ВРег("СтраховойСтажПериодРегистрации")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажПериодРегистрации")
		Или ИмяПоля = ВРег("ПрочийСтажПериодРегистрации") Тогда
		
		Возврат ИмяТаблицы + ".ПериодРегистрации";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СеверныйСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("НепрерывныйСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетРазмерМесяцев")
		Или ИмяПоля = ВРег("ПедагогическийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("СтраховойСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажРазмерМесяцев")
		Или ИмяПоля = ВРег("ПрочийСтажРазмерМесяцев") Тогда
		
		Возврат ИмяТаблицы + ".РазмерМесяцев";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажРазмерДней")
		Или ИмяПоля = ВРег("СеверныйСтажРазмерДней")
		Или ИмяПоля = ВРег("НепрерывныйСтажРазмерДней")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетРазмерДней")
		Или ИмяПоля = ВРег("ПедагогическийСтажРазмерДней")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажРазмерДней")
		Или ИмяПоля = ВРег("СтраховойСтажРазмерДней")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажРазмерДней")
		Или ИмяПоля = ВРег("ПрочийСтажРазмерДней") Тогда
		
		Возврат ИмяТаблицы + ".РазмерДней";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажДней")
		Или ИмяПоля = ВРег("СеверныйСтажДней")
		Или ИмяПоля = ВРег("НепрерывныйСтажДней")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетДней")
		Или ИмяПоля = ВРег("ПедагогическийСтажДней")
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажДней")
		Или ИмяПоля = ВРег("СтраховойСтажДней")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажДней")
		Или ИмяПоля = ВРег("ПрочийСтажДней") Тогда
		
		Возврат ИмяТаблицы + ".Дней";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажМесяцев") 
		Или ИмяПоля = ВРег("СеверныйСтажМесяцев")
		Или ИмяПоля = ВРег("НепрерывныйСтажМесяцев")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетМесяцев")
		Или ИмяПоля = ВРег("ПедагогическийСтажМесяцев") 
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажМесяцев")
		Или ИмяПоля = ВРег("СтраховойСтажМесяцев")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажМесяцев")
		Или ИмяПоля = ВРег("ПрочийСтажМесяцев") Тогда
		
		Возврат ИмяТаблицы + ".Месяцев";
		
	ИначеЕсли ИмяПоля = ВРег("ОбщийСтажЛет") 
		Или ИмяПоля = ВРег("СеверныйСтажЛет")
		Или ИмяПоля = ВРег("НепрерывныйСтажЛет")
		Или ИмяПоля = ВРег("СтажНаНадбавкуЗаВыслугуЛетЛет")
		Или ИмяПоля = ВРег("ПедагогическийСтажЛет") 
		Или ИмяПоля = ВРег("ОбщийНаучноПедагогическийСтажЛет")
		Или ИмяПоля = ВРег("СтраховойСтажЛет")
		Или ИмяПоля = ВРег("РасширенныйСтраховойСтажЛет")
		Или ИмяПоля = ВРег("ПрочийСтажЛет") Тогда
		
		Возврат ИмяТаблицы + ".Лет";
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина")
		И ОбщегоНазначения.ОбщийМодуль("Медицина").НеобходимыСведенияОМедицинскомСтаже(ИмяПоля) Тогда
		
		Возврат ОбщегоНазначения.ОбщийМодуль("Медицина").ПутьКДаннымСведенийОСтаже(ИмяПоля);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
		И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОСтажеЗаВыслугуЛетНаГосударственнойСлужбе(ИмяПоля) Тогда
		
		Возврат ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").ПутьКДаннымСведенийОСтаже(ИмяПоля);
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Сведения о знании языков

Функция ДобавитьПолеСведенийОЗнанияхЯзыковФизическихЛиц(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОЗнанияхЯзыковФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОЗнанияхЯзыковФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОЗнанииЯзыковФизическихЛиц(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОЗнанияхЯзыковФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОЗнанияхЯзыковФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТЗнаниеЯзыков 			= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТЗнаниеЯзыков");
	ИмяВТКодСтепениЗнанияЯзыка1 = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТКодСтепениЗнанияЯзыка1");
	ИмяВТСтепеньЗнанияЯзыка1 	= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСтепеньЗнанияЯзыка1");
	ИмяВТКодСтепениЗнанияЯзыка2 = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТКодСтепениЗнанияЯзыка2");
	ИмяВТСтепеньЗнанияЯзыка2 	= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСтепеньЗнанияЯзыка2");
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛицаЗнаниеЯзыков.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛицаЗнаниеЯзыков.Язык,
		|	ФизическиеЛицаЗнаниеЯзыков.СтепеньЗнанияЯзыка
		|ПОМЕСТИТЬ ВТЗнаниеЯзыков
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗнаниеЯзыковФизическихЛиц КАК ФизическиеЛицаЗнаниеЯзыков
		|		ПО ТаблицаОтборовФизическихЛиц.ФизическоеЛицо = ФизическиеЛицаЗнаниеЯзыков.ФизическоеЛицо
		|{ГДЕ
		|	ФизическиеЛицаЗнаниеЯзыков.ФизическоеЛицо.*,
		|	ФизическиеЛицаЗнаниеЯзыков.Язык.*,
		|	ФизическиеЛицаЗнаниеЯзыков.СтепеньЗнанияЯзыка.*}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗнаниеЯзыков.ФизическоеЛицо,
		|	МАКСИМУМ(ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код) КАК СтепеньЗнанияЯзыкаКод
		|ПОМЕСТИТЬ ВТКодСтепениЗнанияЯзыка1
		|ИЗ
		|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗнаниеЯзыков.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗнаниеЯзыков.ФизическоеЛицо,
		|	МАКСИМУМ(ЗнаниеЯзыков.Язык) КАК Язык,
		|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка
		|ПОМЕСТИТЬ ВТСтепеньЗнанияЯзыка1
		|ИЗ
		|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодСтепениЗнанияЯзыка1 КАК КодСтепениЗнанияЯзыка1
		|		ПО ЗнаниеЯзыков.ФизическоеЛицо = КодСтепениЗнанияЯзыка1.ФизическоеЛицо
		|			И ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код = КодСтепениЗнанияЯзыка1.СтепеньЗнанияЯзыкаКод
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗнаниеЯзыков.ФизическоеЛицо,
		|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗнаниеЯзыков.ФизическоеЛицо,
		|	МАКСИМУМ(ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код) КАК СтепеньЗнанияЯзыкаКод
		|ПОМЕСТИТЬ ВТКодСтепениЗнанияЯзыка2
		|ИЗ
		|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепеньЗнанияЯзыка1 КАК СтепеньЗнанияЯзыка1
		|		ПО ЗнаниеЯзыков.ФизическоеЛицо = СтепеньЗнанияЯзыка1.ФизическоеЛицо
		|			И ЗнаниеЯзыков.Язык = СтепеньЗнанияЯзыка1.Язык
		|			И ЗнаниеЯзыков.СтепеньЗнанияЯзыка = СтепеньЗнанияЯзыка1.СтепеньЗнанияЯзыка
		|ГДЕ
		|	СтепеньЗнанияЯзыка1.Язык ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗнаниеЯзыков.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗнаниеЯзыков.ФизическоеЛицо,
		|	МАКСИМУМ(ЗнаниеЯзыков.Язык) КАК Язык,
		|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка
		|ПОМЕСТИТЬ ВТСтепеньЗнанияЯзыка2
		|ИЗ
		|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодСтепениЗнанияЯзыка2 КАК КодСтепениЗнанияЯзыка2
		|		ПО ЗнаниеЯзыков.ФизическоеЛицо = КодСтепениЗнанияЯзыка2.ФизическоеЛицо
		|			И ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код = КодСтепениЗнанияЯзыка2.СтепеньЗнанияЯзыкаКод
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепеньЗнанияЯзыка1 КАК СтепеньЗнанияЯзыка1
		|		ПО ЗнаниеЯзыков.ФизическоеЛицо = СтепеньЗнанияЯзыка1.ФизическоеЛицо
		|			И ЗнаниеЯзыков.Язык = СтепеньЗнанияЯзыка1.Язык
		|ГДЕ
		|	СтепеньЗнанияЯзыка1.Язык ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗнаниеЯзыков.ФизическоеЛицо,
		|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка";
		
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТЗнаниеЯзыков", ИмяВТЗнаниеЯзыков);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТКодСтепениЗнанияЯзыка1", ИмяВТКодСтепениЗнанияЯзыка1);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТСтепеньЗнанияЯзыка1", ИмяВТСтепеньЗнанияЯзыка1);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТКодСтепениЗнанияЯзыка2", ИмяВТКодСтепениЗнанияЯзыка2);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТСтепеньЗнанияЯзыка2", ИмяВТСтепеньЗнанияЯзыка2);
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	Запрос.Текст =
		ТекстЗапросаСведений
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
	
	Запрос.Текст = Запрос.Текст + "
		|		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСтепеньЗнанияЯзыка1 + " КАК СтепеньЗнанияЯзыка1
		|			ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СтепеньЗнанияЯзыка1.ФизическоеЛицо}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСтепеньЗнанияЯзыка2 + " КАК СтепеньЗнанияЯзыка2
		|			ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СтепеньЗнанияЯзыка2.ФизическоеЛицо}";
			
КонецПроцедуры
	
Функция НеобходимыСведенияОЗнанияхЯзыковФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВладеемыйЯзык1")
		Или	ИмяПоля = ВРег("ВладеемыйЯзык1СтепеньЗнания")
		Или	ИмяПоля = ВРег("ВладеемыйЯзык2")
		Или	ИмяПоля = ВРег("ВладеемыйЯзык2СтепеньЗнания");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОЗнанииЯзыковФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	Если ИмяПоля = ВРег("ВладеемыйЯзык") Тогда
		КритерийДобавлен = Истина;
		УсловиеПоиска.ЛевоеЗначение = "Язык";
	ИначеЕсли ИмяПоля = ВРег("СтепеньЗнанияЯзыка") Тогда
		КритерийДобавлен = Истина;
		УсловиеПоиска.ЛевоеЗначение = "СтепеньЗнанияЯзыка";
	КонецЕсли;
	
	Если КритерийДобавлен Тогда
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ЗнаниеЯзыковФизическихЛиц", УсловиеПоиска);
	КонецЕсли; 
		
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОЗнанииЯзыковФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ВладеемыйЯзык1") Тогда
		ПутьКДанным = "	СтепеньЗнанияЯзыка1.Язык";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВладеемыйЯзык1СтепеньЗнания") Тогда
		ПутьКДанным = "	СтепеньЗнанияЯзыка1.СтепеньЗнанияЯзыка";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВладеемыйЯзык2") Тогда
		ПутьКДанным = "	СтепеньЗнанияЯзыка2.Язык";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВладеемыйЯзык2СтепеньЗнания") Тогда
		ПутьКДанным = "	СтепеньЗнанияЯзыка2.СтепеньЗнанияЯзыка";
	КонецЕсли;
		
	Возврат ПутьКДанным;
		
КонецФункции

// Сведения о профессиях

Функция ДобавитьПолеСведенийОПрофессияхФизическихЛиц(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПрофессияхФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПрофессияхФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОПрофессияхФизическихЛиц(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОПрофессияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОПрофессияхФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТПрофессии 		= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПрофессии");
	ИмяВТКодПрофессии1 	= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТКодПрофессии1");
	ИмяВТПрофессия1 	= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПрофессия1");
	ИмяВТКодПрофессии2 	= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТКодПрофессии2");
	ИмяВТПрофессия2 	= ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПрофессия2");
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрофессииФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПрофессииФизическихЛиц.Профессия
		|ПОМЕСТИТЬ ВТПрофессии
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрофессииФизическихЛиц КАК ПрофессииФизическихЛиц
		|		ПО ТаблицаОтборовФизическихЛиц.ФизическоеЛицо = ПрофессииФизическихЛиц.ФизическоеЛицо
		|{ГДЕ
		|	ПрофессииФизическихЛиц.ФизическоеЛицо.*,
		|	ПрофессииФизическихЛиц.Профессия.*}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Профессии.ФизическоеЛицо,
		|	МАКСИМУМ(Профессии.Профессия.Код) КАК Профессия1Код
		|ПОМЕСТИТЬ ВТКодПрофессии1
		|ИЗ
		|	ВТПрофессии КАК Профессии
		|
		|СГРУППИРОВАТЬ ПО
		|	Профессии.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Профессии.ФизическоеЛицо,
		|	МАКСИМУМ(Профессии.Профессия) КАК Профессия
		|ПОМЕСТИТЬ ВТПрофессия1
		|ИЗ
		|	ВТПрофессии КАК Профессии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодПрофессии1 КАК КодПрофессии1
		|		ПО Профессии.ФизическоеЛицо = КодПрофессии1.ФизическоеЛицо
		|			И Профессии.Профессия.Код = КодПрофессии1.Профессия1Код
		|
		|СГРУППИРОВАТЬ ПО
		|	Профессии.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Профессии.ФизическоеЛицо,
		|	МАКСИМУМ(Профессии.Профессия.Код) КАК Профессия2Код
		|ПОМЕСТИТЬ ВТКодПрофессии2
		|ИЗ
		|	ВТПрофессии КАК Профессии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрофессия1 КАК Профессия1
		|		ПО Профессии.ФизическоеЛицо = Профессия1.ФизическоеЛицо
		|			И Профессии.Профессия = Профессия1.Профессия
		|ГДЕ
		|	Профессия1.Профессия ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	Профессии.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Профессии.ФизическоеЛицо,
		|	Профессии.Профессия
		|ПОМЕСТИТЬ ВТПрофессия2
		|ИЗ
		|	ВТПрофессии КАК Профессии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодПрофессии2 КАК КодПрофессии2
		|		ПО Профессии.ФизическоеЛицо = КодПрофессии2.ФизическоеЛицо
		|			И Профессии.Профессия.Код = КодПрофессии2.Профессия2Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрофессия1 КАК Профессия1
		|		ПО Профессии.ФизическоеЛицо = Профессия1.ФизическоеЛицо
		|			И Профессии.Профессия = Профессия1.Профессия
		|ГДЕ
		|	Профессия1.Профессия ЕСТЬ NULL ";
		
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПрофессии", ИмяВТПрофессии);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТКодПрофессии1", ИмяВТКодПрофессии1);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПрофессия1", ИмяВТПрофессия1);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТКодПрофессии2", ИмяВТКодПрофессии2);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПрофессия2", ИмяВТПрофессия2);
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	Запрос.Текст =
		ТекстЗапросаСведений
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
	
	Запрос.Текст = Запрос.Текст + "
		|		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПрофессия1 + " КАК Профессия1
		|			ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Профессия1.ФизическоеЛицо}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПрофессия2 + " КАК Профессия2
		|			ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Профессия2.ФизическоеЛицо}";
		
КонецПроцедуры
	
Функция НеобходимыСведенияОПрофессияхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("Профессия1")
		Или	ИмяПоля = ВРег("Профессия2");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОПрофессияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	Если ИмяПоля = ВРег("Профессия") Тогда
		КритерийДобавлен = Истина;
		УсловиеПоиска.ЛевоеЗначение = "Профессия";
	КонецЕсли;
	
	Если КритерийДобавлен Тогда
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ПрофессииФизическихЛиц", УсловиеПоиска);
	КонецЕсли; 
		
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОПрофессияхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("Профессия1") Тогда
		ПутьКДанным = "	Профессия1.Профессия";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Профессия2") Тогда
		ПутьКДанным = "	Профессия2.Профессия";
	КонецЕсли;
		
	Возврат ПутьКДанным;
		
КонецФункции

// Сведения о состояниях в браке.

Функция ДобавитьПолеСведенийОСостоянияхВБракеФизическихЛиц(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОСостоянияхВБракеФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОСостоянияхВБракеФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОСостоянияхВБракеФизическихЛиц(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОСостоянияхВБракеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОСостоянияхВБракеФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТСведенияОСостоянияхВБракеФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОСостоянияхВБракеФизическихЛиц");
	
	ЗапросВТ = ЗапросВТСведенияОСостоянияхВБракеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОСостоянияхВБракеФизическихЛиц);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОСостоянияхВБракеФизическихЛиц + " КАК СостоянияВБракеФизическихЛиц
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СостоянияВБракеФизическихЛиц.ФизическоеЛицо
			|			И ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СостоянияВБракеФизическихЛиц.Период}";
				
КонецПроцедуры
	
Функция НеобходимыСведенияОСостоянияхВБракеФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ИмяПоля = ВРег("СостояниеВБракеПериодРегистрации")
		Или ИмяПоля = ВРег("СемейноеПоложение")
		Или ИмяПоля = ВРег("СостояниеВБраке");
	
КонецФункции
	
Функция ПутьКДаннымСведенийОСостоянияхВБракеФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("СостояниеВБракеПериодРегистрации") Тогда
		ПутьКДанным = "	СостоянияВБракеФизическихЛиц.ПериодЗаписи";
	ИначеЕсли ИмяПоля = ВРег("СемейноеПоложение")
		Или ИмяПоля = ВРег("СостояниеВБраке") Тогда
		ПутьКДанным = "	СостоянияВБракеФизическихЛиц.СостояниеВБраке";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения о воинском учете

Функция ДобавитьПолеСведенийОВоинскомУчетеФизическихЛиц(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОВоинскомУчетеФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОВоинскомУчетеФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОВоинскомУчетеФизическихЛиц(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОВоинскомУчетеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОВоинскомУчетеФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТСведенияОВоинскомУчетеФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОВоинскомУчетеФизическихЛиц");
	
	ЗапросВТ = ЗапросВТСведенияОВоинскомУчетеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОВоинскомУчетеФизическихЛиц);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОВоинскомУчетеФизическихЛиц + " КАК ВоинскийУчет
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ВоинскийУчет.ФизическоеЛицо
			|			И ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ВоинскийУчет.Период}";
				
КонецПроцедуры
	
Функция НеобходимыСведенияОВоинскомУчетеФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВоинскийУчетПериодРегистрации")
		Или ИмяПоля = ВРег("ВоинскийУчетГруппаУчета")
		Или ИмяПоля = ВРег("ВоинскийУчетСпецУчет")
		Или ИмяПоля = ВРег("ВоинскийУчетКатегорияЗапаса")
		Или ИмяПоля = ВРег("ВоинскийУчетЗвание")
		Или	ИмяПоля = ВРег("ВоинскийУчетСостав")
		Или	ИмяПоля = ВРег("ВоинскийУчетВУС")
		Или	ИмяПоля = ВРег("ВоинскийУчетГодность")
		Или	ИмяПоля = ВРег("ВоинскийУчетВоенкомат")
		Или	ИмяПоля = ВРег("ВоинскийУчетВоенкоматФМП")
		Или	ИмяПоля = ВРег("ВоинскийУчетНомерКомандыПартии")
		Или	ИмяПоля = ВРег("ВоинскийУчетПунктПеречня")
		Или	ИмяПоля = ВРег("ВоинскийУчетНаличиеМобпредписания")
		Или ИмяПоля = ВРег("ВоинскийУчетОтношениеКВоинскойОбязанности")
		Или ИмяПоля = ВРег("ВоинскийУчетОтношениеКВоинскомуУчету")
		Или ИмяПоля = ВРег("ВоинскийУчетРеквизитыВоенногоБилета")
		Или ИмяПоля = ВРег("ВоинскийУчетГруппаУчетаКарточкиВоинскогоУчета")
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОВоинскомУчетеФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОВоинскомУчетеФизическихЛиц(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ВоинскийУчетПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		Иначе
			
			УсловиеПоиска.ЛевоеЗначение = Сред(ИмяПоля, СтрДлина("ВоинскийУчет") + 1);
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ВоинскийУчет", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОВоинскомУчетеФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("ВоинскийУчетПериодРегистрации") Тогда
		ПутьКДанным = "	ВоинскийУчет.ПериодЗаписи";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетГруппаУчета") Тогда
		ПутьКДанным = "	ВоинскийУчет.ГруппаУчета";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетСпецУчет") Тогда
		ПутьКДанным = "	ВоинскийУчет.СпецУчет";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетКатегорияЗапаса") Тогда
		ПутьКДанным = "	ВоинскийУчет.КатегорияЗапаса";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетЗвание") Тогда
		ПутьКДанным = "	ВоинскийУчет.Звание";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетСостав") Тогда
		ПутьКДанным = "	ВоинскийУчет.Состав";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетВУС") Тогда
		ПутьКДанным = "	ВоинскийУчет.ВУС";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетГодность") Тогда
		ПутьКДанным = "	ВоинскийУчет.Годность";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетВоенкомат") Тогда
		ПутьКДанным = "	ВоинскийУчет.Военкомат";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетВоенкоматФМП") Тогда
		ПутьКДанным = "	ВоинскийУчет.ВоенкоматФМП";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетНомерКомандыПартии") Тогда
		ПутьКДанным = "	ВоинскийУчет.НомерКомандыПартии";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетПунктПеречня") Тогда
		ПутьКДанным = "	ВоинскийУчет.ПунктПеречня";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетНаличиеМобпредписания") Тогда
		ПутьКДанным = "	ВоинскийУчет.НаличиеМобпредписания";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетОтношениеКВоинскойОбязанности") Тогда
		ПутьКДанным = "	ВоинскийУчет.ОтношениеКВоинскойОбязанности";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетОтношениеКВоинскомуУчету") Тогда
		ПутьКДанным = "	ВоинскийУчет.ОтношениеКВоинскомуУчету";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетРеквизитыВоенногоБилета") Тогда
		ПутьКДанным = "	ВоинскийУчет.РеквизитыВоенногоБилета";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетГруппаУчетаКарточкиВоинскогоУчета") Тогда
		ПутьКДанным = "	ВоинскийУчет.ГруппаУчетаКарточкиВоинскогоУчета";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения об исчислении северного стажа

Функция ДобавитьПолеСведенийОПараметрахИсчисленияСеверногоСтажа(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПараметрахИсчисленияСеверногоСтажа(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПараметрахИсчисленияСеверногоСтажа", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОПараметрахИсчисленияСеверногоСтажа(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОПараметрахИсчисленияСеверногоСтажа(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ВРег(ИмяПоля) = ВРег("ПорядокИсчисленияПроцентаСевернойНадбавки")
		Или ВРег(ИмяПоля) = ВРег("ПроцентСевернойНадбавкиИзменяется")
		Или ВРег(ИмяПоля) = ВРег("ПроцентСевернойНадбавки");
	
КонецФункции

Функция ПутьКДаннымСведенийОПараметрахИсчисленияСеверногоСтажа(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("ПорядокИсчисленияПроцентаСевернойНадбавки") Тогда
		ПутьКДанным = "	ПараметрыИсчисленияПроцентаСевернойНадбавки.ПорядокИсчисленияПроцентаСевернойНадбавки";
	ИначеЕсли ИмяПоля = ВРег("ПроцентСевернойНадбавкиИзменяется") Тогда
		ПутьКДанным = "	ПараметрыИсчисленияПроцентаСевернойНадбавки.ПроцентСевернойНадбавкиИзменяется";
	ИначеЕсли ИмяПоля = ВРег("ПроцентСевернойНадбавки") Тогда
		ПутьКДанным = "	ПараметрыИсчисленияПроцентаСевернойНадбавки.ПроцентСевернойНадбавки";
	КонецЕсли;
	
	Возврат ПутьКДанным;

КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОПараметрахИсчисленияСеверногоСтажа(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОПараметрахИсчисленияСеверногоСтажа") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТСведенияОПараметрахИсчисленияСеверногоСтажа = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОПараметрахИсчисленияСеверногоСтажа");
	
	ЗапросВТ = ЗапросВТСведенияОПараметрахИсчисленияСеверногоСтажа(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОПараметрахИсчисленияСеверногоСтажа);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОПараметрахИсчисленияСеверногоСтажа + " КАК ПараметрыИсчисленияПроцентаСевернойНадбавки
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ПараметрыИсчисленияПроцентаСевернойНадбавки.ФизическоеЛицо
			|			И ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ПараметрыИсчисленияПроцентаСевернойНадбавки.Период}";
				
КонецПроцедуры
	
// Сведения о бронировании

Функция ДобавитьПолеСведенийОБронированииСотрудников(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОБронированииСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОБронированииСотрудников", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОБронированииСотрудников(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОБронированииСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОБронированииСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТСведенияОСведенияОБронированииСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОСведенияОБронированииСотрудников");
	
	ЗапросВТ = ЗапросВТСведенияОСведенияОБронированииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОСведенияОБронированииСотрудников);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОСведенияОБронированииСотрудников + " КАК БронированиеСотрудников
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = БронированиеСотрудников.ФизическоеЛицо
			|			И ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = БронированиеСотрудников.Период}";
				
КонецПроцедуры
	
Функция НеобходимыСведенияОБронированииСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ВРег(ИмяПоля) = ВРег("ВоинскийУчетЗабронированОрганизациейПериодРегистрации")
		Или ВРег(ИмяПоля) = ВРег("ВоинскийУчетЗабронированОрганизациейРегистратор")
		Или ВРег(ИмяПоля) = ВРег("ВоинскийУчетЗабронированОрганизацией")
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОБронированииГражданОрганизациями(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОБронированииСотрудников(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизациейПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизацией") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Организация";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.БронированиеСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОБронированииСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизациейПериодРегистрации") Тогда
		ПутьКДанным = "	БронированиеСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизациейРегистратор") Тогда
		ПутьКДанным = "	БронированиеСотрудников.Регистратор";
	ИначеЕсли ИмяПоля = ВРег("ВоинскийУчетЗабронированОрганизацией") Тогда
		ПутьКДанным = "	БронированиеСотрудников.Организация";
	КонецЕсли;
	
	Возврат ПутьКДанным;

КонецФункции

// Сведения о льготах граждан подвергшихся воздействию радиации.

Функция ДобавитьПолеСведенийОЛьготахГражданПодвергшихсяРадиации(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОЛьготахГражданПодвергшихсяРадиации(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС", Истина);
		
		ПутьКДанным = "	СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.КоличествоДнейОтпуска";
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаСведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС КАК СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.ФизическоеЛицо}";
				
КонецПроцедуры

Функция НеобходимыСведенияОЛьготахГражданПодвергшихсяРадиации(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ВРег(ИмяПоля) = ВРег("КоличествоДнейОтпускаЧАЭС")
	
КонецФункции

// Строковые сведения физических лиц.

Функция ДобавитьПолеСтроковыхСведенийФизическихЛиц(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСтроковыеСведенияФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СтроковыеСведенияФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСтроковыхСведенийФизическихЛиц(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + "	ВЫРАЗИТЬ(" + ПутьКДанным + " КАК СТРОКА(1024))" + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСтроковыеСведенияФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПолученныеОбразования")
		Или	ИмяПоля = ВРег("ПовышениеКвалификации")
		Или	ИмяПоля = ВРег("Переподготовка")
		Или	ИмяПоля = ВРег("Награды")
		Или	ИмяПоля = ВРег("Документы")
		Или	ИмяПоля = ВРег("ЗнанияЯзыков")
		Или	ИмяПоля = ВРег("Профессии")
		Или	ИмяПоля = ВРег("Специальности")
		Или	ИмяПоля = ВРег("ТрудоваяДеятельность")
		Или	ИмяПоля = ВРег("СоставСемьи");
		
КонецФункции
	
Функция ПутьКДаннымСтроковыхСведенийФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоля = ВРег("ПолученныеОбразования") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.Образование";
	ИначеЕсли ИмяПоля = ВРег("ПовышениеКвалификации") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.ПовышениеКвалификации";
	ИначеЕсли ИмяПоля = ВРег("Переподготовка") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.Переподготовка";
	ИначеЕсли ИмяПоля = ВРег("Награды") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.Награды";
	ИначеЕсли ИмяПоля = ВРег("Документы") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.Документы";
	ИначеЕсли ИмяПоля = ВРег("ЗнанияЯзыков") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.ЗнаниеЯзыков";
	ИначеЕсли ИмяПоля = ВРег("Профессии") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.Профессии";
	ИначеЕсли ИмяПоля = ВРег("Специальности") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.Специальности";
	ИначеЕсли ИмяПоля = ВРег("ТрудоваяДеятельность") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.ТрудоваяДеятельность";
	ИначеЕсли ИмяПоля = ВРег("СоставСемьи") Тогда
		ПутьКДанным = "	СтроковыеСведенияФизическихЛиц.СоставСемьи";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСтроковыеСведенияФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СтроковыеСведенияФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТСтроковыеСведенияФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("СтроковыеСведенияФизическихЛиц");
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтроковыеСведенияФизическихЛиц.ФизическоеЛицо,
		|	СтроковыеСведенияФизическихЛиц.Документы,
		|	СтроковыеСведенияФизическихЛиц.ЗнаниеЯзыков,
		|	СтроковыеСведенияФизическихЛиц.Награды,
		|	СтроковыеСведенияФизическихЛиц.Образование,
		|	СтроковыеСведенияФизическихЛиц.ПовышениеКвалификации,
		|	СтроковыеСведенияФизическихЛиц.Переподготовка,
		|	СтроковыеСведенияФизическихЛиц.Профессии,
		|	СтроковыеСведенияФизическихЛиц.СоставСемьи,
		|	СтроковыеСведенияФизическихЛиц.Специальности,
		|	СтроковыеСведенияФизическихЛиц.ТрудоваяДеятельность
		|ПОМЕСТИТЬ ВТСтроковыеСведенияФизическихЛиц
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтроковыеСведенияФизическихЛиц КАК СтроковыеСведенияФизическихЛиц
		|		ПО ТаблицаОтборовФизическихЛиц.ФизическоеЛицо = СтроковыеСведенияФизическихЛиц.ФизическоеЛицо";
	
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТСтроковыеСведенияФизическихЛиц", ИмяВТСтроковыеСведенияФизическихЛиц);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	Запрос.Текст =
		ТекстЗапросаСведений
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
		Запрос.Текст = Запрос.Текст + "
		|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСтроковыеСведенияФизическихЛиц + " КАК СтроковыеСведенияФизическихЛиц
		|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СтроковыеСведенияФизическихЛиц.ФизическоеЛицо}";
		
КонецПроцедуры

#КонецОбласти


#Область КадровыеДанныеСотрудников

Процедура ОбновитьТекущиеТарифныеСтавки(МассивСотрудниковДляОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, МассивСотрудниковДляОбновления,"ДатаУвольнения");
	Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
	
	// Подготовка таблицы отбора сотрудников.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.ДатаУвольнения КАК Период,
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТОтбораСотрудников
		|ИЗ
		|	&КадровыеДанныеСотрудников КАК Сотрудники";
		
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеАвансы",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтбораСотрудников", "Сотрудник"));
	
	// Подготовка сведений о плановых начислениях сотрудника.
	ЗапросВТПлановыеНачисления = ЗапросВТПлановыеНачисленияСотрудников(Истина, "ВТПлановыеНачисленияСотрудников", "ВТОтбораСотрудников", "Сотрудник,Период");
	ЗапросВТПлановыеНачисления.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВТПлановыеНачисления.Выполнить();

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Сотрудник,
		|	СУММА(ПлановыеНачисления.Размер) КАК ТекущийФОТ,
		|	СУММА(ВЫБОР
		|			КОГДА ПлановыеНачисления.НачислениеТарифнойСтавки
		|				ТОГДА 0
		|			ИНАЧЕ ПлановыеНачисления.Размер
		|		КОНЕЦ) КАК ТекущаяНадбавка
		|ПОМЕСТИТЬ ВТТекущиеДанныеНачислений
		|ИЗ
		|	ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|	НачисленияПоказатели.Показатель КАК Показатель,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК Период
		|ПОМЕСТИТЬ ВТИзмеренияДатыДляЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников
		|ИЗ
		|	ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ПлановыеНачисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ОсновнойПоказатель)
		|			И (ПлановыеНачисления.НачислениеТарифнойСтавки)";
		
	Запрос.Выполнить();
	
	// Подготовка сведений о текущей тарифной ставке.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДатыДляЗначенийПериодическихПоказателейРасчетаЗарплатыСотрудников",
			"Сотрудник,Показатель"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ПериодЗаписи) КАК ПериодЗаписи
	|ПОМЕСТИТЬ ВТМаксимальныеПериодыЗначенияПериодическихПоказателей
	|ИЗ
	|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник,
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеПериодыЗначенияПериодическихПоказателей.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Организация) КАК Организация,
	|	МАКСИМУМ(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение) КАК Значение
	|ПОМЕСТИТЬ ВТПоследниеЗначениеПоказателей
	|ИЗ
	|	ВТМаксимальныеПериодыЗначенияПериодическихПоказателей КАК МаксимальныеПериодыЗначенияПериодическихПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
	|		ПО МаксимальныеПериодыЗначенияПериодическихПоказателей.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник
	|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ПериодЗаписи = МаксимальныеПериодыЗначенияПериодическихПоказателей.ПериодЗаписи)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеПериодыЗначенияПериодическихПоказателей.Сотрудник,
	|	МаксимальныеПериодыЗначенияПериодическихПоказателей.ПериодЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ЕСТЬNULL(ПоследниеЗначениеПоказателей.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация,
	|	ЕСТЬNULL(ПоследниеЗначениеПоказателей.Значение, 0) КАК ТекущаяТарифнаяСтавка,
	|	ЕСТЬNULL(ТекущиеДанныеНачислений.ТекущийФОТ, 0) КАК ТекущийФОТ,
	|	ЕСТЬNULL(ТекущиеДанныеНачислений.ТекущаяНадбавка, 0) КАК ТекущаяНадбавка
	|ПОМЕСТИТЬ ВТЗначениеПоказателя
	|ИЗ
	|	ВТОтбораСотрудников КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеЗначениеПоказателей КАК ПоследниеЗначениеПоказателей
	|		ПО Сотрудники.Сотрудник = ПоследниеЗначениеПоказателей.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущиеДанныеНачислений КАК ТекущиеДанныеНачислений
	|		ПО Сотрудники.Сотрудник = ТекущиеДанныеНачислений.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначениеПоказателя.Сотрудник,
	|	ЗначениеПоказателя.ФизическоеЛицо,
	|	ЗначениеПоказателя.ГоловнаяОрганизация,
	|	ЗначениеПоказателя.ТекущаяОрганизация,
	|	ЗначениеПоказателя.ТекущаяТарифнаяСтавка,
	|	ЗначениеПоказателя.ТекущийФОТ,
	|	ЗначениеПоказателя.ТекущаяНадбавка,
	|	ЕСТЬNULL(ПлановыеАвансы.СпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)) КАК ТекущийСпособРасчетаАванса,
	|	ЕСТЬNULL(ПлановыеАвансы.Аванс, 0) КАК ТекущийАванс
	|ИЗ
	|	ВТЗначениеПоказателя КАК ЗначениеПоказателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
	|		ПО ЗначениеПоказателя.Сотрудник = ТекущаяТарифнаяСтавкаСотрудников.Сотрудник
	|			И ЗначениеПоказателя.ФизическоеЛицо = ТекущаяТарифнаяСтавкаСотрудников.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансы
	|		ПО ЗначениеПоказателя.Сотрудник = ПлановыеАвансы.Сотрудник
	|ГДЕ
	|	(ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0) <> ЗначениеПоказателя.ТекущаяТарифнаяСтавка
	|			ИЛИ ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийФОТ, 0) <> ЗначениеПоказателя.ТекущийФОТ
	|			ИЛИ ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяНадбавка, 0) <> ЗначениеПоказателя.ТекущаяНадбавка
	|			ИЛИ ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийСпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)) <> ЕСТЬNULL(ПлановыеАвансы.СпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка))
	|			ИЛИ ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийАванс, 0) <> ЕСТЬNULL(ПлановыеАвансы.Аванс, 0))";

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
	
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
		
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина); 
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТПериодыИзмененияСевернойНадбавки(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Окончание", Окончание);
	
	ИмяВТПериодыИзмененияСевернойНадбавкиФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПериодыИзмененияСевернойНадбавкиФизическихЛиц");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо,
	|	ПроцентыСевернойНадбавкиФизическихЛиц.Период
	|ПОМЕСТИТЬ ВТПериодыИзмененияСевернойНадбавкиФизическихЛиц
	|ИЗ
	|	ВТНачисленияСотрудников КАК НачисленияСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = НачисленияСотрудников.Сотрудник)
	|			И (НачисленияСотрудников.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыСевернойНадбавкиФизическихЛиц КАК ПроцентыСевернойНадбавкиФизическихЛиц
	|		ПО (Сотрудники.ФизическоеЛицо = ПроцентыСевернойНадбавкиФизическихЛиц.ФизическоеЛицо)
	|			И (ПроцентыСевернойНадбавкиФизическихЛиц.Период МЕЖДУ &Начало И &Окончание)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПериодыИзмененияСевернойНадбавкиФизическихЛиц.ФизическоеЛицо
	|ИЗ
	|	ВТПериодыИзмененияСевернойНадбавкиФизическихЛиц КАК ПериодыИзмененияСевернойНадбавкиФизическихЛиц";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодыИзмененияСевернойНадбавкиФизическихЛиц", ИмяВТПериодыИзмененияСевернойНадбавкиФизическихЛиц);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	ИмяВТПериодыИзмененияСевернойНадбавкиСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПериодыИзмененияСевернойНадбавкиСотрудников");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияСотрудников.Сотрудник КАК Сотрудник,
	|	НачисленияСотрудников.Начисление КАК Начисление,
	|	НачисленияСотрудников.ДокументОснование КАК ДокументОснование,
	|	ПериодыИзмененияСевернойНадбавкиФизическихЛиц.Период
	|ПОМЕСТИТЬ ВТПериодыИзмененияСевернойНадбавкиСотрудников
	|ИЗ
	|	ВТНачисленияСотрудников КАК НачисленияСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИзмененияСевернойНадбавкиФизическихЛиц КАК ПериодыИзмененияСевернойНадбавкиФизическихЛиц
	|		ПО (ВЫРАЗИТЬ(НачисленияСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = ПериодыИзмененияСевернойНадбавкиФизическихЛиц.ФизическоеЛицо)
	|			И (НачисленияСотрудников.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка))";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодыИзмененияСевернойНадбавкиФизическихЛиц", ИмяВТПериодыИзмененияСевернойНадбавкиФизическихЛиц);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодыИзмененияСевернойНадбавкиСотрудников", ИмяВТПериодыИзмененияСевернойНадбавкиСотрудников);
		
	Запрос.Выполнить();
	
	ИменаВТ.Добавить(ИмяВТПериодыИзмененияСевернойНадбавкиСотрудников);
	
КонецПроцедуры

Функция СведенияОСтажахСотрудников(СотрудникиДаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиДаты.Сотрудник,
		|	СотрудникиДаты.Период
		|ПОМЕСТИТЬ ВТСотрудникиДаты
		|ИЗ
		|	&СотрудникиДаты КАК СотрудникиДаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СотрудникиДаты.Период КАК Период,
		|	СотрудникиДаты.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	ВидыСтажа.Ссылка КАК ВидСтажа
		|ПОМЕСТИТЬ ВТСотрудникиСФизическимиЛицами
		|ИЗ
		|	ВТСотрудникиДаты КАК СотрудникиДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СотрудникиДаты.Сотрудник = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыСтажа КАК ВидыСтажа
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиСФизическимиЛицами.Период,
		|	СотрудникиСФизическимиЛицами.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТТаблицаОтборовФизическихЛиц
		|ИЗ
		|	ВТСотрудникиСФизическимиЛицами КАК СотрудникиСФизическимиЛицами";
		
	Запрос.Выполнить();
	
	СоздатьВТСтажиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, "ВТТаблицаОтборовФизическихЛиц");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиСФизическимиЛицами.Сотрудник КАК Сотрудник,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Лет, 0) КАК Лет,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Месяцев, 0) КАК Месяцев,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Дней, 0) КАК Дней
		|ИЗ
		|	ВТСотрудникиСФизическимиЛицами КАК СотрудникиСФизическимиЛицами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО СотрудникиСФизическимиЛицами.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|			И СотрудникиСФизическимиЛицами.Период = СтажиФизическихЛиц.Период
		|			И СотрудникиСФизическимиЛицами.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|ИТОГИ ПО
		|	Сотрудник";
		
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтажиСотрудников = Новый Соответствие;
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		
		СоответствиеСтажей = Новый Соответствие;
		ВыборкаПоСтажам = ВыборкаПоСотрудникам.Выбрать();
		Пока ВыборкаПоСтажам.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаПоСтажам.ВидСтажа) Тогда
				СведенияОСтаже = Новый Структура("Лет,Месяцев,Дней", 0, 0, 0);
				ЗаполнитьЗначенияСвойств(СведенияОСтаже, ВыборкаПоСтажам);
				
				СоответствиеСтажей.Вставить(ВыборкаПоСтажам.ВидСтажа, СведенияОСтаже);
			КонецЕсли; 
			
		КонецЦикла;
		
		СтажиСотрудников.Вставить(ВыборкаПоСотрудникам.Сотрудник, СоответствиеСтажей);
		
	КонецЦикла;
	
	Возврат СтажиСотрудников;
	
КонецФункции

Функция СведенияОСтажахФизическихЛиц(ФизическиеЛицаДаты, ПолучатьБудущиеЗначенияСтажей = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ФизическиеЛицаДаты", ФизическиеЛицаДаты);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛицаДаты.Период,
		|	ФизическиеЛицаДаты.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаДаты
		|ИЗ
		|	&ФизическиеЛицаДаты КАК ФизическиеЛицаДаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТФизическиеЛицаДаты.Период,
		|	ВТФизическиеЛицаДаты.ФизическоеЛицо,
		|	ВидыСтажа.Ссылка КАК ВидСтажа
		|ПОМЕСТИТЬ ВТФизическиеЛицаСВидамиСтажей
		|ИЗ
		|	ВТФизическиеЛицаДаты КАК ВТФизическиеЛицаДаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыСтажа КАК ВидыСтажа
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаСВидамиСтажей.Период,
		|	ФизическиеЛицаСВидамиСтажей.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТТаблицаОтборовФизическихЛиц
		|ИЗ
		|	ВТФизическиеЛицаСВидамиСтажей КАК ФизическиеЛицаСВидамиСтажей";
		
	Запрос.Выполнить();
	
	СоздатьВТСтажиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, "ВТТаблицаОтборовФизическихЛиц", ПолучатьБудущиеЗначенияСтажей);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаСВидамиСтажей.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛицаСВидамиСтажей.ВидСтажа КАК ВидСтажа,
		|	ЕСТЬNULL(СтажиФизическихЛиц.ПериодРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодРегистрации,
		|	ЕСТЬNULL(СтажиФизическихЛиц.РазмерМесяцев, 0) КАК РазмерМесяцев,
		|	ЕСТЬNULL(СтажиФизическихЛиц.РазмерДней, 0) КАК РазмерДней,
		|	ЕСТЬNULL(СтажиФизическихЛиц.ИсчисляетсяСДатыПриема, ЛОЖЬ) КАК ИсчисляетсяСДатыПриема,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Лет, 0) КАК Лет,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Месяцев, 0) КАК Месяцев,
		|	ЕСТЬNULL(СтажиФизическихЛиц.Дней, 0) КАК Дней
		|ИЗ
		|	ВТФизическиеЛицаСВидамиСтажей КАК ФизическиеЛицаСВидамиСтажей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтажиФизическихЛиц КАК СтажиФизическихЛиц
		|		ПО ФизическиеЛицаСВидамиСтажей.ФизическоеЛицо = СтажиФизическихЛиц.ФизическоеЛицо
		|			И ФизическиеЛицаСВидамиСтажей.Период = СтажиФизическихЛиц.Период
		|			И ФизическиеЛицаСВидамиСтажей.ВидСтажа = СтажиФизическихЛиц.ВидСтажа
		|ИТОГИ ПО
		|	ФизическоеЛицо";
		
	ВыборкаПоФизическимЛицам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтажиФизическихЛиц = Новый Соответствие;
	Пока ВыборкаПоФизическимЛицам.Следующий() Цикл
		
		СоответствиеСтажей = Новый Соответствие;
		ВыборкаПоСтажам = ВыборкаПоФизическимЛицам.Выбрать();
		Пока ВыборкаПоСтажам.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаПоСтажам.ВидСтажа) Тогда
				
				СведенияОСтаже = ЗарплатаКадрыРасширенныйКлиентСервер.СведенияОСтаже();
				ЗаполнитьЗначенияСвойств(СведенияОСтаже, ВыборкаПоСтажам);
				
				СоответствиеСтажей.Вставить(ВыборкаПоСтажам.ВидСтажа, СведенияОСтаже);
			КонецЕсли; 
			
		КонецЦикла;
		
		СтажиФизическихЛиц.Вставить(ВыборкаПоФизическимЛицам.ФизическоеЛицо, СоответствиеСтажей);
		
	КонецЦикла;
	
	Возврат СтажиФизическихЛиц;
		
КонецФункции

Функция ТекущиеНачисленияСотрудника(Сотрудник, ДатаСведений, ИсключаемыйРегистратор = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	Возврат ТекущиеНачисленияСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), ДатаСведений, ИсключаемыйРегистратор, ФормироватьСПериодичностьДень).Получить(Сотрудник);
	
КонецФункции

Функция ТекущиеНачисленияСотрудников(Сотрудники, ДатаСведений, ИсключаемыйРегистратор = Неопределено, ФормироватьСПериодичностьДень = Истина)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&ДатаСведений КАК Период,
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТОтбораСотрудников
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)";
		
	Запрос.Выполнить();
	
	Отборы = Новый Массив;
	Если ИсключаемыйРегистратор <> Неопределено Тогда
		
		Отборы.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
			"Регистратор", "<>", ИсключаемыйРегистратор));
		
	КонецЕсли;
		
	ОтборыНачислений = Новый Структура("ПлановыеНачисления", Отборы);	
	
	ЗапросВТПлановыеНачисления = ЗапросВТПлановыеНачисленияСотрудников(Истина, "ВТПлановыеНачисленияСотрудников", "ВТОтбораСотрудников", "Сотрудник,Период", ОтборыНачислений, ФормироватьСПериодичностьДень);
	ЗапросВТПлановыеНачисления.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВТПлановыеНачисления.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлановыеНачисленияСотрудников.Период,
		|	ПлановыеНачисленияСотрудников.Сотрудник,
		|	ПлановыеНачисленияСотрудников.Начисление,
		|	ПлановыеНачисленияСотрудников.ДокументОснование,
		|	ПлановыеНачисленияСотрудников.Размер,
		|	ПлановыеНачисленияСотрудников.ОсновнойПоказатель,
		|	ПлановыеНачисленияСотрудников.НачислениеТарифнойСтавки,
		|	НачисленияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТНачисленияСотрудниковСПоказателями
		|ИЗ
		|	ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисленияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ПлановыеНачисленияСотрудников.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НачисленияСотрудниковСПоказателями.Период,
		|	НачисленияСотрудниковСПоказателями.Сотрудник,
		|	НачисленияСотрудниковСПоказателями.Показатель,
		|	НачисленияСотрудниковСПоказателями.ДокументОснование
		|ПОМЕСТИТЬ ВТИзмеренияДаты
		|ИЗ
		|	ВТНачисленияСотрудниковСПоказателями КАК НачисленияСотрудниковСПоказателями";
		
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = Отборы;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДаты",
			"Сотрудник,Показатель,ДокументОснование"),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияСотрудниковСПоказателями.Период,
		|	НачисленияСотрудниковСПоказателями.Сотрудник КАК Сотрудник,
		|	НачисленияСотрудниковСПоказателями.Начисление КАК Начисление,
		|	НачисленияСотрудниковСПоказателями.ДокументОснование КАК ДокументОснование,
		|	НачисленияСотрудниковСПоказателями.Размер КАК Размер,
		|	НачисленияСотрудниковСПоказателями.ОсновнойПоказатель КАК ОсновнойПоказатель,
		|	НачисленияСотрудниковСПоказателями.НачислениеТарифнойСтавки КАК НачислениеТарифнойСтавки,
		|	НачисленияСотрудниковСПоказателями.Показатель,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
		|ИЗ
		|	ВТНачисленияСотрудниковСПоказателями КАК НачисленияСотрудниковСПоказателями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|		ПО НачисленияСотрудниковСПоказателями.Период = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Период
		|			И НачисленияСотрудниковСПоказателями.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник
		|			И НачисленияСотрудниковСПоказателями.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель
		|			И НачисленияСотрудниковСПоказателями.ДокументОснование = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование
		|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение <> 0)
		|ИТОГИ
		|	МАКСИМУМ(Размер),
		|	МАКСИМУМ(ОсновнойПоказатель),
		|	МАКСИМУМ(НачислениеТарифнойСтавки)
		|ПО
		|	Сотрудник,
		|	Начисление,
		|	ДокументОснование";
		
	ПлановыеНачисленияСотрудников = Новый Соответствие;
	
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		
		НачисленияСотрудников = Новый Соответствие;
		ВыборкаПоНачислениям = ВыборкаПоСотрудникам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			
			ОписанияНачислений = Новый ТаблицаЗначений;
			ОписанияНачислений.Колонки.Добавить("Начисление");
			ОписанияНачислений.Колонки.Добавить("ДокументОснование");
			ОписанияНачислений.Колонки.Добавить("Размер");
			ОписанияНачислений.Колонки.Добавить("ОсновнойПоказатель");
			ОписанияНачислений.Колонки.Добавить("НачислениеТарифнойСтавки");
			ОписанияНачислений.Колонки.Добавить("Показатели");
			ОписанияНачислений.Индексы.Добавить("ДокументОснование");
			
			ВыборкаПоОснованиям = ВыборкаПоНачислениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоОснованиям.Следующий() Цикл
				
				ОписаниеНачисления = ОписанияНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(ОписаниеНачисления, ВыборкаПоОснованиям);
				
				ОписаниеПоказателей = Новый Соответствие;
				ВыборкаПоПоказателям = ВыборкаПоОснованиям.Выбрать();
				Пока ВыборкаПоПоказателям.Следующий() Цикл
					ОписаниеПоказателей.Вставить(ВыборкаПоПоказателям.Показатель, ВыборкаПоПоказателям.Значение);
				КонецЦикла; 
				
				ОписаниеНачисления.Показатели = ОписаниеПоказателей;
				
			КонецЦикла;
			
			НачисленияСотрудников.Вставить(ВыборкаПоНачислениям.Начисление, ОписанияНачислений);
			
		КонецЦикла; 
		
		ПлановыеНачисленияСотрудников.Вставить(ВыборкаПоСотрудникам.Сотрудник, НачисленияСотрудников);
		
	КонецЦикла;
	
	Возврат ПлановыеНачисленияСотрудников; 
	
КонецФункции

Процедура ДобавитьКомандуПечатиПриказаОПредоставленииОтпуска(КомандыПечати) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеКадровогоСостоянияРасширенная,ЧтениеКадровогоСостоянияРасширенная,ДобавлениеИзменениеОтпусков,ЧтениеОтпусков", , Ложь) Тогда
		КадровыйУчет.ДобавитьКомандуПечатиПриказаОПредоставленииОтпуска(КомандыПечати);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТекущиеКадровыеДанныеПоДоговорамГПХ(Сотрудники) Экспорт
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		ОбновляемыеСотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	Иначе
		ОбновляемыеСотрудники = Сотрудники;
	КонецЕсли;
	
 	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбновляемыеСотрудники", ОбновляемыеСотрудники);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТОбновляемыеЛюди
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&ОбновляемыеСотрудники)
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ТекущиеКадровыеДанныеСотрудников.Сотрудник ЕСТЬ NULL 
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЕстьРабочееМестоПоТрудовомуДоговору,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЭтоСотрудникПоТрудовомуДоговору
		|ПОМЕСТИТЬ ВТСотрудникиКОбновлению
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))
		|			И Сотрудники.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|			И Сотрудники.ГоловнаяОрганизация = ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбновляемыеЛюди КАК ОбновляемыеЛюди
		|		ПО Сотрудники.ФизическоеЛицо = ОбновляемыеЛюди.ФизическоеЛицо
		|			И Сотрудники.ГоловнаяОрганизация = ОбновляемыеЛюди.ГоловнаяОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.Ссылка,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиКОбновлению.Сотрудник,
		|	СотрудникиКОбновлению.ФизическоеЛицо,
		|	СотрудникиКОбновлению.ГоловнаяОрганизация,
		|	МАКСИМУМ(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПоздниеДатыОкончанияДоговоров
		|ИЗ
		|	ВТСотрудникиКОбновлению КАК СотрудникиКОбновлению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ПО СотрудникиКОбновлению.Сотрудник = ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник
		|			И (НЕ СотрудникиКОбновлению.ЭтоСотрудникПоТрудовомуДоговору)
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиКОбновлению.Сотрудник,
		|	СотрудникиКОбновлению.ФизическоеЛицо,
		|	СотрудникиКОбновлению.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания КАК ДатаОкончания,
		|	МАКСИМУМ(ПериодыДействияДоговоровГражданскоПравовогоХарактера.Регистратор) КАК Регистратор
		|ПОМЕСТИТЬ ВТПоследниеДоговоры
		|ИЗ
		|	ВТПоздниеДатыОкончанияДоговоров КАК ПоздниеДатыОкончанияДоговоров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ПО ПоздниеДатыОкончанияДоговоров.Сотрудник = ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник
		|			И ПоздниеДатыОкончанияДоговоров.ДатаОкончания = ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация.ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоследниеДоговоры.ФизическоеЛицо,
		|	ПоследниеДоговоры.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	МАКСИМУМ(ПоследниеДоговоры.ДатаОкончания) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПоздниеДатыОкончанияДоговоровФизическихЛиц
		|ИЗ
		|	ВТПоследниеДоговоры КАК ПоследниеДоговоры
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоследниеДоговоры.ФизическоеЛицо,
		|	ПоследниеДоговоры.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоследниеДоговоры.ФизическоеЛицо,
		|	ПоследниеДоговоры.ГоловнаяОрганизация,
		|	МАКСИМУМ(ПоследниеДоговоры.Сотрудник) КАК Сотрудник
		|ПОМЕСТИТЬ ВТОсновныеДоговорникиФизическихЛиц
		|ИЗ
		|	ВТПоследниеДоговоры КАК ПоследниеДоговоры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоздниеДатыОкончанияДоговоровФизическихЛиц КАК ПоздниеДатыОкончанияДоговоровФизическихЛиц
		|		ПО ПоследниеДоговоры.ФизическоеЛицо = ПоздниеДатыОкончанияДоговоровФизическихЛиц.ФизическоеЛицо
		|			И ПоследниеДоговоры.ГоловнаяОрганизация = ПоздниеДатыОкончанияДоговоровФизическихЛиц.ГоловнаяОрганизация
		|			И ПоследниеДоговоры.ДатаОкончания = ПоздниеДатыОкончанияДоговоровФизическихЛиц.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоследниеДоговоры.ФизическоеЛицо,
		|	ПоследниеДоговоры.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация КАК ТекущаяОрганизация,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение КАК ТекущееПодразделение,
		|	ВЫБОР
		|		КОГДА НЕ ОсновныеДоговорникиФизическихЛиц.Сотрудник ЕСТЬ NULL 
		|				И НЕ ЕСТЬNULL(СотрудникиКОбновлению.ЕстьРабочееМестоПоТрудовомуДоговору, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОсновноеРабочееМестоВОрганизации
		|ПОМЕСТИТЬ ВТЗаписиКОбновлению
		|ИЗ
		|	ВТПоследниеДоговоры КАК ПоследниеДоговоры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ПО ПоследниеДоговоры.Регистратор = ПериодыДействияДоговоровГражданскоПравовогоХарактера.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиКОбновлению КАК СотрудникиКОбновлению
		|		ПО ПоследниеДоговоры.Сотрудник = СотрудникиКОбновлению.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеДоговорникиФизическихЛиц КАК ОсновныеДоговорникиФизическихЛиц
		|		ПО ПоследниеДоговоры.Сотрудник = ОсновныеДоговорникиФизическихЛиц.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиКОбновлению.Сотрудник,
		|	СотрудникиКОбновлению.ФизическоеЛицо,
		|	СотрудникиКОбновлению.ГоловнаяОрганизация,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	ЛОЖЬ
		|ИЗ
		|	ВТСотрудникиКОбновлению КАК СотрудникиКОбновлению
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеДоговоры КАК ПоследниеДоговоры
		|		ПО СотрудникиКОбновлению.Сотрудник = ПоследниеДоговоры.Сотрудник
		|ГДЕ
		|	НЕ СотрудникиКОбновлению.ЭтоСотрудникПоТрудовомуДоговору
		|	И ПоследниеДоговоры.Сотрудник ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаписиКОбновлению.Сотрудник,
		|	ЗаписиКОбновлению.ФизическоеЛицо,
		|	ЗаписиКОбновлению.ГоловнаяОрганизация,
		|	ЗаписиКОбновлению.ТекущаяОрганизация,
		|	ЗаписиКОбновлению.ТекущееПодразделение,
		|	ЗаписиКОбновлению.ОсновноеРабочееМестоВОрганизации
		|ИЗ
		|	ВТЗаписиКОбновлению КАК ЗаписиКОбновлению
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ЗаписиКОбновлению.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|ГДЕ
		|	(ЗаписиКОбновлению.ГоловнаяОрганизация <> ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|			ИЛИ ЗаписиКОбновлению.ТекущаяОрганизация <> ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|			ИЛИ ЗаписиКОбновлению.ТекущееПодразделение <> ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
		|			ИЛИ ЗаписиКОбновлению.ОсновноеРабочееМестоВОрганизации <> ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации, НЕ ЗаписиКОбновлению.ОсновноеРабочееМестоВОрганизации))";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли;
	
	РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьДанныеДляПодбораДоговорниковГПХ(ОбновляемыеСотрудники);
	
КонецПроцедуры

Функция НеобходимыКадровыеДанныеФизическогоЛица(ИмяПоля) Экспорт
	
	НеобходимыКадровыеДанные =  КадровыйУчетБазовый.НеобходимыКадровыеДанныеФизическогоЛица(ИмяПоля)
		Или НеобходимыСведенияОСтажахФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОСостоянияхВБракеФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОВоинскомУчетеФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОБронированииСотрудников(ИмяПоля);
	
			
	
	Возврат НеобходимыКадровыеДанные;
	
КонецФункции

// Предназначена для получения настроек подсистемы.
//
// Возвращаемое значение - структура с именем настройки в качестве ключа.
//
Функция НастройкиВоинскогоУчета() Экспорт
	
	НастройкиВоинскогоУчета = РегистрыСведений.НастройкиВоинскогоУчета.СоздатьМенеджерЗаписи();
	НастройкиВоинскогоУчета.Прочитать();
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
							НастройкиВоинскогоУчета, Метаданные.РегистрыСведений.НастройкиВоинскогоУчета);
	
	Если НастройкиВоинскогоУчета.Выбран() Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	// Если настройки не заполнены, устанавливаем значения по умолчанию.
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("ИспользоватьВоинскийУчет", Ложь);
	ЗначенияПоУмолчанию.Вставить("ИспользоватьМобилизационныеПредписания", Ложь);
	
	Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
		СтруктураНастроек.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

#КонецОбласти


#Область ПолучениеСотрудниковОрганизации

// Различаются следующие подмножества сотрудников:
// 		* Сотрудники принятые только по трудовым договорам (1).
//		* Сотрудники с которыми только заключен договор ГПХ (2).
//		* Сотрудники принятые по трудовым договорам и с которыми заключены договоры ГПХ (3).
//
// Для получения сотрудников используются параметры:
//		* РаботникиПоТрудовымДоговорам.
//		* РаботникиПоДоговорамГПХ.
//
//
// Различаются следующие сочетания параметров:
//
//		РаботникиПоТрудовымДоговорам = Истина
//		РаботникиПоДоговорамГПХ = Ложь
//			В выборку войдет только 1 подмножество сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Истина
//		РаботникиПоДоговорамГПХ = Неопределено
//			В выборку войдут 1 и 3 подмножества сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Истина
//		РаботникиПоДоговорамГПХ = Истина
//			В выборку войдут 1,2 и 3 подмножества сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Неопределено
//		РаботникиПоДоговорамГПХ = Истина
//			В выборку войдут 2 и 3 подмножества сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Ложь
//		РаботникиПоДоговорамГПХ = Истина
//			В выборку войдет только 2 подмножество сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Ложь
//		РаботникиПоДоговорамГПХ = Ложь
//			Сформирует пустую таблицу.
//	
// При другом сочетании параметров будет вызвано исключение.
//
//
// Параметр ПодработкиСотрудниковПоТрудовымДоговорам расширяет подмножества
// возможностей выбора сотрудников оформленных по трудовым договорам.
//
// Различаются следующие сочетания:
//		РаботникиПоТрудовымДоговорам = Истина
//		ПодработкиСотрудниковПоТрудовымДоговорам = Ложь
//			В выборку попадут только головные сотрудники.
//
//		РаботникиПоТрудовымДоговорам = Истина
//		ПодработкиСотрудниковПоТрудовымДоговорам = Истина
//			В выборку попадут как головные сотрудники, так и подработки.
//
//		РаботникиПоТрудовымДоговорам = Неопределено
//		ПодработкиСотрудниковПоТрудовымДоговорам = Истина
//			В выборку попадут только подработки.
//
// При значении параметра РаботникиПоТрудовымДоговорам = Ложь, значение параметра
// ПодработкиСотрудниковПоТрудовымДоговорам игнорируется. Т.е. в выборку не попадут
// ни головные сотрудники ни подработки. 
//
// При отборе подработок учитываются те же параметры отбора по периоду, организации
// и подразделению, что применяются для отбора головных сотрудников.
//

// Возвращает структуру параметров для СоздатьВТСотрудникиОрганизаций. Структура содержит
// ключи возвращаемые КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц.
// Добавляет ключи РаботникиПоТрудовымДоговорам и РаботникиПоДоговорамГПХ. Позволяет формировать списки
// сотрудников с различными сочетаниями трудовых отношений.
//
// Возвращаемое значение:
//   	Структура - Содержит дополнительные ключи:
//				* РаботникиПоТрудовымДоговорам 				- Булево, Неопределено (Истина - работник по ТД, Ложь - не работает по ТД
//																Неопределено - неважно наличие ТД).
//				* ПодработкиРаботниковПоТрудовымДоговорам 	- Булево.
//				* РаботникиПоДоговорамГПХ 					- Булево, Неопределено (Истина - есть действующие договоры ГПХ, Ложь - нет
//																действующих договоров ГПХ, Неопределено - неважно наличие действующего
//																договора ГПХ).
//
Функция ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц() Экспорт
		
	ПараметрыПолученияСотрудников = КадровыйУчетБазовый.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ДополнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников);
	
	Возврат ПараметрыПолученияСотрудников;
	
КонецФункции

// Возвращает структуру параметров для СоздатьВТСотрудникиОрганизаций. Структура содержит
// ключи возвращаемые КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице.
// Добавляет ключи РаботникиПоТрудовымДоговорам и РаботникиПоДоговорамГПХ. Позволяет формировать списки
// сотрудников с различными сочетаниями трудовых отношений.
//
// Возвращаемое значение:
//   	Структура - Содержит дополнительные ключи:
//				* РаботникиПоТрудовымДоговорам 				- Булево, Неопределено (Истина - работник по ТД, Ложь - не работает по ТД
//																Неопределено - неважно наличие ТД).
//				* ПодработкиРаботниковПоТрудовымДоговорам 	- Булево.
//				* РаботникиПоДоговорамГПХ 					- Булево, Неопределено (Истина - есть действующие договоры ГПХ, Ложь - нет
//																действующих договоров ГПХ, Неопределено - неважно наличие действующего
//																договора ГПХ).
//
Функция ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице() Экспорт

	ПараметрыПолученияСотрудников =  КадровыйУчетБазовый.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ДополнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников);
	
	Возврат ПараметрыПолученияСотрудников;
	
КонецФункции

Процедура ДополнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников)
	
	ПараметрыПолученияСотрудников.Вставить("РаботникиПоТрудовымДоговорам", Истина);
	ПараметрыПолученияСотрудников.Вставить("ПодработкиРаботниковПоТрудовымДоговорам", Ложь);
	ПараметрыПолученияСотрудников.Вставить("РаботникиПоДоговорамГПХ", Неопределено);
	
КонецПроцедуры

Функция ЗапросВТОтборСотрудниковОрганизации(ТолькоРазрешенные, Параметры, ИмяВТСотрудникиПериоды) Экспорт
	
	// Ожидается, что периоды получения сотрудников могут задаваться датами или строками (при подготовке запросов для СКД).
	// В случае если окончание периода задано датой, то его значение приводится к концу дня.
	Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
		ОкончаниеПериода = Параметры.ОкончаниеПериода;
	Иначе
		
		Если ЗначениеЗаполнено(Параметры.ОкончаниеПериода) Тогда
			ОкончаниеПериода = КонецДня(Параметры.ОкончаниеПериода);			
		Иначе
			ОкончаниеПериода = Параметры.ОкончаниеПериода;
		КонецЕсли;
		
	КонецЕсли;
	
	РаботникиПоТрудовымДоговорам = Параметры.РаботникиПоТрудовымДоговорам;
	ПодработкиРаботниковПоТрудовымДоговорам = Параметры.ПодработкиРаботниковПоТрудовымДоговорам;
	РаботникиПоДоговорамГПХ = Параметры.РаботникиПоДоговорамГПХ;
	
	Если РаботникиПоТрудовымДоговорам = Ложь Тогда
		ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
	КонецЕсли; 
	
	Если РаботникиПоТрудовымДоговорам = Ложь
		И РаботникиПоДоговорамГПХ = Ложь Тогда
		
		Запрос = Новый Запрос;
			
	Иначе
			
		Если (РаботникиПоТрудовымДоговорам = Неопределено И ПодработкиРаботниковПоТрудовымДоговорам <> Истина И РаботникиПоДоговорамГПХ = Ложь)
			Или (РаботникиПоТрудовымДоговорам = Ложь И РаботникиПоДоговорамГПХ = Неопределено)
			Или (РаботникиПоТрудовымДоговорам = Неопределено И РаботникиПоДоговорамГПХ = Неопределено) Тогда
			
			ВызватьИсключение НСтр("ru='Не верно заданы параметры получения сотрудников организации';uk='Не вірно задані параметри отримання співробітників організації'");
			
		КонецЕсли;
		
		Если РаботникиПоТрудовымДоговорам = Неопределено
			И ПодработкиРаботниковПоТрудовымДоговорам = Истина
			И РаботникиПоДоговорамГПХ = Ложь Тогда
			
			Запрос = КадровыйУчетБазовый.ЗапросВТОтборСотрудниковОрганизации(ТолькоРазрешенные, Параметры, ИмяВТСотрудникиПериоды);
			
		Иначе
			
			Если Параметры.Свойство("СписокФизическихЛиц") Тогда
				ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
			Иначе
				ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПолучения, Параметры);
			ПараметрыПолучения.РаботникиПоДоговорамГПХ = Ложь;
			
			Запрос = КадровыйУчетБазовый.ЗапросВТОтборСотрудниковОрганизации(ТолькоРазрешенные, Параметры, ИмяВТСотрудникиПериоды);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСотрудникиОрганизацииПоРабочимМестам(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВТСотрудникиПериоды, Параметры, МенеджерВременныхТаблиц) Экспорт
	
	РаботникиПоТрудовымДоговорам = Параметры.РаботникиПоТрудовымДоговорам;
	ПодработкиРаботниковПоТрудовымДоговорам = Параметры.ПодработкиРаботниковПоТрудовымДоговорам;
	РаботникиПоДоговорамГПХ = Параметры.РаботникиПоДоговорамГПХ;
	
	Если РаботникиПоТрудовымДоговорам = Ложь Тогда
		ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
	КонецЕсли; 
	
	Если РаботникиПоТрудовымДоговорам = Ложь
		И РаботникиПоДоговорамГПХ = Ложь Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
			|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиОрганизации
			|ГДЕ
			|	ЛОЖЬ";
			
		Если Не ПустаяСтрока(Параметры.КадровыеДанные) Тогда
			
			ПоляКадровыхДанных = "";
			
			МассивИменПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Параметры.КадровыеДанные, ",", Истина, Истина);
			Для каждого ИмяПоля Из МассивИменПолей Цикл
				
				ИмяПоляВРег = ВРег(ИмяПоля);
				Если ИмяПоляВРег = ВРег("Период")
					Или ИмяПоляВРег = ВРег("Сотрудник")
					Или ИмяПоляВРег = ВРег("ФизическоеЛицо")Тогда
					
					Продолжить;
					
				КонецЕсли; 
				
				ПоляКадровыхДанных = ПоляКадровыхДанных + "," + Символы.ПС + "	NULL КАК " + ИмяПоля;

			КонецЦикла;
			
			Если Не ПустаяСтрока(ПоляКадровыхДанных) Тогда
				ПоляКадровыхДанных = "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо" + ПоляКадровыхДанных;
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо", ПоляКадровыхДанных);
			КонецЕсли; 
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиОрганизации", ИмяВТСотрудникиОрганизации);
			
	Иначе
		
		Если РаботникиПоТрудовымДоговорам = Неопределено
			И ПодработкиРаботниковПоТрудовымДоговорам = Истина
			И РаботникиПоДоговорамГПХ = Ложь Тогда
			
			Запрос = КадровыйУчетБазовый.ЗапросВТСотрудникиОрганизацииПоРабочимМестам(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВТСотрудникиПериоды, Параметры, МенеджерВременныхТаблиц);
			
		Иначе
			
			Если РаботникиПоТрудовымДоговорам = Неопределено 
				И ПодработкиРаботниковПоТрудовымДоговорам <> Истина
				И РаботникиПоДоговорамГПХ = Истина Тогда
				
				Запрос = Новый Запрос;
				КадровыеДанные = Параметры.КадровыеДанные;
				
			Иначе
				
				Если РаботникиПоТрудовымДоговорам <> Ложь
					И РаботникиПоДоговорамГПХ = Неопределено Тогда
					
					ИмяВТПромежуточнаяСотрудникиОрганизации = ИмяВТСотрудникиОрганизации;
					
				Иначе
					
					ИмяВТПромежуточнаяСотрудникиОрганизации = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПромежуточнаяСотрудникиОрганизации");
					
					КадровыеДанные = Параметры.КадровыеДанные;
					Параметры.КадровыеДанные = "";
					
				КонецЕсли;
				
				Если Параметры.Свойство("СписокФизическихЛиц") Тогда
					ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
				Иначе
					ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ПараметрыПолучения, Параметры);
				ПараметрыПолучения.РаботникиПоДоговорамГПХ = Ложь;
				
				Запрос = КадровыйУчетБазовый.ЗапросВТСотрудникиОрганизацииПоРабочимМестам(ТолькоРазрешенные, ИмяВТПромежуточнаяСотрудникиОрганизации, ИмяВТСотрудникиПериоды, Параметры, МенеджерВременныхТаблиц);
				
			КонецЕсли;
			
			Если РаботникиПоДоговорамГПХ <> Неопределено Тогда
				
				СписокФизическихЛиц = Неопределено;
				ИмяВТФизическиеЛица = Неопределено;
				
				ПараметрыОтбораПоОрганизациям = КадровыйУчет.ПараметрыОтбораПоОрганизациям(Параметры);
				
				Параметры.Свойство("СписокФизическихЛиц", СписокФизическихЛиц);
				Параметры.Свойство("ИмяВТФизическиеЛица", ИмяВТФизическиеЛица);
			
				ИмяВТГПХСотрудникиОрганизации = ИмяВТСотрудникиОрганизации;
				
				Если ТипЗнч(Параметры.НачалоПериода) = Тип("Строка") Тогда
					ТекстДатаНачала = Параметры.НачалоПериода;
				Иначе
					ТекстДатаНачала = "ДАТАВРЕМЯ(" + Формат(Параметры.НачалоПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
				КонецЕсли;
				
				Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
					ОкончаниеПериода = Параметры.ОкончаниеПериода;
				Иначе
					
					Если ЗначениеЗаполнено(Параметры.ОкончаниеПериода) Тогда
						ОкончаниеПериода = КонецДня(Параметры.ОкончаниеПериода);			
					Иначе
						ОкончаниеПериода = Параметры.ОкончаниеПериода;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ТипЗнч(ОкончаниеПериода) = Тип("Строка") Тогда
					ТекстДатаОкончания = ОкончаниеПериода;
				Иначе
					ТекстДатаОкончания = "ДАТАВРЕМЯ(" + Формат(ОкончаниеПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
				КонецЕсли;
				
				ТекстЗапросаПоДоговорникам =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	&ДатаОкончания КАК Период,
					|	&ДатаОкончания КАК ПериодЗаписи,
					|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник КАК Сотрудник,
					|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо КАК ФизическоеЛицо
					|ПОМЕСТИТЬ ВТГПХСотрудникиОрганизации
					|ИЗ
					|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
					|ГДЕ
					|	(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала <= КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
					|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
					|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)";
					
				Отборы = Неопределено;
				Если Параметры.Свойство("Отборы",  Отборы)
					И Отборы <> Неопределено Тогда
					
					ИмяВТСотрудникиПоКритериямПоиска = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСотрудникиПоКритериямПоиска");
					
					КритерииПоиска = КадровыйУчет.КритерииПоискаСотрудниковПоКоллекцииОтборов(Отборы);
					ЗапросВТСотрудникиПоКритериямПоиска = КадровыйУчет.ЗапросВТСотрудникиПоКритериямПоиска(
						КритерииПоиска, ТолькоРазрешенные, "Справочник.Сотрудники", ИмяВТСотрудникиПоКритериямПоиска);
						
					ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТСотрудникиПоКритериямПоиска);
						
					ТекстЗапросаПоДоговорникам =
						ЗапросВТСотрудникиПоКритериямПоиска.Текст
						+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
						+ ТекстЗапросаПоДоговорникам;
						
					ТекстЗапросаПоДоговорникам = СтрЗаменить(ТекстЗапросаПоДоговорникам, "РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера",
						"РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
						|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТСотрудникиПоКритериямПоиска + " КАК СотрудникиПоКритериямПоиска
						|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник = СотрудникиПоКритериямПоиска.Сотрудник");
						
				КонецЕсли;
				
				Если СписокФизическихЛиц <> Неопределено Тогда
						
					ТекстЗапросаПоДоговорникам = ТекстЗапросаПоДоговорникам + "
						|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо В (&МассивФизическихЛицДоговорников)";
						
					Запрос.УстановитьПараметр("МассивФизическихЛицДоговорников", СписокФизическихЛиц);
					
				ИначеЕсли ИмяВТФизическиеЛица <> Неопределено Тогда
					
					ТекстЗапросаПоДоговорникам = СтрЗаменить(ТекстЗапросаПоДоговорникам, "РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера",
						"РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
						|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТФизическиеЛица + " КАК ФизическиеЛица
						|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо = ФизическиеЛица." + Параметры.ИмяПоляФизическоеЛицо);
					
				КонецЕсли;
				
				Если ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации <> Неопределено Тогда
						
					ТекстЗапросаПоДоговорникам = ТекстЗапросаПоДоговорникам + "
						|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация.ГоловнаяОрганизация В (&ГоловныеОрганизацииВДоговоре)";
						
					Запрос.УстановитьПараметр("ГоловныеОрганизацииВДоговоре", ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации);
					
				ИначеЕсли ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.Организации) Тогда
						
					ТекстЗапросаПоДоговорникам = ТекстЗапросаПоДоговорникам + "
						|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация В (&ОрганизацииВДоговоре)";
					
					Запрос.УстановитьПараметр("ОрганизацииВДоговоре", ПараметрыОтбораПоОрганизациям.Организации);
						
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
					
					ТекстЗапросаПоДоговорникам = ТекстЗапросаПоДоговорникам + "
						|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение В ИЕРАРХИИ (&ПодразделениеВДоговоре)";
					
					Запрос.УстановитьПараметр("ПодразделениеВДоговоре", Параметры.Подразделение);
						
				КонецЕсли; 
					
				ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаПоДоговорникам, ТолькоРазрешенные);
					
				Если РаботникиПоТрудовымДоговорам <> Неопределено
					Или ПодработкиРаботниковПоТрудовымДоговорам = Истина Тогда
					
					ИмяВТПромежуточнаяГПХСотрудникиОрганизации = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПромежуточнаяГПХСотрудникиОрганизации");
					
					ТекстЗапросаПоДоговорникам = 
						СтрЗаменить(ТекстЗапросаПоДоговорникам, "ВТГПХСотрудникиОрганизации", ИмяВТПромежуточнаяГПХСотрудникиОрганизации);
						
					Если РаботникиПоТрудовымДоговорам = Истина
						Или ПодработкиРаботниковПоТрудовымДоговорам = Истина Тогда
						
						ТекстЗапросаПоСотрудникамИДоговорникам =
							"ВЫБРАТЬ
							|	СотрудникиОрганизации.Период,
							|	СотрудникиОрганизации.ПериодЗаписи,
							|	СотрудникиОрганизации.Сотрудник,
							|	СотрудникиОрганизации.ФизическоеЛицо
							|ПОМЕСТИТЬ ВТГПХСотрудникиОрганизации
							|ИЗ
							|	ВТПромежуточнаяСотрудникиОрганизации КАК СотрудникиОрганизации
							|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПромежуточнаяГПХСотрудникиОрганизации КАК СотрудникиОрганизацииГПХ
							|		ПО СотрудникиОрганизации.Сотрудник = СотрудникиОрганизацииГПХ.Сотрудник
							|ГДЕ
							|	СотрудникиОрганизацииГПХ.Сотрудник ЕСТЬ NULL";
							
						Если РаботникиПоДоговорамГПХ = Истина Тогда
								
							ТекстЗапросаПоСотрудникамИДоговорникам = ТекстЗапросаПоСотрудникамИДоговорникам + "
								|
								|ОБЪЕДИНИТЬ ВСЕ
								|
								|ВЫБРАТЬ РАЗЛИЧНЫЕ
								|	СотрудникиОрганизацииГПХ.Период,
								|	ЕСТЬNULL(СотрудникиОрганизации.ПериодЗаписи, СотрудникиОрганизацииГПХ.Период) КАК ПериодЗаписи,
								|	СотрудникиОрганизацииГПХ.Сотрудник,
								|	СотрудникиОрганизацииГПХ.ФизическоеЛицо
								|ИЗ
								|	ВТПромежуточнаяГПХСотрудникиОрганизации КАК СотрудникиОрганизацииГПХ
								|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПромежуточнаяСотрудникиОрганизации КАК СотрудникиОрганизации
								| 		ПО СотрудникиОрганизацииГПХ.Сотрудник = СотрудникиОрганизации.Сотрудник";
								
						КонецЕсли;
							
					ИначеЕсли РаботникиПоТрудовымДоговорам = Ложь Тогда
						
						ТекстЗапросаПоСотрудникамИДоговорникам =
							"ВЫБРАТЬ
							|	СотрудникиОрганизацииГПХ.Период,
							|	СотрудникиОрганизации.ПериодЗаписи,
							|	СотрудникиОрганизацииГПХ.Сотрудник,
							|	СотрудникиОрганизацииГПХ.ФизическоеЛицо
							|ПОМЕСТИТЬ ВТГПХСотрудникиОрганизации
							|ИЗ
							|	ВТПромежуточнаяГПХСотрудникиОрганизации КАК СотрудникиОрганизацииГПХ
							|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПромежуточнаяСотрудникиОрганизации КАК СотрудникиОрганизации
							|		ПО СотрудникиОрганизацииГПХ.Сотрудник = СотрудникиОрганизации.Сотрудник
							|ГДЕ
							|	СотрудникиОрганизации.Сотрудник ЕСТЬ NULL ";
						
					КонецЕсли;
						
					ТекстЗапросаПоСотрудникамИДоговорникам =
						СтрЗаменить(ТекстЗапросаПоСотрудникамИДоговорникам, "ВТПромежуточнаяСотрудникиОрганизации", ИмяВТПромежуточнаяСотрудникиОрганизации);
						
					ТекстЗапросаПоСотрудникамИДоговорникам =
						СтрЗаменить(ТекстЗапросаПоСотрудникамИДоговорникам, "ВТПромежуточнаяГПХСотрудникиОрганизации", ИмяВТПромежуточнаяГПХСотрудникиОрганизации);
					
					ТекстЗапросаПоДоговорникам =
						ТекстЗапросаПоДоговорникам
						+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
						+ ТекстЗапросаПоСотрудникамИДоговорникам;
						
				КонецЕсли; 
				
				Если Не ПустаяСтрока(КадровыеДанные) Тогда
					ИмяВТГПХСотрудникиОрганизации = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса(ИмяВТСотрудникиОрганизации);
				КонецЕсли; 
					
				ТекстЗапросаПоДоговорникам = СтрЗаменить(ТекстЗапросаПоДоговорникам, "&ДатаНачала", ТекстДатаНачала);
				ТекстЗапросаПоДоговорникам = СтрЗаменить(ТекстЗапросаПоДоговорникам, "&ДатаОкончания", ТекстДатаОкончания);
				ТекстЗапросаПоДоговорникам = СтрЗаменить(ТекстЗапросаПоДоговорникам, "ВТГПХСотрудникиОрганизации", ИмяВТГПХСотрудникиОрганизации);
				
				ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаПоДоговорникам);
					
				КадровыйУчетБазовый.ДополнитьЗапросВТСотрудникиОрганизацииКадровымиДанными(
					Запрос,
					ТолькоРазрешенные,
					ИмяВТСотрудникиОрганизации,
					ИмяВТГПХСотрудникиОрганизации,
					КадровыеДанные);
					
			КонецЕсли;
		
		КонецЕсли; 
	
	КонецЕсли;
		
	Возврат Запрос;
	
КонецФункции

Процедура ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(ПараметрыПолученияСотрудников) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыПолученияСотрудников.Подразделение) Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
			ПараметрыПолученияСотрудников.Подразделение = Неопределено;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Другие методы получения сотрудников.

Функция ПараметрыПолученияОсновныхСотрудниковФизическихЛиц(СписокФизическихЛиц, Организация, НачалоПериода, ОкончаниеПериода) Экспорт
	
	ПараметрыПолучения = КадровыйУчетБазовый.ПараметрыПолученияОсновныхСотрудниковФизическихЛиц(СписокФизическихЛиц, Организация, НачалоПериода, ОкончаниеПериода);
	Если ПривилегированныйРежим() Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера) Тогда
		ПараметрыПолучения.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли; 
	
	Возврат ПараметрыПолучения;
	
КонецФункции

Функция ПараметрыПолученияРабочихМестВОрганизацийПоСпискуФизическихЛиц() Экспорт
	
	ПараметрыПолучения =  КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Если ПривилегированныйРежим() Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера) Тогда
		ПараметрыПолучения.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыПолучения;
	
КонецФункции

Функция ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице() Экспорт
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	Если ПривилегированныйРежим() Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера) Тогда
		ПараметрыПолучения.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыПолучения;
	
КонецФункции

Процедура СоздатьВТСтажиФизическихЛиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяВТТаблицаОтборовФизическихЛиц, ПолучатьБудущиеЗначенияСтажей = Ложь, ИмяВТСтажиФизическихЛиц = "ВТСтажиФизическихЛиц")
	
	ПоляОтбораФизическихЛиц = КадровыйУчет.ПоляОтбораФизическихЛиц();
	
	ОписательВременнойТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
		ИмяВТТаблицаОтборовФизическихЛиц,
		ПоляОтбораФизическихЛиц.ФизическоеЛицо,
		ПоляОтбораФизическихЛиц.Период);
	
	Запрос = ЗапросВТСтажиФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПолучатьБудущиеЗначенияСтажей, ИмяВТСтажиФизическихЛиц);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры
Функция ДнейСтажаДругихСтрахователейЗа12Месяцев(ДатаНачала, ДатаОкончания, ФизическоеЛицо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФССОбороты.ДнейСтажаОборот),0) КАК ДнейСтажа
	|ИЗ
	|	РегистрНакопления.ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФСС.Обороты(&ДатаНачала, &ДатаОкончания, Месяц, 
	|	ФизическоеЛицо = &ФизическоеЛицо) КАК ДанныеСтрахователейДляРасчетаСреднегоЗаработкаФССОбороты";
	
	Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
	Запрос.УстановитьПараметр("ФизическоеЛицо",ФизическоеЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДнейСтажа
	Иначе
		Возврат 0
	КонецЕсли;	
	
КонецФункции	

Функция ЗапросВТВсеЗначенияДоступаСотрудников(Сотрудники) Экспорт
	
	Запрос =  КадровыйУчетБазовый.ЗапросВТВсеЗначенияДоступаСотрудников(Сотрудники);
	
	Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|ГДЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник В(&Сотрудники)";
	
	Возврат Запрос;
	
КонецФункции

Функция КритерииПоискаСотрудниковПоКоллекцииОтборов(Отборы) Экспорт
	
	КритерииПоиска = Новый Соответствие;
	ОтборыБазовыхКадровыхДанных = Новый Массив;
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
	КонецЕсли; 
	
	Для каждого УсловиеПоиска Из Отборы Цикл
		
		Если ТипЗнч(УсловиеПоиска) = Тип("Соответствие") Тогда
			
			Для каждого ЭлементСоответствия Из УсловиеПоиска Цикл
				КритерииПоиска.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
			КонецЦикла;
			
			Продолжить;
			
		ИначеЕсли ДобавитьКритерийПоискаПоСведениямОСтажахФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОВоинскомУчетеФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОБронированииГражданОрганизациями(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОбУченыхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОбУченыхСтепеняхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОЗнанииЯзыковФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОПрофессияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОПочетныхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОРазрядахКатегориях(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОПКУ(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОСостоянииСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОТерриторияхСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОГрафикахРаботыСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОбОбразованииФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьКритерийПоискаПоСведениямОКлассныхЧинахРангахФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьКритерийПоискаПоСведениямОВоинскихСпециальныхЗванияхФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или ЕстьПодсистемаГосударственнаяСлужба
				И МодульГосударственнаяСлужба.ДобавитьКритерийПоискаПоСведениямРеестраГосслужащих(КритерииПоиска, УсловиеПоиска) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОтборыБазовыхКадровыхДанных.Добавить(УсловиеПоиска);
		
	КонецЦикла;
	
	УточнитьУсловияКритериевПоискаПоСведениямОСтажахФизическихЛиц(КритерииПоиска);
	
	Если ОтборыБазовыхКадровыхДанных.Количество() > 0 Тогда
		
		КритерииПоискаБазовыхКадровыхДанных = КадровыйУчетБазовый.КритерииПоискаСотрудниковПоКоллекцииОтборов(ОтборыБазовыхКадровыхДанных);
		Для каждого КритерийПоиска Из КритерииПоискаБазовыхКадровыхДанных Цикл
			
			ОписаниеКритерия = КритерииПоиска.Получить(КритерийПоиска.Ключ);
			Если ОписаниеКритерия = Неопределено Тогда
				КритерииПоиска.Вставить(КритерийПоиска.Ключ, КритерийПоиска.Значение);
			Иначе
				КритерииПоиска.Вставить(КритерийПоиска.Ключ + ".БазовыеКадровыеДанные", КритерийПоиска.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат КритерииПоиска;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииПолученияДанныхДляОтчетов

Функция ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник, ИмяПоляДатаОкончания = "") Экспорт
	
	ОписанияНачисленийПоПериодам = Новый Соответствие;
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная") Тогда
		Возврат ОписанияНачисленийПоПериодам;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТСотрудникиПериоды, "Сотрудник");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ИмяПоляСотрудник);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		,
		"ВТПлановыеНачисленияСрезПоследних");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		,
		"ВТПлановыйФОТСрезПоследних");
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ВЫРАЗИТЬ(ПлановыеНачисления.Начисление КАК ПланВидовРасчета.Начисления) КАК Начисление,
		|	ВЫБОР
		|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
		|			ТОГДА ПлановыеНачисления.Размер
		|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
		|	КОНЕЦ КАК Размер,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.ПериодВозвратногоСобытия,
		|	ПлановыеНачисления.ДокументОснование
		|ПОМЕСТИТЬ ВТПлановыеНачисления
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
		|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
		|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
		|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование,
		|	МИНИМУМ(ПлановыеНачисления.Начисление.РеквизитДопУпорядочивания) КАК РеквизитДопУпорядочивания
		|ПОМЕСТИТЬ ВТОсновныеНачисленияСотрудников
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.Начисление.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисления.Начисление
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Начисление,
		|	НачисленияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТНачислениеСПоказателем
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО Начисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ОсновнойПоказатель)";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Размер,
		|	ПлановыеНачисления.Начисление.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	НачислениеСПоказателем.Показатель,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.ПериодВозвратногоСобытия,
		|	ПлановыеНачисления.ДокументОснование
		|ПОМЕСТИТЬ ВТПлановыеНачисленияСПоказателем
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислениеСПоказателем КАК НачислениеСПоказателем
		|		ПО ПлановыеНачисления.Начисление = НачислениеСПоказателем.Начисление";
	
	Если Не ПустаяСтрока(ИмяПоляДатаОкончания) Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСотрудникиПериоды + " КАК СотрудникиПериоды
			|	ПО ПлановыеНачисления.Период = СотрудникиПериоды." + ИмяПоляПериод + "
			|		И ПлановыеНачисления.Сотрудник = СотрудникиПериоды." + ИмяПоляСотрудник;
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,",
			"СотрудникиПериоды." + ИмяПоляДатаОкончания + " КАК ДатаОкончания,");
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТПлановыеНачисленияСПоказателем", "Сотрудник,Показатель");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		,
		"ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.ПериодВозвратногоСобытия КАК Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление
		|ПОМЕСТИТЬ ВТОтборВозвратныхСобытийПлановыеНачисления
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.ПериодВозвратногоСобытия <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.ПериодВозвратногоСобытия КАК Период,
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Организация,
		|	ЗначенияПоказателей.Показатель
		|ПОМЕСТИТЬ ВТОтборВозвратныхСобытийЗначенияПоказателей
		|ИЗ
		|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПоказателей
		|ГДЕ
		|	ЗначенияПоказателей.ПериодВозвратногоСобытия <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОтборВозвратныхСобытийПлановыеНачисления", "Сотрудник,Начисление"),
		,
		"ВТПлановыеНачисленияВозвратные");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОтборВозвратныхСобытийЗначенияПоказателей", "Сотрудник,Организация,Показатель"),
		,
		"ВТЗначенияПоказателейВозвратные");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисленияСПоказателем.Период КАК Период,
		|	ПлановыеНачисленияСПоказателем.Сотрудник КАК Сотрудник,
		|	ПлановыеНачисленияСПоказателем.Начисление,
		|	ПлановыеНачисленияСПоказателем.РеквизитДопУпорядочивания * ВЫБОР
		|		КОГДА ОсновныеНачисленияСотрудников.РеквизитДопУпорядочивания ЕСТЬ NULL 
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК РеквизитДопУпорядочивания,
		|	ПлановыеНачисленияСПоказателем.Размер,
		|	ПлановыеНачисленияСПоказателем.Используется КАК Используется,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).КраткоеНаименование <> """"
		|			ТОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).КраткоеНаименование
		|		КОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Начисление КАК ПланВидовРасчета.Начисления).КраткоеНаименование <> """"
		|			ТОГДА ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Начисление КАК ПланВидовРасчета.Начисления).КраткоеНаименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).Наименование
		|	КОНЕЦ КАК Показатель,
		|	ВЫРАЗИТЬ(ПлановыеНачисленияСПоказателем.Показатель КАК Справочник.ПоказателиРасчетаЗарплаты).Точность КАК Точность,
		|	ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение, 0) КАК Значение,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисленияСотрудников.РеквизитДопУпорядочивания ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОкладТариф,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ЗначенияПоказателейВозвратные.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияПоказателя,
		|	ЗначенияПоказателейВозвратные.Значение КАК ЗначениеПоОкончании,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ПлановыеНачисленияВозвратные.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияНачисления,
		|	ПлановыеНачисленияВозвратные.Используется КАК ИспользуетсяПоОкончании,
		|	ВЫБОР
		|		КОГДА ПлановыйФОТВозвратный.ВкладВФОТ ЕСТЬ NULL 
		|			ТОГДА ПлановыеНачисленияВозвратные.Размер
		|		ИНАЧЕ ПлановыйФОТВозвратный.ВкладВФОТ
		|	КОНЕЦ КАК РазмерПоОкончании
		|ИЗ
		|	ВТПлановыеНачисленияСПоказателем КАК ПлановыеНачисленияСПоказателем
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейВозвратные КАК ЗначенияПоказателейВозвратные
		|			ПО ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ПериодВозвратногоСобытия = ЗначенияПоказателейВозвратные.Период
		|				И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник = ЗначенияПоказателейВозвратные.Сотрудник
		|				И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель = ЗначенияПоказателейВозвратные.Показатель
		|				И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДокументОснование = ЗначенияПоказателейВозвратные.ДокументОснование
		|		ПО ПлановыеНачисленияСПоказателем.Период = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Период
		|			И ПлановыеНачисленияСПоказателем.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник
		|			И ПлановыеНачисленияСПоказателем.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель
		|			И ПлановыеНачисленияСПоказателем.ДокументОснование = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисленияСотрудников КАК ОсновныеНачисленияСотрудников
		|		ПО ПлановыеНачисленияСПоказателем.Период = ОсновныеНачисленияСотрудников.Период
		|			И ПлановыеНачисленияСПоказателем.Сотрудник = ОсновныеНачисленияСотрудников.Сотрудник
		|			И ПлановыеНачисленияСПоказателем.ДокументОснование = ОсновныеНачисленияСотрудников.ДокументОснование
		|			И ПлановыеНачисленияСПоказателем.РеквизитДопУпорядочивания = ОсновныеНачисленияСотрудников.РеквизитДопУпорядочивания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияВозвратные КАК ПлановыеНачисленияВозвратные
		|		ПО ПлановыеНачисленияСПоказателем.ПериодВозвратногоСобытия = ПлановыеНачисленияВозвратные.Период
		|			И ПлановыеНачисленияСПоказателем.Сотрудник = ПлановыеНачисленияВозвратные.Сотрудник
		|			И ПлановыеНачисленияСПоказателем.Начисление = ПлановыеНачисленияВозвратные.Начисление
		|			И ПлановыеНачисленияСПоказателем.ДокументОснование = ПлановыеНачисленияВозвратные.ДокументОснование
		|			И (ПлановыеНачисленияВозвратные.ЭтоВозвратноеСобытие)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТВозвратный
		|		ПО (ПлановыеНачисленияВозвратные.Сотрудник = ПлановыйФОТВозвратный.Сотрудник)
		|			И (ПлановыеНачисленияВозвратные.Начисление = ПлановыйФОТВозвратный.Начисление)
		|			И (ПлановыеНачисленияВозвратные.ДокументОснование = ПлановыйФОТВозвратный.ДокументОснование)
		|ГДЕ
		|	(ПлановыеНачисленияСПоказателем.Используется
		|			ИЛИ ПлановыеНачисленияВозвратные.Используется)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Сотрудник,
		|	РеквизитДопУпорядочивания,
		|	Показатель
		|ИТОГИ ПО
		|	Сотрудник,
		|	Период";
	
	Если Не ПустаяСтрока(ИмяПоляДатаОкончания) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПлановыеНачисленияСПоказателем.Период КАК Период,",
			"ПлановыеНачисленияСПоказателем.Период КАК Период,
			|	ПлановыеНачисленияСПоказателем.ДатаОкончания,");
		
	КонецЕсли;
	
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		
		ОписанияНачислений = Новый Соответствие;
		ВыборкаПоПериодам = ВыборкаПоСотрудникам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПериодам.Следующий() Цикл
			
			ОписаниеОкладаЗаполнялось = Ложь;
			ОписаниеСоставаНачислений = КадровыйУчетБазовый.ОписаниеСоставаНачислений();
			Выборка = ВыборкаПоПериодам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Не ОписаниеОкладаЗаполнялось И Выборка.ОкладТариф И Выборка.Используется Тогда
					
					ОписаниеСоставаНачислений.Вставить("ПоказательОкладТариф", Выборка.Показатель);
					ОписаниеСоставаНачислений.Вставить("ОкладТариф", Выборка.Значение);
					ОписаниеСоставаНачислений.Вставить("ОписаниеОклада", 
						?(ПустаяСтрока(Выборка.Показатель), Строка(Выборка.Начисление), Строка(Выборка.Показатель))
						+ ?(Выборка.Значение = 0, "", ": " + Формат(Выборка.Значение, "ЧДЦ=" + Выборка.Точность + "; ЧГ=")));
					
					ОписаниеОкладаЗаполнялось = Истина;
					
				Иначе
					
					Если Выборка.ОкладТариф
						И Не Выборка.Используется Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					Если Выборка.Используется Тогда
						
						ОписаниеНадбавок = ОписаниеСоставаНачислений.ОписаниеНадбавок;
						ОписаниеНадбавок = 
							?(ПустаяСтрока(ОписаниеНадбавок), "", ОписаниеНадбавок + "; ")
							+ ?(ПустаяСтрока(Выборка.Показатель), Выборка.Начисление, Выборка.Показатель)
							+ ?(Выборка.Значение = 0, "", ": " + Формат(Выборка.Значение, "ЧДЦ=" + Выборка.Точность + "; ЧГ="));
							
						Если Не ПустаяСтрока(ИмяПоляДатаОкончания) Тогда
							
							Если ЗначениеЗаполнено(Выборка.ДатаОкончанияНачисления)
								И Выборка.ДатаОкончанияНачисления < Выборка.ДатаОкончания
								И Не Выборка.ИспользуетсяПоОкончании Тогда
								
								ОписаниеНадбавок = ОписаниеНадбавок + " " + НСтр("ru='до';uk='до'") + " " + Формат(Выборка.ДатаОкончанияНачисления, "ДЛФ=D");
								
							ИначеЕсли ЗначениеЗаполнено(Выборка.ДатаОкончанияПоказателя)
								И Выборка.Значение <> Выборка.ЗначениеПоОкончании Тогда
								
								ОписаниеНадбавок = ОписаниеНадбавок + " " + НСтр("ru='до';uk='до'") + " " + Формат(Выборка.ДатаОкончанияПоказателя, "ДЛФ=D");
								Если Выборка.ЗначениеПоОкончании <> 0 Тогда
									ОписаниеНадбавок = ОписаниеНадбавок + ", " + НСтр("ru='затем';uk='потім'") +" " + Формат(Выборка.ЗначениеПоОкончании, "ЧДЦ=" + Выборка.Точность + "; ЧГ=");
								КонецЕсли;
								
							ИначеЕсли ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
								
								ОписаниеНадбавок = ОписаниеНадбавок + " " + НСтр("ru='до';uk='до'") + " " + Формат(Выборка.ДатаОкончания, "ДЛФ=D");
								Если Выборка.ЗначениеПоОкончании <> 0 Тогда
									ОписаниеНадбавок = ОписаниеНадбавок + ", " + НСтр("ru='затем';uk='потім'") +" " + Формат(Выборка.ЗначениеПоОкончании, "ЧДЦ=" + Выборка.Точность + "; ЧГ=");
								КонецЕсли;
								
							КонецЕсли;
						
						КонецЕсли;
						
					ИначеЕсли ЗначениеЗаполнено(Выборка.ДатаОкончанияНачисления) Тогда
						
						ОписаниеНадбавок = ОписаниеСоставаНачислений.ОписаниеНадбавок;
						ОписаниеНадбавок = 
							?(ПустаяСтрока(ОписаниеНадбавок), "", ОписаниеНадбавок + "; ")
							+ ?(ПустаяСтрока(Выборка.Показатель), Выборка.Начисление, Выборка.Показатель)
							+ ?(Выборка.Значение = 0, "", ": " + Формат(Выборка.Значение, "ЧДЦ=" + Выборка.Точность + "; ЧГ="))
							+ " " + НСтр("ru='с';uk='з'") + " " + Формат(Выборка.ДатаОкончанияНачисления, "ДЛФ=D");
							
					КонецЕсли;
					
					ОписаниеСоставаНачислений.Вставить("ОписаниеНадбавок", ОписаниеНадбавок);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОписанияНачислений.Вставить(ВыборкаПоПериодам.Период, ОписаниеСоставаНачислений);
			
		КонецЦикла;
		
		ОписанияНачисленийПоПериодам.Вставить(ВыборкаПоСотрудникам.Сотрудник, ОписанияНачислений);
		
	КонецЦикла;
	
	Возврат ОписанияНачисленийПоПериодам;
	
КонецФункции

Функция СформироватьЗапросДляТ6(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтпускПоУходуЗаРебенком.Сотрудник,
		|	ОтпускПоУходуЗаРебенком.ДатаНачала,
		|	ОтпускПоУходуЗаРебенком.Организация,
		|	ОтпускПоУходуЗаРебенком.Ссылка
		|ПОМЕСТИТЬ ВТОтпускаПоУходу
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
		|ГДЕ
		|	ОтпускПоУходуЗаРебенком.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускПоУходуЗаРебенком.ДатаНачала,
		|	ОтпускПоУходуЗаРебенком.Сотрудник,
		|	ОтпускПоУходуЗаРебенком.Организация,
		|	ОтпускПоУходуЗаРебенком.Ссылка";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТФизическиеЛицаПериоды.Сотрудник КАК Сотрудник,
		|	ВТФизическиеЛицаПериоды.ДатаНачала КАК Период
		|ИЗ
		|	ВТОтпускаПоУходу КАК ВТФизическиеЛицаПериоды";
	
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить();
	КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, СписокФизическихЛиц, Неопределено, '00010101');
	
	ТаблицаОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников("ВТОсновныеСотрудникиФизическихЛиц");
	ЗапросПостоянныеКадровыеДанные = КадровыйУчет.ЗапросВТПостоянныеКадровыеДанныеСотрудников(Истина, ТаблицаОтборов, "ДатаНачалаУчета");
	ЗапросПостоянныеКадровыеДанные.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПостоянныеКадровыеДанные.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеСотрудники.Сотрудник КАК Сотрудник,
		|	ОтпускаПоУходу.Сотрудник КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ДанныеСотрудников.ДатаНачалаУчета > ОтпускаПоУходу.ДатаНачала
		|			ТОГДА ДанныеСотрудников.ДатаНачалаУчета
		|		ИНАЧЕ ОтпускаПоУходу.ДатаНачала
		|	КОНЕЦ КАК Период
		|ПОМЕСТИТЬ ВТОсновныеСотрудникиПериоды
		|ИЗ
		|	ВТОтпускаПоУходу КАК ОтпускаПоУходу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудники
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПостоянныеКадровыеДанныеСотрудников КАК ДанныеСотрудников
		|			ПО ОсновныеСотрудники.Сотрудник = ДанныеСотрудников.Сотрудник
		|		ПО ОтпускаПоУходу.Сотрудник = ОсновныеСотрудники.ФизическоеЛицо
		|			И ОтпускаПоУходу.Организация.ГоловнаяОрганизация = ОсновныеСотрудники.ГоловнаяОрганизация";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТОсновныеСотрудникиПериоды");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Организация, ФизическоеЛицо");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отпуск.Сотрудник,
		|	Отпуск.ДатаНачалаСобытия КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	Отпуск.Сотрудник,
		|	Отпуск.ДатаНачалаСобытия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТКадровыеДанныеСотрудников.Сотрудник,
		|	ВТКадровыеДанныеСотрудников.Период
		|ИЗ
		|	ВТОтпускаПоУходу КАК ВТФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
		|		ПО ВТФизическиеЛицаПериоды.Сотрудник = ВТКадровыеДанныеСотрудников.ФизическоеЛицо
		|			И ВТФизическиеЛицаПериоды.Организация = ВТКадровыеДанныеСотрудников.Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускБезСохраненияОплаты.Сотрудник,
		|	ОтпускБезСохраненияОплаты.ДатаНачала
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|ГДЕ
		|	ОтпускБезСохраненияОплаты.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускБезСохраненияОплаты.Сотрудник,
		|	ОтпускБезСохраненияОплаты.ДатаНачала";
	
	НастройкиУчета = НастройкиКадровогоУчета();
	Если НастройкиУчета.ПечататьТ6ДляОтпусковПоБеременностиИРодам Тогда
		
		Запрос.Текст = Запрос.Текст
			+ "
				|ОБЪЕДИНИТЬ ВСЕ
				|"
			+ "ВЫБРАТЬ
			  |	БольничныйЛист.Сотрудник,
			  |	БольничныйЛист.ДатаНачала
			  |ИЗ
			  |	Документ.БольничныйЛист КАК БольничныйЛист
			  |ГДЕ
			  |	БольничныйЛист.Ссылка В(&МассивОбъектов)
			  |	И БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам)
			  |
			  |СГРУППИРОВАТЬ ПО
			  |	БольничныйЛист.Сотрудник,
			  |	БольничныйЛист.ДатаНачала";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Организация,Подразделение,Должность,РазрядКатегория,ДатаНачалаУчета");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НЕ ОтпускаПоУходу.ДатаНачала ЕСТЬ NULL 
		|				И ОтпускаПоУходу.ДатаНачала < КадровыеДанныеСотрудников.ДатаНачалаУчета
		|			ТОГДА ОтпускаПоУходу.ДатаНачала
		|		ИНАЧЕ КадровыеДанныеСотрудников.Период
		|	КОНЕЦ КАК Период,
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация КАК Справочник.Организации) КАК Организация,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
		|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Должность КАК Справочник.Должности) КАК Должность,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей) КАК РазрядКатегория
		|ПОМЕСТИТЬ ВТДанныеДляПечати
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтпускаПоУходу КАК ОтпускаПоУходу
		|		ПО КадровыеДанныеСотрудников.ФизическоеЛицо = ОтпускаПоУходу.Сотрудник
		|			И КадровыеДанныеСотрудников.Организация = ОтпускаПоУходу.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляПечати.Сотрудник,
		|	Отпуск.Организация КАК Организация,
		|	ДанныеДляПечати.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
		|	ДанныеДляПечати.Работник,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Номер ЕСТЬ NULL 
		|			ТОГДА Отпуск.Номер
		|		ИНАЧЕ ОтпускаСотрудников.Номер
		|	КОНЕЦ КАК НомерДок,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Дата ЕСТЬ NULL 
		|			ТОГДА Отпуск.Дата
		|		ИНАЧЕ ОтпускаСотрудников.Дата
		|	КОНЕЦ КАК ДатаДок,
		|	ДанныеДляПечати.ТабельныйНомер,
		|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
		|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """") КАК Должность,
		|	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """") КАК РазрядКатегория,
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачала,
		|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончания,
		|	Отпуск.КоличествоДнейОсновногоОтпуска КАК Продолжительность,
		|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной) КАК ВидОтпуска,
		|	ИСТИНА КАК ЭтоОсновнойОтпуск,
		|	Отпуск.Ссылка КАК Ссылка,
		|	Отпуск.ДатаНачалаСобытия,
		|	ВЫБОР
		|		КОГДА ВидыОтпусков.НаименованиеПолное = """"
		|			ТОГДА ВидыОтпусков.Наименование
		|		ИНАЧЕ ВидыОтпусков.НаименованиеПолное
		|	КОНЕЦ КАК ПолноеНаименованиеОтпуска,
		|	Отпуск.Основание,
		|	Отпуск.Дата КАК Дата,
		|	Отпуск.Руководитель КАК Руководитель,
		|	Отпуск.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	Отпуск.Бухгалтер КАК Бухгалтер,
		|	Отпуск.РаботникКадровойСлужбы КАК РаботникКадровойСлужбы,
		|	Отпуск.ДолжностьРаботникаКадровойСлужбы КАК ДолжностьРаботникаКадровойСлужбы
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	ВТДанныеДляПечати КАК ДанныеДляПечати
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК Отпуск
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|			ПО (ВидыОтпусков.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной))
		|		ПО ДанныеДляПечати.Сотрудник = Отпуск.Сотрудник
		|			И ДанныеДляПечати.Период = Отпуск.ДатаНачалаСобытия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
		|		ПО (Отпуск.ДокументЗаполнения = ОтпускаСотрудников.Ссылка)
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)
		|	И Отпуск.ПредоставитьОсновнойОтпуск
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДляПечати.Сотрудник,
		|	ОтпускДокумент.Организация,
		|	ДанныеДляПечати.Организация.КодПоЕДРПОУ,
		|	ДанныеДляПечати.Работник,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Номер ЕСТЬ NULL 
		|			ТОГДА Отпуск.Ссылка.Номер
		|		ИНАЧЕ ОтпускаСотрудников.Номер
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОтпускаСотрудников.Дата ЕСТЬ NULL 
		|			ТОГДА Отпуск.Ссылка.Дата
		|		ИНАЧЕ ОтпускаСотрудников.Дата
		|	КОНЕЦ,
		|	ДанныеДляПечати.ТабельныйНомер,
		|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """"),
		|	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """"),
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.ДатаНачала,
		|	Отпуск.ДатаОкончания,
		|	Отпуск.КоличествоДней,
		|	Отпуск.ВидОтпуска,
		|	ЛОЖЬ,
		|	Отпуск.Ссылка,
		|	Отпуск.Ссылка.ДатаНачалаСобытия,
		|	ВЫБОР
		|		КОГДА ВидыОтпусков.НаименованиеПолное = """"
		|			ТОГДА ВидыОтпусков.Наименование
		|		ИНАЧЕ ВидыОтпусков.НаименованиеПолное
		|	КОНЕЦ,
		|	Отпуск.Основание,
		|	Отпуск.Ссылка.Дата,
		|	Отпуск.Ссылка.Руководитель,
		|	Отпуск.Ссылка.ДолжностьРуководителя,
		|	Отпуск.Ссылка.Бухгалтер,
		|	Отпуск.Ссылка.РаботникКадровойСлужбы,
		|	Отпуск.Ссылка.ДолжностьРаботникаКадровойСлужбы
		|ИЗ
		|	ВТДанныеДляПечати КАК ДанныеДляПечати
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.ДополнительныеОтпуска КАК Отпуск
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|			ПО Отпуск.ВидОтпуска = ВидыОтпусков.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК ОтпускДокумент
		|			ПО Отпуск.Ссылка = ОтпускДокумент.Ссылка
		|		ПО ДанныеДляПечати.Сотрудник = Отпуск.Ссылка.Сотрудник
		|			И ДанныеДляПечати.Период = Отпуск.Ссылка.ДатаНачалаСобытия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
		|		ПО (Отпуск.Ссылка.ДокументЗаполнения = ОтпускаСотрудников.Ссылка)
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)
		|	И ОтпускДокумент.ПредоставитьДополнительныйОтпуск
		|	И Отпуск.КоличествоДней > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДляПечати.Сотрудник,
		|	ОтпускБезСохраненияОплаты.Организация,
		|	ДанныеДляПечати.Организация.КодПоЕДРПОУ,
		|	ДанныеДляПечати.Работник,
		|	ОтпускБезСохраненияОплаты.Номер,
		|	ОтпускБезСохраненияОплаты.Дата,
		|	ДанныеДляПечати.ТабельныйНомер,
		|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """"),
		|	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """"),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ОтпускБезСохраненияОплаты.ДатаНачала,
		|	ОтпускБезСохраненияОплаты.ДатаОкончания,
		|	РАЗНОСТЬДАТ(ОтпускБезСохраненияОплаты.ДатаНачала, ОтпускБезСохраненияОплаты.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	ЛОЖЬ,
		|	ОтпускБезСохраненияОплаты.Ссылка,
		|	ОтпускБезСохраненияОплаты.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ВидыОтпусков.НаименованиеПолное = """"
		|			ТОГДА ВидыОтпусков.Наименование
		|		ИНАЧЕ ВидыОтпусков.НаименованиеПолное
		|	КОНЕЦ,
		|	ОтпускБезСохраненияОплаты.Основание,
		|	ОтпускБезСохраненияОплаты.Дата,
		|	ОтпускБезСохраненияОплаты.Руководитель,
		|	ОтпускБезСохраненияОплаты.ДолжностьРуководителя,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТДанныеДляПечати КАК ДанныеДляПечати
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|			ПО (ВидыОтпусков.Ссылка = ОтпускБезСохраненияОплаты.ВидОтпуска)
		|		ПО ДанныеДляПечати.Сотрудник = ОтпускБезСохраненияОплаты.Сотрудник
		|			И ДанныеДляПечати.Период = ОтпускБезСохраненияОплаты.ДатаНачала
		|ГДЕ
		|	ОтпускБезСохраненияОплаты.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДляПечати.Сотрудник,
		|	ОтпускПоУходуЗаРебенком.Организация,
		|	ДанныеДляПечати.Организация.КодПоЕДРПОУ,
		|	ДанныеДляПечати.Работник,
		|	ОтпускПоУходуЗаРебенком.Номер,
		|	ОтпускПоУходуЗаРебенком.Дата,
		|	ДанныеДляПечати.ТабельныйНомер,
		|	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """"),
		|	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """"),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ОтпускПоУходуЗаРебенком.ДатаНачала,
		|	ОтпускПоУходуЗаРебенком.ДатаОкончания,
		|	РАЗНОСТЬДАТ(ОтпускПоУходуЗаРебенком.ДатаНачала, ОтпускПоУходуЗаРебенком.ДатаОкончания, ДЕНЬ) + 1,
		|	NULL,
		|	ЛОЖЬ,
		|	ОтпускПоУходуЗаРебенком.Ссылка,
		|	ОтпускПоУходуЗаРебенком.ДатаНачала,
		|	&НаименованиеОтпускаПоУходуЗаРебенком,
		|	NULL,
		|	ОтпускПоУходуЗаРебенком.Дата,
		|	ОтпускПоУходуЗаРебенком.Руководитель,
		|	ОтпускПоУходуЗаРебенком.ДолжностьРуководителя,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	ВТДанныеДляПечати КАК ДанныеДляПечати
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
		|		ПО ДанныеДляПечати.ФизическоеЛицо = ОтпускПоУходуЗаРебенком.Сотрудник
		|			И ДанныеДляПечати.Организация = ОтпускПоУходуЗаРебенком.Организация
		|			И ДанныеДляПечати.Период = ОтпускПоУходуЗаРебенком.ДатаНачала";
	
	Если НастройкиУчета.ПечататьТ6ДляОтпусковПоБеременностиИРодам Тогда
		
		Запрос.Текст = Запрос.Текст
			+ "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|"
			+ "ВЫБРАТЬ
			  |	ДанныеДляПечати.Сотрудник,
			  |	БольничныйЛист.Организация,
			  |	ДанныеДляПечати.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
			  |	ДанныеДляПечати.Работник,
			  |	БольничныйЛист.Номер КАК НомерДок,
			  |	БольничныйЛист.Дата КАК ДатаДок,
			  |	ДанныеДляПечати.ТабельныйНомер,
			  |	ЕСТЬNULL(ДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
			  |	ЕСТЬNULL(ДанныеДляПечати.Должность.Наименование, """") КАК Должность,
			  |	ЕСТЬNULL(ДанныеДляПечати.РазрядКатегория.Наименование, """") КАК РазрядКатегория,
			  |	ДАТАВРЕМЯ(1, 1, 1) КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
			  |	ДАТАВРЕМЯ(1, 1, 1) КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
			  |	БольничныйЛист.ДатаНачала,
			  |	БольничныйЛист.ДатаОкончания,
			  |	РАЗНОСТЬДАТ(БольничныйЛист.ДатаНачала, БольничныйЛист.ДатаОкончания, ДЕНЬ) + 1 КАК Продолжительность,
			  |	NULL КАК ВидОтпуска,
			  |	ЛОЖЬ КАК ЭтоОсновнойОтпуск,
			  |	БольничныйЛист.Ссылка,
			  |	БольничныйЛист.ДатаНачалаСобытия,
			  |	&НаименованиеОтпускаПоБеременностиИРодам КАК ПолноеНаименованиеОтпуска,
			  |	NULL КАК Основание,
			  |	БольничныйЛист.Дата,
			  |	БольничныйЛист.Руководитель,
			  |	БольничныйЛист.ДолжностьРуководителя,
			  |	NULL КАК Бухгалтер,
			  |	NULL КАК РаботникКадровойСлужбы,
			  |	NULL КАК ДолжностьРаботникаКадровойСлужбы
			  |ИЗ
			  |	ВТДанныеДляПечати КАК ДанныеДляПечати
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
			  |		ПО ДанныеДляПечати.Сотрудник = БольничныйЛист.Сотрудник
			  |			И ДанныеДляПечати.Организация = БольничныйЛист.Организация
			  |			И ДанныеДляПечати.Период = БольничныйЛист.ДатаНачала
			  |			И (БольничныйЛист.ПричинаНетрудоспособности = ЗНАЧЕНИЕ(Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам))";
		
		Запрос.УстановитьПараметр("НаименованиеОтпускаПоБеременностиИРодам", НСтр("ru='Отпуск по беременности и родам';uk='Відпустка у зв''язку з вагітністю та пологами'"));
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаименованиеОтпускаПоУходуЗаРебенком", НСтр("ru='Отпуск по уходу за ребенком';uk='Відпустка по догляду за дитиною'"));
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("Руководитель");
	ИменаПолей.Добавить("Бухгалтер");
	ИменаПолей.Добавить("РаботникКадровойСлужбы");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокументов");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Сотрудник,
		|	ДанныеДокументов.Организация,
		|	ВЫРАЗИТЬ(ДанныеДокументов.Организация КАК Справочник.Организации).НаименованиеПолное КАК НазваниеОрганизации,
		|	ДанныеДокументов.КодПоЕДРПОУ,
		|	ДанныеДокументов.Работник,
		|	ДанныеДокументов.НомерДок,
		|	ДанныеДокументов.ДатаДок,
		|	ДанныеДокументов.ТабельныйНомер,
		|	ДанныеДокументов.Подразделение,
		|	ДанныеДокументов.Должность,
		|	ДанныеДокументов.РазрядКатегория,
		|	ДанныеДокументов.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ДанныеДокументов.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ДанныеДокументов.ДатаНачала,
		|	ДанныеДокументов.ДатаОкончания,
		|	ДанныеДокументов.Продолжительность,
		|	ДанныеДокументов.ВидОтпуска,
		|	ДанныеДокументов.ЭтоОсновнойОтпуск,
		|	ДанныеДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокументов.ДатаНачалаСобытия,
		|	ДанныеДокументов.ПолноеНаименованиеОтпуска,
		|	ДанныеДокументов.Основание,
		|	ДанныеДокументов.Дата,
		|	ДанныеДокументов.Руководитель,
		|	ДанныеДокументов.ДолжностьРуководителя,
		|	ДанныеДокументов.ДолжностьРаботникаКадровойСлужбы,
		|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	ФИОБухгалтера.РасшифровкаПодписи КАК БухгалтерРасшифровкаПодписи,
		|	ФИОКадровика.РасшифровкаПодписи КАК РаботникКадровойСлужбыРасшифровкаПодписи
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Дата = ФИОРуководителя.Дата
		|			И ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
		|		ПО ДанныеДокументов.Дата = ФИОБухгалтера.Дата
		|			И ДанныеДокументов.Ссылка = ФИОБухгалтера.Ссылка
		|			И ДанныеДокументов.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОКадровика
		|		ПО ДанныеДокументов.Дата = ФИОКадровика.Дата
		|			И ДанныеДокументов.Ссылка = ФИОКадровика.Ссылка
		|			И ДанныеДокументов.РаботникКадровойСлужбы = ФИОКадровика.ФизическоеЛицо
		|ИТОГИ ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция СформироватьЗапросДляТ60(МассивОбъектов) Экспорт
	
	Результаты = Новый Структура("КадровыеОтпуска, Начисления, Удержания, НДФЛ");
	Результаты.Вставить("КадровыеОтпуска", СформироватьЗапросДляТ6(МассивОбъектов));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	ИсправлениеДокументовЗарплатаКадры.СоздатьВТИсправленныеДокументы(Запрос.МенеджерВременныхТаблиц, МассивОбъектов, "Отпуск", "ВТИсправленныеДокументыОтпусков");	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсправленныеДокументыОтпусков.Ссылка,
	|	ИсправленныеДокументыОтпусков.ИсправленныйДокумент КАК ДокументЦепочки
	|ПОМЕСТИТЬ ВТЦепочкаОтпусков
	|ИЗ
	|	ВТИсправленныеДокументыОтпусков КАК ИсправленныеДокументыОтпусков
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Отпуск.Ссылка,
	|	Отпуск.Ссылка
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|ГДЕ
	|	Отпуск.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Отпуск.Ссылка КАК Ссылка,
	|	Отпуск.ПериодРегистрации КАК ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА ВидыРасчетов.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОплатаОтпуска,
	|	НачисленияОтпуска.ДатаНачала,
	|	СУММА(НачисленияОтпуска.ОплаченоДней) КАК ОплаченоДней,
	|	СУММА(НачисленияОтпуска.Результат) КАК Результат
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.Начисления КАК НачисленияОтпуска
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчетов
	|			ПО НачисленияОтпуска.Начисление = ВидыРасчетов.Ссылка
	|		ПО Отпуск.Ссылка = НачисленияОтпуска.Ссылка
	|ГДЕ
	|	НачисленияОтпуска.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Отпуск.Ссылка,
	|	ВЫБОР
	|		КОГДА ВидыРасчетов.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	НачисленияОтпуска.ДатаНачала,
	|	Отпуск.ПериодРегистрации
	|ИТОГИ
	|	МИНИМУМ(ПериодРегистрации),
	|	СУММА(Результат)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отпуск.Ссылка КАК Ссылка,
	|	УдержанияОтпуска.Удержание,
	|	СУММА(УдержанияОтпуска.Результат) КАК Результат
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.Удержания КАК УдержанияОтпуска
	|		ПО Отпуск.Ссылка = УдержанияОтпуска.Ссылка
	|ГДЕ
	|	УдержанияОтпуска.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Отпуск.Ссылка,
	|	УдержанияОтпуска.Удержание
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускПогашениеЗаймов.Ссылка,
	|	""Погашение займов"",
	|	ОтпускПогашениеЗаймов.ПогашениеЗайма + ОтпускПогашениеЗаймов.ПогашениеПроцентов + ОтпускПогашениеЗаймов.НалогНаМатериальнуюВыгоду
	|ИЗ
	|	Документ.Отпуск.ПогашениеЗаймов КАК ОтпускПогашениеЗаймов
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отпуск.Ссылка КАК Ссылка,
	|	СУММА(НДФЛОтпуска.Налог) КАК Налог
	|ИЗ
	|	ВТЦепочкаОтпусков КАК Отпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.НДФЛ КАК НДФЛОтпуска
	|		ПО Отпуск.ДокументЦепочки = НДФЛОтпуска.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Отпуск.Ссылка
	|ИТОГИ ПО
	|	Ссылка";
	МассивРезультатов = Запрос.ВыполнитьПакет();

	Результаты.Вставить("Начисления", 	МассивРезультатов[0]);
	Результаты.Вставить("Удержания", 	МассивРезультатов[1]);
	Результаты.Вставить("НДФЛ", 		МассивРезультатов[2]);
	
	Возврат Результаты;	
	
КонецФункции

Функция СформироватьЗапросДляТ61(МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчет.СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокументов");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц,
		Истина,
		"ФИОПолные,ТабельныйНомер,Организация,Подразделение,Должность,ТарифнаяСтавка,ДатаПриема,ДатаУвольнения,ФизическоеЛицо,РазрядКатегория,Пол,ТрудовойДоговорДата,ТрудовойДоговорНомер");
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("РаботникКадровойСлужбы");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документы.Ссылка
	|ИЗ
	|	ВТДанныеДокументов КАК Документы
	|ГДЕ
	|	Документы.Ссылка ССЫЛКА Документ.Увольнение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Ссылка
	|ИЗ
	|	ВТДанныеДокументов КАК Документы
	|ГДЕ
	|	Документы.Ссылка ССЫЛКА Документ.УвольнениеСписком";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ИсправлениеДокументовЗарплатаКадры.СоздатьВТИсправленныеДокументы(Запрос.МенеджерВременныхТаблиц, Результаты[0].Выгрузить().ВыгрузитьКолонку("Ссылка"), "Увольнение", "ВТИсправленныеДокументыУвольнений");	
	ИсправлениеДокументовЗарплатаКадры.СоздатьВТИсправленныеДокументы(Запрос.МенеджерВременныхТаблиц, Результаты[1].Выгрузить().ВыгрузитьКолонку("Ссылка"), "УвольнениеСписком", "ВТИсправленныеДокументыУвольненийСписком");	
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДнейКомпенсацииУдержанияОтпуска.Ссылка,
		|	ДнейКомпенсацииУдержанияОтпуска.Сотрудник,
		|	СУММА(ДнейКомпенсацииУдержанияОтпуска.ДнейКомпенсации) КАК ДнейКомпенсации,
		|	СУММА(ДнейКомпенсацииУдержанияОтпуска.ДнейУдержания) КАК ДнейУдержания
		|ПОМЕСТИТЬ ВТДнейКомпенсацииУдержанияОтпуска
		|ИЗ
		|	(ВЫБРАТЬ
		|		УвольнениеДополнительныеОтпуска.Ссылка КАК Ссылка,
		|		УвольнениеДополнительныеОтпуска.Ссылка.Сотрудник КАК Сотрудник,
		|		СУММА(ВЫБОР
		|				КОГДА УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|					ТОГДА УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ДнейКомпенсации,
		|		СУММА(ВЫБОР
		|				КОГДА УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
		|					ТОГДА УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ДнейУдержания
		|	ИЗ
		|		Документ.Увольнение.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
		|	ГДЕ
		|		УвольнениеДополнительныеОтпуска.Ссылка В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		УвольнениеДополнительныеОтпуска.Ссылка,
		|		УвольнениеДополнительныеОтпуска.Ссылка.Сотрудник
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Увольнение.Ссылка,
		|		Увольнение.Сотрудник,
		|		СУММА(ВЫБОР
		|				КОГДА Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|					ТОГДА Увольнение.ДнейКомпенсацииУдержанияОтпуска
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		СУММА(ВЫБОР
		|				КОГДА Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
		|					ТОГДА Увольнение.ДнейКомпенсацииУдержанияОтпуска
		|				ИНАЧЕ 0
		|			КОНЕЦ)
		|	ИЗ
		|		Документ.Увольнение КАК Увольнение
		|	ГДЕ
		|		Увольнение.Ссылка В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Увольнение.Ссылка,
		|		Увольнение.Сотрудник
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УвольнениеДополнительныеОтпуска.Ссылка,
		|		УвольнениеДополнительныеОтпуска.Сотрудник,
		|		СУММА(ВЫБОР
		|				КОГДА УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|					ТОГДА УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		СУММА(ВЫБОР
		|				КОГДА УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
		|					ТОГДА УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания
		|				ИНАЧЕ 0
		|			КОНЕЦ)
		|	ИЗ
		|		Документ.УвольнениеСписком.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
		|	ГДЕ
		|		УвольнениеДополнительныеОтпуска.Ссылка В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		УвольнениеДополнительныеОтпуска.Ссылка,
		|		УвольнениеДополнительныеОтпуска.Сотрудник
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Увольнение.Ссылка,
		|		Увольнение.Сотрудник,
		|		СУММА(ВЫБОР
		|				КОГДА Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|					ТОГДА Увольнение.ДнейКомпенсацииУдержанияОтпуска
		|				ИНАЧЕ 0
		|			КОНЕЦ),
		|		СУММА(ВЫБОР
		|				КОГДА Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
		|					ТОГДА Увольнение.ДнейКомпенсацииУдержанияОтпуска
		|				ИНАЧЕ 0
		|			КОНЕЦ)
		|	ИЗ
		|		Документ.УвольнениеСписком.Сотрудники КАК Увольнение
		|	ГДЕ
		|		Увольнение.Ссылка В
		|				(ВЫБРАТЬ
		|					Документы.Ссылка
		|				ИЗ
		|					ВТДанныеДокументов КАК Документы)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Увольнение.Ссылка,
		|		Увольнение.Сотрудник) КАК ДнейКомпенсацииУдержанияОтпуска
		|
		|СГРУППИРОВАТЬ ПО
		|	ДнейКомпенсацииУдержанияОтпуска.Ссылка,
		|	ДнейКомпенсацииУдержанияОтпуска.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УвольнениеНачисления.Ссылка,
		|	УвольнениеНачисления.Сотрудник,
		|	СУММА(УвольнениеНачисления.Результат) КАК ВсегоВыплат,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА УвольнениеНачисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоКомпенсации,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА УвольнениеНачисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоВыходноеПособиеСохраняемыйЗаработок,
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ УвольнениеНачисления.Результат
		|		КОНЕЦ) КАК ВсеДругиеНачисления
		|ПОМЕСТИТЬ Начисления
		|ИЗ
		|	Документ.Увольнение.Начисления КАК УвольнениеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО УвольнениеНачисления.Начисление = Начисления.Ссылка
		|ГДЕ
		|	УвольнениеНачисления.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеНачисления.Ссылка,
		|	УвольнениеНачисления.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеНачисления.Ссылка,
		|	УвольнениеНачисления.Сотрудник,
		|	СУММА(УвольнениеНачисления.Результат),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|				ТОГДА УвольнениеНачисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА УвольнениеНачисления.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
		|					ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
		|				ТОГДА 0
		|			ИНАЧЕ УвольнениеНачисления.Результат
		|		КОНЕЦ)
		|ИЗ
		|	Документ.УвольнениеСписком.Начисления КАК УвольнениеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО УвольнениеНачисления.Начисление = Начисления.Ссылка
		|ГДЕ
		|	УвольнениеНачисления.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеНачисления.Ссылка,
		|	УвольнениеНачисления.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсправленныеДокументыУвольнений.Ссылка,
		|	ИсправленныеДокументыУвольнений.ИсправленныйДокумент КАК ДокументЦепочки
		|ПОМЕСТИТЬ ВТЦепочкаУвольнений
		|ИЗ
		|	ВТИсправленныеДокументыУвольнений КАК ИсправленныеДокументыУвольнений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсправленныеДокументыУвольнений.Ссылка,
		|	ИсправленныеДокументыУвольнений.ИсправленныйДокумент КАК ДокументЦепочки
		|ПОМЕСТИТЬ ВТЦепочкаУвольненийСписком
		|ИЗ
		|	ВТИсправленныеДокументыУвольненийСписком КАК ИсправленныеДокументыУвольнений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка
		|ИЗ
		|	Документ.УвольнениеСписком КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник КАК Сотрудник,
		|	СУММА(УвольнениеНДФЛ.Налог) КАК СуммаНДФЛ
		|ПОМЕСТИТЬ ВТНДФЛ
		|ИЗ
		|	ВТЦепочкаУвольнений КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение.НДФЛ КАК УвольнениеНДФЛ
		|		ПО Увольнение.ДокументЦепочки = УвольнениеНДФЛ.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	УвольнениеНДФЛ.Сотрудник,
		|	СУММА(УвольнениеНДФЛ.Налог)
		|ИЗ
		|	ВТЦепочкаУвольненийСписком КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.НДФЛ КАК УвольнениеНДФЛ
		|		ПО Увольнение.ДокументЦепочки = УвольнениеНДФЛ.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	УвольнениеНДФЛ.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УвольнениеУдержания.Ссылка,
		|	УвольнениеУдержания.Ссылка.Сотрудник,
		|	СУММА(УвольнениеУдержания.Результат) КАК ПрочиеУдержания
		|ПОМЕСТИТЬ ВТУдержанияПредварительно
		|ИЗ
		|	Документ.Увольнение.Удержания КАК УвольнениеУдержания
		|ГДЕ
		|	УвольнениеУдержания.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеУдержания.Ссылка,
		|	УвольнениеУдержания.Ссылка.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеУдержания.Ссылка,
		|	УвольнениеУдержания.Сотрудник,
		|	СУММА(УвольнениеУдержания.Результат)
		|ИЗ
		|	Документ.УвольнениеСписком.Удержания КАК УвольнениеУдержания
		|ГДЕ
		|	УвольнениеУдержания.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	УвольнениеУдержания.Ссылка,
		|	УвольнениеУдержания.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник,
		|	СУММА(Увольнение.ПогашениеЗайма)
		|ИЗ
		|	Документ.Увольнение.ПогашениеЗаймов КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Сотрудник,
		|	СУММА(Увольнение.ПогашениеЗайма)
		|ИЗ
		|	Документ.УвольнениеСписком.ПогашениеЗаймов КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник,
		|	СУММА(Увольнение.ПогашениеПроцентов)
		|ИЗ
		|	Документ.Увольнение.ПогашениеЗаймов КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Сотрудник,
		|	СУММА(Увольнение.ПогашениеПроцентов)
		|ИЗ
		|	Документ.УвольнениеСписком.ПогашениеЗаймов КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник,
		|	СУММА(Увольнение.НалогНаМатериальнуюВыгоду)
		|ИЗ
		|	Документ.Увольнение.ПогашениеЗаймов КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Ссылка.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Сотрудник,
		|	СУММА(Увольнение.НалогНаМатериальнуюВыгоду)
		|ИЗ
		|	Документ.УвольнениеСписком.ПогашениеЗаймов КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В
		|			(ВЫБРАТЬ
		|				Документы.Ссылка
		|			ИЗ
		|				ВТДанныеДокументов КАК Документы)
		|
		|СГРУППИРОВАТЬ ПО
		|	Увольнение.Ссылка,
		|	Увольнение.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Удержания.Ссылка,
		|	Удержания.Сотрудник,
		|	СУММА(Удержания.ПрочиеУдержания) КАК ПрочиеУдержания
		|ПОМЕСТИТЬ ВТУдержания
		|ИЗ
		|	ВТУдержанияПредварительно КАК Удержания
		|
		|СГРУППИРОВАТЬ ПО
		|	Удержания.Ссылка,
		|	Удержания.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация КАК Справочник.Организации) КАК Организация,
		|	КадровыеДанныеСотрудников.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация.НаименованиеПолное КАК СТРОКА(1))) = """"
		|			ТОГДА ВЫБОР
		|					КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное КАК СТРОКА(1))) = """"
		|						ТОГДА КадровыеДанныеСотрудников.Организация.Наименование
		|					ИНАЧЕ КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное
		|				КОНЕЦ
		|		ИНАЧЕ КадровыеДанныеСотрудников.Организация.НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
		|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
		|	КадровыеДанныеСотрудников.Пол КАК Пол,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудников.Должность КАК Должность,
		|	КадровыеДанныеСотрудников.РазрядКатегория КАК РазрядКатегория,
		|	КадровыеДанныеСотрудников.ТарифнаяСтавка КАК ТарифнаяСтавка,
		|	КадровыеДанныеСотрудников.ТрудовойДоговорНомер КАК ТрудовойДоговорНомер,
		|	КадровыеДанныеСотрудников.ТрудовойДоговорДата КАК ТрудовойДоговорДата,
		|	ФИОРуководителя.РасшифровкаПодписи КАК ФИОРуководителя,
		|	ФИОБухгалтера.РасшифровкаПодписи КАК БухгалтерРасшифровкаПодписи,
		|	ФИОРаботникаКадровойСлужбы.РасшифровкаПодписи КАК РаботникКадровойСлужбыРасшифровкаПодписи,
		|	&ДанныеДокументов,
		|	ЕСТЬNULL(Начисления.ВсегоВыплат, 0) КАК ВсегоВыплат,
		|	ЕСТЬNULL(Начисления.НачисленоКомпенсации, 0) КАК НачисленоКомпенсации,
		|	ЕСТЬNULL(Начисления.НачисленоВыходноеПособиеСохраняемыйЗаработок, 0) КАК НачисленоВыходноеПособиеСохраняемыйЗаработок,
		|	ЕСТЬNULL(Начисления.ВсеДругиеНачисления, 0) КАК ВсеДругиеНачисления,
		|	ЕСТЬNULL(НДФЛ.СуммаНДФЛ, 0) КАК СуммаНДФЛ,
		|	ЕСТЬNULL(Удержания.ПрочиеУдержания, 0) КАК ПрочиеУдержания,
		|	ЕСТЬNULL(НДФЛ.СуммаНДФЛ, 0) + ЕСТЬNULL(Удержания.ПрочиеУдержания, 0) КАК ВсегоУдержано,
		|	0 КАК ДолгЗаОрганизацией,
		|	0 КАК ДолгЗаРаботником,
		|	ЕСТЬNULL(Начисления.ВсегоВыплат, 0) - (ЕСТЬNULL(НДФЛ.СуммаНДФЛ, 0) + ЕСТЬNULL(Удержания.ПрочиеУдержания, 0)) КАК КВыплате,
		|	ЕСТЬNULL(ДнейКомпенсацииУдержанияОтпуска.ДнейКомпенсации, 0) КАК ДнейКомпенсации,
		|	ЕСТЬNULL(ДнейКомпенсацииУдержанияОтпуска.ДнейУдержания, 0) КАК ДнейУдержания,
		|	ДанныеДокументов.Сотрудник КАК Сотрудник,
		|	ДанныеДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ДанныеДокументов.Период = КадровыеДанныеСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
		|		ПО ДанныеДокументов.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИОБухгалтера.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРаботникаКадровойСлужбы
		|		ПО ДанныеДокументов.РаботникКадровойСлужбы = ФИОРаботникаКадровойСлужбы.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИОРаботникаКадровойСлужбы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Начисления КАК Начисления
		|		ПО ДанныеДокументов.Ссылка = Начисления.Ссылка
		|			И ДанныеДокументов.Сотрудник = Начисления.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛ КАК НДФЛ
		|		ПО ДанныеДокументов.Ссылка = НДФЛ.Ссылка
		|			И ДанныеДокументов.Сотрудник = НДФЛ.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержания КАК Удержания
		|		ПО ДанныеДокументов.Ссылка = Удержания.Ссылка
		|			И ДанныеДокументов.Сотрудник = Удержания.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДнейКомпенсацииУдержанияОтпуска КАК ДнейКомпенсацииУдержанияОтпуска
		|		ПО ДанныеДокументов.Ссылка = ДнейКомпенсацииУдержанияОтпуска.Ссылка
		|			И ДанныеДокументов.Сотрудник = ДнейКомпенсацииУдержанияОтпуска.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Сотрудник";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеДокументов", "ДанныеДокументов.*");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура СоздатьВТДанныеДокументовКадровыхПеремещений(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПечатьПоЭлементуСправочника Тогда
		
		Запрос.УстановитьПараметр("МассивСотрудников", МассивОбъектов);
		
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		
		Для каждого Сотрудник Из МассивОбъектов Цикл
			ИзмеренияДаты.Добавить().Сотрудник = Сотрудник;
		КонецЦикла;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВидСобытия", "=", Перечисления.ВидыКадровыхСобытий.Перемещение);
		
		ЗапросКадровыхПереводов = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"КадроваяИсторияСотрудников",
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			ПараметрыПостроения,
			Истина,
			"");
		
		Запрос.Параметры.Вставить("МассивОбъектов", ЗапросКадровыхПереводов.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"));
		
	Иначе
		Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.ДатаНачала КАК Дата,
		|	КадровыйПеревод.Сотрудник КАК Сотрудник,
		|	КадровыйПеревод.ДатаНачала КАК ДатаНачала,
		|	КадровыйПеревод.ДатаОкончания КАК ДатаОкончания,
		|	КадровыйПеревод.Номер КАК НомерДок,
		|	КадровыйПеревод.Дата КАК ДатаДок,
		|	КадровыйПеревод.Руководитель,
		|	КадровыйПеревод.ДолжностьРуководителя,
		|	КадровыйПеревод.ФизическоеЛицо,
		|	КадровыйПеревод.ОснованиеПеревода,
		|	КадровыйПеревод.ПричинаПеревода,
		|	0 КАК Надбавка
		|ПОМЕСТИТЬ ВТДанныеДокументовКадровыхПеремещений
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.Проведен
		|	И КадровыйПеревод.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Дата,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДатаПеремещения,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Номер,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Дата,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Руководитель,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДолжностьРуководителя,
		|	ВЫРАЗИТЬ(ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ОснованиеПеревода,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ПричинаПеревода,
		|	0
		|ИЗ
		|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
		|ГДЕ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Проведен
		|	И ПеремещениеВДругоеПодразделениеСотрудники.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыйПереводСпискомСотрудники.Ссылка,
		|	КадровыйПереводСпискомСотрудники.ДатаНачала,
		|	КадровыйПереводСпискомСотрудники.Сотрудник,
		|	КадровыйПереводСпискомСотрудники.ДатаНачала,
		|	КадровыйПереводСпискомСотрудники.ДатаОкончания,
		|	КадровыйПереводСпискомСотрудники.Ссылка.Номер,
		|	КадровыйПереводСпискомСотрудники.Ссылка.Дата,
		|	КадровыйПереводСпискомСотрудники.Ссылка.Руководитель,
		|	КадровыйПереводСпискомСотрудники.Ссылка.ДолжностьРуководителя,
		|	КадровыйПереводСпискомСотрудники.ФизическоеЛицо,
		|	КадровыйПереводСпискомСотрудники.ОснованиеПеревода,
		|	КадровыйПереводСпискомСотрудники.ПричинаПеревода,
		|	0
		|ИЗ
		|	Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПереводСпискомСотрудники
		|ГДЕ
		|	КадровыйПереводСпискомСотрудники.Ссылка.Проведен
		|	И КадровыйПереводСпискомСотрудники.Ссылка В(&МассивОбъектов)";
	
	Если ПечатьПоЭлементуСправочника Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники",
			"Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			| 	ПО ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник = Сотрудники.Ссылка
			| 		И Сотрудники.Ссылка В (&МассивСотрудников)");
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПеремещениеВДругоеПодразделениеСотрудники.Ссылка В(&МассивОбъектов)",
			"И ПеремещениеВДругоеПодразделениеСотрудники.Ссылка В(&МассивОбъектов)
			|		И НЕ Сотрудники.Ссылка ЕСТЬ NULL");
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовПриемНаРаботу(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.ДатаПриема КАК Дата,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.ДатаПриема КАК Период,
		|	ПриемНаРаботу.Номер КАК НомерДок,
		|	ПриемНаРаботу.Дата КАК ДатаДок,
		|	ПриемНаРаботу.Руководитель,
		|	ПриемНаРаботу.ДолжностьРуководителя,
		|	ПриемНаРаботу.УсловияПриема,
		|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора КАК ДатаЗавершенияТрудовогоДоговора,
		|	0 КАК Надбавка,
		|	ПриемНаРаботу.ДлительностьИспытательногоСрока КАК ДлительностьИспытательногоСрока,
		|	ПриемНаРаботу.ВидЗанятости КАК ВидЗанятости,
		|	ПриемНаРаботу.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНеделиЧасов,
		|	ПриемНаРаботу.ГрафикРаботы.НеполноеРабочееВремя КАК НеполноеРабочееВремя,
		|	ПриемНаРаботу.ОснованиеСрочногоДоговора КАК ОснованиеСрочногоДоговора
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Проведен
		|	И ПриемНаРаботу.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриемНаРаботуСпискомСотрудники.Ссылка,
		|	ПриемНаРаботуСпискомСотрудники.ДатаПриема,
		|	ПриемНаРаботуСпискомСотрудники.Сотрудник,
		|	ПриемНаРаботуСпискомСотрудники.ДатаПриема,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Номер,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Дата,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Руководитель,
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.ДолжностьРуководителя,
		|	ПриемНаРаботуСпискомСотрудники.УсловияПриема,
		|	ПриемНаРаботуСпискомСотрудники.ДатаЗавершенияТрудовогоДоговора,
		|	0,
		|	ПриемНаРаботуСпискомСотрудники.ДлительностьИспытательногоСрока,
		|	ПриемНаРаботуСпискомСотрудники.ВидЗанятости,
		|	NULL,
		|	ЛОЖЬ,
		|	ПриемНаРаботуСпискомСотрудники.ОснованиеСрочногоДоговора
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСпискомСотрудники
		|ГДЕ
		|	ПриемНаРаботуСпискомСотрудники.Ссылка.Проведен
		|	И ПриемНаРаботуСпискомСотрудники.Ссылка В(&МассивОбъектов)";
		
	Если ПечатьПоЭлементуСправочника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриемНаРаботу.Ссылка В(&МассивОбъектов)", "ПриемНаРаботу.Сотрудник В(&МассивОбъектов)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриемНаРаботуСпискомСотрудники.Ссылка В(&МассивОбъектов)", "ПриемНаРаботуСпискомСотрудники.Сотрудник В(&МассивОбъектов)");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Увольнение.Ссылка,
		|	Увольнение.ДатаУвольнения КАК Дата,
		|	Увольнение.Сотрудник,
		|	Увольнение.ДатаУвольнения КАК Период,
		|	Увольнение.Номер КАК НомерДок,
		|	Увольнение.Дата КАК ДатаДок,
		|	Увольнение.СтатьяКЗоТ.СтатьяЗакона КАК СтатьяЗакона,
		|	Увольнение.СтатьяКЗоТ,
		|	ВЫБОР
		|		КОГДА Представления.Использовать
		|			ТОГДА Представления.ТекстОснования
		|		ИНАЧЕ Увольнение.СтатьяКЗоТ.ТекстОснования
		|	КОНЕЦ КАК ТекстОснования,
		|	Увольнение.Руководитель,
		|	Увольнение.ДолжностьРуководителя,
		|	Увольнение.ОснованиеУвольнения,
		|	Увольнение.РабочийГодС,
		|	Увольнение.РабочийГодПо,
		|	Увольнение.Бухгалтер,
		|	Увольнение.РаботникКадровойСлужбы,
		|	Увольнение.ДолжностьРаботникаКадровойСлужбы
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредставленияОснованийУвольнения КАК Представления
		|		ПО Увольнение.СтатьяКЗоТ = Представления.Объект
		|ГДЕ
		|	Увольнение.Проведен
		|	И Увольнение.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеСпискомСотрудники.Ссылка,
		|	УвольнениеСпискомСотрудники.Ссылка.Дата,
		|	УвольнениеСпискомСотрудники.Сотрудник,
		|	УвольнениеСпискомСотрудники.ДатаУвольнения,
		|	УвольнениеСпискомСотрудники.Ссылка.Номер,
		|	УвольнениеСпискомСотрудники.Ссылка.Дата,
		|	УвольнениеСпискомСотрудники.СтатьяКЗоТ.СтатьяЗакона,
		|	УвольнениеСпискомСотрудники.СтатьяКЗоТ,
		|	ВЫБОР
		|		КОГДА Представления.Использовать
		|			ТОГДА Представления.ТекстОснования
		|		ИНАЧЕ УвольнениеСпискомСотрудники.СтатьяКЗоТ.ТекстОснования
		|	КОНЕЦ,
		|	УвольнениеСпискомСотрудники.Ссылка.Руководитель,
		|	УвольнениеСпискомСотрудники.Ссылка.ДолжностьРуководителя,
		|	УвольнениеСпискомСотрудники.ОснованиеУвольнения,
		|	УвольнениеСпискомСотрудники.РабочийГодС,
		|	УвольнениеСпискомСотрудники.РабочийГодПо,
		|	УвольнениеСпискомСотрудники.Ссылка.Бухгалтер,
		|	УвольнениеСпискомСотрудники.Ссылка.РаботникКадровойСлужбы,
		|	УвольнениеСпискомСотрудники.Ссылка.ДолжностьРаботникаКадровойСлужбы
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредставленияОснованийУвольнения КАК Представления
		|		ПО УвольнениеСпискомСотрудники.СтатьяКЗоТ = Представления.Объект
		|ГДЕ
		|	УвольнениеСпискомСотрудники.Ссылка.Проведен
		|	И УвольнениеСпискомСотрудники.Ссылка В(&МассивОбъектов)";
	
	Если ПечатьПоЭлементуСправочника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Увольнение.Ссылка В(&МассивОбъектов)", "Увольнение.Сотрудник В(&МассивОбъектов)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УвольнениеСпискомСотрудники.Ссылка В(&МассивОбъектов)", "УвольнениеСпискомСотрудники.Сотрудник В(&МассивОбъектов)");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовОтпусков(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Если ТипЗнч(МассивОбъектов[0].Ссылка) = Тип("ДокументСсылка.Отпуск") Тогда
		Запрос.Параметры.Вставить("ВидОтпуска", НСтр("ru='Основной';uk='Основний'"));
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Отпуск.Ссылка,
		|	Отпуск.Номер КАК НомерДок,
		|	Отпуск.Дата КАК ДатаДок,
		|	Отпуск.Руководитель КАК ФИОРуководителя,
		|	Отпуск.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийГодС,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийГодПо,
		|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачалаВсего,
		|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончанияВсего,
		|	Отпуск.Сотрудник.Код КАК ТабельныйНомер,
		|	Отпуск.Организация.КодПоЕДРПОУ КАК ЕДРПОУ,
		|	&ВидОтпуска КАК ВидОтпуска,
		|	Отпуск.КоличествоДнейОсновногоОтпуска КАК Продолжительность,
		|	Отпуск.Дата КАК Период,
		|	Отпуск.Сотрудник
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Проведен
		|	И Отпуск.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускДополнительныеОтпуска.Ссылка,
		|	ОтпускДополнительныеОтпуска.Ссылка.Номер,
		|	ОтпускДополнительныеОтпуска.Ссылка.Дата,
		|	ОтпускДополнительныеОтпуска.Ссылка.Руководитель,
		|	Отпуск.Организация.НаименованиеПолное,
		|	ОтпускДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ОтпускДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.ДатаНачалаПериодаОтсутствия,
		|	Отпуск.ДатаОкончанияПериодаОтсутствия,
		|	Отпуск.Сотрудник.Код,
		|	Отпуск.Организация.КодПоЕДРПОУ,
		|	ОтпускДополнительныеОтпуска.ВидОтпуска,
		|	ОтпускДополнительныеОтпуска.КоличествоДней,
		|	Отпуск.Дата,
		|	Отпуск.Сотрудник
		|ИЗ
		|	Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Отпуск КАК Отпуск
		|		ПО ОтпускДополнительныеОтпуска.Ссылка = Отпуск.Ссылка
		|ГДЕ
		|	ОтпускДополнительныеОтпуска.Ссылка.Проведен
		|	И ОтпускДополнительныеОтпуска.Ссылка В(&МассивОбъектов)";		
		
	ИначеЕсли ТипЗнч(МассивОбъектов[0].Ссылка) = Тип("ДокументСсылка.ОтпускБезСохраненияОплаты") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтпускБезСохраненияОплаты.Ссылка,
		|	ОтпускБезСохраненияОплаты.Номер КАК НомерДок,
		|	ОтпускБезСохраненияОплаты.Дата КАК ДатаДок,
		|	ОтпускБезСохраненияОплаты.Дата КАК Период,
		|	ОтпускБезСохраненияОплаты.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ОтпускБезСохраненияОплаты.Организация.КодПоЕДРПОУ КАК ЕДРПОУ,
		|	ОтпускБезСохраненияОплаты.Сотрудник,
		|	ОтпускБезСохраненияОплаты.Сотрудник.Код КАК ТабельныйНомер,
		|	ОтпускБезСохраненияОплаты.ВидОтпуска,
		|	ОтпускБезСохраненияОплаты.ДатаНачала КАК ДатаНачалаВсего,
		|	ОтпускБезСохраненияОплаты.ДатаОкончания КАК ДатаОкончанияВсего,
		|	ОтпускБезСохраненияОплаты.Руководитель КАК ФИОРуководителя,
		|	РАЗНОСТЬДАТ(ОтпускБезСохраненияОплаты.ДатаНачала, ОтпускБезСохраненияОплаты.ДатаОкончания, ДЕНЬ)+1 КАК Продолжительность
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
		|ГДЕ
		|	ОтпускБезСохраненияОплаты.Проведен
		|	И ОтпускБезСохраненияОплаты.Ссылка В(&МассивОбъектов)";	
		
	ИначеЕсли ТипЗнч(МассивОбъектов[0].Ссылка) = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтпускПоУходуЗаРебенком.Ссылка,
		|	ОтпускПоУходуЗаРебенком.Номер КАК НомерДок,
		|	ОтпускПоУходуЗаРебенком.Дата КАК ДатаДок,
		|	ОтпускПоУходуЗаРебенком.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ОтпускПоУходуЗаРебенком.Организация.КодПоЕДРПОУ КАК ЕДРПОУ,
		|	ОтпускПоУходуЗаРебенком.ОсновнойСотрудник КАК Сотрудник,
		|	ОтпускПоУходуЗаРебенком.Сотрудник.Код КАК ТабельныйНомер,
		|	ОтпускПоУходуЗаРебенком.ДатаНачала КАК ДатаНачалаВсего,
		|	ОтпускПоУходуЗаРебенком.ДатаОкончания КАК ДатаОкончанияВсего,
		|	ОтпускПоУходуЗаРебенком.Дата КАК Период,
		|	ОтпускПоУходуЗаРебенком.ВидОтпуска,
		|	ОтпускПоУходуЗаРебенком.Руководитель КАК ФИОРуководителя,
		|	РАЗНОСТЬДАТ(ОтпускПоУходуЗаРебенком.ДатаНачала, ОтпускПоУходуЗаРебенком.ДатаОкончания, ДЕНЬ)+1 КАК Продолжительность
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
		|ГДЕ
		|	ОтпускПоУходуЗаРебенком.Ссылка В(&МассивОбъектов)
		|	И ОтпускПоУходуЗаРебенком.Проведен";	
		
	ИначеЕсли ТипЗнч(МассивОбъектов[0].Ссылка) = Тип("ДокументСсылка.ОтпускаСотрудников") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтпускаСотрудниковСотрудники.Сотрудник,
		|	ОтпускаСотрудниковСотрудники.Сотрудник.Код КАК ТабельныйНомер,
		|	ОтпускаСотрудников.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ОтпускаСотрудников.Организация.КодПоЕДРПОУ КАК ЕДРПОУ,
		|	ОтпускаСотрудников.Руководитель КАК ФИОРуководителя,
		|	ОтпускаСотрудников.Дата КАК ДатаДок,
		|	ОтпускаСотрудников.Дата КАК Период,
		|	ОтпускаСотрудников.Номер КАК НомерДок,
		|	ОтпускаСотрудниковСотрудники.Ссылка,
		|	ОтпускаСотрудниковСотрудники.ВидОтпуска,
		|	ОтпускаСотрудниковСотрудники.ДатаНачала КАК ДатаНачалаВсего,
		|	ОтпускаСотрудниковСотрудники.ДатаОкончания КАК ДатаОкончанияВсего,
		|	ОтпускаСотрудниковСотрудники.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийГодС,
		|	ОтпускаСотрудниковСотрудники.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийГодПо,
		|	ОтпускаСотрудниковСотрудники.КоличествоДней КАК Продолжительность
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ОтпускаСотрудников.Сотрудники КАК ОтпускаСотрудниковСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтпускаСотрудников КАК ОтпускаСотрудников
		|		ПО ОтпускаСотрудниковСотрудники.Ссылка = ОтпускаСотрудников.Ссылка
		|ГДЕ
		|	ОтпускаСотрудниковСотрудники.Ссылка В(&МассивОбъектов)
		|	И НЕ ОтпускаСотрудниковСотрудники.Ссылка.ПометкаУдаления";	
		
	КонецЕсли;	
	
	
	Запрос.Выполнить();
	
КонецПроцедуры


Функция КадровыеДанныеДляПечатиКадровыхПриказов() Экспорт
	
	Возврат КадровыйУчетБазовый.КадровыеДанныеДляПечатиКадровыхПриказов() + ",ТрудовойДоговорНомер,ТрудовойДоговорДата,РазрядКатегория";
	
КонецФункции

Процедура ОбновитьТекущиеКадровыеДанныеСотрудников(Запрос) Экспорт
	
	Если Не Запрос.Параметры.Свойство("СохранитьДатыПриема") Тогда
		Запрос.УстановитьПараметр("СохранитьДатыПриема", Ложь);
	КонецЕсли;
	
	// Подготовим таблицу ИзмеренияДаты для получения среза последних.
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Сотрудник Из Запрос.Параметры.МассивСотрудниковДляОбновления Цикл
		СтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		СтрокаИзмеренияДаты.Сотрудник = Сотрудник;
	КонецЦикла;
	
	// Получим последние значения территории сотрудников
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ТерриторииСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));

	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация,
		|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ТекущееПодразделение,
		|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию, ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)) КАК ТекущаяДолжностьПоШтатномуРасписанию,
		|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ТекущаяДолжность,
		|	ЕСТЬNULL(КадроваяИсторияСотрудниковПрием.Период, ВЫБОР
		|			КОГДА &СохранитьДатыПриема = ИСТИНА
		|				ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема
		|			КОГДА ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|			ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаПриема
		|		КОНЕЦ) КАК ДатаПриема,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковУвольнение.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольнения,
		|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) КАК ТекущийВидЗанятости,
		|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ТекущийВидДоговора,
		|	ЕСТЬNULL(ТерриторииСотрудниковСрезПоследних.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)) КАК ТекущаяТерритория,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ГоловнаяОрганизацияПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизацияПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ТекущееПодразделениеПредыдущее,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжностьПоШтатномуРасписанию, ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)) КАК ТекущаяДолжностьПоШтатномуРасписаниюПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ТекущаяДолжностьПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриемаПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольненияПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) КАК ВидЗанятостиПредыдущий,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ВидДоговораПредыдущий,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяТерритория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)) КАК ТерриторияПредыдущая
		|ПОМЕСТИТЬ ВТНовыеКадровыеДанные
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|			И Сотрудники.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
		|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковПрием
		|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковПрием.Сотрудник
		|			И (КадроваяИсторияСотрудниковПрием.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковУвольнение
		|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковУвольнение.Сотрудник
		|			И (КадроваяИсторияСотрудниковУвольнение.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриторииСотрудниковСрезПоследних КАК ТерриторииСотрудниковСрезПоследних
		|		ПО Сотрудники.Ссылка = ТерриторииСотрудниковСрезПоследних.Сотрудник
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудниковДляОбновления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеКадровыеДанные.Сотрудник,
		|	НовыеКадровыеДанные.ТекущаяОрганизация,
		|	НовыеКадровыеДанные.ТекущееПодразделение,
		|	НовыеКадровыеДанные.ТекущаяДолжностьПоШтатномуРасписанию,
		|	НовыеКадровыеДанные.ТекущаяДолжность,
		|	НовыеКадровыеДанные.ДатаПриема,
		|	НовыеКадровыеДанные.ДатаУвольнения,
		|	НовыеКадровыеДанные.ТекущийВидЗанятости,
		|	НовыеКадровыеДанные.ФизическоеЛицо,
		|	НовыеКадровыеДанные.ГоловнаяОрганизация,
		|	НовыеКадровыеДанные.ТекущийВидДоговора КАК ТекущийВидДоговора,
		|	НовыеКадровыеДанные.ТекущаяТерритория КАК ТекущаяТерритория
		|ИЗ
		|	ВТНовыеКадровыеДанные КАК НовыеКадровыеДанные
		|ГДЕ
		|	(НовыеКадровыеДанные.ГоловнаяОрганизация <> НовыеКадровыеДанные.ГоловнаяОрганизацияПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ТекущаяОрганизация <> НовыеКадровыеДанные.ТекущаяОрганизацияПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ТекущееПодразделение <> НовыеКадровыеДанные.ТекущееПодразделениеПредыдущее
		|			ИЛИ НовыеКадровыеДанные.ТекущаяДолжностьПоШтатномуРасписанию <> НовыеКадровыеДанные.ТекущаяДолжностьПоШтатномуРасписаниюПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ТекущаяДолжность <> НовыеКадровыеДанные.ТекущаяДолжностьПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ДатаПриема <> НовыеКадровыеДанные.ДатаПриемаПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ДатаУвольнения <> НовыеКадровыеДанные.ДатаУвольненияПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ТекущийВидЗанятости <> НовыеКадровыеДанные.ВидЗанятостиПредыдущий
		|			ИЛИ НовыеКадровыеДанные.ТекущийВидДоговора <> НовыеКадровыеДанные.ВидДоговораПредыдущий
		|			ИЛИ НовыеКадровыеДанные.ТекущаяТерритория <> НовыеКадровыеДанные.ТерриторияПредыдущая)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СотрудникиНеПринятые = Новый Массив;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.ТекущаяДолжность) Тогда
				СотрудникиНеПринятые.Добавить(Выборка.Сотрудник);
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина); 
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		Если СотрудникиНеПринятые.Количество() > 0 Тогда
			ОбновитьТекущиеКадровыеДанныеПоДоговорамГПХ(СотрудникиНеПринятые);
		КонецЕсли;
	
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НовыеКадровыеДанные.Сотрудник КАК Сотрудник,
		|	НовыеКадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НовыеКадровыеДанные.ТекущаяОрганизация КАК Организация,
		|	НовыеКадровыеДанные.ТекущаяОрганизацияПредыдущая КАК ОрганизацияПредыдущая,
		|	ВЫБОР
		|		КОГДА НовыеКадровыеДанные.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РольРаботник,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущиеКадровыеДанные.Сотрудник) КАК КоличествоДругихРабочихМест
		|ИЗ
		|	ВТНовыеКадровыеДанные КАК НовыеКадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудников
		|		ПО НовыеКадровыеДанные.Сотрудник = РолиСотрудников.Сотрудник
		|			И (РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанные
		|		ПО НовыеКадровыеДанные.Сотрудник <> ТекущиеКадровыеДанные.Сотрудник
		|			И НовыеКадровыеДанные.ФизическоеЛицо = ТекущиеКадровыеДанные.ФизическоеЛицо
		|			И НовыеКадровыеДанные.ТекущаяОрганизацияПредыдущая = ТекущиеКадровыеДанные.ТекущаяОрганизация
		|ГДЕ
		|	(РолиСотрудников.РольСотрудника ЕСТЬ NULL 
		|				И НовыеКадровыеДанные.ТекущийВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|			ИЛИ НЕ РолиСотрудников.РольСотрудника ЕСТЬ NULL 
		|				И НовыеКадровыеДанные.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	НовыеКадровыеДанные.Сотрудник,
		|	НовыеКадровыеДанные.ФизическоеЛицо,
		|	НовыеКадровыеДанные.ТекущаяОрганизация,
		|	НовыеКадровыеДанные.ТекущаяОрганизацияПредыдущая,
		|	ВЫБОР
		|		КОГДА НовыеКадровыеДанные.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.РолиСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина); 
			НаборЗаписей.Отбор.РольСотрудника.Установить(Перечисления.РолиСотрудников.Работник, Истина); 
			Если Выборка.РольРаботник Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.Сотрудник = Выборка.Сотрудник;
				Запись.РольСотрудника = Перечисления.РолиСотрудников.Работник;
			КонецЕсли; 
			НаборЗаписей.Записать();
			
			Если Выборка.РольРаботник Тогда
				РегистрыСведений.РолиФизическихЛиц.УстановитьРольФизическогоЛица(
					Выборка.ФизическоеЛицо, Выборка.Организация, Перечисления.РолиФизическихЛиц.Сотрудник, Истина);
			КонецЕсли;
				
			Если Выборка.КоличествоДругихРабочихМест = 0 Тогда
				РегистрыСведений.РолиФизическихЛиц.УстановитьРольФизическогоЛица(
					Выборка.ФизическоеЛицо, Выборка.ОрганизацияПредыдущая, Перечисления.РолиФизическихЛиц.Сотрудник, Ложь);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Проверка списка начислений кадровых документов вызывается при обработке проверки заполнения.
// Проверяется состав начислений на предмет наличия взаимоисключающих начислений и заполненность
// показателей начислений.
//
// Параметры:
//		ДокументОбъект				- ДокументОбъект
//		ДатаСобытия					- Дата
//		ИмяТабличнойЧастиНачисления	- Строка
//		ИмяТабличнойЧастиПоказатели	- Строка
//		Отказ						- Булево
//		СодержитПолеДействие		- Булево
//		ИмяРеквизитаРабочееМесто	- Строка
//
Процедура ПроверкаСпискаНачисленийКадровогоДокумента(ДокументОбъект, ДатаСобытия, ИмяТабличнойЧастиНачисления, ИмяТабличнойЧастиПоказатели, Отказ, СодержитПолеДействие = Ложь, ИмяРеквизитаРабочееМесто = "", ИмяРеквизитаНачисление = "Начисление") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")
		Или Не Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная", , Ложь) Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Начисления = ДокументОбъект[ИмяТабличнойЧастиНачисления].Выгрузить();
	Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
		ТаблицаРабочихМест = Неопределено;
	Иначе
		ТаблицаРабочихМест = ОписаниеРабочихМестСотрудников(Начисления.ВыгрузитьКолонку(ИмяРеквизитаРабочееМесто), ДатаСобытия);
	КонецЕсли;
	
	Начисления.Колонки[ИмяРеквизитаНачисление].Имя = "Начисление";
	
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.УстановитьПараметр("Показатели", ДокументОбъект[ИмяТабличнойЧастиПоказатели].Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	Начисления.Действие КАК Действие,
		|	Начисления.РабочееМесто КАК РабочееМесто,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&Начисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Показатели.Показатель КАК Показатель,
		|	Показатели.Значение КАК Значение,
		|	Показатели.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ
		|	&Показатели КАК Показатели";
		
	ПредварительнаяВыборка = Ложь;
	Если Не СодержитПолеДействие Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Действие КАК Действие,", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТНачисления", "ПОМЕСТИТЬ ВТНачисленияПредварительно");
		ПредварительнаяВыборка = Истина;
	КонецЕсли; 
	
	Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто КАК РабочееМесто,", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто", "Начисления." + ИмяРеквизитаРабочееМесто);
	КонецЕсли;
	
	Если ПредварительнаяВыборка Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
				
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Начисления.НомерСтроки КАК НомерСтроки,
			|	Начисления.РабочееМесто КАК РабочееМесто,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ
			|	ВТНачисленияПредварительно КАК Начисления
			|ГДЕ
			|	Начисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)";
		
		Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто КАК РабочееМесто,", "");
		КонецЕсли;
		
	КонецЕсли; 
		
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Проверка наличия взаимоисключаемых начислений.
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).Наименование КАК Наименование,
		|	Начисления.РабочееМесто КАК РабочееМесто,
		|	ПРЕДСТАВЛЕНИЕ(Начисления.РабочееМесто) КАК РабочееМестоПредставление,
		|	Начисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК НачисленияДругие
		|		ПО Начисления.Начисление <> НачисленияДругие.Начисление
		|			И Начисления.РабочееМесто = НачисленияДругие.РабочееМесто
		|			И (ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).ОбозначениеВТабелеУчетаРабочегоВремени = ВЫРАЗИТЬ(НачисленияДругие.Начисление КАК ПланВидовРасчета.Начисления).ОбозначениеВТабелеУчетаРабочегоВремени)
		|			И (ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).ЗачетНормыВремени = ВЫРАЗИТЬ(НачисленияДругие.Начисление КАК ПланВидовРасчета.Начисления).ЗачетНормыВремени)
		|ГДЕ
		|	НЕ НачисленияДругие.НомерСтроки ЕСТЬ NULL 
		|	И ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
		|	И ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).ЗачетНормыВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫРАЗИТЬ(Начисления.Начисление КАК ПланВидовРасчета.Начисления).Наименование,
		|	Начисления.РабочееМесто,
		|	Начисления.НомерСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.РабочееМесто,
		|	НомерСтроки";
	
	Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто КАК РабочееМесто,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПРЕДСТАВЛЕНИЕ(Начисления.РабочееМесто) КАК РабочееМестоПредставление,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Начисления.РабочееМесто = НачисленияДругие.РабочееМесто", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто,", "");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Введено несколько взаимоисключающих начислений (%1)';uk='Введено кілька взаємовиключних нарахувань (%1)'"), Выборка.Наименование);
					
			Иначе
				
				РабочиеМестаПредставление = ТаблицаРабочихМест.НайтиСтроки(Новый Структура("Сотрудник", Выборка.РабочееМесто));
				Если РабочиеМестаПредставление.Количество() > 0 Тогда
					РабочееМестоПредставление = РабочиеМестаПредставление[0].ПредставлениеРабочегоМеста;
				Иначе
					РабочееМестоПредставление = Выборка.РабочееМестоПредставление;
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1, введено несколько взаимоисключающих начислений (%2)';uk='%1, введено кілька взаємовиключних нарахувань (%2)'"),
					РабочееМестоПредставление,
					Выборка.Наименование);
					
			КонецЕсли;
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, ДокументОбъект, ИмяТабличнойЧастиНачисления + "[" + Формат(Выборка.НомерСтроки - 1, "ЧГ=0") + "]." + ИмяРеквизитаНачисление, ,Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверка заполнения значений показателей.
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	Начисления.РабочееМесто КАК РабочееМесто,
		|	Начисления.Начисление КАК Начисление,
		|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	НачисленияПоказатели.Показатель,
		|	НачисленияПоказатели.НомерСтроки КАК НомерСтрокиПоказателя
		|ПОМЕСТИТЬ ВТНачисленияСПоказателями
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО Начисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
		|			И (НачисленияПоказатели.Показатель.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное))
		|			И (НЕ НачисленияПоказатели.Показатель.ЗначениеРассчитываетсяАвтоматически)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияСПоказателями.НомерСтроки КАК НомерСтроки,
		|	НачисленияСПоказателями.РабочееМесто КАК РабочееМесто,
		|	ПРЕДСТАВЛЕНИЕ(НачисленияСПоказателями.РабочееМесто) КАК РабочееМестоПредставление,
		|	ВЫБОР
		|		КОГДА НачисленияСПоказателями.Показатель.КраткоеНаименование = """"
		|			ТОГДА НачисленияСПоказателями.Показатель.Наименование
		|		ИНАЧЕ НачисленияСПоказателями.Показатель.КраткоеНаименование
		|	КОНЕЦ КАК Показатель
		|ИЗ
		|	ВТНачисленияСПоказателями КАК НачисленияСПоказателями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
		|		ПО НачисленияСПоказателями.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
		|			И НачисленияСПоказателями.Показатель = Показатели.Показатель
		|ГДЕ
		|	ЕСТЬNULL(Показатели.Значение, 0) = 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачисленияСПоказателями.РабочееМесто,
		|	НомерСтроки";
	
	Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.РабочееМесто КАК РабочееМесто,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НачисленияСПоказателями.РабочееМесто КАК РабочееМесто,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПРЕДСТАВЛЕНИЕ(НачисленияСПоказателями.РабочееМесто) КАК РабочееМестоПредставление,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НачисленияСПоказателями.РабочееМесто,", "");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ПустаяСтрока(ИмяРеквизитаРабочееМесто) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не задано значение ""%1""';uk='Не має значення ""%1""'"), Выборка.Показатель);
					
			Иначе
					
				РабочиеМестаПредставление = ТаблицаРабочихМест.НайтиСтроки(Новый Структура("Сотрудник", Выборка.РабочееМесто));
				Если РабочиеМестаПредставление.Количество() > 0 Тогда
					РабочееМестоПредставление = РабочиеМестаПредставление[0].ПредставлениеРабочегоМеста;
				Иначе
					РабочееМестоПредставление = Выборка.РабочееМестоПредставление;
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1, не задано значение ""%2""';uk='%1, не має значення ""%2""'"),
					РабочееМестоПредставление,
					Выборка.Показатель);
					
			КонецЕсли;
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, ДокументОбъект, ИмяТабличнойЧастиНачисления + "[" + Формат(Выборка.НомерСтроки - 1, "ЧГ=0") + "].Показатель1", ,Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает или удаляет роль сотрудника Договорник.
//
// Параметры:
//		СотрудникСсылка
//		Установить - Булево, истина установить роль, ложь - удалить.
//
Процедура УстановитьРольДоговорникСотруднику(СотрудникСсылка, Установить = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудников
	|		ПО Сотрудники.Ссылка = РолиСотрудников.Сотрудник
	|			И (РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник))
	|ГДЕ
	|	Сотрудники.Ссылка = &СотрудникСсылка
	|	И ВЫБОР
	|			КОГДА &Установить
	|				ТОГДА РолиСотрудников.Сотрудник ЕСТЬ NULL 
	|			ИНАЧЕ НЕ РолиСотрудников.Сотрудник ЕСТЬ NULL 
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("СотрудникСсылка", СотрудникСсылка);
	Запрос.УстановитьПараметр("Установить", Установить);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Набор = РегистрыСведений.РолиСотрудников.СоздатьНаборЗаписей();
		Набор.Отбор.Сотрудник.Установить(СотрудникСсылка);
		Набор.Отбор.РольСотрудника.Установить(Перечисления.РолиСотрудников.Договорник);
		
		Если Установить Тогда
			Запись = Набор.Добавить();
			Запись.Сотрудник = СотрудникСсылка;
			Запись.РольСотрудника = Перечисления.РолиСотрудников.Договорник;
		КонецЕсли; 
		
		Набор.Записать();
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция НомерКадровогоПриказа(Знач НомерПриказа) Экспорт
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
		Возврат ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НомерПриказа, Истина, Истина);
	КонецЕсли;
	
	Возврат НомерПриказа;
	
КонецФункции

Процедура ПроверитьСоответствиеСотрудниковТабличнойЧастиОрганизации(Организация, ТабличнаяЧастьСотрудники, Отказ) Экспорт
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	СписокСотрудников = ТабличнаяЧастьСотрудники.ВыгрузитьКолонку("Сотрудник");
	
	ГоловныеОрганизацииСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудников, "ГоловнаяОрганизация");
	Для каждого СтрокаСотрудника Из ТабличнаяЧастьСотрудники Цикл
		
		ГоловнаяОрганизацияСотрудника = ГоловныеОрганизацииСотрудников.Получить(СтрокаСотрудника.Сотрудник);
		Если ГоловнаяОрганизацияСотрудника <> ГоловнаяОрганизация Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник %1 не соответствует организации %2.';uk='Співробітник %1 не відповідає організації %2.'"),
				СтрокаСотрудника.Сотрудник,
				Организация);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.Сотрудники[" + (СтрокаСотрудника.НомерСтроки - 1) + "].Сотрудник",
				,
				Отказ);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИФункцииФормированияОтчетов

Функция ДополнительныеСведенияУнифицированнойФормыТ2(СтрокиДанных, ДатаОтчета, КлючВарианта) Экспорт
	
	ДополнительныеСведения = ДополнительныеСведенияУнифицированнойФормыТ2ПоРеестрам(СтрокиДанных, ДатаОтчета, КлючВарианта);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаСотрудника Из СтрокиДанных Цикл
		НоваяСтрокаТаблицыСотрудников = ТаблицаСотрудников.Добавить();
		НоваяСтрокаТаблицыСотрудников.Сотрудник = СтрокаСотрудника.РабочееМестоСотрудник;
		НоваяСтрокаТаблицыСотрудников.ФизическоеЛицо = СтрокаСотрудника.ЛичныеДанныеФизическоеЛицо;
		НоваяСтрокаТаблицыСотрудников.Период = СтрокаСотрудника.ПараметрыДанныхПериод;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаСотрудников.Период КАК Период,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК НачалоПериода,
		|	ТаблицаСотрудников.Период КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.Выполнить();
	
	ОписательОтборов = Новый Структура("ИмяВременнойТаблицыОтборовФизическихЛиц,ИмяПоляФизическоеЛицо", "ВТСотрудникиПериоды", "ФизическоеЛицо");
	ЗапросКОбразованиям = ЗапросВТОбразованияФизическихЛиц(Истина, ОписательОтборов);
	ЗапросКОбразованиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросКОбразованиям.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбразованиеФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбразованиеФизическихЛиц.Начало КАК Начало,
		|	ОбразованиеФизическихЛиц.Окончание,
		|	ОбразованиеФизическихЛиц.УчебноеЗаведение,
		|	ОбразованиеФизическихЛиц.ВидДокумента,
		|	ОбразованиеФизическихЛиц.Серия,
		|	ОбразованиеФизическихЛиц.Номер,
		|	ОбразованиеФизическихЛиц.ДатаВыдачи,
		|	ОбразованиеФизическихЛиц.Основание,
		|	ОбразованиеФизическихЛиц.ФормаОбучения
		|ИЗ
		|	ВТОбразованияФизическихЛиц КАК ОбразованиеФизическихЛиц
		|ГДЕ
		|	НЕ ОбразованиеФизическихЛиц.ОсновноеОбразование
		|	И ОбразованиеФизическихЛиц.ВидДополнительногоОбучения = ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Начало";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеЗаполнения = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоСотруднику = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Начало", Формат(Выборка.Начало, "ДЛФ=D"));
			СтруктураСтроки.Вставить("Окончание", Формат(Выборка.Окончание, "ДЛФ=D"));
			СтруктураСтроки.Вставить("ВидПовышенияКвалификации", НСтр("ru='Обучение на курсах';uk='Навчання на курсах'"));
			СтруктураСтроки.Вставить("УчебноеЗаведениеАдрес", Выборка.УчебноеЗаведение);
			СтруктураСтроки.Вставить("ВидДокумента", Выборка.ВидДокумента);
			СтруктураСтроки.Вставить("СерияНомер", ?(ЗначениеЗаполнено(Выборка.Серия), Выборка.Серия + ", ", "") + Выборка.Номер);
			СтруктураСтроки.Вставить("ДатаВыдачи", Формат(Выборка.ДатаВыдачи, "ДФ=дд.ММ.гг"));
			СтруктураСтроки.Вставить("Основание", Выборка.Основание);
			СтруктураСтроки.Вставить("ФормаОбучения", Выборка.ФормаОбучения);
			ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить(Выборка.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеПовышенияКвалификаций", ДанныеЗаполнения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбразованиеФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбразованиеФизическихЛиц.Начало КАК Начало,
		|	ОбразованиеФизическихЛиц.Окончание,
		|	ОбразованиеФизическихЛиц.Специальность,
		|	ОбразованиеФизическихЛиц.ВидДокумента,
		|	ОбразованиеФизическихЛиц.Серия,
		|	ОбразованиеФизическихЛиц.Номер,
		|	ОбразованиеФизическихЛиц.ДатаВыдачи,
		|	ОбразованиеФизическихЛиц.Основание,
		|	ОбразованиеФизическихЛиц.ФормаОбучения
		|ИЗ
		|	ВТОбразованияФизическихЛиц КАК ОбразованиеФизическихЛиц
		|ГДЕ
		|	НЕ ОбразованиеФизическихЛиц.ОсновноеОбразование
		|	И ОбразованиеФизическихЛиц.ВидДополнительногоОбучения = ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.Переподготовка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Начало";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеЗаполнения = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоСотруднику = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Начало", Формат(Выборка.Начало, "ДЛФ=D"));
			СтруктураСтроки.Вставить("Окончание", Формат(Выборка.Окончание, "ДЛФ=D"));
			СтруктураСтроки.Вставить("Специальность", Выборка.Специальность);
			СтруктураСтроки.Вставить("ВидДокумента", Выборка.ВидДокумента);
			СтруктураСтроки.Вставить("СерияНомер", ?(ЗначениеЗаполнено(Выборка.Серия), Выборка.Серия + ", ", "") + Выборка.Номер);
			СтруктураСтроки.Вставить("ДатаВыдачи", Формат(Выборка.ДатаВыдачи, "ДФ=дд.ММ.гг"));
			СтруктураСтроки.Вставить("Основание", Выборка.Основание);
			СтруктураСтроки.Вставить("ФормаОбучения", Выборка.ФормаОбучения);
			ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить(Выборка.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеПрофессиональныхПереподготовок", ДанныеЗаполнения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбразованиеФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбразованиеФизическихЛиц.УчебноеЗаведение КАК УчебноеЗаведение,
		|	ОбразованиеФизическихЛиц.Начало КАК Начало,
		|	ОбразованиеФизическихЛиц.Окончание,
		|	ОбразованиеФизическихЛиц.Специальность,
		|	ОбразованиеФизическихЛиц.Квалификация,
		|	ОбразованиеФизическихЛиц.ВидДокумента,
		|	ОбразованиеФизическихЛиц.Серия,
		|	ОбразованиеФизическихЛиц.Номер,
		|	ОбразованиеФизическихЛиц.ДатаВыдачи,
		|	ОбразованиеФизическихЛиц.Основание,
		|	ОбразованиеФизическихЛиц.ФормаОбучения
		|ИЗ
		|	ВТОбразованияФизическихЛиц КАК ОбразованиеФизическихЛиц
		|ГДЕ
		|	ОбразованиеФизическихЛиц.ОсновноеОбразование
		|	И ОбразованиеФизическихЛиц.ВидДополнительногоОбучения = ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.ПустаяСсылка)
		|	И НЕ ОбразованиеФизическихЛиц.ВидОбразования = ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ОрдинатураАдъюнктура)
		|	И НЕ ОбразованиеФизическихЛиц.ВидОбразования = ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.Докторантура)
		|   И НЕ ОбразованиеФизическихЛиц.ВидОбразования = ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.Аспирантура)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Начало";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеЗаполнения = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоСотруднику = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("УчебноеЗаведение", Выборка.УчебноеЗаведение);
			СтруктураСтроки.Вставить("Начало", Формат(Выборка.Начало, "ДЛФ=D"));
			СтруктураСтроки.Вставить("Окончание", Формат(Выборка.Окончание, "ДЛФ=D"));
			СтруктураСтроки.Вставить("ГодОкончания", Год(Выборка.Окончание));
			СтруктураСтроки.Вставить("Специальность", Выборка.Специальность);
			СтруктураСтроки.Вставить("Квалификация", Выборка.Квалификация);
			СтруктураСтроки.Вставить("ВидДокументаСерияНомер", Строка(Выборка.ВидДокумента) + " " + ?(ЗначениеЗаполнено(Выборка.Серия), Выборка.Серия + ", ", "") + Выборка.Номер);
			СтруктураСтроки.Вставить("ДатаВыдачи", Формат(Выборка.ДатаВыдачи, "ДФ=дд.ММ.гг"));
			СтруктураСтроки.Вставить("Основание", Выборка.Основание);
			СтруктураСтроки.Вставить("ФормаОбучения", Выборка.ФормаОбучения);
			ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить(Выборка.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеОбразования", ДанныеЗаполнения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбразованиеФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОбразованиеФизическихЛиц.УчебноеЗаведение КАК УчебноеЗаведение,
		|	ОбразованиеФизическихЛиц.Начало КАК Начало,
		|	ОбразованиеФизическихЛиц.Окончание,
		|	ОбразованиеФизическихЛиц.ВидДокумента,
		|	ОбразованиеФизическихЛиц.Серия,
		|	ОбразованиеФизическихЛиц.Номер,
		|	ОбразованиеФизическихЛиц.ДатаВыдачи,
		|	ОбразованиеФизическихЛиц.ВидОбразования,
		|	ОбразованиеФизическихЛиц.ФормаОбучения
		|ИЗ
		|	ВТОбразованияФизическихЛиц КАК ОбразованиеФизическихЛиц
		|ГДЕ
		|	ОбразованиеФизическихЛиц.ВидОбразования = ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ОрдинатураАдъюнктура)
		|	ИЛИ ОбразованиеФизическихЛиц.ВидОбразования = ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.Докторантура)
		|   ИЛИ ОбразованиеФизическихЛиц.ВидОбразования = ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.Аспирантура)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Начало";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеЗаполнения = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоСотруднику = Новый Массив;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("УчебноеЗаведение", Выборка.УчебноеЗаведение);
			СтруктураСтроки.Вставить("ВидОбразования", Выборка.ВидОбразования);
			СтруктураСтроки.Вставить("Начало", Формат(Выборка.Начало, "ДЛФ=D"));
			СтруктураСтроки.Вставить("Окончание", Формат(Выборка.Окончание, "ДЛФ=D"));
			СтруктураСтроки.Вставить("ГодОкончания", Год(Выборка.Окончание));
			СтруктураСтроки.Вставить("ДипломНомерДатаВыдачи", Строка(Выборка.ВидДокумента) + " " + ?(ЗначениеЗаполнено(Выборка.Серия), Выборка.Серия + ", ", "") + Выборка.Номер + " " + Формат(Выборка.ДатаВыдачи, "ДФ=дд.ММ.гг"));
			СтруктураСтроки.Вставить("ДатаВыдачи", Формат(Выборка.ДатаВыдачи, "ДФ=дд.ММ.гг"));
			СтруктураСтроки.Вставить("ФормаОбучения", Выборка.ФормаОбучения);
			ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить(Выборка.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеОбразованияПрочие", ДанныеЗаполнения);
	

	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РодственникиФизическихЛиц.Владелец КАК ФизическоеЛицо,
		|	РодственникиФизическихЛиц.СтепеньРодства КАК СтепеньРодства,
		|	РодственникиФизическихЛиц.Наименование КАК ФИОРодственника,
		|	РодственникиФизическихЛиц.ДатаРождения КАК ДатаРожденияРодственника
		|ИЗ
		|	Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
		|ГДЕ
		|	РодственникиФизическихЛиц.Владелец В(&ФизическиеЛица)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	РодственникиФизическихЛиц.ДатаРождения УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НаградыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НаградыФизическихЛиц.Награда КАК Награда,
		|	НаградыФизическихЛиц.НомерПриказа КАК НомерПриказа,
		|	НаградыФизическихЛиц.ДатаПриказа КАК ДатаПриказа,
		|	НаградыФизическихЛиц.НаименованиеПриказа КАК Приказ,
		|	НаградыФизическихЛиц.НомерПоПорядку
		|ИЗ
		|	РегистрСведений.НаградыФизическихЛиц КАК НаградыФизическихЛиц
		|ГДЕ
		|	НаградыФизическихЛиц.ФизическоеЛицо В(&ФизическиеЛица)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	НаградыФизическихЛиц.НомерПоПорядку";
	
	Запрос.УстановитьПараметр("ФизическиеЛица", СтрокиДанных.ВыгрузитьКолонку("ЛичныеДанныеФизическоеЛицо"));
	Запрос.УстановитьПараметр("Сотрудники", СтрокиДанных.ВыгрузитьКолонку("РабочееМестоСотрудник"));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеЗаполнения = Новый Соответствие;
	ВыборкаПоСоставуСемьи = РезультатЗапроса[0].Выбрать();
	Пока ВыборкаПоСоставуСемьи.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоСотруднику = Новый Массив;
		Пока ВыборкаПоСоставуСемьи.Следующий() Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("СтепеньРодства", ВыборкаПоСоставуСемьи.СтепеньРодства);
			СтруктураСтроки.Вставить("ФИОРодственника", ВыборкаПоСоставуСемьи.ФИОРодственника);
			СтруктураСтроки.Вставить("ГодРожденияРодственника", Формат(ВыборкаПоСоставуСемьи.ДатаРожденияРодственника, "ДФ=гггг"));
			ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить(ВыборкаПоСоставуСемьи.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеЗаполненияСоставСемьи", ДанныеЗаполнения);
	
	ДанныеЗаполнения = Новый Соответствие;
	ВыборкаПоНаградам = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаПоНаградам.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоСотруднику = Новый Массив;
		Пока ВыборкаПоНаградам.Следующий() Цикл
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("Награда", ВыборкаПоНаградам.Награда);
			СтруктураСтроки.Вставить("Приказ", ВыборкаПоНаградам.Приказ);
			СтруктураСтроки.Вставить("НомерПриказа", ВыборкаПоНаградам.НомерПриказа);
			СтруктураСтроки.Вставить("ДатаПриказа", ВыборкаПоНаградам.ДатаПриказа);
			ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		ДанныеЗаполнения.Вставить(ВыборкаПоНаградам.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеЗаполненияНаграды", ДанныеЗаполнения);
	
	ОписательВременнойТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
		"ВТСотрудникиПериоды",
		"Сотрудник.ФизическоеЛицо",
		"Период");
	
	ЗапросВТСтажи = ЗапросВТСтажиФизическихЛиц(Истина, ОписательВременнойТаблицыОтборов);
	ЗапросВТСтажи.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросВТСтажи.Текст = СтрЗаменить(ЗапросВТСтажи.Текст, "ПОМЕСТИТЬ ВТСтажиФизическихЛиц", "");
	ЗапросВТСтажи.Текст = ЗапросВТСтажи.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	ВидСтажа.Код";
	
	ДанныеЗаполнения = Новый Соответствие;
	ВыборкаСтажи = ЗапросВТСтажи.Выполнить().Выбрать();
	Пока ВыборкаСтажи.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ДанныеЗаполненияПоФизическомуЛицу = Новый Массив;
		Пока ВыборкаСтажи.Следующий() Цикл
			
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("СтажВид", ВыборкаСтажи.ВидСтажа);
			СтруктураСтроки.Вставить("СтажДней", ВыборкаСтажи.Дней);
			СтруктураСтроки.Вставить("СтажМесяцев", ВыборкаСтажи.Месяцев);
			СтруктураСтроки.Вставить("СтажЛет", ВыборкаСтажи.Лет);
			
			ДанныеЗаполненияПоФизическомуЛицу.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		ДанныеЗаполнения.Вставить(ВыборкаСтажи.ФизическоеЛицо, ДанныеЗаполненияПоФизическомуЛицу);
		
	КонецЦикла;
	
	ДополнительныеСведения.Вставить("ДанныеЗаполненияСтажи", ДанныеЗаполнения);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		МодульАттестацииСотрудников = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		МодульАттестацииСотрудников.ДополнитьСведенияУнифицированнойФормыТ2(ДополнительныеСведения, СтрокиДанных, ДатаОтчета);
	КонецЕсли;
	
	// В самом конце дополним сведения по государственным служащим
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДополнитьСведенияУнифицированнойФормыТ2(ДополнительныеСведения, СтрокиДанных, ДатаОтчета, КлючВарианта);
	КонецЕсли;
	
	Возврат ДополнительныеСведения;
	
КонецФункции

Функция ДополнительныеСведенияУнифицированнойФормыТ2ПоРеестрам(СтрокиДанных, ДатаОтчета, КлючВарианта)
	
	ДополнительныеСведения = Новый Соответствие;
	ДанныеЗаполненияКадровойИстории = Новый Соответствие;
	
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеестрКадровыхПриказов.Дата КАК Период,
	|	РеестрКадровыхПриказов.Сотрудник КАК Сотрудник,
	|	РеестрКадровыхПриказов.Подразделение,
	|	РеестрКадровыхПриказов.Должность,
	|	РеестрКадровыхПриказов.Должность.КодКП КАК КодКП,
	|	РеестрКадровыхПриказов.Разряд,
	|	РеестрКадровыхПриказов.ТарифнаяСтавкаНадбавка,
	|	РеестрКадровыхПриказов.ДатаПриказа,
	|	РеестрКадровыхПриказов.НомерПриказа,
	|	РеестрКадровыхПриказов.Основание
	|ИЗ
	|	РегистрСведений.РеестрКадровыхПриказов КАК РеестрКадровыхПриказов
	|ГДЕ
	|	РеестрКадровыхПриказов.Сотрудник В(&МассивСотрудников)
	|	И РеестрКадровыхПриказов.Дата <= &ДатаОтчета
	|	И РеестрКадровыхПриказов.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Период";
	
	МассивСотрудников = Новый Массив;
	
	Для каждого СтрокаСотрудника Из СтрокиДанных Цикл
		МассивСотрудников.Добавить(СтрокаСотрудника.РабочееМестоСотрудник);	
	КонецЦикла;

	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
	
	ВыборкаКадроваяИстория = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаКадроваяИстория.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ДанныеЗаполненияКадровойИсторииПоСотруднику = Новый Массив;
			
		Пока ВыборкаКадроваяИстория.Следующий() Цикл
			
			СтруктураСтроки = Новый Структура();
			СтруктураСтроки.Вставить("ДатаПеревода", ВыборкаКадроваяИстория.Период);
			Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ВыборкаКадроваяИстория.Подразделение) И ТипЗнч(ВыборкаКадроваяИстория.Подразделение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				СтруктураСтроки.Вставить("ПодразделениеПеревода", ВыборкаКадроваяИстория.Подразделение.ПолноеНаименование());
			Иначе
				СтруктураСтроки.Вставить("ПодразделениеПеревода", ВыборкаКадроваяИстория.Подразделение);
			КонецЕсли; 
			СтруктураСтроки.Вставить("ДолжностьПеревода", Строка(ВыборкаКадроваяИстория.Должность) + ?(ЗначениеЗаполнено(ВыборкаКадроваяИстория.Разряд), ", " + Строка(ВыборкаКадроваяИстория.Разряд), ""));
			СтруктураСтроки.Вставить("КодКП", ВыборкаКадроваяИстория.КодКП);
			СтруктураСтроки.Вставить("ТарифнаяСтавка", ВыборкаКадроваяИстория.ТарифнаяСтавкаНадбавка);
			
			Основание = ОснованиеДляРеестра(ВыборкаКадроваяИстория.ДатаПриказа, ВыборкаКадроваяИстория.НомерПриказа);
			
			СтруктураСтроки.Вставить("ОснованиеПеревода", Основание);
			
			ДанныеЗаполненияКадровойИсторииПоСотруднику.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		
		ДанныеЗаполненияКадровойИстории.Вставить(ВыборкаКадроваяИстория.Сотрудник, ДанныеЗаполненияКадровойИсторииПоСотруднику);
		
	КонецЦикла;
		
	ДополнительныеСведения.Вставить("ДанныеЗаполненияКадровойИстории", ДанныеЗаполненияКадровойИстории);
	
	// Отпуска
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", СтрокиДанных.ВыгрузитьКолонку("РабочееМестоСотрудник"));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрОтпусков.Сотрудник КАК Сотрудник,
		|	РеестрОтпусков.ВидОтпуска,
		|	РеестрОтпусков.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийГодС,
		|	РеестрОтпусков.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийГодПо,
		|	РеестрОтпусков.КоличествоДнейОтпуска КАК ДнейОтпуска,
		|	РеестрОтпусков.ДатаНачалаПериодаОтсутствия КАК ДатаС,
		|	РеестрОтпусков.ДатаОкончанияПериодаОтсутствия КАК ДатаПо,
		|	РеестрОтпусков.Основание
		|ИЗ
		|	РегистрСведений.РеестрОтпусков КАК РеестрОтпусков
		|ГДЕ
		|	РеестрОтпусков.Сотрудник В(&Сотрудники)
		|	И НЕ РеестрОтпусков.Регистратор ССЫЛКА Документ.БольничныйЛист
		|	И НЕ РеестрОтпусков.Регистратор ССЫЛКА Документ.Увольнение
		|	И НЕ РеестрОтпусков.Регистратор ССЫЛКА Документ.УвольнениеСписком
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	РеестрОтпусков.ДатаНачалаПериодаОтсутствия";
	
	
	Если НастройкиКадровогоУчета().ПечататьТ6ДляОтпусковПоБеременностиИРодам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ РеестрОтпусков.Регистратор ССЫЛКА Документ.БольничныйЛист", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеЗаполнения = Новый Соответствие;
		ВыборкаОтпуска = РезультатЗапроса.Выбрать();
		Пока ВыборкаОтпуска.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			ДанныеЗаполненияПоСотруднику = Новый Массив;
			Пока ВыборкаОтпуска.Следующий() Цикл
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("ВидОтпуска", ВыборкаОтпуска.ВидОтпуска);
				СтруктураСтроки.Вставить("ДатаС", ВыборкаОтпуска.ДатаС);
				СтруктураСтроки.Вставить("ДатаПо", ВыборкаОтпуска.ДатаПо);
				СтруктураСтроки.Вставить("ДнейОтпуска", ВыборкаОтпуска.ДнейОтпуска);
				СтруктураСтроки.Вставить("РабочийГодС", ВыборкаОтпуска.РабочийГодС);
				СтруктураСтроки.Вставить("РабочийГодПо", ВыборкаОтпуска.РабочийГодПо);
				СтруктураСтроки.Вставить("ОснованиеОтпуска", ВыборкаОтпуска.Основание);
				
				ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
			ДанныеЗаполнения.Вставить(ВыборкаОтпуска.Сотрудник, ДанныеЗаполненияПоСотруднику);
			
		КонецЦикла;
		
		ДополнительныеСведения.Вставить("ДанныеЗаполненияОтпуска", ДанныеЗаполнения);
		
	КонецЕсли;
	
	Возврат ДополнительныеСведения;
	
КонецФункции

Функция ОтчетВидаКарточкаСотрудника(КлючВарианта) Экспорт
	
	
	Возврат Ложь;
	
КонецФункции

Процедура ВывестиМакетыОтчетовПоСотрудникам(КлючВарианта, ДокументРезультат, Данные, Группировки, ЗначениеПараметра, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи) Экспорт
	
	
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеМетодыДляПолученияКадровыхДанных

Функция ПредставлениеСтажа(Дней, Месяцев, Лет)
	
	Возврат ?(Дней = 0, "", Формат(Дней, "ЧГ=0") + " " +  ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru='день';uk='день'"), НСтр("ru='дня';uk='дня'"), НСтр("ru='дней';uk='днів'"), Дней) + " ")
		+ ?(Месяцев = 0, "", Формат(Месяцев, "ЧГ=0") + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru='месяц';uk='місяць'"), НСтр("ru='месяца';uk='місяця'"), НСтр("ru='месяцев';uk='місяців'"), Месяцев) + " ")
		+ ?(Лет = 0, "", Формат(Лет, "ЧГ=0") + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла(НСтр("ru='год';uk='рік'"), НСтр("ru='года';uk='року'"), НСтр("ru='лет';uk='років'"), Лет));
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииФормКадровыхДокументов

Процедура УстановитьПараметрыВыбораНачисленийПоКатегории(Форма, ОписаниеТаблицыНачислений, МассивКатегорийНачислений) Экспорт
	
	ЭлементФормыНачисление = Форма.Элементы.Найти(
		ОписаниеТаблицыНачислений.ИмяТаблицы
		+ ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета);
		
	Если ЭлементФормыНачисление <> Неопределено Тогда
		
		ЕстьСвояНастройкаПараметра = Ложь;
		
		ПараметрыВыбораНачислений = Новый Массив;
		
		Для каждого ПараметрВыбора Из ЭлементФормыНачисление.ПараметрыВыбора Цикл
			
			Если ПараметрВыбора.Имя = "Отбор.КатегорияНачисленияИлиНеоплаченногоВремени" Тогда
				ЕстьСвояНастройкаПараметра = Истина;
				Прервать;
			КонецЕсли;
			
			ПараметрыВыбораНачислений.Добавить(ПараметрВыбора);
			
		КонецЦикла;
		
		Если Не ЕстьСвояНастройкаПараметра Тогда
			
			ПараметрВыбораНачислений = Новый ПараметрВыбора("Отбор.КатегорияНачисленияИлиНеоплаченногоВремени", Новый ФиксированныйМассив(МассивКатегорийНачислений));
			ПараметрыВыбораНачислений.Добавить(ПараметрВыбораНачислений);
			ЭлементФормыНачисление.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораНачислений);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыВыбораКатегорииНачислений(ПолныйСписокКатегорий = Ложь) Экспорт
	
	МассивКатегорийНачислений = Новый Массив;
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсационныеВыплаты);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Индексация);
	МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоМЗП);
	
	Если ПолныйСписокКатегорий Тогда
		МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность);
		МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
		МассивКатегорийНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	КонецЕсли;
	
	Возврат МассивКатегорийНачислений;
	
КонецФункции

Процедура УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма, ОписаниеТаблицыНачислений, ЗначениеПараметраВыбора) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма, ОписаниеТаблицыНачислений, ЗначениеПараметраВыбора);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуДовольствию(Форма, ОписаниеТаблицыНачислений, ЗначениеПараметраВыбора) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуДовольствию(Форма, ОписаниеТаблицыНачислений, ЗначениеПараметраВыбора);
	КонецЕсли;

КонецПроцедуры

Функция ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Возврат Модуль.ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуСодержанию(Форма);
	Иначе
		Возврат Неопределено;
	КонецЕсли;	

КонецФункции

// Выполняет проверку соответствия штатному расписанию переданных кадровых движений.
// Параметры: 
//	ДанныеОЗанятыхПозициях это коллекция элементов с полями.
//		Период, 
//		ПозицияШтатногоРасписания, 
//		Сотрудник,
//		КоличествоСтавок
//	ПроверяемыйРегистратор - ссылка на проверяемый регистратор (движения 
//		которого необходимо исключить из рассмотрения).
//	СохранитьНаСервере - булево. Если Истина, то результаты проверки необходимо 
//		сохранить во временном хранилище.
//	РезультатПроверки - в этот параметр возвращается результат проверки - 
//		адрес временного хранилища со структурой.
//		Структура может содержать два поля.
//			* ПроблемыТекущегоДокумента.
//			* ПроблемыДругихДокументов.
//		Каждое из полей - таблица значений с колонками.
//			- Документ - ссылка на документ, который не будет соответствовать штатному расписанию.
//			- ДокументПредставление - ...его представление.
//			- ДатаДокумента - ...его дата.
//			- Период - дата движения, которое не будет соответствовать штатному расписанию.
//			- Сотрудник
//			- КоличествоСтавок
//			- ПозицияШтатногоРасписания
//			- ПозицияШтатногоРасписанияПредставление
//	ИсправленныйДокумент - ссылка на документ, который будет исправлен документом ПроверяемыйРегистратор.
//		Не обязательный
//			
//	Возвращаемое значение:
//	Истина, если данные соответствуют штатному расписанию и Ложь в противном случае.
Функция ПроверкаСоответствияШтатномуРасписанию(Знач ДанныеОЗанятыхПозициях, ПроверяемыйРегистратор, СохранитьНаСервере, РезультатПроверки, ИсправленныйДокумент = НеОпределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ДанныеОЗанятыхПозициях) = Тип("Строка") Тогда
		ДанныеОЗанятыхПозициях = ПолучитьИзВременногоХранилища(ДанныеОЗанятыхПозициях);
	КонецЕсли;
	
	ДанныеПроверки = Новый Структура();
	
	ПроблемыТекущегоДокумента = Новый ТаблицаЗначений;
	ПроблемыТекущегоДокумента.Колонки.Добавить("Документ");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ДокументПредставление");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ДатаДокумента");
	ПроблемыТекущегоДокумента.Колонки.Добавить("Период");
	ПроблемыТекущегоДокумента.Колонки.Добавить("Сотрудник");
	ПроблемыТекущегоДокумента.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("КоличествоСтавокНеСоответствуетПозиции", Новый ОписаниеТипов("Булево"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("СвободноеКоличествоСтавок", Новый ОписаниеТипов("Число"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПроблемыСНачислениями", Новый ОписаниеТипов("Булево"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("РасшифровкаНачислений");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПозицияШтатногоРасписания");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ДолжностьПоШтатномуРасписаниюНеСоответствуетПозиции", Новый ОписаниеТипов("Булево"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПозицияШтатногоРасписанияПредставление");
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПроблемыСГрейдом", Новый ОписаниеТипов("Булево"));
	ПроблемыТекущегоДокумента.Колонки.Добавить("ПроблемыСГрейдомПредставление", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000)));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.ИсключитьНачисленияПедагогическихДолжностейИзПроверкиШтатногоРасписания(ДанныеОЗанятыхПозициях);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда 
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
			Возврат Модуль.ПроверкаНаСоответствиеГрейдамПередЗаписьюДокумента(РезультатПроверки, ДанныеОЗанятыхПозициях, ПроблемыТекущегоДокумента, ПроверяемыйРегистратор);
		КонецЕсли;
	КонецЕсли;
	
	ПроблемыДругихДокументов = ПроблемыТекущегоДокумента.СкопироватьКолонки("Документ,ДокументПредставление,ДатаДокумента,Период,Сотрудник,КоличествоСтавок,ПозицияШтатногоРасписания,ПозицияШтатногоРасписанияПредставление");

	МассивПозицийШтатногоРасписания = Новый Массив;
	ДвиженияПроверяемогоДокумента = Новый ТаблицаЗначений();
	ДвиженияПроверяемогоДокумента.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ДвиженияПроверяемогоДокумента.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДвиженияПроверяемогоДокумента.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	ДвиженияПроверяемогоДокумента.Колонки.Добавить("ПозицияШтатногоРасписания", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	
	ДвиженияНачисленийПроверяемогоДокумента = Новый ТаблицаЗначений;
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("ПозицияШтатногоРасписания", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ДвиженияНачисленийПроверяемогоДокумента.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	Для Каждого ЭлементДанных Из ДанныеОЗанятыхПозициях Цикл
		Если Не ЗначениеЗаполнено(ЭлементДанных.ПозицияШтатногоРасписания) Тогда
			НоваяСтрокаПроблемыТекущегоДокумента = ПроблемыТекущегоДокумента.Добавить();
			НоваяСтрокаПроблемыТекущегоДокумента.Период = ЭлементДанных.Период;
			НоваяСтрокаПроблемыТекущегоДокумента.Сотрудник = ЭлементДанных.Сотрудник;
			Продолжить;
		ИначеЕсли МассивПозицийШтатногоРасписания.Найти(ЭлементДанных.ПозицияШтатногоРасписания) = Неопределено Тогда
			МассивПозицийШтатногоРасписания.Добавить(ЭлементДанных.ПозицияШтатногоРасписания);
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ДвиженияПроверяемогоДокумента.Добавить(),ЭлементДанных);
		Если ЭлементДанных.ДанныеОНачислениях = Неопределено Или ЭлементДанных.ДанныеОНачислениях.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ДвиженияНачисленийПроверяемогоДокумента.Добавить(),ЭлементДанных);
		Иначе
			Для каждого ДанноеНачисления Из ЭлементДанных.ДанныеОНачислениях Цикл
				СтрокаДвиженияНачисленийПроверяемогоДокумента = ДвиженияНачисленийПроверяемогоДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвиженияНачисленийПроверяемогоДокумента, ЭлементДанных);
				ЗаполнитьЗначенияСвойств(СтрокаДвиженияНачисленийПроверяемогоДокумента, ДанноеНачисления);
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвиженияПроверяемогоДокумента.Период КАК Период,
	|	ДвиженияПроверяемогоДокумента.Сотрудник КАК Сотрудник,
	|	ДвиженияПроверяемогоДокумента.КоличествоСтавок КАК КоличествоСтавок,
	|	ДвиженияПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
	|ПОМЕСТИТЬ ВТДвиженияПроверяемогоДокументаПредварительно
	|ИЗ
	|	&ДвиженияПроверяемогоДокумента КАК ДвиженияПроверяемогоДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник,
	|	ПозицияШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияПроверяемогоДокументаПредварительно.Период КАК Период,
	|	ДвиженияПроверяемогоДокументаПредварительно.Сотрудник КАК Сотрудник,
	|	ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	СУММА(ВЫБОР
	|			КОГДА ЗанятыеПозицииШтатногоРасписания.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗанятыеПозицииШтатногоРасписания.КоличествоСтавок
	|			ИНАЧЕ -ЗанятыеПозицииШтатногоРасписания.КоличествоСтавок
	|		КОНЕЦ) КАК КоличествоСтавок
	|ПОМЕСТИТЬ ВТРанееЗанятыеСтавки
	|ИЗ
	|	ВТДвиженияПроверяемогоДокументаПредварительно КАК ДвиженияПроверяемогоДокументаПредварительно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозицииШтатногоРасписания
	|		ПО ДвиженияПроверяемогоДокументаПредварительно.Сотрудник = ЗанятыеПозицииШтатногоРасписания.Сотрудник
	|			И ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания = ЗанятыеПозицииШтатногоРасписания.ПозицияШтатногоРасписания
	|			И ДвиженияПроверяемогоДокументаПредварительно.Период > ЗанятыеПозицииШтатногоРасписания.Период
	|			И (НЕ ЗанятыеПозицииШтатногоРасписания.Регистратор В (&ИсключаемыеПриПроверке))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияПроверяемогоДокументаПредварительно.Сотрудник,
	|	ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания,
	|	ДвиженияПроверяемогоДокументаПредварительно.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник,
	|	ПозицияШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияПроверяемогоДокументаПредварительно.Период КАК Период,
	|	ДвиженияПроверяемогоДокументаПредварительно.Сотрудник КАК Сотрудник,
	|	ДвиженияПроверяемогоДокументаПредварительно.КоличествоСтавок - ЕСТЬNULL(РанееЗанятыеСтавки.КоличествоСтавок, 0) КАК КоличествоСтавок,
	|	ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
	|ПОМЕСТИТЬ ВТДвиженияПроверяемогоДокумента
	|ИЗ
	|	ВТДвиженияПроверяемогоДокументаПредварительно КАК ДвиженияПроверяемогоДокументаПредварительно
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРанееЗанятыеСтавки КАК РанееЗанятыеСтавки
	|		ПО ДвиженияПроверяемогоДокументаПредварительно.Сотрудник = РанееЗанятыеСтавки.Сотрудник
	|			И ДвиженияПроверяемогоДокументаПредварительно.ПозицияШтатногоРасписания = РанееЗанятыеСтавки.ПозицияШтатногоРасписания
	|			И ДвиженияПроверяемогоДокументаПредварительно.Период = РанееЗанятыеСтавки.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник,
	|	ПозицияШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияПроверяемогоДокумента.Период КАК Период,
	|	ДвиженияПроверяемогоДокумента.Сотрудник КАК Сотрудник,
	|	ДвиженияПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
	|ПОМЕСТИТЬ ВТПериодыПроверяемогоДокумента
	|ИЗ
	|	ВТДвиженияПроверяемогоДокумента КАК ДвиженияПроверяемогоДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник,
	|	ПозицияШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МИНИМУМ(ПериодыПроверяемогоДокумента.Период) КАК Период,
	|	ПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
	|ПОМЕСТИТЬ ВТРанниеПериодыПроверяемогоДокумента
	|ИЗ
	|	ВТПериодыПроверяемогоДокумента КАК ПериодыПроверяемогоДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ПозицияШтатногоРасписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПроверяемыйРегистратор КАК Документ,
	|	&ДатаПроверяемогоРегистратора КАК ДатаДокумента,
	|	КОНЕЦПЕРИОДА(ДвиженияПроверяемогоДокумента.Период, ДЕНЬ) КАК Период,
	|	ДвиженияПроверяемогоДокумента.Сотрудник КАК Сотрудник,
	|	ДвиженияПроверяемогоДокумента.КоличествоСтавок КАК КоличествоСтавок,
	|	ДвиженияПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
	|	ПРЕДСТАВЛЕНИЕ(&ПроверяемыйРегистратор) КАК ДокументПредставление,
	|	ИСТИНА КАК ЭтоПроверяемыйДокумент
	|ПОМЕСТИТЬ ВТЗанятыеПозицииШтатногоРасписания
	|ИЗ
	|	ВТДвиженияПроверяемогоДокумента КАК ДвиженияПроверяемогоДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗанятыеПозиции.Регистратор,
	|	ЗанятыеПозиции.Регистратор.Дата,
	|	ВЫБОР
	|		КОГДА ЗанятыеПозиции.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА КОНЕЦПЕРИОДА(ЗанятыеПозиции.Период, ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ЗанятыеПозиции.Период, ДЕНЬ)
	|	КОНЕЦ,
	|	ЗанятыеПозиции.Сотрудник,
	|	ВЫБОР
	|		КОГДА ЗанятыеПозиции.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ЗанятыеПозиции.КоличествоСтавок
	|		ИНАЧЕ -ЗанятыеПозиции.КоличествоСтавок
	|	КОНЕЦ,
	|	ЗанятыеПозиции.ПозицияШтатногоРасписания,
	|	ПРЕДСТАВЛЕНИЕ(ЗанятыеПозиции.Регистратор),
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.ЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозиции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРанниеПериодыПроверяемогоДокумента КАК РанниеПериодыПроверяемогоДокумента
	|		ПО ЗанятыеПозиции.ПозицияШтатногоРасписания = РанниеПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания
	|			И (ЗанятыеПозиции.Период >= НАЧАЛОПЕРИОДА(РанниеПериодыПроверяемогоДокумента.Период, ДЕНЬ))
	|ГДЕ
	|	НЕ ЗанятыеПозиции.Регистратор В (&ИсключаемыеПриПроверке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПроверяемыйРегистратор,
	|	&ДатаПроверяемогоРегистратора,
	|	НАЧАЛОПЕРИОДА(РанниеПериодыПроверяемогоДокумента.Период, ДЕНЬ),
	|	NULL,
	|	СУММА(ВЫБОР
	|			КОГДА ЗанятыеПозиции.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗанятыеПозиции.КоличествоСтавок
	|			ИНАЧЕ -ЗанятыеПозиции.КоличествоСтавок
	|		КОНЕЦ),
	|	ЗанятыеПозиции.ПозицияШтатногоРасписания,
	|	ПРЕДСТАВЛЕНИЕ(&ПроверяемыйРегистратор),
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.ЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозиции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРанниеПериодыПроверяемогоДокумента КАК РанниеПериодыПроверяемогоДокумента
	|		ПО ЗанятыеПозиции.ПозицияШтатногоРасписания = РанниеПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания
	|			И (ЗанятыеПозиции.Период < НАЧАЛОПЕРИОДА(РанниеПериодыПроверяемогоДокумента.Период, ДЕНЬ))
	|ГДЕ
	|	НЕ ЗанятыеПозиции.Регистратор В (&ИсключаемыеПриПроверке)
	|
	|СГРУППИРОВАТЬ ПО
	|	РанниеПериодыПроверяемогоДокумента.Период,
	|	ЗанятыеПозиции.ПозицияШтатногоРасписания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник,
	|	ПозицияШтатногоРасписания";
		
	Запрос.УстановитьПараметр("ДвиженияПроверяемогоДокумента", ДвиженияПроверяемогоДокумента);
	Запрос.УстановитьПараметр("ПроверяемыйРегистратор", ПроверяемыйРегистратор);
	
	ИсключаемыеПриПроверке = Новый Массив;
	ИсключаемыеПриПроверке.Добавить(ПроверяемыйРегистратор);
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		ИсключаемыеПриПроверке.Добавить(ИсправленныйДокумент);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИсключаемыеПриПроверке", ИсключаемыеПриПроверке);
	
	Запрос.УстановитьПараметр("ДатаПроверяемогоРегистратора", ПроверяемыйРегистратор.Дата);
	Запрос.Выполнить();
	
	ФОИспользоватьИсториюИзмененияШтатногоРасписания = ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания");
	
	ОписательВременныхТаблиц = УправлениеШтатнымРасписанием.ОписательВременныхТаблицДляСоздатьВТПозицииШтатногоРасписания(
		Запрос.МенеджерВременныхТаблиц, "ВТЗанятыеПозицииШтатногоРасписания", "ПозицияШтатногоРасписания,Период");
	УправлениеШтатнымРасписанием.СоздатьВТПозицииШтатногоРасписанияПоВременнойТаблице(Истина, ОписательВременныхТаблиц, "ВТКоличествоСтавокПозиций");	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗанятыеПозицииШтатногоРасписания.ДатаДокумента КАК ДатаДокумента,
		|	ЗанятыеПозицииШтатногоРасписания.Документ КАК Документ,
		|	ПРЕДСТАВЛЕНИЕ(ЗанятыеПозицииШтатногоРасписания.Документ) КАК ДокументПредставление,
		|	НАЧАЛОПЕРИОДА(ЗанятыеПозицииШтатногоРасписания.Период, ДЕНЬ) КАК Период,
		|	ЗанятыеПозицииШтатногоРасписания.Сотрудник КАК Сотрудник,
		|	ЗанятыеПозицииШтатногоРасписания.КоличествоСтавок КАК КоличествоСтавок,
		|	ЗанятыеПозицииШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
		|	ПРЕДСТАВЛЕНИЕ(ЗанятыеПозицииШтатногоРасписания.ПозицияШтатногоРасписания) КАК ПозицияШтатногоРасписанияПредставление,
		|	ЗанятыеПозицииШтатногоРасписания.ЭтоПроверяемыйДокумент КАК ЭтоПроверяемыйДокумент,
		|	ЕСТЬNULL(КоличествоСтавокПозиций.КоличествоСтавок, 0) КАК СвободноеКоличествоСтавок
		|ИЗ
		|	ВТЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозицииШтатногоРасписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоСтавокПозиций КАК КоличествоСтавокПозиций
		|		ПО ЗанятыеПозицииШтатногоРасписания.ПозицияШтатногоРасписания = КоличествоСтавокПозиций.ПозицияШтатногоРасписания
		|			И (НАЧАЛОПЕРИОДА(ЗанятыеПозицииШтатногоРасписания.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(КоличествоСтавокПозиций.Период, ДЕНЬ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПозицияШтатногоРасписания,
		|	Период,
		|	ВЫБОР
		|		КОГДА ЗанятыеПозицииШтатногоРасписания.Сотрудник ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ,
		|	КоличествоСтавок,
		|	Сотрудник";
	
	РезультатЗапросаПоПозициям = Запрос.Выполнить();
	
	Если Не РезультатЗапросаПоПозициям.Пустой() Тогда
		
		Выборка = РезультатЗапросаПоПозициям.Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("ПозицияШтатногоРасписания") Цикл
			
			КоличествоСтавок = 0;
			
			Пока Выборка.Следующий() Цикл
				
				РанееЗанятоеКоличествоСтавок = КоличествоСтавок;
				СвободноеКоличествоСтавок = Выборка.СвободноеКоличествоСтавок - РанееЗанятоеКоличествоСтавок;
				Если Выборка.КоличествоСтавок > СвободноеКоличествоСтавок Тогда
					
					Если Выборка.ЭтоПроверяемыйДокумент = Истина И ЗначениеЗаполнено(Выборка.Сотрудник) Тогда 
						НоваяСтрока = ПроблемыТекущегоДокумента.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						НоваяСтрока.СвободноеКоличествоСтавок = СвободноеКоличествоСтавок;
						НоваяСтрока.КоличествоСтавокНеСоответствуетПозиции = Истина;
						НоваяСтрока.ДолжностьПоШтатномуРасписаниюНеСоответствуетПозиции = Истина;
						НоваяСтрока.РасшифровкаНачислений = Новый Массив;
					ИначеЕсли Выборка.ЭтоПроверяемыйДокумент = ЛОЖЬ Тогда
						НоваяСтрока = ПроблемыДругихДокументов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					КонецЕсли;
					
				КонецЕсли;
				
				КоличествоСтавок = КоличествоСтавок + Выборка.КоличествоСтавок;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная", , Ложь) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		ОписательВременныхТаблиц = УправлениеШтатнымРасписанием.ОписательВременныхТаблицДляПолученияДанныхПозицийШтатногоРасписания(
			Запрос.МенеджерВременныхТаблиц,
			"ВТКоличествоСтавокПозиций");
		УправлениеШтатнымРасписанием.СоздатьВТНачисленияПозицийШтатногоРасписания(Истина, ОписательВременныхТаблиц, "ВТНачисленияШтатногоРасписанияПредварительно", Истина);
		
		Запрос.УстановитьПараметр("ДвиженияНачисленийПроверяемогоДокумента", ДвиженияНачисленийПроверяемогоДокумента);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДвиженияНачисленийПроверяемогоДокумента.Период КАК Период,
			|	ДвиженияНачисленийПроверяемогоДокумента.Сотрудник КАК Сотрудник,
			|	ДвиженияНачисленийПроверяемогоДокумента.КоличествоСтавок КАК КоличествоСтавок,
			|	ДвиженияНачисленийПроверяемогоДокумента.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	ДвиженияНачисленийПроверяемогоДокумента.Начисление КАК Начисление,
			|	ДвиженияНачисленийПроверяемогоДокумента.Показатель КАК Показатель,
			|	ВЫБОР
			|		КОГДА ДвиженияНачисленийПроверяемогоДокумента.Значение = НЕОПРЕДЕЛЕНО
			|			ТОГДА 0
			|		ИНАЧЕ ДвиженияНачисленийПроверяемогоДокумента.Значение
			|	КОНЕЦ КАК Значение
			|ПОМЕСТИТЬ ВТДвиженияНачисленийПроверяемогоДокумента
			|ИЗ
			|	&ДвиженияНачисленийПроверяемогоДокумента КАК ДвиженияНачисленийПроверяемогоДокумента
			|ГДЕ
			|	ДвиженияНачисленийПроверяемогоДокумента.КоличествоСтавок > 0
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	ПозицияШтатногоРасписания,
			|	Начисление,
			|	Показатель
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(НачисленияШтатногоРасписания.Период, ДЕНЬ) КАК Период,
			|	ПериодыПроверяемогоДокумента.Сотрудник КАК Сотрудник,
			|	НачисленияШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	НачисленияШтатногоРасписания.Начисление КАК Начисление,
			|	НачисленияШтатногоРасписания.Показатель,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(НачисленияШтатногоРасписания.Начисление.Рассчитывается, ИСТИНА)
			|			ТОГДА НачисленияШтатногоРасписания.Значение
			|		ИНАЧЕ НачисленияШтатногоРасписания.Размер
			|	КОНЕЦ КАК Значение,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(НачисленияШтатногоРасписания.Начисление.Рассчитывается, ИСТИНА)
			|			ТОГДА НачисленияШтатногоРасписания.ЗначениеМин
			|		ИНАЧЕ НачисленияШтатногоРасписания.РазмерМин
			|	КОНЕЦ КАК ЗначениеМин,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(НачисленияШтатногоРасписания.Начисление.Рассчитывается, ИСТИНА)
			|			ТОГДА НачисленияШтатногоРасписания.ЗначениеМакс
			|		ИНАЧЕ НачисленияШтатногоРасписания.РазмерМакс
			|	КОНЕЦ КАК ЗначениеМакс
			|ПОМЕСТИТЬ ВТНачисленияШтатногоРасписания
			|ИЗ
			|	ВТПериодыПроверяемогоДокумента КАК ПериодыПроверяемогоДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияШтатногоРасписанияПредварительно КАК НачисленияШтатногоРасписания
			|		ПО (ПериодыПроверяемогоДокумента.Период >= НАЧАЛОПЕРИОДА(НачисленияШтатногоРасписания.Период, ДЕНЬ))
			|			И ПериодыПроверяемогоДокумента.ПозицияШтатногоРасписания = НачисленияШтатногоРасписания.ПозицияШтатногоРасписания
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Сотрудник,
			|	ПозицияШтатногоРасписания,
			|	Начисление,
			|	НачисленияШтатногоРасписания.Показатель";
			
		Запрос.Выполнить();
			
		Запрос.УстановитьПараметр("ИспользоватьВилкуСтавокВШтатномРасписании", ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании"));
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ДвиженияНачисленийПроверяемогоДокумента.Период ЕСТЬ NULL 
			|			ТОГДА НачисленияШтатногоРасписания.Период
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДвиженияНачисленийПроверяемогоДокумента.Период, ДЕНЬ)
			|	КОНЕЦ КАК Период,
			|	ВЫБОР
			|		КОГДА ДвиженияНачисленийПроверяемогоДокумента.Сотрудник ЕСТЬ NULL 
			|			ТОГДА НачисленияШтатногоРасписания.Сотрудник
			|		ИНАЧЕ ДвиженияНачисленийПроверяемогоДокумента.Сотрудник
			|	КОНЕЦ КАК Сотрудник,
			|	ВЫБОР
			|		КОГДА ДвиженияНачисленийПроверяемогоДокумента.ПозицияШтатногоРасписания ЕСТЬ NULL 
			|			ТОГДА НачисленияШтатногоРасписания.ПозицияШтатногоРасписания
			|		ИНАЧЕ ДвиженияНачисленийПроверяемогоДокумента.ПозицияШтатногоРасписания
			|	КОНЕЦ КАК ПозицияШтатногоРасписания,
			|	ЕСТЬNULL(ДвиженияНачисленийПроверяемогоДокумента.Начисление, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) КАК НачислениеСотрудника,
			|	ЕСТЬNULL(ДвиженияНачисленийПроверяемогоДокумента.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК ПоказательСотрудника,
			|	ВЫБОР
			|		КОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ДвиженияНачисленийПроверяемогоДокумента.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Справочник.ПоказателиРасчетаЗарплаты).ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
			|			ТОГДА ДвиженияНачисленийПроверяемогоДокумента.КоличествоСтавок
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК КоэффициентПересчета,
			|	ЕСТЬNULL(НачисленияШтатногоРасписания.Начисление, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) КАК НачислениеПозиции,
			|	ЕСТЬNULL(НачисленияШтатногоРасписания.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК ПоказательПозиции,
			|	ЕСТЬNULL(ДвиженияНачисленийПроверяемогоДокумента.Значение, 0) КАК Значение,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА &ИспользоватьВилкуСтавокВШтатномРасписании
			|				ТОГДА НачисленияШтатногоРасписания.ЗначениеМин
			|			ИНАЧЕ НачисленияШтатногоРасписания.Значение
			|		КОНЕЦ, 0) КАК ЗначениеМин,
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА &ИспользоватьВилкуСтавокВШтатномРасписании
			|				ТОГДА НачисленияШтатногоРасписания.ЗначениеМакс
			|			ИНАЧЕ НачисленияШтатногоРасписания.Значение
			|		КОНЕЦ, 0) КАК ЗначениеМакс
			|ПОМЕСТИТЬ ВТСводНачислений
			|ИЗ
			|	ВТДвиженияНачисленийПроверяемогоДокумента КАК ДвиженияНачисленийПроверяемогоДокумента
			|		ПОЛНОЕ СОЕДИНЕНИЕ ВТНачисленияШтатногоРасписания КАК НачисленияШтатногоРасписания
			|		ПО (НАЧАЛОПЕРИОДА(ДвиженияНачисленийПроверяемогоДокумента.Период, ДЕНЬ) = НачисленияШтатногоРасписания.Период)
			|			И ДвиженияНачисленийПроверяемогоДокумента.Сотрудник = НачисленияШтатногоРасписания.Сотрудник
			|			И ДвиженияНачисленийПроверяемогоДокумента.ПозицияШтатногоРасписания = НачисленияШтатногоРасписания.ПозицияШтатногоРасписания
			|			И ДвиженияНачисленийПроверяемогоДокумента.Начисление = НачисленияШтатногоРасписания.Начисление
			|			И ДвиженияНачисленийПроверяемогоДокумента.Показатель = НачисленияШтатногоРасписания.Показатель
			|ГДЕ
			|	ДвиженияНачисленийПроверяемогоДокумента.КоличествоСтавок > 0";
		Запрос.Выполнить();
			
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СводНачислений.Период,
			|	СводНачислений.Сотрудник,
			|	&ДатаПроверяемогоРегистратора КАК ДатаДокумента,
			|	&ПроверяемыйРегистратор КАК Документ,
			|	ПРЕДСТАВЛЕНИЕ(&ПроверяемыйРегистратор) КАК ДокументПредставление,
			|	СводНачислений.ПозицияШтатногоРасписания,
			|	ПРЕДСТАВЛЕНИЕ(СводНачислений.ПозицияШтатногоРасписания) КАК ПозицияШтатногоРасписанияПредставление,
			|	СводНачислений.НачислениеСотрудника КАК Начисление,
			|	СводНачислений.ПоказательСотрудника КАК Показатель,
			|	СводНачислений.НачислениеПозиции,
			|	СводНачислений.ПоказательПозиции,
			|	СводНачислений.Значение,
			|	СводНачислений.ЗначениеМин,
			|	СводНачислений.ЗначениеМакс,
			|	ВЫБОР
			|		КОГДА СводНачислений.НачислениеСотрудника = СводНачислений.НачислениеПозиции
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК НачислениеНеСоответствуетПозиции,
			|	ВЫБОР
			|		КОГДА СводНачислений.ПоказательСотрудника = СводНачислений.ПоказательПозиции
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ПоказательНеСоответствуетПозиции,
			|	ВЫБОР
			|		КОГДА СводНачислений.Значение >= СводНачислений.ЗначениеМин
			|				И СводНачислений.Значение <= СводНачислений.ЗначениеМакс
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЗначениеНеСоответствуетПозиции
			|ИЗ
			|	ВТСводНачислений КАК СводНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			НачисленияПоказатели.Ссылка КАК Ссылка,
			|			МАКСИМУМ(НачисленияПоказатели.Показатель) КАК Показатель
			|		ИЗ
			|			ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
			|		ГДЕ
			|			НачисленияПоказатели.Показатель = &ДоляНеполногоРабочегоВремени
			|			И &ДоляНеполногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
			|		
			|		СГРУППИРОВАТЬ ПО
			|			НачисленияПоказатели.Ссылка) КАК НачисленияПоказатели
			|		ПО СводНачислений.НачислениеСотрудника = НачисленияПоказатели.Ссылка
			|ГДЕ
			|	(СводНачислений.НачислениеСотрудника <> СводНачислений.НачислениеПозиции
			|			ИЛИ СводНачислений.ПоказательСотрудника <> СводНачислений.ПоказательПозиции
			|			ИЛИ СводНачислений.Значение < (ВЫРАЗИТЬ(СводНачислений.ЗначениеМин * ВЫБОР
			|					КОГДА ВЫРАЗИТЬ(СводНачислений.ПоказательСотрудника КАК Справочник.ПоказателиРасчетаЗарплаты).ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
			|							И ВЫРАЗИТЬ(СводНачислений.НачислениеСотрудника КАК ПланВидовРасчета.Начисления).УчетВремениВЧасах = ЛОЖЬ
			|							И НачисленияПоказатели.Показатель ЕСТЬ NULL 
			|						ТОГДА СводНачислений.КоэффициентПересчета
			|					ИНАЧЕ 1
			|				КОНЕЦ КАК ЧИСЛО(15, 3)))
			|			ИЛИ СводНачислений.Значение > (ВЫРАЗИТЬ(СводНачислений.ЗначениеМакс * ВЫБОР
			|					КОГДА ВЫРАЗИТЬ(СводНачислений.ПоказательСотрудника КАК Справочник.ПоказателиРасчетаЗарплаты).ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
			|							И ВЫРАЗИТЬ(СводНачислений.НачислениеСотрудника КАК ПланВидовРасчета.Начисления).УчетВремениВЧасах = ЛОЖЬ
			|							И НачисленияПоказатели.Показатель ЕСТЬ NULL 
			|						ТОГДА СводНачислений.КоэффициентПересчета
			|					ИНАЧЕ 1
			|				КОНЕЦ КАК ЧИСЛО(15, 3))))";
		
		Запрос.УстановитьПараметр("ДоляНеполногоРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени"));
		РезультатЗапросаПоНачислениям = Запрос.Выполнить();
		
		Если Не РезультатЗапросаПоНачислениям.Пустой() Тогда
			ТаблицаПроблемныхНачислений = РезультатЗапросаПоНачислениям.Выгрузить();
			ТаблицаПроблемныхНачисленийПоСотрудникам = ТаблицаПроблемныхНачислений.Скопировать(, "Период,Сотрудник,ПозицияШтатногоРасписания");
			ТаблицаПроблемныхНачисленийПоСотрудникам.Свернуть("Период,Сотрудник,ПозицияШтатногоРасписания");
			Для каждого СтрокаТаблицы Из ТаблицаПроблемныхНачисленийПоСотрудникам Цикл
				СтруктураПоиска = Новый Структура("Период,Сотрудник,ПозицияШтатногоРасписания");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
				СтрокиПроблемыТекущегоДокумента = ПроблемыТекущегоДокумента.НайтиСтроки(СтруктураПоиска);
				НеобходимоЗаполнитьСтрокуОписанияПроблемы = Ложь;
				Если СтрокиПроблемыТекущегоДокумента.Количество() = 0 Тогда
					СтрокаПроблемыТекущегоДокумента = ПроблемыТекущегоДокумента.Добавить();
					НеобходимоЗаполнитьСтрокуОписанияПроблемы = Истина;
				Иначе
					СтрокаПроблемыТекущегоДокумента = СтрокиПроблемыТекущегоДокумента[0];
				КонецЕсли;
				РасшифровкаНачислений = ТаблицаПроблемныхНачислений.СкопироватьКолонки("Начисление,Показатель,НачислениеПозиции,ПоказательПозиции,Значение,ЗначениеМин,ЗначениеМакс,НачислениеНеСоответствуетПозиции,ПоказательНеСоответствуетПозиции,ЗначениеНеСоответствуетПозиции");
				СтрокиНачислений = ТаблицаПроблемныхНачислений.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
					Если НеобходимоЗаполнитьСтрокуОписанияПроблемы Тогда
						ЗаполнитьЗначенияСвойств(СтрокаПроблемыТекущегоДокумента, СтрокаНачислений);
						НеобходимоЗаполнитьСтрокуОписанияПроблемы = Ложь;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(РасшифровкаНачислений.Добавить(), СтрокаНачислений);
				КонецЦикла;
				СтрокаПроблемыТекущегоДокумента.ПроблемыСНачислениями = Истина;
				СтрокаПроблемыТекущегоДокумента.ДолжностьПоШтатномуРасписаниюНеСоответствуетПозиции = Истина;
				СтрокаПроблемыТекущегоДокумента.РасшифровкаНачислений = ОбщегоНазначения.ТаблицаЗначенийВМассив(РасшифровкаНачислений);
			КонецЦикла;
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
			Модуль.ПроверитьНачисленияНаСоответствиеГрейдам(ДанныеОЗанятыхПозициях, ПроблемыТекущегоДокумента, ПроверяемыйРегистратор);
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ПроблемыТекущегоДокумента.Количество() + ПроблемыДругихДокументов.Количество() = 0 Тогда
		Возврат Истина;
	Иначе
		
		Если ПроблемыТекущегоДокумента.Количество() > 0 Тогда
			ДанныеПроверки.Вставить("ПроблемыТекущегоДокумента", ОбщегоНазначения.ТаблицаЗначенийВМассив(ПроблемыТекущегоДокумента));
		КонецЕсли;	
		
		Если ПроблемыДругихДокументов.Количество() > 0 Тогда
			ДанныеПроверки.Вставить("ПроблемыДругихДокументов", ОбщегоНазначения.ТаблицаЗначенийВМассив(ПроблемыДругихДокументов));
		КонецЕсли;	
		
		РезультатПроверки = ПоместитьВоВременноеХранилище(ДанныеПроверки, Новый УникальныйИдентификатор);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

// Дополняет переданную коллекцию колонками.
//		Организация
//		ГоловнаяОрганизация
//		ТекущаяОрганизация
//		ТекущаяПозиция
//		ТекущееПодразделение
//		ТекущаяДолжность
//  	ТекущееКоличествоСтавок
// Колонки Текущая... заполняются только для записей перемещения и увольнения.
// Колонки Организация, ГоловнаяОрганизация - для всех.
Процедура ДополнитьТекущимиКадровымиДанными(КадровыеДвижения, ПозицияЕсть, Регистратор, ВремяРегистрацииДокумента = Неопределено)
	
	КадровыеДвижения.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КадровыеДвижения.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КадровыеДвижения.Колонки.Добавить("ТекущаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КадровыеДвижения.Колонки.Добавить("ТекущаяПозиция", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	КадровыеДвижения.Колонки.Добавить("ТекущееПодразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КадровыеДвижения.Колонки.Добавить("ТекущаяДолжность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	КадровыеДвижения.Колонки.Добавить("ТекущееКоличествоСтавок", Новый ОписаниеТипов("Число"));
	КадровыеДвижения.Колонки.Добавить("ТекущийВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
	КадровыеДвижения.Колонки.Добавить("ТекущийВидДоговора", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровССотрудниками"));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Если есть Позиция, то можно определить Организацию.
	Если ПозицияЕсть Тогда
		Позиции = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДвижения, "Позиция", Истина);
		ОрганизацииПозиций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Позиции, "Владелец");
		Для Каждого Строка Из КадровыеДвижения Цикл
			Строка.Организация = ОрганизацииПозиций[Строка.Позиция];
			Строка.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Строка.Организация);
		КонецЦикла;
	// Если есть Подразделение, то можно определить Организацию.
	КонецЕсли;

	Если (КадровыеДвижения.Колонки.Найти("Подразделение") <> НеОпределено) Тогда
		Подразделения = ОбщегоНазначения.ВыгрузитьКолонку(КадровыеДвижения, "Подразделение", Истина);
		ОрганизацииПодразделений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Подразделения, "Владелец");
		Для Каждого Строка Из КадровыеДвижения Цикл
			Если Не ЗначениеЗаполнено(Строка.Организация) Тогда
				Строка.Организация = ОрганизацииПодразделений[Строка.Подразделение];
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(Строка.ГоловнаяОрганизация) Тогда
				Строка.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Строка.Организация);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		МассивДат = КадровыеДвижения.ВыгрузитьКолонку("ДатаСобытия");
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, МассивДат);
	КонецЕсли;
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДвижений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаДвижений Из КадровыеДвижения Цикл 
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
		НоваяСтрока.ДатаСобытия = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДвижений.Сотрудник,
		|	ТаблицаДвижений.ДатаСобытия КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериод
		|ИЗ
		|	&ТаблицаДвижений КАК ТаблицаДвижений";
		
	Запрос.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);
	Запрос.Выполнить();
		
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение","Регистратор", "<>", Регистратор));
	
	Отборы = Новый Структура;
	Отборы.Вставить("КадроваяИсторияСотрудников", Отбор);
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериод");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ГоловнаяОрганизация,Организация,Подразделение,Должность,ДолжностьПоШтатномуРасписанию,КоличествоСтавок,ВидЗанятости,ВидДоговора", Отборы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник,
	|	НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.Период, ДЕНЬ) КАК ДатаСобытия,
	|	КадровыеДанныеСотрудников.Организация КАК ТекущаяОрганизация,
	|	КадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ТекущаяГоловнаяОрганизация,
	|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК ТекущаяПозиция,
	|	КадровыеДанныеСотрудников.Подразделение КАК ТекущееПодразделение,
	|	КадровыеДанныеСотрудников.Должность КАК ТекущаяДолжность,
	|	КадровыеДанныеСотрудников.КоличествоСтавок КАК ТекущееКоличествоСтавок,
	|	КадровыеДанныеСотрудников.ВидЗанятости КАК ТекущийВидЗанятости,
	|	КадровыеДанныеСотрудников.ВидДоговора КАК ТекущийВидДоговора
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Сотрудник, ДатаСобытия");
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		НайденныеСтроки = КадровыеДвижения.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка, 
			"ТекущаяОрганизация,ТекущаяПозиция,ТекущееПодразделение,ТекущаяДолжность,ТекущееКоличествоСтавок,ТекущийВидЗанятости,ТекущийВидДоговора");
			Если Не ЗначениеЗаполнено(НайденнаяСтрока.Организация) Тогда
				НайденнаяСтрока.Организация = Выборка.ТекущаяОрганизация;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НайденнаяСтрока.ГоловнаяОрганизация) Тогда
				НайденнаяСтрока.ГоловнаяОрганизация = Выборка.ТекущаяГоловнаяОрганизация;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Дополняет переданную коллекцию колонками
//		ГоловнаяОрганизация
//		ТекущийГрафик.
// Колонки ТекущийГрафик заполняются только для записей перемещения и увольнения.
// Колонка ГоловнаяОрганизация - для всех.
Процедура ДополнитьТекущимиДаннымиГрафиков(ДвиженияГрафиков, Регистратор, ВремяРегистрацииДокумента = Неопределено)
	
	ГоловнаяОрганизацияЕсть = (ДвиженияГрафиков.Колонки.Найти("ГоловнаяОрганизация") <> НеОпределено);
	Если Не ГоловнаяОрганизацияЕсть Тогда
		ДвиженияГрафиков.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	ДвиженияГрафиков.Колонки.Добавить("ТекущийГрафик", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	
	// Для всех записей расставляем головную организацию.
	Сотрудники = Новый Соответствие;
	Для Каждого Строка Из ДвиженияГрафиков Цикл
		Сотрудники[Строка.Сотрудник] = 0;
	КонецЦикла;
	СотрудникиМассив = Новый Массив;
	Для Каждого КлючЗначение Из Сотрудники Цикл
		СотрудникиМассив.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ОрганизацииСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СотрудникиМассив, "ГоловнаяОрганизация");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		МассивДат = ДвиженияГрафиков.ВыгрузитьКолонку("ДатаСобытия");
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, МассивДат);
	КонецЕсли;
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Строка Из ДвиженияГрафиков Цикл
		Строка.ГоловнаяОрганизация = ОрганизацииСотрудников[Строка.Сотрудник];
		// Список событий перемещения и увольнения для получения текущих графиков.
		Если Строка.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение 
			Или Строка.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			НоваяСтрока = СотрудникиДаты.Добавить();
			НоваяСтрока.Период = ВремяРегистрацииДокумента.Получить(Строка.ДатаСобытия);
			НоваяСтрока.Сотрудник = Строка.Сотрудник;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ГрафикРаботыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГрафикРаботыСотрудников.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ГрафикРаботыСотрудников.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(ГрафикРаботыСотрудников.Период, ДЕНЬ) КАК Период,
	|	ГрафикРаботыСотрудников.ГрафикРаботы КАК ТекущийГрафик
	|ИЗ
	|	ВТГрафикРаботыСотрудниковСрезПоследних КАК ГрафикРаботыСотрудников");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Сотрудник, ДатаСобытия");
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска.Сотрудник = Выборка.Сотрудник;
		СтруктураПоиска.ДатаСобытия = Выборка.Период;
		Строка = ДвиженияГрафиков.НайтиСтроки(СтруктураПоиска)[0];
		ЗаполнитьЗначенияСвойств(Строка, Выборка, "ГоловнаяОрганизация,ТекущийГрафик");
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаНачисленийСотрудников(ИзмеренияДаты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КатегорииНачисленийПособий = УчетПособийСоциальногоСтрахованияРасширенный.КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Начисление.КатегорияНачисленияИлиНеоплаченногоВремени", "НЕ В", КатегорииНачисленийПособий);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисленияСрезПоследних.Период КАК Период,
		|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
		|	ПлановыеНачисленияСрезПоследних.Начисление КАК Начисление,
		|	ВЫРАЗИТЬ(ПлановыеНачисленияСрезПоследних.Начисление КАК ПланВидовРасчета.Начисления).Рассчитывается КАК Рассчитывается,
		|	ПлановыеНачисленияСрезПоследних.Размер КАК Размер,
		|	РасчетыПоказатели.Показатель КАК Показатель
		|ПОМЕСТИТЬ ВТНачисленияСПоказателями
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК РасчетыПоказатели
		|		ПО ПлановыеНачисленияСрезПоследних.Начисление = РасчетыПоказатели.Ссылка
		|			И (РасчетыПоказатели.ЗапрашиватьПриВводе)
		|ГДЕ
		|	ПлановыеНачисленияСрезПоследних.Используется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияСПоказателями.Период,
		|	НачисленияСПоказателями.Сотрудник,
		|	НачисленияСПоказателями.Начисление,
		|	НачисленияСПоказателями.Рассчитывается,
		|	НачисленияСПоказателями.Размер,
		|	НачисленияСПоказателями.Показатель,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
		|ИЗ
		|	ВТНачисленияСПоказателями КАК НачисленияСПоказателями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|		ПО НачисленияСПоказателями.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник
		|			И НачисленияСПоказателями.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель
		|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение <> 0)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТаблицаФОТСотрудников(ИзмеренияДаты)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлановыеНачисленияСрезПоследних.Период КАК Период,
	|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ПлановыйФОТСрезПоследних.ВкладВФОТ ЕСТЬ NULL 
	|				ТОГДА ПлановыеНачисленияСрезПоследних.Размер
	|			ИНАЧЕ ПлановыйФОТСрезПоследних.ВкладВФОТ
	|		КОНЕЦ) КАК ФОТ
	|ИЗ
	|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТСрезПоследних
	|		ПО ПлановыеНачисленияСрезПоследних.Сотрудник = ПлановыйФОТСрезПоследних.Сотрудник
	|			И ПлановыеНачисленияСрезПоследних.Начисление = ПлановыйФОТСрезПоследних.Начисление
	|			И ПлановыеНачисленияСрезПоследних.ДокументОснование = ПлановыйФОТСрезПоследних.ДокументОснование
	|ГДЕ
	|	ПлановыеНачисленияСрезПоследних.Используется
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеНачисленияСрезПоследних.Период,
	|	ПлановыеНачисленияСрезПоследних.Сотрудник";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеОТекущихНачисленияхСотрудника(Сотрудник, Период) Экспорт
	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(Новый Структура("Сотрудник,Период", Сотрудник, Период));
	ИзмеренияДаты = ИзмеренияДатыПоМассивуСтруктурСотрудников(МассивСтруктур);
	Возврат ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты);
КонецФункции

Функция ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты, ТаблицаНачисленийСотрудников = Неопределено)
	
	ДанныеОЗанятыхПозициях = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.Период КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ &ТаблицаСотрудников КАК ТаблицаСотрудников
	|";
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ИзмеренияДаты);
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДолжностьПоШтатномуРасписанию,Должность,КоличествоСтавок");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.Период КАК Период,
	|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК ПозицияШтатногоРасписания,
	|	КадровыеДанныеСотрудников.Должность КАК Должность,
	|	КадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
	|ИЗ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|";
	
	ТаблицаКадровыхДанных = Запрос.Выполнить().Выгрузить();
	
	ДоступноЧтениеДанныхДляНачисленияЗарплаты = Пользователи.РолиДоступны(
		"ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная");
		
	Если ДоступноЧтениеДанныхДляНачисленияЗарплаты Тогда
			
		Если ТаблицаНачисленийСотрудников = Неопределено Тогда
			ТаблицаНачисленийСотрудников = ТаблицаНачисленийСотрудников(ИзмеренияДаты);
			ТаблицаФОТСотрудников = ТаблицаФОТСотрудников(ИзмеренияДаты);
		Иначе
			ТаблицаФОТСотрудников = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользуетсяШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	Для каждого СтрокаТаблицаКадровыхДанных Из ТаблицаКадровыхДанных Цикл
		
		СтруктураВозврата = УправлениеШтатнымРасписаниемКлиентСервер.СтруктураДанныхОЗанятыхПозициях(ТекущаяДатаСеанса());
		СтруктураВозврата.Период = СтрокаТаблицаКадровыхДанных.Период;
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, СтрокаТаблицаКадровыхДанных);
		
		Если Не ИспользуетсяШтатноеРасписание Тогда
			СтруктураВозврата.ПозицияШтатногоРасписания = СтрокаТаблицаКадровыхДанных.Должность;
		КонецЕсли;
		
		Если ДоступноЧтениеДанныхДляНачисленияЗарплаты Тогда
			
			ДанныеОНачислениях = Новый Массив;
			СтрокиНачислений = ТаблицаНачисленийСотрудников.НайтиСтроки(Новый Структура("Период,Сотрудник", СтрокаТаблицаКадровыхДанных.Период, СтрокаТаблицаКадровыхДанных.Сотрудник));
			Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
				ЗначениеПоказателя = ?(СтрокаНачислений.Рассчитывается, СтрокаНачислений.Значение, СтрокаНачислений.Размер);
				ДанныеОНачислениях.Добавить(Новый Структура("Начисление,Показатель,Значение", СтрокаНачислений.Начисление, СтрокаНачислений.Показатель, ЗначениеПоказателя));
			КонецЦикла;
			
			Если ТаблицаФОТСотрудников <> Неопределено Тогда
				СтрокиФОТ = ТаблицаФОТСотрудников.НайтиСтроки(Новый Структура("Период, Сотрудник", СтрокаТаблицаКадровыхДанных.Период, СтрокаТаблицаКадровыхДанных.Сотрудник));
				СтруктураВозврата.ФОТ = ?(СтрокиФОТ.Количество() > 0, СтрокиФОТ[0].ФОТ, 0);
			КонецЕсли; 
			
		Иначе
			ДанныеОНачислениях = Неопределено;
		КонецЕсли;
		
		СтруктураВозврата.ДанныеОНачислениях = ДанныеОНачислениях;
		
		ДанныеОЗанятыхПозициях.Добавить(СтруктураВозврата);
		
	КонецЦикла;
	
	Возврат ДанныеОЗанятыхПозициях;
	
КонецФункции

Функция ИзмеренияДатыПоМассивуСтруктурСотрудников(МассивСтруктурСотрудников)
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Для Каждого СтруктураСотрудника Из МассивСтруктурСотрудников Цикл
		НоваяСтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		НоваяСтрокаИзмеренияДаты.Сотрудник = СтруктураСотрудника.Сотрудник;
		НоваяСтрокаИзмеренияДаты.Период = СтруктураСотрудника.Период;
	КонецЦикла;
	Возврат ИзмеренияДаты;
КонецФункции

Функция АдресДанныхОЗанятыхПозицияхСотрудников(МассивСтруктурСотрудников) Экспорт
	
	ИзмеренияДаты = ИзмеренияДатыПоМассивуСтруктурСотрудников(МассивСтруктурСотрудников);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты), Новый УникальныйИдентификатор);
	
КонецФункции

Функция АдресДанныхОЗанятыхПозицияхСотрудниковПриВозвратеНаРаботу(МассивСтруктурСотрудников, ТаблицаНачислений = Неопределено) Экспорт
	
	ИзмеренияДаты = ИзмеренияДатыПоМассивуСтруктурСотрудников(МассивСтруктурСотрудников);
	ДанныеОЗанятыхПозициях = ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты, ТаблицаНачислений);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзмеренияДаты.Период,
		|	ИзмеренияДаты.Сотрудник
		|ПОМЕСТИТЬ ВТИзмеренияДаты
		|ИЗ
		|	&ИзмеренияДаты КАК ИзмеренияДаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(УсловияОплатыОтпускаПоУходуЗаРебенком.Период) КАК Период,
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Сотрудник,
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Регистратор
		|ПОМЕСТИТЬ ВТМаксимальныеДаты
		|ИЗ
		|	ВТИзмеренияДаты КАК ИзмеренияДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияОплатыОтпускаПоУходуЗаРебенком КАК УсловияОплатыОтпускаПоУходуЗаРебенком
		|		ПО ИзмеренияДаты.Период > УсловияОплатыОтпускаПоУходуЗаРебенком.Период
		|			И ИзмеренияДаты.Сотрудник = УсловияОплатыОтпускаПоУходуЗаРебенком.Сотрудник
		|ГДЕ
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Регистратор ССЫЛКА Документ.ОтпускПоУходуЗаРебенком
		|
		|СГРУППИРОВАТЬ ПО
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Сотрудник,
		|	УсловияОплатыОтпускаПоУходуЗаРебенком.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаксимальныеДаты.Период КАК Период,
		|	МаксимальныеДаты.Сотрудник,
		|	ЗанятыеПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
		|	-ЗанятыеПозицииШтатногоРасписания.КоличествоСтавок КАК КоличествоСтавок
		|ИЗ
		|	ВТМаксимальныеДаты КАК МаксимальныеДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозицииШтатногоРасписания
		|		ПО МаксимальныеДаты.Сотрудник = ЗанятыеПозицииШтатногоРасписания.Сотрудник
		|			И МаксимальныеДаты.Регистратор = ЗанятыеПозицииШтатногоРасписания.Регистратор
		|			И (ЗанятыеПозицииШтатногоРасписания.УсловноеДвижение)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураВозврата = УправлениеШтатнымРасписаниемКлиентСервер.СтруктураДанныхОЗанятыхПозициях(Выборка.Период);
		СтруктураВозврата.Сотрудник = Выборка.Сотрудник;
		СтруктураВозврата.ПозицияШтатногоРасписания = Выборка.ПозицияШтатногоРасписания;
		СтруктураВозврата.КоличествоСтавок = Выборка.КоличествоСтавок;
		
	КонецЦикла; 
	 
	Возврат ПоместитьВоВременноеХранилище(ДанныеОЗанятыхПозициях, Новый УникальныйИдентификатор);
	
КонецФункции

Функция АдресДанныхОЗанятыхПозицияхСотрудниковПриПеремещенииВДругоеПодразделение(СоответствиеСотрудников) Экспорт
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Для каждого СоответствиеСотрудника Из СоответствиеСотрудников Цикл
		НоваяСтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		НоваяСтрокаИзмеренияДаты.Сотрудник = СоответствиеСотрудника.Ключ;
		НоваяСтрокаИзмеренияДаты.Период = СоответствиеСотрудника.Значение.Период;
	КонецЦикла;
	
	ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников = ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников(ИзмеренияДаты);
	
	Для каждого СтруктураДанных Из ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников Цикл
		СтруктураДанных.ПозицияШтатногоРасписания = СоответствиеСотрудников.Получить(СтруктураДанных.Сотрудник).ДолжностьПоШтатномуРасписанию;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОЗанятыхПозицияхИзКадровыхДанныхСотрудников, Новый УникальныйИдентификатор);
	
КонецФункции

Функция ПараметрыЗаполненияНачисленийПоПозицииШтатногоРасписания() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДатаСобытия", '00010101');
	ПараметрыЗаполнения.Вставить("Сотрудник");
	ПараметрыЗаполнения.Вставить("РазрядКатегорияНадбавки");
	ПараметрыЗаполнения.Вставить("ОписаниеТаблицыНачислений");
	ПараметрыЗаполнения.Вставить("СохранятьТекущиеЗначения", Ложь);
	ПараметрыЗаполнения.Вставить("ДолжностьПоШтатномуРасписанию");
	ПараметрыЗаполнения.Вставить("ТекущаяДолжностьПоШтатномуРасписанию");
	ПараметрыЗаполнения.Вставить("ПКУ");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Процедура ЗаполнитьНачисленияПоПозиции(Форма, ПараметрыЗаполнения) Экспорт
	
	ДатаСобытия = ПараметрыЗаполнения.ДатаСобытия;
	
	// Определении даты на которую получаются сведения позиций штатного расписания
	ДатаУтверждения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию, "ДатаУтверждения");
	Если ДатаСобытия < ДатаУтверждения Тогда
		ДатаСведений = ДатаУтверждения;
	Иначе
		ДатаСведений = ДатаСобытия;
	КонецЕсли;
	
	СписокПозиций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию);
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ТекущаяДолжностьПоШтатномуРасписанию) Тогда
		СписокПозиций.Добавить(ПараметрыЗаполнения.ТекущаяДолжностьПоШтатномуРасписанию);
	КонецЕсли;
	
	ДанныеПозиций = УправлениеШтатнымРасписанием.ДанныеПозицийШтатногоРасписания(
		Истина, СписокПозиций, ДатаСведений);
	
	ДанныеПозиции = ДанныеПозиций.Получить(ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию);
	ДанныеТекущейПозиции = ДанныеПозиций.Получить(ПараметрыЗаполнения.ТекущаяДолжностьПоШтатномуРасписанию);
	
	ФОРаботаВБюджетномУчреждении = Форма.ПолучитьФункциональнуюОпциюФормы("РаботаВБюджетномУчреждении");
	Если ФОРаботаВБюджетномУчреждении Тогда
		
		Если ДанныеПозиции.Свойство("СпособОтраженияЗарплатыВБухучете")
			И Форма.Объект.Свойство("СпособОтраженияЗарплатыВБухучете") Тогда
			
			Форма.Объект.СпособОтраженияЗарплатыВБухучете = ДанныеПозиции.СпособОтраженияЗарплатыВБухучете;
			
		КонецЕсли;
		
		
		Если ДанныеПозиции.Свойство("СтатьяФинансирования")
			И Форма.Объект.Свойство("СтатьяФинансирования") Тогда
			
			Форма.Объект.СтатьяФинансирования = ДанныеПозиции.СтатьяФинансирования;
			
		КонецЕсли;
	
	КонецЕсли; 
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Сотрудник = ПараметрыЗаполнения.Сотрудник;
	РазрядКатегорияНадбавки = ПараметрыЗаполнения.РазрядКатегорияНадбавки;
	СохранятьТекущиеЗначения = ПараметрыЗаполнения.СохранятьТекущиеЗначения;
	ОписаниеТаблицыНачислений = ПараметрыЗаполнения.ОписаниеТаблицыНачислений;
	
	СодержитПолеДействие = ОписаниеТаблицыНачислений.Свойство("СодержитПолеДействие")
		И ОписаниеТаблицыНачислений.СодержитПолеДействие = Истина;
	
	НачисленияПозиции = ДанныеПозиции.Начисления;
	НачисленияТекущейПозиции = Новый Соответствие;
	Если НачисленияПозиции <> Неопределено Тогда
		
		Если ДанныеТекущейПозиции <> Неопределено Тогда
			
			Для каждого ОписаниеНачисления Из ДанныеТекущейПозиции.Начисления Цикл
				НачисленияТекущейПозиции.Вставить(ОписаниеНачисления.Начисление, Истина);
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыНачислений.ПутьКДанным);
		
		// Запомним текущее состояние табличной части Начисления.
		ТЧНачисленияПредыдущие = ДанныеНачислений.Выгрузить();
		
		// При заполнении из перемещения необходимо сохранить текущий состав начислений.
		НачисленияИзменяемыхСтрок = Новый Соответствие;
		
		// Получение данных тарифной сетки
		ФОИспользоватьТарифныеСеткиПриРасчетеЗарплаты = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты");
		Если ФОИспользоватьТарифныеСеткиПриРасчетеЗарплаты Тогда
			
			ДанныеТарифныхСеток = ЗарплатаКадрыРасширенныйПовтИсп.ДанныеТарифныхСеток(
				ДанныеПозиции.ТарифнаяСетка, ДанныеПозиции.РазрядКатегория, ДанныеПозиции.ТарифнаяСеткаНадбавки, РазрядКатегорияНадбавки, ДатаСведений, Ложь, ПараметрыЗаполнения.ПКУ);
			
		Иначе
			ДанныеТарифныхСеток = Неопределено;
		КонецЕсли; 
		
		Для Каждого ОписаниеНачисления Из НачисленияПозиции Цикл
			
			ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ОписаниеНачисления.Начисление);
			Если ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(1, ОписаниеТаблицыНачислений) Тогда
				
				Если (ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
					Или ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка
					Или ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность) Тогда
					
					Если ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность Тогда
						
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерНадбавкаЗаВредность", ОписаниеНачисления.Размер);
						Если ОписаниеНачисления.Показатели.Количество() > 0 Тогда
							ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяНадбавкаЗаВредность", ОписаниеНачисления.Показатели[0].Значение);
						КонецЕсли;
						
					ИначеЕсли ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент Тогда
						
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерРайонныйКоэффициент", ОписаниеНачисления.Размер);
						Если ОписаниеНачисления.Показатели.Количество() > 0 Тогда
							ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяРайонныйКоэффициент", ОписаниеНачисления.Показатели[0].Значение);
						КонецЕсли; 
						
					ИначеЕсли ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерСевернаяНадбавка", ОписаниеНачисления.Размер);
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Определение строки начисления или создание новой, если строки с начислением еще нет.
			НайденныеСтроки = ДанныеНачислений.НайтиСтроки(Новый Структура(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета, ОписаниеНачисления.Начисление));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаНачислений = НайденныеСтроки[0];
			Иначе
				
				СтрокаНачислений = ДанныеНачислений.Добавить();
				СтрокаНачислений[ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета] = ОписаниеНачисления.Начисление;
				Если СодержитПолеДействие Тогда
					СтрокаНачислений.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить");
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаНачислений.Свойство("ХарактерНачисления") Тогда
				СтрокаНачислений.ХарактерНачисления = ПредопределенноеЗначение("Перечисление.ХарактерПлановогоНачисления.Штатное");
			КонецЕсли;
			
			ПоказателиСтрокиНачислений = Новый ТаблицаЗначений;
			ПоказателиСтрокиНачислений.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
			ПоказателиСтрокиНачислений.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
			ПоказателиСтрокиНачислений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
			
			// Подготовка значений показателей из предыдущего состава строк.
			НайденныеСтроки = ТЧНачисленияПредыдущие.НайтиСтроки(Новый Структура(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета, ОписаниеНачисления.Начисление));
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаПредыдущихНачислений = НайденныеСтроки[0];
				Для СчетчикПоказателей = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений) Цикл
					
					Если ЗначениеЗаполнено(СтрокаПредыдущихНачислений["Показатель" + СчетчикПоказателей]) Тогда
						
						НоваяСтрокаПоказателей = ПоказателиСтрокиНачислений.Добавить();
						НоваяСтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
						НоваяСтрокаПоказателей.Показатель = СтрокаПредыдущихНачислений["Показатель" + СчетчикПоказателей];
						НоваяСтрокаПоказателей.Значение = СтрокаПредыдущихНачислений["Значение" + СчетчикПоказателей];
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Подготовка значений показателей по данным начисления штатного расписания.
			// Значение показателя остается неизменным, если его значение попадает в диапазон
			// между минимальным и максимальным значениями показателя штатного расписания.
			// Если значение не попадает в этот диапазон, выбирается ближайшее из значений
			// показателя начисления позиции штатного расписания.
			Для СчетчикПоказателей = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений) Цикл
				
				Если СчетчикПоказателей <= ОписаниеНачисления.Показатели.Количество() Тогда
					
					ОписаниеПоказателя = ОписаниеНачисления.Показатели[СчетчикПоказателей - 1];
					
					НайденныеПоказатели = ПоказателиСтрокиНачислений.НайтиСтроки(Новый Структура("Показатель", ОписаниеПоказателя.Показатель));
					Если НайденныеПоказатели.Количество() = 0 Тогда
						СтрокаПоказателя = ПоказателиСтрокиНачислений.Добавить();
						СтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
						СтрокаПоказателя.Показатель = ОписаниеПоказателя.Показатель;
					Иначе
						СтрокаПоказателя = НайденныеПоказатели[0];
					КонецЕсли;
					
					ЗначенияНазначеныПоДаннымТарифныхСеток = Ложь;
					Если ДанныеТарифныхСеток <> Неопределено Тогда
						
						Если ДанныеТарифныхСеток.ЗначениеПоказателейОклад <> Неопределено
							И ДанныеТарифныхСеток.СписокПоказателейОклад.Найти(СтрокаПоказателя.Показатель) <> Неопределено Тогда
							
							Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
								
								Если ДанныеТарифныхСеток.ЗначениеПоказателейОклад.ЗначениеМакс <> 0 Тогда
									
									ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.ЗначениеМин;
									ЗначениеМакс = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.ЗначениеМакс;
									ЗначенияНазначеныПоДаннымТарифныхСеток = Истина;
									
								КонецЕсли;
								
							Иначе
								
								Если ДанныеТарифныхСеток.ЗначениеПоказателейОклад.Значение <> 0 Тогда
									
									ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейОклад.Значение;
									ЗначениеМакс = ЗначениеМин;
									ЗначенияНазначеныПоДаннымТарифныхСеток = Истина;
									
								КонецЕсли;
								
							КонецЕсли;
							
						ИначеЕсли ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка <> Неопределено
							И ДанныеТарифныхСеток.СписокПоказателейКвалификационнаяНадбавка.Найти(СтрокаПоказателя.Показатель) <> Неопределено Тогда
							
							Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
								
								Если ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.ЗначениеМакс <> 0 Тогда
									
									ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.ЗначениеМин;
									ЗначениеМакс = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.ЗначениеМакс;
									ЗначенияНазначеныПоДаннымТарифныхСеток = Истина;
									
								КонецЕсли;
								
							Иначе
								
								Если ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.Значение <> 0 Тогда
									
									ЗначениеМин = ДанныеТарифныхСеток.ЗначениеПоказателейНадбавка.Значение;
									ЗначениеМакс = ЗначениеМин;
									ЗначенияНазначеныПоДаннымТарифныхСеток = Истина;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не ЗначенияНазначеныПоДаннымТарифныхСеток Тогда
						
						Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
							ЗначениеМин = ОписаниеПоказателя.ЗначениеМин;
							ЗначениеМакс = ОписаниеПоказателя.ЗначениеМакс;
						Иначе
							ЗначениеМин = ОписаниеПоказателя.Значение;
							ЗначениеМакс = ЗначениеМин;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СохранятьТекущиеЗначения Тогда
						
						Если Не ЗначениеЗаполнено(СтрокаПоказателя.Значение) Тогда
							ЗначениеПоказателя = ЗначениеМин;
						ИначеЕсли СтрокаПоказателя.Значение <= ЗначениеМин Тогда
							ЗначениеПоказателя = ЗначениеМин;
						ИначеЕсли СтрокаПоказателя.Значение >= ЗначениеМакс Тогда
							ЗначениеПоказателя = ЗначениеМакс;
						Иначе
							ЗначениеПоказателя = СтрокаПоказателя.Значение;
						КонецЕсли;
						
					Иначе
						ЗначениеПоказателя = ЗначениеМин;
					КонецЕсли;
					
					СтрокаПоказателя.Значение = ЗначениеПоказателя;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Размещение показателей в строке начисления.
			ЗарплатаКадрыРасширенный.ПоместитьДанныеПоказателейВСтрокуТаблицыВидовРасчета(
				ИнфоОВидеРасчета, СтрокаНачислений, ПоказателиСтрокиНачислений, 1, , , , Сотрудник, ДатаСобытия);
			
			Если Не ИнфоОВидеРасчета.Рассчитывается Тогда 
				
				СтрокаНачислений.ФиксированнаяСумма = Истина;
				
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					ЗначениеМин = ОписаниеНачисления.РазмерМин;
					ЗначениеМакс = ОписаниеНачисления.РазмерМакс;
				Иначе
					ЗначениеМин = ОписаниеНачисления.Размер;
					ЗначениеМакс = ЗначениеМин;
				КонецЕсли;
				
				Если СохранятьТекущиеЗначения Тогда
					
					Если Не ЗначениеЗаполнено(СтрокаНачислений.Значение1) Тогда
						ЗначениеПоказателя = ЗначениеМин;
					ИначеЕсли СтрокаНачислений.Значение1 <= ЗначениеМин Тогда
						ЗначениеПоказателя = ЗначениеМин;
					ИначеЕсли СтрокаНачислений.Значение1 >= ЗначениеМакс Тогда
						ЗначениеПоказателя = ЗначениеМакс;
					Иначе
						ЗначениеПоказателя = СтрокаНачислений.Значение1;
					КонецЕсли;
					
				Иначе
					ЗначениеПоказателя = ЗначениеМин;
				КонецЕсли;
				
				СтрокаНачислений.Значение1 = ЗначениеПоказателя;
				
			КонецЕсли;
			
			НачисленияИзменяемыхСтрок.Вставить(СтрокаНачислений[ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета], Истина);
			
		КонецЦикла;
		
		// Дополнительная обработка строк начислений.
		// Необходимо упорядочить строки начислений по значению РеквизитДопУпорядочивания начисления.
		ТЧНачисления = ДанныеНачислений.Выгрузить();
		ТЧНачисления.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
		
		// Подготовка значений РеквизитДопУпорядочивания начислений.
		Начисления = ТЧНачисления.Скопировать();
		Начисления.Свернуть(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета);
		
		РеквизитыДопупорядочивания = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Начисления.ВыгрузитьКолонку(ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета), "РеквизитДопУпорядочивания");

		// При заполнении из перемещения, необходимо обнулить показатели начислений прекращающих действие
		// и сформировать комментарии к строкам.
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаНачислений Из ТЧНачисления Цикл
			
			Начисление = СтрокаНачислений[ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета];
			СтрокаНачислений.РеквизитДопУпорядочивания = РеквизитыДопупорядочивания.Получить(Начисление);
			
			Если НачисленияТекущейПозиции.Получить(Начисление) = Истина Тогда
				
				Если СодержитПолеДействие Тогда
					
					Если НачисленияИзменяемыхСтрок.Получить(Начисление) <> Истина Тогда
						СтрокаНачислений.Действие = ПредопределенноеЗначение("Перечисление.ДействияСНачислениямиИУдержаниями.Отменить");
					КонецЕсли;
					
					СтруктураСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаНачислений);
					Если СтруктураСтроки.Свойство("Комментарий") Тогда
						
						ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСНачислением(СтруктураСтроки,
							ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений), 1, ОписаниеТаблицыНачислений, ДатаСобытия);
							
						СтрокаНачислений.Комментарий = СтруктураСтроки.Комментарий;
						
					КонецЕсли;
					
				ИначеЕсли НачисленияИзменяемыхСтрок.Получить(Начисление) <> Истина Тогда
					СтрокиКУдалению.Добавить(СтрокаНачислений);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			ТЧНачисления.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		ТЧНачисления.Сортировать("РеквизитДопУпорядочивания");
		ДанныеНачислений.Загрузить(ТЧНачисления);
		
	КонецЕсли;
	
	// Дополнительные показатели
	ДополнительныеПоказателиПозиции = ДанныеПозиции.НезависимыеПоказатели;
	
	ДополнительныеПоказателиПредыдущие = Форма.Объект.Показатели.Выгрузить(Новый Структура("ИдентификаторСтрокиВидаРасчета", 0));
	
	УдаляемыеСтроки = Форма.Объект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", 0));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Форма.Объект.Показатели.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	// При заполнении из перемещения необходимо сохранить текущий состав дополнительных показателей.
	Если СодержитПолеДействие Тогда
		ДополнительныеПоказатели = ДополнительныеПоказателиПредыдущие.Скопировать();
	Иначе
		ДополнительныеПоказатели = ДополнительныеПоказателиПредыдущие.СкопироватьКолонки();
	КонецЕсли;
	
	МассивИзменяемыхСтрок = Новый Массив;
	Если ДополнительныеПоказателиПозиции <> Неопределено Тогда
		
		Для Каждого ДополнительныйПоказатель Из ДополнительныеПоказателиПозиции Цикл
			
			НайденныеСтроки = ДополнительныеПоказатели.НайтиСтроки(Новый Структура("Показатель", ДополнительныйПоказатель.Показатель));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				СтрокаПоказателя = НайденныеСтроки[0];
			Иначе 
				
				СтрокаПоказателя = ДополнительныеПоказатели.Добавить();
				СтрокаПоказателя.Показатель = ДополнительныйПоказатель.Показатель;
				Если СодержитПолеДействие Тогда
					СтрокаПоказателя.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				
				ЗначениеМин = ДополнительныйПоказатель.ЗначениеМин;
				ЗначениеМакс = ДополнительныйПоказатель.ЗначениеМакс;
				
			Иначе
				
				ЗначениеМин = ДополнительныйПоказатель.Значение;
				ЗначениеМакс = ЗначениеМин;
				
			КонецЕсли;
			
			Если СохранятьТекущиеЗначения Тогда
				
				Если Не ЗначениеЗаполнено(СтрокаПоказателя.Значение) Тогда
					СтрокаПоказателя.Значение = ЗначениеМин;
				ИначеЕсли СтрокаПоказателя.Значение <= ЗначениеМин Тогда
					СтрокаПоказателя.Значение = ЗначениеМин;
				ИначеЕсли СтрокаПоказателя.Значение >= ЗначениеМакс Тогда
					СтрокаПоказателя.Значение = ЗначениеМакс;
				КонецЕсли;
				
			Иначе
				СтрокаПоказателя.Значение = ЗначениеМин;
			КонецЕсли;
			
			МассивИзменяемыхСтрок.Добавить(СтрокаПоказателя);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Установка действия Отменить дополнительным показателям
	Если СодержитПолеДействие Тогда
		
		Для Каждого СтрокаПоказателя Из ДополнительныеПоказатели Цикл 
			
			Если МассивИзменяемыхСтрок.Найти(СтрокаПоказателя) = Неопределено Тогда
				СтрокаПоказателя.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
			КонецЕсли;
			
			ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСДополнительнымПоказателем(
				ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаПоказателя));
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Перенос строк с дополнительными показателями в документ
	Для Каждого СтрокаПоказателя Из ДополнительныеПоказатели Цикл
		ЗаполнитьЗначенияСвойств(Форма.Объект.Показатели.Добавить(), СтрокаПоказателя);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидЗанятостиНовогоСотрудникаВСтрокеПриемаНаРаботуСписком(СтрокаДокумента, СписокСотрудниковДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудниковДокумента", СписокСотрудниковДокумента);
	Запрос.УстановитьПараметр("Сотрудник", СтрокаДокумента.Сотрудник);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СотрудникТекущий
		|		ПО Сотрудники.ФизическоеЛицо = СотрудникТекущий.ФизическоеЛицо
		|			И (СотрудникТекущий.Ссылка = &Сотрудник)
		|ГДЕ
		|	Сотрудники.Ссылка В(&СписокСотрудниковДокумента)";
		
	Если Не Запрос.Выполнить().Пустой() Тогда
		СтрокаДокумента.ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиПодписокНаСобытия

Процедура ПодразделенияОрганизацийОбработкаПроверкиЗаполненияОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Не Источник.Сформировано Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаСоздания");
	КонецЕсли; 
	
	Если Не Источник.Расформировано Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаРасформирования");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Источник.ДатаРасформирования) И ЗначениеЗаполнено(Источник.ДатаСоздания) И Источник.ДатаСоздания > Источник.ДатаРасформирования Тогда
		ТекстСообщения = НСтр("ru='Дата создания подразделения не может быть больше даты расформирования"".''';uk='Дата створення підрозділу не може бути більше дати розформування"".''",);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник.Ссылка, , , Отказ);	
	КонецЕсли;	
	
	Если (Не Источник.Расформировано) И Источник.ПометкаУдаления Тогда
		ТекстСообщения = НСтр("ru='У помеченного на удаление подразделения нельзя снять флаг ""Расформировано"".''';uk='У позначений на видалення підрозділу можна зняти прапор ""Розформовано"".''",);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник.Ссылка, , , Отказ);	
	КонецЕсли;	
	
	Если Источник.Расформировано Тогда
		ПроверкаИспользованияВШтатномРасписании(Отказ, Источник.Ссылка, Источник.ДатаРасформирования);
	КонецЕсли;	

КонецПроцедуры

Процедура ПроверкаИспользованияВШтатномРасписании(Отказ, Ссылка, ДатаРасформирования)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Ссылка);
	Запрос.УстановитьПараметр("ДатаРасформирования", ДатаРасформирования);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Наименование КАК НаименованиеПодразделения,
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Родитель = &Подразделение
	|	И НЕ ПодразделенияОрганизаций.Расформировано";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru='Подразделение ""%1"" не может быть расформировано, т.к. на %2 есть действующие подчиненные подразделения:';uk='Підрозділ ""%1"" не може бути розформовано, т. к. на %2 є діючі підлеглі підрозділи:'"); 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Ссылка,
			Формат(ДатаРасформирования, "ДЛФ=DD")); 
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.Расформировано" , , Отказ);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = "- " + НСтр("ru='подразделение';uk='підрозділ'") + " ""%1""";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Выборка.НаименованиеПодразделения); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,  "Объект.Расформировано", , Отказ);
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Наименование КАК ПозицияШтатногоРасписания,
	|	ШтатноеРасписание.Ссылка
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Подразделение = &Подразделение
	|	И НЕ ШтатноеРасписание.ЭтоГруппа
	|	И НЕ(ШтатноеРасписание.Закрыта
	|				И ШтатноеРасписание.ДатаЗакрытия <= &ДатаРасформирования)";
	
	Результат = Запрос.Выполнить();
		
	Если Не Результат.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru='Подразделение ""%1"" не может быть расформировано, т.к. на %2 оно используется в актуальных позициях штатного расписания:';uk='Підрозділ ""%1"" не може бути розформовано, т. к. на %2 воно використовується в актуальних позиції штатного розкладу:'"); 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Ссылка,
			Формат(ДатаРасформирования, "ДЛФ=DD")); 
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.Расформировано" , , Отказ);

		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = "- " + НСтр("ru='позиция';uk='позиція'") + " ""%1""";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Выборка.ПозицияШтатногоРасписания); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,  "Объект.Расформировано", , Отказ);
		КонецЦикла;	
		
	КонецЕсли;
		
КонецПроцедуры	

Процедура ПодразделенияОрганизацийПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Если Источник.ПометкаУдаления И Источник.Сформировано И (Не Источник.Расформировано)  Тогда
			ТекстСообщения = НСтр("ru='Нельзя пометить на удаление действующее подразделение''';uk='Неможна відмітити на вилучення діючий підрозділ''",);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьЗаписиДанныхФизическихЛицПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	НомерПоПорядку = 1;
	Для каждого Запись Из Источник Цикл
		
		Запись.НомерПоПорядку = НомерПоПорядку;
		НомерПоПорядку = НомерПоПорядку + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапомнитьДанныеДляПодбораСотрудников(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ГоловнаяОрганизацияПредыдущая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ГоловнаяОрганизация");
	Если Источник.ЭтоНовый()
		Или ГоловнаяОрганизацияПредыдущая <> Источник.ГоловнаяОрганизация Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ОбновитьДанныеДляПодбораНового", Истина);
		
	Иначе
		Источник.ДополнительныеСвойства.Вставить("НаименованиеПредыдущее", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Наименование"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеДляПодбораСотрудников(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НаименованиеПредыдущее")
		И Источник.Наименование <> Источник.ДополнительныеСвойства.НаименованиеПредыдущее Тогда
		
		РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьНаименованияСотрудника(Источник.Ссылка, Источник.Наименование);
		
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОбновитьДанныеДляПодбораНового") Тогда
		РегистрыСведений.ДанныеДляПодбораСотрудников.ДобавитьДанныеНовогоСотрудника(Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СобытияРегистровСведений

Функция ВозвратныеРесурсыКадроваяИсторияСотрудников()
	
	Возврат "Организация,Подразделение,ДолжностьПоШтатномуРасписанию,КоличествоСтавок,Должность,ВидЗанятости";
	
КонецФункции

Процедура КадроваяИсторияСотрудниковПередЗаписью(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчетБазовый.КадроваяИсторияСотрудниковПередЗаписью(НаборЗаписей, Отказ);
	
	Если ТребуетсяОбновлениеВторичныхДанных(НаборЗаписей) Тогда
		
		ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра = КадровыйУчетРасширенный.ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра();
		ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("СтрокаЗаполняемыхВозвратныхРесурсов", ВозвратныеРесурсыКадроваяИсторияСотрудников());
		ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПередЗаписью", Истина);
		ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПервичныеРесурсыДляУвольнения", Истина);
		ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ОбновлятьУвольнение", Истина);
		ОбновитьВторичныеДанныеВозвратногоРегистра(НаборЗаписей, ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КадроваяИсторияСотрудниковПриЗаписи(НаборЗаписей, Отказ) Экспорт
	
	Если ТребуетсяОбновлениеВторичныхДанных(НаборЗаписей) Тогда
		
		ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра = КадровыйУчетРасширенный.ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра();
		ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("СтрокаЗаполняемыхВозвратныхРесурсов", ВозвратныеРесурсыКадроваяИсторияСотрудников());
		ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПередЗаписью", Ложь);
		ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПервичныеРесурсыДляУвольнения", Истина);
		ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ОбновлятьУвольнение", Истина);
		ОбновитьВторичныеДанныеВозвратногоРегистра(НаборЗаписей, ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра);
		
	КонецЕсли;
	
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.НачальнаяШтатнаяРасстановка") Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("СохранитьДатыПриема", Истина);
	КонецЕсли;
	
	КадровыйУчетБазовый.КадроваяИсторияСотрудниковПриЗаписи(НаборЗаписей, Отказ);
	
КонецПроцедуры

Функция ВозвратныеРесурсыПлановыеНачисления()
	
	Возврат "Используется, Размер";
	
КонецФункции

Процедура ПлановыеНачисленияПередЗаписью(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчетБазовый.ПлановыеНачисленияПередЗаписью(НаборЗаписей, Отказ);
	
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра = КадровыйУчетРасширенный.ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра();
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("СтрокаЗаполняемыхВозвратныхРесурсов", ВозвратныеРесурсыПлановыеНачисления());
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПередЗаписью", Истина);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПервичныеРесурсыДляУвольнения", Ложь);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ОбновлятьУвольнение", Ложь);
	ОбновитьВторичныеДанныеВозвратногоРегистра(НаборЗаписей, ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра);
	
КонецПроцедуры

Процедура ПлановыеНачисленияПриЗаписи(НаборЗаписей, Отказ) Экспорт
	
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра = КадровыйУчетРасширенный.ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра();
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("СтрокаЗаполняемыхВозвратныхРесурсов", ВозвратныеРесурсыПлановыеНачисления());
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПередЗаписью", Ложь);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПервичныеРесурсыДляУвольнения", Ложь);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ОбновлятьУвольнение", Ложь);
	ОбновитьВторичныеДанныеВозвратногоРегистра(НаборЗаписей, ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра);
	
	КадровыйУчетБазовый.ПлановыеНачисленияПриЗаписи(НаборЗаписей, Отказ);
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИФункцииОбновленияВторичныхДанныхВозвратногоРегистраСведений

// Находит значения возвратных ресурсов регистра сведений и обновляет их в соответствии с значениями записываемого
// набора записей.
// Может вызываться из процедур ПередЗаписью и ПриЗаписи модуля набора записей регистра сведений.
// Работает только для регистров сведений подчиненных регистратору.
// Параметры:
//		НовыйНабор - набор записей, влияние записей которого на будущие записи проверяется.
//
//		ПередЗаписью - булево значение. 
//			Показывает из какой процедуры вызвана текущая процедура ПередЗаписью или ПриЗаписи.
//
//		СтрокаЗаполняемыхВозвратныхРесурсов - Строка. 
//			Строка содержащая наименования заполняемых возвратных ресурсов через запятую. Наименования указываются без
//			постфикса "ПоОкончании".
//	
//
// Получает срез первых для каждого набора измерений(включая период) НабораЗаписей. Если такие записи есть, то к ним
// присоединяются данные среза последних на дату из записи из среза первых - 1 секунда. Если значения ресурсов среза
// последних отличаются от значений возвратных ресурсов среза первых, то значения в записях среза первых заполняются
// значениями из среза последних.
//
Процедура ОбновитьВторичныеДанныеВозвратногоРегистра(НаборЗаписей, ПараметрыОбновления) Экспорт
	
	ИмяРегистра = НаборЗаписей.Метаданные().Имя;
	РегистрСведенийМетаданные = Метаданные.РегистрыСведений[ИмяРегистра];
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	// Создадим массив содержащий измерения нашего регистра + период.
	// Создадим строку описывающую измерения нашего регистра + период.
	
	Измерения = Новый Массив;
	СтрокаИзмерений = "Период";
	Измерения.Добавить(СтрокаИзмерений);
	Для Каждого Измерение Из РегистрСведенийМетаданные.Измерения Цикл
		Измерения.Добавить(Измерение.Имя);
		СтрокаИзмерений = СтрокаИзмерений + "," + Измерение.Имя;
	КонецЦикла;
	
	НаборЗаписейИзменен = Истина;
	
	Если Не ПараметрыОбновления.ПередЗаписью Тогда
		НаборЗаписей.ДополнительныеСвойства.Свойство("НаборЗаписейИзменен", НаборЗаписейИзменен);
	Иначе
		НаборЗаписейИзменен = НаборЗаписейИзменен(НаборЗаписей, ИмяРегистра, Регистратор);
		НаборЗаписей.ДополнительныеСвойства.Вставить("НаборЗаписейИзменен", НаборЗаписейИзменен);
	КонецЕсли;
	
	Если Не НаборЗаписейИзменен Тогда
		Возврат;
	КонецЕсли;
	
	// При записи в дополнительных свойствах набора содержится менеджер временных таблиц,
	// а в нем таблица содержащая наборы измерений которые не имеют записей в будущем.
	// Если Менеджера в свойствах нет, создадим новый.
	МенеджерВременныхТаблиц	= Неопределено;
	
	Если Не ПараметрыОбновления.ПередЗаписью Тогда
		НаборЗаписей.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если ПараметрыОбновления.ПередЗаписью Тогда
		ЭтоВторичныйНабор = Ложь;
		Если НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор", ЭтоВторичныйНабор) Тогда
			Если ЭтоВторичныйНабор Тогда
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
				ТекстЗапроса = "ВЫБРАТЬ ";
				Для Каждого Измерение Из Измерения Цикл
					ТекстЗапроса = ТекстЗапроса + "
					|	NULL КАК " + Измерение + ",";
				КонецЦикла;
				ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
				ТекстЗапроса = ТекстЗапроса + "
				| ПОМЕСТИТЬ ВТИзмеренияДатыПередЗаписью";
				Запрос.Текст = ТекстЗапроса;
				Запрос.Выполнить();
				НаборЗаписей.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц); 
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	// Создадим массив содержащий отборы из записываемого набора.
	Отбор = Новый Массив;
	Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
		Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", ЭлементОтбора.Имя, " = ", ЭлементОтбора.Значение));
	КонецЦикла;
	
	// Создадим в менеджере таблицу ВТИзмеренияДатыДляФормированияСрезаПервых и заполним ее данными из базы
	// с отбором таким же как в записываемом наборе записей.
	// Таблица будет содержать все наборы измерений по которым необходимо проверить записи в будущем.
	ДополнитьТаблицуДаннымиРегистраПоОтборуНовогоНабора(ПараметрыОбновления.ПередЗаписью, ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц);
	
	// Получим в наш МенеджерВременныхТаблиц таблицу ВТ[ИмяРегистра]СрезПервых.
	Отбор.Очистить();
	ЗаполнитьВременныеТаблицыДляПроверкиИОбновленияВозвратногоРегистра(ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц);
	
	// Перед записью нам не нужны данные по текущему регистратору.
	Если ПараметрыОбновления.ПередЗаписью Тогда 
		Отбор.Очистить();
		Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", "Регистратор", " <> ", Регистратор));
	Иначе
		Отбор = Неопределено;
	КонецЕсли;	
	
	ПроверитьИОбновитьСледующиеЗаписиВозвратногоРегистра(НаборЗаписей, ПараметрыОбновления, ИмяРегистра, Измерения, СтрокаИзмерений, МенеджерВременныхТаблиц, Отбор);
	
КонецПроцедуры	

// Метод конструирует структуру с параметрами механизма обновления вторичных данных возвратных регистров.
Функция ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра() Экспорт
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра = Новый Структура;
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("СтрокаЗаполняемыхВозвратныхРесурсов", "");
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПередЗаписью", Истина);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ОбновлятьУвольнение", Истина);
	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра.Вставить("ПервичныеРесурсыДляУвольнения", Истина);
	Возврат	ПараметрыОбновленияВторичныхДанныхВозвратногоРегистра;
КонецФункции

Процедура ДополнитьТаблицуДаннымиРегистраПоОтборуНовогоНабора(ПередЗаписью, ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ";
	Для Каждого Измерение Из Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	РегистрСведений." + Измерение + ",";
	КонецЦикла;
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	ТекстЗапроса = ТекстЗапроса + "
	| ПОМЕСТИТЬ ВТИзмеренияДатыДляФормированияСрезаПервых
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК РегистрСведений ";
	
	// Добавим отбор, по измерениям не имеющим записей в будущем, из таблицы которую создали ПередЗаписью.
	Если Не ПередЗаписью Тогда
		ТекстЗапроса =	ТекстЗапроса + " ЛЕВОЕ СОЕДИНЕНИЕ ВТИзмеренияДатыПередЗаписью КАК ПередЗаписью
		|ПО "; 	
		Для Каждого Измерение Из Измерения Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	РегистрСведений." + Измерение + " = ПередЗаписью." + Измерение + " И ";
		КонецЦикла;
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	КонецЕсли;
	
	Если Отбор.Количество() <> 0 Тогда
		СчПараметров = 1;
		ТекстОтбор = "
		|	ГДЕ (";
		Для Каждого СтруктураОтбора Из Отбор Цикл
			ТекстОтбор = ТекстОтбор + "
			|	РегистрСведений." + СтруктураОтбора.ЛевоеЗначение + СтруктураОтбора.ВидСравнения + "(&Параметр" + СчПараметров + ") И";
			СчПараметров = СчПараметров + 1;
		КонецЦикла;	
		ТекстОтбор = Лев(ТекстОтбор, СтрДлина(ТекстОтбор) - 1);
		ТекстОтбор = ТекстОтбор + ")";
		ТекстЗапроса = ТекстЗапроса + ТекстОтбор;
	КонецЕсли;
	
	Если Не ПередЗаписью Тогда
		Если Отбор.Количество() <> 0 Тогда
			ТекстЗапроса =	ТекстЗапроса + "
			|  И (ПередЗаписью.Период ЕСТЬ NULL)";		
		Иначе
			ТекстЗапроса =	ТекстЗапроса + "
			|	ГДЕ (ПередЗаписью.Период ЕСТЬ NULL)"; 	
		КонецЕсли;
	КонецЕсли;
	
	Если Отбор <> Неопределено Тогда
		СчПараметров = 1;
		Для Каждого СтруктураОтбора Из Отбор Цикл
			Запрос.УстановитьПараметр("Параметр" + СчПараметров, СтруктураОтбора.ПравоеЗначение);			
			СчПараметров = СчПараметров + 1;
		КонецЦикла;
	КонецЕсли;	
	
	Если Не ПередЗаписью  Тогда
		ТекстЗапроса = ТекстЗапроса + ";
		|///////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИзмеренияДатыПередЗаписью";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура ЗаполнитьВременныеТаблицыДляПроверкиИОбновленияВозвратногоРегистра(ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц)

	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТИзмеренияДатыДляФормированияСрезаПервых",
		СтрокаИзмерений);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВключаяГраницу = Ложь;
	ПараметрыПостроения.Отборы = Отбор;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ТИПЗНАЧЕНИЯ(РегистрСведений.Регистратор) = ТИП(Документ.Увольнение) ИЛИ ДействуетДо", " <> ", '00010101', Ложь);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПервых(
		ИмяРегистра,
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
КонецПроцедуры	

Процедура ЗаполнитьДанныеСтрокиНабора(ВыборкаСтрок, НаборДляЗаписи, МассивНеобходимыхВозвратныхРесурсов, ПараметрыОбновления)
	// Для документа увольнение вторичные данные хранятся в "обычных" ресурсах.
	ОкончаниеРесурса = ?(ТипЗнч(ВыборкаСтрок.Регистратор) = ТипЗнч(Документы.Увольнение.ПустаяСсылка()) И ПараметрыОбновления.ПервичныеРесурсыДляУвольнения, "", "ПоОкончании");
	
	Для каждого Запись Из НаборДляЗаписи Цикл
		Если Запись.НомерСтроки = ВыборкаСтрок.НомерСтроки Тогда
			Для Каждого Ресурс Из МассивНеобходимыхВозвратныхРесурсов Цикл
				Запись[СокрЛП(Ресурс) + ОкончаниеРесурса] = ВыборкаСтрок[СокрЛП(Ресурс) + "ПоОкончании"]
			КонецЦикла;
			Прервать;	             
		КонецЕсли;	
	КонецЦикла	
КонецПроцедуры

Процедура ПроверитьИОбновитьСледующиеЗаписиВозвратногоРегистра(НаборЗаписей, ПараметрыОбновления, ИмяРегистра, Измерения, СтрокаИзмерений, МенеджерВременныхТаблиц, ОтборНеЭтотРегистратор)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Необходимо заполнить ВТИзмеренияДатыПередЗаписью записями которые были в таблице ВТИзмеренияДаты, но 
	// которых нет в таблице ВТ[ИмяРегистра]СрезПервых
	// ВТИзмеренияДатыПередЗаписью будем использовать ПриЗаписи в процедуре
	// ДополнитьТаблицуДаннымиРегистраПоОтборуНовогоНабора  для отбора наборов измерений по которым нет записей в будущем.
	// Временные таблицы, которые больше не нужны - уничтожим.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ";
	Для Каждого Измерение Из Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	РегистрСведений." + Измерение + ",";
	КонецЦикла;
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	ТекстЗапроса = ТекстЗапроса + "
	| ПОМЕСТИТЬ ВТИзмеренияДатыПередЗаписью
	|ИЗ
	|	ВТИзмеренияДатыДляФормированияСрезаПервых КАК РегистрСведений 
	|	    ЛЕВОЕ СОЕДИНЕНИЕ ВТ" + ИмяРегистра + "СрезПервых КАК СрезПервых
	|ПО"; 
	Для Каждого Измерение Из Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	РегистрСведений." + Измерение + " = СрезПервых." + Измерение + " И ";
	КонецЦикла;
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	 СрезПервых.Период ЕСТЬ NULL;
	|///////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	 * 
	|	 ПОМЕСТИТЬ ВТИзмеренияДатыДляПроверкиКоличества
	|ИЗ 
	|	 ВТИзмеренияДатыДляФормированияСрезаПервых;
	|///////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИзмеренияДатыДляПроверкиКоличества;
	|///////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИзмеренияДатыДляФормированияСрезаПервых";
	
	Если Не ПараметрыОбновления.ПередЗаписью  Тогда
		ТекстЗапроса = ТекстЗапроса+";
		|///////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИзмеренияДатыПередЗаписью";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// В МассивРезультатов находятся результаты помещения данных во временные таблицы.
	ИзмеренияДаты 							= МассивРезультатов[1].Выбрать();
	ИзмеренияДатыНеИмеющиеЗаписейВБудущем 	= МассивРезультатов[0].Выбрать();
	
	ИзмеренияДаты.Следующий();
	ИзмеренияДатыНеИмеющиеЗаписейВБудущем.Следующий();
	
	// Если не по одному набору измерений, которой записывается нет записей в будущем - ничего делать не будем.
	// Таблица со срезом первых нам больше не нужна.
	Если Не (ИзмеренияДатыНеИмеющиеЗаписейВБудущем.Количество < ИзмеренияДаты.Количество) Тогда
		ТекстЗапроса = "УНИЧТОЖИТЬ ВТ" + ИмяРегистра + "СрезПервых";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		// ПередЗаписью поместим МенеджерВременныхТаблиц в дополнительные свойства набора, будем использовать его ПриЗаписи.
		Если ПараметрыОбновления.ПередЗаписью Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц); 
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// По каждой записи из ВТ[ИмяРегистраСрезПервых необходимо:
	// 1. Получить  срез последних.
	// 2. Проверить надо ли изменять реквизиты ПоОкончании у следующей записи.
	// 3. Если надо, то создаем набор по регистратору следующей записи,
	//	 по номеру строки находим нашу и пишем в нее новые значения возвратных реквизитов.
	
	КоллекцииПолей = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, Измерения);
	
	// Строка для ограничения заполняемых ресурсов только возвратными,
	// если в параметре переданы конкретные ресурсы - заполняем и проверяем только их, 
	// иначе - заполняем и проверяем все.
	Если ПараметрыОбновления.СтрокаЗаполняемыхВозвратныхРесурсов = "" Тогда
		Для Каждого Ресурс Из КоллекцииПолей.ВозвратныеРесурсы Цикл
			СтрокаЗаполняемыхВозвратныхРесурсов = СтрокаЗаполняемыхВозвратныхРесурсов + Ресурс + ",";
		КонецЦикла;
		СтрокаЗаполняемыхВозвратныхРесурсов = Лев(СтрокаЗаполняемыхВозвратныхРесурсов, СтрДлина(СтрокаЗаполняемыхВозвратныхРесурсов) - 1);
	Иначе
		СтрокаЗаполняемыхВозвратныхРесурсов = ПараметрыОбновления.СтрокаЗаполняемыхВозвратныхРесурсов;
	КонецЕсли;
	
	МассивНеобходимыхВозвратныхРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаЗаполняемыхВозвратныхРесурсов, ",", Истина);
	
	// Подготовим ВТ для передачи в процедуру СоздатьПоВременнойТаблицеВТИмяРегистраСрезПоследних, в которую выберем
	// измерения из полученного ранее среза первых,  т.к. для остальных наборов измерений никаких действий выполнять не
	// требуется.
	// Необходимо заметить, что в качестве периода на который требуется получить срез последних указывается период записи
	// среза первых минус секунда.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РегистрСведений.ПериодЗаписи, ДЕНЬ), СЕКУНДА, -1) КАК Период";
	Для Каждого Измерение Из КоллекцииПолей.Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	РегистрСведений." + Измерение;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ВТИзмеренияДатыИзСрезаПервых
	|ИЗ
	|	 ВТ" + ИмяРегистра + "СрезПервых КАК РегистрСведений";
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// ПередЗаписью данные текущего набора, записанные в БД, в срезе нам не нужны,
	// передадим в процедуру формирования Отбор с регистратором текущего набора.
	// Если же ПриЗаписи, то данные текущего набора нужны, отбора по регистратору нет. 
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВсеЗаписи = Истина;
	ПараметрыПостроения.Отборы = ОтборНеЭтотРегистратор;
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		ИмяРегистра,
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДатыИзСрезаПервых",
			СтрокаИзмерений),
		ПараметрыПостроения);
			
	Запрос.Текст ="УНИЧТОЖИТЬ ВТИзмеренияДатыИзСрезаПервых";
	Запрос.Выполнить();
	
	// Сейчас МенеджерВременныхТаблиц содержит таблицы СрезаПервых и СрезаПоследних.
	// Необходимо соединить эти таблицы и найти строки по которым требуется обновление вторичных реквизитов.
	// В итоге должна получится таблица вида.
	// Измерение1
	// |....|ИзмерениеN|НовоеЗначениеОбновляемогоРесурса1|...|НовоеЗначениеОбновляемогоРесурса1|Регистратор|НомерСтроки|
	// Необходимо заметить, что в качестве периода для связи из таблицы среза первых берется поле ПериодИзСреза плюс
	// секунда, т.к. уменьшали период когда получали срез последних.
	ТекстЗапроса = 
	"ВЫБРАТЬ	";
	Для Каждого Ресурс Из МассивНеобходимыхВозвратныхРесурсов Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	РегистрСведенийСрезПоследних." + СокрЛП(Ресурс) + " КАК " + СокрЛП(Ресурс) + "ПоОкончании,";
	КонецЦикла;
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	
	Для Каждого СтандартныйРеквизит Из КоллекцииПолей.СтандартныеРеквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	РегистрСведенийСрезПервых." + СтандартныйРеквизит;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	 ВТ" + ИмяРегистра + "СрезПервых КАК РегистрСведенийСрезПервых";
	ТекстЗапроса = ТекстЗапроса + "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	 ВТ" + ИмяРегистра + "СрезПоследних КАК РегистрСведенийСрезПоследних
	|ПО НАЧАЛОПЕРИОДА(РегистрСведенийСрезПервых.ПериодЗаписи, ДЕНЬ) = ДОБАВИТЬКДАТЕ(РегистрСведенийСрезПоследних.Период, СЕКУНДА, 1)"; 
	Для Каждого Измерение Из КоллекцииПолей.Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + " И 
		|	РегистрСведенийСрезПервых." + Измерение + " = " + "РегистрСведенийСрезПоследних." + Измерение;
	КонецЦикла;
	
	// Будем выбирать только те записи, которые требуют обновления,
	// для этого проверим, что хотя бы один ресурс среза последних отличается от ресурса по окончании среза первых.
	// Проверяются только те ресурсы, которые необходимо заполнять.
	ТекстЗапроса = ТекстЗапроса + "
	|	ГДЕ
	|	ВЫБОР КОГДА "; 
	Для Каждого Ресурс Из МассивНеобходимыхВозвратныхРесурсов Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(РегистрСведенийСрезПервых.Регистратор) = ТИП(Документ.Увольнение) И &ПервичныеРесурсыДляУвольнения 
		|		ТОГДА РегистрСведенийСрезПоследних." + СокрЛП(Ресурс) + " = " + "РегистрСведенийСрезПервых." + СокрЛП(Ресурс) + "  
		|	ИНАЧЕ РегистрСведенийСрезПоследних." + СокрЛП(Ресурс) + " = " + "РегистрСведенийСрезПервых." + СокрЛП(Ресурс) + "ПоОкончании КОНЕЦ" +  " И ";
	КонецЦикла;
	
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ = ИСТИНА"; 
	
	// Т.к. добавили стандартные реквизиты - поле регистратор точно будет.
	ТекстЗапроса = ТекстЗапроса + "
	|	ИТОГИ ПО
	|	РегистрСведенийСрезПервых.Регистратор";
	
	Запрос.УстановитьПараметр("ПервичныеРесурсыДляУвольнения", ПараметрыОбновления.ПервичныеРесурсыДляУвольнения);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	ТекстЗапроса = "УНИЧТОЖИТЬ ВТ" + ИмяРегистра + "СрезПоследних; 
	|	УНИЧТОЖИТЬ ВТ" + ИмяРегистра + "СрезПервых";
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// ПередЗаписью поместим МенеджерВременныхТаблиц в дополнительные свойства набора, будем использовать его ПриЗаписи.
	Если ПараметрыОбновления.ПередЗаписью Тогда
		НаборЗаписей.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц); 
	КонецЕсли;

	// Может быть так, что ничего обновлять не придется.
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	// По каждому регистратору из результата запроса перезаполним записи требующие обновления.
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Регистратор) = ТипЗнч(Документы.Увольнение.ПустаяСсылка()) 
			И Не ПараметрыОбновления.ОбновлятьУвольнение Тогда
		   Продолжить;
		КонецЕсли;
		
		НаборДляЗаписи	= РасчетЗарплатыРасширенный.СоздатьНаборЗаписейРегистратора(Метаданные.РегистрыСведений[ИмяРегистра], Выборка.Регистратор);
		НаборДляЗаписи.Прочитать();
		ВыборкаСтрок = Выборка.Выбрать();
		Пока ВыборкаСтрок.Следующий() Цикл
			ЗаполнитьДанныеСтрокиНабора(ВыборкаСтрок, НаборДляЗаписи, МассивНеобходимыхВозвратныхРесурсов, ПараметрыОбновления);
		КонецЦикла;
		НаборДляЗаписи.ДополнительныеСвойства.Вставить("ЭтоВторичныйНабор", Истина);
		НаборДляЗаписи.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Функция НаборЗаписейИзменен(НаборЗаписей, ИмяРегистра, Регистратор)

	ТЗИзНабораЗаписей = НаборЗаписей.Выгрузить();
	
	// Подготовим массив полей по которым будем сравнивать данные.
	МассивПолей = Новый Массив;
	Для каждого Колонка Из ТЗИзНабораЗаписей.Колонки Цикл
		// Колонка "Номер строки" с точки зрения нашего механизма не существенна.
		// Регистратор сравнивать тоже не будем - и в запросе, и в наборе по нему отбор.
		Если Колонка.Имя = "НомерСтроки"
			Или Колонка.Имя = "Регистратор" Тогда
			Продолжить;
		КонецЕсли;
		МассивПолей.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗИзНабораЗаписей",ТЗИзНабораЗаписей);
	Запрос.УстановитьПараметр("Регистратор",Регистратор);
	
	// Выберем все данные из базы и из записываемого набора, которые необходимо сравнить.
	// Соединим по всем полям данные из базы и из записываемого набора.
	ТекстЗапроса = 
	"ВЫБРАТЬ * ПОМЕСТИТЬ ВТИзНабораЗаписей ИЗ &ТЗИзНабораЗаписей КАК ТЗИзНабораЗаписей
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ * ПОМЕСТИТЬ ВТИзРегистра ИЗ РегистрСведений." + ИмяРегистра + " КАК РегистрСведений ГДЕ РегистрСведений.Регистратор = &Регистратор
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ	
	|	РегистрСведений.НомерСтроки КАК НомерСтроки,
	|	ВТИзНабораЗаписей.НомерСтроки КАК НомерСтрокиИзНабора 
	|ИЗ
	|	ВТИзРегистра КАК РегистрСведений
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|	 ВТИзНабораЗаписей КАК ВТИзНабораЗаписей	
	|ПО  "; 
	Для Каждого Поле Из МассивПолей Цикл
		ТекстЗапроса = ТекстЗапроса + " 
		|	РегистрСведений." + Поле + " = " + "ВТИзНабораЗаписей." + Поле + " И ";
	КонецЦикла;
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	ТекстЗапроса = ТекстЗапроса + "
	|	ГДЕ РегистрСведений.НомерСтроки ЕСТЬ NULL ИЛИ ВТИзНабораЗаписей.НомерСтроки ЕСТЬ NULL"; 
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	// Если данные в базе и в записываемом наборе совпадают, результат будет пустой.
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Функция ТребуетсяОбновлениеВторичныхДанных(НаборЗаписей)
	Возврат Не (НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") И НаборЗаписей.ДополнительныеСвойства.ЭтоВторичныйНабор);
КонецФункции

#КонецОбласти


#Область КадровыеДанныеСотрудников

Функция ПутьКДаннымСведенийЗависящихОтФункциональныхОпцийОрганизаций(Знач ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией")
		И ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		
			
		Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
				
				ПутьКДанным =
					"	ВЫБОР 
					|		КОГДА ФункциональныеОпции.ИспользуютсяРаботыСДосрочнойПенсией 
					|			ТОГДА
					|				ВЫБОР
					|					КОГДА НЕ ИсторияИспользованияШтатногоРасписания.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией ЕСТЬ NULL
					|						ТОГДА ИсторияИспользованияШтатногоРасписания.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией
					|					КОГДА НЕ ИсторияИспользованияШтатногоРасписанияПодработок.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией ЕСТЬ NULL
					|						ТОГДА ИсторияИспользованияШтатногоРасписанияПодработок.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией
					|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)
					|				КОНЕЦ 
					|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка) 
					|	КОНЕЦ";
				
			Иначе
				
				ПутьКДанным =
					"	ВЫБОР 
					|		КОГДА ФункциональныеОпции.ИспользуютсяРаботыСДосрочнойПенсией 
					|			ТОГДА ЕСТЬNULL(ИсторияИспользованияШтатногоРасписания.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией, ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)) 
					|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка) 
					|	КОНЕЦ";
			
			КонецЕсли;
			
		Иначе
		
			ПутьКДанным =
				"	ВЫБОР 
				|		КОГДА ФункциональныеОпции.ИспользуютсяРаботыСДосрочнойПенсией 
				|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией, ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)) 
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка) 
				|	КОНЕЦ";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийЗависящихОтФункциональныхОпцийОрганизаций(ИмяПоля);
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(Знач ИмяПоля, ИсточникиДанных) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ИмяПоля = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией")
		И ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		
		ИмяФункциональнойОпции = "ИспользуютсяРаботыСДосрочнойПенсией";
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ИсторияИспользованияШтатногоРасписания", "ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией");
		
	Иначе
		ИмяФункциональнойОпции = "";
	КонецЕсли; 
	
	Если ПустаяСтрока(ИмяФункциональнойОпции) Тогда
		ИмяФункциональнойОпции = КадровыйУчетБазовый.ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(ИмяПоля, ИсточникиДанных);
	КонецЕсли; 
	
	Возврат ИмяФункциональнойОпции;
	
КонецФункции

Процедура ДобавитьТекстыЗапросовВТСведенийЗависящихОтФункциональныхОпцийОрганизаций(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	
	
КонецПроцедуры

// Расширение базовых кадровых данных.

Функция НеобходимыСведенияТекущихКадровыхДанныхСотрудников(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТекущаяДолжностьПоШтатномуРасписанию") 
		Или ИмяПоля = ВРег("ТекущийВидДоговора")
		Или ИмяПоля = ВРег("ТекущаяТерритория")
		Или КадровыйУчетБазовый.НеобходимыСведенияТекущихКадровыхДанныхСотрудников(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийТекущихКадровыхДанныхСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ТекущаяДолжностьПоШтатномуРасписанию") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжностьПоШтатномуРасписанию, ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущийВидДоговора") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущаяТерритория") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяТерритория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка))";
	Иначе
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийТекущихКадровыхДанныхСотрудников(ИмяПоля);
	КонецЕсли;
			
	Возврат ПутьКДанным;

КонецФункции

Функция НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТекущийФОТ")
		Или ИмяПоля = ВРег("ТекущаяНадбавка")
		Или КадровыйУчетБазовый.НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийТекущихТарифныхСтавокСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ТекущийФОТ") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийФОТ, 0)";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущаяНадбавка") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяНадбавка, 0)";
		
	Иначе
		
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийТекущихТарифныхСтавокСотрудников(ИмяПоля);
		
	КонецЕсли;
		
	Возврат ПутьКДанным;
	
КонецФункции

Функция НеобходимыСведенияПриказаОПриеме(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПриказОПриемеДатаЗавершенияТрудовогоДоговора")
		Или ИмяПоля = ВРег("КраткосрочныйТрудовойДоговор")
		Или КадровыйУчетБазовый.НеобходимыСведенияПриказаОПриеме(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийПриказаОПриемеОбУвольнении(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеДатаЗавершенияТрудовогоДоговора") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ПриказыОПриеме.СрочныйДоговор = ЛОЖЬ
			|		ТОГДА ДАТАВРЕМЯ(1,1,1)
			|		ИНАЧЕ ПриказыОПриеме.ДатаЗавершенияТрудовогоДоговора
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("КраткосрочныйТрудовойДоговор") Тогда
		
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА НЕ ПриказыОПриеме.Проведен
			|			ТОГДА ЛОЖЬ
			|		КОГДА ПриказыОПриеме.СрочныйДоговор = ЛОЖЬ
			|			ТОГДА ЛОЖЬ
			|		КОГДА ПриказыОПриеме.ДатаЗавершенияТрудовогоДоговора = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ЛОЖЬ
			|		КОГДА РАЗНОСТЬДАТ(ПриказыОПриеме.ДатаПриема, ПриказыОПриеме.ДатаЗавершенияТрудовогоДоговора, МЕСЯЦ) -
			|				ВЫБОР КОГДА ДЕНЬ(ПриказыОПриеме.ДатаПриема) > ДЕНЬ(ПриказыОПриеме.ДатаЗавершенияТрудовогоДоговора)
			|					ТОГДА 1
			|					ИНАЧЕ 0
			|				КОНЕЦ < 2
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ";
		
	Иначе
		
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийПриказаОПриемеОбУвольнении(ИмяПоля);

	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенийПриказовОПриеме(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОПриеме) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.Номер,
		|	ПриемНаРаботу.Дата,
		|	ПриемНаРаботу.Организация,
		|	ПриемНаРаботу.Подразделение,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.Должность,
		|	ПриемНаРаботу.ДолжностьПоШтатномуРасписанию,
		|	ПриемНаРаботу.ДатаПриема,
		|	ПриемНаРаботу.КоличествоСтавок,
		|	ПриемНаРаботу.ВидЗанятости,
		|	ПриемНаРаботу.ДлительностьИспытательногоСрока,
		|	ПриемНаРаботу.ГрафикРаботы,
		|	ПриемНаРаботу.СпособРасчетаАванса,
		|	ПриемНаРаботу.Аванс,
		|	ПриемНаРаботу.УсловияПриема,
		|	ПриемНаРаботу.Руководитель,
		|	ПриемНаРаботу.ДолжностьРуководителя,
		|	ПриемНаРаботу.НачисленияУтверждены,
		|	ПриемНаРаботу.СпособОтраженияЗарплатыВБухучете,
		|	ПриемНаРаботу.КатегорияЕСВ,
		|	ПриемНаРаботу.СтатьяФинансирования,
		|	ПриемНаРаботу.ИсправленныйДокумент,
		|	ПриемНаРаботу.ПорядокРасчетаСтоимостиЕдиницыВремени,
		|	ПриемНаРаботу.СовокупнаяТарифнаяСтавка,
		|	ПриемНаРаботу.ВидТарифнойСтавки,
		|	ПриемНаРаботу.РазрядКатегория,
		|	ПриемНаРаботу.ВидДоговора,
		|	ПриемНаРаботу.ТрудовойДоговорНомер,
		|	ПриемНаРаботу.ТрудовойДоговорДата,
		|	ПриемНаРаботу.СрочныйДоговор,
		|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора,
		|	ПриемНаРаботу.ОснованиеСрочногоДоговора,
		|	ПриемНаРаботу.СрокЗаключенияДоговора,
		|	ПриемНаРаботу.ОснованиеПредставителяНанимателя,
		|	ПриемНаРаботу.СпособПоступленияНаСлужбу,
		|	ПриемНаРаботу.ПоступлениеНаСлужбуВпервые,
		|	ПриемНаРаботу.ВидАктаГосоргана,
		|	ПриемНаРаботу.ОборудованиеРабочегоМеста,
		|	ПриемНаРаботу.ИныеУсловияДоговора,
		|	ПриемНаРаботу.Грейд,
		|	ПриемНаРаботу.Территория,
		|	ПриемНаРаботу.БронированиеПозиции,
		|	ПриемНаРаботу.Ответственный,
		|	ПриемНаРаботу.Комментарий,
		|	ПриемНаРаботу.Проведен,
		|	ПриемНаРаботу.РазрешениеНаРаботу,
		|	ПриемНаРаботу.РазрешениеНаПроживание,
		|	ПриемНаРаботу.УсловияОказанияМедпомощи
		|ПОМЕСТИТЬ ВТСведенийПриказовОПриеме
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО ПриемНаРаботу.Сотрудник = КадроваяИстория.Сотрудник
		|			И ПриемНаРаботу.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриемНаРаботуСписком.Ссылка,
		|	ПриемНаРаботуСписком.Ссылка.Номер,
		|	ПриемНаРаботуСписком.Ссылка.Дата,
		|	ПриемНаРаботуСписком.Ссылка.Организация,
		|	ПриемНаРаботуСписком.Подразделение,
		|	ПриемНаРаботуСписком.Сотрудник,
		|	ПриемНаРаботуСписком.ФизическоеЛицо,
		|	ПриемНаРаботуСписком.Должность,
		|	ПриемНаРаботуСписком.ДолжностьПоШтатномуРасписанию,
		|	ПриемНаРаботуСписком.ДатаПриема,
		|	ПриемНаРаботуСписком.КоличествоСтавок,
		|	ПриемНаРаботуСписком.ВидЗанятости,
		|	ПриемНаРаботуСписком.ДлительностьИспытательногоСрока,
		|	ПриемНаРаботуСписком.ГрафикРаботы,
		|	ПриемНаРаботуСписком.СпособРасчетаАванса,
		|	ПриемНаРаботуСписком.Аванс,
		|	ПриемНаРаботуСписком.УсловияПриема,
		|	ПриемНаРаботуСписком.Ссылка.Руководитель,
		|	ПриемНаРаботуСписком.Ссылка.ДолжностьРуководителя,
		|	ПриемНаРаботуСписком.Ссылка.НачисленияУтверждены,
		|	ПриемНаРаботуСписком.СпособОтраженияЗарплатыВБухучете,
		|	ПриемНаРаботуСписком.КатегорияЕСВ,
		|	ПриемНаРаботуСписком.СтатьяФинансирования,
		|	ПриемНаРаботуСписком.Ссылка.ИсправленныйДокумент,
		|	ПриемНаРаботуСписком.ПорядокРасчетаСтоимостиЕдиницыВремени,
		|	ПриемНаРаботуСписком.СовокупнаяТарифнаяСтавка,
		|	ПриемНаРаботуСписком.ВидТарифнойСтавки,
		|	ПриемНаРаботуСписком.РазрядКатегория,
		|	ПриемНаРаботуСписком.Ссылка.ВидДоговора,
		|	ПриемНаРаботуСписком.ТрудовойДоговорНомер,
		|	ПриемНаРаботуСписком.ТрудовойДоговорДата,
		|	ПриемНаРаботуСписком.СрочныйДоговор,
		|	ПриемНаРаботуСписком.ДатаЗавершенияТрудовогоДоговора,
		|	ПриемНаРаботуСписком.ОснованиеСрочногоДоговора,
		|	ПриемНаРаботуСписком.СрокЗаключенияДоговора,
		|	ПриемНаРаботуСписком.Ссылка.ОснованиеПредставителяНанимателя,
		|	ПриемНаРаботуСписком.СпособПоступленияНаСлужбу,
		|	ПриемНаРаботуСписком.ПоступлениеНаСлужбуВпервые,
		|	ПриемНаРаботуСписком.ВидАктаГосоргана,
		|	ПриемНаРаботуСписком.ОборудованиеРабочегоМеста,
		|	ПриемНаРаботуСписком.ИныеУсловияДоговора,
		|	ПриемНаРаботуСписком.Грейд,
		|	ПриемНаРаботуСписком.Территория,
		|	ПриемНаРаботуСписком.Ссылка.БронированиеПозиции,
		|	ПриемНаРаботуСписком.Ссылка.Ответственный,
		|	ПриемНаРаботуСписком.Ссылка.Комментарий,
		|	ПриемНаРаботуСписком.Ссылка.Проведен,
		|	ПриемНаРаботуСписком.РазрешениеНаРаботу,
		|	ПриемНаРаботуСписком.РазрешениеНаПроживание,
		|	ПриемНаРаботуСписком.УсловияОказанияМедпомощи
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботуСписком
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО ПриемНаРаботуСписком.Сотрудник = КадроваяИстория.Сотрудник
		|			И ПриемНаРаботуСписком.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадроваяИсторияСотрудников", ИмяВТКадроваяИсторияСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСведенийПриказовОПриеме", ИмяВТСведенийПриказовОПриеме);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСведенийПриказовОбУвольнении(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОбУвольнении) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Увольнение.Ссылка,
		|	Увольнение.Номер,
		|	Увольнение.Дата,
		|	Увольнение.ПериодРегистрации,
		|	Увольнение.Организация,
		|	Увольнение.ДатаУвольнения,
		|	Увольнение.Сотрудник,
		|	Увольнение.ФизическоеЛицо,
		|	Увольнение.СтатьяКЗоТ.СтатьяЗакона КАК СтатьяЗакона,
		|	Увольнение.СтатьяКЗОТ,
		|	Увольнение.ОснованиеУвольнения,
		|	Увольнение.ВыходноеПособие,
		|	Увольнение.ДнейЧасовВыходногоПособия,
		|	Увольнение.СуммированныйУчет,
		|	Увольнение.ДнейКомпенсацииУдержанияОтпуска,
		|	Увольнение.ПризнакКомпенсацииУдержанияОтпуска,
		|	Увольнение.ВидРасчетаКомпенсацииУдержанияОтпуска,
		|	Увольнение.РабочийГодС,
		|	Увольнение.РабочийГодПо,
		|	Увольнение.ПериодРасчетаСреднегоЗаработкаНачало,
		|	Увольнение.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	Увольнение.ФиксПериодРасчетаСреднегоЗаработка,
		|	Увольнение.СреднийЗаработок,
		|	Увольнение.СреднийЗаработокПоРабочимДням,
		|	Увольнение.СреднийЗаработокВыходногоПособия,
		|	Увольнение.ПорядокВыплаты,
		|	Увольнение.ПланируемаяДатаВыплаты,
		|	Увольнение.ИсправленныйДокумент,
		|	Увольнение.ДокументРассчитан,
		|	Увольнение.Рассчитал,
		|	Увольнение.ПредставлениеПериода,
		|	Увольнение.Руководитель,
		|	Увольнение.ДолжностьРуководителя,
		|	Увольнение.ГлавныйБухгалтер,
		|	Увольнение.Бухгалтер,
		|	Увольнение.РаботникКадровойСлужбы,
		|	Увольнение.ДолжностьРаботникаКадровойСлужбы,
		|	Увольнение.Исполнитель,
		|	Увольнение.ДолжностьИсполнителя,
		|	Увольнение.РасчетДенежногоСодержания,
		|	Увольнение.СохраняемоеДенежноеСодержание,
		|	Увольнение.МесячноеДенежноеСодержание,
		|	Увольнение.КоличествоМесяцевВыплатыДенежногоСодержания,
		|	Увольнение.ВидРасчетаМесячноеДенежноеСодержание,
		|	Увольнение.ДолжностьЗамещаласьМенее12Месяцев,
		|	Увольнение.ВидДоговора,
		|	Увольнение.Проведен
		|ПОМЕСТИТЬ ВТСведенийПриказовОбУвольнении
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО Увольнение.Сотрудник = КадроваяИстория.Сотрудник
		|			И Увольнение.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеСписком.Ссылка,
		|	УвольнениеСписком.Ссылка.Номер,
		|	УвольнениеСписком.Ссылка.Дата,
		|	УвольнениеСписком.Ссылка.ПериодРегистрации,
		|	УвольнениеСписком.Ссылка.Организация,
		|	УвольнениеСписком.ДатаУвольнения,
		|	УвольнениеСписком.Сотрудник,
		|	УвольнениеСписком.ФизическоеЛицо,
		|	УвольнениеСписком.СтатьяКЗОТ.СтатьяЗакона,
		|	УвольнениеСписком.СтатьяКЗОТ,
		|	УвольнениеСписком.ОснованиеУвольнения,
		|	УвольнениеСписком.ВыходноеПособие,
		|	УвольнениеСписком.ДнейЧасовВыходногоПособия,
		|	УвольнениеСписком.СуммированныйУчет,
		|	УвольнениеСписком.ДнейКомпенсацииУдержанияОтпуска,
		|	УвольнениеСписком.ПризнакКомпенсацииУдержанияОтпуска,
		|	УвольнениеСписком.ВидРасчетаКомпенсацииУдержанияОтпуска,
		|	УвольнениеСписком.РабочийГодС,
		|	УвольнениеСписком.РабочийГодПо,
		|	УвольнениеСписком.ПериодРасчетаСреднегоЗаработкаНачало,
		|	УвольнениеСписком.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	УвольнениеСписком.ФиксПериодРасчетаСреднегоЗаработка,
		|	УвольнениеСписком.СреднийЗаработок,
		|	УвольнениеСписком.СреднийЗаработокПоРабочимДням,
		|	УвольнениеСписком.СреднийЗаработокВыходногоПособия,
		|	УвольнениеСписком.Ссылка.ПорядокВыплаты,
		|	УвольнениеСписком.Ссылка.ПланируемаяДатаВыплаты,
		|	УвольнениеСписком.Ссылка.ИсправленныйДокумент,
		|	УвольнениеСписком.Ссылка.ДокументРассчитан,
		|	УвольнениеСписком.Ссылка.Рассчитал,
		|	УвольнениеСписком.Ссылка.ПредставлениеПериода,
		|	УвольнениеСписком.Ссылка.Руководитель,
		|	УвольнениеСписком.Ссылка.ДолжностьРуководителя,
		|	УвольнениеСписком.Ссылка.ГлавныйБухгалтер,
		|	УвольнениеСписком.Ссылка.Бухгалтер,
		|	УвольнениеСписком.Ссылка.РаботникКадровойСлужбы,
		|	УвольнениеСписком.Ссылка.ДолжностьРаботникаКадровойСлужбы,
		|	УвольнениеСписком.Ссылка.Исполнитель,
		|	УвольнениеСписком.Ссылка.ДолжностьИсполнителя,
		|	УвольнениеСписком.РасчетДенежногоСодержания,
		|	УвольнениеСписком.СохраняемоеДенежноеСодержание,
		|	УвольнениеСписком.МесячноеДенежноеСодержание,
		|	УвольнениеСписком.КоличествоМесяцевВыплатыДенежногоСодержания,
		|	УвольнениеСписком.ВидРасчетаМесячноеДенежноеСодержание,
		|	УвольнениеСписком.ДолжностьЗамещаласьМенее12Месяцев,
		|	УвольнениеСписком.Ссылка.ВидДоговора,
		|	УвольнениеСписком.Ссылка.Проведен
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСписком
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО УвольнениеСписком.Сотрудник = КадроваяИстория.Сотрудник
		|			И УвольнениеСписком.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадроваяИсторияСотрудников", ИмяВТКадроваяИсторияСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСведенийПриказовОбУвольнении", ИмяВТСведенийПриказовОбУвольнении);
	
	Возврат Запрос;
	
КонецФункции

Функция НеобходимыСведенияКадровойИсторииСотрудников(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	НеобходимыСведения = ИмяПоля = ВРег("ДолжностьПоШтатномуРасписанию")
		Или ИмяПоля = ВРег("ТарифнаяСетка")
		Или ИмяПоля = ВРег("ТарифнаяСеткаНадбавки")
		Или ИмяПоля = ВРег("ВидДоговора")
		Или ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(ИмяПоля);
		
	Если Не НеобходимыСведения
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
		И ПолучитьФункциональнуюОпцию("ИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассыДолжностейИПрофессий") Тогда
		
		НеобходимыСведения = ПолеСведенийОРазрядахКатегориях(ИмяПоля);
		
	КонецЕсли; 
	
	Если Не НеобходимыСведения Тогда
		НеобходимыСведения = КадровыйУчетБазовый.НеобходимыСведенияКадровойИсторииСотрудников(ИмяПоля);
	КонецЕсли; 
	
	Возврат НеобходимыСведения;
	
КонецФункции

Функция ПутьКДаннымСведенийКадровойИсторииСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("КоличествоСтавок")
		Или ИмяПоляВВерхнемРегистре = ВРег("ДолжностьПоШтатномуРасписанию")
		Или ИмяПоляВВерхнемРегистре = ВРег("ВидДоговора")
		Или ИмяПоляВВерхнемРегистре = ВРег("ПринятНаНовоеРабочееМесто")
		Или ИмяПоляВВерхнемРегистре = ВРег("ДатаСозданияРабочегоМеста") 
		Тогда
		
		ПутьКДанным = "	КадроваяИсторияСотрудников." + ИмяПоля;
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТарифнаяСетка") Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
			ПутьКДанным = "	ВЫРАЗИТЬ(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).ТарифнаяСетка КАК Справочник.ТарифныеСетки)";
		Иначе
			ПутьКДанным = "	ВЫРАЗИТЬ(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.Должность КАК Справочник.Должности).ТарифнаяСетка КАК Справочник.ТарифныеСетки)";
		КонецЕсли;
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТарифнаяСеткаНадбавки") Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
			ПутьКДанным = "	ВЫРАЗИТЬ(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).ТарифнаяСеткаНадбавки КАК Справочник.ТарифныеСетки)";
		Иначе
			ПутьКДанным = "	ВЫРАЗИТЬ(ВЫРАЗИТЬ(КадроваяИсторияСотрудников.Должность КАК Справочник.Должности).ТарифнаяСеткаНадбавки КАК Справочник.ТарифныеСетки)";
		КонецЕсли;
		
	ИначеЕсли Не ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
		И ПолучитьФункциональнуюОпцию("ИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассыДолжностейИПрофессий")
		И ПолеСведенийОРазрядахКатегориях(ИмяПоляВВерхнемРегистре) Тогда
			
		Если ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегорияПериодРегистрации") Тогда
			ПутьКДанным = "	КадроваяИсторияСотрудников.ПериодЗаписи";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегорияРегистратор") Тогда
			ПутьКДанным = "	КадроваяИсторияСотрудников.Регистратор";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегория") Тогда
			ПутьКДанным = "	ВЫРАЗИТЬ(КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).РазрядКатегория";
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба")
			И ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").НеобходимыСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(ИмяПоля) Тогда
			
		ПутьКДанным = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").ПутьКДаннымСведенийОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(ИмяПоля);
		
	Иначе
		
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийКадровойИсторииСотрудников(ИмяПоля);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") 
		И ИмяПоляВВерхнемРегистре <> ВРег("ПринятНаНовоеРабочееМесто")
		И ИмяПоляВВерхнемРегистре <> ВРег("ДатаСозданияРабочегоМеста")
		Тогда
		
		ПутьКДанным =
			"	ВЫБОР
			|		КОГДА ТаблицаОтборовСотрудников.ГоловнойСотрудник = ТаблицаОтборовСотрудников.Сотрудник
			|			ТОГДА " + ПутьКДанным + "
			|		ИНАЧЕ " + СтрЗаменить(ПутьКДанным, "КадроваяИсторияСотрудников", "СостоянияПодработок") + "
			|	КОНЕЦ";
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияКадроваяИсторияСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных) Экспорт
	
	ПоляДанных = ИсточникиДанных.Получить("КадроваяИсторияСотрудников");
	Если ПоляДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТСведенияКадровойИсторияСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияКадровойИсторияСотрудников");
	КадровыйУчетБазовый.ДобавитьТекстЗапросаВТСведенияКадроваяИсторияСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТСведенияКадровойИсторияСотрудников);
	
	Если ИсточникиДанных.Получить("ИсторияИспользованияШтатногоРасписания") <> Неопределено Тогда
		
		ИмяВТПозицииШтатногоРасписания = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПозицииШтатногоРасписания");
		ЗапросВТ = УправлениеШтатнымРасписанием.ЗапросВТПозицииШтатногоРасписания(ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписания, ИмяВТСведенияКадровойИсторияСотрудников, Истина, "ДолжностьПоШтатномуРасписанию,Период");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
		
		ТекстыЗапросов = СтрРазделить(Запрос.Текст, ";");
		ТекстПоследнегоЗапроса = ТекстыЗапросов[ТекстыЗапросов.Количество() - 1];
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстПоследнегоЗапроса, 
			ЗапросВТ.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + ТекстПоследнегоЗапроса);
		
		Запрос.Текст = Запрос.Текст + Символы.ПС
			+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПозицииШтатногоРасписания + " КАК ИсторияИспользованияШтатногоРасписания
				|		ПО КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию = ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
				|			И КадроваяИсторияСотрудников.Период = ИсторияИспользованияШтатногоРасписания.Период}";
				
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
		
		ИмяВТСостоянияПодработок = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСостоянияПодработок");
		
		ЗапросВТ = ЗапросВТСведенияСостоянияПодработокСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСостоянияПодработок);
				
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
		
		Запрос.Текст = 
			ЗапросВТ.Текст
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
			
		Запрос.Текст = Запрос.Текст + Символы.ПС
			+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСостоянияПодработок + " КАК СостоянияПодработок
				|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СостоянияПодработок.Сотрудник
				|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СостоянияПодработок.Период}";
			
		Если ИсточникиДанных.Получить("ИсторияИспользованияШтатногоРасписания") <> Неопределено Тогда
			
			ИмяВТПозицииШтатногоРасписанияПодработок = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПозицииШтатногоРасписанияПодработок");
			ЗапросВТ = УправлениеШтатнымРасписанием.ЗапросВТПозицииШтатногоРасписания(ТолькоРазрешенные, ИмяВТПозицииШтатногоРасписанияПодработок, ИмяВТСведенияКадровойИсторияСотрудников, Истина, "ДолжностьПоШтатномуРасписанию,Период");
			
			ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
			
			ТекстыЗапросов = СтрРазделить(Запрос.Текст, ";");
			ТекстПоследнегоЗапроса = ТекстыЗапросов[ТекстыЗапросов.Количество() - 1];
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстПоследнегоЗапроса, 
				ЗапросВТ.Текст + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + ТекстПоследнегоЗапроса);
			
			Запрос.Текст = Запрос.Текст + Символы.ПС
				+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПозицииШтатногоРасписанияПодработок + " КАК ИсторияИспользованияШтатногоРасписанияПодработок
					|		ПО СостоянияПодработок.ДолжностьПоШтатномуРасписанию = ИсторияИспользованияШтатногоРасписанияПодработок.ПозицияШтатногоРасписания
					|			И СостоянияПодработок.Период = ИсторияИспользованияШтатногоРасписанияПодработок.Период}";
			
		КонецЕсли; 
		
	КонецЕсли; 
				
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").ДобавитьТекстЗапросаВТСведенияОКлассныхЧинахРангахДолжностейГосударственнойСлужбы(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	КонецЕсли; 
	
КонецПроцедуры

Функция НеобходимыСведенияОбОплатеТруда(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ОсновноеНачисление")
		Или ИмяПоля = ВРег("ПоказательТарифнойСтавки")
		Или КадровыйУчетБазовый.НеобходимыСведенияОбОплатеТруда(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийОбОплатеТруда(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ОсновноеНачисление") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников.ОсновноеНачисление";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПоказательТарифнойСтавки") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников.ПоказательТарифнойСтавки";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Надбавка") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников.Надбавка";
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымСведенийОбОплатеТруда(ИмяПоля);
	КонецЕсли; 
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения о территории

Функция ДобавитьПолеСведенийОТерриторияхСотрудников(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОТерриторияхСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОТерриторияхСотрудников", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОТерриторияхСотрудников(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОТерриторияхСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТерриторияПериодЗаписи")
		Или ИмяПоля = ВРег("ТерриторияРегистратор")
		Или ИмяПоля = ВРег("Территория")
		Или ИмяПоля = Врег("ТерриторияВыполненияРаботВОрганизации");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОТерриторияхСотрудников(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОТерриторияхСотрудников(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ТерриторияПериодЗаписи") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		ИначеЕсли ИмяПоля = ВРег("ТерриторияРегистратор") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Регистратор";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ТерриторииСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОТерриторияхСотрудников(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ТерриторияПериодЗаписи") Тогда
		ПутьКДанным = "	СведенияОТерриторияхСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТерриторияРегистратор") Тогда
		ПутьКДанным = "	СведенияОТерриторияхСотрудников.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Территория")
		Или ИмяПоляВВерхнемРегистре = ВРег("ТерриторияВыполненияРаботВОрганизации") Тогда
		ПутьКДанным = "	СведенияОТерриторияхСотрудников.Территория";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОТерриторияхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОТерриторияхСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТСведенияОТерриторияхСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОТерриторияхСотрудников");
	
	ЗапросВТ = ЗапросВТСведенияОТерриторияхСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОТерриторияхСотрудников);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОТерриторияхСотрудников + " КАК СведенияОТерриторияхСотрудников
			|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОТерриторияхСотрудников.Сотрудник
			|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОТерриторияхСотрудников.Период}";
				
КонецПроцедуры

// Сведения о графиках работы

Функция ДобавитьПолеСведенийОГрафикахРаботы(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОГрафикахРаботы(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОГрафикахРаботы", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОГрафикахРаботы(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОГрафикахРаботы(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ГрафикРаботыПериодРегистрации")
		Или ИмяПоля = ВРег("ГрафикРаботыРегистратор")
		Или ИмяПоля = ВРег("ГрафикРаботы")
		Или ИмяПоля = ВРег("СуммированныйУчетРабочегоВремени");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОГрафикахРаботыСотрудников(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОГрафикахРаботы(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ГрафикРаботыПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		ИначеЕсли ИмяПоля = ВРег("ГрафикРаботыРегистратор") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Регистратор";
		ИначеЕсли ИмяПоля = ВРег("СуммированныйУчетРабочегоВремени") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ГрафикРаботы.СуммированныйУчетРабочегоВремени";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ГрафикРаботыСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОГрафикахРаботы(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ГрафикРаботыПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОГрафикахРаботы.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ГрафикРаботыРегистратор") Тогда
		ПутьКДанным = "	СведенияОГрафикахРаботы.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ГрафикРаботы") Тогда
		ПутьКДанным = "	СведенияОГрафикахРаботы.ГрафикРаботы";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СуммированныйУчетРабочегоВремени") Тогда
		ПутьКДанным = "	ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).СуммированныйУчетРабочегоВремени";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОГрафикахРаботы(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОГрафикахРаботы") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТСведенияОГрафикахРаботы = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОГрафикахРаботы");
	
	ЗапросВТ = ЗапросВТСведенияОГрафикахРаботы(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОГрафикахРаботы);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОГрафикахРаботы + " КАК СведенияОГрафикахРаботы
			|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОГрафикахРаботы.Сотрудник
			|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОГрафикахРаботы.Период}";
				
КонецПроцедуры

// Сведения о доле неполного рабочего времени

Функция ДобавитьПолеСведенийОДолеНеполногоРабочегоВремениСотрудников(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОДолеНеполногоРабочегоВремениСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОГрафикахРаботы", Истина);
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "КоличествоСтавок");
		
		ПутьКДанным = ПутьКДаннымСведенийОДолеНеполногоРабочегоВремени(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОДолеНеполногоРабочегоВремениСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	Возврат ИмяПоля = ВРег("ДоляНеполногоРабочегоВремени");
		
КонецФункции

Функция ПутьКДаннымСведенийОДолеНеполногоРабочегоВремени(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ДоляНеполногоРабочегоВремени") Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
			
			ПутьКДанным =
				"	ВЫБОР
				|		КОГДА ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели ЕСТЬ NULL
				|			ТОГДА ВЫБОР
				|				КОГДА ТаблицаОтборовСотрудников.ГоловнойСотрудник = ТаблицаОтборовСотрудников.Сотрудник
				|					ТОГДА КадроваяИсторияСотрудников.КоличествоСтавок
				|				ИНАЧЕ СостоянияПодработок.КоличествоСтавок
				|			КОНЕЦ
				|		КОГДА ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / 
				|			ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели = 1
				|			ТОГДА ВЫБОР
				|				КОГДА ТаблицаОтборовСотрудников.ГоловнойСотрудник = ТаблицаОтборовСотрудников.Сотрудник
				|					ТОГДА КадроваяИсторияСотрудников.КоличествоСтавок
				|				ИНАЧЕ СостоянияПодработок.КоличествоСтавок
				|			КОНЕЦ
				|		ИНАЧЕ
				|			ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / 
				|				ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
				|	КОНЕЦ";
			
		Иначе
			
			ПутьКДанным =
				"	ВЫБОР
				|		КОГДА ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели ЕСТЬ NULL
				|			ТОГДА КадроваяИсторияСотрудников.КоличествоСтавок
				|		КОГДА ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / 
				|			ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели = 1
				|			ТОГДА КадроваяИсторияСотрудников.КоличествоСтавок
				|		ИНАЧЕ
				|			ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / 
				|				ВЫРАЗИТЬ(СведенияОГрафикахРаботы.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
				|	КОНЕЦ";
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения о разрядах, категориях сотрудников.

Функция ДобавитьПолеСведенийОРазрядахКатегориях(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОРазрядахКатегориях(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОРазрядахКатегориях", Истина);
		
		ПутьКДанным = ПутьКСведениямОРазрядахКатегориях(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОРазрядахКатегориях(Знач ИмяПоля)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассыДолжностейИПрофессий") Тогда
		
		Возврат ПолеСведенийОРазрядахКатегориях(ИмяПоля);
		
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

Функция ПолеСведенийОРазрядахКатегориях(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("РазрядКатегорияПериодРегистрации")
		Или ИмяПоля = ВРег("РазрядКатегорияРегистратор")
		Или ИмяПоля = ВРег("РазрядКатегория");
			
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОРазрядахКатегориях(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если ПолеСведенийОРазрядахКатегориях(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("РазрядКатегорияПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		ИначеЕсли ИмяПоля = ВРег("РазрядКатегорияРегистратор") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Регистратор";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.РазрядыКатегорииСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКСведениямОРазрядахКатегориях(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегорияПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОРазрядахКатегориях.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегорияРегистратор") Тогда
		ПутьКДанным = "	СведенияОРазрядахКатегориях.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РазрядКатегория") Тогда
		ПутьКДанным = "	СведенияОРазрядахКатегориях.РазрядКатегория";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОРазрядахКатегориях(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОРазрядахКатегориях") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТСведенияОРазрядахКатегориях = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОРазрядахКатегориях");
	
	ЗапросВТ = ЗапросВТСведенияОРазрядахКатегориях(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОРазрядахКатегориях);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОРазрядахКатегориях + " КАК СведенияОРазрядахКатегориях
			|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОРазрядахКатегориях.Сотрудник
			|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОРазрядахКатегориях.Период}";
				
КонецПроцедуры

Функция ДобавитьПолеСведенийОПКУ(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПКУ(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПКУ", Истина);
		
		ПутьКДанным = ПутьКСведениямОПКУ(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОПКУ(Знач ИмяПоля)
	
	Возврат ПолеСведенийОПКУ(ИмяПоля);
		
КонецФункции

Функция ПолеСведенийОПКУ(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПКУПериодРегистрации")
		Или ИмяПоля = ВРег("ПКУРегистратор")
		Или ИмяПоля = ВРег("ПКУ");
			
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОПКУ(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если ПолеСведенийОПКУ(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ПКУПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		ИначеЕсли ИмяПоля = ВРег("ПКУРегистратор") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Регистратор";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ПКУСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКСведениямОПКУ(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ПКУПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОПКУ.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПКУРегистратор") Тогда
		ПутьКДанным = "	СведенияОПКУ.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПКУ") Тогда
		ПутьКДанным = "	СведенияОПКУ.ПКУ";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОПКУ(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОПКУ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТСведенияОПКУ = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОПКУ");
	
	ЗапросВТ = ЗапросВТСведенияОПКУ(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОПКУ);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОПКУ + " КАК СведенияОПКУ
			|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОПКУ.Сотрудник
			|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОПКУ.Период}";
				
КонецПроцедуры

// Сведения о состоянии

Функция ДобавитьПолеСведенийОСостоянииСотрудников(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОСостоянииСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОСостоянииСотрудников", Истина);
		
		ПутьКДанным = ПутьКСведениямОСостоянииСотрудников(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОСостоянииСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СостояниеПериодРегистрации")
		Или ИмяПоля = ВРег("Состояние");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОСостоянииСотрудников(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОСостоянииСотрудников(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("РазрядКатегорияПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.СостоянияСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКСведениямОСостоянииСотрудников(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("СостояниеПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОСостоянииСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Состояние") Тогда
		ПутьКДанным = "	СведенияОСостоянииСотрудников.Состояние";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции
	
Процедура ДобавитьТекстЗапросаВТСведенийОСостоянииСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОСостоянииСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТСведенияОСостоянииСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОСостоянииСотрудников");
	
	ЗапросВТ = ЗапросВТСведенияОСостоянииСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОСостоянииСотрудников);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОСостоянииСотрудников + " КАК СведенияОСостоянииСотрудников
			|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОСостоянииСотрудников.Сотрудник
			|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОСостоянииСотрудников.Период}";
			
КонецПроцедуры

// Сведения о подработках

Функция ДобавитьПолеСведенийОПодработкахСотрудников(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПодработкахСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		
		НеобходимыСведенияОНазначенииПодработок = НеобходимыСведенияОНазначенииПодработки(ИмяПоля);
		
		НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОПодработкахСотрудников");
		Если НеобходимыеСведения = Неопределено Тогда
			НеобходимыеСведения = Новый Структура("НеобходимыСведенияОНазначенииПодработок,НеобходимыСведенияОПрекращенииПодработок", Ложь, Ложь);
		КонецЕсли; 
		
		Если НеобходимыСведенияОНазначенииПодработок Тогда
			НеобходимыеСведения.НеобходимыСведенияОНазначенииПодработок = Истина;
		Иначе
			НеобходимыеСведения.НеобходимыСведенияОПрекращенииПодработок = Истина;
		КонецЕсли;
		
		ИсточникиДанных.Вставить("СведенияОПодработкахСотрудников", НеобходимыеСведения);
		
		ПутьКДанным = ПутьКСведениямОПодработкахСотрудников(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОПодработкахСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат НеобходимыСведенияОНазначенииПодработки(ИмяПоля)
		Или ИмяПоля = ВРег("ПрекращениеПодработки");
		
КонецФункции

Функция НеобходимыСведенияОНазначенииПодработки(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("НазначениеПодработки");
		
КонецФункции

Функция ПутьКСведениямОПодработкахСотрудников(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("НазначениеПодработки") Тогда
		ПутьКДанным = "	СведенияОНазначенииПодработок.ДокументОснование";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПрекращениеПодработки") Тогда
		ПутьКДанным = "	СведенияОПрекращенииПодработок.ДокументОснование";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОПодработкахСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОПодработкахСотрудников");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТИзмеренияДатыДляТаблицыПодработок = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТИзмеренияДатыДляТаблицыПодработок");
	ИмяВТСведенияОПодработкахСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОПодработкахСотрудников");
		
	ПараметрыПолучения = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(
		ИмяВТИзмеренияДатыДляТаблицыПодработок);
		
	ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Ложь;
	ПараметрыПолучения.ПодработкиРаботниковПоТрудовымДоговорам = Истина;
	
	ЗапросВТРабочиеМеста = КадровыйУчет.ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(
		ТолькоРазрешенные, ИмяВТСведенияОПодработкахСотрудников, ПараметрыПолучения);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТРабочиеМеста);
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзмеренияДаты." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " КАК Сотрудник,
		|	ДАТАВРЕМЯ(1,1,1) КАК НачалоПериода,
		|	ДАТАВРЕМЯ(1,1,1) КАК ОкончаниеПериода
		|ПОМЕСТИТЬ " + ИмяВТИзмеренияДатыДляТаблицыПодработок + "
		|ИЗ
		|	" + ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников + " КАК ИзмеренияДаты"
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ЗапросВТРабочиеМеста.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
	
	Если НеобходимыеСведения.НеобходимыСведенияОНазначенииПодработок Тогда
		
		Запрос.Текст = Запрос.Текст + Символы.ПС
			+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОПодработкахСотрудников + " КАК СведенияОНазначенииПодработок
				|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОНазначенииПодработок.Сотрудник
				|			И (СведенияОНазначенииПодработок.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))}";
			
	КонецЕсли;
	
	Если НеобходимыеСведения.НеобходимыСведенияОПрекращенииПодработок Тогда
		
		Запрос.Текст = Запрос.Текст + Символы.ПС
			+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОПодработкахСотрудников + " КАК СведенияОПрекращенииПодработок
				|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОПрекращенииПодработок.Сотрудник
				|			И (СведенияОПрекращенииПодработок.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))}";
			
	КонецЕсли; 
		
КонецПроцедуры

// Сведения о совокупных тарифных ставках

Функция ДобавитьПолеСведенийОСовокупныхТарифныхСтавках(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОСовокупныхТарифныхСтавках(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОСовокупныхТарифныхСтавках", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОСовокупныхТарифныхСтавках(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОСовокупныхТарифныхСтавках(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СовокупнаяТарифнаяСтавкаПериодРегистрации")
		Или ИмяПоля = ВРег("СовокупнаяТарифнаяСтавкаРегистратор")
		Или ИмяПоля = ВРег("СовокупнаяТарифнаяСтавка")
		Или ИмяПоля = ВРег("ВидСовокупнойТарифнойСтавки");
		
КонецФункции

Функция ПутьКДаннымСведенийОСовокупныхТарифныхСтавках(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("СовокупнаяТарифнаяСтавкаПериодРегистрации") Тогда
		ПутьКДанным = "ЗначенияСовокупныхТарифныхСтавокСотрудников.Период";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СовокупнаяТарифнаяСтавкаРегистратор") Тогда
		ПутьКДанным = "ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СовокупнаяТарифнаяСтавка") Тогда
		ПутьКДанным = "ЗначенияСовокупныхТарифныхСтавокСотрудников.Значение";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВидСовокупнойТарифнойСтавки") Тогда
		ПутьКДанным = "ЗначенияСовокупныхТарифныхСтавокСотрудников.ВидТарифнойСтавки";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОСовокупныхТарифныхСтавках(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	                                                                
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОСовокупныхТарифныхСтавках");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТСведенияОСовокупныхТарифныхСтавках = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОСовокупныхТарифныхСтавках");

	ЗапросВТ = ЗапросВТСведенияОСовокупныхТарифныхСтавках(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОСовокупныхТарифныхСтавках);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОСовокупныхТарифныхСтавках + " КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
			|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник
			|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ЗначенияСовокупныхТарифныхСтавокСотрудников.Период}";
			
КонецПроцедуры

// Сведения о месте выплаты зарплаты.

Функция ДобавитьПолеСведенийОМестеВыплатыЗарплаты(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОМестеВыплатыЗарплаты(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОМестеВыплатыЗарплаты", Истина);
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "Организация");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "Подразделение");
		
		ПутьКДанным = ПутьКДаннымСведенийОМестеВыплатыЗарплаты(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОМестеВыплатыЗарплаты(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВладелецМестаВыплаты")
		Или ИмяПоля = ВРег("ВидМестаВыплаты")
		Или ИмяПоля = ВРег("МестоВыплаты");
		
КонецФункции

Функция ПутьКДаннымСведенийОМестеВыплатыЗарплаты(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ВладелецМестаВыплаты") Тогда
		ПутьКДанным = 
			"	ВЫБОР КОГДА МестаВыплатыЗарплатыСотрудников.Сотрудник ЕСТЬ NULL
			|		ТОГДА ВЫБОР КОГДА МестаВыплатыЗарплатыПодразделений.Подразделение ЕСТЬ NULL
			|				ТОГДА МестаВыплатыЗарплатыОрганизаций.Организация
			|				ИНАЧЕ МестаВыплатыЗарплатыПодразделений.Подразделение
			|			КОНЕЦ
			|		ИНАЧЕ МестаВыплатыЗарплатыСотрудников.Сотрудник
			|	КОНЕЦ";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВидМестаВыплаты") Тогда
		ПутьКДанным =
			"	ВЫБОР КОГДА МестаВыплатыЗарплатыСотрудников.Сотрудник ЕСТЬ NULL
			|		ТОГДА ВЫБОР КОГДА МестаВыплатыЗарплатыПодразделений.Подразделение ЕСТЬ NULL
			|				ТОГДА МестаВыплатыЗарплатыОрганизаций.Вид
			|				ИНАЧЕ МестаВыплатыЗарплатыПодразделений.Вид
			|			КОНЕЦ
			|		ИНАЧЕ МестаВыплатыЗарплатыСотрудников.Вид
			|	КОНЕЦ";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("МестоВыплаты") Тогда
		ПутьКДанным =
			"	ВЫБОР КОГДА МестаВыплатыЗарплатыСотрудников.Сотрудник ЕСТЬ NULL
			|		ТОГДА ВЫБОР КОГДА МестаВыплатыЗарплатыПодразделений.Подразделение ЕСТЬ NULL
			|				ТОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты
			|				ИНАЧЕ МестаВыплатыЗарплатыПодразделений.МестоВыплаты
			|			КОНЕЦ
			|		ИНАЧЕ МестаВыплатыЗарплатыСотрудников.МестоВыплаты
			|	КОНЕЦ";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТМестаВыплатыЗарплатыСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОМестеВыплатыЗарплаты");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТМестаВыплатыЗарплатыСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТМестаВыплатыЗарплатыСотрудников");
	
	ЗапросМестВыплаты =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборовСотрудников.Сотрудник,
		|	МестаВыплатыЗарплатыСотрудников.Вид,
		|	МестаВыплатыЗарплатыСотрудников.МестоВыплаты
		|ПОМЕСТИТЬ ВТМестаВыплатыЗарплатыСотрудников
		|ИЗ
		|	ВТСотрудникиПериоды КАК ТаблицаОтборовСотрудников
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
		|		ПО ТаблицаОтборовСотрудников.Сотрудник = МестаВыплатыЗарплатыСотрудников.Сотрудник}";
		
	ЗапросМестВыплаты = СтрЗаменить(ЗапросМестВыплаты, "ВТМестаВыплатыЗарплатыСотрудников", ИмяВТМестаВыплатыЗарплатыСотрудников);
	ЗапросМестВыплаты = СтрЗаменить(ЗапросМестВыплаты, "ВТСотрудникиПериоды", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	ЗапросМестВыплаты = СтрЗаменить(ЗапросМестВыплаты, "ТаблицаОтборовСотрудников.Сотрудник", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	Запрос.Текст = 
		ЗапросМестВыплаты
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст
		+ "
			|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
			|	ПО (КадроваяИсторияСотрудников.Организация = МестаВыплатыЗарплатыОрганизаций.Организация)}
			|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыПодразделений КАК МестаВыплатыЗарплатыПодразделений
			|	ПО (КадроваяИсторияСотрудников.Подразделение = МестаВыплатыЗарплатыПодразделений.Подразделение)}
			|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТМестаВыплатыЗарплатыСотрудников + " КАК МестаВыплатыЗарплатыСотрудников
			|	ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = МестаВыплатыЗарплатыСотрудников.Сотрудник}";
		
КонецПроцедуры

// Сведения контракта, договора сотрудника.

Функция ДобавитьПолеСведенийКонтрактаДоговораСотрудника(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияКонтрактаДоговораСотрудника(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияКонтрактаДоговораСотрудника", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийКонтрактаДоговораСотрудника(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияКонтрактаДоговораСотрудника(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПредставительНанимателя")
		Или ИмяПоля = ВРег("ДолжностьПредставителяНанимателя")
		Или ИмяПоля = ВРег("ОснованиеПредставителя")
		Или ИмяПоля = ВРег("ВидАктаГосоргана")
		Или ИмяПоля = ВРег("ДатаОкончания")
		Или ИмяПоля = ВРег("СрочныйДоговор")
		Или ИмяПоля = ВРег("СрокЗаключенияДоговора")
		Или ИмяПоля = ВРег("ОборудованиеРабочегоМеста")
		Или ИмяПоля = ВРег("ИныеУсловияДоговора");
		
КонецФункции

Функция ПутьКДаннымСведенийКонтрактаДоговораСотрудника(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ПредставительНанимателя") Тогда
		ПутьКДанным = "	СведенияКонтрактаДоговораСотрудника.ПредставительНанимателя";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ДолжностьПредставителяНанимателя") Тогда
		ПутьКДанным = "	СведенияКонтрактаДоговораСотрудника.ДолжностьПредставителяНанимателя";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ОснованиеПредставителя") Тогда
		ПутьКДанным = "	СведенияКонтрактаДоговораСотрудника.ОснованиеПредставителяНанимателя";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВидАктаГосоргана") Тогда
		ПутьКДанным = "	СведенияКонтрактаДоговораСотрудника.ВидАктаГосоргана";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ДатаОкончания") Тогда
		ПутьКДанным = "	СведенияКонтрактаДоговораСотрудника.ДатаОкончания";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СрочныйДоговор") Тогда
		ПутьКДанным = "	СведенияКонтрактаДоговораСотрудника.СрочныйДоговор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СрокЗаключенияДоговора") Тогда
		ПутьКДанным = "	СведенияКонтрактаДоговораСотрудника.СрокЗаключенияДоговора";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ОборудованиеРабочегоМеста") Тогда
		ПутьКДанным = "	СведенияКонтрактаДоговораСотрудника.ОборудованиеРабочегоМеста";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ИныеУсловияДоговора") Тогда
		ПутьКДанным = "	СведенияКонтрактаДоговораСотрудника.ИныеУсловияДоговора";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияКонтрактаДоговораСотрудника(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	                                                                
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияКонтрактаДоговораСотрудника");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТСведенияКонтрактаДоговораСотрудника = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("СведенияКонтрактаДоговораСотрудника");

	ЗапросВТ = ЗапросВТСведенияКонтрактаДоговораСотрудника(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияКонтрактаДоговораСотрудника);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияКонтрактаДоговораСотрудника + " КАК СведенияКонтрактаДоговораСотрудника
			|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияКонтрактаДоговораСотрудника.Сотрудник
			|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияКонтрактаДоговораСотрудника.Период}";
			
КонецПроцедуры

// Основные данные контрактов, договоров сотрудников.

Функция ДобавитьПолеОсновныхДанныхКонтрактовДоговоровСотрудников(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбОсновныхДанныхКонтрактовДоговоровСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("ОсновныеДанныеКонтрактаДоговораСотрудника", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОбОсновныхДанныхКонтрактовДоговоровСотрудников(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОбОсновныхДанныхКонтрактовДоговоровСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ДатаДоговораКонтракта")
		Или ИмяПоля = ВРег("НомерДоговораКонтракта")
		Или ИмяПоля = ВРег("ТрудовойДоговорДата")
		Или ИмяПоля = ВРег("ТрудовойДоговорНомер")
		Или ИмяПоля = ВРег("ДатаНачала");
		
КонецФункции

Функция ПутьКДаннымСведенийОбОсновныхДанныхКонтрактовДоговоровСотрудников(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ДатаДоговораКонтракта")
		Или ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорДата") Тогда
		
		ПутьКДанным = "	ОсновныеДанныеКонтрактовДоговоровСотрудников.ДатаДоговораКонтракта";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("НомерДоговораКонтракта")
		Или ИмяПоляВВерхнемРегистре = ВРег("ТрудовойДоговорНомер") Тогда
		
		ПутьКДанным = "	ОсновныеДанныеКонтрактовДоговоровСотрудников.НомерДоговораКонтракта";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ДатаНачала") Тогда
		ПутьКДанным = "	ОсновныеДанныеКонтрактовДоговоровСотрудников.ДатаНачала";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТОсновныеДанныеКонтрактовДоговоровСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	                                                                
	НеобходимыеСведения = ИсточникиДанных.Получить("ОсновныеДанныеКонтрактаДоговораСотрудника");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТОсновныеДанныеКонтрактовДоговоровСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОсновныеДанныеКонтрактовДоговоровСотрудников");

	ЗапросВТ = ЗапросВТОсновныеДанныеКонтрактовДоговоровСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТОсновныеДанныеКонтрактовДоговоровСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТОсновныеДанныеКонтрактовДоговоровСотрудников + " КАК ОсновныеДанныеКонтрактовДоговоровСотрудников
			|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ОсновныеДанныеКонтрактовДоговоровСотрудников.Сотрудник
			|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ОсновныеДанныеКонтрактовДоговоровСотрудников.Период}";
			
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики)Экспорт
	
	//ВРЕМЕННО
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "3.0.1.0";
	//Обработчик.Процедура = "Справочники.ВидыСтажа.СоздатьВидыСтажаПоНастройкам";
	//Обработчик.НачальноеЗаполнение = Истина;
	//
	//Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СостояниеВБраке) Тогда
	//	Обработчик = Обработчики.Добавить();
	//	Обработчик.Процедура = "Справочники.СостояниеВБраке.НачальноеЗаполнение";
	//	Обработчик.ОбщиеДанные = Истина;
	//	Обработчик.НачальноеЗаполнение = Истина;
	//КонецЕсли;
	//
	//Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СостояниеВБраке) 
	//	И ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтепениЗнанияЯзыка)
	//	И ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтепениРодстваФизическихЛиц)
	//	И ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.УченыеЗвания)
	//	И ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.УченыеСтепени) Тогда
	//	Обработчик = Обработчики.Добавить();
	//	Обработчик.Версия = "3.0.4.8";
	//	Обработчик.Процедура = "КадровыйУчетРасширенный.ЗаполнитьКлассификаторы";
	//	Обработчик.НачальноеЗаполнение = Истина;
	//	Обработчик.ОбщиеДанные = Истина;
	//КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.0";
	Обработчик.Процедура = "КадровыйУчетРасширенный.НачальноеЗаполнениеВоинскихСоставовИЗваний";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.0";
	Обработчик.Процедура = "КадровыйУчетРасширенный.УстановитьФОИспользоватьКадровыйУчет";
	Обработчик.НачальноеЗаполнение = Истина;
	
	//ВРЕМЕННО
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "3.0.5.9";
	//Обработчик.Процедура = "Справочники.РазрядыКатегорииДолжностей.НачальноеЗаполнение";
	//Обработчик.НачальноеЗаполнение = Истина;
	

	//ВРЕМЕННО
	//Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ЯзыкиНародовМира) Тогда
	//	Обработчик = Обработчики.Добавить();
	//	Обработчик.Версия = "3.0.6.12";
	//	Обработчик.Процедура = "Справочники.ЯзыкиНародовМира.ЗаполнитьСправочникПоКлассификатору";
	//	Обработчик.НачальноеЗаполнение = Истина;
	//	Обработчик.ОбщиеДанные = Истина;
	//КонецЕсли;
	//
	//Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ВидыОбразованияФизическихЛиц) Тогда
	//	Обработчик = Обработчики.Добавить();
	//	Обработчик.Версия = "3.0.6.16";
	//	Обработчик.Процедура = "Справочники.ВидыОбразованияФизическихЛиц.НачальноеЗаполнение";
	//	Обработчик.НачальноеЗаполнение = Истина;
	//	Обработчик.ОбщиеДанные = Истина;
	//КонецЕсли;
	

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.10";
	Обработчик.Процедура = "КадровыйУчетРасширенный.НачальноеЗаполнениеВоинскихСоставовИЗваний";

КонецПроцедуры

Процедура ЗаполнитьКлассификаторы() Экспорт
	
	Справочники.СостояниеВБраке.НачальноеЗаполнение();
	Справочники.СтепениЗнанияЯзыка.НачальноеЗаполнение();
	Справочники.СтепениРодстваФизическихЛиц.НачальноеЗаполнение();
	Справочники.УченыеЗвания.НачальноеЗаполнение();
	Справочники.УченыеСтепени.НачальноеЗаполнение();
	
КонецПроцедуры

Процедура НачальноеЗаполнениеВоинскихСоставовИЗваний() Экспорт
	
	Справочники.ЗванияГражданскогоВоинскогоУчета.НачальноеЗаполнение();
	
КонецПроцедуры

Процедура УстановитьФОИспользоватьКадровыйУчет() Экспорт
	
	Если Константы.ИспользоватьКадровыйУчет.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
	Набор.Записать();
	
	Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
	Набор.Записать();
	
	Константы.ИспользоватьКадровыйУчет.Установить(Истина);
	
КонецПроцедуры

Процедура ПеренестиТекущиеВидыЗанятостиСправочниковВРегистр() Экспорт
	
	Запрос = Новый Запрос;
	
	// Кадровые приказы
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка,
		|	ВЫБОР
		|		КОГДА Сотрудники.УдалитьВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|		ИНАЧЕ Сотрудники.УдалитьВидЗанятости
		|	КОНЕЦ КАК ВидЗанятости
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ПриемНаРаботу.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	ПриемНаРаботу.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка,
		|	ВЫБОР
		|		КОГДА Сотрудники.УдалитьВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|		ИНАЧЕ Сотрудники.УдалитьВидЗанятости
		|	КОНЕЦ
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО КадровыйПеревод.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	КадровыйПеревод.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|	И КадровыйПеревод.ИзменитьПодразделениеИДолжность";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ВидЗанятости = Выборка.ВидЗанятости;
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Кадровая история сотрудников.
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КадроваяИсторияСотрудников.Сотрудник
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|	И КадроваяИсторияСотрудников.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Период,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
			|	КадроваяИсторияСотрудников.Сотрудник,
			|	КадроваяИсторияСотрудников.ГоловнаяОрганизация,
			|	ВЫРАЗИТЬ(КадроваяИсторияСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадроваяИсторияСотрудников.Организация,
			|	КадроваяИсторияСотрудников.Подразделение,
			|	КадроваяИсторияСотрудников.ВидСобытия,
			|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию,
			|	КадроваяИсторияСотрудников.КоличествоСтавок,
			|	КадроваяИсторияСотрудников.Должность,
			|	ВЫБОР
			|		КОГДА КадроваяИсторияСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
			|			ТОГДА ВЫБОР
			|					КОГДА Сотрудники.УдалитьВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
			|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
			|					ИНАЧЕ Сотрудники.УдалитьВидЗанятости
			|				КОНЕЦ
			|		ИНАЧЕ КадроваяИсторияСотрудников.ВидЗанятости
			|	КОНЕЦ КАК ВидЗанятости,
			|	КадроваяИсторияСотрудников.ДействуетДо,
			|	КадроваяИсторияСотрудников.ОрганизацияПоОкончании,
			|	КадроваяИсторияСотрудников.ПодразделениеПоОкончании,
			|	КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписаниюПоОкончании,
			|	КадроваяИсторияСотрудников.ДолжностьПоОкончании,
			|	КадроваяИсторияСотрудников.КоличествоСтавокПоОкончании,
			|	КадроваяИсторияСотрудников.ВидСобытияПоОкончании,
			|	ВЫБОР
			|		КОГДА КадроваяИсторияСотрудников.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
			|				И КадроваяИсторияСотрудников.ВидЗанятостиПоОкончании = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
			|			ТОГДА ВЫБОР
			|					КОГДА Сотрудники.УдалитьВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
			|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
			|					ИНАЧЕ Сотрудники.УдалитьВидЗанятости
			|				КОНЕЦ
			|		ИНАЧЕ КадроваяИсторияСотрудников.ВидЗанятостиПоОкончании
			|	КОНЕЦ КАК ВидЗанятостиПоОкончании,
			|	КадроваяИсторияСотрудников.ПервичныйДокумент
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО КадроваяИсторияСотрудников.Сотрудник = Сотрудники.Ссылка
			|ИТОГИ ПО
			|	Регистратор";
			
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.КадроваяИсторияСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			ВыборкаЗаписей = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЗаписей.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаЗаписей);
			КонецЦикла;
				
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитДопУпорядочиванияРазрядовДолжностей() Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РазрядыКатегорииДолжностей.Ссылка
	               |ИЗ
	               |	Справочник.РазрядыКатегорииДолжностей КАК РазрядыКатегорииДолжностей
	               |ГДЕ
	               |	РазрядыКатегорииДолжностей.РеквизитДопУпорядочивания = 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РазрядыКатегорииДолжностей.Наименование";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(РазрядыКатегорииДолжностей.РеквизитДопУпорядочивания) КАК ТекущееМаксимальноеЗначение
	               |ИЗ
	               |	Справочник.РазрядыКатегорииДолжностей КАК РазрядыКатегорииДолжностей";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	ТекущееМаксимальноеЗначение = Выборка.ТекущееМаксимальноеЗначение;
	
	Сч = 1;
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.РеквизитДопУпорядочивания = ТекущееМаксимальноеЗначение + Сч;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьВидыКонтактнойИнформацииФизическогоЛица() Экспорт
	
	// ТелефонМобильныйФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Истина;
	СвойстваВидаКИ.РедактированиеТолькоВДиалоге = Ложь;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	СвойстваВидаКИ.Порядок = 1;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	КадровыйУчетБазовый.ОбновитьВидыКонтактнойИнформацииПоПорядку(2);
	КадровыйУчетБазовый.ОбновитьПорядкиКонтактнойИнформации();
	
КонецПроцедуры

Процедура ОбновитьСобытияУвольнений(МенеджерВременныхТаблиц) Экспорт
	
	КадровыйУчетБазовый.ОбновитьСобытияУвольнений(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Плановые удержания
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Регистраторы.Период КАК Период,
		|	Регистраторы.Регистратор КАК Регистратор,
		|	ПлановыеУдержания.*
		|ИЗ
		|	РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ПлановыеУдержания.Регистратор = Регистраторы.Регистратор
		|ИТОГИ ПО
		|	Регистратор";
	
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		Набор = РегистрыСведений.ПлановыеУдержания.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		
		Выборка = ВыборкаПоРегистраторам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка, , "Период1,Регистратор1");
		КонецЦикла;
		
		Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
		
	КонецЦикла; 
	
	// Применение плановых начислений.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Регистраторы.Период КАК Период,
		|	Регистраторы.Регистратор КАК Регистратор,
		|	ПрименениеПлановыхНачислений.*
		|ИЗ
		|	РегистрСведений.ПрименениеПлановыхНачислений КАК ПрименениеПлановыхНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ПрименениеПлановыхНачислений.Регистратор = Регистраторы.Регистратор
		|ИТОГИ ПО
		|	Регистратор";
	
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		Набор = РегистрыСведений.ПрименениеПлановыхНачислений.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		
		Выборка = ВыборкаПоРегистраторам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка, , "Период1,Регистратор1");
		КонецЦикла;
		
		Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляПодбораСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Сотрудники = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьДанныеДляПодбораСотрудников(Сотрудники, Истина);
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Сотрудники = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник");
		РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьДанныеДляПодбораДоговорниковГПХ(Сотрудники, Истина);
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	Сотрудники.Наименование,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация,
		|	Сотрудники.ГоловнойСотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
		|		ПО Сотрудники.Ссылка = ДанныеДляПодбораСотрудников.Сотрудник
		|			И (НЕ ДанныеДляПодбораСотрудников.ПоДоговоруГПХ)
		|ГДЕ
		|	ДанныеДляПодбораСотрудников.Сотрудник ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураДанных = Новый Структура("Ссылка,Наименование,ФизическоеЛицо,ГоловнаяОрганизация,ГоловнойСотрудник");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
			РегистрыСведений.ДанныеДляПодбораСотрудников.ДобавитьДанныеНовогоСотрудника(СтруктураДанных);
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры


Функция ИмяОтбораПоКатегорииСтажа(КатегорияСтажа) Экспорт 
	
	Если КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Общий") Тогда 
		Возврат "ОбщийСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Северный") Тогда 
		Возврат "СеверныйСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.ВыслугаЛет") Тогда 
		Возврат "СтажНаНадбавкуЗаВыслугуЛетМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Непрерывный") Тогда 
		Возврат "НепрерывныйСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.ОбщийНаучноПедагогический") Тогда 
		Возврат "ОбщийНаучноПедагогическийСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Педагогический") Тогда 
		Возврат "ПедагогическийСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Прочее") Тогда 
		Возврат "ПрочийСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.Страховой") Тогда 
		Возврат "СтраховойСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.РасширенныйСтраховой") Тогда 
		Возврат "РасширенныйСтраховойСтажМесяцев";
	ИначеЕсли КатегорияСтажа = ПредопределенноеЗначение("Перечисление.КатегорииСтажа.ВыслугаЛетНаГосударственнойСлужбе") Тогда 
		Возврат "ВыслугаЛетНаГосударственнойСлужбеМесяцев";
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

// Функция рассчитывает списочную численность работников, 
// списочную численность женщин, списочную численность инвалидов на указанную дату.
//
// Параметры:
//		Организация
//		ДатаАктуальности
//
// Возвращаемое значение - Структура с полями ЧисленностьРаботников, ЧисленностьЖенщин, ЧисленностьИнвалидов.
//	
Функция СписочнаяЧисленностьРаботающих(Организация, ДатаАктуальности) Экспорт 
	
	ДанныеЧисленности = Новый Структура("ЧисленностьРаботников, ЧисленностьЖенщин, ЧисленностьИнвалидов", 0, 0, 0);
	СтатистикаПерсонала.СписочнаяЧисленностьРаботающих(Организация, ДатаАктуальности, ДанныеЧисленности);
	
	Возврат ДанныеЧисленности;
	
КонецФункции

Процедура ИнициализироватьОтложеннуюРегистрациюТекущихКадровыхДанных(Движения) Экспорт
	
	ЗарплатаКадрыРасширенный.УстановитьДополнительноеСвойствоДвижений(Движения, "ИспользоватьОтложеннуюРегистрациюВторичныхКадровыхДанных");
	
КонецПроцедуры

Функция ИспользуетсяОтложеннаяРегистрацияВторичныхКадровыхДанных(НаборЗаписей) Экспорт
	
	Используется = Ложь;
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ИспользоватьОтложеннуюРегистрациюВторичныхКадровыхДанных") Тогда
		Используется = (НаборЗаписей.ДополнительныеСвойства.ИспользоватьОтложеннуюРегистрациюВторичныхКадровыхДанных = Истина);
	КонецЕсли;
	
	Возврат Используется;
	
КонецФункции

Процедура ОбновитьВторичныеКадровыеДанныеСотрудников(НаборЗаписей) Экспорт
	
	Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		
		Если Не ИспользуетсяОтложеннаяРегистрацияВторичныхКадровыхДанных(НаборЗаписей) Тогда
			
			КадровыйУчетБазовый.ОбновитьВторичныеКадровыеДанныеСотрудников(НаборЗаписей);
			
			ОбновляемыеСотрудники = Новый Массив;
			Если НаборЗаписей.ДополнительныеСвойства.Свойство("СотрудникиДляОбновленияКадровыхДанных") Тогда
				ОбновляемыеСотрудники = НаборЗаписей.ДополнительныеСвойства.СотрудникиДляОбновленияКадровыхДанных;
			КонецЕсли;
			
			Если НаборЗаписей.ДополнительныеСвойства.Свойство("СотрудникиДляОбновленияДанныхОбОплатеТруда") Тогда
				
				Если ОбновляемыеСотрудники.Количество() = 0 Тогда
					ОбновляемыеСотрудники = НаборЗаписей.ДополнительныеСвойства.СотрудникиДляОбновленияДанныхОбОплатеТруда;
				Иначе
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						ОбновляемыеСотрудники, НаборЗаписей.ДополнительныеСвойства.СотрудникиДляОбновленияДанныхОбОплатеТруда, Истина);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбновляемыеСотрудники.Количество() > 0 Тогда
				РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьДанныеДляПодбораСотрудников(ОбновляемыеСотрудники);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьВторичныеКадровыеДанныеПриОтложеннойРегистрации(Движения) Экспорт
	
	СотрудникиДляОбновленияКадровыхДанных = Новый Массив;
	СотрудникиДляОбновленияДанныхОбОплатеТруда = Новый Массив;
	
	СохранитьДатыПриема = Ложь;
	
	Для каждого НаборЗаписей Из Движения Цикл
		
		Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
			
			Если ИспользуетсяОтложеннаяРегистрацияВторичныхКадровыхДанных(НаборЗаписей) Тогда
				
				Если НаборЗаписей.ДополнительныеСвойства.Свойство("СотрудникиДляОбновленияКадровыхДанных") Тогда
					
					Если НаборЗаписей.ДополнительныеСвойства.Свойство("СохранитьДатыПриема") Тогда
						
					КонецЕсли; 
					СохранитьДатыПриема = НаборЗаписей.ДополнительныеСвойства.Свойство("СохранитьДатыПриема");
					
					Если СотрудникиДляОбновленияКадровыхДанных.Количество() = 0 Тогда
						СотрудникиДляОбновленияКадровыхДанных = НаборЗаписей.ДополнительныеСвойства.СотрудникиДляОбновленияКадровыхДанных;
					Иначе
						
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
							СотрудникиДляОбновленияКадровыхДанных, НаборЗаписей.ДополнительныеСвойства.СотрудникиДляОбновленияКадровыхДанных, Истина);
							
					КонецЕсли;
					
				КонецЕсли;
					
				Если НаборЗаписей.ДополнительныеСвойства.Свойство("СотрудникиДляОбновленияДанныхОбОплатеТруда") Тогда
					
					Если СотрудникиДляОбновленияДанныхОбОплатеТруда.Количество() = 0 Тогда
						СотрудникиДляОбновленияДанныхОбОплатеТруда = НаборЗаписей.ДополнительныеСвойства.СотрудникиДляОбновленияДанныхОбОплатеТруда;
					Иначе
						
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
							СотрудникиДляОбновленияДанныхОбОплатеТруда, НаборЗаписей.ДополнительныеСвойства.СотрудникиДляОбновленияДанныхОбОплатеТруда, Истина);
							
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновляемыеСотрудники = Новый Массив;
	Если СотрудникиДляОбновленияКадровыхДанных.Количество() > 0 Тогда
		
		ОбновляемыеСотрудники = СотрудникиДляОбновленияКадровыхДанных;
		КадровыйУчет.ОбновитьТекущиеКадровыеДанныеСпискаСотрудников(СотрудникиДляОбновленияКадровыхДанных, СохранитьДатыПриема);
		
	КонецЕсли;
	
	Если СотрудникиДляОбновленияДанныхОбОплатеТруда.Количество() > 0 Тогда
		
		Если ОбновляемыеСотрудники.Количество() = 0 Тогда
			ОбновляемыеСотрудники = СотрудникиДляОбновленияДанныхОбОплатеТруда;
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ОбновляемыеСотрудники, СотрудникиДляОбновленияДанныхОбОплатеТруда, Истина);
			
		КонецЕсли;
		
		КадровыйУчет.ОбновитьТекущиеТарифныеСтавки(СотрудникиДляОбновленияДанныхОбОплатеТруда);
		
	КонецЕсли;
	
	Если ОбновляемыеСотрудники.Количество() > 0 Тогда
		РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьДанныеДляПодбораСотрудников(ОбновляемыеСотрудники);
	КонецЕсли;
	
КонецПроцедуры

Процедура АттестованныеРабочиеМестаЗаПериод(Запрос, Организация, ПериодНачало, ПериодОкончание) Экспорт
	
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("парамНачало", ПериодНачало);
	Запрос.УстановитьПараметр("парамКонец", ПериодОкончание);

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РабочиеМестаПериод.Подразделение КАК Подразделение,
	               |	РабочиеМестаПериод.РабочееМесто КАК РабочееМесто,
	               |	РабочиеМестаПериод.ОснованиеСпецСтажа КАК ОснованиеСпецСтажа,
	               |	РабочиеМестаПериод.ЕдиницаВремени КАК ЕдиницаВремени,
	               |	РабочиеМестаПериод.ГрафикНормы КАК ГрафикНормы,
	               |	ВЫБОР
	               |		КОГДА НЕ РабочиеМестаПериод.НачалосьРанее
	               |				И РабочиеМестаПериод.Сезонность
	               |				И РабочиеМестаПериод.Начало >= &парамНачало
	               |				И ЕСТЬNULL(РабочиеМестаПериод.Конец, ДОБАВИТЬКДАТЕ(&парамКонец, ДЕНЬ, 1)) <= &парамКонец
	               |			ТОГДА 1
	               |		КОГДА РабочиеМестаПериод.Сезонность
	               |				И ЕСТЬNULL(РабочиеМестаПериод.Конец, ДОБАВИТЬКДАТЕ(&парамКонец, ДЕНЬ, 1)) > &парамКонец
	               |			ТОГДА 2
	               |		КОГДА РабочиеМестаПериод.Сезонность
	               |				И ЕСТЬNULL(РабочиеМестаПериод.Конец, ДОБАВИТЬКДАТЕ(&парамКонец, ДЕНЬ, 1)) <= &парамКонец
	               |			ТОГДА 3
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Сезонность,
	               |	РабочиеМестаПериод.Приказ КАК Приказ,
	               |	РабочиеМестаПериод.Начало КАК Начало,
	               |	ВЫБОР
	               |		КОГДА РабочиеМестаПериод.Конец ЕСТЬ NULL 
	               |				ИЛИ РабочиеМестаПериод.Конец > &парамКонец
	               |			ТОГДА &парамКонец
	               |		ИНАЧЕ РабочиеМестаПериод.Конец
	               |	КОНЕЦ КАК Конец,
	               |	РабочиеМестаПериод.ПолФизическогоЛица,
	               |	РабочиеМестаПериод.ОграничениеПоПолу
	               |ПОМЕСТИТЬ ВТРабочиеМеста
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		РабочиеМестаНачало.РабочееМесто.Подразделение КАК Подразделение,
	               |		РабочиеМестаНачало.РабочееМесто КАК РабочееМесто,
	               |		РабочиеМестаНачало.ОснованиеСпецСтажа КАК ОснованиеСпецСтажа,
	               |		РабочиеМестаНачало.ЕдиницаВремени КАК ЕдиницаВремени,
	               |		РабочиеМестаНачало.ГрафикНормы КАК ГрафикНормы,
	               |		РабочиеМестаНачало.Сезонность КАК Сезонность,
	               |		РабочиеМестаНачало.Приказ КАК Приказ,
	               |		РабочиеМестаНачало.Начало КАК Начало,
	               |		РабочиеМестаНачало.НачалосьРанее КАК НачалосьРанее,
	               |		МИНИМУМ(РабочиеМеста.Период) КАК Конец,
	               |		РабочиеМеста.ОснованиеСпецСтажа.ОграничениеПоПолу КАК ОграничениеПоПолу,
	               |		РабочиеМеста.ОснованиеСпецСтажа.ПолФизическихЛиц КАК ПолФизическогоЛица
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			РабочиеМеста.РабочееМесто.Подразделение КАК Подразделение,
	               |			РабочиеМеста.РабочееМесто КАК РабочееМесто,
	               |			РабочиеМеста.ОснованиеСпецСтажа КАК ОснованиеСпецСтажа,
	               |			РабочиеМеста.ЕдиницаВремени КАК ЕдиницаВремени,
	               |			РабочиеМеста.ГрафикНормы КАК ГрафикНормы,
	               |			РабочиеМеста.Сезонность КАК Сезонность,
	               |			РабочиеМеста.Регистратор КАК Приказ,
	               |			&парамНачало КАК Начало,
	               |			ВЫБОР
	               |				КОГДА РабочиеМеста.Период < &парамНачало
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ КАК НачалосьРанее
	               |		ИЗ
	               |			РегистрСведений.РабочиеМестаДляУчетаСпецстажа.СрезПоследних(&парамНачало, ) КАК РабочиеМеста
	               |		ГДЕ
	               |			РабочиеМеста.Актуальность
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			РабочиеМеста.РабочееМесто.Подразделение,
	               |			РабочиеМеста.РабочееМесто,
	               |			РабочиеМеста.ОснованиеСпецСтажа,
	               |			РабочиеМеста.ЕдиницаВремени,
	               |			РабочиеМеста.ГрафикНормы,
	               |			РабочиеМеста.Сезонность,
	               |			РабочиеМеста.Регистратор,
	               |			РабочиеМеста.Период,
	               |			ЛОЖЬ
	               |		ИЗ
	               |			РегистрСведений.РабочиеМестаДляУчетаСпецстажа КАК РабочиеМеста
	               |		ГДЕ
	               |			РабочиеМеста.Актуальность
	               |			И РабочиеМеста.Период >= &парамНачало
	               |			И РабочиеМеста.Период <= &парамКонец) КАК РабочиеМестаНачало
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеМестаДляУчетаСпецстажа КАК РабочиеМеста
	               |			ПО РабочиеМестаНачало.РабочееМесто.Подразделение = РабочиеМеста.РабочееМесто.Подразделение
	               |				И РабочиеМестаНачало.РабочееМесто = РабочиеМеста.РабочееМесто
	               |				И РабочиеМестаНачало.ОснованиеСпецСтажа = РабочиеМеста.ОснованиеСпецСтажа
	               |				И РабочиеМестаНачало.Начало < РабочиеМеста.Период
	               |				И (НЕ РабочиеМеста.Актуальность)
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		РабочиеМестаНачало.Подразделение,
	               |		РабочиеМестаНачало.РабочееМесто,
	               |		РабочиеМестаНачало.ОснованиеСпецСтажа,
	               |		РабочиеМестаНачало.ЕдиницаВремени,
	               |		РабочиеМестаНачало.ГрафикНормы,
	               |		РабочиеМестаНачало.Сезонность,
	               |		РабочиеМестаНачало.Приказ,
	               |		РабочиеМестаНачало.Начало,
	               |		РабочиеМестаНачало.НачалосьРанее,
	               |		РабочиеМестаНачало.РабочееМесто.Подразделение,
	               |		РабочиеМеста.ОснованиеСпецСтажа.ОграничениеПоПолу,
	               |		РабочиеМеста.ОснованиеСпецСтажа.ПолФизическихЛиц) КАК РабочиеМестаПериод
	               |ГДЕ
	               |	РабочиеМестаПериод.Подразделение.Владелец = &Организация";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти
