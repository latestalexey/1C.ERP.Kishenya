
#Область ПрограммныйИнтерфейс

// Заполняет описателей профилей групп доступа, предназначенных для 
// работы с зарплатным и кадровым функционалом
// см. УправлениеДоступомПереопределяемый.ЗаполнитьПоставляемыеПрофилиГруппДоступа.
//
Процедура ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	ОписаниеПрофиля = ОписаниеПрофиляАудитор();
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	Если НЕ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		
		ОписаниеПрофиля = ОписаниеПрофиляКадровикБезДоступаКЗарплате();
		ОписанияПрофилей.Добавить(ОписаниеПрофиля);
		
		ОписаниеПрофиля = ОписаниеПрофиляКадровик();
		ОписанияПрофилей.Добавить(ОписаниеПрофиля);
		
		ОписаниеПрофиля = ОписаниеПрофиляСтаршийКадровик();
		ОписанияПрофилей.Добавить(ОписаниеПрофиля);
		
		ОписаниеПрофиля = ОписаниеПрофиляРасчетчик();
		ОписанияПрофилей.Добавить(ОписаниеПрофиля);
		
		ОписаниеПрофиля = ОписаниеПрофиляСтаршийРасчетчик();
		ОписанияПрофилей.Добавить(ОписаниеПрофиля);
		
		ОписаниеПрофиля = ОписаниеПрофиляТабельщик();
		ОписанияПрофилей.Добавить(ОписаниеПрофиля);
		
		ОписаниеПрофиля = ОписаниеПрофиляКадровикРасчетчик();
		ОписанияПрофилей.Добавить(ОписаниеПрофиля);
		
		ОписаниеПрофиля = ОписаниеПрофиляСтаршийКадровикРасчетчик();
		ОписанияПрофилей.Добавить(ОписаниеПрофиля);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнструментыРуководителя") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ИнструментыРуководителя");
			Модуль.ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
			Модуль.ЗаполнитьПоставляемыеПрофилиГруппДоступаПодсистемыСамообслуживание(ОписанияПрофилей, ПараметрыОбновления);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
			Модуль.ЗаполнитьПоставляемыеПрофилиГруппДоступаПодсистемыКлючевыеПоказателиЭффективности(ОписанияПрофилей, ПараметрыОбновления);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
			Модуль.ЗаполнитьПоставляемыеПрофилиГруппДоступаПодсистемыОбучениеРазвитие(ОписанияПрофилей, ПараметрыОбновления);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
			Модуль.ЗаполнитьПоставляемыеПрофилиГруппДоступаПодсистемыОхранаТруда(ОписанияПрофилей, ПараметрыОбновления);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
			Модуль.ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует список шаблонов заданий очереди.
//
// Параметры:
//  Шаблоны - Массив строк. В параметр следует добавить имена предопределенных
//   неразделенных регламентных заданий, которые должны использоваться в качестве
//   шаблонов для заданий очереди.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить("РасчетФОТНачисленийЗависящихОтСтажа");
	
КонецПроцедуры

// Процедура выполняет запись настроек программы и формирование плана видов расчета по настройкам,
// переданным в параметре Параметры.
//
// Параметры:
//  Параметры - структура, описание см ОписаниеПараметровНастройкиЗарплатаКадры.
//
Процедура ЗаписатьНастройкиЗарплатаКадры(Параметры) Экспорт
	
	Если Параметры.НастройкиШтатногоРасписания <> Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиШтатногоРасписания);
		Настройки.Записать();
	КонецЕсли;
	
	Если Параметры.НастройкиКадровогоУчета <> Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиКадровогоУчета.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиКадровогоУчета);
		Настройки.Записать();
	КонецЕсли;
	
	Если Параметры.НастройкиВоинскогоУчета <> Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиВоинскогоУчета.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиВоинскогоУчета);
		Настройки.Записать();
	КонецЕсли;
	
	Если Параметры.НастройкиРасчетаЗарплаты <> Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиРасчетаЗарплаты);
		Настройки.Записать();
	КонецЕсли;
	
	Если Параметры.НастройкиУчетаВремени <> Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиУчетаВремени.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиУчетаВремени);
		Настройки.Записать();
	КонецЕсли;
	
	Если Параметры.НастройкиЗаймовСотрудникам <> Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиЗаймовСотрудникам.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиЗаймовСотрудникам);
		Настройки.Записать();
	КонецЕсли;
	
	Если Параметры.НастройкиСтатистикиПерсонала <> Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиСтатистикиПерсонала.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиСтатистикиПерсонала);
		Настройки.Записать();
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.СформироватьПланВидовРасчетаПоНастройкам(Параметры.ПараметрыПланВидовРасчета);
	
КонецПроцедуры

// Функция возвращает структуру с описанием параметров для настройки подсистемы ЗарплатаКадры.
//
// Возвращаемое значение:
// Структура со свойствами, имеющими значение Неопределено:
//	* НастройкиРасчетаЗарплаты
//	* НастройкиКадровогоУчета
//	* НастройкиШтатногоРасписания.
//	* НастройкиВоинскогоУчета.
//	* НастройкиУчетаВремени
//	* НастройкиЗаймовСотрудникам.
//	* НастройкиСтатистикиПерсонала.
//	* ПараметрыПланВидовРасчета.
//
Функция ОписаниеПараметровНастройкиЗарплатаКадры() Экспорт

	Параметры = Новый Структура("
	|НастройкиРасчетаЗарплаты,
	|НастройкиКадровогоУчета,
	|НастройкиШтатногоРасписания,
	|НастройкиВоинскогоУчета,
	|НастройкиУчетаВремени,
	|НастройкиЗаймовСотрудникам,
	|НастройкиСтатистикиПерсонала,
	|ПараметрыПланВидовРасчета");
		
	Возврат Параметры;
	
КонецФункции

// Функция возвращает структуру с параметрами настройки подсистемы ЗарплатаКадры,
// которые можно использовать по умолчанию для максимального использования функционала подсистемы.
//
// Возвращаемое значение:
// Структура см описание ОписаниеПараметровНастройкиЗарплатаКадры, со свойствами:
//	* НастройкиРасчетаЗарплаты - структура, состав свойств соответствует ресурсам регистра сведений
//	                             НастройкиРасчетаЗарплатыРасширенный, может содержать не все ресурсы регистра.
//	* НастройкиКадровогоУчета  - структура, состав свойств соответствует ресурсам регистра сведений
//	                             НастройкиКадровогоУчета, может содержать не все ресурсы регистра.
//	* НастройкиШтатногоРасписания - структура, состав свойств соответствует ресурсам регистра сведений
//	                                НастройкиШтатногоРасписания, может содержать не все ресурсы регистра.
//	* НастройкиВоинскогоУчета - структура, состав свойств соответствует ресурсам регистра сведений
//	                            НастройкиВоинскогоУчета, может содержать не все ресурсы регистра.
//	* НастройкиУчетаВремени - структура, состав свойств соответствует ресурсам регистра сведений НастройкиУчетаВремени,
//								 может содержать не все ресурсы регистра.
//	* НастройкиЗаймовСотрудникам - структура, состав свойств соответствует ресурсам регистра сведений
//	                               НастройкиЗаймовСотрудникам, может содержать не все ресурсы регистра.
//	* НастройкиСтатистикиПерсонала - структура, состав свойств соответствует ресурсам регистра сведений
//	                                 НастройкиСтатистикиПерсонала, может содержать не все ресурсы регистра.
//	* ПараметрыПланВидовРасчет - структура, состав свойств см в описании
//	                             РасчетЗарплатыРасширенный.ОписаниеПараметровПланаВидовРасчета.
//
Функция ПараметрыНастройкиЗарплатаКадрыПоУмолчанию() Экспорт

	Параметры = ОписаниеПараметровНастройкиЗарплатаКадры();
	
	НастройкиСтатистикиПерсонала = Новый Структура;
	НастройкиСтатистикиПерсонала.Вставить("НастройкиСтатистикиПерсонала", Ложь);
	НастройкиСтатистикиПерсонала.Вставить("ФормаОтчетностиМониторингаРаботниковСоциальнойСферы", Неопределено);
	
	НастройкиЗаймовСотрудникам = Новый Структура;
	НастройкиЗаймовСотрудникам.Вставить("ИспользоватьЗаймыСотрудникам", Истина);
	
	НастройкиУчетаВремени = Новый Структура;
	НастройкиУчетаВремени.Вставить("УчитыватьНочныеЧасы", Истина);
	НастройкиУчетаВремени.Вставить("УчитыватьВечерниеЧасы", Истина);
	НастройкиУчетаВремени.Вставить("ИспользоватьНесколькоВидовПлановогоВремени", Ложь);
	НастройкиУчетаВремени.Вставить("УчитыватьВремяНаКормлениеРебенка", Ложь);
	
	НастройкиВоинскогоУчета = Новый Структура;
	НастройкиВоинскогоУчета.Вставить("ИспользоватьВоинскийУчет", Ложь);
	НастройкиВоинскогоУчета.Вставить("ИспользоватьБронированиеГраждан", Ложь);
	
	НастройкиШтатногоРасписания = Новый Структура;
	НастройкиШтатногоРасписания.Вставить("ИспользоватьШтатноеРасписание", Истина); 
	НастройкиШтатногоРасписания.Вставить("ИспользоватьВилкуСтавокВШтатномРасписании", Ложь);
	НастройкиШтатногоРасписания.Вставить("ИспользоватьИсториюИзмененияШтатногоРасписания", Ложь);
	НастройкиШтатногоРасписания.Вставить("ИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассыДолжностейИПрофессий", Ложь);
	НастройкиШтатногоРасписания.Вставить("ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически", Ложь);
	
	НастройкиКадровогоУчета = Новый Структура;
	НастройкиКадровогоУчета.Вставить("ИспользоватьРаботуНаНеполнуюСтавку", Истина);
	НастройкиКадровогоУчета.Вставить("ИспользоватьПереносОстатковОтпускаПриУвольненииПереводом", Истина);
	НастройкиКадровогоУчета.Вставить("КонтролироватьУникальностьТабельныхНомеров", Истина);
	
	НастройкиРасчетаЗарплаты = Новый Структура;
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьВыплатыБывшимСотрудникам", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьДоходыВНатуральнойФорме", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьДоплатуЗаДниБолезни", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьИндексациюЗаработка", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьИсполнительныеЛисты", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьМатериальнуюПомощь", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьНачисленияПоДоговорам", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОплатуКомандировок", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОплатуПраздничныхИВыходных", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОплатуПростоев", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОплатуСверхурочных", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОтпускаБезОплаты", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОтпускаУчебные", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьРегистрациюПрочихДоходов", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьСдельныйЗаработок", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьСовмещениеПрофессийДолжностей", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьПрочиеУдержанияВПользуТретьихЛиц", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьУдержанияВСчетРасчетовПоПрочимОперациям", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьУчетВремениСотрудниковВЧасах", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьУчетПрочихНевыходов", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ПорядокРасчетаСтоимостиЕдиницыВремени", Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОплатуДнейСдачиКрови", Истина);
	
	// Описание начислений
	ПараметрыПланаВидовРасчета = РасчетЗарплатыРасширенный.ОписаниеПараметровПланаВидовРасчета();
	
	Параметры.НастройкиСтатистикиПерсонала = НастройкиСтатистикиПерсонала;
	Параметры.НастройкиЗаймовСотрудникам   = НастройкиЗаймовСотрудникам;
	Параметры.НастройкиУчетаВремени   	   = НастройкиУчетаВремени;
	Параметры.НастройкиВоинскогоУчета      = НастройкиВоинскогоУчета;
	Параметры.НастройкиШтатногоРасписания  = НастройкиШтатногоРасписания;
	Параметры.НастройкиКадровогоУчета      = НастройкиКадровогоУчета;
	Параметры.НастройкиРасчетаЗарплаты     = НастройкиРасчетаЗарплаты;
	Параметры.ПараметрыПланВидовРасчета    = ПараметрыПланаВидовРасчета;
	
	Возврат Параметры;
	
КонецФункции

// Выполняет формирование сводных (помесячно) сведений о производственном календаре.
//
// Параметры:
//	- УсловияОбновления - таблица значений с колонками.
//		- КодПроизводственногоКалендаря - код производственного календаря, данные которого изменились,
//		- Год - год, за который изменились данные.
//
Процедура ОбновитьДанныеПроизводственныхКалендарейПомесячно(УсловияОбновления) Экспорт
	УчетРабочегоВремени.ОбновитьДанныеПроизводственныхКалендарейПомесячно(УсловияОбновления);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание профиля "Кадровик (без доступа к зарплате)".
//
Функция ОписаниеПрофиляКадровикБезДоступаКЗарплате() Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляКадровикБезДоступаКЗарплате();
	ОписаниеПрофиля.Наименование  = НСтр("ru='Кадровик (без доступа к зарплате)';uk='Кадровик (без доступу до зарплати)'");
	
	ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);

	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ВыводНаПринтерФайлБуферОбмена");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАттестацийСотрудников",						"ЗарплатаКадрыПриложения.АттестацииСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБольничныхЛистов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВоинскогоУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхСотрудниковРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхОбОбразованииФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаданий",										"СтандартныеПодсистемы.БизнесПроцессыИЗадачи");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокНаКомандировку", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокНаОтпуск", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКадровогоСостоянияРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОтгулов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСостоянийСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОплатыДнейУходаЗаДетьмиИнвалидами");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАнкетПерсУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОплатыПоСреднему");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОтпусков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПремийПоощрений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПростоев");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПрогуловНеявок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРаботыСверхурочноИВПраздники");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСовмещения");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСообщенийОбОтсутствии", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСообщенийОНеправильныхДанныхСотрудника", 		"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеВыполнениеЗадач",										"СтандартныеПодсистемы.БизнесПроцессыИЗадачи");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеДополнительныхСведений",								"СтандартныеПодсистемы.Свойства");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеРаботаСКадрами");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаОтчетыПоСотрудникам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаСтатистикаПерсонала");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СогласованиеЗаявокНаКомандировку", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СогласованиеЗаявокНаОтпуск", 									"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраЗначенийТарифов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраИсторииНачисленийШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраНачисленияУдержанияПоказатели");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраПлановыхАвансов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаЗаявокСотрудников", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаКадровыхДокументов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаОтсутствий");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПродолжительностиДоговоров");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРабочегоВремени");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКлассныхЧиновРангов", 								"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВоинскихСпециальныхЗвание", 						"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ПодразделенияОрганизаций");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ГруппыФизическихЛиц");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраСправочниковПодчиненныхСправочникуФизическиеЛица");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		МодульПрофиля = ОбщегоНазначения.ОбщийМодуль("Грейды");
		МодульПрофиля.ДополнитьОписаниеПрофиляТолькоЧтение(ОписаниеПрофиля);
	КонецЕсли;
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСпецстажа");	
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Кадровик".
//
Функция ОписаниеПрофиляКадровик() Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляКадровик();
	ОписаниеПрофиля.Наименование  = НСтр("ru='Кадровик';uk='Кадровик'");
	
	ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);

	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхДляНачисленияЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхДляНачисленияЗарплатыПриложения",	"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеТарификационнойОтчетностиУчрежденийФМБА",		"ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНачисленийШтатногоРасписания");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИсполнительныхДокументов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАттестацийСотрудников", 					"ЗарплатаКадрыПриложения.АттестацииСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАнкетПерсУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхРегламентированнойОтчетности");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровыхДанныхВоеннослужащих", 						"ЗарплатаКадрыПриложения.КадровыйУчетВоеннослужащих");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПроизвольныхКадровыхПриказов", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПроизвольныхКадровыхПриказов", 			"ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы");
	
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляКадровикБезДоступаКЗарплате());
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Старший кадровик".
//
Функция ОписаниеПрофиляСтаршийКадровик() Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляСтаршийКадровик();
	ОписаниеПрофиля.Наименование  = НСтр("ru='Старший кадровик';uk='Старший кадровик'");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДополнительныхРеквизитовИСведений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКурсовВалют");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБазовыхСправочныхДанных",			"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВидовКонтактнойИнформации",		"СтандартныеПодсистемы.КонтактнаяИнформация");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхТарификацииВМедицине", 		"ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДолжностей",						"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДатЗапретаИзменения");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНачисленийШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАдресныхСведений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБанков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКалендарныхГрафиков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОрганизационнойСтруктуры", 		"ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПодразделенийОрганизации",		"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРазделяемыхДанныхРегламентированнойОтчетности", "РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСведенийОбОтветственныхЛицах",	"ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеМакетовПечатныхФорм",						"СтандартныеПодсистемы.Печать");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаВоинскогоУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаГруппСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаКадровыхДанных");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаКадровыхДанныхРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаКадровыхДанныхОбщиеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаКлассовУсловийТрудаПоДолжностям");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаОтпусков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "РедактированиеРеквизитовОбъектов",					"СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СохранениеДанныхЗадвоенныхФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКурсовВалют");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВерсийОбъектов",								"СтандартныеПодсистемы.ВерсионированиеОбъектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВоинскихСпециальныхЗваний", 		"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПроизвольныхКадровыхПриказов", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПроизвольныхКадровыхПриказов", 	"ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПроизвольныхКадровыхПриказов", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы");

	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляКадровик());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		МодульПрофиля = ОбщегоНазначения.ОбщийМодуль("Грейды");
		МодульПрофиля.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Расчетчик".
//
Функция ОписаниеПрофиляРасчетчик() Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляРасчетчик();
	ОписаниеПрофиля.Наименование  = НСтр("ru='Расчетчик';uk='Розраховувач'");
	
	ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);

	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ВыводНаПринтерФайлБуферОбмена");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВнешнихОперацийРасчетовССотрудниками",	"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВнешнихОперацийРасчетовПоВзносам",		"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВыдачиПогашенияЗаймовСотрудникам",		"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВыплатыДепонированнойЗарплаты",			"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетДепонированнойЗарплатыВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВнешнихОперацийРасчетовПоНДФЛ",			"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВыплаченнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВыплаченнойЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхДляНачисленияЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхДляНачисленияЗарплатыПриложения",	"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхСотрудниковРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРазделяемыхДанныхРегламентированнойОтчетности",		"РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДепонированнойЗарплаты", 					"ЗарплатаКадрыПриложения.УчетДепонированнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДепонированнойЗарплатыРасширенная",		"ЗарплатаКадрыПриложения.УчетДепонированнойЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДивидендов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДоговоров");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДоходовСтороннихФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаданий",									"СтандартныеПодсистемы.БизнесПроцессыИЗадачи");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаймовСотрудникам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеИсполнительныхДокументов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеИсходящейСправкиОЗаработке");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНалоговИВзносов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНалоговИВзносовРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНачисленнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНачисленнойЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОбменаСБанкамиПоЗарплатнымПроектам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОплатыДнейУходаЗаДетьмиИнвалидами");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПерсУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПерсУчетаРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПособийФСС");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПостоянныхУдержаний");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПриказовНаДоплату");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПродолжительностиДоговоров");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРабочегоВремениНачисленнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСторнирования");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУдержанийВСчетРасчетовПоПрочимОперациям");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУдержанийДобровольныхСтраховыхВзносов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУдержанийДобровольныхВзносовВНПФ");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУдержанийПрофсоюзныхВзносов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеВыполнениеЗадач",									"СтандартныеПодсистемы.БизнесПроцессыИЗадачи");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеДополнительныхСведений",							"СтандартныеПодсистемы.Свойства");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеМестаСотрудникаВСтруктуреПредприятия", 				"ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеРасчетЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеРегламентированнойОтчетности",					"ЗарплатаКадрыПриложения.РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеТарификационнойОтчетностиУчрежденийФМБА", 		"ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеЭлектроннойПодписиИШифрования",					"СтандартныеПодсистемы.ЭлектроннаяПодпись");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ОтражениеЗарплатыВБухгалтерскомУчете");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ОтражениеЗарплатыВФинансовомУчете", 							"ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаОтчетыПоСотрудникам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаСтатистикаПерсонала");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрПлатежейПоРезультатамРасчетаЗарплаты",				"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБухгалтерскогоУчетаЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБухгалтерскогоУчетаЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВоинскогоУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхРегламентированнойОтчетности",					"РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудниковРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхОбОбразованииФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаКадровыхДокументов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаОтсутствий");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровогоСостоянияРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровыхДанныхВоеннослужащих", 						"ЗарплатаКадрыПриложения.КадровыйУчетВоеннослужащих");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхДляНачисленияЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхДляНачисленияЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхДляНачисленияЗарплатыПриложения",				"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНачисленийШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтпусков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПоказателейЭффективности", 							"ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПростоев");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРабочегоВремени");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСостоянийСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАттестацийСотрудников", 					"ЗарплатаКадрыПриложения.АттестацииСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКлассныхЧиновРангов", 									"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВоинскихСпециальныхЗвание", 							"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПроизвольныхКадровыхПриказов", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ПодразделенияОрганизаций");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ГруппыФизическихЛиц");
	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		МодульПрофиля = ОбщегоНазначения.ОбщийМодуль("Грейды");
		МодульПрофиля.ДополнитьОписаниеПрофиляТолькоЧтение(ОписаниеПрофиля);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		МодульПрофиля = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		МодульПрофиля.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСпецстажа");	
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Старший расчетчик".
//
Функция ОписаниеПрофиляСтаршийРасчетчик() Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляСтаршийРасчетчик();
	ОписаниеПрофиля.Наименование  = НСтр("ru='Старший расчетчик';uk='Старший розраховувач'");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАдресныхСведений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАналитикаБухучета", 						"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБанков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБазовыхСправочныхДанных",					"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБанкКасса",								"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБухгалтерскогоУчетаЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБухгалтерскогоУчетаЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВидовКонтактнойИнформации",				"СтандартныеПодсистемы.КонтактнаяИнформация");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВидовРабот",								"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхТарификацииВМедицине", 			"ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДолжностей",						"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДатЗапретаИзменения");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДополнительныхРеквизитовИСведений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКалендарныхГрафиков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКурсовВалют");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНачисленийШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПодразделенийОрганизации",		"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРазделяемыхДанныхРегламентированнойОтчетности", "РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСведенийОбОтветственныхЛицах",			"ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеМакетовПечатныхФорм",								"СтандартныеПодсистемы.Печать");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаБухгалтерскогоУчетаЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаБухгалтерскогоУчетаЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаВыплаченнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаДанныхДляНачисленияЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаДоговоров");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаДоходовСтороннихФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаКлассовУсловийТрудаПоДолжностям");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаНалогиИВзносы");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаНалогиИВзносыОбщиеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаНалоговИВзносовРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаНачисленияЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаНачисленияЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаНачисленияЗарплатыОбщиеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаНачисленияЗарплатыОбщиеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПерсУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПерсУчетаОбщиеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПособийФСС");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПособийФССОбщиеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаРабочегоВремени");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаУчетнойПолитики",									"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОписанияИзмененийПрограммы",							"СтандартныеПодсистемы.ОбновлениеВерсииИБ");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "РедактированиеРеквизитовОбъектов",							"СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБухгалтерскогоУчетаЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБухгалтерскогоУчетаЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВерсийОбъектов",										"СтандартныеПодсистемы.ВерсионированиеОбъектов");
	
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляРасчетчик());
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхРегламентированнойОтчетности", "РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКурсовВалют");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		МодульПрофиля = ОбщегоНазначения.ОбщийМодуль("Грейды");
		МодульПрофиля.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		МодульПрофиля = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		МодульПрофиля.ДополнитьОписаниеПрофиляПравиламиПредоставленияЛьгот(ОписаниеПрофиля);
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Табельщик".
//
Функция ОписаниеПрофиляТабельщик() Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляТабельщик();
	ОписаниеПрофиля.Наименование  = НСтр("ru='Табельщик';uk='Табельник'");
	
	ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);

	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ВыводНаПринтерФайлБуферОбмена");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаданий",							"СтандартныеПодсистемы.БизнесПроцессыИЗадачи");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРабочегоВремени");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеВыполнениеЗадач",							"СтандартныеПодсистемы.БизнесПроцессыИЗадачи");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраНачисленияУдержанияПоказатели");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраПлановыхНачислений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраРегистраРасчетаНачисления");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудниковРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхОбОбразованииФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровогоСостоянияРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтпусков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРаботыСверхурочноИВПраздники");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРабочегоВремени");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСостоянийСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКлассныхЧиновРангов", 								"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВоинскихСпециальныхЗвание", 						"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания");
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ПодразделенияОрганизаций");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ГруппыФизическихЛиц");
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Аудитор".
//
Функция ОписаниеПрофиляАудитор() Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляАудитор();
	ОписаниеПрофиля.Наименование  = НСтр("ru='Аудитор';uk='Аудитор'");
	
	ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);

	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаОтчетыПоСотрудникам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаСтатистикаПерсонала");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеАттестацийСотрудников",						"ЗарплатаКадрыПриложения.АттестацииСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБухгалтерскогоУчетаЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБухгалтерскогоУчетаЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВерсийОбъектов",								"СтандартныеПодсистемы.ВерсионированиеОбъектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВнешнихОперацийРасчетовССотрудниками",			"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВнешнихОперацийРасчетовПоВзносам",				"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВнешнихОперацийРасчетовПоНДФЛ",				"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВоинскогоУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыдачиПогашенияЗаймовСотрудникам",				"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыплаченнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыплаченнойЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыплатыДепонированнойЗарплаты",				"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетДепонированнойЗарплатыВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхДляНачисленияЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхДляНачисленияЗарплатыПриложения",		"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхДляНачисленияЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхРегламентированнойОтчетности",			"РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудниковРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхОбОбразованииФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДепонированнойЗарплаты",						"ЗарплатаКадрыПриложения.УчетДепонированнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДепонированнойЗарплатыРасширенная",			"ЗарплатаКадрыПриложения.УчетДепонированнойЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДивидендов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДоговоров");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДополнительныхСведений",						"СтандартныеПодсистемы.Свойства");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДоходовСтороннихФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаЗаявокСотрудников", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаКадровыхДокументов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаОтсутствий");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗаймовСотрудникам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗаявокНаКомандировку", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗаявокНаОтпуск", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИнформацииОВерсияхОбъектов",					"СтандартныеПодсистемы.ВерсионированиеОбъектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИсполнительныхДокументов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИсходящейСправкиОЗаработке");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровогоСостоянияРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНалоговИВзносов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНалоговИВзносовРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНачисленнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНачисленнойЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОбменаСБанкамиПоЗарплатнымПроектам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОплатыДнейУходаЗаДетьмиИнвалидами");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОплатыПоСреднему");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтпусков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПерсУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеАнкетПерсУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПерсУчетаРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПоказателейЭффективности", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПособийФСС");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПостоянныхУдержаний");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПремийПоощрений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПриказовНаДоплату");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПрогуловНеявок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПродолжительностиДоговоров");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПростоев");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРаботыСверхурочноИВПраздники");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРабочегоВремени");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРабочегоВремениНачисленнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСовмещения");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСообщенийОбОтсутствии", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСообщенийОНеправильныхДанныхСотрудника", 		"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСостоянийСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСторнирования");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеУдержанийВСчетРасчетовПоПрочимОперациям");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеУдержанийДобровольныхВзносовВНПФ");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеУдержанийДобровольныхСтраховыхВзносов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеУдержанийПрофсоюзныхВзносов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНачисленийШтатногоРасписания");
	
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		МодульПрофиля = ОбщегоНазначения.ОбщийМодуль("Грейды");
		МодульПрофиля.ДополнитьОписаниеПрофиляТолькоЧтение(ОписаниеПрофиля);
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Кадровик-расчетчик".
//
Функция ОписаниеПрофиляКадровикРасчетчик() Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляКадровикРасчетчик();
	ОписаниеПрофиля.Наименование  = НСтр("ru='Кадровик-расчетчик';uk='Кадровик-розраховувач'");
	
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляКадровик());
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляРасчетчик());
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляТабельщик());
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхРегламентированнойОтчетности", 			"РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКадровыхДанныхВоеннослужащих",	"ЗарплатаКадрыПриложения.КадровыйУчетВоеннослужащих");
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Старший кадровик-расчетчик".
//
Функция ОписаниеПрофиляСтаршийКадровикРасчетчик() Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляСтаршийКадровикРасчетчик();
	ОписаниеПрофиля.Наименование  = НСтр("ru='Старший кадровик-расчетчик';uk='Старший кадровик-розраховувач'");
	
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляСтаршийКадровик());
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляСтаршийРасчетчик());
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляТабельщик());
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ОбъединениеДанныхЗадвоенныхФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхРегламентированнойОтчетности", 			"РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКадровыхДанныхВоеннослужащих",	"ЗарплатаКадрыПриложения.КадровыйУчетВоеннослужащих");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКурсовВалют");
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

Функция ИдентификаторПрофиляКадровикБезДоступаКЗарплате() Экспорт
	Возврат "cb6d7def-c9f9-11e2-88b6-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляКадровик() Экспорт
	Возврат "f4d8b5f1-d671-11e3-a364-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляСтаршийКадровик() Экспорт
	Возврат "cb6d7df1-c9f9-11e2-88b6-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляРасчетчик() Экспорт
	Возврат "cb6d7df0-c9f9-11e2-88b6-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляСтаршийРасчетчик() Экспорт
	Возврат "cb6d7df2-c9f9-11e2-88b6-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляТабельщик() Экспорт
	Возврат "cb6d7df3-c9f9-11e2-88b6-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляАудитор() Экспорт
	Возврат "cb6d7df5-c9f9-11e2-88b6-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляКадровикРасчетчик() Экспорт
	Возврат "9deb4891-e255-11e2-880c-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляСтаршийКадровикРасчетчик() Экспорт
	Возврат "9deb4892-e255-11e2-880c-e0cb4ed5f6a2";
КонецФункции

// Возвращает значение РаботаВХозрасчетнойОрганизации.
// Используется для начального заполнения ФО и при попытке изменения значений ФО.
Функция ЗначениеРаботаВХозрасчетнойОрганизации() Экспорт
	ЕстьУчетБюджетныхУчреждений = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений");
	ЕстьУчетХозрасчетныхОрганизаций = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций");
	Если ЕстьУчетБюджетныхУчреждений И ЕстьУчетХозрасчетныхОрганизаций Тогда
		Возврат НеОпределено;
	ИначеЕсли ЕстьУчетБюджетныхУчреждений Тогда
		Возврат Ложь;
	ИначеЕсли ЕстьУчетХозрасчетныхОрганизаций Тогда
		Возврат Истина;
	Иначе
		Возврат НеОпределено;
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьПрофиль(ПрофильПриемник, ПрофильИсточник) Экспорт 
	
	ДополнитьРоли(ПрофильПриемник.Роли, ПрофильИсточник.Роли);
	ДополнитьВидыДоступа(ПрофильПриемник.ВидыДоступа, ПрофильИсточник.ВидыДоступа);
	
КонецПроцедуры

Процедура ДополнитьВидыДоступа(КоллекцияВидовДоступаПриемник, КоллекцияВидовДоступаИсточник)

	Для Каждого ВидДоступа Из КоллекцияВидовДоступаИсточник Цикл
		
		Если КоллекцияВидовДоступаПриемник.НайтиПоЗначению(ВидДоступа.Значение) = Неопределено Тогда
			КоллекцияВидовДоступаПриемник.Добавить(ВидДоступа.Значение);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьРоли(КоллекцияРолейПриемник, КоллекцияРолейИсточник)
	
	СоответствияРолей = СоответствиеРолейДобавлениеИзменениеЧтение();
	
	Для Каждого ИмяРоли Из КоллекцияРолейИсточник Цикл
		
		// Проверка того, что такая роль уже есть в списке.
		Если КоллекцияРолейПриемник.Найти(ИмяРоли) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоллекцияРолейПриемник.Добавить(ИмяРоли);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоответствиеРолейДобавлениеИзменениеЧтение()
	
	СтруктураСоответствийРолей = Новый Структура;
	СтруктураСоответствийРолей.Вставить("СоответствиеРолейДобавлениеИзменениеРолямЧтение", Новый Соответствие);
	СтруктураСоответствийРолей.Вставить("СоответствиеРолейЧтениеРолямДобавлениеИзменение", Новый Соответствие);
	
	СоответствиеРолей = Новый Соответствие;
	
	Для Каждого Роль Из Метаданные.Роли Цикл
		
		ИмяРоли = Роль.Имя;
		Если РольДобавлениеИзменение(ИмяРоли) Тогда
			
			ИмяРолиЧтение = "Чтение" + Прав(ИмяРоли, СтрДлина(ИмяРоли) - СтрДлина("ДобавлениеИзменение"));
			Если Метаданные.Роли.Найти(ИмяРолиЧтение) <> Неопределено Тогда
				СтруктураСоответствийРолей.СоответствиеРолейДобавлениеИзменениеРолямЧтение.Вставить(ИмяРоли, ИмяРолиЧтение);
			КонецЕсли; 
			
		ИначеЕсли РольЧтение(ИмяРоли) Тогда
			
			ИмяРолиДобавлениеИзменение = "ДобавлениеИзменение" + Прав(ИмяРоли, СтрДлина(ИмяРоли) - СтрДлина("Чтение"));
			Если Метаданные.Роли.Найти(ИмяРолиДобавлениеИзменение) <> Неопределено Тогда
				СтруктураСоответствийРолей.СоответствиеРолейЧтениеРолямДобавлениеИзменение.Вставить(ИмяРоли, ИмяРолиДобавлениеИзменение);
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураСоответствийРолей;
	
КонецФункции

Функция РольДобавлениеИзменение(Знач ИмяРоли)
	
	Возврат СтрНайти(Врег(ИмяРоли), ВРег("ДобавлениеИзменение")) = 1;
	
КонецФункции

Функция РольЧтение(Знач ИмяРоли)
	
	Возврат СтрНайти(Врег(ИмяРоли), ВРег("Чтение")) = 1;
	
КонецФункции

Функция ЭтоОбъектЗарплатноКадровойБиблиотеки(ПолноеИмяОбъектаМетаданных) Экспорт
	
	ЭтоОбъектБиблиотеки = ЗарплатаКадрыБазовый.ЭтоОбъектЗарплатноКадровойБиблиотеки(ПолноеИмяОбъектаМетаданных);
	Если НЕ ЭтоОбъектБиблиотеки Тогда
		ЭтоОбъектБиблиотеки = ЗарплатаКадры.ОбъектМетаданныхВключенВПодсистемы(ПолноеИмяОбъектаМетаданных, "ЗарплатаКадрыРасширеннаяПодсистемы");
	КонецЕсли; 
	
	Возврат ЭтоОбъектБиблиотеки;
	
КонецФункции

Функция ЭтоБазоваяВерсияКонфигурации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеРаботаВХозрасчетнойОрганизации() = Неопределено И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыБазоваяВерсия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыБазоваяВерсия");
		Возврат Модуль.ЭтоБазоваяВерсияКонфигурации();
	КонецЕсли;
	
	Возврат СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
КонецФункции

Функция НастройкиПрограммыБюджетногоУчреждения() Экспорт

	НастройкиПрограммы = Новый Структура;
	НастройкиПрограммы.Вставить("РаботаВБюджетномУчреждении", Ложь);
	НастройкиПрограммы.Вставить("ИспользоватьГосударственнуюСлужбу", Ложь);
	НастройкиПрограммы.Вставить("ИспользоватьМуниципальнуюСлужбу", Ложь);
	НастройкиПрограммы.Вставить("НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим", Ложь);
	НастройкиПрограммы.Вставить("ИспользоватьУчетКлассныхЧинов", Ложь);
	НастройкиПрограммы.Вставить("ИспользоватьВыгрузкуВФедеральныйРегистрМедицинскихРаботников", Ложь);
	НастройкиПрограммы.Вставить("ИспользоватьТарификационнуюОтчетностьУчрежденийФМБА", Ложь); 
	НастройкиПрограммы.Вставить("ИспользоватьДоступКНаркотическимСредствам", Ложь);
	НастройкиПрограммы.Вставить("ИспользоватьРасчетСохраняемогоДенежногоСодержания", Ложь);  
	НастройкиПрограммы.Вставить("РаботаВМедицинскомУчреждении", Ложь);
	НастройкиПрограммы.Вставить("РаботаВОбразовательномУчреждении", Ложь);
	НастройкиПрограммы.Вставить("ИспользоватьВоеннуюСлужбу", Ложь);
	НастройкиПрограммы.Вставить("ИспользоватьРасчетДенежногоДовольствияВоеннослужащих", Ложь);
	НастройкиПрограммы.Вставить("ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву", Ложь);
	НастройкиПрограммы.Вставить("РазрешеноСовместительствоВоеннослужащимПоКонтракту", Ложь); 
	НастройкиПрограммы.Вставить("ИспользоватьРасчетДенежногоСодержанияПрокуроров", Ложь);
	НастройкиПрограммы.Вставить("ПремияЗаДВСОРассчитываетсяПоОкладуНаНачалоМесяца", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаКонстант = "РаботаВБюджетномУчреждении,ИспользоватьГосударственнуюСлужбу,ИспользоватьМуниципальнуюСлужбу,
	|ИспользоватьУчетКлассныхЧинов,РаботаВМедицинскомУчреждении";
	Настройка = Константы.СоздатьНабор(СтрокаКонстант);
	Настройка.Прочитать();
	ЗаполнитьЗначенияСвойств(НастройкиПрограммы, Настройка, СтрокаКонстант);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.НастройкиПрограммыБюджетногоУчреждения(НастройкиПрограммы);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
		Модуль.НастройкиПрограммыБюджетногоУчреждения(НастройкиПрограммы);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.НастройкиПрограммыБюджетногоУчреждения(НастройкиПрограммы);
		
	КонецЕсли;
	
	Возврат НастройкиПрограммы;

КонецФункции

Процедура ЗаполнитьРолиСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник) КАК РольСотрудника
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудников
	|		ПО КадроваяИсторияСотрудников.Сотрудник = РолиСотрудников.Сотрудник
	|			И (РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник))
	|ГДЕ
	|	РолиСотрудников.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник)
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДоговорАвторскогоЗаказа.Сотрудник КАК Сотрудник
	|	ИЗ
	|		Документ.ДоговорАвторскогоЗаказа КАК ДоговорАвторскогоЗаказа
	|	ГДЕ
	|		ДоговорАвторскогоЗаказа.Проведен
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДоговорРаботыУслуги.Сотрудник
	|	ИЗ
	|		Документ.ДоговорРаботыУслуги КАК ДоговорРаботыУслуги
	|	ГДЕ
	|		ДоговорРаботыУслуги.Проведен) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудников
	|		ПО ВложенныйЗапрос.Сотрудник = РолиСотрудников.Сотрудник
	|			И (РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник))
	|ГДЕ
	|	РолиСотрудников.Сотрудник ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Набор = РегистрыСведений.РолиСотрудников.СоздатьНаборЗаписей();
		Набор.Прочитать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
		КонецЦикла;
		
		Набор.Записать();
		
	КонецЕсли; 
	
КонецПроцедуры

// Выполняет формирование таблицы с набором значений доступа объекта (документа), 
// содержащего ссылки на организацию и сотрудника (сотрудников).
// Вызывается из процедуры ЗаполнитьНаборыЗначенийДоступа, реализованной в модуле таких 
// документов, доступ к которым выполняется через наборы значений доступа.
// Параметры:
//		Объект
//		Таблица - переданная таблица значений.
//		ПутьФизическоеЛицо - строка с именем реквизита, содержащего физическое лицо.
//			Может быть идентификатором реквизита объекта (например, "ФизическоеЛицо") или
//			путем к реквизиту табличной части в 
//			формате <ИмяТабличнойЧасти>.<ИмяРеквизита> 
//			(например, "ФизическиеЛица.ФизическоеЛицо")
//
Процедура ЗаполнитьНаборыПоФизическимЛицам(Объект, Таблица, ПутьФизическоеЛицо, НомерНабора = 0) Экспорт
	
	СтрокиПутиФизическогоЛица = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьФизическоеЛицо, ".");
	
	Если СтрокиПутиФизическогоЛица.Количество() = 1 Тогда
		
		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.ЗначениеДоступа = Объект[ПутьФизическоеЛицо];
		СтрокаТаб.НомерНабора = НомерНабора;
		
	Иначе
		
		Для Каждого СтрокаТаблицы Из Объект[СтрокиПутиФизическогоЛица[0]] Цикл
			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.ЗначениеДоступа = СтрокаТаблицы[СтрокиПутиФизическогоЛица[1]];
			СтрокаТаб.НомерНабора = НомерНабора;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу значений с параметрами отпусков сотрудника для расчета оценочных обязательств
//	Параметры
//		МассивСотрудников
//		Период – месяц, для которого рассчитываются обязательства
//	Возвращаемое значение Таблица значений
//			* Сотрудник
//			* ОстатокОтпусков
//			* ОтпускАвансом
//			* СреднийЗаработок
//
Функция СведенияОбОтпускахСотрудниковДляРасчетаОценочныхОбязательств(МассивСотрудников, Период) Экспорт

	
	ТаблицаСведенийОбОтпусках = ЗарплатаКадры.НоваяТаблицаСведенияОбОтпускахСотрудниковДляРасчетаОценочныхОбязательств();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", МассивСотрудников);
	Запрос.УстановитьПараметр("ПериодНачисления", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Период));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФактическиеОтпуска.Сотрудник,
	|	СУММА(ФактическиеОтпуска.Количество) КАК ОтпускАвансом
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|ГДЕ
	|	ФактическиеОтпуска.Сотрудник В(&Сотрудники)
	|	И НАЧАЛОПЕРИОДА(ФактическиеОтпуска.ПериодНачисления, МЕСЯЦ) = &ПериодНачисления
	|	И ФактическиеОтпуска.Период > &КонецМесяца
	|
	|СГРУППИРОВАТЬ ПО
	|	ФактическиеОтпуска.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	СУММА(ФактическиеОтпуска.Количество) > 0";
	ОтпускаАвансом = Запрос.Выполнить().Выгрузить();
	Отбор = Новый Структура("Сотрудник");
	
	ДатаРасчетаСреднего = НачалоМесяца(ДобавитьМесяц(Период, 1));
	ДатаОтпусков = КонецМесяца(Период);
	
	Для каждого Сотрудник Из МассивСотрудников Цикл
	
		НоваяСтрока = ТаблицаСведенийОбОтпусках.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
		ДополнительныеПараметры.СпособРасчетаОтпуска = Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням;
		ДополнительныеПараметры.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление100Отпускные;
		НоваяСтрока.СреднийЗаработок = УчетСреднегоЗаработка.СреднийЗаработок(Сотрудник, ДатаРасчетаСреднего, ДополнительныеПараметры);
		
		ОстаткиОтпусковСотрудника = ОстаткиОтпусков.ОстатокОтпускаСотрудникаНаДату(Сотрудник, ДатаОтпусков);
		ОстатокОтпусковСотрудника = 0;
		Для каждого СтрокаТЗ Из ОстаткиОтпусковСотрудника.ОстаткиВРазрезеВидовОтпусков Цикл
			ОстатокОтпусковСотрудника = ОстатокОтпусковСотрудника + СтрокаТЗ.КоличествоДней;
		КонецЦикла;
		НоваяСтрока.ОстатокОтпусков  = ОстатокОтпусковСотрудника;
		
		Отбор.Сотрудник = Сотрудник;
		НайденныеСтроки = ОтпускаАвансом.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока.ОтпускАвансом  = НайденныеСтроки[0].ОтпускАвансом;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаСведенийОбОтпусках;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Блок функций получения значений по умолчанию.
//

Процедура ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения, ДатаЗначений) Экспорт
	
	ЗарплатаКадрыБазовый.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения, ДатаЗначений);
	
	Если ЗаполняемыеЗначения.Свойство("ГрафикРаботы") Тогда
		
		// Значение позиции известно - получим зависящие от нее значения.
		ДолжностьПоШтатномуРасписаниюСсылка = НеОпределено;
		Если (ЗаполняемыеЗначения.Свойство("ДолжностьПоШтатномуРасписанию", ДолжностьПоШтатномуРасписаниюСсылка) И ДолжностьПоШтатномуРасписаниюСсылка <> НеОпределено) Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДолжностьПоШтатномуРасписаниюСсылка, "ГрафикРаботыСотрудников,Подразделение,Владелец");
			
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.ГрафикРаботыСотрудников) Тогда
				ЗаполняемыеЗначения.ГрафикРаботы = ЗначенияРеквизитов.ГрафикРаботыСотрудников;
			Иначе
				
				Если Не ЗаполняемыеЗначения.Свойство("Подразделение") Тогда
					ЗаполняемыеЗначения.Вставить("Подразделение", ЗначенияРеквизитов.Подразделение);
				КонецЕсли;
				
				Если Не ЗаполняемыеЗначения.Свойство("Организация") Тогда
					ЗаполняемыеЗначения.Вставить("Организация", ЗначенияРеквизитов.Владелец);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗаполняемыеЗначения.ГрафикРаботы) Тогда
			
			// Значение подразделения известно - получим зависящие от нее значения.
			ПодразделениеСсылка = НеОпределено;
			Если (ЗаполняемыеЗначения.Свойство("Подразделение", ПодразделениеСсылка) И ПодразделениеСсылка <> НеОпределено) Тогда
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодразделениеСсылка, "ГрафикРаботыСотрудников,Владелец");
				Если ЗначениеЗаполнено(ЗначенияРеквизитов.ГрафикРаботыСотрудников) Тогда
					ЗаполняемыеЗначения.ГрафикРаботы = ЗначенияРеквизитов.ГрафикРаботыСотрудников;
				Иначе
				
					Если Не ЗаполняемыеЗначения.Свойство("Организация") Тогда
						ЗаполняемыеЗначения.Вставить("Организация", ЗначенияРеквизитов.Владелец);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗаполняемыеЗначения.ГрафикРаботы) Тогда
			// Значение организации известно - получим зависящие от нее значения.
			ОрганизацияСсылка = НеОпределено;
			Если (ЗаполняемыеЗначения.Свойство("Организация", ОрганизацияСсылка) И ОрганизацияСсылка <> НеОпределено) Тогда
				ЗаполняемыеЗначения.ГрафикРаботы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка, "ГрафикРаботыСотрудников");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("Месяц") Тогда
		
		МесяцНачисления = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПользователя", "МесяцНачисления");
		Если ЗначениеЗаполнено(МесяцНачисления) Тогда
			ЗаполняемыеЗначения.Месяц = МесяцНачисления;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("Организация") И Не ЗначениеЗаполнено(ЗаполняемыеЗначения.Организация) И ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоОрганизаций") Тогда
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		Если ЗначениеЗаполнено(Организация) Тогда 
			ЗаполняемыеЗначения.Организация = Организация;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СведенияОбОтветственныхЛицах");
		Модуль.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения, ДатаЗначений);
	КонецЕсли;
	
	ЗарплатаКадры.ЗаполнитьСведенияОбОтветственныхРаботникахОрганизаций(ЗаполняемыеЗначения);
	
КонецПроцедуры

// Массив поддерживаемых идентификаторов значений по умолчанию.
Функция СписокДоступныхЗначенийПоУмолчанию() Экспорт
	
	ПоддерживаемыеИдентификаторы = ЗарплатаКадрыБазовый.СписокДоступныхЗначенийПоУмолчанию();
	
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьПоШтатномуРасписанию");
	ПоддерживаемыеИдентификаторы.Добавить("ГрафикРаботы");
	
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРуководителяСтрокой");
	
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьКассираСтрокой");
	
	ПоддерживаемыеИдентификаторы.Добавить("ОтветственныйЗаВУР");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьОтветственногоЗаВУР");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьОтветственногоЗаВУРСтрокой");
	
	ПоддерживаемыеИдентификаторы.Добавить("РуководительКадровойСлужбы");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРуководителяКадровойСлужбы");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРуководителяКадровойСлужбыСтрокой");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ДополнитьСписокДоступныхЗначенийПоУмолчанию(ПоддерживаемыеИдентификаторы);
	КонецЕсли;
	
	ДобавитьИдентификаторыОтветственныхРаботниковОрганизаций(ПоддерживаемыеИдентификаторы);
	
	Возврат ПоддерживаемыеИдентификаторы;
	
КонецФункции

Процедура ДобавитьИдентификаторыОтветственныхРаботниковОрганизаций(ПоддерживаемыеИдентификаторы)
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоддерживаемыеИдентификаторы, ПоддерживаемыеИдентификаторыОтветственныхРаботниковОрганизаций());
	
КонецПроцедуры

Функция ПоддерживаемыеИдентификаторыОтветственныхРаботниковОрганизаций() Экспорт
	
	ПоддерживаемыеИдентификаторы = ЗарплатаКадрыБазовый.ПоддерживаемыеИдентификаторыОтветственныхРаботниковОрганизаций();
	
	ПоддерживаемыеИдентификаторы.Добавить("Бухгалтер");
	
	ПоддерживаемыеИдентификаторы.Добавить("РаботникКадровойСлужбы");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРаботникаКадровойСлужбы");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРаботникаКадровойСлужбыСтрокой");
	
	ПоддерживаемыеИдентификаторы.Добавить("Составил");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьСоставившего");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьСоставившегоСтрокой");
	
	ПоддерживаемыеИдентификаторы.Добавить("Проверил");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьПроверившего");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьПроверившегоСтрокой");
	
	ПоддерживаемыеИдентификаторы.Добавить("Раздатчик");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРаздатчика");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРаздатчикаСтрокой");
	
	Возврат ПоддерживаемыеИдентификаторы;
		
КонецФункции

// Предназначена для использования в ОбщегоНазначенияПереопределяемый.ЗаполнитьТаблицуПереименованияОбъектовМетаданных.
//
// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.6.3",
		"Роль.ДобавлениеИзменениеУдержанийПоИсполнительнымДокументам",
		"Роль.ДобавлениеИзменениеИсполнительныхДокументов",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.6.3",
		"Роль.ЧтениеУдержанийПоИсполнительнымДокументам",
		"Роль.ЧтениеИсполнительныхДокументов",
		"ЗарплатаКадрыРасширенная");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.6.16",
		"Роль.ЧтениеСтруктурыПредприятия",
		"Роль.БазовыеПраваЗарплатаКадрыПриложения",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.6.16",
		"Роль.ДобавлениеИзменениеСтруктурыПредприятия",
		"Роль.ДобавлениеИзменениеБазовыхСправочныхДанных",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.10.18",
		"Роль.ДобавлениеИзменениеВнешнихОпераций",
		"Роль.ДобавлениеИзменениеВнешнихОперацийРасчетовССотрудниками",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.10.18",
		"Роль.ЧтениеВнешнихОпераций",
		"Роль.ЧтениеВнешнихОперацийРасчетовССотрудниками",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.28",
		"Роль.ПрофильАудитор",
		"Роль.ИнтерфейсРабочегоСтолаАудитор",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.28",
		"Роль.ПрофильКадровик",
		"Роль.ИнтерфейсРабочегоСтолаКадровик",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.28",
		"Роль.ПрофильКадровикРасчетчик",
		"Роль.ИнтерфейсРабочегоСтолаКадровикРасчетчик",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.28",
		"Роль.ПрофильРасчетчик",
		"Роль.ИнтерфейсРабочегоСтолаРасчетчик",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.28",
		"Роль.ПрофильРуководительПодразделения",
		"Роль.ИнтерфейсРабочегоСтолаРуководительПодразделения",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.28",
		"Роль.ПрофильТабельщик",
		"Роль.ИнтерфейсРабочегоСтолаТабельщик",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.30",
		"Роль.ИспользованиеРазделаВыплатыПеречисления",
		"Роль.ПодсистемаВыплатыПеречисления",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.30",
		"Роль.ИспользованиеРазделаЗарплата",
		"Роль.ПодсистемаЗарплата",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.30",
		"Роль.ИспользованиеРазделаКадры",
		"Роль.ПодсистемаКадры",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.30",
		"Роль.ИспользованиеРазделаНалогиИВзносы",
		"Роль.ПодсистемаНалогиИВзносы",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.30",
		"Роль.ИспользованиеРазделаНастройка",
		"Роль.ПодсистемаНастройка",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.30",
		"Роль.ИспользованиеРазделаНастройкаИАдминистрирование",
		"Роль.ПодсистемаНастройкаИАдминистрирование",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.30",
		"Роль.ИспользованиеРазделаОтчетность",
		"Роль.ПодсистемаОтчетность",
		"ЗарплатаКадрыРасширенная");
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Модуль.ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог);
	КонецЕсли;	
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в документах, редактирующих состав 
// начислений (начисления в строках таблицы).

// Дополнение формы, которая выполняет редактирование состава начислений (таких как документ Кадровый перевод).
// Дополняет данные формы реквизитами и элементами формы, предназначенными для отображения текущих 
// значений показателей редактируемого состава начислений.
// Параметры: 
//		Форма
//
//		ОписаниеТаблицыВидовРасчета - 	структура, описывающая таблицу с видами расчета. 
//										См. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета()
//
//		ИмяПВР - имя плана видов расчета.
//
//		РежимРаботы - 	0 - режим "штатного расписания"
//						1 - режим "изменения плановых начислений сотрудника".
//						2 - 
//						3 - режим "первого назначения плановых начислений сотрудника" (прием на работу).
//
//		ДобавлятьЭлементыФормы - 	позволяет сформировать только реквизиты формы не создавая элементы 
//									формы для их отображения по умолчанию Истина.
Процедура РедактированиеСоставаНачисленийДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, РежимРаботы, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	СоздаватьКомментарий = (РежимРаботы = 0 ИЛИ ДобавлятьЭлементыФормы);
	
	//	Обработаем специальные режимы работы:
	//	3 - документ "Прием на работу": поле комментарий, в таблице редактирования начислений, не нужно, в остальном
	//	    механизм работает также.
	Если РежимРаботы  = 3 Тогда
		СоздаватьКомментарий = Ложь;
		РежимРаботы  = 1;
	КонецЕсли;
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	// Дополняем таблицу формы как любую форму ввода начислений.
	ВводНачисленийДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИмяПВР, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);

	Если ДобавлятьРеквизитыФормы Тогда
		
		ТипЗначенияПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты();
		ФОИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании");
		Если ОписаниеТаблицыВидовРасчета.ИспользоватьВилкуЗначений Тогда 
			ФОИспользоватьВилкуСтавокВШтатномРасписании = Истина;
		КонецЕсли;
		
		УстановитьСвойстваТаблицыВводаДополнительныхТарифныхСтавок(Форма, РежимРаботы);
		
		// Дополняем таблицу формы реквизитами для текущих значений и комментарием.
		// Элементы формы для отображения этих реквизитов вводить не будем, так 
		// как они не выводятся в форме, а используются только при условном оформлении.
		МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, РежимРаботы);
		
		ДобавляемыеРеквизиты = Новый Массив;
		Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
			Если РежимРаботы = 0 Тогда
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееМаксимальноеЗначение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным));
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееМинимальноеЗначение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным));
				Иначе
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееЗначение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным));
				КонецЕсли;
			Иначе 	
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееЗначение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным));
			КонецЕсли;
		КонецЦикла;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДействующийВидРасчета", Новый ОписаниеТипов("Булево"), ПутьКДанным));
		
		Если СоздаватьКомментарий Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ПутьКДанным));
		КонецЕсли;
		
		// Если таблица с показателями еще не расширена полем ТекущееЗначение - добавляем его.
		Если РежимРаботы = 0 Тогда
			РеквизитыМинПоказателейДополнены = Ложь;
			РеквизитыМаксПоказателейДополнены = Ложь;
		Иначе 
			РеквизитыПоказателейДополнены = Ложь;
		КонецЕсли;
				
		ПутьКДаннымПоказателей = ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей;
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКДанным);
		
		РеквизитыПоказателей = Форма.ПолучитьРеквизиты(ПутьКДаннымПоказателей);
		
		Если МассивИменРеквизитовФормы.Найти("РеквизитыКДобавлению") <> Неопределено Тогда
			// В том случае когда форма содержит "отложенные" для добавления реквизиты - проверим и их.
			Для каждого ДобавляемыйРеквизит Из Форма.РеквизитыКДобавлению.ВыгрузитьЗначения() Цикл
				Если ВРег(ДобавляемыйРеквизит.Путь) = ВРег(ПутьКДаннымПоказателей) Тогда
					РеквизитыПоказателей.Добавить(ДобавляемыйРеквизит);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Реквизит Из РеквизитыПоказателей Цикл
			Если РежимРаботы = 0 Тогда
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					Если Реквизит.Имя = "ТекущееМинимальноеЗначение" Тогда
						РеквизитыМинПоказателейДополнены = Истина;
					КонецЕсли;
					Если Реквизит.Имя = "ТекущееМаксимальноеЗначение" Тогда
						РеквизитыМаксПоказателейДополнены = Истина;
					КонецЕсли;
				Иначе
					Если Реквизит.Имя = "ТекущееЗначение" Тогда
						РеквизитыМаксПоказателейДополнены = Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе 
				Если Реквизит.Имя = "ТекущееЗначение" Тогда
					РеквизитыПоказателейДополнены = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если РежимРаботы = 0 Тогда
			Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				Если Не РеквизитыМинПоказателейДополнены Тогда
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееМинимальноеЗначение", ТипЗначенияПоказателя, ПутьКДаннымПоказателей));
				КонецЕсли;
				Если Не РеквизитыМаксПоказателейДополнены Тогда
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееМаксимальноеЗначение", ТипЗначенияПоказателя, ПутьКДаннымПоказателей));
				КонецЕсли;
			Иначе
				Если Не РеквизитыМаксПоказателейДополнены Тогда
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееЗначение", ТипЗначенияПоказателя, ПутьКДаннымПоказателей));
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Не РеквизитыПоказателейДополнены Тогда
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееЗначение", ТипЗначенияПоказателя, ПутьКДаннымПоказателей));
			КонецЕсли;
		КонецЕсли;
			
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
	
	КонецЕсли;
	
	// Дополняем форму элементом для отображения комментария.
	Если СоздаватьКомментарий И ДобавлятьЭлементыФормы Тогда
		ПолеКомментарий = Форма.Элементы.Найти(ОписаниеТаблицыВидовРасчета.ИмяТаблицы + "Комментарий");
		Если ПолеКомментарий = Неопределено Тогда
			Таблица = Форма.Элементы.Найти(ОписаниеТаблицыВидовРасчета.ИмяТаблицы);
			
			ПолеКомментарий = Форма.Элементы.Добавить(ОписаниеТаблицыВидовРасчета.ИмяТаблицы + "Комментарий", Тип("ПолеФормы"), Таблица);
			ПолеКомментарий.ПутьКДанным = ПутьКДанным + ".Комментарий";
			ПолеКомментарий.Доступность = Истина;
			ПолеКомментарий.ОтображатьВШапке = Истина;
			ПолеКомментарий.ТолькоПросмотр = Истина;
			ПолеКомментарий.РастягиватьПоГоризонтали = Ложь;
			ПолеКомментарий.Ширина = 30;
		КонецЕсли;	
	КонецЕсли;
	
	РедактированиеСоставаНачисленийУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы);
	
КонецПроцедуры

// Заполнение действующих видов расчета в реквизит формы документа, редактирующего 
// состав начислений (например, Кадровый перевод).
// Выполняется при вводе нового документа или при смене переводимого сотрудника (по сути - ввод 
// нового документа на другого сотрудника).
//
// Требования:
//		Объект, редактируемый в форме имеет имя "Объект".
//		Имя таблицы формы и имя поля реквизита формы (параметр ИмяТаблицы) совпадают по именам (например, "Начисления").
//		Объект, редактируемый в форме имеет табличную часть "Показатели", предназначенную для 
//			хранения значений показателей редактируемых начислений.
// Параметры:
//		ДокументСсылка - ссылка на документ, редактируемый в форме.
//		СотрудникиДаты - список сотрудников, начисления которых редактируются. 
//			Представляет собой табличную часть с колонками.
//				Сотрудник
//				Период - дата, на которую получаются действующие начисления.
//		Форма
//		ОписаниеТаблицыВидовРасчета - описание табличной части объекта, содержащей редактируемые начисления
//			см. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета().
//
Процедура РедактированиеСоставаНачисленийДействующиеНачисленияВРеквизит(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДатаСобытия = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	Если СотрудникиДаты.Количество() > 0 Тогда
		
		Если РежимРаботы = 0 Тогда
			РедактированиеСоставаНачисленийШтатногоРасписанияДействующиеНачисленияВРеквизит(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета)
		Иначе 
			РедактированиеСоставаНачисленийСотрудниковДействующиеНачисленияВРеквизит(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, Ложь)
		КонецЕсли;
		ВводНачисленийДанныеВРеквизит(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, Истина);
		УстановитьПредставленияКомандВводаСтажей(Форма, СотрудникиДаты, ОписаниеТаблицыВидовРасчета, РежимРаботы);
		УстановитьКомментарииДействийСНачислениями(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДатаСобытия, ДатаОкончания);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДействующиеНачисленияСотрудников(СотрудникиДаты, ДокументСсылка, ОписаниеТаблицыВидовРасчета = Неопределено, ФормироватьСПериодичностьДень = Истина, ИсключатьПособия = Ложь) Экспорт
	
	Если ОписаниеТаблицыВидовРасчета = Неопределено Тогда
		ИмяТаблицы = "Начисления";
		ИмяРеквизитаВидРасчета = "Начисление";
		СодержитПолеХарактерНачисления = Ложь;
	Иначе
		
		ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
		ИмяРеквизитаВидРасчета = ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета;
		
		Если ОписаниеТаблицыВидовРасчета.Свойство("СодержитПолеХарактерНачисления") Тогда
			СодержитПолеХарактерНачисления = ОписаниеТаблицыВидовРасчета.СодержитПолеХарактерНачисления;
		Иначе
			СодержитПолеХарактерНачисления = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ДокументСсылка);
	
	Если ИмяТаблицы = "Начисления" Тогда
		КолонкиСотрудникиДаты = "Сотрудник";
	Иначе
		КолонкиСотрудникиДаты = "ФизическоеЛицо";
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"Плановые" + ИмяТаблицы,
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты, КолонкиСотрудникиДаты),
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты, КолонкиСотрудникиДаты),
		ПараметрыПостроения);
	
	Если ИмяТаблицы = "Начисления" Тогда
		
		ПараметрыПостроенияФОТ = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроенияФОТ.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияФОТ.Отборы, "Основание", "<>", ДокументСсылка);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыйФОТ",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты, КолонкиСотрудникиДаты),
			ПараметрыПостроенияФОТ);
			
		Если СодержитПолеХарактерНачисления Тогда
			
			Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
			ИмяВТОтборовПозицийШтатногоРасписания = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтборовПозицийШтатногоРасписания");
			
			Если СотрудникиДаты.Колонки.Найти("ДолжностьПоШтатномуРасписанию") = Неопределено Тогда
				
				Запрос.Текст =
					"ВЫБРАТЬ
					|	СотрудникиДаты.Период,
					|	СотрудникиДаты.Сотрудник
					|ПОМЕСТИТЬ ВТСотрудникиДаты
					|ИЗ
					|	&СотрудникиДаты КАК СотрудникиДаты";
				
				Запрос.Выполнить();
				
				Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
					Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиДаты");
					
				Описатель.ИмяВТКадровыеДанныеСотрудников = ИмяВТОтборовПозицийШтатногоРасписания;
				
				КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
					Описатель, Истина, "ДолжностьПоШтатномуРасписанию");
				
			Иначе
				
				Запрос.Текст =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	СотрудникиДаты.Период,
					|	СотрудникиДаты.Сотрудник,
					|	СотрудникиДаты.ДолжностьПоШтатномуРасписанию
					|ПОМЕСТИТЬ ВТОтборовПозицийШтатногоРасписания
					|ИЗ
					|	&СотрудникиДаты КАК СотрудникиДаты";
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовПозицийШтатногоРасписания", ИмяВТОтборовПозицийШтатногоРасписания);
				Запрос.Выполнить();
				
			КонецЕсли;
			
			Описатель = УправлениеШтатнымРасписанием.ОписательВременныхТаблицДляСоздатьВТПозицииШтатногоРасписания(
				Запрос.МенеджерВременныхТаблиц, ИмяВТОтборовПозицийШтатногоРасписания, "ДолжностьПоШтатномуРасписанию,Период");
			
			УправлениеШтатнымРасписанием.СоздатьВТПозицииШтатногоРасписанияПоВременнойТаблице(
				Истина, Описатель, "ВТПозицииСотрудников");
			
			Описатель = УправлениеШтатнымРасписанием.ОписательВременныхТаблицДляПолученияДанныхПозицийШтатногоРасписания(
				Запрос.МенеджерВременныхТаблиц, "ВТПозицииСотрудников");
			
			УправлениеШтатнымРасписанием.СоздатьВТНачисленияПозицийШтатногоРасписания(
				Истина, Описатель, "ВТНачисленияПозиций", Истина);
			
		КонецЕсли;
		
		ИмяПоляСотрудник = "Сотрудник";
		ИмяПоляПорядка = ИмяРеквизитаВидРасчета;
		ИмяДополнительногоПоляПорядка = "";
		
		Если Не ИсключатьПособия Тогда
			
			ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
				"ПрименениеПлановыхНачислений",
				Запрос.МенеджерВременныхТаблиц,
				Истина,
				ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
				ПараметрыПостроения);
			
		КонецЕсли;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеНачисления.ПериодВозвратногоСобытия КАК Период,
			|	ПлановыеНачисления.Сотрудник,
			|	ПлановыеНачисления.Начисление
			|ПОМЕСТИТЬ ВТОтборВозвратныхСобытийПлановыеНачисления
			|ИЗ
			|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
			|ГДЕ
			|	ПлановыеНачисления.ПериодВозвратногоСобытия <> ДАТАВРЕМЯ(1, 1, 1)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗначенияПоказателей.ПериодВозвратногоСобытия КАК Период,
			|	ЗначенияПоказателей.Сотрудник,
			|	ЗначенияПоказателей.Организация,
			|	ЗначенияПоказателей.Показатель
			|ПОМЕСТИТЬ ВТОтборВозвратныхСобытийЗначенияПоказателей
			|ИЗ
			|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПоказателей
			|ГДЕ
			|	ЗначенияПоказателей.ПериодВозвратногоСобытия <> ДАТАВРЕМЯ(1, 1, 1)";
		
		Запрос.Выполнить();
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеНачисления",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТОтборВозвратныхСобытийПлановыеНачисления", "Сотрудник,Начисление"),
			ПараметрыПостроения,
			"ВТПлановыеНачисленияВозвратные");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТОтборВозвратныхСобытийЗначенияПоказателей", "Сотрудник,Организация,Показатель"),
			ПараметрыПостроения,
			"ВТЗначенияПоказателейВозвратные");
		
	Иначе
		ИмяПоляСотрудник = "ФизическоеЛицо";
		ИмяПоляПорядка = "Регистратор";
		ИмяДополнительногоПоляПорядка = ИмяРеквизитаВидРасчета;
	КонецЕсли;
	
	КлючиОписанияНачисления = "ПериодЗаписи,Период,Регистратор,Сотрудник,ДокументОснование,Размер,Используется," + ИмяРеквизитаВидРасчета;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДействующиеПлановыеРасчеты.ПериодЗаписи,
	|	ДействующиеПлановыеРасчеты.Период,
	|	ДействующиеПлановыеРасчеты.Регистратор,
	|	ДействующиеПлановыеРасчеты." + ИмяПоляСотрудник + " КАК Сотрудник,
	|	ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + " КАК " + ИмяРеквизитаВидРасчета + ",
	|	ДействующиеПлановыеРасчеты.ДокументОснование КАК ДокументОснование,
	|	ДействующиеПлановыеРасчеты.Используется,";
	
	Если ИмяТаблицы = "Начисления" Тогда
		
		КлючиОписанияНачисления = КлючиОписанияНачисления + ",
			|Рассчитывается,
			|ПоказательЗависящийОтСтажа,
			|ДатаОкончанияНачисления,
			|ИспользуетсяПоОкончании,
			|РазмерПоОкончании";
		
		Запрос.Текст = Запрос.Текст + "
			|	ВЫБОР
			|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL
			|			ТОГДА ДействующиеПлановыеРасчеты.Размер
			|			ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
			|	КОНЕЦ КАК Размер,
			|	ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + ".Рассчитывается" + " КАК Рассчитывается,
			|	ВЫБОР КОГДА РасчетыПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ПоказательЗависящийОтСтажа,
			|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ПлановыеНачисленияВозвратные.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияНачисления,
			|	ПлановыеНачисленияВозвратные.Используется КАК ИспользуетсяПоОкончании,
			|	ПлановыеНачисленияВозвратные.Размер КАК РазмерПоОкончании,
			|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ЗначенияПоказателейВозвратные.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияПоказателя,
			|	ЗначенияПоказателейВозвратные.Значение КАК ЗначениеПоОкончании,";
		
		Если СодержитПолеХарактерНачисления Тогда
			
			КлючиОписанияНачисления = КлючиОписанияНачисления + ",ВидПлановогоНачисления";
			
			Запрос.Текст = Запрос.Текст + "
				|	ВЫБОР
				|		КОГДА НачисленияПозиций.ПозицияШтатногоРасписания ЕСТЬ NULL
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерПлановогоНачисления.Индивидуальное)
				|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХарактерПлановогоНачисления.Штатное)
				|	КОНЕЦ КАК ХарактерНачисления,";
		
		КонецЕсли;
		
		Если Не ИсключатьПособия Тогда
			
			КлючиОписанияНачисления = КлючиОписанияНачисления + ",Применение";
			
			Запрос.Текст = Запрос.Текст + "
				|	ВЫБОР
				|		КОГДА ВЫРАЗИТЬ(ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + " КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет))
				|			ТОГДА ИСТИНА
				|			ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ЭтоПособие,
				|	ВЫБОР
				|		КОГДА ВЫРАЗИТЬ(ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + " КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет))
				|			ТОГДА ИСТИНА
				|			ИНАЧЕ ЕСТЬNULL(ПрименениеПлановыхНачислений.Применение, Истина)
				|	КОНЕЦ КАК Применение,";
			
		КонецЕсли;
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
			|	ДействующиеПлановыеРасчеты.Размер КАК Размер,";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|	ЕСТЬNULL(РасчетыПоказатели.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Показатель,
		|	ЕСТЬNULL(ЗначенияПериодическихПоказателей.Значение, 0) КАК Значение
		|ПОМЕСТИТЬ ВТНачисленияСотрудников
		|ИЗ
		|	ВТПлановые" + ИмяТаблицы + "СрезПоследних КАК ДействующиеПлановыеРасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета." + ИмяТаблицы + ".Показатели КАК РасчетыПоказатели
		|			ПО ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + " = РасчетыПоказатели.Ссылка
		|				И (РасчетыПоказатели.ЗапрашиватьПриВводе)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
		|		ПО (ЗначенияПериодическихПоказателей.Показатель = РасчетыПоказатели.Показатель)
		|			И (ЗначенияПериодическихПоказателей.Значение <> 0)
		|			И (ЗначенияПериодическихПоказателей.ДокументОснование = ДействующиеПлановыеРасчеты.ДокументОснование)
		|			И (ЗначенияПериодическихПоказателей." + ИмяПоляСотрудник + " = ДействующиеПлановыеРасчеты." + ИмяПоляСотрудник + ")";
	
	Если ИмяТаблицы = "Начисления"  Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕСТЬNULL(ЗначенияПериодическихПоказателей.Значение, 0) КАК Значение",
			"ВЫБОР
			|		КОГДА Не ДействующиеПлановыеРасчеты.Используется И ПлановыеНачисленияВозвратные.Используется
			|			ТОГДА ЕСТЬNULL(ЗначенияПоказателейВозвратные.Значение, ЕСТЬNULL(ЗначенияПериодическихПоказателей.Значение, 0))
			|			ИНАЧЕ ЕСТЬNULL(ЗначенияПериодическихПоказателей.Значение, 0)
			|	КОНЕЦ КАК Значение");
		
		Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
			|		ПО ДействующиеПлановыеРасчеты.Период = ПлановыйФОТ.Период
			|			И ДействующиеПлановыеРасчеты.Сотрудник = ПлановыйФОТ.Сотрудник
			|			И ДействующиеПлановыеРасчеты.Начисление = ПлановыйФОТ.Начисление
			|			И ДействующиеПлановыеРасчеты.ДокументОснование = ПлановыйФОТ.ДокументОснование
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейВозвратные КАК ЗначенияПоказателейВозвратные
			|		ПО ЗначенияПериодическихПоказателей.ПериодВозвратногоСобытия = ЗначенияПоказателейВозвратные.Период
			|			И ЗначенияПериодическихПоказателей.Сотрудник = ЗначенияПоказателейВозвратные.Сотрудник
			|			И ЗначенияПериодическихПоказателей.Организация = ЗначенияПоказателейВозвратные.Организация
			|			И ЗначенияПериодическихПоказателей.ДокументОснование = ЗначенияПоказателейВозвратные.ДокументОснование
			|			И (ЗначенияПоказателейВозвратные.ЭтоВозвратноеСобытие)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияВозвратные КАК ПлановыеНачисленияВозвратные
			|		ПО ДействующиеПлановыеРасчеты.ПериодВозвратногоСобытия = ПлановыеНачисленияВозвратные.Период
			|			И ДействующиеПлановыеРасчеты.Сотрудник = ПлановыеНачисленияВозвратные.Сотрудник
			|			И ДействующиеПлановыеРасчеты.Начисление = ПлановыеНачисленияВозвратные.Начисление
			|			И ДействующиеПлановыеРасчеты.ДокументОснование = ПлановыеНачисленияВозвратные.ДокументОснование
			|			И (ПлановыеНачисленияВозвратные.ЭтоВозвратноеСобытие)";
		
		Если СодержитПолеХарактерНачисления Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТОтборовПозицийШтатногоРасписания + " КАК КадровыеДанныеСотрудников
			|			ПО ДействующиеПлановыеРасчеты.Период = КадровыеДанныеСотрудников.Период
			|				И ДействующиеПлановыеРасчеты.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПозиций КАК НачисленияПозиций
			|			ПО НАЧАЛОПЕРИОДА(ДействующиеПлановыеРасчеты.Период, ДЕНЬ) = НачисленияПозиций.Период
			|				И КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию = НачисленияПозиций.ПозицияШтатногоРасписания
			|				И ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + " = НачисленияПозиций.Начисление";
			
		КонецЕсли;
		
		Если Не ИсключатьПособия Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийСрезПоследних КАК ПрименениеПлановыхНачислений
				|			ПО ДействующиеПлановыеРасчеты.Период = ПрименениеПлановыхНачислений.Период
				|				И ДействующиеПлановыеРасчеты.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяТаблицы = "Начисления" Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	(ДействующиеПлановыеРасчеты.Используется
			|		Или ПлановыеНачисленияВозвратные.Используется)";
		
		Если ИсключатьПособия Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|	И НЕ ВЫРАЗИТЬ(ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + " КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет))";
			
		КонецЕсли;
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	ДействующиеПлановыеРасчеты.Используется";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ "
		|ВЫБРАТЬ * ИЗ ВТНачисленияСотрудников КАК НачисленияСотрудников";
	
	Если ИмяТаблицы = "Начисления" Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	ВЫРАЗИТЬ(НачисленияСотрудников." + ИмяРеквизитаВидРасчета + " КАК ПланВидовРасчета.Начисления).ЯвляетсяЛьготой = ЛОЖЬ";
		
	КонецЕсли;
	
	// Упорядочивание таблицы
	Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,";
		
	Если ИмяТаблицы = "Начисления" И Не ИсключатьПособия Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|	ЭтоПособие УБЫВ,";
		
	КонецЕсли;
		
	Если ПустаяСтрока(ИмяДополнительногоПоляПорядка) Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|	" + ИмяПоляПорядка + ".РеквизитДопУпорядочивания,
			|	" + ИмяПоляПорядка + ",
			|	ДокументОснование,
			|	Показатель";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
			|	" + ИмяПоляПорядка + ",
			|	" + ИмяДополнительногоПоляПорядка + ".РеквизитДопУпорядочивания,
			|	" + ИмяДополнительногоПоляПорядка + ",
			|	ДокументОснование,
			|	Показатель";
		
	КонецЕсли;
	
	ДанныеСотрудников = Новый Соответствие;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		Начисления = Новый Массив;
		Пока Выборка.СледующийПоЗначениюПоля(ИмяПоляПорядка) Цикл
			
			Если ПустаяСтрока(ИмяДополнительногоПоляПорядка) Тогда
				
				Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
					
					СтруктураНачисления = Новый Структура(КлючиОписанияНачисления);
					ЗаполнитьЗначенияСвойств(СтруктураНачисления, Выборка);
					
					Показатели = СобратьИнформациюОПоказателях(Выборка, СтруктураНачисления, ИмяТаблицы, ИмяРеквизитаВидРасчета);
					
					СтруктураНачисления.Вставить("Показатели", Показатели);
					Начисления.Добавить(СтруктураНачисления);
					
				КонецЦикла;
				
			Иначе
				
				Пока Выборка.СледующийПоЗначениюПоля(ИмяДополнительногоПоляПорядка) Цикл
					
					Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
						
						СтруктураНачисления = Новый Структура(КлючиОписанияНачисления);
						ЗаполнитьЗначенияСвойств(СтруктураНачисления, Выборка);
						
						Показатели = СобратьИнформациюОПоказателях(Выборка, СтруктураНачисления, ИмяТаблицы, ИмяРеквизитаВидРасчета);
						
						СтруктураНачисления.Вставить("Показатели", Показатели);
						Начисления.Добавить(СтруктураНачисления);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеСотрудников.Вставить(Выборка.Сотрудник, Новый Структура("Начисления", Начисления));
		
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок") Тогда
		
		// Дополнительные тарифные ставки, коэффициенты.
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты, ИмяПоляСотрудник),
			ПараметрыПостроения);
		
		КлючиОписанияПоказателей = "РабочееМесто,Показатель,Значение,ТекущееЗначение,ДействующийПоказатель,ИдентификаторСтрокиВидаРасчета";
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДействующиеДополнительныеПоказатели.Сотрудник КАК РабочееМесто,
			|	ДействующиеДополнительныеПоказатели.Показатель КАК Показатель,
			|	ЕСТЬNULL(ЗначенияПериодическихПоказателей.Значение, 0) КАК Значение,
			|	ЕСТЬNULL(ЗначенияПериодическихПоказателей.Значение, 0) КАК ТекущееЗначение,
			|	ИСТИНА КАК ДействующийПоказатель,
			|	0 КАК ИдентификаторСтрокиВидаРасчета
			|ИЗ
			|	ВТПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ДействующиеДополнительныеПоказатели
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
			|		ПО (ЗначенияПериодическихПоказателей.Показатель = ДействующиеДополнительныеПоказатели.Показатель)
			|			И (ЗначенияПериодическихПоказателей.Сотрудник = ДействующиеДополнительныеПоказатели.Сотрудник)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСотрудников КАК НачисленияСотрудников
			|		ПО ДействующиеДополнительныеПоказатели.Показатель = НачисленияСотрудников.Показатель
			|			И ДействующиеДополнительныеПоказатели.Сотрудник = НачисленияСотрудников.Сотрудник
			|ГДЕ
			|	ДействующиеДополнительныеПоказатели.Применение
			|	И НачисленияСотрудников.Показатель ЕСТЬ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	РабочееМесто";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("РабочееМесто") Цикл 
			
			ДополнительныеПоказатели = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
				
				ОписаниеПоказателя = Новый Структура(КлючиОписанияПоказателей);
				ЗаполнитьЗначенияСвойств(ОписаниеПоказателя, Выборка);
				ДополнительныеПоказатели.Добавить(ОписаниеПоказателя);
				
			КонецЦикла; 
			
			ДанныеСотрудника = ДанныеСотрудников.Получить(Выборка.РабочееМесто);
			Если ДанныеСотрудника = Неопределено Тогда
				ДанныеСотрудника = Новый Структура;
			КонецЕсли;
			
			ДанныеСотрудника.Вставить("ДополнительныеПоказатели", ДополнительныеПоказатели);
			ДанныеСотрудников.Вставить(Выборка.РабочееМесто, ДанныеСотрудника);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеСотрудников;
	
КонецФункции

Процедура РедактированиеСоставаНачисленийСотрудниковДействующиеНачисленияВРеквизит(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, ФормироватьСПериодичностьДень = Истина, ИсключатьПособия = Истина) Экспорт
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	ПутьКДаннымПоказатели = ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей;
	
	ДанныеПлановыхРасчетов = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
	ДанныеПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымПоказатели);
	
	ДанныеСотрудников = ДействующиеНачисленияСотрудников(
		СотрудникиДаты, ДокументСсылка, ОписаниеТаблицыВидовРасчета, ФормироватьСПериодичностьДень, ИсключатьПособия);
	
	ИдентификаторСтрокиВидаРасчета = ОписаниеТаблицыВидовРасчета.НомерТаблицы * 1000000 + 1;
	
	Для каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		
		Если ДанныеСотрудника.Значение.Свойство("Начисления") Тогда
			
			Для каждого ДанныеНачисления Из ДанныеСотрудника.Значение.Начисления Цикл
				
				СтрокаПлановыхРасчетов = ДанныеПлановыхРасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПлановыхРасчетов, ДанныеНачисления);
				
				Если ОписаниеТаблицыВидовРасчета.СодержитПолеСотрудник Тогда
					СтрокаПлановыхРасчетов[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаСотрудник] = ДанныеНачисления.Сотрудник;
				КонецЕсли;
				
				Если ТипЗнч(ДанныеПлановыхРасчетов) = Тип("ТаблицаЗначений") 
					И ДанныеПлановыхРасчетов.Колонки.Найти("Регистратор") 
					ИЛИ ТипЗнч(ДанныеПлановыхРасчетов) <> Тип("ТаблицаЗначений")
					И СтрокаПлановыхРасчетов.Свойство("Регистратор") Тогда
					
					СтрокаПлановыхРасчетов.Регистратор = ДанныеНачисления.Регистратор;
					
				КонецЕсли;
				
				СтрокаПлановыхРасчетов[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета] = ДанныеНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета];
				СтрокаПлановыхРасчетов.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
				СтрокаПлановыхРасчетов.ДействующийВидРасчета = ДанныеНачисления.Используется;
				
				ЕстьКолонкаРазмер = Ложь;
				Если ТипЗнч(ДанныеПлановыхРасчетов) = Тип("ТаблицаЗначений") Тогда
					ЕстьКолонкаРазмер = ДанныеПлановыхРасчетов.Колонки.Найти("Размер") <> Неопределено;
				Иначе
					ЕстьКолонкаРазмер = СтрокаПлановыхРасчетов.Свойство("Размер");
				КонецЕсли;
				
				Если ЕстьКолонкаРазмер Тогда
					
					СтрокаПлановыхРасчетов.Размер = ДанныеНачисления.Размер;
					Если Не ДанныеНачисления.Свойство("Рассчитывается") ИЛИ Не ДанныеНачисления.Рассчитывается Тогда
						
						ЕстьКолонкаТекущееЗначение1 = Ложь;
						Если ТипЗнч(ДанныеПлановыхРасчетов) = Тип("ТаблицаЗначений") Тогда
							ЕстьКолонкаТекущееЗначение1 = ДанныеПлановыхРасчетов.Колонки.Найти("ТекущееЗначение1") <> Неопределено;
						Иначе
							ЕстьКолонкаТекущееЗначение1 = СтрокаПлановыхРасчетов.Свойство("ТекущееЗначение1");
						КонецЕсли;
						
						Если ЕстьКолонкаТекущееЗначение1 Тогда
							СтрокаПлановыхРасчетов.ТекущееЗначение1 = ДанныеНачисления.Размер;
						КонецЕсли; 
						
					КонецЕсли;
					
				КонецЕсли;
				
				Для Каждого ОписаниеДанныхПоказателя Из ДанныеНачисления.Показатели Цикл
					
					ДанныеПоказателя = ДанныеПоказателей.Добавить();
					ЗаполнитьЗначенияСвойств(ДанныеПоказателя, ОписаниеДанныхПоказателя);
					
					ДанныеПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
					ДанныеПоказателя.ТекущееЗначение = ОписаниеДанныхПоказателя.Значение;
					
				КонецЦикла;
				
				ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		
		Если Не ДанныеСотрудника.Значение.Свойство("ДополнительныеПоказатели") Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ДанныеПоказателя Из ДанныеСотрудника.Значение.ДополнительныеПоказатели Цикл
			
			СтрокиПоказателя = ДанныеПоказателей.НайтиСтроки(Новый Структура("Показатель,ИдентификаторСтрокиВидаРасчета", ДанныеПоказателя.Показатель, 0));
			Если СтрокиПоказателя.Количество() = 0 Тогда
				СтрокаПоказателя = ДанныеПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоказателя, ДанныеПоказателя);
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СобратьИнформациюОПоказателях(Выборка, СтруктураНачисления, ИмяТаблицы, ИмяРеквизитаВидРасчета)
	
	Показатели = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Показатель) Тогда
			
			ОписаниеПоказателя = Новый Структура("Показатель,Значение");
			
			Если ИмяТаблицы = "Начисления" Тогда
				ОписаниеПоказателя.Вставить("ДатаОкончанияПоказателя");
				ОписаниеПоказателя.Вставить("ЗначениеПоОкончании");
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОписаниеПоказателя, Выборка);
			Показатели.Добавить(ОписаниеПоказателя);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

// Перенос данных документа в реквизит формы для форм документов, которые редактируют состав начислений.
//		ДокументСсылка - ссылка на документ, редактируемый в форме.
Процедура РедактированиеСоставаНачисленийДанныеВРеквизит(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ФормироватьСПериодичностьДень = Ложь, ДатаСобытия = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	Если СотрудникиДаты.Количество() > 0 Тогда
		
		ВводНачисленийДанныеВРеквизит(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы);
		УстановитьПредставленияКомандВводаСтажей(Форма, СотрудникиДаты, ОписаниеТаблицыВидовРасчета, РежимРаботы);
		РедактированиеСоставаНачисленийПрочитатьТекущиеДанные(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, , ДатаСобытия, ДатаОкончания);
		
	КонецЕсли;
	
КонецПроцедуры

// Перечитывает значения показателей, действующие до даты изменения начисления в форме документа.
// Выполняется, например, при смене даты перевода сотрудника для обновления данных о "прежних" показателях.
// 
// Требования:
//		Объект, редактируемый в форме имеет имя "Объект".
//		Имя таблицы формы и имя поля реквизита формы (параметр ИмяТаблицы) совпадают по именам (например, "Начисления").
//		Объект, редактируемый в форме имеет табличную часть "Показатели", предназначенную для 
//			хранения значений показателей редактируемых начислений.
// Параметры:
//		ДокументСсылка - ссылка на документ, редактируемый в форме.
//		СотрудникиДаты - список сотрудников, начисления которых редактируются. 
//			Представляет собой табличную часть с колонками.
//				Сотрудник
//				Период - дата, на которую получаются действующие начисления.
//		Форма
//		ОписаниеТаблицыВидовРасчета - описание табличной части объекта, содержащей редактируемые начисления
//			см. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета().
//
Процедура РедактированиеСоставаНачисленийПрочитатьТекущиеДанные(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ФормироватьСПериодичностьДень = Ложь, ДатаСобытия = Неопределено, ДатаОкончания = Неопределено) Экспорт
	РедактированиеСоставаНачисленийСотрудниковПрочитатьТекущиеДанные(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, ФормироватьСПериодичностьДень, ДатаСобытия, ДатаОкончания);
КонецПроцедуры

Процедура УстановитьКомментарииДействийСНачислениями(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДатаСобытия = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	Начисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
	
	Для Каждого СтрокаНачисления Из Начисления Цикл
		
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСНачислением(СтрокаНачисления,
			ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета, , РежимРаботы),
			РежимРаботы, ОписаниеТаблицыВидовРасчета, ДатаСобытия, ДатаОкончания);
		
	КонецЦикла;
	
КонецПроцедуры

// Дополнение формы, которая выполняет редактирование состава дополнительных показателей (таких как документ Кадровый
// перевод).
// Дополняет данные формы реквизитами и элементами формы, предназначенными для отображения текущих значений
// дополнительных показателей.
//  
Процедура РедактированиеСоставаДополнительныхПоказателейДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	ПутьКДаннымПоказателей = ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей;
	
	Если ДобавлятьРеквизитыФормы Тогда
		
		// Дополняем таблицу формы реквизитами для текущих значений и комментарием.
		// Элементы формы для отображения этих реквизитов вводить не будем, так 
		// как они не выводятся в форме, а используются только при условном оформлении.
		ДобавляемыеРеквизиты = Новый Массив;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееЗначение", Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты(), ПутьКДаннымПоказателей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДействующийПоказатель", Новый ОписаниеТипов("Булево"), ПутьКДаннымПоказателей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ПутьКДаннымПоказателей));										
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКДаннымПоказателей);
		ЗарплатаКадры.ДополнитьМассивИменРеквизитовФормыИзРеквизитовКДобавлению(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ДополнитьМассивИменРеквизитовФормыИзРеквизитовКДобавлению(Форма, МассивИменРеквизитовФормы, ПутьКДаннымПоказателей);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
	
	КонецЕсли;
	
	// Дополняем форму элементом для отображения комментария.
	Если ДобавлятьЭлементыФормы Тогда
		ПолеКомментарий = Форма.Элементы.Найти("ПоказателиКомментарий");
		Если ПолеКомментарий = Неопределено Тогда
			Таблица = Форма.Элементы.Найти("Показатели");
			ПолеКомментарий = Форма.Элементы.Добавить("ПоказателиКомментарий", Тип("ПолеФормы"), Таблица);
			ПолеКомментарий.ПутьКДанным = ПутьКДаннымПоказателей + ".Комментарий";
			ПолеКомментарий.Доступность = Истина;
			ПолеКомментарий.ОтображатьВШапке = Истина;
			ПолеКомментарий.ТолькоПросмотр = Истина;
			ПолеКомментарий.РастягиватьПоГоризонтали = Ложь;
			ПолеКомментарий.Ширина = 30;
		КонецЕсли;
	КонецЕсли;
	
	РедактированиеСоставаДополнительныхПоказателейУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета);
	
КонецПроцедуры

// Перенос данных документа в реквизит формы для форм документов, которые редактируют состав дополнительных показателей.
//
// Параметры:
//		ДокументСсылка - ссылка на документ, редактируемый в форме.
//
Процедура РедактированиеСоставаДополнительныхПоказателейДанныеВРеквизит(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, УходЗаРебенком = Ложь, ФормироватьСПериодичностьДень = Ложь) Экспорт 
	
	УстановитьКомментарииДействийСДополнительнымиПоказателями(Форма, ОписаниеТаблицыВидовРасчета);
	РедактированиеСоставаДополнительныхПоказателейСотрудниковПрочитатьТекущиеДанные(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, УходЗаРебенком, ФормироватьСПериодичностьДень);
	
КонецПроцедуры

Процедура УстановитьКомментарииДействийСДополнительнымиПоказателями(Форма, ОписаниеТаблицыВидовРасчета) Экспорт

	ПутьКДаннымПоказателей = ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей;

	Показатели = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымПоказателей);
	
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		Если СтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = 0 Тогда 
			ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСДополнительнымПоказателем(СтрокаПоказателя);
		КонецЕсли;	
	КонецЦикла;	
		
КонецПроцедуры	

// Осуществляет проверку заполнения состава плановых начислений объекта в форме. Проверяется наличие начисления,
// определяющего оклад (тариф) и заполненность показателя оклад (тариф).
//
// Параметры:
//		Форма 						- УправляемаяФорма
//		ОписаниеТаблицыВидовРасчета - Структура см. функцию РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета.
//		Отказ						- Булево
//		РежимРаботы					- Число, (0 - штатное расписание, 1 - кадровые приказы).
//
Процедура РедактированиеСоставаНачисленийПроверкаЗаполненияВФорме(Форма, ОписаниеТаблицыВидовРасчета, Отказ, РежимРаботы) Экспорт
	
	Если РежимРаботы <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
	
	МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,, РежимРаботы);
	
	РабочееМесто = Неопределено;
	Для каждого СтрокаНачисления Из ДанныеНачислений Цикл
		
		Если СтрокаНачисления.Свойство("Действие")
			И СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ОписаниеТаблицыВидовРасчета.СодержитПолеСотрудник Тогда
			РабочееМесто = СтрокаНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаСотрудник];
		КонецЕсли;
		
		Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаНачисления["Показатель" + НомерПоказателя]) Тогда
				Прервать;
			КонецЕсли;
			
			ИмяПоля = "Значение" + НомерПоказателя;
			ЗаданоЗначениеПоказателя = СтрокаНачисления[ИмяПоля];
			Если НЕ ЗаданоЗначениеПоказателя Тогда
				
				ИмяПоказателя = ?(ЗначениеЗаполнено(СтрокаНачисления["ПредставлениеПоказателя" + НомерПоказателя]),
					СтрокаНачисления["ПредставлениеПоказателя" + НомерПоказателя], СтрокаНачисления["Показатель" + НомерПоказателя]);
				
				Если ЗначениеЗаполнено(РабочееМесто) Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Для %1 не задано значение ""%2""';uk='Для %1 не задано значення ""%2""'"),
						РабочееМесто,
						ИмяПоказателя);
						
				Иначе
						
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не задано значение ""%1""';uk='Не має значення ""%1""'"),
						ИмяПоказателя);
						
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКДанным + "[" + ДанныеНачислений.Индекс(СтрокаНачисления) + "]." + ИмяПоля, , Отказ);
			
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в документах, редактирующих начисления
// (начисления в строках таблицы).

// Выполняет дополнение формы, предназначенной для ввода постоянных начислений.
// Требования:
//		Объект, редактируемый в форме имеет имя "Объект".
//		Имя таблицы формы и имя поля реквизита формы (параметр ИмяТаблицы) совпадают по именам (например, "Начисления").
// Параметры:
//		Форма
//		ОписаниеТаблицыВидовРасчета - описание табличной части объекта, содержащей редактируемые начисления
//			см. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета().
//		РежимРаботы - число. 0 - режим штатного расписания, 1 - режим плановых начислений, 2 - режим начислений в расчетном
//		              документе.
//		ИмяПВР - имя плана видов расчета.
//
Процедура ВводНачисленийДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИмяПВР, ДобавлятьЭлементыФормы = Истина,  ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь, ДокументСсылка = Неопределено) Экспорт
	
	КоличествоОтображаемыхПоказателей	= ЗарплатаКадрыРасширенныйПовтИсп.КоличествоОтображаемыхПоказателей(РежимРаботы, ИмяПВР, ДокументСсылка);
	КоличествоПоказателейРасчета 		= ЗарплатаКадрыРасширенныйПовтИсп.КоличествоПоказателейРасчета(РежимРаботы, ИмяПВР, ДокументСсылка);
	
	ВводНачисленийДобавитьЭлементыФормы(Форма, КоличествоПоказателейРасчета, КоличествоОтображаемыхПоказателей, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИмяПВР, Ложь, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
	
КонецПроцедуры

// Перенос данных табличной части со значениями показателей в реквизит формы документов, 
// предназначенных для ввода начислений.
// Требования:
//		- Имя таблицы формы и имя поля реквизита формы (см. параметр ОписаниеТаблицыВидовРасчета) 
//		  совпадают по именам (например, "Начисления").
//		- Объект, редактируемый в форме имеет табличную часть "Показатели", предназначенную для 
//		  хранения значений показателей редактируемых начислений.
// Параметры:
//		Объект - объект, содержащий коллекции данных, соответствующие табличным частям 
//			с видами расчетов документа и со значениями показателей.
//			Имя табличной части с начислениями передается как ОписаниеТаблицыВидовРасчета.ИмяТаблицы,
//			а имя табличной части с показателями всегда "Показатели".
//		ОписаниеТаблицыВидовРасчета - описание табличной части объекта, содержащей редактируемые начисления
//			см. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета().
//		РежимРаботы - режим работы таблицы с видами расчетов
//			0 - режим ввода штатного расписания - вводятся максимальные 
//				и минимальные значения ("вилка") условно-постоянных показателей
//			1 - режим ввода плановых начислений - вводятся значения 
//				условно-постоянных показателей
//			2 - режим ввода начислений в документе-начислятеле - вводятся значения всех 
//				показателей, отображаемых при виде расчета.
//		ОтображатьТекущиеЗначения - признак того, что в форме отображаются действующие на настоящий 
//			момент показатели начислений. Применяется, например, в документах кадровых переводов.
//			По умолчанию - Ложь
// 
Процедура ВводНачисленийДанныеВРеквизит(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ОтображатьТекущиеЗначения = Ложь, ФормаДополнена = Истина) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Если ОписаниеТаблицыВидовРасчета.ИспользоватьВилкуЗначений Тогда 
		ФОИспользоватьВилкуСтавокВШтатномРасписании = Истина;
	КонецЕсли;
	
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДанным);
	ДанныеПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей).Выгрузить();
	
	СтрокиНачисленийРедактируемыхВОтдельныхПолях = Новый Массив;
	
	ДанныеПоказателей.Индексы.Добавить("ИдентификаторСтрокиВидаРасчета,Показатель");
	Для Каждого СтрокаНачислений Из ДанныеНачислений Цикл
		ВидРасчета = ?(ОписаниеТаблицыВидовРасчета.СодержитПолеВидРасчета,
			СтрокаНачислений[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета],
			Форма.Объект[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета]);
		
		Если ВидРасчета.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		РасчетныйДокументСсылка = Неопределено;
		Если РежимРаботы = 2 Тогда
			// В других режимах расчетный документ не требуется уточнять.
			РасчетныйДокументСсылка = Форма.Объект.Ссылка;
		КонецЕсли;
		
		ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		
		Если ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(РежимРаботы, ОписаниеТаблицыВидовРасчета)
			И (ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
				ИЛИ ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка
				ИЛИ ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность) Тогда
			
			Если ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициентИспользуется", Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерРайонныйКоэффициент", СтрокаНачислений.Размер);
				
				ОтборСтрокПоказателей = Новый Структура("ИдентификаторСтрокиВидаРасчета,Показатель");
				ОтборСтрокПоказателей.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
				ОтборСтрокПоказателей.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент");
				
				СтрокиПоказателей = ДанныеПоказателей.НайтиСтроки(ОтборСтрокПоказателей);
				Если СтрокиПоказателей.Количество() > 0 Тогда
					РайонныйКоэффициент = СтрокиПоказателей[0].Значение;
				Иначе
					РайонныйКоэффициент = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "РайонныйКоэффициентСтруктурнойЕдиницы");
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяРайонныйКоэффициент", РайонныйКоэффициент);
				
			ИначеЕсли ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеСевернаяНадбавкаИспользуется", Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерСевернаяНадбавка", СтрокаНачислений.Размер);
				
			ИначеЕсли ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредностьИспользуется", Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерНадбавкаЗаВредность", СтрокаНачислений.Размер);
				
				ОтборСтрокПоказателей = Новый Структура("ИдентификаторСтрокиВидаРасчета,Показатель");
				ОтборСтрокПоказателей.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
				ОтборСтрокПоказателей.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность");
				
				СтрокиПоказателей = ДанныеПоказателей.НайтиСтроки(ОтборСтрокПоказателей);
				Если СтрокиПоказателей.Количество() > 0 Тогда
					ПроцентНадбавкиЗаВредность = СтрокиПоказателей[0].Значение;
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяНадбавкаЗаВредность", ПроцентНадбавкиЗаВредность);
				
			КонецЕсли;
			
			СтрокиНачисленийРедактируемыхВОтдельныхПолях.Добавить(СтрокаНачислений);
			
		Иначе
			ПоместитьДанныеПоказателейВСтрокуТаблицыВидовРасчета(ВидРасчетаИнфо, СтрокаНачислений, ДанныеПоказателей, РежимРаботы, ОтображатьТекущиеЗначения, РасчетныйДокументСсылка, ФормаДополнена, , , ОписаниеТаблицыВидовРасчета.ИспользоватьВилкуЗначений);
		КонецЕсли; 
		
		Если ОписаниеТаблицыВидовРасчета.ЭтоПлановыеНачисленияУдержания И Не ВидРасчетаИнфо.Рассчитывается Тогда 
			СтрокаНачислений.ФиксированнаяСумма = Истина;
			Если СтрокаНачислений.Свойство("ТочностьПоказателя1") Тогда 
				СтрокаНачислений["ТочностьПоказателя1"] = "ЧДЦ=2";
				Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					СтрокаНачислений["МинимальноеЗначение1"] = СтрокаНачислений.РазмерМин;
					СтрокаНачислений["МаксимальноеЗначение1"] = СтрокаНачислений.РазмерМакс;
					Если Не ВидРасчетаИнфо.ВключатьВФОТ Тогда
						СтрокаНачислений.РазмерМин = 0;
						СтрокаНачислений.РазмерМакс = 0;
					КонецЕсли; 
				Иначе
					Если СтрокаНачислений.Свойство("Значение1") Тогда
						СтрокаНачислений["Значение1"] = СтрокаНачислений.Размер;
						Если Не ВидРасчетаИнфо.ВключатьВФОТ Тогда
							СтрокаНачислений.Размер = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование) Тогда 
			СтрокаНачислений["ДоступенВыборОснования"] = ВидРасчетаИнфо.ПоддерживаетНесколькоПлановыхНачислений;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиНачисленийРедактируемыхВОтдельныхПолях.Количество() > 0 Тогда
		Для Каждого СтрокаНачисленийРедактируемыхВОтдельныхПолях Из СтрокиНачисленийРедактируемыхВОтдельныхПолях Цикл
			ДанныеНачислений.Удалить(СтрокаНачисленийРедактируемыхВОтдельныхПолях);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПредставленияКомандВводаСтажей(Форма, СотрудникиДаты, ОписаниеТаблицыВидовРасчета, РежимРаботы) Экспорт
	
	Если РежимРаботы = 1 И СотрудникиДаты.Количество() > 0 Тогда
		
		СтажиСотрудников = КадровыйУчетРасширенный.СведенияОСтажахСотрудников(СотрудникиДаты);
		ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДанным);
		Для Каждого СтрокаНачислений Из ДанныеНачислений Цикл
			
			Если СтрокаНачислений.ВидыСтажаПоказателей <> Неопределено Тогда
				
				Если ОписаниеТаблицыВидовРасчета.СодержитПолеСотрудник Тогда
					Сотрудник = СтрокаНачислений[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаСотрудник]
				Иначе
					Сотрудник = СотрудникиДаты[0].Сотрудник;
				КонецЕсли;
				
				СтажиСотрудника = СтажиСотрудников.Получить(Сотрудник);
				
				Если СтажиСотрудника <> Неопределено Тогда
					
					СтрокаНачислений.ОписаниеСтажевыхПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставленияКомандыВводаСтажейСотрудника(
						СтажиСотрудника, СтрокаНачислений.ВидыСтажаПоказателей);
						
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводРаспределенияРезультатовРасчетаДанныеВРеквизит(Форма, ОписанияТаблиц) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписанияТаблиц) <> Тип("Массив") Тогда
		ОписанияТаблиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблиц);
	КонецЕсли;
	
	Для Каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл
		
		ИменаКолонокТаблицы = ЗарплатаКадрыРасширенныйКлиентСервер.ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицы);
		
		ДанныеОсновнаяТаблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
		ДанныеРаспределения   = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов).Выгрузить();
		ИмяРеквизитаИдентификаторСтроки = ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки;
		
		ОтражениеЗарплатыВБухучетеРасширенный.ДополнитьТаблицуРаспределенияКодомСтатьиФинансирования(ДанныеРаспределения);
		
		ДанныеРаспределения.Индексы.Добавить("ИдентификаторСтроки");
		ОтборСтрок = Новый Структура("ИдентификаторСтроки");
		
		Для Каждого СтрокаОсновнойТаблицы Из ДанныеОсновнаяТаблица Цикл
			
			ОтборСтрок.ИдентификаторСтроки = СтрокаОсновнойТаблицы[ИмяРеквизитаИдентификаторСтроки];
			ТаблицаРаспределения = ДанныеРаспределения.Скопировать(ОтборСтрок, ИменаКолонокТаблицы);
			СтруктураРаспределения = ТаблицаЗначенийВСтруктуру(ТаблицаРаспределения);
			СтрокаОсновнойТаблицы.РезультатРаспределения = СтруктураРаспределения;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Перенос данных из реквизита формы в табличную часть с показателями.
// Требования:
//		- Имя таблицы формы и имя поля реквизита формы (см. параметр ОписаниеТаблицыВидовРасчета) 
//		  совпадают по именам (например, "Начисления").
//		- Объект, редактируемый в форме имеет табличную часть "Показатели", предназначенную для 
//		  хранения значений показателей редактируемых начислений.
// Параметры:
//		Форма
//		Объект - объект, содержащий коллекции данных, соответствующие табличным частям 
//			с видами расчетов документа и со значениями показателей.
//			Имя табличной части с начислениями передается как ОписаниеТаблицыВидовРасчета.ИмяТаблицы,
//			а имя табличной части с показателями всегда "Показатели".
//		ОписанияТаблицРасчета - описание табличной части объекта или массив таких описаний, если таблиц несколько, 
//			содержащей редактируемые начисления см. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета.
//		РежимРаботы - режим работы таблицы с видами расчетов
//			0 - режим ввода штатного расписания - вводятся максимальные 
//				и минимальные значения ("вилка") условно-постоянных показателей
//			1 - режим ввода плановых начислений - вводятся значения 
//				условно-постоянных показателей
//			2 - режим ввода начислений в документе-начислятеле - вводятся значения всех 
//				показателей, отображаемых при виде расчета.
//		ПодготавливатьТабличнуюЧастьПоказатели - Булево, если истина, перед переносом данных подготавливается
//				табличная часть показатели.
//
Процедура ВводНачисленийРеквизитВДанные(Форма, Объект, ОписанияТаблицРасчета, РежимРаботы, ПодготавливатьТабличнуюЧастьПоказатели = Истина) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодготавливатьТабличнуюЧастьПоказатели Тогда
		ПодготовитьТабличнуюЧастьПоказатели(Объект);
	КонецЕсли; 
	
	Если ТипЗнч(ОписанияТаблицРасчета) <> Тип("Массив") Тогда
		ОписанияТаблицРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблицРасчета);
	КонецЕсли;
	
	Для Каждого ОписаниеТаблицы Из ОписанияТаблицРасчета Цикл
		ВводНачисленийРеквизитВДанныеТаблицыРасчета(Форма, Объект, ОписаниеТаблицы, РежимРаботы);
	КонецЦикла;
	
КонецПроцедуры

// Перенос данных из реквизита формы в табличную часть с распределение результатов начислений или удержаний.
// Требования:
//		- Имя таблицы формы и имя поля реквизита формы (см. параметр ОписаниеТаблицыВидовРасчета) 
//		  совпадают по именам (например, "Начисления").
//		- Объект, редактируемый в форме имеет табличную часть , предназначенную для 
//		  хранения значений показателей редактируемых начислений.
// Параметры:
//		Форма
//		Объект - объект, содержащий коллекции данных, соответствующие табличным частям 
//			с видами расчетов документа и со значениями показателей.
//			Имя табличной части с начислениями передается как ОписаниеТаблицыВидовРасчета.ИмяТаблицы,
//			а имя табличной части с показателями всегда "Показатели".
//		ОписанияТаблицРасчета - описание табличной части объекта или массив таких описаний, если таблиц несколько, 
//			содержащей редактируемые начисления см. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета.
//
Процедура ВводРаспределенияРезультатовРасчетаРеквизитВДанные(Форма, Объект, ОписанияТаблицРасчета) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписанияТаблицРасчета) <> Тип("Массив") Тогда
		ОписанияТаблицРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблицРасчета);
	КонецЕсли;
	
	ОчищенныеТаблицыРаспределения = Новый Массив;

	Для Каждого ОписаниеТаблицы Из ОписанияТаблицРасчета Цикл
		
		ПутьКДанным  = ОписаниеТаблицы.ПутьКДанным;
		ИмяТаблицыРаспределения = ЗарплатаКадрыРасширенныйКлиентСервер.ИмяТаблицыРаспределениеРезультатовРасчета(ОписаниеТаблицы);
		ИмяРеквизитаИдентификаторСтроки = ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки;
		НомерТаблицы = ОписаниеТаблицы.НомерТаблицы;
		УстанавливатьИдентификаторСтроки = ОписаниеТаблицы.УстанавливатьИдентификаторСтрокиРаспределенияРезультата;
		
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
		ИмяТабличнойЧасти = Подстроки[Подстроки.ВГраница()];
	
		Если ОчищенныеТаблицыРаспределения.Найти(ИмяТаблицыРаспределения) = Неопределено Тогда
			ОчищенныеТаблицыРаспределения.Добавить(ИмяТаблицыРаспределения);
			Объект[ИмяТаблицыРаспределения].Очистить();
		КонецЕсли;
		
		ДанныеОсновнаяТаблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		
		Если УстанавливатьИдентификаторСтроки Тогда
			ИдентификаторСтроки = НомерТаблицы*1000000;
		КонецЕсли;
		
		РаспределениеРезультатов = Неопределено;
		Если ЗначениеЗаполнено(ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияРезультатовВХранилище) Тогда
			АдресРаспределенияРезультатовВХранилище = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияРезультатовВХранилище);
			РаспределениеРезультатов = ПолучитьИзВременногоХранилища(АдресРаспределенияРезультатовВХранилище);
		КонецЕсли;
		
		Для Каждого СтрокаОсновнойТаблицы Из ДанныеОсновнаяТаблица Цикл
			
			Если УстанавливатьИдентификаторСтроки Тогда
				ИдентификаторСтроки = ИдентификаторСтроки + 1;
				Объект[ИмяТабличнойЧасти][ДанныеОсновнаяТаблица.Индекс(СтрокаОсновнойТаблицы)][ИмяРеквизитаИдентификаторСтроки] = ИдентификаторСтроки;
				СтрокаОсновнойТаблицы[ИмяРеквизитаИдентификаторСтроки] = ИдентификаторСтроки;
			Иначе
				ИдентификаторСтроки    = СтрокаОсновнойТаблицы[ИмяРеквизитаИдентификаторСтроки];
			КонецЕсли;
			
			РезультатРаспределения = СтрокаОсновнойТаблицы.РезультатРаспределения;
			
			Если РезультатРаспределения = Неопределено И РаспределениеРезультатов <> Неопределено Тогда
				ИсходныйИдентификаторСтроки = ?(ОписаниеТаблицы.ИмяТаблицы = "НДФЛ", 
					СтрокаОсновнойТаблицы[ИмяРеквизитаИдентификаторСтроки], 
					НомерТаблицы * 1000000 + СтрокаОсновнойТаблицы.ИсходныйНомерСтроки);
				Отбор = Новый Структура("ИдентификаторСтроки", ИсходныйИдентификаторСтроки);
				РезультатРаспределения = РаспределениеРезультатов.НайтиСтроки(Отбор);
			КонецЕсли;
			
			Если РезультатРаспределения <> Неопределено Тогда
				
				Для Каждого СтрокаРаспределения Из РезультатРаспределения Цикл
					
					НоваяСтрока = Объект[ИмяТаблицыРаспределения].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
					НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет в таблице формы поля точности показателей.
Процедура ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(Форма, МассивОписанийТаблицФормы, Сотрудники = Неопределено) Экспорт
	
	Для Каждого ОписаниеТаблицы Из МассивОписанийТаблицФормы Цикл
		ИмяТаблицы = ОписаниеТаблицы.Ключ;
		ПутьКДанным = ОписаниеТаблицы.Значение.ПутьКДанным;
		СодержитПолеСотрудник = ОписаниеТаблицы.Значение.СодержитПолеСотрудник;
		ИмяРеквизитаСотрудник = ОписаниеТаблицы.Значение.ИмяРеквизитаСотрудник;
		
		Начисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателей(Форма, ИмяТаблицы);
		
		Если Начисления.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		Если Сотрудники <> Неопределено Тогда
			Если Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.Сотрудники") Тогда 
				УстановитьПривилегированныйРежим(Истина);
				ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(
					ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо"), "Значение", Истина);
				УстановитьПривилегированныйРежим(Ложь);
			Иначе 
				ФизическиеЛица = Сотрудники;
			КонецЕсли;
		КонецЕсли;
		ЭтоСотрудники = СодержитПолеСотрудник И ТипЗнч(Начисления[0][ИмяРеквизитаСотрудник]) = Тип("СправочникСсылка.Сотрудники");
		
		ВидыРасчета = ?(ОписаниеТаблицы.Значение.СодержитПолеВидРасчета,
			ОбщегоНазначения.ВыгрузитьКолонку(Начисления, ОписаниеТаблицы.Значение.ИмяРеквизитаВидРасчета, Истина),
		    ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Объект[ОписаниеТаблицы.Значение.ИмяРеквизитаВидРасчета]));
		ВидыРасчетаИнфо = ИнформацияОВидахРасчета(ВидыРасчета);	
		
		Для Каждого СтрокаНачислений Из Начисления Цикл
			
			Если СодержитПолеСотрудник И Сотрудники <> Неопределено Тогда
				ОбработатьСтроку = ЭтоСотрудники И Сотрудники.Найти(СтрокаНачислений[ИмяРеквизитаСотрудник]) <> Неопределено
					Или Не ЭтоСотрудники И ФизическиеЛица.Найти(СтрокаНачислений[ИмяРеквизитаСотрудник]) <> Неопределено;
				Если Не ОбработатьСтроку Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
				Показатель = СтрокаНачислений["Показатель" + НомерПоказателя];
				Если Не ЗначениеЗаполнено(Показатель) Тогда
					Продолжить;
				КонецЕсли;
				ПоказательИнфо = СведенияОПоказателеРасчетаЗарплаты(СтрокаНачислений["Показатель" + НомерПоказателя]);
				СтрокаНачислений["ТочностьПоказателя" + НомерПоказателя] 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);
				СтрокаНачислений["ПредставлениеПоказателя" + НомерПоказателя] 	= ?(ЗначениеЗаполнено(ПоказательИнфо["КраткоеНаименование"]), ПоказательИнфо["КраткоеНаименование"], ПоказательИнфо["Наименование"]);
			КонецЦикла;
			
			ВидРасчета = ?(ОписаниеТаблицы.Значение.СодержитПолеВидРасчета,
				СтрокаНачислений[ОписаниеТаблицы.Значение.ИмяРеквизитаВидРасчета],
				Форма.Объект[ОписаниеТаблицы.Значение.ИмяРеквизитаВидРасчета]);
			
			Если ВидРасчета.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			ВидРасчетаИнфо = ВидыРасчетаИнфо[ВидРасчета];  
			
			УчетСреднегоЗаработка.ЗаполнитьДанныеПоказателейРасчетаЗарплаты(ВидРасчетаИнфо, СтрокаНачислений, Неопределено, 2, , Форма.Объект.Ссылка);
			ЗаполнитьДанныеПоказателейСдельногоЗаработка(ВидРасчетаИнфо, СтрокаНачислений, 2, Форма.Объект.Ссылка);
			РасчетЗарплатыРасширенныйПереопределяемый.ПоместитьДанныеДополнительныхПоказателейВСтрокуТаблицыВидовРасчета(ВидРасчетаИнфо, СтрокаНачислений, Неопределено, 2);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьТабличнуюЧастьПоказатели(Объект)
	
	// Удаляем только показатели, «привязанные» к начислениям, 
	// независимые показатели редактируются непосредственно в табличной части.
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаПоказателей Из Объект.Показатели Цикл
		Если СтрокаПоказателей.ИдентификаторСтрокиВидаРасчета <> 0 Тогда
			УдаляемыеСтроки.Добавить(СтрокаПоказателей);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект.Показатели.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Преобразует таблицу значений в структуру.
// Параметры:
//		Таблица - таблица значений
//		ИмяКлючаСтрок, строка с именем ключа для строк таблицы, к ключу будет добавлен номер строки.
//
Функция ТаблицаЗначенийВСтруктуру(Таблица, ИмяКлючаСтрок = "Поле") Экспорт

	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Таблица Цикл
		СтруктураСтрока = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		МассивСтрок.Добавить(Новый ФиксированнаяСтруктура(СтруктураСтрока));
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(МассивСтрок);

КонецФункции

// Определяет необходимость дополнительных действий по обслуживанию распределения по территориям и условиям труда.
//
Функция ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Знач Организация = Неопределено) Экспорт
	Возврат ЗарплатаКадрыРасширенныйПовтИсп.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация);
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в документах, рассчитывающих начисления.

// Процедура заполняет в таблице формы поле - признак использования периода.
Процедура ПериодНачисленияЗаполнитьИспользованиеПериода(Форма, МассивОписанийТаблицФормы, Сотрудники = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из МассивОписанийТаблицФормы Цикл
		Описание = КлючИЗначение.Значение;
		ПутьКДанным = Описание.ПутьКДанным;
		ИмяРеквизитаВидРасчета = Описание.ИмяРеквизитаВидРасчета;
		ИмяРеквизитаДатаНачала  = Описание.ИмяРеквизитаДатаНачала;
		ИмяРеквизитаДатаОкончания  = Описание.ИмяРеквизитаДатаОкончания;
		ИмяРеквизитаСотрудник  = Описание.ИмяРеквизитаСотрудник;
		Начисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		Если Начисления.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		Если Сотрудники <> Неопределено Тогда
			Если Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.Сотрудники") Тогда 
				УстановитьПривилегированныйРежим(Истина);
				ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(
					ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо"), "Значение", Истина);
				УстановитьПривилегированныйРежим(Ложь);
			Иначе 
				ФизическиеЛица = Сотрудники;
			КонецЕсли;
		КонецЕсли;
		ЭтоСотрудники = Описание.СодержитПолеСотрудник И ТипЗнч(Начисления[0][ИмяРеквизитаСотрудник]) = Тип("СправочникСсылка.Сотрудники");
		Для Каждого СтрокаНачислений Из Начисления Цикл
			Если Описание.СодержитПолеСотрудник И Сотрудники <> Неопределено Тогда
				ОбработатьСтроку = ЭтоСотрудники И Сотрудники.Найти(СтрокаНачислений[ИмяРеквизитаСотрудник]) <> Неопределено
					Или Не ЭтоСотрудники И ФизическиеЛица.Найти(СтрокаНачислений[ИмяРеквизитаСотрудник]) <> Неопределено;
				Если Не ОбработатьСтроку Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачислений[ИмяРеквизитаВидРасчета]);
			Если ИнфоОВидеРасчета.ЭтоНачисление Тогда
				СтрокаНачислений.ИспользованиеПериода = ИнфоОВидеРасчета.ИспользованиеПериода;
				Если СтрокаНачислений.Свойство("ПериодДействияСтрокой") Тогда
					ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(СтрокаНачислений, "ПериодДействия", "ПериодДействияСтрокой");
				КонецЕсли;
			Иначе
				СтрокаНачислений.ИспользуетсяПериод = ИнфоОВидеРасчета.СпособВыполненияУдержания <> ПредопределенноеЗначение("Перечисление.СпособыВыполненияУдержаний.ПоЗначениюПоказателяПриОкончательномРасчете");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в документах, редактирующих начисления
// (начисления в шапке).

Процедура ВводНачисленийВШапкеДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДобавлятьЭлементыФормы = Истина) Экспорт 
	
	ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ВидРасчета = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект." + ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета);
	
	ДобавляемыеРеквизиты = Новый Массив;
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	
	ТаблицаПоказатели = Новый РеквизитФормы("Показатели", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(ТаблицаПоказатели);
	
	ОписательПоказателя = Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты");
	РеквизитПоказательТаблицыПоказатели = Новый РеквизитФормы("Показатель", ОписательПоказателя, "Показатели");
	
	ДобавляемыеРеквизиты.Добавить(РеквизитПоказательТаблицыПоказатели);
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы); 
	
	Форма.Показатели.Очистить();
	
	МассивОписанийПоказателей = Новый Массив;
	
	Если ВидРасчета.Пустая() Тогда
		КоличествоОтображаемыхПоказателей = 0;
		КоличествоПоказателейРасчета = 0;
	Иначе
		ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		Для Каждого ОписаниеПоказателя Из ВидРасчетаИнфо.Показатели Цикл
			Если (РежимРаботы = 1 И ОписаниеПоказателя.ЗапрашиватьПриВводе)
				ИЛИ (РежимРаботы = 2 И ОписаниеПоказателя.ИспользоватьПриРасчете)Тогда
				
				ПоказательИнфо = СведенияОПоказателеРасчетаЗарплаты(ОписаниеПоказателя.Показатель);
				Если (РежимРаботы = 1 
					И ПоказательИнфо.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное
					И Не ПоказательИнфо.ЗначениеРассчитываетсяАвтоматически)
					ИЛИ (РежимРаботы = 2 И ПоказательИнфо.ОтображатьВДокументахНачисления) Тогда
					
					ПоказательИнфо.Вставить("Показатель", ОписаниеПоказателя.Показатель);
					МассивОписанийПоказателей.Добавить(ПоказательИнфо);
					
					СтрокаПоказатель = Форма["Показатели"].Добавить();
					СтрокаПоказатель.Показатель = ОписаниеПоказателя.Показатель;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если РежимРаботы = 1 Тогда
			КоличествоПоказателейРасчета = ВидРасчетаИнфо.КоличествоПостоянныхПоказателей;
			КоличествоОтображаемыхПоказателей = КоличествоПоказателейРасчета;
		Иначе
			КоличествоПоказателейРасчета = ВидРасчетаИнфо.КоличествоПоказателейИспользуемыхПриРасчете;
			КоличествоОтображаемыхПоказателей = ВидРасчетаИнфо.КоличествоОтображаемыхПоказателей;
		КонецЕсли;
	КонецЕсли;
	
	ВводНачисленийДобавитьЭлементыФормы(Форма, КоличествоПоказателейРасчета, КоличествоОтображаемыхПоказателей, ОписаниеТаблицыВидовРасчета, РежимРаботы, ВидРасчета.Метаданные().Имя, ДобавлятьЭлементыФормы);
	
	Если ДобавлятьЭлементыФормы Тогда 
		Для СчетчикПоказателей = 1 По КоличествоОтображаемыхПоказателей Цикл
			ОписаниеПоказателя = МассивОписанийПоказателей[СчетчикПоказателей - 1];
			Форма.Элементы[ИмяТаблицы + "Значение" + СчетчикПоказателей].Заголовок = ?(ЗначениеЗаполнено(ОписаниеПоказателя.КраткоеНаименование), ОписаниеПоказателя.КраткоеНаименование, ОписаниеПоказателя.Наименование);
			Форма.Элементы[ИмяТаблицы + "Значение" + СчетчикПоказателей].ОграничениеТипа = 
				?(РежимРаботы = 2, ОписаниеПоказателя.ТипПоказателяПриРасчете, ОписаниеПоказателя.ТипПоказателя);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНачисленийВШапкеВидРасчетаПриИзменении(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДобавлятьЭлементыФормы = Истина) Экспорт
	ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	
	ГруппаПоказатели = Форма.Элементы.Найти(ИмяТаблицы + "Показатели");
	Если ГруппаПоказатели <> Неопределено Тогда  
		ЗарплатаКадры.УдалитьПодчиненныеЭлементыГруппы(Форма, ГруппаПоказатели);
		Форма.Элементы.Удалить(ГруппаПоказатели);		
	КонецЕсли;	
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,, РежимРаботы) Цикл
		МассивУдаляемыхРеквизитов.Добавить(ПутьКДанным + ".Показатель" + НомерПоказателя);
		МассивУдаляемыхРеквизитов.Добавить(ПутьКДанным + ".Значение" + НомерПоказателя);
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
				
	ВводНачисленийВШапкеДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДобавлятьЭлементыФормы);
	
КонецПроцедуры	

Процедура ВводНачисленийВШапкеДанныеВРеквизит(Объект, ОписаниеТаблицыВидовРасчета, РежимРаботы = 1) Экспорт
	
	ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	ИмяРеквизитаВидРасчета = ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета;
	
	ВидРасчета = Объект[ИмяРеквизитаВидРасчета];
	
	ДанныеПоказателей = Объект.Показатели;
	
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
	
	РасчетныйДокументСсылка = Неопределено;
	Если РежимРаботы = 2 Тогда
		// В других режимах расчетный документ не требуется уточнять.
		РасчетныйДокументСсылка = Объект.Ссылка;
	КонецЕсли;
	
	ДанныеНачислений = Объект[ИмяТаблицы];
	Для Каждого СтрокаНачислений Из ДанныеНачислений Цикл
		ПоместитьДанныеПоказателейВСтрокуТаблицыВидовРасчета(ВидРасчетаИнфо, СтрокаНачислений, ДанныеПоказателей, РежимРаботы, , РасчетныйДокументСсылка, , , , ОписаниеТаблицыВидовРасчета.ИспользоватьВилкуЗначений);
	КонецЦикла;	
	
КонецПроцедуры

Функция МассивПоказателейВремени() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях"));
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах"));
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени"));
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях"));
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней"));
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах"));
	
	Возврат МассивПоказателей;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции показателей расчета.

// Получает информацию о показателях расчета зарплаты.
//
// Параметры:
//	- Показатели - массив показателей расчета зарплаты.
//
// Возвращаемое значение - соответствие, ключ - показатель, 
//	значение - структура сведений о показателе с полями:
//	- СпособВвода - способ ввода показателя (Перечисление СпособыВводаЗначенийПоказателейРасчетаЗарплаты).
//	- ТипПоказателя - Описание типов. "Настоящий" тип показателя, используемый при вводе 
//							значений показателя в кадровых документах, штатном расписании и других 
//							документах ввода значений.
//	- ТипПоказателяПриРасчете - Описание типов. Тип при вводе/редактировании числовых 
//								значения показателя в документах начисления.
//	- Валюта
//	- ЗначениеРассчитываетсяАвтоматически
//	- СпособПримененияЗначений
//	- СпособВводаЗначений
//	- Наименование
//	- ОтображатьВДокументахНачисления
//
Функция СведенияОПоказателяхРасчетаЗарплаты(Показатели) Экспорт
	
	ИменаРеквизитов = 
	"ЗначениеРассчитываетсяАвтоматически,
	|Идентификатор,
	|НазначениеПоказателя,
	|СпособПримененияЗначений,
	|СпособВводаЗначений,
	|ТипПоказателя,
	|Точность,
	|Наименование,
	|КраткоеНаименование,
	|ОтображатьВДокументахНачисления,
	|ВидТарифнойСтавки,
	|НеИспользуется";
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Показатели, ИменаРеквизитов);
	
	СведенияОПоказателях = Новый Соответствие;
	
	СтажевыеПоказатели = Новый Массив;
	
	ПоказательСевернаяНадбавка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка");
	Для Каждого КлючИЗначение Из ЗначенияРеквизитов Цикл
		
		СведенияОПоказателе = КлючИЗначение.Значение;
		СведенияОПоказателе.Вставить("ЭтоШкалаОценки", СведенияОПоказателе.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтДругогоПоказателя);
		
		Если КлючИЗначение.Ключ = ПоказательСевернаяНадбавка Тогда
			СведенияОПоказателе.Вставить("ЭтоПоказательЗависящийОтСтажа", Истина);
		Иначе
			СведенияОПоказателе.Вставить("ЭтоПоказательЗависящийОтСтажа", СведенияОПоказателе.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа);
		КонецЕсли;
		
		СведенияОПоказателе.ТипПоказателя = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, СведенияОПоказателе.Точность));
		СведенияОПоказателе.Вставить("ЗначениеПоУмолчанию", 0);
		СведенияОПоказателе.Вставить("ТипПоказателяПриРасчете", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, СведенияОПоказателе.Точность)));
		СведенияОПоказателе.Вставить("ВводитсяНепосредственноПриРасчете", СведенияОПоказателе.СпособВводаЗначений = Перечисления.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете);
		Если СведенияОПоказателе.ЭтоПоказательЗависящийОтСтажа Тогда
			СтажевыеПоказатели.Добавить(КлючИЗначение.Ключ);
			СведенияОПоказателе.Вставить("МаксимальноеЗначение");
		КонецЕсли; 
		СведенияОПоказателях.Вставить(КлючИЗначение.Ключ, СведенияОПоказателе);
		
	КонецЦикла;
	
	Если СтажевыеПоказатели.Количество() > 0 Тогда
		
		ЗначенияСтажевыхПоказателей = ДанныеСтажевыхПоказателей(СтажевыеПоказатели);
		Для Каждого ОписаниеПоказателя Из ЗначенияСтажевыхПоказателей Цикл
			СведенияОПоказателе = СведенияОПоказателях.Получить(ОписаниеПоказателя.Показатель);
			Если ОписаниеПоказателя.Показатель = ПоказательСевернаяНадбавка Тогда
				СведенияОПоказателе.Вставить("ВидСтажа", Справочники.ВидыСтажа.СтажРаботыНаСевере());
			Иначе
				СведенияОПоказателе.Вставить("ВидСтажа", ОписаниеПоказателя.ВидСтажа);
				СведенияОПоказателе.Вставить("МаксимальноеЗначение", ОписаниеПоказателя.Значение);
			КонецЕсли;
			
			СведенияОПоказателях.Вставить(ОписаниеПоказателя.Показатель, СведенияОПоказателе);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СведенияОПоказателях;
	
КонецФункции

Функция ДанныеСтажевыхПоказателей(Показатели)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Показатели", Показатели);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиРасчетаЗарплаты.Ссылка КАК Показатель,
		|	ПоказателиРасчетаЗарплаты.ВидСтажа КАК ВидСтажа,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ЗначениеПоказателя, 0)) КАК Значение
		|ИЗ
		|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ПоказателиРасчетаЗарплатыШкалаОценкиСтажа
		|		ПО ПоказателиРасчетаЗарплаты.Ссылка = ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка
		|ГДЕ
		|	ПоказателиРасчетаЗарплаты.Ссылка В(&Показатели)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоказателиРасчетаЗарплаты.Ссылка,
		|	ПоказателиРасчетаЗарплаты.ВидСтажа";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает информацию об одном показателе расчета зарплаты
// с использованием метода 
// ЗарплатаКадрыРасширенный.СведенияОПоказателяхРасчетаЗарплаты.
//
// Параметры:
//	- Показатель - показатель расчета зарплаты.
//
Функция СведенияОПоказателеРасчетаЗарплаты(Показатель) Экспорт
	
	Возврат ЗарплатаКадрыРасширенныйПовтИсп.СведенияОПоказателеРасчетаЗарплаты(Показатель);
	
КонецФункции

// Составляет массив элементов справочника Показатели расчета зарплаты 
// по строке с формулой расчета.
//
// Параметры:
//	- Формула - строка с текстом формулы расчета.
//
// Возвращаемое значение - массив показателей.
//
Функция ПоказателиФормулы(Формула, Отказ = Неопределено) Экспорт
	
	Показатели = Новый Массив;
	
	Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Формула);
	Для Каждого Слово Из Слова Цикл
		Показатель = РасчетЗарплатыРасширенный.ПоказательПоИдентификатору(Слово);
		Если Показатель <> Неопределено Тогда
			Показатели.Добавить(Показатель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

// Процедура заполняет табличную часть Показатели вида расчета.
//
Процедура ОбновитьПоказателиФормулыРасчета(ВидРасчетаОбъект, Отказ, НедопустимыеПоказатели = Неопределено) Экспорт
	
	ЭтоНачисление = ТипЗнч(ВидРасчетаОбъект) = Тип("ПланВидовРасчетаОбъект.Начисления");
	ЭтоЛьгота = ЭтоНачисление И ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Льгота;
	УчитываетсяПриРасчете = Не ЭтоЛьгота Или (ЭтоЛьгота И ВидРасчетаОбъект.ЛьготаУчитываетсяПриРасчетеЗарплаты);
	
	ВидРасчетаОбъект.ИспользуетФормулу = РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(ВидРасчетаОбъект.СпособРасчета);
	Если ВидРасчетаОбъект.ИспользуетФормулу И ВидРасчетаОбъект.Рассчитывается И УчитываетсяПриРасчете Тогда 
		ПараметрыВыполненияФормулы = РасчетЗарплатыРасширенный.ПараметрыВыполненияФормулы(ВидРасчетаОбъект.ФормулаРасчета, Истина, НедопустимыеПоказатели);
		Если ПараметрыВыполненияФормулы = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		СведенияОПоказателях = СведенияОПоказателяхРасчетаЗарплаты(ПараметрыВыполненияФормулы.ПоказателиФормулы);
		ЗарплатаКадрыРасширенныйКлиентСервер.ОбновитьПоказателиПоФормуле(СведенияОПоказателях, ВидРасчетаОбъект.Показатели);
		// Если формула прошла проверку - запишем ее в вид расчета.
		ВидРасчетаОбъект.ФормулаРасчетаДляВыполнения = ПараметрыВыполненияФормулы.ФормулаДляВыполнения;
	КонецЕсли;
	
	// Удаляем строки с незаполненными показателями.
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПоказателя Из ВидРасчетаОбъект.Показатели Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказателя.Показатель) Тогда
			СтрокиКУдалению.Добавить(СтрокаПоказателя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ВидРасчетаОбъект.Показатели.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет какие из показателей для заданного начисления 
// могут запрашиваться при вводе.
// Предполагается, что по умолчанию при вводе запрашиваются постоянные показатели, 
// которые пока не запрашиваются в других начислениях (удержаниях).
//
// Параметры:
//	- ВидРасчета - ссылка на начисление или удержание.
//	- Показатели - массив показателей для выявления запрашиваемых.
//
// Возвращаемое значение - массив запрашиваемых показателей.
//	
Функция ЗапрашиваемыеПоказателиВидаРасчетаПоУмолчанию(ВидРасчета, Показатели) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПоказателиРасчета.Ссылка
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|		ПО (ПоказателиНачислений.Показатель = ПоказателиРасчета.Ссылка)
	|			И (ПоказателиНачислений.Ссылка <> &ВидРасчета)
	|			И (ПоказателиНачислений.ЗапрашиватьПриВводе)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК ПоказателиУдержаний
	|		ПО (ПоказателиУдержаний.Показатель = ПоказателиРасчета.Ссылка)
	|			И (ПоказателиУдержаний.Ссылка <> &ВидРасчета)
	|			И (ПоказателиУдержаний.ЗапрашиватьПриВводе)
	|ГДЕ
	|	ПоказателиРасчета.Ссылка В(&Показатели)
	|	И ПоказателиРасчета.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника)
	|	И ПоказателиРасчета.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное)
	|	И ПоказателиРасчета.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
	|	И НЕ ПоказателиРасчета.ЗначениеРассчитываетсяАвтоматически
	|	И ПоказателиНачислений.Ссылка ЕСТЬ NULL 
	|	И ПоказателиУдержаний.Ссылка ЕСТЬ NULL ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Запрос.УстановитьПараметр("Показатели", Показатели);
	
	ЗапрашиваемыеПоказатели = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗапрашиваемыеПоказатели.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ЗапрашиваемыеПоказатели;
	
КонецФункции

// Возвращает идентификатор показателя.
//
// Параметры:
//	- Показатель - СправочникСсылка.ПоказателиРасчетаЗарплаты
//	
// Возвращаемое значение - строка с значением реквизита Идентификатор.
//
Функция ИдентификаторПоказателя(Показатель) Экспорт
	
	Возврат ЗарплатаКадрыРасширенныйПовтИсп.ИдентификаторПоказателя(Показатель);
	
КонецФункции

// В табличной части вида расчета находит показатели в соответствии с указанными идентификаторами 
//	и отмечает их как определяющие.
//
// Параметры:
//	ВидРасчетаОбъект - ПланВидовРасчетаОбъект.Начисления, ПланВидовРасчетаОбъект.Удержания
//	ИдентификаторыПоказателей - массив идентификаторов показателей.
//
Процедура ОтметитьОпределяющиеПоказатели(ВидРасчетаОбъект, ИдентификаторыПоказателей) Экспорт
	ОтметитьПоказатели(ВидРасчетаОбъект, ИдентификаторыПоказателей, "ОпределяющийПоказатель");
КонецПроцедуры

// В табличной части вида расчета находит показатели в соответствии с указанными идентификаторами 
//	и отмечает их как запрашиваемые при вводе.
//
// Параметры:
//	ВидРасчетаОбъект - ПланВидовРасчетаОбъект.Начисления, ПланВидовРасчетаОбъект.Удержания
//	ИдентификаторыПоказателей - массив идентификаторов показателей.
//
Процедура ОтметитьЗапрашиваемыеПоказатели(ВидРасчетаОбъект, ИдентификаторыПоказателей) Экспорт
	ОтметитьПоказатели(ВидРасчетаОбъект, ИдентификаторыПоказателей, "ЗапрашиватьПриВводе");
КонецПроцедуры

Процедура ЗаполнитьПоказателиПредопределенногоСпособаРасчета(СпособРасчета, ТаблицаПоказателей) Экспорт
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(СпособРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоказателей.Очистить();
	
	Показатели = РасчетЗарплатыРасширенный.ПоказателиПредопределенногоСпособаРасчета(СпособРасчета);
	
	Для Каждого Показатель Из Показатели Цикл
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		НоваяСтрока.Показатель = Показатель;
		НоваяСтрока.ИспользоватьПриРасчете = Истина;
	КонецЦикла;

КонецПроцедуры

// Находит элемент справочника «Показатели расчета зарплаты» по значению реквизита Идентификатор.
//
// Параметры:
//	- Идентификатор - строка с указанием идентификатора показателя.
//	- УчитыватьРегистр - булево, по умолчанию Ложь, если Истина, то соответствие будет регистрозависимым.
//
// Возвращаемое значение - ссылка на показатель или Неопределено, если показатель не найден.
//
Функция ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплаты.Ссылка
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|ГДЕ
	|	(ПоказателиРасчетаЗарплаты.Идентификатор = &Идентификатор
	|			ИЛИ ПоказателиРасчетаЗарплаты.ИдентификаторСлужебный = &ИдентификаторСлужебный)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ИдентификаторСлужебный", ВРег(Идентификатор));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Выгрузка/загрузка данных

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных)
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, имеющие непредопределенные элементы.
	// В модуле менеджера таких объектов должна быть определена функция ПоляЕстественногоКлюча, 
	// составляющая массив полей для однозначной идентификации элемента.
	
	ЗарплатаКадрыБазовый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	
	
	Типы.Добавить(Метаданные.Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров);
	
	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Модуль.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет массив типов неразделенных данных, для которых не требуется сопоставление ссылок
// при загрузке данных в другую информационную базу, т.к. корректное сопоставление ссылок
// гарантируется с помощью других механизмов.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных)
//
Процедура ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, состоящие полностью из предопределенных
	// элементов.
	ЗарплатаКадрыБазовый.ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы);
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Пользователи
//

Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	ЗарплатаКадрыБазовый.ПриОпределенииНазначенияРолей(НазначениеРолей);
	
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.НастройкаКадровыхДанныхОбщиеДанныеРасширенная.Имя);
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.НастройкаНачисленияЗарплатыОбщиеДанныеРасширенная.Имя);
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.НастройкаПособийФССОбщиеДанные.Имя);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
		Модуль.ПриОпределенииНазначенияРолей(НазначениеРолей);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Даты запрета изменения данных.
//

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ЗарплатаКадрыБазовый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	
	// Раздел Зарплата
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АктПриемкиВыполненныхРаботОказанныхУслуг",								"МесяцНачисления",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВедомостьНаВыплатуЗарплатыПеречислением", 								"ПериодРегистрации", 	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком", 									"ПериодРегистрации", 	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВозвратИзОтпускаПоУходуЗаРебенком",										"ДатаВозврата",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВыплатаБывшимСотрудникам",												"Дата",					"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВходящаяСправкаОЗаработкеДляРасчетаПособий",								"Дата",					"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ДанныеДляРасчетаЗарплаты",												"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ДоговорЗаймаСотруднику",													"ДатаПредоставления",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ДоговорРаботыУслуги",													"ДатаНачала",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ДоговорАвторскогоЗаказа",												"ДатаНачала",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ДоходВНатуральнойФорме",													"МесяцНачисления",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЕдиновременноеПособиеЗаСчетФСС",											"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников",								"Дата",					"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявлениеРасчетВФСС",													"Дата",					"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеАванса",														"МесяцИзменения",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеГрафикаРаботыСписком",											"ДатаИзменения",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеОплатыТруда",													"ДатаИзменения",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком",							"ДатаИзменения",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеУсловийДоговораЗаймаСотруднику",								"ДатаИзменений",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИндексацияЗаработка",													"МесяцИндексации",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИндивидуальныйГрафик",													"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.Командировка", 															"ПериодРегистрации", 	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.КомпенсацияЗаЗадержкуЗарплаты", 											"ПериодРегистрации", 	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.МатериальнаяПомощь",														"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НачальнаяЗадолженностьПоЗарплате",										"Месяц",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НачислениеЗаПервуюПоловинуМесяца",										"МесяцНачисления",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтменаСовмещения",														"ДатаОтмены",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтменаДоплатыДоСреднегоЗаработка",										"ДатаОтмены",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОплатаПоСреднемуЗаработку",												"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтпускПоУходуЗаРебенком",												"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.Отгул",																	"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтпускБезСохраненияОплаты",												"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПереносДанных",															"Дата",					"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПостоянноеУдержаниеВПользуТретьихЛиц",									"ДатаНачала",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.Премия",																	"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПризПодарок",															"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПриказНаДоплатуДоСреднегоЗаработка",										"ДатаНачала",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПрогулНеявка",															"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПростойСотрудников",														"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РазовоеНачисление",														"МесяцНачисления",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РегистрацияПрочихДоходов",												"Дата",					"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.Совмещение",																"ДатаНачала",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СторнированиеНачислений",												"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ТабельУчетаРабочегоВремени",												"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УдержаниеВСчетРасчетовПоПрочимОперациям",								"ДатаНачала",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УдержаниеПрофсоюзныхВзносов",											"ДатаНачала",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УтверждениеТарифнойСетки",												"ДатаВступленияВСилу",	"Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.РазмерыГосударственныхПособий",									"Период",				"Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ГрафикРаботыСотрудников",											"Период",				"Зарплата", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций",		"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений",	"Период",				"Зарплата", "Подразделение.Владелец");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",		"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.КоэффициентИндексацииЗаработка",									"Период",				"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПлановыеНачисления",												"Период",				"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПлановыеНачисленияПоДоговорам",									"МесяцНачисления",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ОплаченныеДоговоры",												"МесяцНачисления",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПлановыеУдержания",												"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПлановыеАвансы",													"Период",				"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПрименениеПлановыхНачислений",									"Период",				"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.РасценкиРаботСотрудников",										"Период",				"Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.УсловияОплатыОтпускаПоУходуЗаРебенком",							"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам",								"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВыполненныеРаботыСотрудников",									"Период",				"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыОрганизаций",		"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыПодразделений",	"Период",				"Зарплата", "Подразделение.Владелец");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников",		"Период",				"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВытесняемоеПлановоеВремяСотрудников",							"ПериодРегистрации",	"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДанныеИндивидуальныхГрафиковСотрудников",						"ПериодРегистрации",	"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДанныеОперативногоУчетаРабочегоВремениСотрудников",				"ПериодРегистрации",	"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДанныеСводногоУчетаРабочегоВремениСотрудников",					"ПериодРегистрации",	"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников",				"ПериодРегистрации",	"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников",					"ПериодРегистрации",	"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрРасчета.Начисления",														"ПериодРегистрации",	"Зарплата", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрРасчета.Удержания",														"ПериодРегистрации",	"Зарплата", "Организация");
	
	// Раздел КадровыйУчет
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.БронированиеГражданПребывающихВЗапасе",			"Дата",							"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВводНачальныхОстатковОтпусков",					"Дата",							"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВозвратИзОтпускаПоУходуЗаРебенком",				"ДатаВозврата",					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ГрафикОтпусков", 								"Дата",		 					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеКвалификационногоРазряда",				"ДатаИзменения",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком",	"ДатаИзменения",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеУсловийИсполнительногоЛиста",			"ДатаИзменения",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеПлановыхНачислений", 					"ДатаИзменения",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НазначениеПлановогоНачисления", 					"ДатаНазначения",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПрекращениеПлановогоНачисления",					"ДатаПрекращения",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеШтатногоРасписания", 					"ДатаВступленияВСилу",			"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИндексацияШтатногоРасписания", 					"МесяцИндексации",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.КадровыйПереводСписком", 						"Сотрудники.ДатаНачала",		"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.КомандировкиСотрудников",						"Дата",							"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеМестРаботы",								"ДатаНачала",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НачальнаяШтатнаяРасстановка",					"Месяц",						"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтменаБронированияГражданПребывающихВЗапасе",	"Дата",							"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтпускаСотрудников",								"Дата",							"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПеремещениеМеждуТерриториями", 					"НачалоПериода",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПериодыОплаченныеДоНачалаЭксплуатации",			"ПериодРегистрации",			"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПродлениеКонтрактаДоговора", 					"ДатаПродления", 				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПереводКДругомуРаботодателю", 					"ДатаУвольнения", 				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПеремещениеВДругоеПодразделение", 				"ДатаПеремещения", 				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПереносОтпуска",									"ДатаНачала", 					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПриемНаРаботуСписком",							"Сотрудники.ДатаПриема",		"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РаботаСверхурочно",								"ПериодРегистрации",			"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РаботаВВыходныеИПраздничныеДни",					"ПериодРегистрации",			"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РегистрацияПереработок",							"ПериодСуммированногоУчетаНачало",			"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УвольнениеСписком", 								"Сотрудники.ДатаУвольнения", 	"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УтверждениеШтатногоРасписания", 					"МесяцВступленияВСилу", 		"КадровыйУчет", "Организация");
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроизвольныеКадровыеПриказы");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ВоинскийУчет", 							"Период", 						"КадровыйУчет", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.КадроваяИсторияСотрудников", 				"Период", 						"КадровыйУчет", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПлановыеЕжегодныеОтпуска", 				"ДатаНачала",					"КадровыйУчет", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СостоянияВБракеФизическихЛиц", 			"Период", 						"КадровыйУчет", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ТерриторииСотрудников", 					"Период",						"КадровыйУчет", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ЗанятыеПозицииШтатногоРасписания", 		"Период", 						"КадровыйУчет", "ПозицияШтатногоРасписания.Владелец");
	
	// Раздел БухгалтерскийУчетЗарплаты
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетЗарплатыПодразделений",			"Период", 			 "БухгалтерскийУчетЗарплаты", "Подразделение.Владелец");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетПлановыхНачислений", 				"Период", 			 "БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетРаспределениеОсновногоЗаработка", 	"ПериодРегистрации", "БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РаспределениеОсновногоЗаработка", 				"ПериодРегистрации", "БухгалтерскийУчетЗарплаты", "Организация");
	
	// Раздел НДФЛ
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасчетыСФондамиПоПособиям", 						"Период", 					"СтраховыеВзносы", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПодтверждениеОплатыЗаявленияРасчетаВФСС",											"Дата",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПодтверждениеВыплатЗаСчетФСС",														"Дата",		"Зарплата", "Организация");
	
#Область ЗарплатаКадрыПриложения

	// ОтражениеВФинансовомУчете
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеЗарплатыВФинансовомУчете");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете
	
	// ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО") Тогда
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВозвратСотрудникомЗадолженности",	"ПериодРегистрации", 		"Зарплата", "Организация");
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СведенияОНезачисленнойЗарплате",	"Дата", "Зарплата", "Организация");
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО
	
	// ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО") Тогда
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВыдачаЗаймаСотруднику", 		"Дата", "Зарплата", "Организация");
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПогашениеЗаймаСотруднику", 	"Дата",	"Зарплата", "Организация");
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО
	
	// ВнешниеХозяйственныеОперации.УчетДепонированнойЗарплатыВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации") Тогда
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВыплатаДепонированнойЗарплаты",	"Дата", "Зарплата", "Организация");
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.УчетДепонированнойЗарплатыВХО
	
	// ВнешниеХозяйственныеОперации.УчетНДФЛВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетНДФЛВХО");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.УчетНДФЛВХО
	
	// ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО") Тогда
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УплатаСтраховыхВзносовВФонды", 					"Дата", "СтраховыеВзносы", "Организация");
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВозмещениеРасходовФондомСоциальногоСтрахования", "Дата", "СтраховыеВзносы", "Организация");
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО
	
	// Подработки
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Подработки");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец Подработки
	
	// УчетБюджетныхУчреждений
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтражениеЗарплатыВБухучетеБюджетныхУчреждений", "ПериодРегистрации", "БухгалтерскийУчетЗарплаты", "Организация");
	КонецЕсли;
	// Конец УчетБюджетныхУчреждений
	
	// ГосударственнаяСлужба
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец ГосударственнаяСлужба
	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// Дивиденды
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Дивиденды") Тогда
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ДивидендыФизическимЛицам", "ДатаВыплаты", "Зарплата", "Организация");
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.Дивиденды
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// ОрганизационнаяСтруктура
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец ОрганизационнаяСтруктура
	
#КонецОбласти
	
#Область ЗарплатаКадрыКорпоративнаяПодсистемы
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
#КонецОбласти
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Префиксация справочников по Организации.
//

Процедура ПолучитьПрефиксообразующиеРеквизиты(Объекты) Экспорт
	
	ЗарплатаКадрыБазовый.ПолучитьПрефиксообразующиеРеквизиты(Объекты);
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Справочники.ПодразделенияОрганизаций;
	СтрокаТаблицы.Реквизит = "Владелец";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.ПеремещениеВДругоеПодразделение;
	СтрокаТаблицы.Реквизит = "Организация";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Инициализация параметров сеанса
//

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ПравилоФормированияПредставленияЭлементовСправочникаСотрудники", "ЗарплатаКадрыРасширенный.УстановитьПараметрыСеанса");
	Обработчики.Вставить("АльтернативныйПодборСпискаСотрудников", "ЗарплатаКадрыРасширенный.УстановитьПараметрыСеанса");
	
КонецПроцедуры

// Устанавливает параметры сеанса работы с подсистемой
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ПравилоФормированияПредставленияЭлементовСправочникаСотрудники" Тогда
		
		КадровыйУчетРасширенный.УстановитьПараметрСеансаПравилоФормированияПредставленияЭлементовСправочникаСотрудники();
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ПравилоФормированияПредставленияЭлементовСправочникаСотрудники");
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = "АльтернативныйПодборСпискаСотрудников" Тогда
		
		Если Не ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы()) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	1 КАК Номер
				|ПОМЕСТИТЬ ВТТестируемаяТаблица
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТестируемаяТаблица.Номер КАК Номер
				|ИЗ
				|	ВТТестируемаяТаблица КАК ТестируемаяТаблица
				|ГДЕ
				|	ТестируемаяТаблица.Номер В
				|			(ВЫБРАТЬ ПЕРВЫЕ 1
				|				ТестируемаяТаблицаОтбор.Номер
				|			ИЗ
				|				ВТТестируемаяТаблица КАК ТестируемаяТаблицаОтбор
				|			ГДЕ
				|				ТестируемаяТаблицаОтбор.Номер = ТестируемаяТаблица.Номер
				|			УПОРЯДОЧИТЬ ПО
				|				ТестируемаяТаблицаОтбор.Номер)";
				
			Попытка
				
				Запрос.Выполнить();
				АльтернативныйПодбор = Ложь;
				
			Исключение
				АльтернативныйПодбор = Истина;
			КонецПопытки;
			
		Иначе
			АльтернативныйПодбор = Ложь;
		КонецЕсли;
		
		ПараметрыСеанса.АльтернативныйПодборСпискаСотрудников = АльтернативныйПодбор;
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("АльтернативныйПодборСпискаСотрудников");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Процедура выполняет заполнение значений специализированных показателей.
//
Процедура ЗаполнитьЗначенияПоказателейРасчетаЗарплаты(ТаблицаПоказателей) Экспорт
	
	Для Каждого СтрокаПоказателей Из ТаблицаПоказателей Цикл
		Если СтрокаПоказателей.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МРОТ") Тогда
			// Показатель МРОТ
			СтрокаПоказателей.Значение = ЗарплатаКадры.МинимальныйРазмерОплатыТруда(СтрокаПоказателей.ДатаНачала);
			СтрокаПоказателей.ЗначениеОпределено = Истина;
		КонецЕсли;
		Если СтрокаПоказателей.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МЧТС") Тогда
			// Показатель МЧТС
			СтрокаПоказателей.Значение = ЗарплатаКадры.МинимальнаяЧасоваТарифнаяСтавка(СтрокаПоказателей.ДатаНачала);
			СтрокаПоказателей.ЗначениеОпределено = Истина;
		КонецЕсли;
		Если СтрокаПоказателей.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПрожиточныйМинимум") Тогда
			// Показатель ПМ
			СтрокаПоказателей.Значение = ЗарплатаКадры.ПрожиточныйМинимумТрудоспособные(СтрокаПоказателей.ДатаНачала);
			СтрокаПоказателей.ЗначениеОпределено = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОтветственныеЛицаОрганизации(Организация, Сведения, ДатаСведений) Экспорт
	
	// ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СведенияОбОтветственныхЛицах");
		Возврат Модуль.СведенияОбОтветственныхЛицах(Организация, Сведения, ДатаСведений);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах
	
	Возврат ЗарплатаКадрыБазовый.ОтветственныеЛицаОрганизации(Организация, Сведения, ДатаСведений);
	
КонецФункции

// Формирует временную таблицу ВТОтветственныеЛица, список организаций и периодов,
// по которым необходимо получить данные, берутся из временной таблицы в менеджере временных
// таблиц, переданном в качестве параметра. Временная таблица обязательно должна содержать
// колонки Организация и Период.
//
// Параметры:
//		МенеджерВременныхТаблиц - менеджер временных таблиц с таблицей отборов.
//		ИмяТаблицыОтборов - имя таблицы, содержащей колонки Организация и Период.
//		Сведения - строка с идентификаторами, разделенными запятыми.
//		ИмяПоляПериод - имя колонки, содержащей период, необязательный.
//
Процедура СоздатьВТОтветственныеЛица(МенеджерВременныхТаблиц, ИмяТаблицыОтборов, Сведения, ИмяПоляПериод = "Период") Экспорт
	
	// ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СведенияОбОтветственныхЛицах");
		Модуль.СоздатьВТОтветственныеЛица(МенеджерВременныхТаблиц, ИмяТаблицыОтборов, Сведения, ИмяПоляПериод);
		Возврат
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах
	
	МассивНеобходимыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Сведения, " ",""), ",");
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	NULL КАК Период,
	|	NULL КАК ПериодЗаписи,
	|	NULL КАК Организация";
	
	Для Каждого ЭлементМассиваПолей Из МассивНеобходимыхДанных Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	NULL КАК " + ЭлементМассиваПолей;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ВТОтветственныеЛица";
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьСписокТабличныхЧастейИсключаемыхИзКраткогоСостава(МассивТабличныхЧастей) Экспорт
	
	Если ТипЗнч(МассивТабличныхЧастей) = Тип("Массив") Тогда
		МассивТабличныхЧастей.Добавить("НачисленияПерерасчет");
	КонецЕсли;
	
КонецПроцедуры

// Метод заполняет константу, определяющую использование внешних хозяйственных операций.
//
Процедура УстановитьИспользованиеВнешнихХозяйственныхОпераций(ИспользоватьНачислениеЗарплаты = Неопределено) Экспорт
	
	// Использование внешних хозяйственных операций доступно тогда, 
	// когда существует соответствующая подсистема и используется расчет зарплаты.
	
	ПодсистемаВнешнихОперацийСуществует = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации");
	Если ИспользоватьНачислениеЗарплаты = Неопределено Тогда
		ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	КонецЕсли;
	
	ТекущееИспользование = Константы.ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры.Получить();
	Если ТекущееИспользование <> ПодсистемаВнешнихОперацийСуществует И ИспользоватьНачислениеЗарплаты Тогда
		Константы.ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры.Установить(ПодсистемаВнешнихОперацийСуществует И ИспользоватьНачислениеЗарплаты);
	КонецЕсли	
	
КонецПроцедуры

// Обработчик подписки на событие "ПриЗаписи" констант ИспользоватьНачислениеЗарплаты и
// ИспользоватьНесколькоОрганизаций.
// Заполняет значение константы ИспользоватьНачислениеЗарплатыНесколькихОрганизаций.
//
Функция ИспользоватьНачислениеЗарплатыНесколькихОрганизаций() Экспорт
	
	Возврат Константы.ИспользоватьНачислениеЗарплаты.Получить() И Константы.ИспользоватьНесколькоОрганизаций.Получить(); 
	
КонецФункции

// Обработчик подписки на событие "ПриЗаписи" констант РаботаВХозрасчетнойОрганизации и
// ИспользоватьНесколькоОрганизаций.
// Заполняет значение константы ИспользоватьНачислениеЗарплатыНесколькихОрганизаций.
//
Функция РаботаВНесколькихХозрасчетныхОрганизациях() Экспорт
	
	Возврат Константы.РаботаВХозрасчетнойОрганизации.Получить()	И Константы.ИспользоватьНесколькоОрганизаций.Получить(); 

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с несколькими сотрудниками в одном документе.
// Данный блок процедур и функций используется в документах "Отпуск по уходу за ребенком", 
// "Изменение отпуска по уходу за ребенком" и "Возврат из отпуска по уходу за ребенком".

Функция НесколькоРабочихМестСтруктураТаблицФормы() Экспорт 
	
	СтруктураТаблицФормы = Новый Структура;
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыРабочихМест");
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыНачислений");
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыАвансов");
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыПрименениеПлановыхНачислений");
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыПересчетТарифныхСтавок");
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыОплатаТруда");
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыЛьгот");
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыОплатаЛьгот");
	
	Возврат СтруктураТаблицФормы;
	
КонецФункции

// Процедура добавляет на форму реквизиты и элементы для работы с несколькими рабочими местами одного физического лица.
Процедура НесколькоРабочихМестДополнитьФорму(Форма, ОписаниеФормы, СтруктураТаблицФормы, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	НесколькоРабочихМестДобавитьРеквизитыИЭлементы(Форма, ОписаниеФормы, СтруктураТаблицФормы, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
	
КонецПроцедуры

// Процедура инициализирует форму для работы с конкретным физическим лицом: заполняет таблицу рабочих мест(сотрудников),
// устанавливает видимость элементов формы отображающих рабочие места (если рабочих мест несколько),
// обновляет представление рабочих мест в табличных частях документов.
Процедура НесколькоРабочихМестОбработкаФормы(Форма, ОписаниеФормы, СтруктураТаблицФормы, ОчищатьТаблицы, УправлятьОтображениемПолей = Истина) Экспорт
	
	ОписаниеТаблицыРабочихМест = СтруктураТаблицФормы.ОписаниеТаблицыРабочихМест;
	ОписаниеТаблицыНачислений = СтруктураТаблицФормы.ОписаниеТаблицыНачислений;
	ОписаниеТаблицыАвансов = СтруктураТаблицФормы.ОписаниеТаблицыАвансов;
	ОписаниеТаблицыПрименениеПлановыхНачислений = СтруктураТаблицФормы.ОписаниеТаблицыПрименениеПлановыхНачислений;
	ОписаниеТаблицыПересчетТарифныхСтавок = СтруктураТаблицФормы.ОписаниеТаблицыПересчетТарифныхСтавок;
	ОписаниеТаблицыОплатаТруда = СтруктураТаблицФормы.ОписаниеТаблицыОплатаТруда;
	ОписаниеТаблицыЛьгот = СтруктураТаблицФормы.ОписаниеТаблицыЛьгот;
	
	ДатаПолученияКадровыхДанных = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ДатаПутьКДанным);
	
	НесколькоРабочихМестЗаполнитьРабочиеМестаФизическогоЛица(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыНачислений);
	НесколькоРабочихМестОбновитьПредставлениеВыбранныхРабочихМест(Форма, ОписаниеФормы, ОписаниеТаблицыНачислений, ДатаПолученияКадровыхДанных);
	
	Если УправлятьОтображениемПолей Тогда 
		НесколькоРабочихМестУстановитьВидимыеРеквизиты(Форма, ОписаниеФормы, ОписаниеТаблицыНачислений);
	КонецЕсли;
	
	Если ОписаниеФормы.ЕстьАвансы И Не ОписаниеТаблицыАвансов = Неопределено Тогда
		НесколькоРабочихМестЗаполнитьТекущиеАвансы(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыАвансов, ОчищатьТаблицы);
		НесколькоРабочихМестДействияНадТаблицей(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыАвансов, ДатаПолученияКадровыхДанных)
	КонецЕсли;
	
	Если ОписаниеФормы.ЕстьПрименениеПлановыхНачислений И Не ОписаниеТаблицыПрименениеПлановыхНачислений = Неопределено Тогда
		НесколькоРабочихМестЗаполнитьТекущееПрименениеПлановыхНачислений(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыПрименениеПлановыхНачислений, ОчищатьТаблицы);
		НесколькоРабочихМестДействияНадТаблицей(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыПрименениеПлановыхНачислений, ДатаПолученияКадровыхДанных)
	КонецЕсли;
	
	Если ОписаниеФормы.ЕстьПересчетТарифныхСтавок И Не ОписаниеТаблицыПересчетТарифныхСтавок = Неопределено Тогда
		НесколькоРабочихМестЗаполнитьТекущиеЗначенияПересчетаТарифныхСтавок(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыПересчетТарифныхСтавок, ОчищатьТаблицы);
		НесколькоРабочихМестДействияНадТаблицей(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыПересчетТарифныхСтавок, ДатаПолученияКадровыхДанных)
	КонецЕсли;
	
	Если ОписаниеФормы.ЕстьОплатаТруда И Не ОписаниеТаблицыОплатаТруда = Неопределено Тогда
		Если УправлятьОтображениемПолей Тогда 
			НесколькоРабочихМестУстановитьВидимыеРеквизиты(Форма, ОписаниеФормы, ОписаниеТаблицыОплатаТруда);
		КонецЕсли;	
		НесколькоРабочихМестОбновитьПредставлениеВыбранныхРабочихМест(Форма, ОписаниеФормы, ОписаниеТаблицыОплатаТруда, ДатаПолученияКадровыхДанных);
	КонецЕсли;
	
	Если ОписаниеТаблицыЛьгот <> Неопределено Тогда 
		Если УправлятьОтображениемПолей Тогда 
			НесколькоРабочихМестУстановитьВидимыеРеквизиты(Форма, ОписаниеФормы, ОписаниеТаблицыЛьгот);
		КонецЕсли;	
		НесколькоРабочихМестОбновитьПредставлениеВыбранныхРабочихМест(Форма, ОписаниеФормы, ОписаниеТаблицыЛьгот, ДатаПолученияКадровыхДанных);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет в табличной части авансов текущие данные для Каждого рабочего места сотрудника, т.е. те данные
// которые были до ввода текущего документа.
// Эти данные используются для выделения строк, которые изменяет текущий документ и вывода комментария.
Процедура НесколькоРабочихМестЗаполнитьТекущиеАвансы(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицы, ОчищатьТаблицы) Экспорт
	
	Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	
	Если ОчищатьТаблицы Тогда
		Таблица.Очистить();
	КонецЕсли;
	
	ТаблицаСотрудников = НесколькоРабочихМестТаблицаСотрудниковДат(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест);	
	
	Объект = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ОбъектПутьКДанным);
	Данные = РасчетЗарплатыРасширенный.АвансыСотрудников(ТаблицаСотрудников, Объект.Ссылка, Истина);

	Данные.Колонки["Сотрудник"].Имя = ОписаниеТаблицы.ИмяРеквизитаСотрудник;
	Данные.Колонки["Аванс"].Имя = ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий;
	Данные.Колонки["СпособРасчетаАванса"].Имя = ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАвансаТекущий;
	
	Отбор = Новый Структура("РабочееМесто"); 
	
	Для Каждого РабочееМесто Из Данные Цикл
		
		Отбор.РабочееМесто = РабочееМесто[ОписаниеТаблицы.ИмяРеквизитаСотрудник];
		ДанныеРабочегоМеста = Таблица.НайтиСтроки(Отбор);
		
		Если ДанныеРабочегоМеста.Количество() > 0 Тогда
			Для Каждого СтрокаДанныхРабочегоМеста Из ДанныеРабочегоМеста Цикл
				СтрокаДанныхРабочегоМеста[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий] = РабочееМесто[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий]; 
				СтрокаДанныхРабочегоМеста[ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАвансаТекущий] = РабочееМесто[ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАвансаТекущий]; 
			КонецЦикла;
		Иначе
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,РабочееМесто);
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаПоказателя] = РабочееМесто[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий]; 
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАванса] = РабочееМесто[ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАвансаТекущий]; 
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Таблица.Количество()  = 0 Тогда
		Форма[ОписаниеФормы.ИмяРеквизитаТекущийСпособРасчетаАванса] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАвансаТекущий];
		Форма[ОписаниеФормы.ИмяРеквизитаСпособРасчетаАванса] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАванса];
		Форма[ОписаниеФормы.ИмяРеквизитаТекущийАванс] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий];
		Форма[ОписаниеФормы.ИмяРеквизитаАванс] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаПоказателя];
		Форма[ОписаниеФормы.ИмяРеквизитаАвансКомментарий] = 
			РасчетЗарплатыКлиентСервер.КомментарийИзмененияАванса(
				Форма[ОписаниеФормы.ИмяРеквизитаТекущийСпособРасчетаАванса], 
				Форма[ОписаниеФормы.ИмяРеквизитаТекущийАванс],
				Истина);				
	КонецЕсли;	
	
КонецПроцедуры

// Процедура заполняет в табличной части применения плановых начислений текущие данные для Каждого рабочего места
// сотрудника, т.е. те данные которые были до ввода текущего документа.
// Эти данные используются для выделения строк, которые изменяет текущий документ и вывода комментария.
Процедура НесколькоРабочихМестЗаполнитьТекущееПрименениеПлановыхНачислений(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицы, ОчищатьТаблицы) Экспорт
	
	Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
		
	Если ОчищатьТаблицы Тогда
		Таблица.Очистить();
	КонецЕсли;

	ТаблицаСотрудников = НесколькоРабочихМестТаблицаСотрудниковДат(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест);	
	МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВсеЗаписи = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПрименениеПлановыхНачислений",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаСотрудников),
		ПараметрыПостроения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПрименениеПлановыхНачислений.Сотрудник,
	|	ПрименениеПлановыхНачислений.Применение,
	|	ПрименениеПлановыхНачислений.Применение КАК ПрименениеТекущий
	|ИЗ
	|	ВТПрименениеПлановыхНачисленийСрезПоследних КАК ПрименениеПлановыхНачислений";
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Данные = Результат.Выгрузить();
		Данные.Колонки["Сотрудник"].Имя = ОписаниеТаблицы.ИмяРеквизитаСотрудник;
		Данные.Колонки["Применение"].Имя = ОписаниеТаблицы.ИмяРеквизитаПоказателя;
		Данные.Колонки["ПрименениеТекущий"].Имя = ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий;
		
		Отбор = Новый Структура("РабочееМесто"); 
		
		Для Каждого РабочееМесто Из Данные Цикл
			Отбор.РабочееМесто = РабочееМесто[ОписаниеТаблицы.ИмяРеквизитаСотрудник];
			ДанныеРабочегоМеста = Таблица.НайтиСтроки(Отбор);
			Если ДанныеРабочегоМеста.Количество() > 0 Тогда
				Для Каждого СтрокаДанныхРабочегоМеста Из ДанныеРабочегоМеста Цикл
					СтрокаДанныхРабочегоМеста[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий] = РабочееМесто[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий]; 
				КонецЦикла;
			Иначе	
				ЗаполнитьЗначенияСвойств(Таблица.Добавить(),РабочееМесто);
			КонецЕсли;
		КонецЦикла;
		
		Если Не Таблица.Количество()  = 0 Тогда
			Форма[ОписаниеФормы.ИмяРеквизитаТекущееПрименениеПлановыхНачислений] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий];
			Форма[ОписаниеФормы.ИмяРеквизитаПрименениеПлановыхНачислений] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаПоказателя];
			Форма[ОписаниеФормы.ИмяРеквизитаПрименениеПлановыхНачисленийКомментарий] = ЗарплатаКадрыРасширенныйКлиентСервер.ПолучитьКомментарийКДействиюСПрименениеПлановыхНачислений(Форма[ОписаниеФормы.ИмяРеквизитаПрименениеПлановыхНачислений], Форма[ОписаниеФормы.ИмяРеквизитаТекущееПрименениеПлановыхНачислений])
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура НесколькоРабочихМестЗаполнитьТекущиеЗначенияПересчетаТарифныхСтавок(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицы, ОчищатьТаблицы) Экспорт
	
	Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	ТаблицаРабочихМест = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыРабочихМест.ПутьКДанным);
	
	Если ОчищатьТаблицы Тогда
		Таблица.Очистить();
	КонецЕсли;
	
	ТаблицаСотрудников = НесколькоРабочихМестТаблицаСотрудниковДат(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест);	
	
	Объект = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ОбъектПутьКДанным);
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначенияПорядкаПересчета = ТекущиеЗначенияПорядкаПересчетаТарифнойСтавкиСотрудников(ТаблицаСотрудников, Объект.Ссылка);
	ЗначенияСовокупнойТарифнойСтавки = ТекущиеЗначенияСовокупнойТарифнойСтавкиСотрудников(ТаблицаСотрудников, Объект.Ссылка);
	УстановитьПривилегированныйРежим(Ложь);
	
	Отбор = Новый Структура(ОписаниеТаблицы.ИмяРеквизитаСотрудник); 
	
	Для Каждого РабочееМесто Из ТаблицаРабочихМест Цикл
		
		Сотрудник = РабочееМесто[ОписаниеТаблицыРабочихМест.ИмяРеквизитаСотрудник];
		ПредставлениеРабочегоМеста = РабочееМесто[ОписаниеТаблицыРабочихМест.ИмяРеквизитаПредставлениеРабочегоМеста];
		
		ПорядокПересчета = ЗначенияПорядкаПересчета.Получить(Сотрудник);
		
		ДанныеСовокупнойТарифнойСтавки = ЗначенияСовокупнойТарифнойСтавки.Получить(Сотрудник);
		СовокупнаяТарифнаяСтавка = ?(ДанныеСовокупнойТарифнойСтавки = Неопределено, Неопределено, ДанныеСовокупнойТарифнойСтавки.Значение);
		ВидТарифнойСтавки = ?(ДанныеСовокупнойТарифнойСтавки = Неопределено, Неопределено, ДанныеСовокупнойТарифнойСтавки.ВидТарифнойСтавки);
		
		Отбор[ОписаниеТаблицы.ИмяРеквизитаСотрудник] = Сотрудник;
		МассивСтрокТаблицы = Таблица.НайтиСтроки(Отбор);
		
		Если МассивСтрокТаблицы.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
				СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий] = ПорядокПересчета;
				СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаСовокупнаяТарифнаяСтавкаТекущий] = СовокупнаяТарифнаяСтавка;
				СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаВидТарифнойСтавкиТекущий] = ВидТарифнойСтавки;
			КонецЦикла;
		Иначе
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаСотрудник] = Сотрудник;
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаПредставлениеРабочегоМеста] = ПредставлениеРабочегоМеста;
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаПоказателя] = ПорядокПересчета;
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий] = ПорядокПересчета;
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаСовокупнаяТарифнаяСтавка] = СовокупнаяТарифнаяСтавка;
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаСовокупнаяТарифнаяСтавкаТекущий] = СовокупнаяТарифнаяСтавка;
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаВидТарифнойСтавки] = ВидТарифнойСтавки;
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаВидТарифнойСтавкиТекущий] = ВидТарифнойСтавки;
			УстановитьКомментарийКПорядкуПересчетаВСтрокеТаблицы(НоваяСтрока, ОписаниеТаблицы.ИмяРеквизитаКомментарий, ВидТарифнойСтавки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Таблица.Количество() = 0 Тогда
		Форма[ОписаниеФормы.ИмяРеквизитаПорядокПересчета] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаПоказателя];
		Форма[ОписаниеФормы.ИмяРеквизитаСовокупнаяТарифнаяСтавка] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаСовокупнаяТарифнаяСтавка];
		УстановитьКомментарийКРазмеруСовокупнойТарифнойСтавки(Форма, Таблица[0][ОписаниеТаблицы.ИмяРеквизитаВидТарифнойСтавки]);
	КонецЕсли;	
	
КонецПроцедуры

#Область КлючевыеРеквизитыЗаполненияФормы

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для предупреждения об очистке таблиц формы при редактировании "ключевых" реквизитов.
//
// Для работы механизма в форме должны быть определены экспортные процедуры: 
// 		КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении()
// 		КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов().
// Пример можно посмотреть в форме документа НачислениеЗарплаты.
//

// Процедура заполняет текст предупреждения при редактировании для ключевых реквизитов.
Процедура КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(Форма, МассивОписанийРеквизитов = Неопределено, ДействиеПриИзмененииОчистка = Истина) Экспорт
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
	     Возврат;
	КонецЕсли;

	Если МассивОписанийРеквизитов = Неопределено Тогда 
		МассивОписанийРеквизитов = Форма.КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов();
	КонецЕсли;	
	Для Каждого Описание Из МассивОписанийРеквизитов Цикл
		Если Описание.Свойство("ПредупреждениеПриРедактировании") Тогда
			ПредупреждениеПриРедактировании = Описание.ПредупреждениеПриРедактировании;
		Иначе
			ПредупреждениеПриРедактировании = КлючевыеРеквизитыПредставлениеПредупреждения(Описание.Представление, ДействиеПриИзмененииОчистка)
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Описание.ЭлементФормы,
			"ПредупреждениеПриРедактировании",
			ПредупреждениеПриРедактировании);
	КонецЦикла;
КонецПроцедуры

Функция КлючевыеРеквизитыЗаполненияФормыТекстПредупрежденияДокументовСАвтоматическимРасчетом() Экспорт
	Возврат НСтр("ru='Ручные исправления таблиц документа будут потеряны';uk='Ручні виправлення таблиць документа будуть втрачені'");
КонецФункции

// Процедура очищает таблицы формы подключенные к механизму.
//
// Параметры:
//  Форма				 - Форма в которой должны быть очищены таблицы 
//  ПутиОчищаемыхТаблиц  - Массив строк - пути к таблицам, которые надо очистить. Например "Объект.Сотрудники"  
//
Процедура КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(Форма, ПутиОчищаемыхТаблиц) Экспорт
	Для каждого ПутьКТаблице Из ПутиОчищаемыхТаблиц Цикл
		Таблица  = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКТаблице);
		Таблица.Очистить();
	КонецЦикла; 
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ОтображениеПредупрежденияПриРедактировании.НеОтображать);
КонецПроцедуры

#КонецОбласти

#Область ПоставляемыеДанные
// Зарегистрировать обработчики поставляемых данных.
//
// При получении уведомления о доступности новых общих данных, вызывается процедуры
// ДоступныНовыеДанные модулей, зарегистрированных через ПолучитьОбработчикиПоставляемыхДанных.
// В процедуру передается Дескриптор - ОбъектXDTO Descriptor.
// 
// В случае, если ДоступныНовыеДанные устанавливает аргумент Загружать в значение Истина, 
// данные загружаются, дескриптор и путь к файлу с данными передаются в процедуру 
// ОбработатьНовыеДанные. Файл будет автоматически удален после завершения процедуры.
// Если в менеджере сервиса не был указан файл - значение аргумента равно Неопределено.
//
// Параметры: 
//   Обработчики, ТаблицаЗначений - таблица для добавления обработчиков. 
//       Колонки:
//	      ВидДанных, строка - код вида данных, обрабатываемый обработчиком.
//		  КодОбработчика, строка(20) - будет использоваться при восстановлении обработки данных после сбоя.
//		  Обработчик,  ОбщийМодуль - модуль, содержащий следующие процедуры:
//		  	ДоступныНовыеДанные(Дескриптор, Загружать) Экспорт  
//			ОбработатьНовыеДанные(Дескриптор, ПутьКФайлу) Экспорт
//			ОбработкаДанныхОтменена(Дескриптор) Экспорт
//
// Вызывается из ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных()
//
Процедура ПолучитьОбработчикиПоставляемыхДанных(Обработчики) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

// Определяет необходимость применения универсального документа ввода данных для расчета зарплаты 
// для целей регистрации сдельно выполненных работ.
//
// Возвращаемое значение - булево.
//
Функция ИспользоватьДляРегистрацииВыполненныхРаботДокументВводаДанныхДляРасчетаЗарплаты() Экспорт
	
	Использование = Истина;
	
	ЗарплатаКадрыРасширенныйПереопределяемый.ОпределитьДоступностьРегистрацииВыполненныхРаботДокументомВводаДанныхДляРасчетаЗарплаты(Использование);
	
	Возврат Использование;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает пользователю права по умолчанию.
// Вызывается при работе в модели сервиса, в случае обновления в менеджере
// сервиса прав пользователя без прав администрирования.
// См. РаботаВМоделиСервисаПереопределяемый.УстановитьПраваПоУмолчанию.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, которому
//   требуется установить права по умолчанию.
//
Процедура УстановитьПраваПоУмолчанию(Пользователь) Экспорт
	
	Пользователи.НайтиНеоднозначныхПользователейИБ(Пользователь);
	
	ПрофильПоУмолчанию = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(ИдентификаторПрофиляСтаршийКадровикРасчетчик());
	Если ПрофильПоУмолчанию = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеПрофилиГруппДоступа = Метаданные.Справочники.ПрофилиГруппДоступа;
	
	Профили = Новый ТаблицаЗначений();
	Профили.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	Профили.Колонки.Добавить("Профиль", Новый ОписаниеТипов("СправочникСсылка.ПрофилиГруппДоступа"));
	
	Профиль = Профили.Добавить();
	Профиль.Пометка = Истина;
	Профиль.Профиль = ПрофильПоУмолчанию;
	
	ВидыДоступа = Новый ТаблицаЗначений();
	ВидыДоступа.Колонки.Добавить("ГруппаДоступа", Новый ОписаниеТипов("СправочникСсылка.ПрофилиГруппДоступа"));
	ВидыДоступа.Колонки.Добавить("ВидДоступа", МетаданныеПрофилиГруппДоступа.ТабличныеЧасти.ВидыДоступа.Реквизиты.ВидДоступа.Тип);
	ВидыДоступа.Колонки.Добавить("ВсеРазрешены", МетаданныеПрофилиГруппДоступа.ТабличныеЧасти.ВидыДоступа.Реквизиты.ВсеРазрешены.Тип);
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.ГруппаДоступа = ПрофильПоУмолчанию;
	ВидДоступа.ВидДоступа = Справочники.Организации.ПустаяСсылка();
	ВидДоступа.ВсеРазрешены = Истина;
	
	ЗначенияДоступа = Новый ТаблицаЗначений();
	ЗначенияДоступа.Колонки.Добавить("ГруппаДоступа", Новый ОписаниеТипов("СправочникСсылка.ПрофилиГруппДоступа"));
	ЗначенияДоступа.Колонки.Добавить("ВидДоступа", МетаданныеПрофилиГруппДоступа.ТабличныеЧасти.ЗначенияДоступа.Реквизиты.ВидДоступа.Тип);
	ЗначенияДоступа.Колонки.Добавить("ЗначениеДоступа", МетаданныеПрофилиГруппДоступа.ТабличныеЧасти.ЗначенияДоступа.Реквизиты.ЗначениеДоступа.Тип);
	
	// Получение списка изменений.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Запрос.УстановитьПараметр(
		"Профили", Профили);
	
	Запрос.УстановитьПараметр(
		"ВидыДоступа", ВидыДоступа);
	
	Запрос.УстановитьПараметр(
		"ЗначенияДоступа", ЗначенияДоступа);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Профили.Профиль КАК Ссылка,
	|	Профили.Пометка
	|ПОМЕСТИТЬ Профили
	|ИЗ
	|	&Профили КАК Профили
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДоступа.ГруппаДоступа КАК Профиль,
	|	ВидыДоступа.ВидДоступа,
	|	ВидыДоступа.ВсеРазрешены
	|ПОМЕСТИТЬ ВидыДоступа
	|ИЗ
	|	&ВидыДоступа КАК ВидыДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияДоступа.ГруппаДоступа КАК Профиль,
	|	ЗначенияДоступа.ВидДоступа,
	|	ЗначенияДоступа.ЗначениеДоступа
	|ПОМЕСТИТЬ ЗначенияДоступа
	|ИЗ
	|	&ЗначенияДоступа КАК ЗначенияДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Профили.Ссылка,
	|	ЕСТЬNULL(ГруппыДоступа.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПерсональнаяГруппаДоступа,
	|	ВЫБОР
	|		КОГДА ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Пометка
	|ПОМЕСТИТЬ ТекущиеПрофили
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО Профили.Ссылка = ГруппыДоступа.Профиль
	|			И (ГруппыДоступа.Пользователь = &Пользователь
	|				ИЛИ Профили.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
	|			И (ГруппыДоступаПользователи.Пользователь = &Пользователь)
	|ГДЕ
	|	НЕ Профили.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ГруппыДоступаВидыДоступа.ВидДоступа,
	|	ГруппыДоступаВидыДоступа.ВсеРазрешены
	|ПОМЕСТИТЬ ТекущиеВидыДоступа
	|ИЗ
	|	ТекущиеПрофили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ВидыДоступа КАК ГруппыДоступаВидыДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаВидыДоступа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ГруппыДоступаЗначенияДоступа.ВидДоступа,
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа
	|ПОМЕСТИТЬ ТекущиеЗначенияДоступа
	|ИЗ
	|	ТекущиеПрофили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаЗначенияДоступа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиИзмененныхГрупп.Профиль
	|ПОМЕСТИТЬ ПрофилиИзмененныхГрупп
	|ИЗ
	|	(ВЫБРАТЬ
	|		Профили.Ссылка КАК Профиль
	|	ИЗ
	|		Профили КАК Профили
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеПрофили КАК ТекущиеПрофили
	|			ПО Профили.Ссылка = ТекущиеПрофили.Ссылка
	|	ГДЕ
	|		Профили.Пометка <> ТекущиеПрофили.Пометка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыДоступа.Профиль
	|	ИЗ
	|		ВидыДоступа КАК ВидыДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеВидыДоступа КАК ТекущиеВидыДоступа
	|			ПО ВидыДоступа.Профиль = ТекущиеВидыДоступа.Профиль
	|				И ВидыДоступа.ВидДоступа = ТекущиеВидыДоступа.ВидДоступа
	|				И ВидыДоступа.ВсеРазрешены = ТекущиеВидыДоступа.ВсеРазрешены
	|	ГДЕ
	|		ТекущиеВидыДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеВидыДоступа.Профиль
	|	ИЗ
	|		ТекущиеВидыДоступа КАК ТекущиеВидыДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВидыДоступа КАК ВидыДоступа
	|			ПО (ВидыДоступа.Профиль = ТекущиеВидыДоступа.Профиль)
	|				И (ВидыДоступа.ВидДоступа = ТекущиеВидыДоступа.ВидДоступа)
	|				И (ВидыДоступа.ВсеРазрешены = ТекущиеВидыДоступа.ВсеРазрешены)
	|	ГДЕ
	|		ВидыДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияДоступа.Профиль
	|	ИЗ
	|		ЗначенияДоступа КАК ЗначенияДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеЗначенияДоступа КАК ТекущиеЗначенияДоступа
	|			ПО ЗначенияДоступа.Профиль = ТекущиеЗначенияДоступа.Профиль
	|				И ЗначенияДоступа.ВидДоступа = ТекущиеЗначенияДоступа.ВидДоступа
	|				И ЗначенияДоступа.ЗначениеДоступа = ТекущиеЗначенияДоступа.ЗначениеДоступа
	|	ГДЕ
	|		ТекущиеЗначенияДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеЗначенияДоступа.Профиль
	|	ИЗ
	|		ТекущиеЗначенияДоступа КАК ТекущиеЗначенияДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияДоступа КАК ЗначенияДоступа
	|			ПО (ЗначенияДоступа.Профиль = ТекущиеЗначенияДоступа.Профиль)
	|				И (ЗначенияДоступа.ВидДоступа = ТекущиеЗначенияДоступа.ВидДоступа)
	|				И (ЗначенияДоступа.ЗначениеДоступа = ТекущиеЗначенияДоступа.ЗначениеДоступа)
	|	ГДЕ
	|		ЗначенияДоступа.ВидДоступа ЕСТЬ NULL ) КАК ПрофилиИзмененныхГрупп
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	СправочникПрофили.Наименование КАК ПрофильНаименование,
	|	Профили.Пометка,
	|	ТекущиеПрофили.ПерсональнаяГруппаДоступа
	|ИЗ
	|	ПрофилиИзмененныхГрупп КАК ПрофилиИзмененныхГрупп
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Профили КАК Профили
	|		ПО ПрофилиИзмененныхГрупп.Профиль = Профили.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеПрофили КАК ТекущиеПрофили
	|		ПО ПрофилиИзмененныхГрупп.Профиль = ТекущиеПрофили.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК СправочникПрофили
	|		ПО (СправочникПрофили.Ссылка = ПрофилиИзмененныхГрупп.Профиль)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ПерсональнаяГруппаДоступа) Тогда
			ЗаблокироватьДанныеДляРедактирования(Выборка.ПерсональнаяГруппаДоступа);
			ГруппаДоступаОбъект = Выборка.ПерсональнаяГруппаДоступа.ПолучитьОбъект();
		Иначе
			// Создание персональной группы доступа.
			ГруппаДоступаОбъект = Справочники.ГруппыДоступа.СоздатьЭлемент();
			ГруппаДоступаОбъект.Родитель     = Справочники.ГруппыДоступа.РодительПерсональныхГруппДоступа();
			ГруппаДоступаОбъект.Наименование = Выборка.ПрофильНаименование;
			ГруппаДоступаОбъект.Пользователь = Пользователь;
			ГруппаДоступаОбъект.Профиль      = Выборка.Профиль;
		КонецЕсли;
		
		Если Выборка.Профиль = Справочники.ПрофилиГруппДоступа.Администратор Тогда
			
			Если Выборка.Пометка Тогда
				Если ГруппаДоступаОбъект.Пользователи.Найти(
						Пользователь, "Пользователь") = Неопределено Тогда
					
					ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Пользователь;
				КонецЕсли;
			Иначе
				ОписаниеПользователя =  ГруппаДоступаОбъект.Пользователи.Найти(
					Пользователь, "Пользователь");
				
				Если ОписаниеПользователя <> Неопределено Тогда
					ГруппаДоступаОбъект.Пользователи.Удалить(ОписаниеПользователя);
					
					Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
						// Проверка пустого списка пользователей ИБ в группе доступа Администраторы.
						ОписаниеОшибки = "";
						УправлениеДоступомСлужебный.ПроверитьНаличиеПользователяИБВГруппеДоступаАдминистраторы(
							ГруппаДоступаОбъект.Пользователи, ОписаниеОшибки);
						
						Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
							ВызватьИсключение
								НСтр("ru='Профиль Администратор должен быть хотя бы у одного пользователя,
                                           |которому разрешен вход в программу.'
                                           |;uk='Профіль Адміністратор повинен бути хоча б у одного користувача,
                                           |якому дозволений вхід в програму.'");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ГруппаДоступаОбъект.Пользователи.Очистить();
			Если Выборка.Пометка Тогда
				ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Пользователь;
			КонецЕсли;
			
			Отбор = Новый Структура("ГруппаДоступа", Выборка.Профиль);
			СтрокиВидыДоступа = ВидыДоступа.НайтиСтроки(Отбор);
			СтрокиЗначенияДоступа = ЗначенияДоступа.НайтиСтроки(Отбор);
			
			ГруппаДоступаОбъект.ВидыДоступа.Загрузить(
				ВидыДоступа.Скопировать(СтрокиВидыДоступа, "ВидДоступа, ВсеРазрешены"));
			
			ГруппаДоступаОбъект.ЗначенияДоступа.Загрузить(
				ЗначенияДоступа.Скопировать(СтрокиЗначенияДоступа, "ВидДоступа, ЗначениеДоступа"));
		КонецЕсли;
		
		Попытка
			ГруппаДоступаОбъект.Записать();
		Исключение
			ПарольПользователяСервиса = Неопределено;
			ВызватьИсключение;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Выборка.ПерсональнаяГруппаДоступа) Тогда
			РазблокироватьДанныеДляРедактирования(Выборка.ПерсональнаяГруппаДоступа);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция УОрганизацииЕстьФилиалы(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И Организации.Ссылка <> &ГоловнаяОрганизация";
		
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции


Процедура ЗаполнитьПодчиненноеПодразделение(ПодразделениеОбъект, ИсточникДанных) Экспорт
	
КонецПроцедуры

// Добавляет в описание профиля обязательные роли.
//
Процедура ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля) Экспорт 
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПрава");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваБИД" , 											"ИнтеграцияС1СДокументооборотом");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваБРО" , 											"РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваЭД" , 											"ЭлектронноеВзаимодействие");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваЗарплатаКадрыПриложения", 						"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваКонфигурацииЗарплатаКадрыРасширенная",			"ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДолжностей",											"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПодразделенийОрганизации",								"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЗапускВебКлиента");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЗапускТолстогоКлиента");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЗапускТонкогоКлиента");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеИнтеграцииС1СДокументооборотом");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеВариантовОтчетов", 								"СтандартныеПодсистемы.ВариантыОтчетов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеДополнительныхОтчетовИОбработок", 				"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеДополнительныхОтчетовИОбработокЗарплатаКадры",	"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеИнформационногоЦентра", 						"ТехнологияСервиса.ИнформационныйЦентр");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "РаботаСПапкамиФайлов", 										"СтандартныеПодсистемы.РаботаСФайлами");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СохранениеДанныхПользователя");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеНапоминаний",  									"СтандартныеПодсистемы.НапоминанияПользователя");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКурсовВалют");
	
КонецПроцедуры

Процедура ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, ИмяРоли, ПолноеИмяПодсистемы = "") Экспорт
	
	Если НЕ ПустаяСтрока(ПолноеИмяПодсистемы) Тогда
		
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует(ПолноеИмяПодсистемы) Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли; 
	
	ОписаниеПрофиля.Роли.Добавить(ИмяРоли);
	
КонецПроцедуры

Процедура РедактированиеСоставаНачисленийШтатногоРасписанияДействующиеНачисленияВРеквизит(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета)
	
КонецПроцедуры

Процедура РедактированиеСоставаНачисленийСотрудниковПрочитатьТекущиеДанные(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, ФормироватьСПериодичностьДень = Ложь, ДатаСобытия = Неопределено, ДатаОкончания = Неопределено)
	
	Если СотрудникиДаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	
	ДанныеФормыНачисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
	ДанныеНачислений = ДанныеФормыНачисления.Выгрузить();
	ДанныеНачислений.Колонки[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета].Имя = "Начисление";
	Если ДанныеНачислений.Колонки.Найти("ДокументОснование") = Неопределено Тогда 
		ДанныеНачислений.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	КонецЕсли;
	
	ДанныеПоказателей = Новый ТаблицаЗначений;
	ДанныеПоказателей.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
	ДанныеПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ДанныеПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ДанныеПоказателей.Колонки.Добавить("НомерПоказателя", Новый ОписаниеТипов("Число"));
	ДанныеПоказателей.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	
	МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета);
	
	Для Каждого СтрокаНачисления Из ДанныеНачислений Цикл
		Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
			Если ЗначениеЗаполнено(СтрокаНачисления["Показатель" + НомерПоказателя]) Тогда
				ОписаниеПоказателя = ДанныеПоказателей.Добавить();
				ОписаниеПоказателя.НомерПоказателя = НомерПоказателя;
				ОписаниеПоказателя.ДокументОснование = СтрокаНачисления.ДокументОснование;
				ОписаниеПоказателя.ИдентификаторСтрокиВидаРасчета = СтрокаНачисления.ИдентификаторСтрокиВидаРасчета;
				ОписаниеПоказателя.Показатель = СтрокаНачисления["Показатель" + НомерПоказателя];
				ОписаниеПоказателя.Значение = СтрокаНачисления["Значение" + НомерПоказателя];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ОписаниеТаблицыВидовРасчета.СодержитПолеСотрудник Тогда
		ДанныеНачислений.Колонки[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаСотрудник].Имя = "Сотрудник";
	Иначе
		
		Если ДанныеНачислений.Колонки.Найти("Сотрудник") = Неопределено Тогда
			ДанныеНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			
			Если СотрудникиДаты.Количество() > 0 Тогда
				ДанныеНачислений.ЗаполнитьЗначения(СотрудникиДаты[0].Сотрудник, "Сотрудник");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗначенияПоказателейДокумента", ДанныеПоказателей);
	Запрос.УстановитьПараметр("НачисленияДокумента", ДанныеНачислений);
	Запрос.УстановитьПараметр("Сотрудники", СотрудникиДаты);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	ПараметрыПостроенияФОТ = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияФОТ.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ДокументСсылка);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты, "Сотрудник"),
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты, "Сотрудник"),
		ПараметрыПостроенияФОТ);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты, "Сотрудник"),
		ПараметрыПостроения);
	
	ЕстьКолонкиСведенийПоОкончании = ДанныеНачислений.Колонки.Найти("ДатаОкончанияНачисления") <> Неопределено;
	Если ЕстьКолонкиСведенийПоОкончании Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеНачисления.ПериодВозвратногоСобытия КАК Период,
			|	ПлановыеНачисления.Сотрудник,
			|	ПлановыеНачисления.Начисление
			|ПОМЕСТИТЬ ВТОтборВозвратныхСобытийПлановыеНачисления
			|ИЗ
			|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
			|ГДЕ
			|	ПлановыеНачисления.ПериодВозвратногоСобытия <> ДАТАВРЕМЯ(1, 1, 1)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗначенияПоказателей.ПериодВозвратногоСобытия КАК Период,
			|	ЗначенияПоказателей.Сотрудник,
			|	ЗначенияПоказателей.Организация,
			|	ЗначенияПоказателей.Показатель
			|ПОМЕСТИТЬ ВТОтборВозвратныхСобытийЗначенияПоказателей
			|ИЗ
			|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПоказателей
			|ГДЕ
			|	ЗначенияПоказателей.ПериодВозвратногоСобытия <> ДАТАВРЕМЯ(1, 1, 1)";
		
		Запрос.Выполнить();
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеНачисления",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТОтборВозвратныхСобытийПлановыеНачисления", "Сотрудник,Начисление"),
			ПараметрыПостроения,
			"ВТПлановыеНачисленияВозвратные");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТОтборВозвратныхСобытийЗначенияПоказателей", "Сотрудник,Организация,Показатель"),
			ПараметрыПостроения,
			"ВТЗначенияПоказателейВозвратные");
		
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияПоказателейДокумента.ИдентификаторСтрокиВидаРасчета,
		|	ЗначенияПоказателейДокумента.Значение,
		|	ЗначенияПоказателейДокумента.Показатель,
		|	ЗначенияПоказателейДокумента.ДокументОснование,
		|	ЗначенияПоказателейДокумента.НомерПоказателя
		|ПОМЕСТИТЬ ВТЗначенияПоказателейДокумента
		|ИЗ
		|	&ЗначенияПоказателейДокумента КАК ЗначенияПоказателейДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(НачисленияДокумента.Начисление КАК ПланВидовРасчета.Начисления) КАК Начисление,
		|	НачисленияДокумента.ИдентификаторСтрокиВидаРасчета,
		|	НачисленияДокумента.Сотрудник,
		|	НачисленияДокумента.ДокументОснование,
		|	НачисленияДокумента.НомерСтроки
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&НачисленияДокумента КАК НачисленияДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&Сотрудники КАК Сотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Начисление,
		|	Начисления.ИдентификаторСтрокиВидаРасчета,
		|	Начисления.Сотрудник,
		|	Начисления.ДокументОснование,
		|	Начисления.НомерСтроки
		|ПОМЕСТИТЬ ВТНачисленияДокумента
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Начисления.Сотрудник = Сотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияДокумента.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	НачисленияПоказатели.Показатель,
		|	ЗначенияПериодическихПоказателей.Сотрудник,
		|	ЗначенияПоказателейДокумента.Значение,
		|	ЗначенияПериодическихПоказателей.Значение КАК ТекущееЗначение,
		|	НачисленияДокумента.НомерСтроки КАК НомерСтроки,
		|	ЗначенияПоказателейДокумента.НомерПоказателя КАК НомерПоказателя";
		
	Если ЕстьКолонкиСведенийПоОкончании Тогда
		
		Запрос.Текст = Запрос.Текст + ",
			|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ЗначенияПоказателейВозвратные.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияПоказателя,
			|	ЗначенияПоказателейВозвратные.Значение КАК ЗначениеПоОкончании";
		
	КонецЕсли;
		
	Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ВТНачисленияДокумента КАК НачисленияДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО НачисленияДокумента.Начисление = НачисленияПоказатели.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейДокумента КАК ЗначенияПоказателейДокумента
		|		ПО НачисленияДокумента.ИдентификаторСтрокиВидаРасчета = ЗначенияПоказателейДокумента.ИдентификаторСтрокиВидаРасчета
		|			И (НачисленияПоказатели.Показатель = ЗначенияПоказателейДокумента.Показатель)
		|			И НачисленияДокумента.ДокументОснование = ЗначенияПоказателейДокумента.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
		|		ПО (НачисленияПоказатели.Показатель = ЗначенияПериодическихПоказателей.Показатель)
		|			И НачисленияДокумента.Сотрудник = ЗначенияПериодическихПоказателей.Сотрудник
		|			И НачисленияДокумента.ДокументОснование = ЗначенияПериодическихПоказателей.ДокументОснование";
		
	Если ЕстьКолонкиСведенийПоОкончании Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейВозвратные КАК ЗначенияПоказателейВозвратные
			|		ПО ЗначенияПериодическихПоказателей.ПериодВозвратногоСобытия = ЗначенияПоказателейВозвратные.Период
			|			И ЗначенияПериодическихПоказателей.Сотрудник = ЗначенияПоказателейВозвратные.Сотрудник
			|			И ЗначенияПериодическихПоказателей.Организация = ЗначенияПоказателейВозвратные.Организация
			|			И ЗначенияПериодическихПоказателей.ДокументОснование = ЗначенияПоказателейВозвратные.ДокументОснование
			|			И (ЗначенияПоказателейВозвратные.ЭтоВозвратноеСобытие)";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтрокиВидаРасчета,
		|	НомерПоказателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(НачисленияДокумента.Начисление, ПлановыеНачисленияСрезПоследних.Начисление) КАК Начисление,
		|	НачисленияДокумента.ИдентификаторСтрокиВидаРасчета,
		|	ЕСТЬNULL(ПлановыеНачисленияСрезПоследних.Используется, ЛОЖЬ) КАК ДействующийВидРасчета,
		|	НачисленияДокумента.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА НЕ НачисленияДокумента.Начисление ЕСТЬ NULL
		|			ТОГДА НачисленияДокумента.Начисление.Рассчитывается
		|		КОГДА НЕ ПлановыеНачисленияСрезПоследних.Начисление ЕСТЬ NULL
		|			ТОГДА ПлановыеНачисленияСрезПоследних.Начисление.Рассчитывается
		|		ИНАЧЕ Истина
		|	КОНЕЦ КАК НачислениеРассчитывается,
		|	ЕСТЬNULL(ПлановыеНачисленияСрезПоследних.Размер, 0) КАК Размер";
		
	Если ЕстьКолонкиСведенийПоОкончании Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|,
			|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ПлановыеНачисленияВозвратные.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияНачисления,
			|	ЕСТЬNULL(ПлановыеНачисленияВозвратные.Используется, ПлановыеНачисленияСрезПоследних.Используется) КАК ИспользуетсяПоОкончании";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ВТНачисленияДокумента КАК НачисленияДокумента
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТСрезПоследних
		|			ПО ПлановыеНачисленияСрезПоследних.Начисление = ПлановыйФОТСрезПоследних.Начисление
		|				И ПлановыеНачисленияСрезПоследних.Сотрудник = ПлановыйФОТСрезПоследних.Сотрудник
		|				И ПлановыеНачисленияСрезПоследних.ДокументОснование = ПлановыйФОТСрезПоследних.ДокументОснование
		|		ПО НачисленияДокумента.Начисление = ПлановыеНачисленияСрезПоследних.Начисление
		|			И НачисленияДокумента.Сотрудник = ПлановыеНачисленияСрезПоследних.Сотрудник
		|			И НачисленияДокумента.ДокументОснование = ПлановыеНачисленияСрезПоследних.ДокументОснование";
		
	Если ЕстьКолонкиСведенийПоОкончании Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияВозвратные КАК ПлановыеНачисленияВозвратные
			|		ПО ПлановыеНачисленияСрезПоследних.ПериодВозвратногоСобытия = ПлановыеНачисленияВозвратные.Период
			|			И ПлановыеНачисленияСрезПоследних.Сотрудник = ПлановыеНачисленияВозвратные.Сотрудник
			|			И ПлановыеНачисленияСрезПоследних.Начисление = ПлановыеНачисленияВозвратные.Начисление
			|			И ПлановыеНачисленияСрезПоследних.ДокументОснование = ПлановыеНачисленияВозвратные.ДокументОснование
			|			И (ПлановыеНачисленияВозвратные.ЭтоВозвратноеСобытие)";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаПоказателей = Результаты[4].Выбрать();
	ВыборкаНачислений = Результаты[5].Выбрать();
	
	СоответствиеСтрокИдентификаторам = Новый Соответствие;
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	Для Каждого СтрокаНачислений Из ДанныеФормыНачисления Цикл
		
		СтруктураПоиска.НомерСтроки = СтрокаНачислений.НомерСтроки;
		
		ВыборкаНачислений.Сбросить();
		Если ВыборкаНачислений.НайтиСледующий(СтруктураПоиска) Тогда
			
			Если Не ЗначениеЗаполнено(ВыборкаНачислений.Начисление) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЕстьКолонкиСведенийПоОкончании Тогда
				СтрокаНачислений.ДатаОкончанияНачисления = ВыборкаНачислений.ДатаОкончанияНачисления;
				СтрокаНачислений.ИспользуетсяПоОкончании = ВыборкаНачислений.ИспользуетсяПоОкончании;
			КонецЕсли; 
			
			СтрокаНачислений.ДействующийВидРасчета = ВыборкаНачислений.ДействующийВидРасчета;
			Если Не ВыборкаНачислений.НачислениеРассчитывается Тогда 
				СтрокаНачислений.ТекущееЗначение1 = ВыборкаНачислений.Размер;
			КонецЕсли;
			
		КонецЕсли;
		
		СоответствиеСтрокИдентификаторам.Вставить(СтрокаНачислений.ИдентификаторСтрокиВидаРасчета, СтрокаНачислений);
		
	КонецЦикла;
	
	Пока ВыборкаПоказателей.СледующийПоЗначениюПоля("ИдентификаторСтрокиВидаРасчета") Цикл
		
		ДанныеСтрокиНачисления = СоответствиеСтрокИдентификаторам.Получить(ВыборкаПоказателей.ИдентификаторСтрокиВидаРасчета);
		
		Пока ВыборкаПоказателей.Следующий() Цикл
			ДанныеСтрокиНачисления["ТекущееЗначение" + ВыборкаПоказателей.НомерПоказателя] = ВыборкаПоказателей.ТекущееЗначение;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗарплатаКадрыРасширенныйКлиентСервер.ПоказыватьВременноОтмененныеНачисления(ОписаниеТаблицыВидовРасчета) Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеНачисления.Начисление КАК Начисление,
			|	ЛОЖЬ КАК ДействующийВидРасчета,
			|	ПлановыеНачисления.Начисление.Рассчитывается КАК НачислениеРассчитывается,
			|	ПлановыеНачисления.ДокументОснование,
			|	ЕСТЬNULL(ПлановыйФОТСрезПоследних.ВкладВФОТ, ПлановыеНачисления.Размер) КАК Размер,
			|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ПлановыеНачисленияВозвратные.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияНачисления,
			|	ПлановыеНачисленияВозвратные.Используется КАК ИспользуетсяПоОкончании,
			|	НачисленияПоказатели.НомерСтроки КАК НомерПоказателя,
			|	НачисленияПоказатели.Показатель,
			|	ЗначенияПериодическихПоказателей.Значение,
			|	ЗначенияПериодическихПоказателей.Значение КАК ТекущееЗначение,
			|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ЗначенияПоказателейВозвратные.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияПоказателя,
			|	ЗначенияПоказателейВозвратные.Значение КАК ЗначениеПоОкончании,
			|	НачисленияПоказатели.Показатель.КраткоеНаименование КАК ПредставлениеПоказателя,
			|	НачисленияПоказатели.Показатель.Точность КАК Точность
			|ИЗ
			|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК НачисленияДокумента
			|		ПО ПлановыеНачисления.Начисление = НачисленияДокумента.Начисление
			|			И ПлановыеНачисления.Сотрудник = НачисленияДокумента.Сотрудник
			|			И ПлановыеНачисления.ДокументОснование = НачисленияДокумента.ДокументОснование
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТСрезПоследних
			|		ПО ПлановыеНачисления.Начисление = ПлановыйФОТСрезПоследних.Начисление
			|			И ПлановыеНачисления.Сотрудник = ПлановыйФОТСрезПоследних.Сотрудник
			|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТСрезПоследних.ДокументОснование
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияВозвратные КАК ПлановыеНачисленияВозвратные
			|		ПО ПлановыеНачисления.ПериодВозвратногоСобытия = ПлановыеНачисленияВозвратные.Период
			|			И ПлановыеНачисления.Сотрудник = ПлановыеНачисленияВозвратные.Сотрудник
			|			И ПлановыеНачисления.Начисление = ПлановыеНачисленияВозвратные.Начисление
			|			И ПлановыеНачисления.ДокументОснование = ПлановыеНачисленияВозвратные.ДокументОснование
			|			И (ПлановыеНачисленияВозвратные.ЭтоВозвратноеСобытие)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
			|		ПО ПлановыеНачисления.Начисление = НачисленияПоказатели.Ссылка
			|			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейВозвратные КАК ЗначенияПоказателейВозвратные
			|			ПО ЗначенияПериодическихПоказателей.ПериодВозвратногоСобытия = ЗначенияПоказателейВозвратные.Период
			|				И ЗначенияПериодическихПоказателей.Сотрудник = ЗначенияПоказателейВозвратные.Сотрудник
			|				И ЗначенияПериодическихПоказателей.Организация = ЗначенияПоказателейВозвратные.Организация
			|				И ЗначенияПериодическихПоказателей.ДокументОснование = ЗначенияПоказателейВозвратные.ДокументОснование
			|				И (ЗначенияПоказателейВозвратные.ЭтоВозвратноеСобытие)
			|		ПО (НачисленияПоказатели.Показатель = ЗначенияПериодическихПоказателей.Показатель)
			|			И ПлановыеНачисления.Сотрудник = ЗначенияПериодическихПоказателей.Сотрудник
			|			И ПлановыеНачисления.ДокументОснование = ЗначенияПериодическихПоказателей.ДокументОснование
			|ГДЕ
			|	НЕ ПлановыеНачисления.Используется
			|	И ПлановыеНачисленияВозвратные.Используется
			|	И НачисленияДокумента.Начисление ЕСТЬ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	Начисление,
			|	НомерПоказателя";
		
		НачислениеРайонныйКоэффициент = РасчетЗарплаты.НачислениеРайонныйКоэффициент();
		НачислениеСевернаяНадбавка = РасчетЗарплаты.НачислениеСевернаяНадбавка();
		НачислениеНадбавкаЗаВредность = РасчетЗарплатыРасширенный.НачислениеНадбавкаЗаВредность();
		
		УпорядочитьСписокНачислений = Ложь;
		ВыборкаНачислений = Запрос.Выполнить().Выбрать();
		Пока ВыборкаНачислений.СледующийПоЗначениюПоля("Начисление") Цикл
			
			Если ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(1, ОписаниеТаблицыВидовРасчета)
				И (ВыборкаНачислений.Начисление = НачислениеРайонныйКоэффициент
					Или ВыборкаНачислений.Начисление = НачислениеСевернаяНадбавка
					Или ВыборкаНачислений.Начисление = НачислениеНадбавкаЗаВредность) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаНачислений = ДанныеФормыНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, ВыборкаНачислений);
			Пока ВыборкаНачислений.СледующийПоЗначениюПоля("НомерПоказателя") Цикл
				
				Если Не ЗначениеЗаполнено(ВыборкаНачислений.НомерПоказателя) Тогда 
					Продолжить;
				КонецЕсли;
				
				СтрокаНачислений["Показатель" + ВыборкаНачислений.НомерПоказателя] = ВыборкаНачислений.Показатель;
				СтрокаНачислений["Значение" + ВыборкаНачислений.НомерПоказателя] = ВыборкаНачислений.Значение;
				СтрокаНачислений["ТекущееЗначение" + ВыборкаНачислений.НомерПоказателя] = ВыборкаНачислений.ТекущееЗначение;
				СтрокаНачислений["ПредставлениеПоказателя" + ВыборкаНачислений.НомерПоказателя] = ВыборкаНачислений.ПредставлениеПоказателя;
				СтрокаНачислений["ТочностьПоказателя" + ВыборкаНачислений.НомерПоказателя] = "ЧДЦ=" + ВыборкаНачислений.Точность;
				
				УпорядочитьСписокНачислений = Истина;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если УпорядочитьСписокНачислений Тогда
			
			ТаблицаНачислений = ДанныеФормыНачисления.Выгрузить();
			ТаблицаНачислений.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
			
			Для каждого СтрокаТаблицыНачислений Из ТаблицаНачислений Цикл
				
				Если ЗначениеЗаполнено(СтрокаТаблицыНачислений.Начисление) Тогда
					СтрокаТаблицыНачислений.Порядок = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаТаблицыНачислений.Начисление).РеквизитДопУпорядочивания;
				Иначе
					СтрокаТаблицыНачислений.Порядок = 99999;
				КонецЕсли;
				
			КонецЦикла;
			
			ТаблицаНачислений.Сортировать("Порядок,Начисление");
			ДанныеФормыНачисления.Загрузить(ТаблицаНачислений);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ДанныеСтрокиНачисление Из ДанныеФормыНачисления Цикл
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСНачислением(ДанныеСтрокиНачисление,МаксимальноеКоличествоПоказателей, 1, ОписаниеТаблицыВидовРасчета, ДатаСобытия, ДатаОкончания);
	КонецЦикла;
	
КонецПроцедуры

Процедура РедактированиеСоставаНачисленийУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы)
	
	ИмяТаблицы =  ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
	
	ГруппаОтбораИ =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ДействующийВидРасчета" );
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ГруппаОтбораИЛИ =  ГруппаОтбораИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,, РежимРаботы) Цикл
		
		Если РежимРаботы = 0 Тогда
			
			Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании") Тогда
				
				ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".МинимальноеЗначение" + НомерПоказателя);
				ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ТекущееМинимальноеЗначение" + НомерПоказателя);
				
				ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".МаксимальноеЗначение" + НомерПоказателя);
				ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ТекущееМаксимальноеЗначение" + НомерПоказателя);
				
			Иначе
				
				ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Значение" + НомерПоказателя);
				ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ТекущееЗначение" + НомерПоказателя);
				
			КонецЕсли;
			
		Иначе
			
			ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Значение" + НомерПоказателя);
			ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ТекущееЗначение" + НомерПоказателя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Действие" );
	ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ДействующийВидРасчета" );
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НовыеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Действие" );
	ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УдаленныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
	
КонецПроцедуры

Процедура РедактированиеСоставаДополнительныхПоказателейСотрудниковПрочитатьТекущиеДанные(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, УходЗаРебенком = Ложь, ФормироватьСПериодичностьДень = Ложь)

	ПутьКДаннымПоказателей = ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей;
	
	ДанныеФормыПоказатели = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымПоказателей);
	ДанныеПоказателей = ДанныеФормыПоказатели.Выгрузить();
	
	Если Не УходЗаРебенком Тогда  	
		Если ДанныеПоказателей.Колонки.Найти("РабочееМесто") = Неопределено Тогда
			ДанныеПоказателей.Колонки.Добавить("РабочееМесто", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			Если СотрудникиДаты.Количество() > 0 Тогда
				ДанныеПоказателей.ЗаполнитьЗначения(СотрудникиДаты[0].Сотрудник, "РабочееМесто");			
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗначенияПоказателейДокумента", ДанныеПоказателей);
	Запрос.УстановитьПараметр("Сотрудники", СотрудникиДаты);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ДокументСсылка);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияПоказателейДокумента.НомерСтроки,
	|	ЗначенияПоказателейДокумента.РабочееМесто,
	|	ЗначенияПоказателейДокумента.ИдентификаторСтрокиВидаРасчета,
	|	ЗначенияПоказателейДокумента.Значение,
	|	ЗначенияПоказателейДокумента.Показатель
	|ПОМЕСТИТЬ ВТЗначенияПоказателейДокумента
	|ИЗ
	|	&ЗначенияПоказателейДокумента КАК ЗначенияПоказателейДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПоказателейДокумента.НомерСтроки,
	|	ЗначенияПоказателейДокумента.РабочееМесто КАК РабочееМесто,
	|	ЗначенияПоказателейДокумента.ИдентификаторСтрокиВидаРасчета,
	|	ЗначенияПоказателейДокумента.Показатель,
	|	ЗначенияПоказателейДокумента.Значение,
	|	ЕСТЬNULL(ЗначенияПериодическихПоказателей.Значение, 0) КАК ТекущееЗначение,
	|	ЕСТЬNULL(ПрименениеДополнительныхПоказателей.Применение, ЛОЖЬ) КАК ДействующийПоказатель
	|ИЗ
	|	ВТЗначенияПоказателейДокумента КАК ЗначенияПоказателейДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ПрименениеДополнительныхПоказателей
	|		ПО ЗначенияПоказателейДокумента.Показатель = ПрименениеДополнительныхПоказателей.Показатель
	|			И ЗначенияПоказателейДокумента.РабочееМесто = ПрименениеДополнительныхПоказателей.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
	|		ПО ЗначенияПоказателейДокумента.Показатель = ЗначенияПериодическихПоказателей.Показатель
	|			И ЗначенияПоказателейДокумента.РабочееМесто = ЗначенияПериодическихПоказателей.Сотрудник
	|ГДЕ
	|	ЗначенияПоказателейДокумента.ИдентификаторСтрокиВидаРасчета = 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	Для Каждого ДанныеСтроки Из ДанныеФормыПоказатели Цикл
		СтруктураПоиска.НомерСтроки = ДанныеСтроки.НомерСтроки;
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			ДанныеСтроки.ДействующийПоказатель = Выборка.ДействующийПоказатель;
			ДанныеСтроки.ТекущееЗначение = Выборка.ТекущееЗначение;
		КонецЕсли;
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСДополнительнымПоказателем(ДанныеСтроки);		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура РедактированиеСоставаДополнительныхПоказателейУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета)
	
	ИмяТаблицы = "Показатели"; 
	ПутьКДаннымПоказателей = ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей;
 
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);	
	
	ГруппаОтбораИ =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказателей + ".ДействующийПоказатель" );
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказателей + ".Значение");
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказателей + ".ТекущееЗначение");
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказателей + ".Действие" );
	ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказателей + ".ДействующийПоказатель" );
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НовыеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);	
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказателей + ".Действие");
	ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УдаленныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);	
	
КонецПроцедуры	

// Настраивает таблицу ввода дополнительных тарифных ставок, коэффициентов и т.д. в документах-редакторах плановых
// начислений.
//
Процедура УстановитьСвойстваТаблицыВводаДополнительныхТарифныхСтавок(Форма, РежимРаботы) Экспорт 
	
	Если РежимРаботы <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПоказателиГруппа", "Видимость", Ложь);
		Возврат;
	КонецЕсли;
	
	// Устанавливаем свойства для ввода дополнительных тарифных ставок в кадровых документах.
	Если Форма.Элементы.Найти("Показатели") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Показатели с нулевым идентификатором строки - независимые.
	Форма.Элементы.Показатели.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтрокиВидаРасчета", 0);
	
	// Настраиваем параметры выбора показателя.
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПоказателиРасчетаЗарплаты.ИмяПредопределенныхДанных
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.ИмяПредопределенныхДанных <> ""РайонныйКоэффициент""";
				   
	МассивИменПредопределенных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяПредопределенныхДанных");
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.СпособПримененияЗначений", Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.НазначениеПоказателя", Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЗначениеРассчитываетсяАвтоматически", Ложь));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.НеИспользуется", Ложь));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ИмяПредопределенныхДанных", МассивИменПредопределенных));
	
	Форма.Элементы.ПоказателиПоказатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	// Ограничение типа на значение.
	Форма.Элементы.ПоказателиЗначение.ОграничениеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	
КонецПроцедуры

Процедура ВводНачисленийДобавитьЭлементыФормы(Форма, КоличествоПоказателейРасчета, КоличествоОтображаемыхПоказателей, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИмяПВР, ВидРасчетаВШапке, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь)
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Если ОписаниеТаблицыВидовРасчета.ИспользоватьВилкуЗначений Тогда 
		ФОИспользоватьВилкуСтавокВШтатномРасписании = Истина;
	КонецЕсли;
	
	Если ДобавлятьРеквизитыФормы Тогда
	
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКДанным);
		
		ДобавляемыеРеквизиты = Новый Массив;
				
		// Добавляем реквизит для описания показателей, зависящих от стажа.
		Если РежимРаботы = 0 ИЛИ РежимРаботы = 1 Тогда
			Значение = Новый РеквизитФормы("ОписаниеСтажевыхПоказателей", Новый ОписаниеТипов("Строка"), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(Значение);
			Если РежимРаботы = 1 Тогда
				Значение = Новый РеквизитФормы("ВидыСтажаПоказателей", Новый ОписаниеТипов(), ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(Значение);
			КонецЕсли; 
		КонецЕсли; 
		
		// Реквизиты управления расчетом ФОТ.
		Если РежимРаботы <> 2 Тогда
			
			ФОТНеРедактируется = Новый РеквизитФормы("ФОТНеРедактируется", Новый ОписаниеТипов("Булево"), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(ФОТНеРедактируется);
				
			Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				РазмерМинДоРедактирования = Новый РеквизитФормы("РазмерМинДоРедактирования", Новый ОписаниеТипов("Число"), ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(РазмерМинДоРедактирования);
				
				РазмерМаксДоРедактирования = Новый РеквизитФормы("РазмерМаксДоРедактирования", Новый ОписаниеТипов("Число"), ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(РазмерМаксДоРедактирования);
			Иначе
				РазмерДоРедактирования = Новый РеквизитФормы("РазмерДоРедактирования", Новый ОписаниеТипов("Число"), ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(РазмерДоРедактирования);
			КонецЕсли;
			НачисленияФиксРасчет = Новый РеквизитФормы("НачисленияФиксРасчет", Новый ОписаниеТипов());
			ДобавляемыеРеквизиты.Добавить(НачисленияФиксРасчет);
		КонецЕсли; 
		
		// Добавим представление периода действия.
		ПредставлениеПериодаДействия = Новый РеквизитФормы("ПредставлениеПериодаДействия", Новый ОписаниеТипов("Строка"), ПутьКДанным);
		ДобавляемыеРеквизиты.Добавить(ПредставлениеПериодаДействия);
		
		МаксимальноеКоличествоПоказателейРеквизит = 
			Новый РеквизитФормы(ЗарплатаКадрыРасширенныйКлиентСервер.ИмяРеквизитаМаксимальноеКоличествоПоказателейПоОписаниюТаблицы(ОписаниеТаблицыВидовРасчета), Новый ОписаниеТипов("Число"));
		ДобавляемыеРеквизиты.Добавить(МаксимальноеКоличествоПоказателейРеквизит);
		
		// реквизиты формы
		ЗаголовокВидаРасчета = Новый РеквизитФормы("ПустаяСтрокаЗаголовка", Новый ОписаниеТипов("Строка"), ПутьКДанным);
		ДобавляемыеРеквизиты.Добавить(ЗаголовокВидаРасчета);
		
		ТипЗначенияПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты();
		
		Для НомерПоказателя = 1 По КоличествоПоказателейРасчета Цикл
			Показатель = Новый РеквизитФормы("Показатель" + НомерПоказателя, Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(Показатель);
			
			ПредставлениеПоказателя = Новый РеквизитФормы("ПредставлениеПоказателя" + НомерПоказателя, Новый ОписаниеТипов("Строка"), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(ПредставлениеПоказателя);
			
			ТочностьПоказателя = Новый РеквизитФормы("ТочностьПоказателя" + НомерПоказателя, Новый ОписаниеТипов("Строка"), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(ТочностьПоказателя);
			
			Если РежимРаботы = 0 Тогда
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					МинимальноеЗначение = Новый РеквизитФормы("МинимальноеЗначение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным);
					ДобавляемыеРеквизиты.Добавить(МинимальноеЗначение);
					МаксимальноеЗначение = Новый РеквизитФормы("МаксимальноеЗначение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным);
					ДобавляемыеРеквизиты.Добавить(МаксимальноеЗначение);
				Иначе
					Значение = Новый РеквизитФормы("Значение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным);
					ДобавляемыеРеквизиты.Добавить(Значение);
				КонецЕсли;
			Иначе											
				Значение = Новый РеквизитФормы(	"Значение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(Значение);
				КомандаРасшифровки = Новый РеквизитФормы("КомандаРасшифровки" + НомерПоказателя, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)), ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(КомандаРасшифровки);
			КонецЕсли;
		КонецЦикла;
		
		Если РежимРаботы = 2 Тогда
			Если ИмяПВР = "Удержания" Тогда
				ИспользованиеПериода = Новый РеквизитФормы("ИспользуетсяПериод", Новый ОписаниеТипов("Булево"), ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(ИспользованиеПериода);
			Иначе
				Если ОписаниеТаблицыВидовРасчета.СодержитПолеВидРасчета = Истина Тогда
					ИспользованиеПериода = Новый РеквизитФормы("ИспользованиеПериода", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыИспользованияПериодаНачисления"), ПутьКДанным);
					ДобавляемыеРеквизиты.Добавить(ИспользованиеПериода);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПВР = "Удержания" И РежимРаботы = 2 Тогда
			КатегорияУдержания = Новый РеквизитФормы("КатегорияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииУдержаний"), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(КатегорияУдержания);
		КонецЕсли;
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДобавитьРеквизитыОтображенияВремени(ДобавляемыеРеквизиты, ОписаниеТаблицыВидовРасчета);
		
		// Добавление реквизитов редактирования РК и СН в кадровых документах.
		ДобавитьРеквизитыНачисленийРедактируемыхВОтдельныхПолях(ДобавляемыеРеквизиты, ОписаниеТаблицыВидовРасчета, РежимРаботы);
		
		// Признак не рассчитываемого вида расчета.
		ФиксированнаяСумма = Новый РеквизитФормы("ФиксированнаяСумма",  
												Новый ОписаниеТипов("Булево"),
												ПутьКДанным);
												
		ДобавляемыеРеквизиты.Добавить(ФиксированнаяСумма);
		
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		
		// Устанавливает ссылки на начисления РК и СН в форме с редактирование РК и СН в отдельных элементах.
		УстановитьНачисленияРедактируемыеВОтдельныхПоляхФормы(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы);
		
	КонецЕсли;
	
	Если НЕ ОтложенноеИзменение Тогда
	// Установка реквизитов формы "МаксимальноеЗначениеПоказателей...".
		Форма[ЗарплатаКадрыРасширенныйКлиентСервер.ИмяРеквизитаМаксимальноеКоличествоПоказателейПоОписаниюТаблицы(ОписаниеТаблицыВидовРасчета)] = КоличествоОтображаемыхПоказателей;
	КонецЕсли;
		
	Если ДобавлятьЭлементыФормы Тогда
		
		ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
		ИмяПоляДляВставкиПоказателей = ОписаниеТаблицыВидовРасчета.ИмяПоляДляВставкиПоказателей; 
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФормуПолямиОтображенияВремени(Форма, ОписаниеТаблицыВидовРасчета);
		
		ЗаголовокГруппыПоказатели = НСтр("ru='Показатели';uk='Показники'");
		Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
			ЗаголовокГруппыПоказатели = НСтр("ru='Показатели (мин/макс)';uk='Показники (мін/макс)'");
		КонецЕсли; 
		
		// Описание показателей, зависящих от стажа размещаем вместе с начислением.
		Если РежимРаботы <> 2 Тогда
			ПолеНачисление = Форма.Элементы.Найти(ОписаниеТаблицыВидовРасчета.ИмяТаблицы + ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета);
			Если ПолеНачисление <> Неопределено Тогда
				ИмяГруппы = ПолеНачисление.Имя + "Группа";
				Группа = Форма.Элементы.Найти(ИмяГруппы);
				Если Группа = Неопределено Тогда
					Группа = Форма.Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), ПолеНачисление.Родитель, ПолеНачисление);
					Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
					Группа.Группировка = ГруппировкаКолонок.Горизонтальная;
					Группа.ОтображатьВШапке = Истина;
					Группа.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
					
					Если ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "Начисления"
						Или ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "НачисленияДоЗачисленияВСпискиЧасти"
						Или ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "УправленческиеНачисления" Тогда
						
						Группа.Заголовок = НСтр("ru='Начисление';uk='Нарахування'");
						
					ИначеЕсли ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "Льготы" Тогда 
						Группа.Заголовок = НСтр("ru='Льгота';uk='Пільга'");
					Иначе
						Группа.Заголовок = НСтр("ru='Удержание';uk='Утримання'");
					КонецЕсли;
					
					ПолеНачисление.ОтображатьВШапке = Ложь;
					ПолеНачисление.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
					ПолеНачисление.Ширина = 14;
					ПолеНачисление.РастягиватьПоГоризонтали = Истина;
					
					Форма.Элементы.Переместить(ПолеНачисление,Группа);
					
					ПолеОписаниеСтажевыхПоказателей = Форма.Элементы.Добавить(ОписаниеТаблицыВидовРасчета.ИмяТаблицы + "ОписаниеСтажевыхПоказателей", Тип("ПолеФормы"), Группа);
					ПолеОписаниеСтажевыхПоказателей.Вид = ВидПоляФормы.ПолеНадписи;
					ПолеОписаниеСтажевыхПоказателей.ТолькоПросмотр = Истина;
					ПолеОписаниеСтажевыхПоказателей.ОтображатьВШапке = Ложь;
					ПолеОписаниеСтажевыхПоказателей.Ширина = 11;
					ПолеОписаниеСтажевыхПоказателей.РастягиватьПоГоризонтали = Истина;
					ПолеОписаниеСтажевыхПоказателей.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
					ПолеОписаниеСтажевыхПоказателей.ПутьКДанным = ПутьКДанным + ".ОписаниеСтажевыхПоказателей";
					
					Если РежимРаботы = 1 Тогда
						ПолеОписаниеСтажевыхПоказателей.ГиперссылкаЯчейки = Истина;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		// поля формы
		Таблица = Форма.Элементы.Найти(ИмяТаблицы);
		
		ГруппаПоказатели = Форма.Элементы.Найти(ИмяТаблицы + "Показатели");
		Если ГруппаПоказатели = Неопределено Тогда
			
			ГруппаПоказатели = Форма.Элементы.Добавить(ИмяТаблицы + "Показатели", Тип("ГруппаФормы"), Таблица);
			ГруппаПоказатели.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаПоказатели.Группировка = ГруппировкаКолонок.Горизонтальная;
			ГруппаПоказатели.ОтображатьВШапке = Не ВидРасчетаВШапке;
			
			ПолеДляВставкиПоказателей = Форма.Элементы.Найти(ИмяПоляДляВставкиПоказателей);
			Форма.Элементы.Переместить(ГруппаПоказатели, Таблица, ПолеДляВставкиПоказателей);
		КонецЕсли;
		ГруппаПоказатели.Заголовок = ЗаголовокГруппыПоказатели;
		
		МассивНовыхПоказателей  = Новый Массив;
		Для НомерПоказателя = 1 По КоличествоОтображаемыхПоказателей Цикл
			МассивНовыхПоказателей.Добавить(НомерПоказателя);
			ГруппаПоказателя = Форма.Элементы.Найти(ИмяТаблицы + "ГруппаПоказатель" + НомерПоказателя);
			Если ГруппаПоказателя = Неопределено Тогда
				
				ГруппаПоказателя = Форма.Элементы.Добавить(ИмяТаблицы + "ГруппаПоказатель" + НомерПоказателя, Тип("ГруппаФормы"), ГруппаПоказатели);
				ГруппаПоказателя.Вид = ВидГруппыФормы.ГруппаКолонок;
				ГруппаПоказателя.Группировка = ГруппировкаКолонок.Горизонтальная;
				ГруппаПоказателя.ОтображатьВШапке = Ложь;
				
				Если Не ВидРасчетаВШапке Тогда
					Показатель = Форма.Элементы.Добавить(ИмяТаблицы + "Показатель" + НомерПоказателя, Тип("ПолеФормы"), ГруппаПоказателя);
					Показатель.ПутьКДанным = ПутьКДанным + ".Показатель" + НомерПоказателя;
					Показатель.ТолькоПросмотр = Истина;
					Показатель.ОтображатьВШапке = Ложь;
					Показатель.Ширина = 20;
				КонецЕсли;	
				
				Если РежимРаботы = 0 Тогда
					Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
						Значение = Форма.Элементы.Добавить(ИмяТаблицы + "МинимальноеЗначение" + НомерПоказателя, Тип("ПолеФормы"), ГруппаПоказателя);
						Значение.Вид = ВидПоляФормы.ПолеВвода;
						Значение.ПутьКДанным = ПутьКДанным + ".МинимальноеЗначение" + НомерПоказателя;
						Значение.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
						Значение.ОтображатьВШапке = Ложь;
						Значение.Ширина = 10;
						Значение.УстановитьДействие("ПриИзменении", "Подключаемый_ЗначениеПоказателяПриИзменении" + ИмяТаблицы);
						
						Значение = Форма.Элементы.Добавить(ИмяТаблицы + "МаксимальноеЗначение" + НомерПоказателя, Тип("ПолеФормы"), ГруппаПоказателя);
						Значение.Вид = ВидПоляФормы.ПолеВвода;
						Значение.ПутьКДанным = ПутьКДанным + ".МаксимальноеЗначение" + НомерПоказателя;
						Значение.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
						Значение.ОтображатьВШапке = Ложь;
						Значение.Ширина = 10;
						Значение.УстановитьДействие("ПриИзменении", "Подключаемый_ЗначениеПоказателяПриИзменении" + ИмяТаблицы);
					Иначе
						Значение = Форма.Элементы.Добавить(ИмяТаблицы + "Значение" + НомерПоказателя, Тип("ПолеФормы"), ГруппаПоказателя);
						Значение.Вид = ВидПоляФормы.ПолеВвода;
						Значение.ПутьКДанным = ПутьКДанным + ".Значение" + НомерПоказателя;
						Значение.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
						Значение.ОтображатьВШапке = Ложь;
						Значение.Ширина = 10;
						Значение.УстановитьДействие("ПриИзменении", "Подключаемый_ЗначениеПоказателяПриИзменении" + ИмяТаблицы);
					КонецЕсли;
				Иначе
					ГруппаЗначения = Форма.Элементы.Добавить(ИмяТаблицы + "ГруппаЗначенияПоказателя" + НомерПоказателя, Тип("ГруппаФормы"), ГруппаПоказателя);
					ГруппаЗначения.Вид = ВидГруппыФормы.ГруппаКолонок;
					ГруппаЗначения.Группировка = ГруппировкаКолонок.Вертикальная;
					ГруппаЗначения.ОтображатьВШапке = Ложь;
					
					Значение = Форма.Элементы.Добавить(ИмяТаблицы + "Значение" + НомерПоказателя, Тип("ПолеФормы"), ГруппаЗначения);
					Значение.Вид = ВидПоляФормы.ПолеВвода;
					Значение.ПутьКДанным = ПутьКДанным + ".Значение" + НомерПоказателя;
					Значение.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
					Значение.ОтображатьВШапке = ВидРасчетаВШапке;
					Значение.Ширина = 10;
					Значение.УстановитьДействие("ПриИзменении", "Подключаемый_ЗначениеПоказателяПриИзменении" + ИмяТаблицы);
					
					КомандаРасшифровки = Форма.Элементы.Добавить(ИмяТаблицы + "КомандаРасшифровки" + НомерПоказателя, Тип("ПолеФормы"), ГруппаЗначения);
					КомандаРасшифровки.Вид = ВидПоляФормы.ПолеНадписи;
					КомандаРасшифровки.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
					КомандаРасшифровки.ПутьКДанным = ПутьКДанным + ".КомандаРасшифровки" + НомерПоказателя;
					КомандаРасшифровки.ОтображатьВШапке = Ложь;
					КомандаРасшифровки.Ширина = 10;
					КомандаРасшифровки.ГиперссылкаЯчейки = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоОтображаемыхПоказателей < ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,, РежимРаботы) Тогда
			Для НомерПоказателя = КоличествоОтображаемыхПоказателей + 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,, РежимРаботы) Цикл
				ГруппаПоказатели = Форма.Элементы.Найти(ИмяТаблицы + "ГруппаПоказатель" + НомерПоказателя);
				Если Не ГруппаПоказатели = Неопределено Тогда
					ЗарплатаКадры.УдалитьПодчиненныеЭлементыГруппы(Форма, ГруппаПоказатели);
					Форма.Элементы.Удалить(ГруппаПоказатели);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Добавление элементов формы для редактирования РК и СН в кадровых документах.
		ДобавитьЭлементыФормыНачисленийРедактируемыхВОтдельныхПолях(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДобавлятьЭлементыФормы);
		
		ВводНачисленийУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИмяПВР, МассивНовыхПоказателей);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьДанныеПоказателейВСтрокуТаблицыВидовРасчета(ВидРасчетаИнфо, СтрокаНачислений, ДанныеПоказателей, РежимРаботы, ОтображатьТекущиеЗначения = Ложь, РасчетныйДокументСсылка = Неопределено, ФормаДополнена = Истина, Сотрудник = Неопределено, ДатаСведений = '00010101', ИспользоватьВилкуЗначений = Ложь) Экспорт
	
	ОтборСтрокПоказателей = Новый Структура("ИдентификаторСтрокиВидаРасчета,Показатель");
	ОтборСтрокПоказателей.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Если ИспользоватьВилкуЗначений Тогда 
		ФОИспользоватьВилкуСтавокВШтатномРасписании = Истина;
	КонецЕсли;
	
	Если РежимРаботы = 2 Тогда
		МаксимальноеЧислоПоказателей = ВидРасчетаИнфо.КоличествоОтображаемыхПоказателей;
	Иначе
		МаксимальноеЧислоПоказателей = ВидРасчетаИнфо.КоличествоПостоянныхПоказателей;
	КонецЕсли;
	Если МаксимальноеЧислоПоказателей > 0 И Не СтрокаНачислений.Свойство("Показатель" + МаксимальноеЧислоПоказателей) Тогда
		ТекстПредупреждения = ЗарплатаКадрыРасширенныйКлиентСервер.ТекстПредупрежденияОписаниеНачисленийИзменилось();
		ФормаДополнена = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
	КонецЕсли;
	
	Если РежимРаботы = 2 Тогда
		ЗаполнитьЗначенияСвойств(СтрокаНачислений, ВидРасчетаИнфо);
	ИначеЕсли ВидРасчетаИнфо.Свойство("ФОТНеРедактируется") Тогда
		СтрокаНачислений.ФОТНеРедактируется = ВидРасчетаИнфо.ФОТНеРедактируется;
	КонецЕсли;
	
	СведенияСтрокиНачисленияЗависящегоОтСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.СведенияСтрокиНачисленияЗависящегоОтСтажа();
	СведенияСтрокиНачисленияЗависящегоОтСтажа.Сотрудник = Сотрудник;
	СведенияСтрокиНачисленияЗависящегоОтСтажа.ДатаСведений = ДатаСведений;
	
	СчетчикПоказателей = 1;
	Для Каждого СтрокаПоказателя Из ВидРасчетаИнфо.Показатели Цикл
		
		ПоказательИнфо = СведенияОПоказателеРасчетаЗарплаты(СтрокаПоказателя.Показатель);
		
		ЗарплатаКадрыРасширенныйКлиентСервер.ПодготовитьИнформациюОСтажевыхПоказателях(СведенияСтрокиНачисленияЗависящегоОтСтажа, ПоказательИнфо, РежимРаботы);
		
		// Принимается решение о том, отображаемый ли это показатель или нет.
		Если РежимРаботы = 2 Тогда
			ОтображатьПоказатель = СтрокаПоказателя.ИспользоватьПриРасчете И ПоказательИнфо.ОтображатьВДокументахНачисления;
		Иначе
			ОтображатьПоказатель = СтрокаПоказателя.ЗапрашиватьПриВводе И ПоказательИнфо.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		КонецЕсли;
		
		Если Не ОтображатьПоказатель Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНачислений["Показатель" + СчетчикПоказателей] 				= СтрокаПоказателя.Показатель;
		СтрокаНачислений["ТочностьПоказателя" + СчетчикПоказателей] 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);
		СтрокаНачислений["ПредставлениеПоказателя" + СчетчикПоказателей] 	= ?(ЗначениеЗаполнено(ПоказательИнфо["КраткоеНаименование"]), ПоказательИнфо["КраткоеНаименование"], ПоказательИнфо["Наименование"]);
		
		ОтборСтрокПоказателей.Показатель = СтрокаПоказателя.Показатель;
		СтрокиПоказателей = ДанныеПоказателей.НайтиСтроки(ОтборСтрокПоказателей);
		Если СтрокиПоказателей.Количество() > 0 Тогда
			Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				ЗначениеМин = СтрокиПоказателей[0].ЗначениеМин;
				ЗначениеМакс = СтрокиПоказателей[0].ЗначениеМакс;
			Иначе
				Значение = СтрокиПоказателей[0].Значение;
			КонецЕсли;
		Иначе
			Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				ЗначениеМин = ПоказательИнфо.ЗначениеПоУмолчанию;
				ЗначениеМакс = ПоказательИнфо.ЗначениеПоУмолчанию;
			Иначе
				Значение = ПоказательИнфо.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
			СтрокаНачислений["МинимальноеЗначение" + СчетчикПоказателей] = ЗначениеМин;
			СтрокаНачислений["МаксимальноеЗначение" + СчетчикПоказателей] = ЗначениеМакс;
		Иначе
			СтрокаНачислений["Значение" + СчетчикПоказателей] = Значение;
		КонецЕсли;
			
		Если ОтображатьТекущиеЗначения Тогда
			Если РежимРаботы = 0 Тогда
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					СтрокаНачислений["ТекущееМинимальноеЗначение" + СчетчикПоказателей] = СтрокиПоказателей[0].ТекущееМинимальноеЗначение;
					СтрокаНачислений["ТекущееМаксимальноеЗначение" + СчетчикПоказателей] = СтрокиПоказателей[0].ТекущееМаксимальноеЗначение;
				Иначе
					СтрокаНачислений["ТекущееЗначение" + СчетчикПоказателей] = СтрокиПоказателей[0].ТекущееЗначение;
				КонецЕсли;
			Иначе
				СтрокаНачислений["ТекущееЗначение" + СчетчикПоказателей] = Значение;
			КонецЕсли;
		КонецЕсли;
			
		СчетчикПоказателей = СчетчикПоказателей + 1;
		
	КонецЦикла;
	
	ЗарплатаКадрыРасширенныйКлиентСервер.ПоместитьВСтрокуНачисленийИнформациюОСтажевыхПоказателях(СтрокаНачислений, СведенияСтрокиНачисленияЗависящегоОтСтажа, РежимРаботы);
	
	УчетСреднегоЗаработка.ЗаполнитьДанныеПоказателейРасчетаЗарплаты(ВидРасчетаИнфо, СтрокаНачислений, ДанныеПоказателей, РежимРаботы, ОтображатьТекущиеЗначения, РасчетныйДокументСсылка);
	ЗаполнитьДанныеПоказателейСдельногоЗаработка(ВидРасчетаИнфо, СтрокаНачислений, РежимРаботы, РасчетныйДокументСсылка);
	РасчетЗарплатыРасширенныйПереопределяемый.ПоместитьДанныеДополнительныхПоказателейВСтрокуТаблицыВидовРасчета(ВидРасчетаИнфо, СтрокаНачислений, ДанныеПоказателей, РежимРаботы, ОтображатьТекущиеЗначения);
	
КонецПроцедуры

Процедура ВводНачисленийРеквизитВДанныеТаблицыРасчета(Форма, Объект, ОписаниеТаблицы, РежимРаботы)
	
	// Коллекция в данных формы
	ДанныеФормыКоллекция = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	
	// В ряде случаев метод применяется для преобразования только данных формы (без данных объекта).
	ТолькоФорма = ТипЗнч(Объект) = Тип("УправляемаяФорма");
	
	// Табличная часть объекта
	Если Не ТолькоФорма Тогда
		ЧастиИмениТаблицы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеТаблицы.ПутьКДанным, ".");
		ТаблицаОбъекта = Объект[ЧастиИмениТаблицы[ЧастиИмениТаблицы.ВГраница()]];
	КонецЕсли;
	
	// Максимальное количество показателей в таблице.
	КоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы,, РежимРаботы);
	
	Если Не ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
		ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(
			Объект[ОписаниеТаблицы.ИмяРеквизитаВидРасчета]);
	КонецЕсли;
	
	ИндексыУдаляемыхСтрок = Новый Массив;
	
	ИдентификаторСтроки = ОписаниеТаблицы.НомерТаблицы * 1000000 + 1;
	Индекс = 0;
	СтруктураДокументОснование = Новый Структура("ДокументОснование");
	Пока Индекс < ДанныеФормыКоллекция.Количество() Цикл
		
		// Устанавливаем номер-идентификатор строкам коллекций.
		Если Не ТолькоФорма Тогда
			ТаблицаОбъекта[Индекс].ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		КонецЕсли;
		
		СтрокаКоллекции = ДанныеФормыКоллекция[Индекс];
		СтрокаКоллекции.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		
		// Заполняем показатели в связанную табличную часть, устанавливаем идентификатор строки ведущей таблицы.
		Если ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
			ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(
				СтрокаКоллекции[ОписаниеТаблицы.ИмяРеквизитаВидРасчета]);
		КонецЕсли;
		
		ЗаполнятьСтроку = Истина;
		Если ЗарплатаКадрыРасширенныйКлиентСервер.ПоказыватьВременноОтмененныеНачисления(ОписаниеТаблицы) Тогда
			
			Действие = Неопределено;
			Если ЗарплатаКадрыРасширенныйКлиентСервер.ТабличнаяЧастьСодержитПолеДействие(ОписаниеТаблицы) Тогда
				Действие = СтрокаКоллекции.Действие;
			КонецЕсли;
			
			Если Не СтрокаКоллекции.ДействующийВидРасчета
				И Не ЗначениеЗаполнено(Действие) Тогда
				
				ИндексыУдаляемыхСтрок.Вставить(0, Индекс);
				ЗаполнятьСтроку = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаполнятьСтроку Тогда
			
			Если ИнфоОВидеРасчета.Рассчитывается = Ложь Тогда
				
				Если Не ТолькоФорма Тогда
					
					Если РежимРаботы <> 2 И ИнфоОВидеРасчета.Свойство("ВключатьВФОТ") И Не ИнфоОВидеРасчета.ВключатьВФОТ Тогда
						
						Если Не ПустаяСтрока(ОписаниеТаблицы.ИмяПоляРезультат)
							И СтрокаКоллекции.Свойство("Значение1") Тогда
							
							ТаблицаОбъекта[Индекс][ОписаниеТаблицы.ИмяПоляРезультат] = СтрокаКоллекции.Значение1;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
					
					Если СтрокаКоллекции["Показатель" + НомерПоказателя].Пустая() Тогда
						// Нашли пустой показатель
						Прервать;
					КонецЕсли;
					
					Если (РежимРаботы <> 0 И Не ЗначениеЗаполнено(СтрокаКоллекции["Значение" + НомерПоказателя])) Тогда
						// Значение показателя не заполнено - не переносим.
						Продолжить;
					КонецЕсли;
					
					НоваяСтрокаПоказателя = Объект.Показатели.Добавить();
					НоваяСтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
					НоваяСтрокаПоказателя.Показатель = СтрокаКоллекции["Показатель" + НомерПоказателя];
					Если СтрокаКоллекции.Свойство("ДокументОснование") Тогда
						СтруктураДокументОснование.ДокументОснование = СтрокаКоллекции.ДокументОснование;
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателя, СтруктураДокументОснование);
					КонецЕсли;
					
					Если РежимРаботы <> 0 Тогда
						НоваяСтрокаПоказателя.Значение = СтрокаКоллекции["Значение" + НомерПоказателя];
					Иначе
						
						Если СтрокаКоллекции.Свойство("ИдентификаторСтрокиПозиции") Тогда
							НоваяСтрокаПоказателя.ИдентификаторСтрокиПозиции = СтрокаКоллекции.ИдентификаторСтрокиПозиции;
						КонецЕсли;
						
						Если СтрокаКоллекции.Свойство("Значение" + НомерПоказателя) Тогда
							НоваяСтрокаПоказателя.Значение = СтрокаКоллекции["Значение" + НомерПоказателя];
						КонецЕсли;
						
						Если СтрокаКоллекции.Свойство("МинимальноеЗначение" + НомерПоказателя) Тогда
							НоваяСтрокаПоказателя.ЗначениеМин = СтрокаКоллекции["МинимальноеЗначение" + НомерПоказателя];
						КонецЕсли;
						
						Если СтрокаКоллекции.Свойство("МаксимальноеЗначение" + НомерПоказателя) Тогда
							НоваяСтрокаПоказателя.ЗначениеМакс = СтрокаКоллекции["МаксимальноеЗначение" + НомерПоказателя];
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ИдентификаторСтроки = ИдентификаторСтроки + 1;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	ДобавитьСтрокиНачисленийРедактируемыхВОтдельныхПолях(Форма, Объект, ОписаниеТаблицы, РежимРаботы, ИдентификаторСтроки);
	
	// Удаление не действующих строк из таблицы объекта
	Если Не ТолькоФорма И ИндексыУдаляемыхСтрок.Количество() > 0 Тогда
		
		Для каждого Индекс Из ИндексыУдаляемыхСтрок Цикл
			ТаблицаОбъекта.Удалить(Индекс);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНачисленийУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИмяПВР, МассивНовыхПоказателей)
	
	ИмяТаблицы =  ОписаниеТаблицыВидовРасчета.ИмяТаблицы; 
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	
	ЭтоПерерасчеты = Ложь;
	ОписаниеТаблицыВидовРасчета.Свойство("ЭтоПерерасчеты", ЭтоПерерасчеты);	
	
	СодержитПолеДействие = ЗарплатаКадрыРасширенныйКлиентСервер.ТабличнаяЧастьСодержитПолеДействие(ОписаниеТаблицыВидовРасчета);
	
	Если ЭтоПерерасчеты Тогда
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
		
		ГруппаОтбора =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Сторно");
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксСторно");
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ОписаниеТаблицыВидовРасчета.ИмяПоляРезультат);
	КонецЕсли;
	
	ДобавитьУсловноеОформлениеПолейПериода(Форма.УсловноеОформление, РежимРаботы, ОписаниеТаблицыВидовРасчета, ИмяПВР);
	
	// Условное оформление описания стажевых показателей.
	Если РежимРаботы = 0 ИЛИ РежимРаботы = 1 Тогда
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ОписаниеСтажевыхПоказателей" );
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОписаниеТаблицыВидовРасчета.ИмяТаблицы + "ОписаниеСтажевыхПоказателей");
		
	КонецЕсли; 
 
	ФОИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Если ОписаниеТаблицыВидовРасчета.ИспользоватьВилкуЗначений Тогда 
		ФОИспользоватьВилкуСтавокВШтатномРасписании = Истина;
	КонецЕсли;
	
	// Условное оформление полей ввода ФОТ.
	Если РежимРаботы = 0 ИЛИ РежимРаботы = 1 Тогда
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФОТНеРедактируется" );
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		Если РежимРаботы = 0 Тогда
			
			Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "РазмерМин");
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "РазмерМакс");
			Иначе
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Размер");
			КонецЕсли;
			
		Иначе
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Размер");
		КонецЕсли;
		
	КонецЕсли; 
	
	Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,, РежимРаботы) Цикл
		
		Если МассивНовыхПоказателей.Найти(НомерПоказателя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
			И ОписаниеТаблицыВидовРасчета.Свойство("ЗапретитьИзменениеПоказателяТарифнойСетки") Тогда 
			
			// Первый показатель используется также для ввода значения не рассчитываемого вида расчета.
			Если ОписаниеТаблицыВидовРасчета.ЭтоПлановыеНачисленияУдержания И НомерПоказателя = 1 Тогда 
				
				ГруппаОтбораИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
				
				ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксированнаяСумма");
				ЭлементОтбора.ПравоеЗначение = Ложь;
				
				ГруппаОтбораИЛИ = ГруппаОтбораИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				
			Иначе 
				
				ГруппаОтбораИЛИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				
			КонецЕсли;
			
			ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
			ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПоказательТарифнойСетки");
			
			ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
			
		Иначе 
			
			// Первый показатель используется также для ввода значения не рассчитываемого вида расчета.
			Если ОписаниеТаблицыВидовРасчета.ЭтоПлановыеНачисленияУдержания И НомерПоказателя = 1 Тогда 
				
				ГруппаОтбораИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
				
				ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
				
				ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксированнаяСумма");
				ЭлементОтбора.ПравоеЗначение = Ложь;
				
			Иначе 
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		Если РежимРаботы = 0 Тогда
			
			Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "МинимальноеЗначение" + НомерПоказателя);
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "МаксимальноеЗначение" + НомерПоказателя);
			Иначе
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Значение" + НомерПоказателя);
			КонецЕсли;
			
		Иначе
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Значение" + НомерПоказателя);
		КонецЕсли;
		
		Если ЭтоПерерасчеты Тогда
			// Показатель и значение не отображаются для сторно записей с ФиксСтрокой.
			ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			
			ГруппаОтбора =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксСтрока");
			ЭлементОтбора.ПравоеЗначение = Истина;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Сторно");
			ЭлементОтбора.ПравоеЗначение = Истина;
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Показатель" + НомерПоказателя);
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Значение" + НомерПоказателя);
		КонецЕсли;
		
		// Наименования показателей выводятся курсивом.
		ТекущийШрифт = Форма.Элементы[ИмяТаблицы].Шрифт;
		НаклонныйШрифт = Новый Шрифт(ТекущийШрифт, , , , Истина);
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", НаклонныйШрифт);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Показатель" + НомерПоказателя);
		
		Если ОписаниеТаблицыВидовРасчета.ЭтоПлановыеНачисленияУдержания Тогда 
		
			// Оформление размера не рассчитываемого вида расчета.
			Если НомерПоказателя = 1 Тогда
				
				ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",
					НСтр("ru='Фиксированная сумма';uk='Фіксована сума'"));
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксированнаяСумма");
				ЭлементОтбора.ПравоеЗначение = Истина;
				
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Показатель" + НомерПоказателя);
				
			КонецЕсли;
			
			// Для не рассчитываемых видов расчета размер ФОТ не редактируется.
			ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксированнаяСумма");
			ЭлементОтбора.ПравоеЗначение = Истина;
			
			Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "РазмерМин");
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "РазмерМакс");
			Иначе 
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Размер");
			КонецЕсли;
			
		КонецЕсли;
		
		// Не заполненные значения показателей отображаются как "0".
		Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				
			// Минимальные значения
			ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "0");
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".МинимальноеЗначение" + НомерПоказателя);
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "МинимальноеЗначение" + НомерПоказателя);
			
			// Максимальные значения
			ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "0");
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".МаксимальноеЗначение" + НомерПоказателя);
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "МаксимальноеЗначение" + НомерПоказателя);
			
		Иначе
			
			ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "0");
			Если ИмяТаблицы <> "Удержания" И НЕ СодержитПолеДействие И РежимРаботы = 1 И  ОписаниеТаблицыВидовРасчета.Свойство("ОтмечатьНеЗаполненныеПоказатели") И ОписаниеТаблицыВидовРасчета.ОтмечатьНеЗаполненныеПоказатели Тогда
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			КонецЕсли; 
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Значение" + НомерПоказателя);
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Значение" + НомерПоказателя);
			
			Если ИмяТаблицы <> "Удержания" И СодержитПолеДействие И РежимРаботы = 1 Тогда
				
				ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Значение" + НомерПоказателя);
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Действие");
				ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
				
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Значение" + НомерПоказателя);
				
			КонецЕсли; 
			
		КонецЕсли;
		
		// Представление показателя - отображается краткое наименование.
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ПредставлениеПоказателя" + НомерПоказателя));
		
		ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора =	ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
		
		Если ЭтоПерерасчеты Тогда
			
			ГруппаОтбораИли = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ЭлементОтбора = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксСтрока");
			ЭлементОтбора.ПравоеЗначение = Истина;
			
			ЭлементОтбора = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Сторно");
			ЭлементОтбора.ПравоеЗначение = Истина;
			
		КонецЕсли;
	
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Показатель" + НомерПоказателя);
		
		// Оформление команды расшифровки:
		// - не видима, если не заполнена.
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".КомандаРасшифровки" + НомерПоказателя);
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "КомандаРасшифровки" + НомерПоказателя);
		
		// - цвет текста
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "КомандаРасшифровки" + НомерПоказателя);
		
		// Добавим условное оформление формата в зависимости от точности показателя.
		ДобавитьУсловноеОформлениеФорматаЗначенияПоказателя(Форма, ПутьКДанным, ИмяТаблицы, НомерПоказателя, РежимРаботы, ОписаниеТаблицыВидовРасчета);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование) Тогда
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ДоступенВыборОснования");
		ЭлементОтбора.ПравоеЗначение = Ложь;
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование);
				
	КонецЕсли;
	
	Если ИмяПВР = "Удержания" И РежимРаботы = 2 Тогда
		// ВознаграждениеПлатежногоАгента
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".КатегорияУдержания");
		ЭлементОтбора.ПравоеЗначение = Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ДокументОснование");
		
		// ДСВ
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".КатегорияУдержания");
		ЭлементОтбора.ПравоеЗначение = Перечисления.КатегорииУдержаний.ДСВ;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Не заполняется>';uk='<Не заповнюється>'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ДокументОснование");
		
		// Все остальные роли
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		СписокРолей = Новый СписокЗначений;
		СписокРолей.Добавить(Перечисления.КатегорииУдержаний.ИсполнительныйЛист);
		СписокРолей.Добавить(Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента);
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".КатегорияУдержания");
		ЭлементОтбора.ПравоеЗначение = СписокРолей;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Получатель");
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ПлатежныйАгент");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеФорматаЗначенияПоказателя(Форма, ПутьКДанным, ИмяТаблицы, НомерПоказателя, РежимРаботы, ОписаниеТаблицыВидовРасчета)
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ТочностьПоказателя" + НомерПоказателя));
	
	Если РежимРаботы = 0 Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании") Тогда
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "МинимальноеЗначение" + НомерПоказателя);
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "МаксимальноеЗначение" + НомерПоказателя);
		Иначе
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Значение" + НомерПоказателя);
		КонецЕсли;
		
	Иначе
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Значение" + НомерПоказателя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеПолейПериода(УсловноеОформление, РежимРаботы, ОписаниеТаблицы, ИмяПВР)
	
	Если РежимРаботы <> 2 Тогда
		Возврат;
	КонецЕсли;
	
	// Условное оформление полей с датами и периодом.
	ИмяРеквизитаДатаНачала  = ОписаниеТаблицы.ИмяРеквизитаДатаНачала;
	ИмяРеквизитаДатаОкончания  = ОписаниеТаблицы.ИмяРеквизитаДатаОкончания;
	
	Если ИмяРеквизитаДатаНачала = Неопределено Или ИмяРеквизитаДатаОкончания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы =  ОписаниеТаблицы.ИмяТаблицы; 
	ПутьКДанным = ОписаниеТаблицы.ПутьКДанным;
	
	Если ИмяПВР = "Удержания" Тогда
		// Оформление для удержаний.
		Элемент = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Элемент.Отбор,
			ПутьКДанным + ".ИспользуетсяПериод",
			ВидСравненияКомпоновкиДанных.Равно,
			Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяРеквизитаДатаНачала);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяРеквизитаДатаОкончания);
	Иначе
		// Скрываем даты для строк без периода действия.
		Элемент = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Элемент.Отбор,
			ПутьКДанным + ".ИспользованиеПериода",
			ВидСравненияКомпоновкиДанных.Равно,
			Перечисления.ВариантыИспользованияПериодаНачисления.НеИспользовать);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяРеквизитаДатаНачала);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяРеквизитаДатаОкончания);
		// Скрываем месяц для строк с периодом действия.
		Элемент = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Элемент.Отбор,
			ПутьКДанным + ".ИспользованиеПериода",
			ВидСравненияКомпоновкиДанных.Равно,
			Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ПериодДействия");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьПоказатели(ВидРасчетаОбъект, ИдентификаторыПоказателей, ИмяСвойства)
	
	Если ИдентификаторыПоказателей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредопределенныеПоказатели = ЗарплатаКадрыРасширенныйПовтИсп.ИменаПредопределенныхПоказателей();
	
	Для Каждого ИдентификаторПоказателя Из ИдентификаторыПоказателей Цикл
		
		Если ПредопределенныеПоказатели.Найти(ИдентификаторПоказателя) <> Неопределено Тогда 
			ПоказательСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты." + ИдентификаторПоказателя);
		Иначе 
			ПоказательСсылка = РасчетЗарплатыРасширенный.ПоказательПоИдентификатору(ИдентификаторПоказателя);
		КонецЕсли;
		
		НайденныеСтроки = ВидРасчетаОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", ПоказательСсылка));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока[ИмяСвойства] = Истина;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Возвращает таблицу  в одной колонке которой рабочие места физического лица, используемые в документе,
// а во второй колонке дата документа.
Функция НесколькоРабочихМестТаблицаСотрудниковДат(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест)
	ТаблицаРабочихМест = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыРабочихМест.ПутьКДанным);
	
	ТаблицаСотрудников = ТаблицаРабочихМест.Выгрузить(,ОписаниеТаблицыРабочихМест.ИмяРеквизитаСотрудник);
	ТаблицаСотрудников.Свернуть(ОписаниеТаблицыРабочихМест.ИмяРеквизитаСотрудник);
	ТаблицаСотрудников.Колонки[ОписаниеТаблицыРабочихМест.ИмяРеквизитаСотрудник].Имя = "Сотрудник";
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ВремяРегистрации = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ДатаПутьКДанным);
	ТаблицаСотрудников.ЗаполнитьЗначения(ВремяРегистрации - 1, "Период");
	Возврат ТаблицаСотрудников
КонецФункции

// Процедура добавляет на форму служебные реквизиты для работы с несколькими рабочими местами одного физлица,
// а в таблицы начислений, авансов и плановых начислений реквизиты хранящие рабочее место, представление этого рабочего
// места и элементы для отображения этих реквизитов.
Процедура НесколькоРабочихМестДобавитьРеквизитыИЭлементы(Форма, ОписаниеФормы, СтруктураТаблицФормы, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь)
	
	ОписаниеТаблицыРабочихМест = СтруктураТаблицФормы.ОписаниеТаблицыРабочихМест;
	ОписаниеТаблицыНачислений = СтруктураТаблицФормы.ОписаниеТаблицыНачислений;
	ОписаниеТаблицыАвансов = СтруктураТаблицФормы.ОписаниеТаблицыАвансов;
	ОписаниеТаблицыПрименениеПлановыхНачислений = СтруктураТаблицФормы.ОписаниеТаблицыПрименениеПлановыхНачислений;
	ОписаниеТаблицыПересчетТарифныхСтавок = СтруктураТаблицФормы.ОписаниеТаблицыПересчетТарифныхСтавок;
	ОписаниеТаблицыОплатаТруда = СтруктураТаблицФормы.ОписаниеТаблицыОплатаТруда;
	ОписаниеТаблицыЛьгот = СтруктураТаблицФормы.ОписаниеТаблицыЛьгот;
	ОписаниеТаблицыОплатаЛьгот = СтруктураТаблицФормы.ОписаниеТаблицыОплатаЛьгот;
	
	Если ДобавлятьРеквизитыФормы Тогда
		
		ДобавляемыеРеквизиты = Новый Массив;
		
		НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыРабочихМест.ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"));
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		
		ДобавляемыеРеквизиты.Очистить();
		
		НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыРабочихМест.ИмяРеквизитаСотрудник, Новый ОписаниеТипов("СправочникСсылка.Сотрудники"),	ОписаниеТаблицыРабочихМест.ПутьКДанным);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыРабочихМест.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыРабочихМест.ПутьКДанным);	
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
		
		НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыРабочихМест.ИмяРеквизитаПодразделение, Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"), ОписаниеТаблицыРабочихМест.ПутьКДанным);	
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
		
		НовыйРеквизит = Новый РеквизитФормы(ОписаниеФормы.ИмяРеквизитаПризнакаНесколькихРабочихМест, Новый ОписаниеТипов("Булево"));
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		Если ОписаниеФормы.ЕстьАвансы Тогда
			
			ОписаниеТипаСпособРасчетаАванса = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаАванса");
			
			КЧ = Новый КвалификаторыЧисла(15,2);
			Массив = Новый Массив;
			Массив.Добавить(Тип("Число"));
			ОписаниеТипаАванс = Новый ОписаниеТипов(Массив, , ,КЧ);
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыАвансов.ИмяРеквизитаСпособРасчетаАвансаТекущий, ОписаниеТипаСпособРасчетаАванса, ОписаниеТаблицыАвансов.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыАвансов.ИмяРеквизитаПоказателяТекущий, ОписаниеТипаАванс, ОписаниеТаблицыАвансов.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыАвансов.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыАвансов.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыАвансов.ИмяРеквизитаКомментарий, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыАвансов.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьПрименениеПлановыхНачислений Тогда
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяРеквизитаПоказателяТекущий, Новый ОписаниеТипов("Булево"), ОписаниеТаблицыПрименениеПлановыхНачислений.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыПрименениеПлановыхНачислений.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяРеквизитаКомментарий, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыПрименениеПлановыхНачислений.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьПересчетТарифныхСтавок Тогда
			
			КЧ = Новый КвалификаторыЧисла(15,2);
			Массив = Новый Массив;
			Массив.Добавить(Тип("Число"));
			ОписаниеТипаТарифнаяСтавка = Новый ОписаниеТипов(Массив, , ,КЧ);
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаПоказателяТекущий, Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда"), ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаСовокупнаяТарифнаяСтавкаТекущий, ОписаниеТипаТарифнаяСтавка, ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаВидТарифнойСтавкиТекущий, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыТарифныхСтавок"), ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаКомментарий, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьОплатаТруда Тогда
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыОплатаТруда.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыОплатаТруда.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
		КонецЕсли;
		
		Если ОписаниеТаблицыЛьгот <> Неопределено Тогда
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыЛьгот.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыЛьгот.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
		КонецЕсли;
		
		Если ОписаниеТаблицыОплатаЛьгот <> Неопределено Тогда
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыОплатаЛьгот.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыОплатаЛьгот.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
		КонецЕсли;
		
		НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыНачислений.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыНачислений.ПутьКДанным);	
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
		
		НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыНачислений.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыНачислений.ПутьКДаннымПоказателей);	
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
		
		МассивИменРеквизитовФормы.Очистить();
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыРабочихМест.ПутьКДанным);
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыНачислений.ПутьКДанным);
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыНачислений.ПутьКДаннымПоказателей);
		
		Если ОписаниеФормы.ЕстьАвансы Тогда
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыАвансов.ПутьКДанным);
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьПрименениеПлановыхНачислений Тогда
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыПрименениеПлановыхНачислений.ПутьКДанным);
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьПересчетТарифныхСтавок Тогда
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);
		КонецЕсли;
		 	
		Если ОписаниеФормы.ЕстьОплатаТруда Тогда		
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыОплатаТруда.ПутьКДанным);
		КонецЕсли;
		
		Если ОписаниеТаблицыЛьгот <> Неопределено Тогда
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыЛьгот.ПутьКДанным);
		КонецЕсли;
		
		Если ОписаниеТаблицыОплатаЛьгот <> Неопределено Тогда		
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыОплатаЛьгот.ПутьКДанным);
		КонецЕсли;
		
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда 
		
		// Дополняем форму элементом для отображения представления рабочего места таблицы начислений.
		ИмяПоля = ОписаниеТаблицыНачислений.ИмяТаблицы + ОписаниеТаблицыНачислений.ИмяРеквизитаПредставлениеРабочегоМеста;
		ТипПоля = Тип("ПолеФормы");
		ПутьКДаннымПоля = ОписаниеТаблицыНачислений.ПутьКДанным + "." + ОписаниеТаблицыНачислений.ИмяРеквизитаПредставлениеРабочегоМеста;
		
		Поле = Форма.Элементы.Найти(ИмяПоля);
		
		Если Поле = Неопределено Тогда
			Таблица = Форма.Элементы.Найти(ОписаниеТаблицыНачислений.ИмяТаблицы);
			
			Если Таблица <> Неопределено Тогда 
				СледующееПоле = Форма.Элементы.Найти(ОписаниеТаблицыНачислений.ИмяПоляДляВставкиПредставленияРабочегоМеста);
				Пока СледующееПоле <> Неопределено И СледующееПоле.Родитель <> Таблица Цикл
					СледующееПоле = СледующееПоле.Родитель;
				КонецЦикла;
				Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
				Поле.ПутьКДанным = ПутьКДаннымПоля;
				Поле.Заголовок = НСтр("ru='Рабочее место';uk='Робоче місце'");
				Поле.Доступность = Истина;
				Поле.ОтображатьВШапке = Истина;
				Поле.Вид = ВидПоляФормы.ПолеВвода;
				Поле.КнопкаВыбора = Истина;
				Поле.УстановитьДействие("ОбработкаВыбора", "Подключаемый_НачисленияПредставлениеРабочегоМестаОбработкаВыбора");
				Поле.УстановитьДействие("НачалоВыбора", "Подключаемый_НачисленияПредставлениеРабочегоМестаНачалоВыбора");
			КонецЕсли;
		КонецЕсли;	
		
		// Дополняем форму элементом для отображения представления рабочего места таблицы показателей.
		ИмяПоля = "Показатели" + ОписаниеТаблицыНачислений.ИмяРеквизитаПредставлениеРабочегоМеста;
		ТипПоля = Тип("ПолеФормы");
		ПутьКДаннымПоля = ОписаниеТаблицыНачислений.ПутьКДаннымПоказателей + "." + ОписаниеТаблицыНачислений.ИмяРеквизитаПредставлениеРабочегоМеста;
		
		Поле = Форма.Элементы.Найти(ИмяПоля);
		
		Если Поле = Неопределено Тогда
			Таблица = Форма.Элементы.Найти("Показатели");
			Если Таблица <> Неопределено Тогда 
				СледующееПоле = Форма.Элементы.Найти("ПоказателиПоказатель");
				Если СледующееПоле <> Неопределено Тогда
					Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
					Поле.ПутьКДанным = ПутьКДаннымПоля;
					Поле.Заголовок = НСтр("ru='Рабочее место';uk='Робоче місце'");
					Поле.Доступность = Истина;
					Поле.ОтображатьВШапке = Истина;
					Поле.Вид = ВидПоляФормы.ПолеВвода;
					Поле.КнопкаВыбора = Истина;
					Поле.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ПоказателиПредставлениеРабочегоМестаОбработкаВыбора");
					Поле.УстановитьДействие("НачалоВыбора", "Подключаемый_ПоказателиПредставлениеРабочегоМестаНачалоВыбора");
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		
		Если ОписаниеФормы.ЕстьАвансы Тогда
			// Дополняем форму элементом для отображения представления рабочего места таблицы авансов.
			ИмяПоля = ОписаниеТаблицыАвансов.ИмяТаблицы + ОписаниеТаблицыАвансов.ИмяРеквизитаПредставлениеРабочегоМеста;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыАвансов.ПутьКДанным + "." + ОписаниеТаблицыАвансов.ИмяРеквизитаПредставлениеРабочегоМеста;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыАвансов.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					СледующееПоле = Форма.Элементы.Найти(ОписаниеТаблицыАвансов.ИмяПоляДляВставкиПредставленияРабочегоМеста);
					Если СледующееПоле <> Неопределено Тогда 
						Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
						Поле.ПутьКДанным = ПутьКДаннымПоля;
						Поле.Заголовок = НСтр("ru='Рабочее место';uk='Робоче місце'");
						Поле.Доступность = Истина;
						Поле.ТолькоПросмотр = Истина;
						Поле.ОтображатьВШапке = Истина;
						Поле.Вид = ВидПоляФормы.ПолеВвода;
						Поле.КнопкаВыбора = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			// Дополняем форму элементом для отображения комментария таблицы авансов.
			ИмяПоля = ОписаниеТаблицыАвансов.ИмяТаблицы + ОписаниеТаблицыАвансов.ИмяРеквизитаКомментарий;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыАвансов.ПутьКДанным + "." + ОписаниеТаблицыАвансов.ИмяРеквизитаКомментарий;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыАвансов.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					Поле = Форма.Элементы.Добавить(ИмяПоля, ТипПоля, Таблица);
					Поле.ПутьКДанным = ПутьКДаннымПоля;
					Поле.Заголовок = "Комментарий";
					Поле.Доступность = Истина;
					Поле.ТолькоПросмотр = Истина;
					Поле.ОтображатьВШапке = Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьПрименениеПлановыхНачислений Тогда
			// Дополняем форму элементом для отображения представления рабочего места таблицы применение плановых начислений.
			ИмяПоля = ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяТаблицы + ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяРеквизитаПредставлениеРабочегоМеста;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыПрименениеПлановыхНачислений.ПутьКДанным + "." + ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяРеквизитаПредставлениеРабочегоМеста;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					СледующееПоле = Форма.Элементы.Найти(ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяПоляДляВставкиПредставленияРабочегоМеста);
					Если СледующееПоле <> Неопределено Тогда 
						Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
						Поле.ПутьКДанным = ПутьКДаннымПоля;
						Поле.Заголовок = НСтр("ru='Рабочее место';uk='Робоче місце'");
						Поле.Доступность = Истина;
						Поле.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
						Поле.ТолькоПросмотр = Истина;
						Поле.ОтображатьВШапке = Истина;
						Поле.Вид = ВидПоляФормы.ПолеВвода;
						Поле.КнопкаВыбора = Истина;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
			// Дополняем форму элементом для отображения комментария таблицы применение плановых начислений.
			ИмяПоля = ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяТаблицы + ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяРеквизитаКомментарий;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыПрименениеПлановыхНачислений.ПутьКДанным + "." + ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяРеквизитаКомментарий;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					Поле = Форма.Элементы.Добавить(ИмяПоля, ТипПоля, Таблица);
					Поле.ПутьКДанным = ПутьКДаннымПоля;
					Поле.Заголовок = "Комментарий";
					Поле.Доступность = Истина;
					Поле.ТолькоПросмотр = Истина;
					Поле.ОтображатьВШапке = Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьПересчетТарифныхСтавок Тогда
			// Дополняем форму элементом для отображения представления рабочего места таблицы пересчета тарифных ставок.
			ИмяПоля = ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаПредставлениеРабочегоМеста;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным + "." + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаПредставлениеРабочегоМеста;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					СледующееПоле = Форма.Элементы.Найти(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяПоляДляВставкиПредставленияРабочегоМеста);
					Если СледующееПоле <> Неопределено Тогда 
						Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
						Поле.ПутьКДанным = ПутьКДаннымПоля;
						Поле.Заголовок = НСтр("ru='Рабочее место';uk='Робоче місце'");
						Поле.Доступность = Истина;
						Поле.ТолькоПросмотр = Истина;
						Поле.ОтображатьВШапке = Истина;
						Поле.Вид = ВидПоляФормы.ПолеВвода;
						Поле.КнопкаВыбора = Истина;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
			// Дополняем форму элементом для отображения комментария таблицы применение плановых начислений.
			ИмяПоля = ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаКомментарий;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным + "." + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаКомментарий;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					Поле = Форма.Элементы.Добавить(ИмяПоля, ТипПоля, Таблица);
					Поле.ПутьКДанным = ПутьКДаннымПоля;
					Поле.Заголовок = "Комментарий";
					Поле.Доступность = Истина;
					Поле.ТолькоПросмотр = Истина;
					Поле.ОтображатьВШапке = Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьОплатаТруда Тогда
			// Дополняем форму элементом для отображения представления рабочего места таблицы пересчета тарифных ставок.
			ИмяПоля = ОписаниеТаблицыОплатаТруда.ИмяТаблицы + ОписаниеТаблицыОплатаТруда.ИмяРеквизитаПредставлениеРабочегоМеста;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыОплатаТруда.ПутьКДанным + "." + ОписаниеТаблицыОплатаТруда.ИмяРеквизитаПредставлениеРабочегоМеста;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыОплатаТруда.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					СледующееПоле = Форма.Элементы.Найти(ОписаниеТаблицыОплатаТруда.ИмяПоляДляВставкиПредставленияРабочегоМеста);
					Если СледующееПоле <> Неопределено Тогда 
						Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
						Поле.ПутьКДанным = ПутьКДаннымПоля;
						Поле.Заголовок = НСтр("ru='Рабочее место';uk='Робоче місце'");
						Поле.Доступность = Истина;
						Поле.ОтображатьВШапке = Истина;
						Поле.Вид = ВидПоляФормы.ПолеВвода;
						Поле.КнопкаВыбора = Истина;
						Поле.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОплатаТрудаПредставлениеРабочегоМестаОбработкаВыбора");
						Поле.УстановитьДействие("НачалоВыбора", "Подключаемый_ОплатаТрудаПредставлениеРабочегоМестаНачалоВыбора");
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Если ОписаниеТаблицыЛьгот <> Неопределено Тогда 
			
			// Дополняем форму элементом для отображения представления рабочего места таблицы льгот.
			ИмяПоля = ОписаниеТаблицыЛьгот.ИмяТаблицы + ОписаниеТаблицыЛьгот.ИмяРеквизитаПредставлениеРабочегоМеста;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыЛьгот.ПутьКДанным + "." + ОписаниеТаблицыЛьгот.ИмяРеквизитаПредставлениеРабочегоМеста;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыЛьгот.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					СледующееПоле = Форма.Элементы.Найти(ОписаниеТаблицыЛьгот.ИмяПоляДляВставкиПредставленияРабочегоМеста);
					Пока СледующееПоле <> Неопределено И СледующееПоле.Родитель <> Таблица Цикл
						СледующееПоле = СледующееПоле.Родитель;
					КонецЦикла;
					Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
					Поле.ПутьКДанным = ПутьКДаннымПоля;
					Поле.Заголовок = НСтр("ru='Рабочее место';uk='Робоче місце'");
					Поле.Доступность = Истина;
					Поле.ОтображатьВШапке = Истина;
					Поле.Вид = ВидПоляФормы.ПолеВвода;
					Поле.КнопкаВыбора = Истина;
					Поле.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ЛьготыПредставлениеРабочегоМестаОбработкаВыбора");
					Поле.УстановитьДействие("НачалоВыбора", "Подключаемый_ЛьготыПредставлениеРабочегоМестаНачалоВыбора");
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ОписаниеТаблицыОплатаЛьгот <> Неопределено Тогда
			// Дополняем форму элементом для отображения представления рабочего места таблицы пересчета тарифных ставок.
			ИмяПоля = ОписаниеТаблицыОплатаЛьгот.ИмяТаблицы + ОписаниеТаблицыОплатаЛьгот.ИмяРеквизитаПредставлениеРабочегоМеста;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыОплатаЛьгот.ПутьКДанным + "." + ОписаниеТаблицыОплатаЛьгот.ИмяРеквизитаПредставлениеРабочегоМеста;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыОплатаЛьгот.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					СледующееПоле = Форма.Элементы.Найти(ОписаниеТаблицыОплатаЛьгот.ИмяПоляДляВставкиПредставленияРабочегоМеста);
					Если СледующееПоле <> Неопределено Тогда 
						Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
						Поле.ПутьКДанным = ПутьКДаннымПоля;
						Поле.Заголовок = НСтр("ru='Рабочее место';uk='Робоче місце'");
						Поле.Доступность = Истина;
						Поле.ОтображатьВШапке = Истина;
						Поле.Вид = ВидПоляФормы.ПолеВвода;
						Поле.КнопкаВыбора = Истина;
						Поле.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОплатаЛьготПредставлениеРабочегоМестаОбработкаВыбора");
						Поле.УстановитьДействие("НачалоВыбора", "Подключаемый_ОплатаЛьготПредставлениеРабочегоМестаНачалоВыбора");
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

// Условное оформление используется для выделения строк в табличной части которые устанавливают новые значения для
// каких-либо данных.
Процедура НесколькоРабочихМестУстановитьУсловноеОформлениеТемноСиний(Форма, ОписаниеТаблицы)
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОписаниеТаблицы.ИмяТаблицы);	
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеТаблицы.ПутьКДанным + "." + ОписаниеТаблицы.ИмяРеквизитаПоказателя);
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеТаблицы.ПутьКДанным + "." + ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий);
КонецПроцедуры

// Процедура заполняет таблицу формы содержащую перечисление рабочих мест (сотрудников) физического лица, а также
// устанавливает у формы признак использования нескольких рабочих мест.
Процедура НесколькоРабочихМестЗаполнитьРабочиеМестаФизическогоЛица(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыНачислений)
	
	ФизическоеЛицо = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ФизическоеЛицоПутьКДанным);
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	Дата = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ДатаПутьКДанным);
	Организация = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ОрганизацияПутьКДанным);
    ТаблицаНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыНачислений.ПутьКДанным);
	ТаблицаРабочихМест = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыРабочихМест.ПутьКДанным);
	ТаблицаРабочихМест.Очистить();
	
	ТаблицаОписанийРабочихМест = КадровыйУчетРасширенный.РабочиеМестаФизическогоЛица(ФизическоеЛицо, Организация, Дата);
	Для Каждого РабочееМесто Из ТаблицаОписанийРабочихМест Цикл
		НоваяСтрока = ТаблицаРабочихМест.Добавить();
		НоваяСтрока[ОписаниеТаблицыРабочихМест.ИмяРеквизитаСотрудник] = РабочееМесто.Сотрудник;
		НоваяСтрока[ОписаниеТаблицыРабочихМест.ИмяРеквизитаПредставлениеРабочегоМеста] = РабочееМесто.ПредставлениеРабочегоМеста;
		НоваяСтрока[ОписаниеТаблицыРабочихМест.ИмяРеквизитаПодразделение] = РабочееМесто.Подразделение;
	КонецЦикла;
	
	ТаблицаИспользованныхРабочихМест = ТаблицаНачислений.Выгрузить(,ОписаниеТаблицыНачислений.ИмяРеквизитаСотрудник);
	ТаблицаИспользованныхРабочихМест.Свернуть(ОписаниеТаблицыНачислений.ИмяРеквизитаСотрудник);
	ИспользованоСотрудников = ТаблицаИспользованныхРабочихМест.Количество();
	Форма[ОписаниеФормы.ИмяРеквизитаПризнакаНесколькихРабочихМест] = (ТаблицаОписанийРабочихМест.Количество() > 1) Или (ИспользованоСотрудников > 1);
КонецПроцедуры

// Процедура обновляет представление рабочих мест в строках таблицы формы.
Процедура НесколькоРабочихМестОбновитьПредставлениеВыбранныхРабочихМест(Форма, ОписаниеФормы, ОписаниеТаблицы, Знач ДатаПолученияКадровыхДанных)
	
	Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);

	МассивРабочихМест = Таблица.Выгрузить().ВыгрузитьКолонку(ОписаниеТаблицы.ИмяРеквизитаСотрудник);
	Если ОписаниеТаблицы.ИмяТаблицы = ОписаниеФормы.ИмяТаблицыНачисления Тогда
		
		ТаблицаПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДаннымПоказателей);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			МассивРабочихМест,
			ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПоказателей, ОписаниеТаблицы.ИмяРеквизитаСотрудник, Истина),
			Истина);
			
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(МассивРабочихМест, Справочники.Сотрудники.ПустаяСсылка());
	
	ТаблицаОписанийРабочихМест = КадровыйУчетРасширенный.ОписаниеРабочихМестСотрудников(МассивРабочихМест, ДатаПолученияКадровыхДанных);
	Для Каждого Строка Из Таблица Цикл
		ОписаниеРабочегоМеста = ТаблицаОписанийРабочихМест.Найти(Строка[ОписаниеТаблицы.ИмяРеквизитаСотрудник], "Сотрудник");
		Если ОписаниеРабочегоМеста <> Неопределено Тогда
			Строка[ОписаниеТаблицы.ИмяРеквизитаПредставлениеРабочегоМеста] = ОписаниеРабочегоМеста.ПредставлениеРабочегоМеста;
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеТаблицы.ИмяТаблицы = ОписаниеФормы.ИмяТаблицыНачисления Тогда 
	
		ТаблицаПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДаннымПоказателей);
		Для Каждого Строка Из ТаблицаПоказателей Цикл
			Если Строка[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки] <> 0 Тогда 
				Продолжить;
			КонецЕсли;	
			ОписаниеРабочегоМеста = ТаблицаОписанийРабочихМест.Найти(Строка[ОписаниеТаблицы.ИмяРеквизитаСотрудник], "Сотрудник");
			Если ОписаниеРабочегоМеста <> Неопределено Тогда
				Строка[ОписаниеТаблицы.ИмяРеквизитаПредставлениеРабочегоМеста] = ОписаниеРабочегоМеста.ПредставлениеРабочегоМеста;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость реквизитов таблицы отображающих рабочие места физического лица, в зависимости от
// использования нескольких рабочих мест.
Процедура НесколькоРабочихМестУстановитьВидимыеРеквизиты(Форма, ОписаниеФормы, ОписаниеТаблицы)
	Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	ТаблицаИспользованныхРабочихМест = Таблица.Выгрузить(,ОписаниеТаблицы.ИмяРеквизитаСотрудник);
	ТаблицаИспользованныхРабочихМест.Свернуть(ОписаниеТаблицы.ИмяРеквизитаСотрудник);
	ИспользованоСотрудников = ТаблицаИспользованныхРабочихМест.Количество();
	
	НесколькоРабочихМест = Форма[ОписаниеФормы.ИмяРеквизитаПризнакаНесколькихРабочихМест] Или (ИспользованоСотрудников > 1);
	Если ОписаниеТаблицы.ИмяТаблицы = ОписаниеФормы.ИмяТаблицыНачисления 
		Или ОписаниеТаблицы.ИмяТаблицы = ОписаниеФормы.ИмяТаблицыОплатаТруда Тогда
		Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы + ОписаниеТаблицы.ИмяРеквизитаПредставлениеРабочегоМеста].Видимость = НесколькоРабочихМест;
		Форма.Элементы["Показатели" + ОписаниеТаблицы.ИмяРеквизитаПредставлениеРабочегоМеста].Видимость = НесколькоРабочихМест;
	ИначеЕсли ОписаниеТаблицы.ИмяТаблицы = ОписаниеФормы.ИмяТаблицыЛьготы Тогда 
		Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы + ОписаниеТаблицы.ИмяРеквизитаПредставлениеРабочегоМеста].Видимость = НесколькоРабочихМест;
	Иначе 
		Форма.Элементы[ОписаниеФормы["ИмяГруппыТаблицы" + ОписаниеТаблицы.ИмяТаблицы]].Видимость = НесколькоРабочихМест;
		Форма.Элементы[ОписаниеФормы["ИмяГруппыОдиночногоЭлемента" + ОписаниеТаблицы.ИмяТаблицы]].Видимость = Не НесколькоРабочихМест;
	КонецЕсли;
КонецПроцедуры

// Процедура формирует представление таблицы формы: устанавливает условное оформление, устанавливает видимость рабочего
// места (если у сотрудника их несколько), обновляет представление рабочих мест и комментарий в строках таблицы.
Процедура НесколькоРабочихМестДействияНадТаблицей(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицы, Знач ДатаПолученияКадровыхДанных)
	НесколькоРабочихМестУстановитьУсловноеОформлениеТемноСиний(Форма, ОписаниеТаблицы); 
	НесколькоРабочихМестУстановитьВидимыеРеквизиты(Форма, ОписаниеФормы, ОписаниеТаблицы);
	НесколькоРабочихМестОбновитьПредставлениеВыбранныхРабочихМест(Форма, ОписаниеФормы, ОписаниеТаблицы, ДатаПолученияКадровыхДанных);
	ЗарплатаКадрыРасширенныйКлиентСервер.НесколькоРабочихМестОбновитьКомментарии(Форма, ОписаниеФормы, ОписаниеТаблицы);
КонецПроцедуры

// Функция возвращает текст предупреждения для конкретного реквизита.
Функция КлючевыеРеквизитыПредставлениеПредупреждения(ПредставлениеРеквизита, ДействиеПриИзмененииОчистка)
	ПредставлениеПредупреждения = НСтр("ru='Редактирование %1 приведет к %2 табличных частей документа';uk='Редагування %1 призведе до %2 табличних частин документу'");
	
	Если ДействиеПриИзмененииОчистка Тогда
		ПредставлениеДействияПриИзменении = НСтр("ru='очистке';uk='очищення'");
	Иначе 
		ПредставлениеДействияПриИзменении = НСтр("ru='перезаполнению';uk='перезаповненню'");
	КонецЕсли;
	
	ПредставлениеПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеПредупреждения, ПредставлениеРеквизита, ПредставлениеДействияПриИзменении);
	
	Возврат	ПредставлениеПредупреждения
КонецФункции 

// Формирует представление периода для расчетных документов. Представление периода используется в обработке
// РасчетЗарплаты.
//
Функция ПредставлениеПериодаРасчетногоДокумента(ДатаНачала, ДатаОкончания = Неопределено) Экспорт 
	
	Если ДатаНачала = '00010101' Или ДатаОкончания = '00010101' Тогда 
		Возврат "";
	КонецЕсли;	
	
	Если ДатаОкончания = Неопределено Или НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания) Тогда 
		Возврат Формат(ДатаНачала, "ДФ=""д ММММ""");
	КонецЕсли;
	
	Если Месяц(ДатаНачала) = Месяц(ДатаОкончания) Тогда 
		Возврат Формат(ДатаНачала, "ДФ=""д""") + " - " + Формат(ДатаОкончания, "ДФ=""д ММММ""");
	Иначе 
		Возврат Формат(ДатаНачала, "ДФ=""д МММ""") + " - " + Формат(ДатаОкончания, "ДФ=""д МММ""");
	КонецЕсли;
	
КонецФункции

// Объединяет строки коллекции с примыкающими интервалами. Предполагается, что строки уже упорядочены.
//
// Параметры:
// КоллекцияСтрок - табличная часть, таблица значений, массив строк или данные формы коллекция строк.
// ИмяПоляДатаНачала - имя колонки, содержащей дату начала интервала.
// ИмяПоляДатаОкончания - имя колонки, содержащей дату окончания интервала.
// ИменаКолонок - строка, разделенная запятыми - имена колонок, по которым производится сравнение. 
//					Не является обязательным для таблицы значений, если не указан - сравнение производится по всем колонкам. 
//					Для коллекций других типов является обязательным.
// ИменаИгнорируемыхКолонок - имена колонок, которые игнорируются при сравнении, необязательный.
// РазбиватьПоМесяцам - если Истина, строки, относящиеся к разным месяцам, не будут объединены. Необязательный.
//
Процедура ОбъединитьСтрокиОбразующиеНепрерывныеИнтервалы(КоллекцияСтрок, ИмяПоляДатаНачала, ИмяПоляДатаОкончания, ИменаКолонок = "", ИменаИгнорируемыхКолонок = "", РазбиватьПоМесяцам = Истина) Экспорт 
	
	Если ПустаяСтрока(ИменаКолонок) Тогда
		СравниваемыеКолонки = Новый Массив;
		Если ТипЗнч(КоллекцияСтрок) = Тип("ТаблицаЗначений") Тогда 
			Для Каждого Колонка Из КоллекцияСтрок.Колонки Цикл
				СравниваемыеКолонки.Добавить(Колонка.Имя);
			КонецЦикла;
		Иначе
			МетаданныеТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(КоллекцияСтрок));
			Если МетаданныеТабличнойЧасти <> Неопределено Тогда 
				Для Каждого Реквизит Из МетаданныеТабличнойЧасти.Реквизиты Цикл 
					СравниваемыеКолонки.Добавить(Реквизит.Имя);
				КонецЦикла;
				Для Каждого Реквизит Из МетаданныеТабличнойЧасти.СтандартныеРеквизиты Цикл 
					СравниваемыеКолонки.Добавить(Реквизит.Имя);
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
	Иначе 
		СравниваемыеКолонки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ИменаКолонок, " ", ""));
	КонецЕсли;			
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СравниваемыеКолонки, ИмяПоляДатаНачала);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СравниваемыеКолонки, ИмяПоляДатаОкончания);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СравниваемыеКолонки, "НомерСтроки");
	
	СравниваемыеКолонки = ОбщегоНазначенияКлиентСервер.СократитьМассив(СравниваемыеКолонки, 
						СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ИменаИгнорируемыхКолонок, " ", "")));
						
	ПредыдущаяСтрока = Неопределено;
	КоличествоСтрок = КоллекцияСтрок.Количество();
	
	Для Сч = 1 По КоличествоСтрок Цикл 
		
		ИндексСтроки = КоличествоСтрок - Сч;
		ТекСтрока = КоллекцияСтрок[ИндексСтроки];
		
		Если ПредыдущаяСтрока = Неопределено Тогда 
			ПредыдущаяСтрока = ТекСтрока;
			Продолжить;
		КонецЕсли;
		
		Если НачалоДня(ТекСтрока[ИмяПоляДатаОкончания]) + 86400 = НачалоДня(ПредыдущаяСтрока[ИмяПоляДатаНачала]) Тогда
			Если Не РазбиватьПоМесяцам Или НачалоМесяца(ТекСтрока[ИмяПоляДатаОкончания]) = НачалоМесяца(ПредыдущаяСтрока[ИмяПоляДатаНачала]) Тогда 
				ОбъединитьСтроки = Истина;
				Для Каждого ИмяКолонки Из СравниваемыеКолонки Цикл 
					Если ТекСтрока[ИмяКолонки] <> ПредыдущаяСтрока[ИмяКолонки] Тогда
						ОбъединитьСтроки = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ОбъединитьСтроки Тогда 
					ТекСтрока[ИмяПоляДатаОкончания] = ПредыдущаяСтрока[ИмяПоляДатаОкончания];
					КоллекцияСтрок.Удалить(ИндексСтроки + 1);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		ПредыдущаяСтрока = ТекСтрока;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПериодРегистратораНачисленийУдержаний(ДатаНачала, ДатаОкончания, Объект, ИмяРеквизитаДатаОкончания, Отказ) Экспорт 
	
	Если ЗначениеЗаполнено(ДатаОкончания) И ДатаОкончания < ДатаНачала Тогда 
		ТекстСообщения = НСтр("ru='Дата окончания периода не может быть меньше даты начала';uk='Дата закінчення періоду не може бути менша дати початку'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ИмяРеквизитаДатаОкончания, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ШтатноеРасписаниеВсегдаИспользуется() Экспорт 
	
	Возврат ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Или ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
	
КонецФункции
Функция ИнформацияОВидахРасчета(ВидыРасчета) Экспорт
	
	ВидыРасчетаИнфо = Новый Соответствие;
	
	Если ВидыРасчета.Количество() = 0 Тогда 
		Возврат ВидыРасчетаИнфо;
	КонецЕсли;
	
	ЭтоНачисления = ТипЗнч(ВидыРасчета[0]) = Тип("ПланВидовРасчетаСсылка.Начисления");
	ИмяТаблицы = ВидыРасчета[0].Метаданные().ПолноеИмя();
	
	// Получим сведения о показателях.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидыРасчета", ВидыРасчета);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Показатели.Показатель
	               |ИЗ
	               |	#ИмяТаблицы.Показатели КАК Показатели
	               |ГДЕ
	               |	Показатели.Ссылка В(&ВидыРасчета)";
			  
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПоказателей = Новый Массив;
	Пока Выборка.Следующий() Цикл 
		МассивПоказателей.Добавить(Выборка.Показатель);
	КонецЦикла;
	
	СведенияОПоказателях = ЗарплатаКадрыРасширенный.СведенияОПоказателяхРасчетаЗарплаты(МассивПоказателей);
	
	// Получим значения кодов вычета НДФЛ для начислений.
	КодыВычетов = Новый Соответствие;
	
					   
	
	// Получим реквизиты видов расчета
	ЗапрашиваемыеДанныеСтрока = ?(ЭтоНачисления, ЗапрашиваемыеДанныеНачисления(), ЗапрашиваемыеДанныеУдержания());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка,
	|	#ЗапрашиваемыеДанные,
	|	Показатели
	|ИЗ
	|	#ИмяТаблицы
	|ГДЕ
	|	Ссылка В (&ВидыРасчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Показатели.НомерСтроки";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ЗапрашиваемыеДанные", ЗапрашиваемыеДанныеСтрока);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		// Создаем структуру с необходимым набором полей.
		ЗначенияРеквизитов = Новый Структура(ЗапрашиваемыеДанныеСтрока);
		ЗначенияРеквизитов.Вставить("ЭтоНачисление", ЭтоНачисления);
		
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
		
		Если ЭтоНачисления Тогда 
			ЗначенияРеквизитов.Вставить("КодВычетаНДФЛ", КодыВычетов[ЗначенияРеквизитов.КодДоходаНДФЛ]);
		КонецЕсли;
		
		// Заполним также и сведения о самих показателях.
		МассивОписаний = Новый Массив;
		
		ИменаПолей = 
		"Показатель,
		|ЗапрашиватьПриВводе, 
		|ИспользоватьПриРасчете, 
		|ОсновнойПоказатель";
		
		Если Выборка.Показатели <> Неопределено Тогда
			ВыборкаПоказателей = Выборка.Показатели.Выбрать();
			Пока ВыборкаПоказателей.Следующий() Цикл
				Описание = Новый Структура(ИменаПолей);
				ЗаполнитьЗначенияСвойств(Описание, ВыборкаПоказателей);
				СведенияОПоказателе = СведенияОПоказателях[Описание.Показатель];
				Для Каждого КлючИЗначение Из СведенияОПоказателе Цикл
					Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла;
				МассивОписаний.Добавить(Описание);
			КонецЦикла;
		КонецЕсли;
		
		ЗначенияРеквизитов.Вставить("Показатели", МассивОписаний);
		
		ВидыРасчетаИнфо.Вставить(Выборка.Ссылка, ЗначенияРеквизитов);
		
	КонецЦикла;
	
	Возврат ВидыРасчетаИнфо;
	
КонецФункции

Функция ЗапрашиваемыеДанныеНачисления() Экспорт 
	
	ЗапрашиваемыеДанныеСтрока = 
		"КатегорияНачисленияИлиНеоплаченногоВремени,
		|КоличествоПостоянныхПоказателей,
		|КоличествоОтображаемыхПоказателей,
		|КоличествоПоказателейИспользуемыхПриРасчете,
		|ОчередностьРасчета,
		|ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,
		|КоличествоМесяцевРасчетаСреднегоЗаработка,
		|СпособВыполненияНачисления,
		|ЗачетОтработанногоВремени,
		|ИспользованиеПериода,
		|ПериодРасчетаБазовыхНачислений,
		|КоличествоМесяцевБазовогоПериода,
		|СдвигБазовогоПериода,
		|ТребуетсяРасчетОтработаноЧасовВсего,
		|ВидВремени,
		|ТребуетсяРасчетБазы,
		|ТребуетсяРасчетВремени,
		|ТребуетсяРасчетНормыВремени,
		|ЗачетНормыВремени,
		|КодДоходаНДФЛ,
		|Рассчитывается,
		|ЯвляетсяЛьготой,
		|ЛьготаДоступнаДляВыбораСотрудником,
		|ЛьготаУчитываетсяПриРасчетеЗарплаты,   
		|ФормулаРасчетаДляВыполнения,
		|НачисляетсяВЦеломЗаМесяц,
		|ВидОтпуска,
		|ПоддерживаетНесколькоПлановыхНачислений,
		|ВключатьВФОТ,
		|ФОТНеРедактируется,
		|РеквизитДопУпорядочивания";
		
	Возврат ЗапрашиваемыеДанныеСтрока;	
	
КонецФункции

Функция ЗапрашиваемыеДанныеУдержания() Экспорт
	
	ЗапрашиваемыеДанныеСтрока = 
		"КоличествоПостоянныхПоказателей,
		|КоличествоПоказателейИспользуемыхПриРасчете,
		|КоличествоОтображаемыхПоказателей,
		|ОчередностьРасчета,
		|ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,
		|КоличествоМесяцевРасчетаСреднегоЗаработка, 
		|СпособВыполненияУдержания,
		|КатегорияУдержания,
		|ТребуетсяРасчетБазы,
		|Рассчитывается";
		
	Возврат ЗапрашиваемыеДанныеСтрока;	
	
КонецФункции

Функция СотрудникиТаблицДокумента(Объект, ОписанияТаблиц, ДополнительныеСотрудники = Неопределено, ИмяПоляСотрудник = "Сотрудник") Экспорт 
	
	УникальныеСотрудники = Новый Соответствие;
	
	Если ДополнительныеСотрудники <> Неопределено Тогда 
		Для Каждого ДополнительныйСотрудник Из ДополнительныеСотрудники Цикл 
			УникальныеСотрудники.Вставить(ДополнительныйСотрудник, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл
		Для Каждого СтрокаТаблицы Из Объект[ОписаниеТаблицы.ИмяТаблицы] Цикл 
			УникальныеСотрудники.Вставить(СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаСотрудник], Истина);
		КонецЦикла;
	КонецЦикла;
	
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(УникальныеСотрудники, "Ключ");
	
	Возврат Сотрудники;
	
КонецФункции

Процедура СоздатьВТПредставлениеРаспределенияНачисленийУдержаний(МенеджерВременныхТаблиц, Ссылка, ИмяВТРезультатыРаспределения, ИмяВТРезультат) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СимволПС", Символы.ПС); 
	Запрос.УстановитьПараметр("Многоточие", "…"); 	
	Запрос.УстановитьПараметр("ПроверятьЗаполнениеСтатьиРасходов", ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РаспределениеРезультатов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	               |	ПредставлениеРаспределенияРезультатовРасчета.РаспределениеНачислений КАК РаспределениеНачислений,
	               |	СУММА(РаспределениеРезультатов.Результат) КАК СуммаРаспределения,
	               |	МАКСИМУМ(ПредставлениеРаспределенияРезультатовРасчета.ЕстьОшибкиЗаполнения) КАК ЕстьОшибкиЗаполнения,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ПредставлениеРаспределенияРезультатовРасчета.НомерЭлементаПредставления = 1
	               |				ТОГДА РаспределениеРезультатов.СтатьяФинансирования.Код + ВЫБОР
	               |						КОГДА РаспределениеРезультатов.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	               |							ТОГДА ""("" + РаспределениеРезультатов.СтатьяРасходов.Код + "")""
	               |						КОГДА ПредставлениеРаспределенияРезультатовРасчета.КоличествоЭлементовПредставления > 1
	               |							ТОГДА "" : ""
	               |						ИНАЧЕ """"
	               |					КОНЕЦ + ВЫБОР
	               |						КОГДА ПредставлениеРаспределенияРезультатовРасчета.КоличествоЭлементовПредставления > 1
	               |							ТОГДА ПредставлениеРаспределенияРезультатовРасчета.ПредставлениеРезультата
	               |						ИНАЧЕ """"
	               |					КОНЕЦ
	               |			ИНАЧЕ """"
	               |		КОНЕЦ) КАК СтрокаПредставления1,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ПредставлениеРаспределенияРезультатовРасчета.НомерЭлементаПредставления = 2
	               |				ТОГДА &СимволПС + РаспределениеРезультатов.СтатьяФинансирования.Код + ВЫБОР
	               |						КОГДА РаспределениеРезультатов.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	               |							ТОГДА ""("" + РаспределениеРезультатов.СтатьяРасходов.Код + "")""
	               |						ИНАЧЕ "" : ""
	               |					КОНЕЦ + ПредставлениеРаспределенияРезультатовРасчета.ПредставлениеРезультата + ВЫБОР
	               |						КОГДА ПредставлениеРаспределенияРезультатовРасчета.КоличествоЭлементовПредставления > 2
	               |							ТОГДА &Многоточие
	               |						ИНАЧЕ """"
	               |					КОНЕЦ
	               |			ИНАЧЕ """"
	               |		КОНЕЦ) КАК СтрокаПредставления2,
	               |	МИНИМУМ(ВЫБОР
	               |			КОГДА РаспределениеРезультатов.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	               |					И (НЕ &ПроверятьЗаполнениеСтатьиРасходов
	               |						ИЛИ РаспределениеРезультатов.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка))
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ) КАК ЗаполненыОсновныеПоляРаспределения
	               |ПОМЕСТИТЬ ВТПредставлениеРаспределенияНачисленийУдержаний
	               |ИЗ
	               |	ВТРаспределениеРезультатов КАК РаспределениеРезультатов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПредставлениеРаспределенияРезультатовРасчета КАК ПредставлениеРаспределенияРезультатовРасчета
	               |		ПО РаспределениеРезультатов.НомерСтроки = ПредставлениеРаспределенияРезультатовРасчета.НомерСтрокиРаспределения
	               |			И РаспределениеРезультатов.ИдентификаторСтроки = ПредставлениеРаспределенияРезультатовРасчета.ИдентификаторСтроки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РаспределениеРезультатов.ИдентификаторСтроки,
	               |	ПредставлениеРаспределенияРезультатовРасчета.РаспределениеНачислений";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРаспределениеРезультатов", ИмяВТРезультатыРаспределения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПредставлениеРаспределенияНачисленийУдержаний", ИмяВТРезультат);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТДанныеОсновнойТаблицы(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ЭтоВычетыКДоходам)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Таблица", ДокументОбъект[ОписаниеТаблицы.ИмяТаблицы]);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.НомерСтроки,
	               |	Таблица.Сотрудник КАК Сотрудник,
	               |	Таблица.ВидРасчета КАК ВидРасчета,
	               |	Таблица.ПоляВычетовКДоходам КАК ПоляВычетовКДоходам,
	               |	Таблица.Результат КАК Результат,
	               |	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
	               |ПОМЕСТИТЬ ВТДанныеОсновнойТаблицы
	               |ИЗ
	               |	&Таблица КАК Таблица";
	
	ПодстрокаЗамены = ?(ОписаниеТаблицы.СодержитПолеВидРасчета, "Таблица." + ОписаниеТаблицы.ИмяРеквизитаВидРасчета + " КАК ВидРасчета,", ""); 	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.ВидРасчета КАК ВидРасчета,", ПодстрокаЗамены);
	
	ПодстрокаЗамены = ?(ОписаниеТаблицы.СодержитПолеСотрудник, "Таблица." + ОписаниеТаблицы.ИмяРеквизитаСотрудник + " КАК Сотрудник,", ""); 	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.Сотрудник КАК Сотрудник,", ПодстрокаЗамены);
	
	ПодстрокаЗамены = "Таблица." + ОписаниеТаблицы.ИмяПоляРезультат + " КАК Результат,"; 
	Если ОписаниеТаблицы.ИмяТаблицы = "ПогашениеЗаймов" Тогда 
		ПодстрокаЗамены = "Таблица.НачисленоПроцентов + Таблица.ПогашениеПроцентов + Таблица.ПогашениеЗайма + Таблица.МатериальнаяВыгода + Таблица.НалогНаМатериальнуюВыгоду КАК Результат,"; 
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.Результат КАК Результат,", ПодстрокаЗамены);
	
	ПодстрокаЗамены = "Таблица." + ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки + " КАК ИдентификаторСтроки"; 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки", ПодстрокаЗамены);
	
	ПоляВычетовКДоходам = "
	               |	Таблица.Подразделение КАК Подразделение,
	               |	Таблица.КодВычета КАК КодВычета,
	               |	Таблица.СуммаВычета КАК СуммаВычета,";
				   
	ПодстрокаЗамены = ?(ЭтоВычетыКДоходам, ПоляВычетовКДоходам, "");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.ПоляВычетовКДоходам КАК ПоляВычетовКДоходам,", ПодстрокаЗамены);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура УничтожитьВТДанныеОсновнойТаблицы(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТДанныеОсновнойТаблицы";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(Форма, ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ДополнительныеПараметры) Экспорт 
	
	ЭтоВычетыКДоходам = Ложь;
	
	СоздатьВТДанныеОсновнойТаблицы(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ЭтоВычетыКДоходам);	
	
	ВыборкаСвойствВидовРасчета = ВыборкаСвойствВидовРасчета(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц);
	ВыборкаПредставленийРаспределения = ВыборкаПредставленийРаспределения(ДокументОбъект, МенеджерВременныхТаблиц, ОписаниеТаблицы, ДополнительныеПараметры);
	ВыборкаРаспределенияПоТерриториямУсловиямТруда = ВыборкаРаспределенияПоТерриториямУсловиямТруда(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
	УничтожитьВТДанныеОсновнойТаблицы(МенеджерВременныхТаблиц);
	
	ИменаКолонокТаблицыРаспределенияРезультатовРасчета = ЗарплатаКадрыРасширенныйКлиентСервер.ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицы);
	ОписаниеСтрокиРаспределенияРезультатовРасчета = Новый Структура(ИменаКолонокТаблицыРаспределенияРезультатовРасчета);
	
	КоличествоПоказателейПоТерриториямУсловиямТруда = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда().Количество();
	
	КонтролируемыеПоля = Неопределено;
	ДополнительныеПараметры.КонтролируемыеПоля.Свойство(ОписаниеТаблицы.ИмяТаблицы, КонтролируемыеПоля);
	
	РаспределениеПоТерриториямУсловиямТруда = Неопределено;
	Если ВыборкаРаспределенияПоТерриториямУсловиямТруда <> Неопределено Тогда 
		РаспределениеПоТерриториямУсловиямТруда = ТаблицаРаспределенияПоТерриториямУсловиямТруда(Форма, ОписаниеТаблицы);
	КонецЕсли;
	
	ДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	
	Для Каждого СтрокаДанных Из ДанныеФормы Цикл
		
		Если ВыборкаСвойствВидовРасчета <> Неопределено Тогда
			ВыборкаСвойствВидовРасчета.Следующий();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ВыборкаСвойствВидовРасчета);
		КонецЕсли;
		
		
		Если ВыборкаПредставленийРаспределения <> Неопределено Тогда
			ВыборкаПредставленийРаспределения.Следующий();
			СтрокаДанных.КомандаРедактированияРаспределения = ВыборкаПредставленийРаспределения.ПредставлениеРаспределения;
		КонецЕсли;
		
		Если ВыборкаРаспределенияПоТерриториямУсловиямТруда <> Неопределено Тогда
			ВыборкаРаспределенияПоТерриториямУсловиямТруда.СледующийПоЗначениюПоля("НомерСтроки");
			ЗаполнитьПредставленияРаспределенияПоТерриториямУсловиямТруда(Форма, ОписаниеТаблицы, ВыборкаРаспределенияПоТерриториямУсловиямТруда, СтрокаДанных, РаспределениеПоТерриториямУсловиямТруда, КоличествоПоказателейПоТерриториямУсловиямТруда);
		КонецЕсли;
		
		Если Не Форма.НайденыИсправленияПриОткрытии И КонтролируемыеПоля <> Неопределено Тогда 
			Для Каждого ОписаниеПоля Из КонтролируемыеПоля Цикл 
				ИмяПоля = ОписаниеПоля.Ключ;
				Если СтрокаДанных[ИмяПоля] = Истина Тогда
					Форма.НайденыИсправленияПриОткрытии = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РаспределениеПоТерриториямУсловиямТруда <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, 
			ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда,
			ПоместитьВоВременноеХранилище(РаспределениеПоТерриториямУсловиямТруда, Форма.УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

Функция ВыборкаСвойствВидовРасчета(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц);
	
	Если Не ОписаниеТаблицы.СодержитПолеВидРасчета Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	КоличествоПоказателей = 0;
	ТаблицаСвойствВидовРасчета = ТаблицаСвойствВидовРасчета(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, КоличествоПоказателей);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СвойстваВидовРасчета.ВидРасчета КАК ВидРасчета,
		|	&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей,
		|	СвойстваВидовРасчета.ИспользуетсяПериод,
		|	СвойстваВидовРасчета.ИспользованиеПериода,
		|	СвойстваВидовРасчета.ВидВремени,
		|	СвойстваВидовРасчета.ДоступенВыборОснования
		|ПОМЕСТИТЬ ВТСвойстваВидовРасчета
		|ИЗ
		|	&ТаблицаСвойствВидовРасчета КАК СвойстваВидовРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОсновнойТаблицы.НомерСтроки КАК НомерСтроки,
		|	ДанныеОсновнойТаблицы.ИдентификаторСтроки,
		|	&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей,
		|	СвойстваВидовРасчета.ВидВремени,
		|	СвойстваВидовРасчета.ИспользуетсяПериод,
		|	СвойстваВидовРасчета.ИспользованиеПериода,
		|	СвойстваВидовРасчета.ДоступенВыборОснования
		|ПОМЕСТИТЬ ВТОсновнаяТаблицаСПоказателями
		|ИЗ
		|	ВТДанныеОсновнойТаблицы КАК ДанныеОсновнойТаблицы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета
		|		ПО ДанныеОсновнойТаблицы.ВидРасчета = СвойстваВидовРасчета.ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСвойстваВидовРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОсновнойТаблицы.НомерСтроки КАК НомерСтроки,
		|	&ПоляЗначенийПоказателей КАК ПоляЗначенийПоказателей,
		|	&ПоляСвойствПоказателейОсновнойТаблицы КАК ПоляСвойствПоказателейОсновнойТаблицы,
		|	ДанныеОсновнойТаблицы.ВидВремени,
		|	ДанныеОсновнойТаблицы.ИспользуетсяПериод,
		|	ДанныеОсновнойТаблицы.ИспользованиеПериода,
		|	ДанныеОсновнойТаблицы.ДоступенВыборОснования
		|ИЗ
		|	ВТОсновнаяТаблицаСПоказателями КАК ДанныеОсновнойТаблицы
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ИсточникиЗначенийПоказателей КАК ИсточникиЗначенийПоказателей
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОсновнаяТаблицаСПоказателями";
	
	ШаблонПолейСвойствПоказателей = "
		|	СвойстваВидовРасчета.Показатель1 КАК Показатель1,
		|	СвойстваВидовРасчета.ПредставлениеПоказателя1 КАК ПредставлениеПоказателя1,
		|	СвойстваВидовРасчета.ТочностьПоказателя1 КАК ТочностьПоказателя1,
		|	СвойстваВидовРасчета.КомандаРасшифровки1 КАК КомандаРасшифровки1,";
	
	ШаблонПолейСвойствПоказателейОсновнойТаблицы = "
		|	ДанныеОсновнойТаблицы.Показатель1 КАК Показатель1,
		|	ДанныеОсновнойТаблицы.ПредставлениеПоказателя1 КАК ПредставлениеПоказателя1,
		|	ДанныеОсновнойТаблицы.ТочностьПоказателя1 КАК ТочностьПоказателя1,
		|	ДанныеОсновнойТаблицы.КомандаРасшифровки1 КАК КомандаРасшифровки1,";

	
	ШаблонПолейЗначенийПоказателей = "
		|	Показатели1.Значение КАК Значение1,";
	
	ШаблонИсточниковЗначенийПоказателей = "
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели1
		|		ПО ДанныеОсновнойТаблицы.ИдентификаторСтроки = Показатели1.ИдентификаторСтрокиВидаРасчета
		|			И (ДанныеОсновнойТаблицы.Показатель1 = Показатели1.Показатель)
		|			И ДанныеОсновнойТаблицы.Показатель1 <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)";
		
	ПоляСвойствПоказателей = "";
	ПоляСвойствПоказателейОсновнойТаблицы = "";
	ПоляЗначенийПоказателя = "";
	ИсточникиЗначенийПоказателей = "";
	
	Для Сч = 1 По КоличествоПоказателей Цикл
		ПоляСвойствПоказателей = ПоляСвойствПоказателей + СтрЗаменить(ШаблонПолейСвойствПоказателей, "1", Строка(Сч));	
		ПоляСвойствПоказателейОсновнойТаблицы = ПоляСвойствПоказателейОсновнойТаблицы + СтрЗаменить(ШаблонПолейСвойствПоказателейОсновнойТаблицы, "1", Строка(Сч));	
		ИсточникиЗначенийПоказателей = ИсточникиЗначенийПоказателей + СтрЗаменить(ШаблонИсточниковЗначенийПоказателей, "1", Строка(Сч));
		ПоляЗначенийПоказателя = ПоляЗначенийПоказателя + СтрЗаменить(ШаблонПолейЗначенийПоказателей, "1", Строка(Сч));	
	КонецЦикла;	
	
	ПодстрокаПоиска = "&ПоляСвойствПоказателейОсновнойТаблицы КАК ПоляСвойствПоказателейОсновнойТаблицы,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляСвойствПоказателейОсновнойТаблицы); 
	
	ПодстрокаПоиска = "&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляСвойствПоказателей); 
	
	ПодстрокаПоиска = "&ПоляЗначенийПоказателей КАК ПоляЗначенийПоказателей,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляЗначенийПоказателя); 
	
	ПодстрокаПоиска = "ЛЕВОЕ СОЕДИНЕНИЕ #ИсточникиЗначенийПоказателей КАК ИсточникиЗначенийПоказателей
					  |		ПО (ИСТИНА)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ИсточникиЗначенийПоказателей); 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСвойствВидовРасчета", ТаблицаСвойствВидовРасчета);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ТаблицаСвойствВидовРасчета(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, КоличествоПоказателей)
	
	ДанныеТаблицы = ДокументОбъект[ОписаниеТаблицы.ИмяТаблицы];
	
	ЭтоНачисления = Истина;
	Если ДанныеТаблицы.Количество() > 0 Тогда 
		ЭтоНачисления = ТипЗнч(ДанныеТаблицы[0][ОписаниеТаблицы.ИмяРеквизитаВидРасчета]) = Тип("ПланВидовРасчетаСсылка.Начисления");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОсновнойТаблицы.ВидРасчета КАК ВидРасчета
		|ПОМЕСТИТЬ ВТВидыРасчетаОсновнойТаблицы
		|ИЗ
		|	ВТДанныеОсновнойТаблицы КАК ДанныеОсновнойТаблицы";
	Запрос.Выполнить();
	
	Если ЭтоНачисления Тогда 
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Начисления.Ссылка КАК ВидРасчета,
			|	Начисления.ВидВремени КАК ВидВремени,
			|	ВЫБОР
			|		КОГДА Начисления.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ИспользуетсяПериод,
			|	Начисления.ИспользованиеПериода,
			|	Начисления.КоличествоОтображаемыхПоказателей КАК КоличествоОтображаемыхПоказателей,
			|	Начисления.ПоддерживаетНесколькоПлановыхНачислений КАК ДоступенВыборОснования
			|ПОМЕСТИТЬ ВТСвойстваВидовРасчета
			|ИЗ
			|	ПланВидовРасчета.Начисления КАК Начисления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыРасчетаОсновнойТаблицы КАК ВидыРасчетаОсновнойТаблицы
			|		ПО Начисления.Ссылка = ВидыРасчетаОсновнойТаблицы.ВидРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(СвойстваВидовРасчета.КоличествоОтображаемыхПоказателей) КАК КоличествоОтображаемыхПоказателей
			|ИЗ
			|	ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СвойстваВидовРасчета.ВидРасчета КАК ВидРасчета,
			|	НачисленияПоказатели.НомерСтроки КАК НомерСтроки,
			|	СвойстваВидовРасчета.ВидВремени КАК ВидВремени,
			|	СвойстваВидовРасчета.ИспользуетсяПериод КАК ИспользуетсяПериод,
			|	СвойстваВидовРасчета.ИспользованиеПериода КАК ИспользованиеПериода,
			|	СвойстваВидовРасчета.ДоступенВыборОснования КАК ДоступенВыборОснования,
			|	НачисленияПоказатели.Показатель КАК Показатель,
			|	НачисленияПоказатели.ИспользоватьПриРасчете КАК ИспользоватьПриРасчете,
			|	НачисленияПоказатели.Показатель.Наименование КАК Наименование,
			|	НачисленияПоказатели.Показатель.КраткоеНаименование КАК КраткоеНаименование,
			|	НачисленияПоказатели.Показатель.Точность КАК Точность,
			|	НачисленияПоказатели.Показатель.ОтображатьВДокументахНачисления КАК ОтображатьВДокументахНачисления
			|ИЗ
			|	ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
			|		ПО СвойстваВидовРасчета.ВидРасчета = НачисленияПоказатели.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидРасчета,
			|	НомерСтроки";
	Иначе 
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Удержания.Ссылка КАК ВидРасчета,
			|	ВЫБОР
			|		КОГДА Удержания.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ПоЗначениюПоказателяПриОкончательномРасчете)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ИспользуетсяПериод,
			|	Удержания.КоличествоОтображаемыхПоказателей КАК КоличествоОтображаемыхПоказателей
			|ПОМЕСТИТЬ ВТСвойстваВидовРасчета
			|ИЗ
			|	ПланВидовРасчета.Удержания КАК Удержания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыРасчетаОсновнойТаблицы КАК ВидыРасчетаОсновнойТаблицы
			|		ПО Удержания.Ссылка = ВидыРасчетаОсновнойТаблицы.ВидРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(СвойстваВидовРасчета.КоличествоОтображаемыхПоказателей) КАК КоличествоОтображаемыхПоказателей
			|ИЗ
			|	ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СвойстваВидовРасчета.ВидРасчета КАК ВидРасчета,
			|	УдержанияПоказатели.НомерСтроки КАК НомерСтроки,
			|	СвойстваВидовРасчета.ИспользуетсяПериод КАК ИспользуетсяПериод,
			|	УдержанияПоказатели.Показатель КАК Показатель,
			|	УдержанияПоказатели.ИспользоватьПриРасчете КАК ИспользоватьПриРасчете,
			|	УдержанияПоказатели.Показатель.Наименование КАК Наименование,
			|	УдержанияПоказатели.Показатель.КраткоеНаименование КАК КраткоеНаименование,
			|	УдержанияПоказатели.Показатель.Точность КАК Точность,
			|	УдержанияПоказатели.Показатель.ОтображатьВДокументахНачисления КАК ОтображатьВДокументахНачисления
			|ИЗ
			|	ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
			|		ПО СвойстваВидовРасчета.ВидРасчета = УдержанияПоказатели.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидРасчета,
			|	НомерСтроки";
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Запрос.Текст = 
		"УНИЧТОЖИТЬ ВТВидыРасчетаОсновнойТаблицы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСвойстваВидовРасчета";
	Запрос.Выполнить();
	
	ТаблицаВидовРасчета = Новый ТаблицаЗначений;
	ТаблицаВидовРасчета.Колонки.Добавить("ВидРасчета", ?(ЭтоНачисления, Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания")));
	ТаблицаВидовРасчета.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРабочегоВремениСотрудников"));
	ТаблицаВидовРасчета.Колонки.Добавить("ИспользуетсяПериод", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовРасчета.Колонки.Добавить("ИспользованиеПериода", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыИспользованияПериодаНачисления"));
	ТаблицаВидовРасчета.Колонки.Добавить("КоличествоПоказателей", Новый ОписаниеТипов("Число"));
	ТаблицаВидовРасчета.Колонки.Добавить("ДоступенВыборОснования", Новый ОписаниеТипов("Булево"));
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.КоличествоОтображаемыхПоказателей) Тогда
		КоличествоПоказателей = Выборка.КоличествоОтображаемыхПоказателей;
		Для Сч = 1 По КоличествоПоказателей Цикл 
			ТаблицаВидовРасчета.Колонки.Добавить("Показатель" + Сч, Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
			ТаблицаВидовРасчета.Колонки.Добавить("ПредставлениеПоказателя" + Сч, Новый ОписаниеТипов("Строка"));
			ТаблицаВидовРасчета.Колонки.Добавить("ТочностьПоказателя" + Сч, Новый ОписаниеТипов("Строка"));
			ТаблицаВидовРасчета.Колонки.Добавить("КомандаРасшифровки" + Сч, Новый ОписаниеТипов("Строка"));
		КонецЦикла;
	КонецЕсли;
	
	РасчетСреднегоЗаработка = Ложь;
	ТипыДокументовРасчетаПоСреднемуЗаработку = УчетСреднегоЗаработка.ТипыДокументовРасчетаПоСреднемуЗаработку();
	Если ТипыДокументовРасчетаПоСреднемуЗаработку.Найти(ТипЗнч(ДокументОбъект.Ссылка)) <> Неопределено Тогда
		РасчетСреднегоЗаработка = Истина;
	КонецЕсли;
	
	ПоказателиСреднегоЗаработка = Новый Соответствие;
	Если РасчетСреднегоЗаработка Тогда 
		ПоказателиСреднегоЗаработка.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС"), Истина);
		ПоказателиОбщегоСреднегоЗаработка = УчетСреднегоЗаработкаКлиентСервер.ПоказателиОбщегоСреднегоЗаработка();
		Для Каждого ПоказательСреднегоЗаработка Из ПоказателиОбщегоСреднегоЗаработка Цикл
			ПоказателиСреднегоЗаработка.Вставить(ПоказательСреднегоЗаработка, Истина);
		КонецЦикла;	
	КонецЕсли;
	
	ПоказательСдельногоЗаработка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок");
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл	
		НоваяСтрока = ТаблицаВидовРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Сч = 1;
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Показатель) Тогда
				Продолжить;
			КонецЕсли;	
			ОтображатьПоказатель = Выборка.ИспользоватьПриРасчете И Выборка.ОтображатьВДокументахНачисления;
			Если Не ОтображатьПоказатель Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока["Показатель" + Сч] 				= Выборка.Показатель;
			НоваяСтрока["ТочностьПоказателя" + Сч] 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", Выборка.Точность);
			НоваяСтрока["ПредставлениеПоказателя" + Сч] = ?(ЗначениеЗаполнено(Выборка.КраткоеНаименование), Выборка.КраткоеНаименование, Выборка.Наименование);
			Если РасчетСреднегоЗаработка И ПоказателиСреднегоЗаработка.Получить(Выборка.Показатель) <> Неопределено Тогда
				НоваяСтрока["КомандаРасшифровки" + Сч] = УчетСреднегоЗаработкаКлиентСервер.ПредставлениеКомандыРасшифровки();
			КонецЕсли;
			Если Выборка.Показатель = ПоказательСдельногоЗаработка Тогда
				НоваяСтрока["КомандаРасшифровки" + Сч] = НСтр("ru='Подробнее';uk='Докладніше'");
			КонецЕсли;	
			Сч = Сч + 1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаВидовРасчета;
	
КонецФункции

Функция ВыборкаПредставленийРаспределения(ДокументОбъект, МенеджерВременныхТаблиц, ОписаниеТаблицы, ДополнительныеПараметры)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("РаспределениеНеЗадано", НСтр("ru='Не задано';uk='Не задано'"));
	Запрос.УстановитьПараметр("РаспределениеНачислений", ДополнительныеПараметры.ИмяВТРаспределение = "ВТРаспределениеРезультатовНачислений");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА (НЕ ЕСТЬNULL(ПредставлениеРаспределения.ЕстьОшибкиЗаполнения, ЛОЖЬ)
	               |				ИЛИ &ДополнительноеУсловиеПроверкиРаспределенияПособий)
	               |				И ДанныеОсновнойТаблицы.Результат <> 0
	               |				И ДанныеОсновнойТаблицы.Результат = ЕСТЬNULL(ПредставлениеРаспределения.СуммаРаспределения, 0)
	               |			ТОГДА ЕСТЬNULL(ПредставлениеРаспределения.СтрокаПредставления1, """") + ЕСТЬNULL(ПредставлениеРаспределения.СтрокаПредставления2, """")
	               |		КОГДА ДанныеОсновнойТаблицы.Результат = 0
	               |				И ДанныеОсновнойТаблицы.Результат = ЕСТЬNULL(ПредставлениеРаспределения.СуммаРаспределения, 0)
	               |			ТОГДА """"
	               |		ИНАЧЕ &РаспределениеНеЗадано
	               |	КОНЕЦ КАК ПредставлениеРаспределения
	               |ИЗ
	               |	ВТДанныеОсновнойТаблицы КАК ДанныеОсновнойТаблицы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредставлениеРаспределенияНачисленийУдержаний КАК ПредставлениеРаспределения
	               |		ПО ДанныеОсновнойТаблицы.ИдентификаторСтроки = ПредставлениеРаспределения.ИдентификаторСтроки
	               |			И (ПредставлениеРаспределения.РаспределениеНачислений = &РаспределениеНачислений)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДанныеОсновнойТаблицы.НомерСтроки"; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПредставлениеРаспределенияНачисленийУдержаний", ДополнительныеПараметры.ИмяВТПредставлениеРаспределения);
	
	Если ОписаниеТаблицы.ИмяТаблицы = "Пособия"
		Или ОписаниеТаблицы.ИмяТаблицы = "ПособияПерерасчет" Тогда
		
		ВидыОперацийПособия = Новый Массив;
		ВидыОперацийПособия.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС);
		ВидыОперацийПособия.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
		Запрос.УстановитьПараметр("ВидыОперацийПособия", ВидыОперацийПособия);
		
		ТекстДопУсловияПроверкиРаспределенияПособий = "(ДанныеОсновнойТаблицы.ВидРасчета.ВидОперацииПоЗарплате В (&ВидыОперацийПособия) И ЕСТЬNULL(ПредставлениеРаспределения.ЗаполненыОсновныеПоляРаспределения, ЛОЖЬ))";		
	Иначе
		ТекстДопУсловияПроверкиРаспределенияПособий = "ЛОЖЬ";	
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловиеПроверкиРаспределенияПособий", ТекстДопУсловияПроверкиРаспределенияПособий);
	
			
	Возврат Запрос.Выполнить().Выбрать();
		
КонецФункции	

Функция ТаблицаРаспределенияПоТерриториямУсловиямТруда(Форма, ОписаниеТаблицы) 
	
	АдресТаблицыРаспределения = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда);
	Если ЗначениеЗаполнено(АдресТаблицыРаспределения) Тогда 
		Возврат ПолучитьИзВременногоХранилища(АдресТаблицыРаспределения);
	КонецЕсли;
	
	ОписаниеСтрокиРаспределения = РасчетЗарплатыРасширенныйФормы.ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
	
	РаспределениеПоТерриториямУсловиямТруда = Новый ТаблицаЗначений;
	Для Каждого ОписаниеПоля Из ОписаниеСтрокиРаспределения Цикл
		ОписаниеТипа = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ОписаниеПоля.Значение)));
		РаспределениеПоТерриториямУсловиямТруда.Колонки.Добавить(ОписаниеПоля.Ключ, ОписаниеТипа);
	КонецЦикла;
	РаспределениеПоТерриториямУсловиямТруда.Индексы.Добавить("ИдентификаторСтроки");
	
	Возврат РаспределениеПоТерриториямУсловиямТруда;
	
КонецФункции

Функция ВыборкаРаспределенияПоТерриториямУсловиямТруда(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ДополнительныеПараметры)
	
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(ДокументОбъект.Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РаспределятьПоТерриториямУсловиямТруда = Ложь;
	
	ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда = ДополнительныеПараметры.ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда;
	Для Каждого ОписаниеТаблицыСРаспределением Из ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда Цикл 
		Если ОписаниеТаблицыСРаспределением.ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы Тогда 
			РаспределятьПоТерриториямУсловиямТруда = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не РаспределятьПоТерриториямУсловиямТруда Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ПоказателиПоТерриториямУсловиямТруда = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда();
	КоличествоПоказателей = ПоказателиПоТерриториямУсловиямТруда.Количество();
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	Для Сч = 1 По КоличествоПоказателей Цикл 
		ТаблицаПоказателей.Колонки.Добавить("Показатель" + Сч, Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	Для Сч = 1 По КоличествоПоказателей Цикл
		НоваяСтрока["Показатель" + Сч] = ПоказателиПоТерриториямУсловиямТруда[Сч - 1];
	КонецЦикла;
	
	Если КоличествоПоказателей = 0 Тогда 
		ТаблицаПоказателей.Колонки.Добавить("Показатель1", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
		КоличествоПоказателей = 1;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей
	               |ПОМЕСТИТЬ ВТПоказателиПоТерриториямУсловиямТруда
	               |ИЗ
	               |	&ТаблицаПоказателей КАК ТаблицаПоказателей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеОсновнойТаблицы.НомерСтроки КАК НомерСтроки,
	               |	РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки КАК ИдентификаторСтроки,
	               |	РаспределениеПоТерриториямУсловиямТруда.Территория КАК Территория,
	               |	РаспределениеПоТерриториямУсловиямТруда.УсловияТруда КАК УсловияТруда,
	               |	РаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения КАК ДоляРаспределения,
	               |	РаспределениеПоТерриториямУсловиямТруда.Результат КАК Результат,
	               |	ВЫБОР
	               |		КОГДА РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК РаспределениеЗадано,
	               |	&ПоляЗначенийПоказателей КАК ПоляЗначенийПоказателей
	               |ИЗ
	               |	ВТДанныеОсновнойТаблицы КАК ДанныеОсновнойТаблицы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториямУсловиямТруда КАК РаспределениеПоТерриториямУсловиямТруда
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиПоТерриториямУсловиямТруда КАК ПоказателиПоТерриториямУсловиямТруда
	               |			ПО (ИСТИНА)
	               |			ЛЕВОЕ СОЕДИНЕНИЕ #ИсточникиЗначенийПоказателей КАК ИсточникиЗначенийПоказателей
	               |			ПО (ИСТИНА)
	               |		ПО ДанныеОсновнойТаблицы.ИдентификаторСтроки = РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТПоказателиПоТерриториямУсловиямТруда";
	
	ШаблонПолейСвойствПоказателей = "
	|	ТаблицаПоказателей.Показатель1 КАК Показатель1,";
	
	ШаблонПолейЗначенийПоказателей = "
	|	ЕСТЬNULL(Показатели1.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Показатель1,
	|	ЕСТЬNULL(Показатели1.Значение, 0) КАК Значение1,";
	
	ШаблонИсточниковЗначенийПоказателей = "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели1
	|		ПО РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей = Показатели1.ИдентификаторСтрокиВидаРасчета
	|			И (ПоказателиПоТерриториямУсловиямТруда.Показатель1 = Показатели1.Показатель)";
		
	ПоляСвойствПоказателей = "";
	ПоляЗначенийПоказателей = "";
	ИсточникиЗначенийПоказателей = "";
	
	Для Сч = 1 По КоличествоПоказателей Цикл
		ПоляСвойствПоказателей = ПоляСвойствПоказателей + СтрЗаменить(ШаблонПолейСвойствПоказателей, "1", Строка(Сч));		
		ПоляЗначенийПоказателей = ПоляЗначенийПоказателей + СтрЗаменить(ШаблонПолейЗначенийПоказателей, "1", Строка(Сч));	
		ИсточникиЗначенийПоказателей = ИсточникиЗначенийПоказателей + СтрЗаменить(ШаблонИсточниковЗначенийПоказателей, "1", Строка(Сч));
	КонецЦикла;	
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПоляСвойствПоказателей);
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПоляЗначенийПоказателей);
	
	ПодстрокаПоиска = "&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляСвойствПоказателей); 
	
	ПодстрокаПоиска = "&ПоляЗначенийПоказателей КАК ПоляЗначенийПоказателей";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляЗначенийПоказателей); 
	
	ПодстрокаПоиска = "ЛЕВОЕ СОЕДИНЕНИЕ #ИсточникиЗначенийПоказателей КАК ИсточникиЗначенийПоказателей
	                  |			ПО (ИСТИНА)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ИсточникиЗначенийПоказателей); 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ТаблицаПоказателей);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Процедура ЗаполнитьПредставленияРаспределенияПоТерриториямУсловиямТруда(Форма, ОписаниеТаблицы, Выборка, СтрокаДанных, РаспределениеПоТерриториямУсловиямТруда, КоличествоПоказателей)
	
	Если Не Выборка.РаспределениеЗадано Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыПредставления = Новый Соответствие;
	ЗначенияПоказателей = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл 
		
		СтрокаРаспределения = РаспределениеПоТерриториямУсловиямТруда.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаспределения, Выборка);
		
		Если ЗначениеЗаполнено(СтрокаРаспределения.Территория) Тогда
			ЭлементыПредставления.Вставить(СтрокаРаспределения.Территория);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаРаспределения.УсловияТруда) Тогда
			ЭлементыПредставления.Вставить(СтрокаРаспределения.УсловияТруда);
		КонецЕсли;
		// Если заполнен показатель, собираем его уникальные значения.
		Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
			Показатель = СтрокаРаспределения["Показатель" + НомерПоказателя];
			Если Не ЗначениеЗаполнено(Показатель) Тогда
				Продолжить;
			КонецЕсли;
			Значения = ЗначенияПоказателей[Показатель];
			Если Значения = Неопределено Тогда
				Значения = Новый Соответствие;
				ЗначенияПоказателей.Вставить(Показатель, Значения);
			КонецЕсли;
			Значения.Вставить(СтрокаРаспределения["Значение" + НомерПоказателя]);
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполняем представление в строке.
	ПредставлениеРаспределения = "";
	Для Каждого КлючПредставления Из ЭлементыПредставления Цикл
		ПредставлениеРаспределения = ПредставлениеРаспределения + КлючПредставления.Ключ + ", ";
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПредставлениеРаспределения, 2);
	СтрокаДанных.ПредставлениеРаспределенияПоТерриториямУсловиямТруда = ПредставлениеРаспределения;
	// Формируем представление показателей.
	Если ЗначенияПоказателей.Количество() > 0 Тогда
		КоличествоПоказателейНачислений = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы);
		// Находим поле показателя.
		Для НомерПоказателя = 1 По КоличествоПоказателейНачислений Цикл
			Показатель = СтрокаДанных["Показатель" + НомерПоказателя];
			Если Не ЗначениеЗаполнено(Показатель) Тогда
				Продолжить;
			КонецЕсли;
			Значения = ЗначенияПоказателей[Показатель];
			Если Значения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Значения.Вставить(СтрокаДанных["Значение" + НомерПоказателя]);
			ПредставлениеЗначений = "";
			Для Каждого КлючИЗначение Из Значения Цикл
				ПредставлениеЗначений = ПредставлениеЗначений + Строка(КлючИЗначение.Ключ) + Символы.ПС;
			КонецЦикла;
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПредставлениеЗначений);
			СтрокаДанных["ПредставлениеЗначенийПоТерриториямУсловиямТруда" + НомерПоказателя] = ПредставлениеЗначений;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВторичныеДанныеНДФЛПоДаннымОбъекта(Форма, ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ДополнительныеПараметры) Экспорт 
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ДополнительныеПараметры.ПодготовленаВТВычетыКДоходам Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеПанелиВычеты = ДополнительныеПараметры.ОписаниеПанелиВычеты;
	
	ПутьКДаннымНДФЛ = ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ.ПутьКДаннымНДФЛ;
	МассивИмен = СтрРазделить(ПутьКДаннымНДФЛ, ".");
	ИмяТаблицыНДФЛ = МассивИмен[МассивИмен.Количество()-1];
	
	ПутьКДаннымВычетыНаДетейИИмущественные = ОписаниеПанелиВычеты.НастраиваемыеПанели.Получить("ВычетыНаДетейИИмущественные");
	МассивИмен = СтрРазделить(ПутьКДаннымВычетыНаДетейИИмущественные, ".");
	ИмяТаблицыВычетыНаДетейИИмущественные = МассивИмен[МассивИмен.Количество()-1];
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаНДФЛ", ДокументОбъект[ИмяТаблицыНДФЛ]);
	Запрос.УстановитьПараметр("ТаблицаВычетыНаДетейИИмущественные", ДокументОбъект[ИмяТаблицыВычетыНаДетейИИмущественные]);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаНДФЛ.НомерСтроки КАК НомерСтроки,
	               |	ТаблицаНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ТаблицаНДФЛ.Подразделение КАК Подразделение,
	               |	ТаблицаНДФЛ.ПримененныйВычетЛичный КАК ПримененныйВычетЛичный,
	               |	ТаблицаНДФЛ.ПримененныйВычетЛичныйКодВычета КАК ПримененныйВычетЛичныйКодВычета,
	               |	ТаблицаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату КАК ПримененныйВычетЛичныйКЗачетуВозврату,
	               |	ТаблицаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета КАК ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета,
	               |	ТаблицаНДФЛ.Налог - ТаблицаНДФЛ.ЗачтеноАвансовыхПлатежей + ТаблицаНДФЛ.НалогКЗачетуВозврату КАК Результат,
	               |	ТаблицаНДФЛ.ИдентификаторСтрокиНДФЛ КАК ИдентификаторСтроки
	               |ПОМЕСТИТЬ ВТДанныеОсновнойТаблицы
	               |ИЗ
	               |	&ТаблицаНДФЛ КАК ТаблицаНДФЛ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаВычетыНаДетейИИмущественные.КодВычета КАК КодВычета,
	               |	ТаблицаВычетыНаДетейИИмущественные.РазмерВычета КАК РазмерВычета,
	               |	ТаблицаВычетыНаДетейИИмущественные.ИдентификаторСтрокиНДФЛ КАК ИдентификаторСтроки
	               |ПОМЕСТИТЬ ВТВычетыНаДетейИИмущественные
	               |ИЗ
	               |	&ТаблицаВычетыНаДетейИИмущественные КАК ТаблицаВычетыНаДетейИИмущественные
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВычетыНаДетейИИмущественные.ИдентификаторСтроки,
	               |	СУММА(ВычетыНаДетейИИмущественные.РазмерВычета) КАК РазмерВычета
	               |ПОМЕСТИТЬ ВТВычетыНаДетейИИмущественныеПредставление
	               |ИЗ
	               |	ВТВычетыНаДетейИИмущественные КАК ВычетыНаДетейИИмущественные
	               |ГДЕ
	               |	ВычетыНаДетейИИмущественные.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВычетыНаДетейИИмущественные.ИдентификаторСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВычетыКДоходам.ФизическоеЛицо,
	               |	ВычетыКДоходам.Подразделение,
	               |	СУММА(ВычетыКДоходам.СуммаВычета) КАК СуммаВычета
	               |ПОМЕСТИТЬ ВТВычетыКДоходамПредставление
	               |ИЗ
	               |	ВТВычетыКДоходам КАК ВычетыКДоходам
	               |ГДЕ
	               |	ВычетыКДоходам.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	               |	И ВычетыКДоходам.ВычетПримененныйКДоходам
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВычетыКДоходам.ФизическоеЛицо,
	               |	ВычетыКДоходам.Подразделение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеНДФЛ.НомерСтроки КАК НомерСтроки,
	               |	ВЫБОР
	               |		КОГДА ДанныеНДФЛ.ПримененныйВычетЛичныйКодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	               |			ТОГДА ДанныеНДФЛ.ПримененныйВычетЛичный
	               |		ИНАЧЕ 0
	               |	КОНЕЦ + ВЫБОР
	               |		КОГДА ДанныеНДФЛ.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	               |			ТОГДА ДанныеНДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПредставлениеВычетовЛичных,
	               |	ЕСТЬNULL(ВычетыНаДетейИИмущественныеПредставление.РазмерВычета, 0) КАК ПредставлениеВычетовНаДетейИИмущественных,
	               |	ЕСТЬNULL(ВычетыКДоходамПредставление.СуммаВычета, 0) КАК ПредставлениеВычетовКДоходам
	               |ИЗ
	               |	ВТДанныеОсновнойТаблицы КАК ДанныеНДФЛ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыНаДетейИИмущественныеПредставление КАК ВычетыНаДетейИИмущественныеПредставление
	               |		ПО ДанныеНДФЛ.ИдентификаторСтроки = ВычетыНаДетейИИмущественныеПредставление.ИдентификаторСтроки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыКДоходамПредставление КАК ВычетыКДоходамПредставление
	               |		ПО ДанныеНДФЛ.ФизическоеЛицо = ВычетыКДоходамПредставление.ФизическоеЛицо
	               |			И ДанныеНДФЛ.Подразделение = ВычетыКДоходамПредставление.Подразделение
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТВычетыНаДетейИИмущественные
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТВычетыНаДетейИИмущественныеПредставление
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТВычетыКДоходам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТВычетыКДоходамПредставление";
				   
	РезультатЗапроса = Запрос.Выполнить();			   
	
	Выборка = РезультатЗапроса.Выбрать();			   
	ВыборкаПредставленийРаспределения = ВыборкаПредставленийРаспределения(ДокументОбъект, МенеджерВременныхТаблиц, ОписаниеТаблицы, ДополнительныеПараметры);
	
	УничтожитьВТДанныеОсновнойТаблицы(Запрос.МенеджерВременныхТаблиц);
	
	ПредставленияПериодов = Новый Соответствие;			   
	ДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымНДФЛ);
	
	КонтролируемыеПоля = Неопределено;
	ДополнительныеПараметры.КонтролируемыеПоля.Свойство(ИмяТаблицыНДФЛ, КонтролируемыеПоля);
	
	ИмяПоляПериод = ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ.ИмяПоляПериод;
	ИмяПоляПериодСтрокой = ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ.ИмяПоляПериод + "Строкой";
	
	МаксимальныйИдентификаторСтрокиНДФЛ = 0;
	
	ИменаКолонокТаблицыРаспределенияРезультатовРасчета = ЗарплатаКадрыРасширенныйКлиентСервер.ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицы);
	ОписаниеСтрокиРаспределенияРезультатовРасчета = Новый Структура(ИменаКолонокТаблицыРаспределенияРезультатовРасчета);
	
	Для Каждого СтрокаДанных Из ДанныеФормы Цикл
		
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
		
		Если ЗначениеЗаполнено(ИмяПоляПериод) Тогда
			ПериодСтрокой = ПредставленияПериодов.Получить(СтрокаДанных[ИмяПоляПериод]);
			Если ПериодСтрокой = Неопределено Тогда 
				ПериодСтрокой = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(СтрокаДанных[ИмяПоляПериод]);
				ПредставленияПериодов.Вставить(СтрокаДанных[ИмяПоляПериод], ПериодСтрокой);
			КонецЕсли;
			СтрокаДанных[ИмяПоляПериодСтрокой] = ПериодСтрокой;
		КонецЕсли;
		
		Если МаксимальныйИдентификаторСтрокиНДФЛ < СтрокаДанных.ИдентификаторСтрокиНДФЛ Тогда
			МаксимальныйИдентификаторСтрокиНДФЛ = СтрокаДанных.ИдентификаторСтрокиНДФЛ;
		КонецЕсли;
		
		Если ВыборкаПредставленийРаспределения <> Неопределено Тогда
			ВыборкаПредставленийРаспределения.Следующий();
			СтрокаДанных.КомандаРедактированияРаспределения = ВыборкаПредставленийРаспределения.ПредставлениеРаспределения;
		КонецЕсли;
		
		Если Не Форма.НайденыИсправленияПриОткрытии И КонтролируемыеПоля <> Неопределено Тогда 
			Для Каждого ОписаниеПоля Из КонтролируемыеПоля Цикл 
				ИмяПоля = ОписаниеПоля.Ключ;
				Если СтрокаДанных[ИмяПоля] = Истина Тогда
					Форма.НайденыИсправленияПриОткрытии = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма[ОписаниеПанелиВычеты.ИмяГруппыФормыПанелиВычеты + "МаксимальныйИдентификаторСтрокиНДФЛ"] = МаксимальныйИдентификаторСтрокиНДФЛ;
	
	ДополнительныеПараметры.ПодготовленаВТВычетыКДоходам = Ложь;
	
КонецПроцедуры

// Устанавливает дополнительное свойство всем наборам записей, входящим в состав движений документа
//
Процедура УстановитьДополнительноеСвойствоДвижений(Движения, ИмяСвойства, ЗначениеСвойства = Истина) Экспорт
	
	Для каждого НаборЗаписей Из Движения Цикл
		
		Если Не НаборЗаписей.ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСвойства, ЗначениеСвойства);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет наборы записей при отмене проведения документа, тем самым инициирует сбор сведений о
// о необходимости регистраций отложенных изменений
//
Процедура ЗаписатьДвиженияДокумента(Движения, ЗаписыватьТолькоНеСохраненные) Экспорт
	
	Для каждого НаборЗаписей Из Движения Цикл
		
		Если ЗаписыватьТолькоНеСохраненные И Не НаборЗаписей.Записывать Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры


#Область СписочныеДокументы

Функция ПараметрыОткрытияФормыРедактированияСтрокиДокумента(Объект, ТекущиеДанные, ПолноеИмяОбъектаМетаданных, ПараметрыОткрытия = Неопределено) Экспорт
	
	ОписаниеСтроки = ЗарплатаКадрыРасширенныйВызовСервера.СтруктураПоМетаданным(ПолноеИмяОбъектаМетаданных);
	ЗаполнитьОбъектПоОбразцу(ОписаниеСтроки, Объект, ТекущиеДанные, "Сотрудник");
	ОписаниеСтроки.Вставить("СсылкаНаОбъект", Объект.Ссылка);
	
	Если ПараметрыОткрытия = Неопределено Тогда
		ПараметрыОткрытия = Новый Структура;
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("СтрокаСписочногоДокумента", ОписаниеСтроки);
	ПараметрыОткрытия.Вставить("КлючНазначенияИспользования", "РедактированиеСтрокиСписочногоДокумента");
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Процедура ЗаполнитьОбъектПоОбразцу(ОписаниеОбъекта, Объект, Строка = Неопределено, ИмяКлючевогоРеквизита = Неопределено) Экспорт
	
	ЗаполнитьЗначенияСвойств(ОписаниеОбъекта, Объект);
	
	Если Строка <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеОбъекта, Строка);
	КонецЕсли; 
	
	Если ИмяКлючевогоРеквизита <> Неопределено Тогда
		СтруктураОтбора = Новый Структура(ИмяКлючевогоРеквизита, Строка[ИмяКлючевогоРеквизита]);
	Иначе
		СтруктураОтбора = Неопределено;
	КонецЕсли;
	
	ТабличныеЧастиОбъекта = ОписаниеОбъекта.ТабличныеЧасти;
	
	Для каждого ОписаниеТабличнойЧасти Из ТабличныеЧастиОбъекта Цикл
		
		Если ОписаниеТабличнойЧасти.Ключ = "ОписаниеТабличныхЧастей" Тогда
			Продолжить;
		КонецЕсли; 
		
		ИменаРеквизитов = ТабличныеЧастиОбъекта.ОписаниеТабличныхЧастей[ОписаниеТабличнойЧасти.Ключ];
		
		Если СтруктураОтбора = Неопределено Тогда
			СтрокиТабличнойЧасти = Объект[ОписаниеТабличнойЧасти.Ключ];
		Иначе
			СтрокиТабличнойЧасти = Объект[ОписаниеТабличнойЧасти.Ключ].НайтиСтроки(СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
			
			Для каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
				
				СтруктураСтроки = Новый Структура(ИменаРеквизитов);
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабличнойЧасти);
				
				ТабличныеЧастиОбъекта[ОписаниеТабличнойЧасти.Ключ].Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуМногосотрудниковогоДокумента(Результат, ТекущиеДанные, Объект, ОписанияТаблиц) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЗарплатаКадрыРасширенныйКлиентСервер.УдалитьДанныеСотрудникаСписочногоДокумента(Объект, Результат, ТекущиеДанные.Сотрудник);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
		
		ЗависимыеТабличныеЧасти = Новый Соответствие;
		ЗависимыеТабличныеЧасти.Вставить("ПримененныеВычетыНаДетейИИмущественные", "НДФЛ");
		ЗависимыеТабличныеЧасти.Вставить("Показатели", "Начисления,НачисленияПерерасчет,Пособия,ПособияПерерасчет,Удержания,ДенежноеСодержание,Льготы,РаспределениеПоТерриториямУсловиямТруда");
		ЗависимыеТабличныеЧасти.Вставить("РаспределениеРезультатовНачислений", "Начисления,НачисленияПерерасчет,ОплатаТруда,Пособия,Льготы");
		ЗависимыеТабличныеЧасти.Вставить("РаспределениеРезультатовУдержаний", "Удержания,НДФЛ,ПогашениеЗаймов");
		ЗависимыеТабличныеЧасти.Вставить("РаспределениеПоТерриториямУсловиямТруда", "Начисления,НачисленияПерерасчет,Пособия,Льготы");
		
		СоответствияИдентификаторов = Новый Соответствие;
		Для каждого ОписаниеТабличнойЧасти Из Результат.ТабличныеЧасти Цикл
			
			Если ОписаниеТабличнойЧасти.Ключ = "ОписаниеТабличныхЧастей" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗависимыеТабличныеЧасти.Получить(ОписаниеТабличнойЧасти.Ключ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			ОбновитьИдентификаторыСтрок = Ложь;
			ИмяРеквизитаИдентификаторСтроки = ИмяРеквизитаИдентификаторСтроки(Результат, ОписаниеТабличнойЧасти.Ключ);
			Если Не ПустаяСтрока(ИмяРеквизитаИдентификаторСтроки) Тогда
				ОбновитьИдентификаторыСтрок = Истина;
				МаксимальныйИдентификатор = МаксимальныйИдентификаторСтроки(Объект[ОписаниеТабличнойЧасти.Ключ], ИмяРеквизитаИдентификаторСтроки);
				Если МаксимальныйИдентификатор = 0 И ОписанияТаблиц.Свойство(ОписаниеТабличнойЧасти.Ключ) Тогда
					МаксимальныйИдентификатор = ОписанияТаблиц[ОписаниеТабличнойЧасти.Ключ].НомерТаблицы * 1000000;
				КонецЕсли; 
			КонецЕсли; 
			
			СоответствиеИдентификаторовТабличнойЧасти = Неопределено;
			Для каждого ОписаниеСтроки Из ОписаниеТабличнойЧасти.Значение Цикл
				
				НоваяСтрока = Объект[ОписаниеТабличнойЧасти.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСтроки);
				
				НоваяСтрока.Сотрудник = ТекущиеДанные.Сотрудник;
				
				// Обновление идентификаторов строк
				Если ОбновитьИдентификаторыСтрок Тогда
					
					// Подготовка соответствия для хранения новых идентификаторов строк
					Если СоответствиеИдентификаторовТабличнойЧасти = Неопределено Тогда
						СоответствиеИдентификаторовТабличнойЧасти = Новый Соответствие;
					КонецЕсли; 
					
					МаксимальныйИдентификатор = МаксимальныйИдентификатор + 1;
					СоответствиеИдентификаторовТабличнойЧасти.Вставить(НоваяСтрока[ИмяРеквизитаИдентификаторСтроки], МаксимальныйИдентификатор);
					НоваяСтрока[ИмяРеквизитаИдентификаторСтроки] = МаксимальныйИдентификатор;
				
				КонецЕсли; 
				
			КонецЦикла;
			
			// Сохранение измененных идентификаторов строк
			Если ОбновитьИдентификаторыСтрок Тогда
				СоответствияИдентификаторов.Вставить(ОписаниеТабличнойЧасти.Ключ, СоответствиеИдентификаторовТабличнойЧасти);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗагружатьТабличнуюЧастьПоказатели = Ложь;
		// Обновление зависимых табличных частей
		Для каждого ОписаниеТабличнойЧасти Из Результат.ТабличныеЧасти Цикл
			
			Если ОписаниеТабличнойЧасти.Ключ = "ОписаниеТабличныхЧастей" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеТабличнойЧасти.Ключ = "Показатели" Тогда
				ЗагружатьТабличнуюЧастьПоказатели = Истина;
				Продолжить;
			КонецЕсли;
			
			ВедущиеТабличныеЧасти = ЗависимыеТабличныеЧасти.Получить(ОписаниеТабличнойЧасти.Ключ);
			Если ВедущиеТабличныеЧасти = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			// Обновление идентификаторов строк для связи с табличной частью показатели
			Если ОписаниеТабличнойЧасти.Ключ = "РаспределениеПоТерриториямУсловиямТруда" Тогда
				
				СоответствиеИдентификаторовТабличнойЧасти = Новый Соответствие;
				МаксимальныйИдентификатор = МаксимальныйИдентификаторСтроки(Объект.РаспределениеПоТерриториямУсловиямТруда, "ИдентификаторСтрокиПоказателей");
				Для каждого ОписаниеСтроки Из Результат.ТабличныеЧасти.РаспределениеПоТерриториямУсловиямТруда Цикл
					
					МаксимальныйИдентификатор = МаксимальныйИдентификатор + 1;
					СоответствиеИдентификаторовТабличнойЧасти.Вставить(ОписаниеСтроки.ИдентификаторСтрокиПоказателей, МаксимальныйИдентификатор);
					ОписаниеСтроки.ИдентификаторСтрокиПоказателей = МаксимальныйИдентификатор;
					
				КонецЦикла;
				
				СоответствияИдентификаторов.Вставить("РаспределениеПоТерриториямУсловиямТруда", СоответствиеИдентификаторовТабличнойЧасти);
				
			КонецЕсли; 
				
			ЗагрузитьТабличнуюЧасть(Объект, Результат, ОписаниеТабличнойЧасти.Ключ, ВедущиеТабличныеЧасти, СоответствияИдентификаторов, ТекущиеДанные.Сотрудник);
			
		КонецЦикла;
		
		Если ЗагружатьТабличнуюЧастьПоказатели Тогда
			ИмяТабличнойЧасти = "Показатели";
			ВедущиеТабличныеЧасти = ЗависимыеТабличныеЧасти.Получить(ИмяТабличнойЧасти);
			ЗагрузитьТабличнуюЧасть(Объект, Результат, ИмяТабличнойЧасти, ВедущиеТабличныеЧасти, СоответствияИдентификаторов, ТекущиеДанные.Сотрудник);
		КонецЕсли; 
			
	Иначе
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
			Объект.Сотрудники.Удалить(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Функция МаксимальныйИдентификаторСтроки(КоллекцияСтрок, ИмяРеквизитаИдентификаторСтроки)
	
	МаксимальныйИдентификатор = 0;
	Для каждого СтрокаДокумента Из КоллекцияСтрок Цикл
		Если МаксимальныйИдентификатор < СтрокаДокумента[ИмяРеквизитаИдентификаторСтроки] Тогда
			МаксимальныйИдентификатор = СтрокаДокумента[ИмяРеквизитаИдентификаторСтроки];
		КонецЕсли; 
	КонецЦикла;
	
	Возврат МаксимальныйИдентификатор;
	
КонецФункции

Процедура ЗагрузитьТабличнуюЧасть(Объект, Результат, ИмяТабличнойЧасти, ВедущиеТабличныеЧасти, СоответствияИдентификаторов, Сотрудник)
	
	СписокВедущихТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВедущиеТабличныеЧасти);
	Для каждого ОписаниеСтроки Из Результат.ТабличныеЧасти[ИмяТабличнойЧасти] Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСтроки);
		НоваяСтрока.Сотрудник = Сотрудник;
		
		Для каждого ИмяВедущейТабличнойЧасти Из СписокВедущихТабличныхЧастей Цикл
			
			СоответствияИдентификаторовТабличнойЧасти = СоответствияИдентификаторов.Получить(ИмяВедущейТабличнойЧасти);
			Если СоответствияИдентификаторовТабличнойЧасти = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяИдентификатораСтроки = ИмяРеквизитаИдентификаторСтроки(Результат, ИмяТабличнойЧасти);
			
			Если Не ПустаяСтрока(ИмяИдентификатораСтроки) Тогда
				
				ИдентификаторСтроки = НоваяСтрока[ИмяИдентификатораСтроки];
				
				НовыйИдентификатор = СоответствияИдентификаторовТабличнойЧасти.Получить(ИдентификаторСтроки);
				Если НовыйИдентификатор <> Неопределено Тогда
					НоваяСтрока[ИмяИдентификатораСтроки] = НовыйИдентификатор;
					Прервать;
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
			
КонецПроцедуры

Функция ИмяРеквизитаИдентификаторСтроки(Результат, ИмяТабличнойЧасти)
	
	ИмяРеквизита = "";
	
	Если СтрНайти(Результат.ТабличныеЧасти.ОписаниеТабличныхЧастей[ИмяТабличнойЧасти], "ИдентификаторСтрокиВидаРасчета") Тогда
		ИмяРеквизита = "ИдентификаторСтрокиВидаРасчета";
	ИначеЕсли СтрНайти(Результат.ТабличныеЧасти.ОписаниеТабличныхЧастей[ИмяТабличнойЧасти], "ИдентификаторСтрокиНДФЛ") Тогда
		ИмяРеквизита = "ИдентификаторСтрокиНДФЛ";
	ИначеЕсли СтрНайти(Результат.ТабличныеЧасти.ОписаниеТабличныхЧастей[ИмяТабличнойЧасти], "ИдентификаторСтрокиПоказателей") Тогда
		ИмяРеквизита = "ИдентификаторСтрокиПоказателей";
	ИначеЕсли СтрНайти(Результат.ТабличныеЧасти.ОписаниеТабличныхЧастей[ИмяТабличнойЧасти], "ИдентификаторСтроки") Тогда
		ИмяРеквизита = "ИдентификаторСтроки";
	КонецЕсли; 
			
	Возврат ИмяРеквизита;
		
КонецФункции

#КонецОбласти


#Область СозданиеПодменюСоздатьСписковДокументов

Функция ОписаниеКомандыСозданияДокумента(ПолноеИмя, Представление, Знач Порядок = Неопределено, ИмяФормы = "") Экспорт
	
	Если Порядок = Неопределено Тогда
		Порядок = Представление;
	КонецЕсли; 
	
	Если ИмяФормы = "" Тогда 
		ИмяФормы = "ФормаОбъекта";
	КонецЕсли;
	
	ОписаниеКоманды = Новый Структура("Параметры");
	ОписаниеКоманды.Вставить("ПолноеИмя",		ПолноеИмя);
	ОписаниеКоманды.Вставить("Представление",	Представление);
	ОписаниеКоманды.Вставить("Порядок",			Порядок);
	ОписаниеКоманды.Вставить("ИмяФормы",		ИмяФормы);
	
	Возврат ОписаниеКоманды;
	
КонецФункции

Процедура ДобавитьВКоллекциюКомандуСозданияДокумента(КомандыСозданияДокументов, ОписаниеКоманды) Экспорт
	
	Если КомандыСозданияДокументов = Неопределено Тогда
		КомандыСозданияДокументов = Новый Соответствие;
	КонецЕсли; 
	
	ИмяКоманды = "СоздатьДокумент" + Формат(КомандыСозданияДокументов.Количество(), "ЧГ=");
	КомандыСозданияДокументов.Вставить(ИмяКоманды, ОписаниеКоманды);
	
КонецПроцедуры

Процедура ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(КомандыСозданияДокументов, МетаданныеДокумента) Экспорт
	
	ОписаниеКоманды = ОписаниеКомандыСозданияДокумента(МетаданныеДокумента.ПолноеИмя(), МетаданныеДокумента.Представление());
	ДобавитьВКоллекциюКомандуСозданияДокумента(КомандыСозданияДокументов, ОписаниеКоманды)
	
КонецПроцедуры

Процедура СформироватьПодменюСоздатьФормыСпискаДокументов(Форма, ПолноеИмяМетаданных, ЭлементПодменюСоздать = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);
	Если СтрНайти(ПолноеИмяМетаданных, "ЖурналДокументов.") = 1 Тогда
		КоллекцияОбъектов = ОбъектМетаданных.РегистрируемыеДокументы;
	Иначе
		КоллекцияОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектМетаданных);
	КонецЕсли; 
	
	КомандыСозданияДокументов = Неопределено;
	Для каждого МетаданныеДокумента Из КоллекцияОбъектов Цикл
		
		Если ДоступноСозданиеОбъекта(МетаданныеДокумента) Тогда
			
			ПолноеИмяОбъектаМетаданных = МетаданныеДокумента.ПолноеИмя();
			Попытка
				
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
				МенеджерОбъекта.ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры);
				
			Исключение
				
				ОписаниеКоманды = ОписаниеКомандыСозданияДокумента(ПолноеИмяОбъектаМетаданных, МетаданныеДокумента.Представление());
				ДобавитьВКоллекциюКомандуСозданияДокумента(КомандыСозданияДокументов, ОписаниеКоманды)
				
			КонецПопытки;
		
		КонецЕсли; 
		
	КонецЦикла;
	
	Если КомандыСозданияДокументов <> Неопределено Тогда
		
		Форма.КомандыСозданияДокументов = Новый ФиксированноеСоответствие(КомандыСозданияДокументов);
		Если Форма.КомандыСозданияДокументов.Количество() > 0 Тогда
			
			Если ЭлементПодменюСоздать = Неопределено Тогда
				ЭлементПодменюСоздать = Форма.Элементы.Найти("ПодменюСоздать");
			КонецЕсли; 
			
			Если ЭлементПодменюСоздать <> Неопределено Тогда
				
				ТаблицаПорядка = Новый ТаблицаЗначений;
				ТаблицаПорядка.Колонки.Добавить("ИмяКоманды");
				ТаблицаПорядка.Колонки.Добавить("Представление");
				ТаблицаПорядка.Колонки.Добавить("Порядок");
				
				Для каждого ОписаниеКоманды Из Форма.КомандыСозданияДокументов Цикл
					НоваяСтрокаПорядка = ТаблицаПорядка.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПорядка, ОписаниеКоманды.Значение);
					НоваяСтрокаПорядка.ИмяКоманды = ОписаниеКоманды.Ключ;
				КонецЦикла;
				
				ТаблицаПорядка.Сортировать("Порядок,Представление");
				
				Для каждого СтрокаПорядка Из ТаблицаПорядка Цикл
					
					ИмяКоманды = СтрокаПорядка.ИмяКоманды;
					ОписаниеКоманды = Форма.КомандыСозданияДокументов.Получить(ИмяКоманды);
					
					// Добавляем команду
					НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
					НоваяКоманда.Заголовок	= ОписаниеКоманды.Представление;
					
					НоваяКоманда.Действие	= "Подключаемый_СоздатьДокумент";
					
					// Добавляем кнопку
					Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ЭлементПодменюСоздать); 
					Кнопка.ИмяКоманды	= НоваяКоманда.Имя;
					
				КонецЦикла;
				
			КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ДоступноСозданиеОбъекта(ОбъектМетаданных)
	
	ДоступноСоздание = Ложь;
	
	Если ОбъектМетаданных <> Неопределено Тогда
		
		Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
			
			Если ПравоДоступа("Добавление", ОбъектМетаданных) Тогда
				ДоступноСоздание = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ДоступноСоздание;
	
КонецФункции

#КонецОбласти


// Обслуживание плановых начислений, редактируемых в отдельных полях формы
// РК, СН, Надбавка за вредность.
//

#Область НачисленияРедактируемыеВОтдельныхПолях

Процедура УстановитьОтображениеНачисленияРедактируемогоВОтдельныхПолях(Форма, ИмяНачисленияВЭлементе, Видимость, ПредставлениеОтменяемогоНачисления, ФОТНеРедактируется)
	
	ИменаЭлементовРедактирования = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["Начисление" + ИмяНачисленияВЭлементе],
		"Видимость",
		Видимость);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["Размер" + ИмяНачисленияВЭлементе],
		"Видимость",
		Видимость);
	
	Если ИменаЭлементовРедактирования.Свойство("ДекорацияРазмер" + ИмяНачисленияВЭлементе) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементовРедактирования["ДекорацияРазмер" + ИмяНачисленияВЭлементе],
			"Видимость",
			Не Видимость);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["Размер" + ИмяНачисленияВЭлементе],
		"ТолькоПросмотр",
		ФОТНеРедактируется);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["ЗначениеПоказателя" + ИмяНачисленияВЭлементе],
		"Видимость",
		Видимость);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["ГруппаРасшифровка" + ИмяНачисленияВЭлементе],
		"Видимость",
		Видимость);
	
	МеняетсяСоставНачислений = НЕ ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "СоставНачисленийНеМеняется");
	
	Если МеняетсяСоставНачислений
		И НЕ ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ПрименяетсяНачисление" + ИмяНачисленияВЭлементе) Тогда
		
		ВидимостьПолейРедактирования = Ложь;
		ЦветТекстаПоля = ЦветаСтиля.ПоясняющийТекст;
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ПредставлениеНачисление" + ИмяНачисленияВЭлементе, 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПредставлениеОтменяемогоНачисления,
				ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Начисление" + ИмяНачисленияВЭлементе),
				Формат(ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателя" + ИмяНачисленияВЭлементе), "ЧЦ=5; ЧДЦ=2")));
		
	Иначе
		
		ВидимостьПолейРедактирования = Видимость;
		ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаФормы;
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ПредставлениеНачисление" + ИмяНачисленияВЭлементе,
			ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Начисление" + ИмяНачисленияВЭлементе));
		
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["Начисление" + ИмяНачисленияВЭлементе],
		"ЦветТекста",
		ЦветТекстаПоля);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["Начисление" + ИмяНачисленияВЭлементе],
		"РастягиватьПоГоризонтали",
		НЕ ВидимостьПолейРедактирования);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["ЗначениеПоказателя" + ИмяНачисленияВЭлементе],
		"Видимость",
		ВидимостьПолейРедактирования);
	
	Если ИменаЭлементовРедактирования.Свойство("ДекорацияЗначениеПоказателя" + ИмяНачисленияВЭлементе) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементовРедактирования["ДекорацияЗначениеПоказателя" + ИмяНачисленияВЭлементе],
			"Видимость",
			Не ВидимостьПолейРедактирования И Видимость);
		
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["ГруппаРасшифровка" + ИмяНачисленияВЭлементе],
		"Видимость",
		ВидимостьПолейРедактирования И Видимость);
	
	Если ИменаЭлементовРедактирования.Свойство("ДекорацияГруппаРасшифровка" + ИмяНачисленияВЭлементе) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементовРедактирования["ДекорацияГруппаРасшифровка" + ИмяНачисленияВЭлементе],
			"Видимость",
			Не ВидимостьПолейРедактирования И Видимость);
		
	КонецЕсли; 
	
	Если ВРег(ИмяНачисленияВЭлементе) = Врег("СевернаяНадбавка") Тогда
		ТолькоПросмотрЗначенияПоказателя = Истина;
	Иначе
		ТолькоПросмотрЗначенияПоказателя = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["ЗначениеПоказателя" + ИмяНачисленияВЭлементе],
		"ТолькоПросмотр",
		НЕ МеняетсяСоставНачислений Или Форма.ТолькоПросмотр Или ТолькоПросмотрЗначенияПоказателя);
	
КонецПроцедуры

Процедура УстановитьОтображениеНачисленийРедактируемыхВОтдельныхПолях(Форма) Экспорт
	
	ИменаЭлементовРедактирования = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях");
	
	Если ИменаЭлементовРедактирования <> Неопределено Тогда
		
		// Отображение полей надбавки за вредность
		
		Начисление = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредность");
		Если ЗначениеЗаполнено(Начисление) Тогда
			ФОТНеРедактируется = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление).ФОТНеРедактируется;
		Иначе
			ФОТНеРедактируется = Истина;
		КонецЕсли;
		
		ВидимостьНадбавкаЗаВредность = ЗарплатаКадрыРасширенныйКлиентСервер.НадбавкаЗаВредностьВходитВСоставПлановыхНачислений(Форма);
		УстановитьОтображениеНачисленияРедактируемогоВОтдельныхПолях(
			Форма, "НадбавкаЗаВредность", ВидимостьНадбавкаЗаВредность, НСтр("ru='Отменено начисление';uk='Скасовано нарахування'") + " ""%1"" (%2)", ФОТНеРедактируется);
		
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьВидимостьВкладаВФОТРНачисленийРедактируемыхВОтдельныхПолях(Форма);
		
	КонецЕсли; 
	
КонецПроцедуры


Процедура УстановитьИзменениеСоставаПлановыхНачислений(Форма, СоставНачисленийМеняется, РазрешеноРедактироватьФОТ = Неопределено) Экспорт
	
	Если РазрешеноРедактироватьФОТ = Неопределено Тогда
		РазрешеноРедактироватьФОТ = СоставНачисленийМеняется;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "СоставНачисленийНеМеняется", НЕ СоставНачисленийМеняется);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НеРазрешеноРедактироватьФОТ", НЕ РазрешеноРедактироватьФОТ);
	УстановитьОтображениеНачисленийРедактируемыхВОтдельныхПолях(Форма);
	
КонецПроцедуры

Процедура УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях(Форма, Знач Сотрудник, Знач ДатаСведений, Знач Подразделение = Неопределено, Знач Организация = Неопределено, Знач Территория = Неопределено, Знач Должность = Неопределено, УстановитьЗначенияПоказателей = Истина) Экспорт
	
	СтруктурнаяЕдиница = Неопределено;
	ИспользоватьШтатноеРасписание = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьШтатноеРасписание");
	Если Не ЗначениеЗаполнено(Должность) Тогда
		
		Если ИспользоватьШтатноеРасписание Тогда
			ИменаКадровыхДанных = "ДолжностьПоШтатномуРасписанию";
		Иначе
			ИменаКадровыхДанных = "Должность";
		КонецЕсли;
		
	Иначе
		ИменаКадровыхДанных = "";
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Территория) Тогда
		СтруктурнаяЕдиница = Территория;
	ИначеЕсли ЗначениеЗаполнено(Подразделение) Тогда
		СтруктурнаяЕдиница = Подразделение;
	Иначе
		ИменаКадровыхДанных = ?(ПустаяСтрока(ИменаКадровыхДанных), "", ИменаКадровыхДанных + ",") + "Подразделение,Территория";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИменаКадровыхДанных) Тогда
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, ИменаКадровыхДанных, ДатаСведений, , Ложь);
		Если КадровыеДанные.Количество() > 0 Тогда
			
			Если Не ЗначениеЗаполнено(Должность) Тогда
				
				Если ИспользоватьШтатноеРасписание Тогда
					Должность = КадровыеДанные[0].ДолжностьПоШтатномуРасписанию;
				Иначе
					Должность = КадровыеДанные[0].Должность;
				КонецЕсли;
				
			КонецЕсли; 

			Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
				Если ЗначениеЗаполнено(КадровыеДанные[0].Территория) Тогда
					СтруктурнаяЕдиница = КадровыеДанные[0].Территория;
				Иначе
					СтруктурнаяЕдиница = КадровыеДанные[0].Подразделение;
				КонецЕсли;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		СтруктурнаяЕдиница = Организация;
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНадбавкуЗаВредность")
		И ЗначениеЗаполнено(Должность) Тогда
		
		Если ИспользоватьШтатноеРасписание Тогда
			ДанныеУсловийТруда = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(Должность, ДатаСведений, Ложь, Ложь);
		Иначе
			ДанныеУсловийТруда = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Должность, "ВыплачиваетсяНадбавкаЗаВредность,ПроцентНадбавкиЗаВредность");
		КонецЕсли;
		
		ПрименятьНадбавкуЗаВредность = ДанныеУсловийТруда.ВыплачиваетсяНадбавкаЗаВредность;
		ПроцентНадбавкиЗаВредность = ДанныеУсловийТруда.ПроцентНадбавкиЗаВредность;
		
	Иначе
		ПрименятьНадбавкуЗаВредность = Ложь;
		ПроцентНадбавкиЗаВредность = 0;
	КонецЕсли; 
	
	
	Если ПрименятьНадбавкуЗаВредность И УстановитьЗначенияПоказателей Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяНадбавкаЗаВредность", ПроцентНадбавкиЗаВредность);
	КонецЕсли; 
		
	
КонецПроцедуры

Процедура УстановитьТекущиеЗначенияНачисленийСотрудникаРедактируемыхВОтдельныхПолях(Форма, Сотрудник, ДатаСведений, ИсправленныйДокумент = Неопределено) Экспорт
	
	НачислениеНадбавкаЗаВредностьИспользуется = Ложь;
	ЗначениеПоказателяНадбавкаЗаВредность = 0;
	
	НачислениеРайонныйКоэффициентИспользуется = Ложь;
	ЗначениеПоказателяРайонныйКоэффициент = 1;
	
	НачислениеСевернаяНадбавкаИспользуется = Ложь;
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		
		Если ЗначениеЗаполнено(ИсправленныйДокумент) И НЕ Форма.Объект.Проведен Тогда
			ИсключаемыйРегистратор = ИсправленныйДокумент;
		Иначе
			ИсключаемыйРегистратор = Форма.Объект.Ссылка;
		КонецЕсли; 
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТекущиеНачисленияСотрудника = КадровыйУчетРасширенный.ТекущиеНачисленияСотрудника(Сотрудник, ДатаСведений, ИсключаемыйРегистратор, Ложь);
		
		Если ТекущиеНачисленияСотрудника <> Неопределено Тогда
			
			НачислениеНадбавкаЗаВредность = ТекущиеНачисленияСотрудника.Получить(
				ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредность"));
			
			Если НачислениеНадбавкаЗаВредность <> Неопределено И НачислениеНадбавкаЗаВредность.Количество() > 0 Тогда
					
				НачислениеНадбавкаЗаВредностьИспользуется = Истина;
				
				ЗначениеПоказателя = НачислениеНадбавкаЗаВредность[0].Показатели.Получить(
					ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность"));
					
				Если ЗначениеПоказателя <> Неопределено Тогда
					ЗначениеПоказателяНадбавкаЗаВредность = ЗначениеПоказателя;
				КонецЕсли; 
				
			КонецЕсли; 
			
			
		КонецЕсли; 
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредностьИспользуется", НачислениеНадбавкаЗаВредностьИспользуется);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяНадбавкаЗаВредность", ЗначениеПоказателяНадбавкаЗаВредность);
	
КонецПроцедуры


Процедура ДобавитьРеквизитыНачисленийРедактируемыхВОтдельныхПолях(ДобавляемыеРеквизиты, ОписаниеТаблицыВидовРасчета, РежимРаботы)
	
	Если НЕ ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(РежимРаботы, ОписаниеТаблицыВидовРасчета) Тогда
		Возврат;
	КонецЕсли; 
	
	РеквизитИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях = Новый РеквизитФормы("ИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях", Новый ОписаниеТипов());
	ДобавляемыеРеквизиты.Добавить(РеквизитИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях);
	
	РеквизитСоставНачисленийНеМеняется = Новый РеквизитФормы("СоставНачисленийНеМеняется", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(РеквизитСоставНачисленийНеМеняется);
	
	РеквизитНеРазрешеноРедактироватьФОТ = Новый РеквизитФормы("НеРазрешеноРедактироватьФОТ", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(РеквизитНеРазрешеноРедактироватьФОТ);
	
	
	// НадбавкаЗаВредность
	РеквизитПредставлениеНачислениеНадбавкаЗаВредность = Новый РеквизитФормы("ПредставлениеНачислениеНадбавкаЗаВредность", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(РеквизитПредставлениеНачислениеНадбавкаЗаВредность);
	
	РеквизитНачислениеНадбавкаЗаВредность = Новый РеквизитФормы("НачислениеНадбавкаЗаВредность", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ДобавляемыеРеквизиты.Добавить(РеквизитНачислениеНадбавкаЗаВредность);
	
	РеквизитНачислениеНадбавкаЗаВредностьИспользуется = Новый РеквизитФормы("НачислениеНадбавкаЗаВредностьИспользуется", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(РеквизитНачислениеНадбавкаЗаВредностьИспользуется);
	
	РеквизитПрименяетсяНачислениеНадбавкаЗаВредность = Новый РеквизитФормы("ПрименяетсяНачислениеНадбавкаЗаВредность", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(РеквизитПрименяетсяНачислениеНадбавкаЗаВредность);
	
	РеквизитЗначениеПоказателяНадбавкаЗаВредность = Новый РеквизитФормы(
		"ЗначениеПоказателяНадбавкаЗаВредность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2)), , , Истина);
	ДобавляемыеРеквизиты.Добавить(РеквизитЗначениеПоказателяНадбавкаЗаВредность);
	
	РеквизитРазмерНадбавкаЗаВредность = Новый РеквизитФормы(
		"РазмерНадбавкаЗаВредность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), , , Истина);
	ДобавляемыеРеквизиты.Добавить(РеквизитРазмерНадбавкаЗаВредность);
	
КонецПроцедуры

Процедура ДобавитьЭлементыФормыНачисленийРедактируемыхВОтдельныхПолях(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДобавлятьЭлементыФормы)
	
	Если НЕ ДобавлятьЭлементыФормы
		ИЛИ НЕ ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(РежимРаботы, ОписаниеТаблицыВидовРасчета) Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ЭлементТаблица = Форма.Элементы.Найти(ИмяТаблицы);
	
	Если ЭлементТаблица <> Неопределено Тогда
		
		ИмяГруппыРедактированияПлановыхНачислений = "Группа" + ИмяТаблицы + "РедактированияПлановыхНачислений";
		Если Форма.Элементы.найти(ИмяГруппыРедактированияПлановыхНачислений) = Неопределено Тогда
			
			ИменаЭлементовРедактирования = Новый Структура;
			
			ИменаЭлементовРедактирования.Вставить("ГруппаНачисленийРедактируемыхВОтдельныхПолях", "");
			
			
			ИменаЭлементовРедактирования.Вставить("НачислениеНадбавкаЗаВредность", "");
			ИменаЭлементовРедактирования.Вставить("РазмерНадбавкаЗаВредность", "");
			ИменаЭлементовРедактирования.Вставить("ДекорацияРазмерНадбавкаЗаВредность", "");
			ИменаЭлементовРедактирования.Вставить("ЗначениеПоказателяНадбавкаЗаВредность", "");
			ИменаЭлементовРедактирования.Вставить("ДекорацияЗначениеПоказателяНадбавкаЗаВредность", "");
			ИменаЭлементовРедактирования.Вставить("ГруппаРасшифровкаНадбавкаЗаВредность", "");
			ИменаЭлементовРедактирования.Вставить("ДекорацияГруппаРасшифровкаНадбавкаЗаВредность", "");
			
			ГруппаТаблицыРедактированияПлановыхНачислений = Форма.Элементы.Вставить(ИмяГруппыРедактированияПлановыхНачислений, Тип("ГруппаФормы"), ЭлементТаблица.Родитель, ЭлементТаблица);
			ГруппаТаблицыРедактированияПлановыхНачислений.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТаблицыРедактированияПлановыхНачислений.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаТаблицыРедактированияПлановыхНачислений.ОтображатьЗаголовок = Ложь;
			
			Форма.Элементы.Переместить(ЭлементТаблица, ГруппаТаблицыРедактированияПлановыхНачислений);
			
			ГруппаОтдельныеПоля = Форма.Элементы.Добавить(ГруппаТаблицыРедактированияПлановыхНачислений.Имя + "ОтдельныеПоля", Тип("ГруппаФормы"), ГруппаТаблицыРедактированияПлановыхНачислений);
			ГруппаОтдельныеПоля.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтдельныеПоля.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаОтдельныеПоля.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтдельныеПоля.ОтображатьЗаголовок = Ложь;
			ИменаЭлементовРедактирования.Вставить("ГруппаНачисленийРедактируемыхВОтдельныхПолях", ГруппаОтдельныеПоля.Имя);
			
			ГруппаОтдельныеПоляНаименования = Форма.Элементы.Добавить(ГруппаОтдельныеПоля.Имя + "Наименования", Тип("ГруппаФормы"), ГруппаОтдельныеПоля);
			ГруппаОтдельныеПоляНаименования.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтдельныеПоляНаименования.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаОтдельныеПоляНаименования.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтдельныеПоляНаименования.ОтображатьЗаголовок = Ложь;
			
			ГруппаОтдельныеПоляРазмеры = Форма.Элементы.Добавить(ГруппаОтдельныеПоля.Имя + "Размеры", Тип("ГруппаФормы"), ГруппаОтдельныеПоля);
			ГруппаОтдельныеПоляРазмеры.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтдельныеПоляРазмеры.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаОтдельныеПоляРазмеры.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтдельныеПоляРазмеры.ОтображатьЗаголовок = Ложь;
			
			ГруппаОтдельныеПоляЗначения = Форма.Элементы.Добавить(ГруппаОтдельныеПоля.Имя + "Значения", Тип("ГруппаФормы"), ГруппаОтдельныеПоля);
			ГруппаОтдельныеПоляЗначения.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтдельныеПоляЗначения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаОтдельныеПоляЗначения.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтдельныеПоляЗначения.ОтображатьЗаголовок = Ложь;
			
			ГруппаОтдельныеПоляРасшифровки = Форма.Элементы.Добавить(ГруппаОтдельныеПоля.Имя + "Расшифровки", Тип("ГруппаФормы"), ГруппаОтдельныеПоля);
			ГруппаОтдельныеПоляРасшифровки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтдельныеПоляРасшифровки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаОтдельныеПоляРасшифровки.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтдельныеПоляРасшифровки.ОтображатьЗаголовок = Ложь;
			
			// НадбавкаЗаВредность
			ПолеНадписи = Форма.Элементы.Добавить(ГруппаОтдельныеПоляНаименования.Имя + "НаименованиеНадбавкаЗаВредность", Тип("ПолеФормы"), ГруппаОтдельныеПоляНаименования);
			ПолеНадписи.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеНадписи.РастягиватьПоГоризонтали = Ложь;
			ПолеНадписи.ПутьКДанным = "ПредставлениеНачислениеНадбавкаЗаВредность";
			ИменаЭлементовРедактирования.Вставить("НачислениеНадбавкаЗаВредность", ПолеНадписи.Имя);
			
			ПолеФОТ = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРазмеры.Имя + "РазмерНадбавкаЗаВредность", Тип("ПолеФормы"), ГруппаОтдельныеПоляРазмеры);
			ПолеФОТ.Вид = ВидПоляФормы.ПолеВвода;
			ПолеФОТ.ТолькоПросмотр = Форма.ТолькоПросмотр;
			ПолеФОТ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеФОТ.Ширина = 10;
			ПолеФОТ.ПутьКДанным = "РазмерНадбавкаЗаВредность";
			ПолеФОТ.УстановитьДействие("ПриИзменении", "Подключаемый_ПересчитатьИтогиФОТДокумента");
			ИменаЭлементовРедактирования.Вставить("РазмерНадбавкаЗаВредность", ПолеФОТ.Имя);
			
			ПолеДекорации = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРазмеры.Имя + "ДекорацияРазмерНадбавкаЗаВредность", Тип("ДекорацияФормы"), ГруппаОтдельныеПоляРазмеры);
			ПолеДекорации.Вид = ВидДекорацииФормы.Надпись;
			ИменаЭлементовРедактирования.Вставить("ДекорацияРазмерНадбавкаЗаВредность", ПолеДекорации.Имя);
			
			ПолеПоказателя = Форма.Элементы.Добавить(ГруппаОтдельныеПоляЗначения.Имя + "ЗначениеНадбавкаЗаВредность", Тип("ПолеФормы"), ГруппаОтдельныеПоляЗначения);
			ПолеПоказателя.Вид = ВидПоляФормы.ПолеВвода;
			ПолеПоказателя.ТолькоПросмотр = Форма.ТолькоПросмотр;
			ПолеПоказателя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеПоказателя.Ширина = 4;
			ПолеПоказателя.КнопкаВыбора = Ложь;
			ПолеПоказателя.ФорматРедактирования = "ЧЦ=5; ЧДЦ=2";
			ПолеПоказателя.ПутьКДанным = "ЗначениеПоказателяНадбавкаЗаВредность";
			ПолеПоказателя.УстановитьДействие("ПриИзменении", "Подключаемый_ПересчитатьФОТДокумента");
			ИменаЭлементовРедактирования.Вставить("ЗначениеПоказателяНадбавкаЗаВредность", ПолеПоказателя.Имя);
			
			ПолеДекорации = Форма.Элементы.Добавить(ГруппаОтдельныеПоляЗначения.Имя + "ДекорацияЗначениеПоказателяНадбавкаЗаВредность", Тип("ДекорацияФормы"), ГруппаОтдельныеПоляЗначения);
			ПолеДекорации.Вид = ВидДекорацииФормы.Надпись;
			ИменаЭлементовРедактирования.Вставить("ДекорацияЗначениеПоказателяНадбавкаЗаВредность", ПолеДекорации.Имя);
			
			ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРасшифровки.Имя + "РасшифровкиНадбавкаЗаВредность", Тип("ГруппаФормы"), ГруппаОтдельныеПоляРасшифровки);
			ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность.ОтображатьЗаголовок = Ложь;
			ИменаЭлементовРедактирования.Вставить("ГруппаРасшифровкаНадбавкаЗаВредность", ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность.Имя);
			
			ПолеДекорации = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность.Имя + "ПроцентНадбавкаЗаВредность", Тип("ДекорацияФормы"), ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность);
			ПолеДекорации.Вид = ВидДекорацииФормы.Надпись;
			ПолеДекорации.Заголовок = "%";
			ПолеДекорации.Высота = 1;
			ПолеДекорации.Ширина = 2;
			ПолеДекорации.РастягиватьПоВертикали = Ложь;
			ПолеДекорации.РастягиватьПоГоризонтали = Ложь;
			
			ПолеДекорации = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРасшифровки.Имя + "ДекорацияГруппаРасшифровкаНадбавкаЗаВредность", Тип("ДекорацияФормы"), ГруппаОтдельныеПоляРасшифровки);
			ПолеДекорации.Вид = ВидДекорацииФормы.Надпись;
			ИменаЭлементовРедактирования.Вставить("ДекорацияГруппаРасшифровкаНадбавкаЗаВредность", ПолеДекорации.Имя);
			
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях", Новый ФиксированнаяСтруктура(ИменаЭлементовРедактирования));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНачисленияРедактируемыеВОтдельныхПоляхФормы(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы)
	
	Если НЕ ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(РежимРаботы, ОписаниеТаблицыВидовРасчета) Тогда
		Возврат;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредность", РасчетЗарплатыРасширенный.НачислениеНадбавкаЗаВредность());
	
КонецПроцедуры

Процедура ДобавитьСтрокиНачисленийРедактируемыхВОтдельныхПолях(Форма, Объект, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИдентификаторСтрокиВидаРасчета)
	
	Если НЕ ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(РежимРаботы, ОписаниеТаблицыВидовРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	ИмяТабличнойЧастиНачисления = Подстроки[Подстроки.ВГраница()];
	
	ПутьКДаннымПоказателей = ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей;
	Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДаннымПоказателей, ".");
	ИмяТабличнойЧастиПоказатели = Подстроки[Подстроки.ВГраница()];
	
	СодержитПолеДействие = ЗарплатаКадрыРасширенныйКлиентСервер.ТабличнаяЧастьСодержитПолеДействие(ОписаниеТаблицыВидовРасчета);
	
	// Надбавка за вредность
	НачислениеНадбавкаЗаВредность = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредность");
	Если ЗначениеЗаполнено(НачислениеНадбавкаЗаВредность) Тогда
		
		НачислениеНадбавкаЗаВредностьИспользуется = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредностьИспользуется");
		
		ДобавитьСтрокуНачисленияНадбавкаЗаВредность = Ложь;
		
		ОписаниеСтроки = Новый Структура("Действие");
		ОписаниеСтроки.Вставить(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета, НачислениеНадбавкаЗаВредность);
		ОписаниеСтроки.Вставить("Размер", ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "РазмерНадбавкаЗаВредность"));
		ОписаниеСтроки.Вставить("ИдентификаторСтрокиВидаРасчета", ИдентификаторСтрокиВидаРасчета);
			
		Если ЗарплатаКадрыРасширенныйКлиентСервер.НадбавкаЗаВредностьПрименяется(Форма) Тогда
				
			ДобавитьСтрокуНачисленияНадбавкаЗаВредность = Истина;
			Если НЕ НачислениеНадбавкаЗаВредностьИспользуется Тогда
				ОписаниеСтроки.Вставить("Действие", Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить);
			КонецЕсли;
				
		ИначеЕсли НачислениеНадбавкаЗаВредностьИспользуется И СодержитПолеДействие Тогда
				
			ДобавитьСтрокуНачисленияНадбавкаЗаВредность = Истина;
			ОписаниеСтроки.Вставить("Действие", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
				
		КонецЕсли; 
			
		Если ДобавитьСтрокуНачисленияНадбавкаЗаВредность Тогда
			
			СтрокаНачислений = Объект[ИмяТабличнойЧастиНачисления].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, ОписаниеСтроки);
			
			НоваяСтрокаПоказателя = Объект[ИмяТабличнойЧастиПоказатели].Добавить();
			НоваяСтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			НоваяСтрокаПоказателя.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность");
			НоваяСтрокаПоказателя.Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяНадбавкаЗаВредность");
			
			Если СодержитПолеДействие Тогда
				
				Если ЗарплатаКадрыРасширенныйКлиентСервер.НадбавкаЗаВредностьПрименяется(Форма)
					И  НЕ НачислениеНадбавкаЗаВредностьИспользуется Тогда
					
					НоваяСтрокаПоказателя.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
					
				ИначеЕсли НачислениеНадбавкаЗаВредностьИспользуется
					И НЕ ЗарплатаКадрыРасширенныйКлиентСервер.НадбавкаЗаВредностьПрименяется(Форма) Тогда
					
					НоваяСтрокаПоказателя.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
			
		КонецЕсли;
		
	КонецЕсли; 
	
		
КонецПроцедуры

#КонецОбласти


#Область МногофункциональныеДокументы

// Добавляет на форму многофункционального документа признак обработки вторым ответственным и второго ответственного.
//
Процедура МногофункциональныеДокументыДобавитьЭлементыФормы(Форма, Заголовок, 
				ИмяГруппы = "РасчетчикГруппа", 
				ОбработанВторымОтветственнымИмя = "ДокументРассчитан", 
				ВторойОтветственныйИмя = Неопределено, 
				ПолныеПраваНаДокументИмя = "РегистрацияНачисленийДоступна") Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") Тогда 
		Возврат;
	КонецЕсли;	
	
	ГруппаВторойОтветственный = Форма.Элементы.Найти(ИмяГруппы);
	
	ВторойОтветственныйСтраницы = Форма.Элементы.Найти("ВторойОтветственныйСтраницы");
	
	Если ВторойОтветственныйСтраницы = Неопределено Тогда 
		
		Если Форма.Элементы.Найти(ОбработанВторымОтветственнымИмя) = Неопределено Тогда 
			ОбработанВторымОтветственным = Форма.Элементы.Добавить(ОбработанВторымОтветственнымИмя, Тип("ПолеФормы"), ГруппаВторойОтветственный);
			ОбработанВторымОтветственным.Вид = ВидПоляФормы.ПолеФлажка;
			ОбработанВторымОтветственным.ПутьКДанным = "Объект." + ОбработанВторымОтветственнымИмя;
			ОбработанВторымОтветственным.Заголовок = Заголовок;
			ОбработанВторымОтветственным.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ОбработанВторымОтветственным.Подсказка = НСтр("ru='Документ будет принят к учету только после установки этого флажка';uk='Документ буде прийнятий до обліку тільки після установки цього прапорця'");
			ОбработанВторымОтветственным.УстановитьДействие("ПриИзменении", "Подключаемый_" + ОбработанВторымОтветственнымИмя + "ПриИзменении");
		КонецЕсли;
		
		Если ВторойОтветственныйИмя <> Неопределено И Форма.Элементы.Найти(ВторойОтветственныйИмя) = Неопределено Тогда 
			ВторойОтветственный = Форма.Элементы.Добавить(ВторойОтветственныйИмя, Тип("ПолеФормы"), ГруппаВторойОтветственный);
			ВторойОтветственный.Вид = ВидПоляФормы.ПолеВвода;
			ВторойОтветственный.ПутьКДанным = "Объект." + ВторойОтветственныйИмя;
			ВторойОтветственный.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ВторойОтветственный.РастягиватьПоГоризонтали = Ложь;
			ВторойОтветственный.Ширина = 20;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение функциональной опции ИспользоватьМногофункциональностьДокументовЗарплатаКадры.
//
Процедура УстановитьИспользованиеМногофункциональностиВДокументах() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьМногофункциональность = Ложь;
	
	Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда 
		
		Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда 
			ИспользоватьМногофункциональность = Истина;
		КонецЕсли;
		
		Если Не ИспользоватьМногофункциональность Тогда 
		
			РолиКадровика = Новый Массив;			   
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеПособийФСС");
			РолиКадровика.Добавить("Роль.ЧтениеПособийФСС");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеКомандировок");
			РолиКадровика.Добавить("Роль.ЧтениеКомандировок");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеОтгулов");
			РолиКадровика.Добавить("Роль.ЧтениеОтгулов");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеОплатыДнейУходаЗаДетьмиИнвалидами");
			РолиКадровика.Добавить("Роль.ЧтениеОплатыДнейУходаЗаДетьмиИнвалидами");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеОплатыПоСреднему");
			РолиКадровика.Добавить("Роль.ЧтениеОплатыПоСреднему");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеОтпусков");
			РолиКадровика.Добавить("Роль.ЧтениеОтпусков");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеПремийПоощрений");
			РолиКадровика.Добавить("Роль.ЧтениеПремийПоощрений");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеПрогуловНеявок");
			РолиКадровика.Добавить("Роль.ЧтениеПрогуловНеявок");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеПростоев");
			РолиКадровика.Добавить("Роль.ЧтениеПростоев");
			
			РолиРасчетчика = Новый Массив;			   
			РолиРасчетчика.Добавить("Роль.ДобавлениеИзменениеНачисленнойЗарплатыРасширенная");
			РолиРасчетчика.Добавить("Роль.ЧтениеНачисленнойЗарплатыРасширенная");
			
			Если ЕстьКадровикиБезПравРасчетчика(РолиКадровика, РолиРасчетчика) Тогда 
				ИспользоватьМногофункциональность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ИспользоватьМногофункциональность Тогда 
			
			РолиКадровика = Новый Массив;			   
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеКадровогоСостоянияРасширенная");
			РолиКадровика.Добавить("Роль.ЧтениеКадровогоСостоянияРасширенная");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеОплатыПоСреднему");
			РолиКадровика.Добавить("Роль.ЧтениеОплатыПоСреднему");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеСовмещения");
			РолиКадровика.Добавить("Роль.ЧтениеСовмещения");
			
			РолиРасчетчика = Новый Массив;			   
			РолиРасчетчика.Добавить("Роль.ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная");
			РолиРасчетчика.Добавить("Роль.ЧтениеДанныхДляНачисленияЗарплатыРасширенная");
			
			Если ЕстьКадровикиБезПравРасчетчика(РолиКадровика, РолиРасчетчика) Тогда 
				ИспользоватьМногофункциональность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ИспользоватьМногофункциональность Тогда 
			
			РолиКадровика = Новый Массив;			   
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеРаботыСверхурочноИВПраздники");
			РолиКадровика.Добавить("Роль.ЧтениеРаботыСверхурочноИВПраздники");
			
			РолиРасчетчика = Новый Массив;			   
			РолиРасчетчика.Добавить("Роль.ДобавлениеИзменениеРабочегоВремени");
			РолиРасчетчика.Добавить("Роль.ЧтениеРабочегоВремени");
			
			Если ЕстьКадровикиБезПравРасчетчика(РолиКадровика, РолиРасчетчика) Тогда 
				ИспользоватьМногофункциональность = Истина;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ИспользоватьМногофункциональность <> Константы.ИспользоватьМногофункциональностьДокументов.Получить() Тогда 
		Константы.ИспользоватьМногофункциональностьДокументов.Установить(ИспользоватьМногофункциональность);
	КонецЕсли;	
	
КонецПроцедуры

// Функция проверяет, существуют ли пользователи с правами кадровика, но без прав расчетчика.
//
// Параметры:
// РолиКадровика - массив полных имен ролей кадровика.
// РолиРасчетчика - массив полных имен ролей расчетчика.
//
Функция ЕстьКадровикиБезПравРасчетчика(РолиКадровика, РолиРасчетчика) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("РолиКадровика", РолиКадровика);
	Запрос.УстановитьПараметр("РолиРасчетчика", РолиРасчетчика);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПрофилиГруппДоступаРоли.Ссылка КАК ПрофильДоступа
	               |ПОМЕСТИТЬ ВТПрофилиПраваКадровика
	               |ИЗ
	               |	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	               |ГДЕ
	               |	ПрофилиГруппДоступаРоли.Роль.ПолноеИмя В(&РолиКадровика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПрофилиГруппДоступаРоли.Ссылка КАК ПрофильДоступа
	               |ПОМЕСТИТЬ ВТПрофилиПраваРасчетчика
	               |ИЗ
	               |	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	               |ГДЕ
	               |	ПрофилиГруппДоступаРоли.Роль.ПолноеИмя В(&РолиРасчетчика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПрофилиПраваКадровика.ПрофильДоступа КАК ПрофильДоступа
	               |ПОМЕСТИТЬ ВТПрофилиКадровикаБезПравРасчетчика
	               |ИЗ
	               |	ВТПрофилиПраваКадровика КАК ВТПрофилиПраваКадровика
	               |ГДЕ
	               |	НЕ ВТПрофилиПраваКадровика.ПрофильДоступа В
	               |				(ВЫБРАТЬ
	               |					ВТПрофилиПраваРасчетчика.ПрофильДоступа
	               |				ИЗ
	               |					ВТПрофилиПраваРасчетчика КАК ВТПрофилиПраваРасчетчика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПрофилиКадровикаБезПравРасчетчика.ПрофильДоступа
	               |ИЗ
	               |	ВТПрофилиКадровикаБезПравРасчетчика КАК ВТПрофилиКадровикаБезПравРасчетчика";

	РезультатЗапроса = Запрос.Выполнить();			   
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыДоступа.Ссылка КАК ГруппаДоступа
	               |ПОМЕСТИТЬ ВТГруппыДоступаКадровика
	               |ИЗ
	               |	Справочник.ГруппыДоступа КАК ГруппыДоступа
	               |ГДЕ
	               |	ГруппыДоступа.Профиль В
	               |			(ВЫБРАТЬ
	               |				ВТПрофилиКадровикаБезПравРасчетчика.ПрофильДоступа
	               |			ИЗ
	               |				ВТПрофилиКадровикаБезПравРасчетчика КАК ВТПрофилиКадровикаБезПравРасчетчика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыДоступа.Ссылка КАК ГруппаДоступа
	               |ПОМЕСТИТЬ ВТГруппыДоступаРасчетчика
	               |ИЗ
	               |	Справочник.ГруппыДоступа КАК ГруппыДоступа
	               |ГДЕ
	               |	ГруппыДоступа.Профиль В
	               |			(ВЫБРАТЬ
	               |				ВТПрофилиПраваРасчетчика.ПрофильДоступа
	               |			ИЗ
	               |				ВТПрофилиПраваРасчетчика КАК ВТПрофилиПраваРасчетчика)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ГруппыДоступа.Ссылка
	               |ИЗ
	               |	Справочник.ГруппыДоступа КАК ГруппыДоступа
	               |ГДЕ
	               |	ГруппыДоступа.Профиль = ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыДоступаПользователи.Пользователь КАК ПользовательГруппа
	               |ПОМЕСТИТЬ ВТПользователиИГруппыКадровики
	               |ИЗ
	               |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	               |ГДЕ
	               |	ГруппыДоступаПользователи.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТГруппыДоступаКадровика.ГруппаДоступа
	               |			ИЗ
	               |				ВТГруппыДоступаКадровика КАК ВТГруппыДоступаКадровика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыДоступаПользователи.Пользователь КАК ПользовательГруппа
	               |ПОМЕСТИТЬ ВТПользователиИГруппыРасчетчики
	               |ИЗ
	               |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	               |ГДЕ
	               |	ГруппыДоступаПользователи.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТГруппыДоступаРасчетчика.ГруппаДоступа
	               |			ИЗ
	               |				ВТГруппыДоступаРасчетчика КАК ВТГруппыДоступаРасчетчика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПользователиИГруппыКадровики.ПользовательГруппа КАК Пользователь
	               |ПОМЕСТИТЬ ВТКадровики
	               |ИЗ
	               |	ВТПользователиИГруппыКадровики КАК ВТПользователиИГруппыКадровики
	               |ГДЕ
	               |	ВТПользователиИГруппыКадровики.ПользовательГруппа ССЫЛКА Справочник.Пользователи
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТПользователиИГруппыКадровики.ПользовательГруппа
	               |ИЗ
	               |	ВТПользователиИГруппыКадровики КАК ВТПользователиИГруппыКадровики
	               |ГДЕ
	               |	ВТПользователиИГруппыКадровики.ПользовательГруппа ССЫЛКА Справочник.ВнешниеПользователи
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ГруппыПользователейСостав.Пользователь
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |ГДЕ
	               |	ГруппыПользователейСостав.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТПользователиИГруппыКадровики.ПользовательГруппа
	               |			ИЗ
	               |				ВТПользователиИГруппыКадровики КАК ВТПользователиИГруппыКадровики)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ГруппыВнешнихПользователейСостав.ВнешнийПользователь
	               |ИЗ
	               |	Справочник.ГруппыВнешнихПользователей.Состав КАК ГруппыВнешнихПользователейСостав
	               |ГДЕ
	               |	ГруппыВнешнихПользователейСостав.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТПользователиИГруппыКадровики.ПользовательГруппа
	               |			ИЗ
	               |				ВТПользователиИГруппыКадровики КАК ВТПользователиИГруппыКадровики)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПользователиИГруппыРасчетчики.ПользовательГруппа КАК Пользователь
	               |ПОМЕСТИТЬ ВТРасчетчики
	               |ИЗ
	               |	ВТПользователиИГруппыРасчетчики КАК ВТПользователиИГруппыРасчетчики
	               |ГДЕ
	               |	ВТПользователиИГруппыРасчетчики.ПользовательГруппа ССЫЛКА Справочник.Пользователи
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТПользователиИГруппыРасчетчики.ПользовательГруппа
	               |ИЗ
	               |	ВТПользователиИГруппыРасчетчики КАК ВТПользователиИГруппыРасчетчики
	               |ГДЕ
	               |	ВТПользователиИГруппыРасчетчики.ПользовательГруппа ССЫЛКА Справочник.ВнешниеПользователи
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ГруппыПользователейСостав.Пользователь
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |ГДЕ
	               |	ГруппыПользователейСостав.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТПользователиИГруппыРасчетчики.ПользовательГруппа
	               |			ИЗ
	               |				ВТПользователиИГруппыРасчетчики КАК ВТПользователиИГруппыРасчетчики)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ГруппыВнешнихПользователейСостав.ВнешнийПользователь
	               |ИЗ
	               |	Справочник.ГруппыВнешнихПользователей.Состав КАК ГруппыВнешнихПользователейСостав
	               |ГДЕ
	               |	ГруппыВнешнихПользователейСостав.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТПользователиИГруппыРасчетчики.ПользовательГруппа
	               |			ИЗ
	               |				ВТПользователиИГруппыРасчетчики КАК ВТПользователиИГруппыРасчетчики)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТКадровики.Пользователь
	               |ИЗ
	               |	ВТКадровики КАК ВТКадровики
	               |ГДЕ
	               |	НЕ ВТКадровики.Пользователь В
	               |				(ВЫБРАТЬ
	               |					ВТРасчетчики.Пользователь
	               |				ИЗ
	               |					ВТРасчетчики КАК ВТРасчетчики)";
				   
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	Возврат Не РезультатЗапроса.Пустой();			   
	
КонецФункции	

Процедура ПроверитьУтверждениеДокумента(Объект, Отказ = Ложь) Экспорт 

	МногофункциональныеДокументы = ЗарплатаКадрыРасширенныйКлиентСервер.ТипыМногофункциональныхДокументов();
	ОписаниеДокумента = МногофункциональныеДокументы.Получить(ТипЗнч(Объект.Ссылка));
	ДокументУтвержден = Объект[ОписаниеДокумента.РеквизитСостояние];
	
	ПраваНаДокумент = ПраваНаМногофункциональныйДокумент(Объект);
	Если Не ПраваНаДокумент.ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных Тогда 
			ТекстСообщения = НСтр("ru='%1 - недостаточно прав для работы с документом.';uk='%1 - недостатньо прав для роботи з документом.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, , , Отказ);
			ВызватьИсключение(НСтр("ru='Операция не выполнена.';uk='Операція не виконана.'"));
	ИначеЕсли ПраваНаДокумент.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
		Если Не ДокументУтвержден Тогда 
			ТекстСообщения = ОписаниеДокумента.СообщениеДокументНеУтвержден;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ОписаниеДокумента.РеквизитСостояние, , Отказ);
		КонецЕсли;
	Иначе 
		Если ДокументУтвержден И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда 
			ТекстСообщения = НСтр("ru='%1 - недостаточно прав для работы с утвержденным документом.';uk='%1 - недостатньо прав для роботи з затвердженим документом.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, , , Отказ);
			ВызватьИсключение(НСтр("ru='Операция не выполнена.';uk='Операція не виконана.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолныеПраваНаМногофункциональныйДокумент(Ссылка) Экспорт 
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	Возврат Менеджер.ПолныеПраваНаДокумент();
	
КонецФункции

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписейМногофункциональногоДокумента(Объект)
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	Возврат Менеджер.ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект);
	
КонецФункции

Процедура ПриКопированииМногофункциональногоДокумента(Объект) Экспорт 

	ПраваНаДокумент = ПраваНаМногофункциональныйДокумент(Объект);
	
	Если Не ПраваНаДокумент.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда 
		
		// При копировании документа кадровиком создаем не утвержденный документ.
		МногофункциональныеДокументы = ЗарплатаКадрыРасширенныйКлиентСервер.ТипыМногофункциональныхДокументов();
		ОписаниеДокумента = МногофункциональныеДокументы.Получить(ТипЗнч(Объект.Ссылка));
		Объект[ОписаниеДокумента.РеквизитСостояние] = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюМногофункциональногоДокумента(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт 
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 
		
		// Отменить проведение утвержденного документа может только расчетчик.
		ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
		ИспользуетсяМногофункциональность = ПолучитьФункциональнуюОпцию("ИспользоватьМногофункциональностьДокументовЗарплатаКадры");
		ПолныеПраваНаДокумент = ПолныеПраваНаМногофункциональныйДокумент(Объект.Ссылка);
		
		МногофункциональныеДокументы = ЗарплатаКадрыРасширенныйКлиентСервер.ТипыМногофункциональныхДокументов();
		ОписаниеДокумента = МногофункциональныеДокументы.Получить(ТипЗнч(Объект.Ссылка));
		ДокументУтвержден = Объект[ОписаниеДокумента.РеквизитСостояние];
		
		ДанныеДляПроверкиОграничений = ДанныеДляПроверкиОграниченийНаУровнеЗаписейМногофункциональногоДокумента(Объект);
		
		Если ЕстьОграниченияНаУровнеЗаписейПоВидуУчета("Изменение", "КадровыеДанные", ДанныеДляПроверкиОграничений, Отказ) Тогда 
		
			ТекстСообщения = НСтр("ru='%1 - недостаточно прав для работы с документом.';uk='%1 - недостатньо прав для роботи з документом.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			
			ВызватьИсключение(НСтр("ru='Операция не выполнена.';uk='Операція не виконана.'"));
			
		КонецЕсли;
		
		Если ДокументУтвержден И ИспользуетсяРасчетЗарплаты 
			И Не (ПолныеПраваНаДокумент И Не ЕстьОграниченияНаУровнеЗаписейПоВидуУчета("Изменение", ОписаниеДокумента.ВидУчета, ДанныеДляПроверкиОграничений, Отказ)) Тогда
			
			ТекстСообщения = НСтр("ru='%1 - недостаточно прав для работы с утвержденным документом.';uk='%1 - недостатньо прав для роботи з затвердженим документом.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Объект);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			
			ВызватьИсключение(НСтр("ru='Операция не выполнена.';uk='Операція не виконана.'"));
			
		КонецЕсли;
		
		// При отмене проведения автоматически отменяется утверждение.
		Если ДокументУтвержден И ПолныеПраваНаДокумент И ИспользуетсяМногофункциональность Тогда
			
			Объект[ОписаниеДокумента.РеквизитСостояние] = Ложь;
			Если ОписаниеДокумента.ВторойОтветственный <> Неопределено Тогда 
				Объект[ОписаниеДокумента.ВторойОтветственный] = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияМногофункциональногоДокумента(Объект, ДанныеЗаполнения = Неопределено, СтандартнаяОбработка = Ложь) Экспорт 
	
	МногофункциональныеДокументы = ЗарплатаКадрыРасширенныйКлиентСервер.ТипыМногофункциональныхДокументов();
	ОписаниеДокумента = МногофункциональныеДокументы.Получить(ТипЗнч(Объект.Ссылка));
	
	ПраваНаДокумент = ПраваНаМногофункциональныйДокумент(Объект);
	
	Объект[ОписаниеДокумента.РеквизитСостояние] = ПраваНаДокумент.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
	
КонецПроцедуры

// Функция предназначена для проверки доступности учета для текущего пользователя при использовании RLS.
// При вызове в уже открытой транзакции может привести к отмене этой транзакции.
// Параметры:
//		ВидПроверки - строка, допустимые значение: "Чтение", "Изменение".
//		ВидУчета - строка, допустимые значения: "НачисленнаяЗарплата", "ПлановыеНачисления", "РабочееВремя",
//		           "КадровыеДанные".
//		ДанныеДляПроверки - структура, сформированная методом ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей.
//
Функция ЕстьОграниченияНаУровнеЗаписейПоВидуУчета(ВидПроверки, ВидУчета, ДанныеДляПроверки, Отказ = Ложь) Экспорт 

	Если Отказ Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// Для рабочего времени не проверяем ограничения на уровне записей.
	Если ВидУчета = "РабочееВремя" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// Если RLS не используется - возвращаем Ложь.
	Если Не УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки() И ПривилегированныйРежим() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Проверка доступа на уровне записей производится в привилегированном режиме';uk='Перевірка доступу на рівні записів проводиться в привілейованому режимі'"));
	КонецЕсли; 
			
	// Если для текущего пользователя нет ограничений на уровне записей - возвращаем Ложь.
	Если ВидУчета = "НачисленнаяЗарплата" Тогда 
		ПараметрыДоступа = ПараметрыДоступа(ВидПроверки, Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам, "Организация,ФизическоеЛицо,Подразделение");
	ИначеЕсли ВидУчета = "ПлановыеНачисления" Тогда
		ПараметрыДоступа = ПараметрыДоступа(ВидПроверки, Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников, "Организация,ФизическоеЛицо");
	ИначеЕсли ВидУчета = "КадровыеДанные" Тогда
		ПараметрыДоступа = ПараметрыДоступа(ВидПроверки, Метаданные.РегистрыСведений.ТекущиеКадровыеДанныеСотрудников, "ТекущаяОрганизация,ФизическоеЛицо");
	КонецЕсли;
	
	Если Не ПараметрыДоступа.ОграничениеУсловием Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если у пользователя нет доступа к данному виду учета - возвращаем Истина.
	Если Не ПараметрыДоступа.Доступность Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеДляПроверки) = Тип("Массив") Тогда
		СписокДанныхДляПроверки = ДанныеДляПроверки;
	Иначе
		СписокДанныхДляПроверки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДляПроверки);
	КонецЕсли; 
	
	ЕстьОграничения = Ложь;
	Для каждого ДанноеДляПроверки Из СписокДанныхДляПроверки Цикл
		
		Если ЕстьОграничения Тогда
			Прервать;
		КонецЕсли; 
		
		Организация = ДанноеДляПроверки.Организация;
		МассивФизическихЛиц = ДанноеДляПроверки.МассивФизическихЛиц;
		Подразделение = ДанноеДляПроверки.Подразделение;
		
		// Проверим заполнение полей, если не все требуемые значения заполнены - возвращаем Ложь.
		Если Не ЗначениеЗаполнено(Организация) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если МассивФизическихЛиц = Неопределено Тогда 
			МассивФизическихЛиц = Новый Массив;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(МассивФизическихЛиц, Справочники.ФизическиеЛица.ПустаяСсылка());
		Если МассивФизическихЛиц.Количество() = 0 И ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписейФизическиеЛица") Тогда 
			Продолжить;
		КонецЕсли;
		
		// Открываем транзакцию, если нет активной.
		ЕстьАктивнаяТранзакция = ТранзакцияАктивна();
		
		Если Не ЕстьАктивнаяТранзакция Тогда 
			НачатьТранзакцию();
		КонецЕсли;
		
		// Создаем набор записей
		Период = ТекущаяДатаСеанса();
		
		Если ВидУчета = "НачисленнаяЗарплата" Тогда 
			
			Регистратор = Документы.НачислениеЗарплаты.ПолучитьСсылку();
			Сотрудник = Справочники.Сотрудники.ПолучитьСсылку();
			
			НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, Регистратор, , Истина);
			НаборЗаписей = НаборыЗаписей["НачисленияУдержанияПоСотрудникам"];
			
			Если МассивФизическихЛиц.Количество() = 0 Тогда 
				МассивФизическихЛиц.Добавить(Неопределено);
			КонецЕсли;
			
			Для Каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл 
				
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Регистратор = Регистратор;
				НоваяСтрока.Период = Период;
				НоваяСтрока.Организация = Организация;
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
				НоваяСтрока.Подразделение = Подразделение;
				
			КонецЦикла;
			
		ИначеЕсли ВидУчета = "ПлановыеНачисления" Тогда 	
			
			Регистратор = Документы.ПриемНаРаботу.ПолучитьСсылку();
			Показатель = Справочники.ПоказателиРасчетаЗарплаты.ПолучитьСсылку();
			
			НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.ПриемНаРаботу, Регистратор, , Истина);
			НаборЗаписей = НаборыЗаписей["ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников"];
			
			Если МассивФизическихЛиц.Количество() = 0 Тогда 
				МассивФизическихЛиц.Добавить(Справочники.ФизическиеЛица.ПолучитьСсылку());
			КонецЕсли;
			
			Для Каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл 
			
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.Регистратор = Регистратор;
				НоваяСтрока.Период = Период;
				НоваяСтрока.Организация = Организация;
				НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
				НоваяСтрока.Показатель = Показатель;
				
			КонецЦикла;
			
		ИначеЕсли ВидУчета = "КадровыеДанные" Тогда
			
			Сотрудник = Справочники.Сотрудники.ПолучитьСсылку();
			ГоловнаяОрганизация = Справочники.Организации.ПолучитьСсылку();
			
			НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
			НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(ГоловнаяОрганизация);
			НаборЗаписей.Отбор.ТекущаяОрганизация.Установить(Организация);
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоВременныйНаборЗаписей");
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			НаборЗаписей.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			
			Если МассивФизическихЛиц.Количество() = 0 Тогда 
				МассивФизическихЛиц.Добавить(Справочники.ФизическиеЛица.ПолучитьСсылку());
			КонецЕсли;
			
			Для Каждого ФизическоеЛицо Из МассивФизическихЛиц Цикл 
			
				НоваяСтрока = НаборЗаписей.Добавить();
				НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
				НоваяСтрока.ТекущаяОрганизация = Организация;
				
			КонецЦикла;
			
		КонецЕсли;
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		
		// Если проверяем право на изменение - пробуем записать набор.
		Если ВидПроверки = "Изменение" Тогда 
			
			Попытка
				НаборЗаписей.Записать();
			    ЕстьОграничения = Ложь;
			Исключение 
				ЕстьОграничения = Истина;
				Отказ = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
		// Если проверяем чтение - записываем набор в привилегированном режиме и пробуем прочитать.
		Если ВидПроверки = "Чтение" Тогда 
			
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписей.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Попытка
				НаборЗаписей.Прочитать();
			    ЕстьОграничения = Ложь;
			Исключение 
				ЕстьОграничения = Истина;
				Отказ = Истина;
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЕстьАктивнаяТранзакция И Не Отказ Тогда
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		ИначеЕсли Не ЕстьАктивнаяТранзакция Тогда   
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОграничения;
		
КонецФункции

Функция ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей() Экспорт 
	
	Возврат Новый Структура("Организация, МассивФизическихЛиц, Подразделение");
	
КонецФункции

// Проверяет права текущего пользователя на документ. Возвращает структуру со свойствами:
// ПолныеПраваПоРолям - булево, полный доступ ко всем реквизитам документа (без учета RLS).
// ОграниченияНаУровнеЗаписей - структура со свойствами:
// 			ЧтениеБезОграничений - булево, отсутствие ограничений на чтение на уровне записей.
// 			ИзменениеБезОграничений - булево, отсутствие ограничений на изменение на уровне записей.
// Если ПолныеПраваПоРолям - Ложь, то ЧтениеБезОграничений и ИзменениеБезОграничений всегда тоже Ложь.
//
Функция ПраваНаМногофункциональныйДокумент(Объект) Экспорт 
	
	МногофункциональныеДокументы = ЗарплатаКадрыРасширенныйКлиентСервер.ТипыМногофункциональныхДокументов();
	ОписаниеДокумента = МногофункциональныеДокументы.Получить(ТипЗнч(Объект.Ссылка));
	
	ДанныеДляПроверкиОграничений = ДанныеДляПроверкиОграниченийНаУровнеЗаписейМногофункциональногоДокумента(Объект);
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	ПолныеПраваНаДокумент = ИспользуетсяРасчетЗарплаты И ПолныеПраваНаМногофункциональныйДокумент(Объект.Ссылка);
	
	ЧтениеБезОграничений = Ложь;
	ИзменениеБезОграничений = Ложь;
	
	Если ПолныеПраваНаДокумент Тогда 
		ИзменениеБезОграничений = Не ЕстьОграниченияНаУровнеЗаписейПоВидуУчета("Изменение", ОписаниеДокумента.ВидУчета, ДанныеДляПроверкиОграничений);
		ЧтениеБезОграничений = ?(ИзменениеБезОграничений, Истина, Не ЕстьОграниченияНаУровнеЗаписейПоВидуУчета("Чтение", ОписаниеДокумента.ВидУчета, ДанныеДляПроверкиОграничений));
	КонецЕсли;	
		
	ИзменениеКадровыхДанных = ?(ИзменениеБезОграничений, Истина, Не ЕстьОграниченияНаУровнеЗаписейПоВидуУчета("Изменение", "КадровыеДанные", ДанныеДляПроверкиОграничений));
	
	ОграниченияНаУровнеЗаписей = Новый Структура("ЧтениеБезОграничений, ИзменениеБезОграничений, ИзменениеКадровыхДанных", ЧтениеБезОграничений, ИзменениеБезОграничений, ИзменениеКадровыхДанных);
	ПраваНаДокумент = Новый Структура("ПолныеПраваПоРолям, ОграниченияНаУровнеЗаписей", ПолныеПраваНаДокумент, ОграниченияНаУровнеЗаписей);
	
	Возврат ПраваНаДокумент;									
										
КонецФункции

Процедура УстановитьОтображениеПолейМногофункциональныхДокументов(Форма, ИменаЭлементов, ИмяГруппыСтраницы = Неопределено) Экспорт 
	
	Элементы = Форма.Элементы;
	
	ИзменениеБезОграничений = Форма.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
	ЧтениеБезОграничений = Форма.ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений;
	ИзменениеКадровыхДанных = Форма.ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных;
	
	МногофункциональныеДокументы = ЗарплатаКадрыРасширенныйКлиентСервер.ТипыМногофункциональныхДокументов();
	ОписаниеДокумента = МногофункциональныеДокументы.Получить(ТипЗнч(Форма.Объект.Ссылка));
	
	Если Не Форма.РегистрацияНачисленийДоступна Тогда 
		
		Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
			ЭлементФормы = Элементы.Найти(ИмяЭлемента);
			Если ЭлементФормы = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
			Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Или ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда 
				УстановитьОтображениеГруппыФормы(Элементы, ИмяЭлемента, "Видимость", Ложь);
			Иначе 
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", Ложь);
			КонецЕсли;
		КонецЦикла;

		Если ОписаниеДокумента.ВторойОтветственный = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОписаниеДокумента.РеквизитСостояние, "Доступность", Ложь);
		КонецЕсли;
		
		Если ИмяГруппыСтраницы <> Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяГруппыСтраницы, "ОтображениеСтраниц", ОтображениеСтраницФормы.Нет);
		КонецЕсли;
		
	Иначе 
		
		Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл 
			ЭлементФормы = Элементы.Найти(ИмяЭлемента);
			Если ЭлементФормы = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
			Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда 
				УстановитьОтображениеГруппыФормы(Элементы, ИмяЭлемента, "Видимость", ЧтениеБезОграничений);
				УстановитьОтображениеГруппыФормы(Элементы, ИмяЭлемента, "ТолькоПросмотр", Не ИзменениеБезОграничений);
			Иначе 	
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", ЧтениеБезОграничений);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "ТолькоПросмотр", Не ИзменениеБезОграничений);
			КонецЕсли;	
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументУтвержденСтраницы", "Видимость", ЧтениеБезОграничений);
		
		Если ОписаниеДокумента.ВторойОтветственный = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОписаниеДокумента.РеквизитСостояние, "Доступность", ИзменениеБезОграничений);
		КонецЕсли;
		
		Если ОписаниеДокумента.ВидУчета = "НачисленнаяЗарплата" Тогда
			УстановитьОтображениеГруппыФормы(Элементы, "ВыплатаГруппа", "Видимость", ЧтениеБезОграничений);
		КонецЕсли;
		
		Если ИмяГруппыСтраницы <> Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяГруппыСтраницы, "ОтображениеСтраниц", 
								?(ЧтениеБезОграничений, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет));
		КонецЕсли;
							
	КонецЕсли;
	
	Если Не ИзменениеКадровыхДанных Тогда 
		Форма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(Форма, МестоРазмещенияКомандПоУмолчанию = Неопределено) Экспорт 
	
	ЧтениеБезОграничений = Форма.ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений;
	
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	КомандыПечати = УправлениеПечатью.КомандыПечатиФормы(Форма);
	
	ТаблицаКоманд = КомандыПечати.Скопировать(,"МестоРазмещения");
	ТаблицаКоманд.Свернуть("МестоРазмещения");
	МестаРазмещения = ТаблицаКоманд.ВыгрузитьКолонку("МестоРазмещения");
	
	Для Каждого МестоРазмещения Из МестаРазмещения Цикл
		
		НайденныеКоманды = КомандыПечати.НайтиСтроки(Новый Структура("МестоРазмещения,СкрытаФункциональнымиОпциями", МестоРазмещения, Ложь));
		
		МестоРазмещенияКоманд = Форма.Элементы.Найти(МестоРазмещения);
		Если МестоРазмещенияКоманд = Неопределено Тогда
			МестоРазмещенияКоманд = МестоРазмещенияКомандПоУмолчанию;
		КонецЕсли;
		
		Если НайденныеКоманды.Количество() > 0 Тогда
			
			Если МестоРазмещенияКоманд = Неопределено Тогда
				МестоРазмещенияКоманд = Форма.КоманднаяПанель;
			КонецЕсли;
			
			КоличествоВидимыхКоманд = 0;
			МестоРазмещенияКомандИмя = МестоРазмещенияКоманд.Имя;
			
			ОднаКомандаПечати = КомандыПечати.Количество() = 1;
			Если Не ОднаКомандаПечати Тогда
				МестоРазмещенияКомандИмя = МестоРазмещенияКомандИмя + "ПодменюПечать";
			КонецЕсли;
			
			Для Каждого ОписаниеКомандыПечати Из НайденныеКоманды Цикл
				
				Видимость = Истина;
				
				Если ОписаниеКомандыПечати.ДополнительныеПараметры.Свойство("ТребуетсяЧтениеБезОграничений") Тогда
					
					Видимость = Не ИспользуетсяРасчетЗарплаты Или ЧтениеБезОграничений;
					
					НомерКоманды = ОписаниеКомандыПечати.Владелец().Индекс(ОписаниеКомандыПечати);
					ИмяКоманды = МестоРазмещенияКомандИмя + "КомандаПечати" + НомерКоманды;
					ИмяЭлемента = МестоРазмещенияКомандИмя + ИмяКоманды;
					
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Видимость", Видимость);
					
				КонецЕсли;
				
				Если Видимость Тогда 
					КоличествоВидимыхКоманд = КоличествоВидимыхКоманд + 1;
				КонецЕсли;
				
			КонецЦикла;

			Если Не ОднаКомандаПечати Тогда 
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, МестоРазмещенияКомандИмя, "Видимость", КоличествоВидимыхКоманд <> 0);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеСпискаМногофункциональныхДокументов(Форма, ИмяТаблицы = "Список", ИмяРеквизита = "ТребуетОбработки") Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийШрифт = Форма.Элементы[ИмяТаблицы].Шрифт;
	ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);	
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяРеквизита);
	ЭлементОтбора.ПравоеЗначение = Истина;
	
КонецПроцедуры

Процедура УстановитьВторогоОтветственногоВМногофункциональныхДокументах(Форма, ПолныеПраваНаДокумент) Экспорт 
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	МногофункциональныеДокументы = ЗарплатаКадрыРасширенныйКлиентСервер.ТипыМногофункциональныхДокументов();
	ОписаниеДокумента = МногофункциональныеДокументы.Получить(ТипЗнч(Форма.Объект.Ссылка));
	
	Если ПолныеПраваНаДокумент Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеДокумента.РеквизитСостояние, "Доступность", Истина);
		Если Форма.Объект[ОписаниеДокумента.РеквизитСостояние] Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеДокумента.ВторойОтветственный, "Доступность", Истина);
			Если Не ЗначениеЗаполнено(Форма.Объект[ОписаниеДокумента.ВторойОтветственный]) Тогда 
				Форма.Объект[ОписаниеДокумента.ВторойОтветственный] = ПользователиКлиентСервер.ТекущийПользователь();
			КонецЕсли;	
		Иначе 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеДокумента.ВторойОтветственный, "Доступность", Ложь);
			Если ЗначениеЗаполнено(Форма.Объект[ОписаниеДокумента.ВторойОтветственный]) Тогда 
				Форма.Объект[ОписаниеДокумента.ВторойОтветственный] = Неопределено;
			КонецЕсли;	
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеДокумента.РеквизитСостояние, "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеДокумента.ВторойОтветственный, "Доступность", Ложь);
	КонецЕсли;
	
	УстановитьПредупреждающуюНадписьВМногофункциональныхДокументах(Форма, ОписаниеДокумента.РеквизитСостояние);
	
КонецПроцедуры	

Процедура УстановитьПредупреждающуюНадписьВМногофункциональныхДокументах(Форма, ОбработанВторымОтветственнымИмяРеквизита) Экспорт 
	
	Флажок = Форма.Элементы.Найти(ОбработанВторымОтветственнымИмяРеквизита);
	Если Флажок = НеОпределено Тогда 
		Возврат;
	КонецЕсли;
	Группа = Форма.Элементы[ОбработанВторымОтветственнымИмяРеквизита].Родитель;
	Если ТипЗнч(Группа) = Тип("ГруппаФормы") Тогда
		Если Форма.Объект[ОбработанВторымОтветственнымИмяРеквизита] Тогда 
			Группа.ЦветТекстаЗаголовка = Новый Цвет;
			Группа.Заголовок = НСтр("ru='Расчетчик';uk='Розраховувач'");
		Иначе 
			Группа.ЦветТекстаЗаголовка = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветОсобогоТекста");
			Группа.Заголовок = НСтр("ru='Расчет не утвержден';uk='Розрахунок не затверджено'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетТарифныхСтавок

Процедура СформироватьСписокВыбораПорядкаПересчета(Элементы, ПолныеПраваНаДокумент = Истина, ИмяЭлемента = "ПорядокРасчетаСтоимостиЕдиницыВремени") Экспорт 
	
	Если Не ПолныеПраваНаДокумент Тогда 
		Возврат;
	КонецЕсли;
	
	ЭлементФормы = Элементы[ИмяЭлемента];
	ЭлементФормы.СписокВыбора.Очистить();
	
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	ПорядокПересчетаПоУмолчанию = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='По умолчанию (%1)';uk='По умовчанню (%1)'"),
															НРег(НастройкиРасчетаЗарплаты.ПорядокРасчетаСтоимостиЕдиницыВремени));
	
	ЭлементФормы.СписокВыбора.Добавить(Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению, НСтр("ru='По среднемесячному количеству часов (дней)';uk='По середньомісячному кількості годин (днів)'"));
	ЭлементФормы.СписокВыбора.Добавить(Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника, НСтр("ru='По норме времени графика сотрудника';uk='За нормою часу графіка співробітника'"));
	ЭлементФормы.СписокВыбора.Добавить(Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря, НСтр("ru='По норме времени производственного календаря';uk='За нормою часу виробничого календаря'"));
	ЭлементФормы.СписокВыбора.Добавить(Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПустаяСсылка(), ПорядокПересчетаПоУмолчанию);

КонецПроцедуры

Процедура УстановитьОтображениеПолейПересчетаТарифнойСтавки(Форма, ОписаниеТаблицыНачислений, ПолныеПраваНаДокумент = Истина, ОписаниеТаблицыПересчетТарифныхСтавок = Неопределено) Экспорт 

	Если Не ПолныеПраваНаДокумент Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТарифнаяСтавкаГруппа", "Видимость", Ложь);
		Возврат;
	КонецЕсли;
	
	НесколькоСотрудников = Ложь;
	Если ОписаниеТаблицыПересчетТарифныхСтавок <> Неопределено Тогда 
		ПересчетТарифныхСтавок = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);
	    НесколькоСотрудников = ПересчетТарифныхСтавок.Количество() > 1;
	КонецЕсли;
	
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыНачислений.ПутьКДанным);
	
	СотрудникПустаяСсылка = Справочники.Сотрудники.ПустаяСсылка();
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Для Каждого СтрокаНачисления Из ДанныеНачислений Цикл
		
		Если СтрокаНачисления.Свойство("Действие")
			И СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗарплатаКадрыРасширенныйКлиентСервер.СтрокаНачисленияСодержитВкладВФОТ(СтрокаНачисления, ОписаниеТаблицыНачислений) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.Сотрудник = ?(НесколькоСотрудников, СтрокаНачисления.РабочееМесто, СотрудникПустаяСсылка);
		НоваяСтрока.Начисление = СтрокаНачисления.Начисление;
		
	КонецЦикла;
	
	ПараметрыОтображенияПолейТарифнойСтавки = ПараметрыОтображенияПолейПересчетаТарифнойСтавки(ИсходныеДанные);
	
	НазначенаМесячнаяДневнаяТарифнаяСтавка = ПараметрыОтображенияПолейТарифнойСтавки.НазначенаМесячнаяДневнаяТарифнаяСтавка;
	НесколькоТарифныхСтавок = ПараметрыОтображенияПолейТарифнойСтавки.НесколькоТарифныхСтавок;
	НетТарифныхСтавок = ПараметрыОтображенияПолейТарифнойСтавки.НетТарифныхСтавок;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТарифнаяСтавкаГруппа", "Видимость", НазначенаМесячнаяДневнаяТарифнаяСтавка Или НесколькоТарифныхСтавок Или НетТарифныхСтавок);
	
	Если НесколькоСотрудников Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаПоказателя, "Видимость", НазначенаМесячнаяДневнаяТарифнаяСтавка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаСовокупнаяТарифнаяСтавка, "Видимость", НесколькоТарифныхСтавок Или НетТарифныхСтавок);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаВидТарифнойСтавки, "Видимость", НетТарифныхСтавок);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаКомментарий, "Видимость", НесколькоТарифныхСтавок);
	Иначе 	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПорядокПересчетаТарифнойСтавкиГруппа", "Видимость", НазначенаМесячнаяДневнаяТарифнаяСтавка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СовокупнаяТарифнаяСтавкаГруппа", "Видимость", НесколькоТарифныхСтавок Или НетТарифныхСтавок);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВидТарифнойСтавки", "Видимость", НетТарифныхСтавок);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОтображенияПолейПересчетаТарифнойСтавки(ИсходныеДанные) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходныеДанные.Сотрудник,
	               |	ИсходныеДанные.Начисление
	               |ПОМЕСТИТЬ ВТДействующиеНачисленияСотрудников
	               |ИЗ
	               |	&ИсходныеДанные КАК ИсходныеДанные
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДействующиеНачисления.Сотрудник КАК Сотрудник,
	               |	НачисленияПоказатели.Ссылка КАК Начисление,
	               |	НачисленияПоказатели.Показатель КАК Показатель,
	               |	НачисленияПоказатели.Показатель.ВидТарифнойСтавки КАК ВидТарифнойСтавки
	               |ПОМЕСТИТЬ ВТСотрудникиНачисленияПоказатели
	               |ИЗ
	               |	ВТДействующиеНачисленияСотрудников КАК ДействующиеНачисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиСовокупнойТарифнойСтавкиСотрудников КАК ПоказателиСовокупнойТарифнойСтавкиСотрудников
	               |			ПО НачисленияПоказатели.Показатель = ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель
	               |		ПО ДействующиеНачисления.Начисление = НачисленияПоказатели.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДействующиеНачисления.Сотрудник,
	               |	НачисленияПоказатели.Ссылка,
	               |	НачисленияПоказатели.Показатель,
	               |	НачисленияПоказатели.Показатель.ВидТарифнойСтавки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиНачисленияПоказатели.Сотрудник КАК Сотрудник
	               |ИЗ
	               |	ВТСотрудникиНачисленияПоказатели КАК СотрудникиНачисленияПоказатели
	               |ГДЕ
	               |	СотрудникиНачисленияПоказатели.ВидТарифнойСтавки В (ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СотрудникиНачисленияПоказатели.Сотрудник КАК Сотрудник,
	               |	СотрудникиНачисленияПоказатели.Начисление КАК Начисление
	               |ПОМЕСТИТЬ ВТНачисленияСовокупнойСтавкиСотрудников
	               |ИЗ
	               |	ВТСотрудникиНачисленияПоказатели КАК СотрудникиНачисленияПоказатели
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДействующиеНачисления.Сотрудник
	               |ИЗ
	               |	ВТДействующиеНачисленияСотрудников КАК ДействующиеНачисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСовокупнойСтавкиСотрудников КАК НачисленияСовокупнойСтавки
	               |		ПО ДействующиеНачисления.Сотрудник = НачисленияСовокупнойСтавки.Сотрудник
	               |			И ДействующиеНачисления.Начисление = НачисленияСовокупнойСтавки.Начисление
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДействующиеНачисления.Сотрудник
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(ДействующиеНачисления.Начисление) > 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиНачисленияПоказатели.Сотрудник,
	               |	СотрудникиНачисленияПоказатели.Начисление
	               |ИЗ
	               |	ВТСотрудникиНачисленияПоказатели КАК СотрудникиНачисленияПоказатели";
				   
	УстановитьПривилегированныйРежим(Истина);			   
	РезультатыЗапроса = Запрос.ВыполнитьПакет();			   
	УстановитьПривилегированныйРежим(Ложь);			   

	НазначенаМесячнаяДневнаяТарифнаяСтавка = Не РезультатыЗапроса[2].Пустой();
	НесколькоТарифныхСтавок = Не РезультатыЗапроса[4].Пустой();
	НетТарифныхСтавок = ИсходныеДанные.Количество() > 0 И РезультатыЗапроса[5].Пустой();
	
	Сотрудники = Новый Соответствие;
	Выборка = РезультатыЗапроса[4].Выбрать();
	Пока Выборка.Следующий() Цикл 
		Сотрудники.Вставить(Выборка.Сотрудник, Истина);
	КонецЦикла;
	
	ПараметрыОтображенияПолейТарифнойСтавки = Новый Структура;
	ПараметрыОтображенияПолейТарифнойСтавки.Вставить("НазначенаМесячнаяДневнаяТарифнаяСтавка", НазначенаМесячнаяДневнаяТарифнаяСтавка);
	ПараметрыОтображенияПолейТарифнойСтавки.Вставить("НесколькоТарифныхСтавок", НесколькоТарифныхСтавок);
	ПараметрыОтображенияПолейТарифнойСтавки.Вставить("НетТарифныхСтавок", НетТарифныхСтавок);
	ПараметрыОтображенияПолейТарифнойСтавки.Вставить("Сотрудники", Сотрудники);
	
	Возврат ПараметрыОтображенияПолейТарифнойСтавки;
	
КонецФункции

Процедура УстановитьТекущееЗначениеПорядкаПересчетаТарифнойСтавки(Форма, Сотрудник, ДатаСобытия) Экспорт
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = СотрудникиДаты.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Период = ДатаСобытия;
	
	ЗначенияПорядкаПересчета = ТекущиеЗначенияПорядкаПересчетаТарифнойСтавкиСотрудников(СотрудникиДаты, Форма.Объект.Ссылка);
	
	Форма.Объект.ПорядокРасчетаСтоимостиЕдиницыВремени = ЗначенияПорядкаПересчета.Получить(Сотрудник);
				   
КонецПроцедуры

Функция ТекущиеЗначенияПорядкаПересчетаТарифнойСтавкиСотрудников(СотрудникиДаты, Регистратор = Неопределено) Экспорт 
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	Если Регистратор <> Неопределено Тогда 
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПорядокРасчетаСтоимостиЕдиницыВремени.Период КАК Период,
	               |	ПорядокРасчетаСтоимостиЕдиницыВремени.Сотрудник КАК Сотрудник,
	               |	ПорядокРасчетаСтоимостиЕдиницыВремени.ПорядокРасчета КАК ПорядокРасчета
	               |ИЗ
	               |	ВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудниковСрезПоследних КАК ПорядокРасчетаСтоимостиЕдиницыВремени";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначенияПорядкаПересчета = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл 
		ЗначенияПорядкаПересчета.Вставить(Выборка.Сотрудник, Выборка.ПорядокРасчета);
	КонецЦикла;
	
	Возврат ЗначенияПорядкаПересчета;
	
КонецФункции

Процедура УстановитьТекстПоясненияКПорядкуПересчетаТарифныхСтавок(Форма, ИмяРеквизита = "ПорядокПересчетаТарифнойСтавкиГруппа") Экспорт 
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, ИмяРеквизита, 
									ТекстПоясненияКПорядкуПересчетаТарифныхСтавок());
	
КонецПроцедуры

Функция ТекстПоясненияКПорядкуПересчетаТарифныхСтавок() Экспорт 
	
	Возврат НСтр("ru='Правила, по которым будет пересчитана тарифная ставка при оплате сверхурочных или выходных';uk='Правила, за якими буде перерахована тарифна ставка при оплаті понаднормових або вихідних'");
	
КонецФункции

Процедура УстановитьКомментарийКПорядкуПересчетаВСтрокеТаблицы(ТекСтрока, ИмяРеквизитаКомментарий, ВидТарифнойСтавки);

	Если Не ЗначениеЗаполнено(ВидТарифнойСтавки) Тогда
		ТекСтрока[ИмяРеквизитаКомментарий] = "";
		Возврат;
	КонецЕсли;
	
	ТекСтрока[ИмяРеквизитаКомментарий] = КомментарийКРазмеруСовокупнойТарифнойСтавки(ВидТарифнойСтавки);
	
КонецПроцедуры

Процедура УстановитьТекущееЗначениеСовокупнойТарифнойСтавки(Форма, Сотрудник, ДатаСобытия) Экспорт
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = СотрудникиДаты.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Период = ДатаСобытия;
	
	ЗначенияСовокупныхТарифныхСтавок = ТекущиеЗначенияСовокупнойТарифнойСтавкиСотрудников(СотрудникиДаты, Форма.Объект.Ссылка);
	
	ДанныеСотрудника = ЗначенияСовокупныхТарифныхСтавок.Получить(Сотрудник);
	
	ВидТарифнойСтавки = ?(ДанныеСотрудника = Неопределено, Неопределено, ДанныеСотрудника.ВидТарифнойСтавки);
	СовокупнаяТарифнаяСтавка = ?(ДанныеСотрудника = Неопределено, Неопределено, ДанныеСотрудника.Значение);
	
	Форма.Объект.СовокупнаяТарифнаяСтавка = СовокупнаяТарифнаяСтавка;
	Форма.Объект.ВидТарифнойСтавки = ВидТарифнойСтавки;
	
	УстановитьКомментарийКРазмеруСовокупнойТарифнойСтавки(Форма, ВидТарифнойСтавки);	
	
КонецПроцедуры

Функция ТекущиеЗначенияСовокупнойТарифнойСтавкиСотрудников(СотрудникиДаты, Регистратор = Неопределено) Экспорт 
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);			   
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияСовокупныхТарифныхСтавокСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСовокупныхТарифныхСтавок.Период КАК Период,
	               |	ЗначенияСовокупныхТарифныхСтавок.Сотрудник КАК Сотрудник,
	               |	ЗначенияСовокупныхТарифныхСтавок.Значение КАК Значение,
	               |	ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки КАК ВидТарифнойСтавки
	               |ИЗ
	               |	ВТЗначенияСовокупныхТарифныхСтавокСотрудниковСрезПоследних КАК ЗначенияСовокупныхТарифныхСтавок";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначенияСовокупныхТарифныхСтавок = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл 
		ЗначенияСовокупныхТарифныхСтавок.Вставить(Выборка.Сотрудник, Новый Структура("Значение, ВидТарифнойСтавки", Выборка.Значение, Выборка.ВидТарифнойСтавки));
	КонецЦикла;
	
	Возврат ЗначенияСовокупныхТарифныхСтавок;
	
КонецФункции

Процедура УстановитьРазмерностьСовокупнойТарифнойСтавки(Форма, ИмяРеквизита = "СовокупнаяТарифнаяСтавкаРазмерность") Экспорт 

	Форма[ИмяРеквизита] = НСтр("ru='грн.';uk='грн.'");
	
КонецПроцедуры

Процедура УстановитьКомментарийКРазмеруСовокупнойТарифнойСтавки(Форма, ВидТарифнойСтавки, ИмяРеквизита = "СовокупнаяТарифнаяСтавкаГруппа") Экспорт 
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, ИмяРеквизита, 
									КомментарийКРазмеруСовокупнойТарифнойСтавки(ВидТарифнойСтавки));
	
КонецПроцедуры

Функция КомментарийКРазмеруСовокупнойТарифнойСтавки(ВидТарифнойСтавки) Экспорт 
	
	Комментарий = "";
	
	Если ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка Тогда 
		Комментарий = НСтр("ru='Введите месячную ставку, которая будет использоваться для расчета стоимости часа при работе сверхурочно и в выходные';uk='Введіть місячну ставку, яка буде використовуватися для розрахунку вартості години при роботі понаднормово і у вихідні'");
	ИначеЕсли ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
		Комментарий = НСтр("ru='Введите дневную ставку, которая будет использоваться для расчета стоимости часа при работе сверхурочно и в выходные';uk='Введіть денну ставку, яка буде використовуватися для розрахунку вартості години при роботі понаднормово і у вихідні'");
	ИначеЕсли ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
		Комментарий = НСтр("ru='Введите ставку, по которой будет оплачиваться сверхурочная работа и работа в выходные дни';uk='Введіть ставку, за якою буде оплачуватися надурочна робота та робота у вихідні дні'");
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

Процедура РассчитатьЗначенияСовокупныхТарифныхСтавок(Форма, ДатаСобытия, ОписаниеТаблицыНачислений, ОписаниеТаблицыПересчетТарифныхСтавок = Неопределено, Сотрудник = Неопределено, ГрафикРаботы = Неопределено, КоличествоСтавок = 0) Экспорт 

	НесколькоСотрудников = Ложь;
	ПересчетТарифныхСтавок = Неопределено;
	Если ОписаниеТаблицыПересчетТарифныхСтавок <> Неопределено Тогда 
		ПересчетТарифныхСтавок = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);
	    НесколькоСотрудников = ПересчетТарифныхСтавок.Количество() > 1;
	КонецЕсли;
	
	ПутьКДаннымНачислений = ОписаниеТаблицыНачислений.ПутьКДанным;
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымНачислений);
	
	ИсходныеДанные = ИсходныеДанныеРасчетаСовокупныхТарифныхСтавок();
	ТаблицаПоказателей = ПоказателиРасчетаСовокупныхТарифныхСтавок();
	
	Для Каждого СтрокаНачисления Из ДанныеНачислений Цикл
		
		Если СтрокаНачисления.Свойство("Действие")
			И СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗарплатаКадрыРасширенныйКлиентСервер.СтрокаНачисленияСодержитВкладВФОТ(СтрокаНачисления, ОписаниеТаблицыНачислений) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.ДатаСобытия = ДатаСобытия;
		НоваяСтрока.Сотрудник = ?(Сотрудник = Неопределено, СтрокаНачисления.РабочееМесто, Сотрудник);
		НоваяСтрока.Начисление = СтрокаНачисления.Начисление;
		НоваяСтрока.РазмерФОТ = СтрокаНачисления.Размер;
		НоваяСтрока.ГрафикРаботы = ГрафикРаботы;
		НоваяСтрока.КоличествоСтавок = КоличествоСтавок;
		Если СтрокаНачисления.Свойство("НомерСтроки") Тогда
			НоваяСтрока.НомерСтроки = СтрокаНачисления.НомерСтроки;
		Иначе
			НоваяСтрока.НомерСтроки = ДанныеНачислений.Индекс(СтрокаНачисления);
		КонецЕсли;
		
		Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений) Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаНачисления["Показатель" + НомерПоказателя])
				Или Не ЗначениеЗаполнено(СтрокаНачисления["Значение" + НомерПоказателя]) Тогда
				Прервать;
			КонецЕсли;
			
			НоваяСтрокаПоказателя = ТаблицаПоказателей.Добавить();
			НоваяСтрокаПоказателя.Период = ДатаСобытия;
			НоваяСтрокаПоказателя.Сотрудник = ?(Сотрудник = Неопределено, СтрокаНачисления.РабочееМесто, Сотрудник);
			НоваяСтрокаПоказателя.Показатель = СтрокаНачисления["Показатель" + НомерПоказателя];
			НоваяСтрокаПоказателя.Значение = СтрокаНачисления["Значение" + НомерПоказателя];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Выборка = ЗначенияСовокупныхТарифныхСтавок(ИсходныеДанные, ДатаСобытия, ТаблицаПоказателей).Выбрать();
		
	// Возможны три ситуации:
	// 1) Это документ на несколько сотрудников (напр. Отпуск по уходу за ребенком), введено несколько сотрудников.
	// 2) Это документ на несколько сотрудников (напр. Отпуск по уходу за ребенком), введен один сотрудник.
	// 3) Это документ на одного сотрудника (напр. Кадровый перевод).
	// В зависимости от варианта, заполним реквизиты.
	Если НесколькоСотрудников Тогда
		// 1) Заполняем таблицу пересчета тарифных ставок.
		Для Каждого ТекСтрока Из ПересчетТарифныхСтавок Цикл 
			СтруктураПоиска = Новый Структура("Сотрудник", ТекСтрока.РабочееМесто);
			Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда 
				ТекСтрока.СовокупнаяТарифнаяСтавка = Выборка.СовокупнаяТарифнаяСтавка;
				ТекСтрока.ВидТарифнойСтавки = Выборка.ВидТарифнойСтавки;
				УстановитьКомментарийКПорядкуПересчетаВСтрокеТаблицы(ТекСтрока, ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаКомментарий, Выборка.ВидТарифнойСтавки);
			Иначе 
				ТекСтрока.СовокупнаяТарифнаяСтавка = Неопределено;
				ТекСтрока.ВидТарифнойСтавки = Неопределено;
			КонецЕсли;
			Выборка.Сбросить();
		КонецЦикла;
	Иначе
		Если ПересчетТарифныхСтавок <> Неопределено Тогда 
			// 2) Заполняем первую и единственную строку таблицы пересчета тарифных ставок и реквизит формы.
			Если Выборка.Следующий() Тогда 
				Если ПересчетТарифныхСтавок.Количество() > 0 Тогда
					ПересчетТарифныхСтавок[0].СовокупнаяТарифнаяСтавка = Выборка.СовокупнаяТарифнаяСтавка;
					ПересчетТарифныхСтавок[0].ВидТарифнойСтавки = Выборка.ВидТарифнойСтавки;
				КонецЕсли;
				Форма.СовокупнаяТарифнаяСтавка = Выборка.СовокупнаяТарифнаяСтавка;
				УстановитьКомментарийКРазмеруСовокупнойТарифнойСтавки(Форма, Выборка.ВидТарифнойСтавки);
			Иначе 
				Если ПересчетТарифныхСтавок.Количество() > 0 Тогда
					ПересчетТарифныхСтавок[0].СовокупнаяТарифнаяСтавка = Неопределено;
					ПересчетТарифныхСтавок[0].ВидТарифнойСтавки = Неопределено;
				КонецЕсли;
				Форма.СовокупнаяТарифнаяСтавка = Неопределено;
			КонецЕсли;
		Иначе 
			Если СтрНайти(ВРег(ПутьКДаннымНачислений), ВРег("Объект.")) = 1 Тогда
				
				// 3) Заполняем реквизиты объекта.
				Если Выборка.Следующий() Тогда 
					Форма.Объект.СовокупнаяТарифнаяСтавка = Выборка.СовокупнаяТарифнаяСтавка;
					Форма.Объект.ВидТарифнойСтавки = Выборка.ВидТарифнойСтавки;
					УстановитьКомментарийКРазмеруСовокупнойТарифнойСтавки(Форма, Выборка.ВидТарифнойСтавки);
				Иначе 
					Форма.Объект.СовокупнаяТарифнаяСтавка = Неопределено;
					Форма.Объект.ВидТарифнойСтавки = Неопределено;
				КонецЕсли;
				
			Иначе
				
				// Или формы редактирования состава начислений.
				Если Выборка.Следующий() Тогда 
					Форма.СовокупнаяТарифнаяСтавка = Выборка.СовокупнаяТарифнаяСтавка;
					Форма.ВидТарифнойСтавки = Выборка.ВидТарифнойСтавки;
					УстановитьКомментарийКРазмеруСовокупнойТарифнойСтавки(Форма, Выборка.ВидТарифнойСтавки);
				Иначе 
					Форма.СовокупнаяТарифнаяСтавка = Неопределено;
					Форма.ВидТарифнойСтавки = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ИсходныеДанныеРасчетаСовокупныхТарифныхСтавок() Экспорт 

	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ИсходныеДанные.Колонки.Добавить("РазмерФОТ", Новый ОписаниеТипов("Число"));
	ИсходныеДанные.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	ИсходныеДанные.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	ИсходныеДанные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	Возврат ИсходныеДанные;
	
КонецФункции

Функция ПоказателиРасчетаСовокупныхТарифныхСтавок() Экспорт 

	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Функция ПоказателиДействующихНачисленийСотрудников(СписокСотрудников, ДатаСобытия, ИзвестныеПоказатели = Неопределено) Экспорт
	
	Если ИзвестныеПоказатели = Неопределено Тогда 
		ИзвестныеПоказатели = ПоказателиРасчетаСовокупныхТарифныхСтавок();
	КонецЕсли;
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл 
		НоваяСтрока = СотрудникиДаты.Добавить();
		НоваяСтрока.Период = ДатаСобытия;
		НоваяСтрока.Сотрудник = Сотрудник;
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты));
			
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты));
		
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ИзвестныеПоказатели", ИзвестныеПоказатели);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПлановыеНачисления.Период,
	               |	ПлановыеНачисления.Сотрудник,
	               |	ПлановыеНачисления.Начисление,
	               |	ПлановыеНачисления.ДокументОснование
	               |ПОМЕСТИТЬ ВТТаблицаСотрудниковПредварительно
	               |ИЗ
	               |	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
	               |ГДЕ
	               |	ПлановыеНачисления.Используется
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСотрудниковПредварительно.Период,
	               |	ТаблицаСотрудниковПредварительно.Сотрудник,
	               |	ТаблицаСотрудниковПредварительно.Начисление,
	               |	ТаблицаСотрудниковПредварительно.ДокументОснование,
	               |	НачисленияПоказатели.Показатель
	               |ПОМЕСТИТЬ ВТПоказателиНачислений
	               |ИЗ
	               |	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудниковПредварительно
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |		ПО ТаблицаСотрудниковПредварительно.Начисление = НачисленияПоказатели.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоказателиНачислений.Период,
	               |	ПоказателиНачислений.Сотрудник,
	               |	ПоказателиНачислений.Показатель,
	               |	ЗначенияПоказателейРасчетаЗарплаты.Значение
	               |ПОМЕСТИТЬ ВТПоказателиИнформационнойБазы
	               |ИЗ
	               |	ВТПоказателиНачислений КАК ПоказателиНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПоказателейРасчетаЗарплаты
	               |		ПО ПоказателиНачислений.Период = ЗначенияПоказателейРасчетаЗарплаты.Период
	               |			И ПоказателиНачислений.Сотрудник = ЗначенияПоказателейРасчетаЗарплаты.Сотрудник
	               |			И ПоказателиНачислений.Показатель = ЗначенияПоказателейРасчетаЗарплаты.Показатель
	               |			И ПоказателиНачислений.ДокументОснование = ЗначенияПоказателейРасчетаЗарплаты.ДокументОснование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИзвестныеПоказатели.Период,
	               |	ИзвестныеПоказатели.Сотрудник,
	               |	ИзвестныеПоказатели.Показатель,
	               |	ИзвестныеПоказатели.Значение
	               |ПОМЕСТИТЬ ВТИзвестныеПоказателиСотрудников
	               |ИЗ
	               |	&ИзвестныеПоказатели КАК ИзвестныеПоказатели
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИзвестныеПоказателиСотрудников.Период,
	               |	ИзвестныеПоказателиСотрудников.Сотрудник,
	               |	ИзвестныеПоказателиСотрудников.Показатель,
	               |	ИзвестныеПоказателиСотрудников.Значение
	               |ИЗ
	               |	ВТИзвестныеПоказателиСотрудников КАК ИзвестныеПоказателиСотрудников
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПоказателиИнформационнойБазы.Период,
	               |	ПоказателиИнформационнойБазы.Сотрудник,
	               |	ПоказателиИнформационнойБазы.Показатель,
	               |	ПоказателиИнформационнойБазы.Значение
	               |ИЗ
	               |	ВТПоказателиИнформационнойБазы КАК ПоказателиИнформационнойБазы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТИзвестныеПоказателиСотрудников КАК ИзвестныеПоказателиСотрудников
	               |		ПО ПоказателиИнформационнойБазы.Период = ИзвестныеПоказателиСотрудников.Период
	               |			И ПоказателиИнформационнойБазы.Сотрудник = ИзвестныеПоказателиСотрудников.Сотрудник
	               |			И ПоказателиИнформационнойБазы.Показатель = ИзвестныеПоказателиСотрудников.Показатель
	               |ГДЕ
	               |	ИзвестныеПоказателиСотрудников.Показатель ЕСТЬ NULL ";
				   
	ТаблицаПоказателей = ПоказателиРасчетаСовокупныхТарифныхСтавок();			   
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьЗначенияСвойств(ТаблицаПоказателей.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Функция ЗначенияСовокупныхТарифныхСтавок(ИсходныеДанные, ДатаСобытия, ТаблицаПоказателей = Неопределено) Экспорт  
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходныеДанные.ДатаСобытия КАК Период,
	               |	ИсходныеДанные.Сотрудник,
	               |	ИсходныеДанные.Начисление,
	               |	ИсходныеДанные.РазмерФОТ,
	               |	ИсходныеДанные.ГрафикРаботы,
	               |	ИсходныеДанные.КоличествоСтавок,
	               |	ИсходныеДанные.НомерСтроки
	               |ПОМЕСТИТЬ ВТТаблицаСотрудниковПредварительно
	               |ИЗ
	               |	&ИсходныеДанные КАК ИсходныеДанные";
				   
	Запрос.Выполнить();			   
	
	Если ТаблицаПоказателей = Неопределено Тогда 
		ТаблицаПоказателей = ПоказателиРасчетаСовокупныхТарифныхСтавок();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ТаблицаПоказателей);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаПоказателей.Период,
	               |	ТаблицаПоказателей.Сотрудник,
	               |	ТаблицаПоказателей.Показатель,
	               |	ТаблицаПоказателей.Значение
	               |ПОМЕСТИТЬ ВТПоказателиСотрудников
	               |ИЗ
	               |	&ТаблицаПоказателей КАК ТаблицаПоказателей";
				   
	Запрос.Выполнить();			   
	
	СоздатьВТЗначенияСовокупныхТарифныхСтавок(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСовокупныхТарифныхСтавок.Сотрудник,
	               |	ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки,
	               |	ЗначенияСовокупныхТарифныхСтавок.СовокупнаяТарифнаяСтавка
	               |ИЗ
	               |	ВТЗначенияСовокупныхТарифныхСтавок КАК ЗначенияСовокупныхТарифныхСтавок";
				   
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	Возврат РезультатЗапроса;

КонецФункции	

Процедура СоздатьВТЗначенияСовокупныхТарифныхСтавок(МенеджерВременныхТаблиц) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПоказательЗависящийОтСтажа", Перечисления.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа);
	Запрос.УстановитьПараметр("ПоказательДоляНеполногоРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСотрудниковПредварительно.Период,
	|	ТаблицаСотрудниковПредварительно.Сотрудник,
	|	НачисленияПоказатели.Показатель
	|ПОМЕСТИТЬ ВТЗапрашиваемыеПоказатели
	|ИЗ
	|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудниковПредварительно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ПО ТаблицаСотрудниковПредварительно.Начисление = НачисленияПоказатели.Ссылка
	|			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиСотрудников.Период,
	|	ПоказателиСотрудников.Сотрудник,
	|	ПоказателиСотрудников.Показатель,
	|	ПоказателиСотрудников.Значение
	|ПОМЕСТИТЬ ВТСтавкиСотрудников
	|ИЗ
	|	ВТПоказателиСотрудников КАК ПоказателиСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиСовокупнойТарифнойСтавкиСотрудников КАК ПоказателиСовокупнойСтавки
	|		ПО ПоказателиСотрудников.Показатель = ПоказателиСовокупнойСтавки.Показатель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗапрашиваемыеПоказатели КАК ЗапрашиваемыеПоказатели
	|		ПО ПоказателиСотрудников.Период = ЗапрашиваемыеПоказатели.Период
	|			И ПоказателиСотрудников.Сотрудник = ЗапрашиваемыеПоказатели.Сотрудник
	|			И ПоказателиСотрудников.Показатель = ЗапрашиваемыеПоказатели.Показатель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСотрудниковПредварительно.Период,
	|	ТаблицаСотрудниковПредварительно.Сотрудник,
	|	НачисленияПоказатели.Показатель,
	|	0
	|ИЗ
	|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудниковПредварительно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ПО ТаблицаСотрудниковПредварительно.Начисление = НачисленияПоказатели.Ссылка
	|			И (НачисленияПоказатели.Показатель.ТипПоказателя = &ПоказательЗависящийОтСтажа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтавкиСотрудников.Период,
	|	СтавкиСотрудников.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТСтавкиСотрудников КАК СтавкиСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	СтавкиСотрудников.Период,
	|	СтавкиСотрудников.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СтавкиСотрудников.Показатель) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтавкиСотрудников.Период КАК Период,
	|	СтавкиСотрудников.Сотрудник КАК Сотрудник,
	|	СтавкиСотрудников.Показатель.ВидТарифнойСтавки КАК ВидТарифнойСтавки,
	|	СтавкиСотрудников.Значение КАК СовокупнаяТарифнаяСтавка
	|ПОМЕСТИТЬ ВТЗначенияСовокупныхТарифныхСтавокПредварительно
	|ИЗ
	|	ВТСтавкиСотрудников КАК СтавкиСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
	|		ПО СтавкиСотрудников.Сотрудник = Сотрудники.Сотрудник
	|			И СтавкиСотрудников.Период = Сотрудники.Период
	|			И (СтавкиСотрудников.Показатель.ВидТарифнойСтавки <> ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСотрудниковПредварительно.Период,
	|	ТаблицаСотрудниковПредварительно.Сотрудник,
	|	ТаблицаСотрудниковПредварительно.Начисление,
	|	ТаблицаСотрудниковПредварительно.РазмерФОТ,
	|	ТаблицаСотрудниковПредварительно.ГрафикРаботы,
	|	ТаблицаСотрудниковПредварительно.КоличествоСтавок,
	|	ТаблицаСотрудниковПредварительно.НомерСтроки
	|ПОМЕСТИТЬ ВТТаблицаСотрудниковИсправленная
	|ИЗ
	|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудниковПредварительно
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияСовокупныхТарифныхСтавокПредварительно КАК ЗначенияСовокупныхТарифныхСтавокПредварительно
	|		ПО ТаблицаСотрудниковПредварительно.Период = ЗначенияСовокупныхТарифныхСтавокПредварительно.Период
	|			И ТаблицаСотрудниковПредварительно.Сотрудник = ЗначенияСовокупныхТарифныхСтавокПредварительно.Сотрудник
	|ГДЕ
	|	ЗначенияСовокупныхТарифныхСтавокПредварительно.Период ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаСотрудниковИсправленная.Сотрудник
	|ИЗ
	|	ВТТаблицаСотрудниковИсправленная КАК ТаблицаСотрудниковИсправленная";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда 
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСовокупныхТарифныхСтавокПредварительно.Период,
		|	ЗначенияСовокупныхТарифныхСтавокПредварительно.Сотрудник,
		|	ЗначенияСовокупныхТарифныхСтавокПредварительно.ВидТарифнойСтавки,
		|	ЗначенияСовокупныхТарифныхСтавокПредварительно.СовокупнаяТарифнаяСтавка
		|ПОМЕСТИТЬ ВТЗначенияСовокупныхТарифныхСтавок
		|ИЗ
		|	ВТЗначенияСовокупныхТарифныхСтавокПредварительно КАК ЗначенияСовокупныхТарифныхСтавокПредварительно";
		
		Запрос.Выполнить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТТаблицаСотрудниковИсправленная", "Сотрудник,Период");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "ГрафикРаботы,ДоляНеполногоРабочегоВремени,КоличествоСтавок", , Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСотрудниковИсправленная.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудниковИсправленная.Период КАК Период,
	|	МАКСИМУМ(ТаблицаСотрудниковИсправленная.Начисление) КАК ОсновноеНачисление
	|ПОМЕСТИТЬ ВТОсновныеНачисленияСотрудников
	|ИЗ
	|	ВТТаблицаСотрудниковИсправленная КАК ТаблицаСотрудниковИсправленная
	|ГДЕ
	|	ТаблицаСотрудниковИсправленная.Начисление.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы)
	|	И ТаблицаСотрудниковИсправленная.Начисление.ЗачетНормыВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСотрудниковИсправленная.Сотрудник,
	|	ТаблицаСотрудниковИсправленная.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОсновныеНачисленияСотрудников.Сотрудник КАК Сотрудник,
	|	ОсновныеНачисленияСотрудников.Период КАК Период
	|ПОМЕСТИТЬ ВТИспользуетсяПоказательДоляНеполногоРабочегоВремени
	|ИЗ
	|	ВТОсновныеНачисленияСотрудников КАК ОсновныеНачисленияСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ПО ОсновныеНачисленияСотрудников.ОсновноеНачисление = НачисленияПоказатели.Ссылка
	|			И (НачисленияПоказатели.Показатель = &ПоказательДоляНеполногоРабочегоВремени)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСотрудниковИсправленная.Период КАК Период,
	|	ТаблицаСотрудниковИсправленная.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудниковИсправленная.Начисление,
	|	ТаблицаСотрудниковИсправленная.РазмерФОТ,
	|	ВЫБОР
	|		КОГДА ТаблицаСотрудниковИсправленная.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.ГрафикРаботы, ТаблицаСотрудниковИсправленная.ГрафикРаботы)
	|		ИНАЧЕ ТаблицаСотрудниковИсправленная.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ТаблицаСотрудниковИсправленная.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|				И ТаблицаСотрудниковИсправленная.КоличествоСтавок = 0
	|			ТОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени, 1)
	|		КОГДА ТаблицаСотрудниковИсправленная.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаСотрудниковИсправленная.КоличествоСтавок <> 0
	|									ТОГДА ТаблицаСотрудниковИсправленная.КоличествоСтавок
	|								КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
	|									ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					КОГДА ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаСотрудниковИсправленная.КоличествоСтавок <> 0
	|									ТОГДА ТаблицаСотрудниковИсправленная.КоличествоСтавок
	|								КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
	|									ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					КОГДА ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели = 1
	|						ТОГДА ВЫБОР
	|								КОГДА ТаблицаСотрудниковИсправленная.КоличествоСтавок <> 0
	|									ТОГДА ТаблицаСотрудниковИсправленная.КоличествоСтавок
	|								КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
	|									ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					ИНАЧЕ ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВЫРАЗИТЬ(ТаблицаСотрудниковИсправленная.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|					ТОГДА ВЫБОР
	|							КОГДА ТаблицаСотрудниковИсправленная.КоличествоСтавок <> 0
	|								ТОГДА ТаблицаСотрудниковИсправленная.КоличествоСтавок
	|							КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
	|								ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОГДА ВЫРАЗИТЬ(ТаблицаСотрудниковИсправленная.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / ВЫРАЗИТЬ(ТаблицаСотрудниковИсправленная.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели = 1
	|					ТОГДА ВЫБОР
	|							КОГДА ТаблицаСотрудниковИсправленная.КоличествоСтавок <> 0
	|								ТОГДА ТаблицаСотрудниковИсправленная.КоличествоСтавок
	|							КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
	|								ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				ИНАЧЕ ВЫРАЗИТЬ(ТаблицаСотрудниковИсправленная.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / ВЫРАЗИТЬ(ТаблицаСотрудниковИсправленная.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|			КОНЕЦ
	|	КОНЕЦ КАК ДоляНеполногоРабочегоВремени,
	|	ВЫБОР
	|		КОГДА ИспользуетсяПоказательДоляНеполногоРабочегоВремени.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИспользуетсяДоляНеполногоРабочегоВремени,
	|	ЕСТЬNULL(ОсновныеНачисленияСотрудников.ОсновноеНачисление.УчетВремениВЧасах, ЛОЖЬ) КАК УчетВремениВЧасах,
	|	ТаблицаСотрудниковИсправленная.НомерСтроки
	|ПОМЕСТИТЬ ВТТаблицаСотрудников
	|ИЗ
	|	ВТТаблицаСотрудниковИсправленная КАК ТаблицаСотрудниковИсправленная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ТаблицаСотрудниковИсправленная.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ТаблицаСотрудниковИсправленная.Период = КадровыеДанныеСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисленияСотрудников КАК ОсновныеНачисленияСотрудников
	|		ПО ТаблицаСотрудниковИсправленная.Сотрудник = ОсновныеНачисленияСотрудников.Сотрудник
	|			И ТаблицаСотрудниковИсправленная.Период = ОсновныеНачисленияСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИспользуетсяПоказательДоляНеполногоРабочегоВремени КАК ИспользуетсяПоказательДоляНеполногоРабочегоВремени
	|		ПО ТаблицаСотрудниковИсправленная.Сотрудник = ИспользуетсяПоказательДоляНеполногоРабочегоВремени.Сотрудник
	|			И ТаблицаСотрудниковИсправленная.Период = ИспользуетсяПоказательДоляНеполногоРабочегоВремени.Период";
		
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ВремяВДняхПоУмолчанию", 20);
	Запрос.УстановитьПараметр("ВремяВЧасахПоУмолчанию", 160);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов, 0) = 0
	|			ТОГДА &ВремяВЧасахПоУмолчанию
	|		ИНАЧЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов
	|	КОНЕЦ КАК СреднемесячноеЧислоЧасов,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней, 0) = 0
	|			ТОГДА &ВремяВДняхПоУмолчанию
	|		ИНАЧЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней
	|	КОНЕЦ КАК СреднемесячноеЧислоДней,
	|	ТаблицаСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.СреднемесячноеЧислоЧасов, 0) = 0
	|			ТОГДА &ВремяВЧасахПоУмолчанию
	|		ИНАЧЕ СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.СреднемесячноеЧислоЧасов
	|	КОНЕЦ КАК СреднемесячноеЧислоЧасовНорма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.СреднемесячноеЧислоДней, 0) = 0
	|			ТОГДА &ВремяВДняхПоУмолчанию
	|		ИНАЧЕ СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.СреднемесячноеЧислоДней
	|	КОНЕЦ КАК СреднемесячноеЧислоДнейНорма,
	|	ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени КАК ГрафикПолногоРабочегоВремени,
	|	НАЧАЛОПЕРИОДА(ТаблицаСотрудников.Период, ГОД) КАК Период
	|ПОМЕСТИТЬ ВТСреднемесячныеЗначенияНормыВремени
	|ИЗ
	|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковРаботыСотрудников
	|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников
	|			И (ГОД(ТаблицаСотрудников.Период) = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени
	|		ПО (ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени = СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.ГрафикРаботыСотрудников)
	|			И (ГОД(ТаблицаСотрудников.Период) = СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.Год)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСотрудников.Период,
	|	ТаблицаСотрудников.Сотрудник,
	|	ТаблицаСотрудников.Начисление,
	|	ТаблицаСотрудников.РазмерФОТ,
	|	СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов,
	|	СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.ГрафикПолногоРабочегоВремени, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|				ИЛИ ТаблицаСотрудников.ИспользуетсяДоляНеполногоРабочегоВремени
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаСотрудников.ДоляНеполногоРабочегоВремени = 0
	|						ТОГДА 1
	|					ИНАЧЕ ТаблицаСотрудников.ДоляНеполногоРабочегоВремени
	|				КОНЕЦ
	|		КОГДА ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.ГрафикПолногоРабочегоВремени, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|				И НЕ ТаблицаСотрудников.ИспользуетсяДоляНеполногоРабочегоВремени
	|				И НЕ ТаблицаСотрудников.УчетВремениВЧасах
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов <> 0
	|						И СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасовНорма <> 0
	|					ТОГДА СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов / СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасовНорма
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ДоляНеполногоРабочегоВремени,
	|	ТаблицаСотрудников.НомерСтроки
	|ПОМЕСТИТЬ ВТДействующиеНачисленияСотрудников
	|ИЗ
	|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
	|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
	|			И (НАЧАЛОПЕРИОДА(ТаблицаСотрудников.Период, ГОД) = СреднемесячныеЗначенияНормыВремени.Период)";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДействующиеНачисления.Период КАК Период,
	|	ДействующиеНачисления.Сотрудник КАК Сотрудник,
	|	НачисленияПоказатели.Ссылка КАК Начисление,
	|	НачисленияПоказатели.Показатель КАК Показатель,
	|	НачисленияПоказатели.Показатель.ВидТарифнойСтавки КАК ВидТарифнойСтавки,
	|	ДействующиеНачисления.НомерСтроки
	|ПОМЕСТИТЬ ВТСотрудникиНачисленияПоказатели
	|ИЗ
	|	ВТДействующиеНачисленияСотрудников КАК ДействующиеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиСовокупнойТарифнойСтавкиСотрудников КАК ПоказателиСовокупнойТарифнойСтавкиСотрудников
	|			ПО НачисленияПоказатели.Показатель = ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель
	|				И (НачисленияПоказатели.ЗапрашиватьПриВводе)
	|		ПО ДействующиеНачисления.Начисление = НачисленияПоказатели.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДействующиеНачисления.Период,
	|	ДействующиеНачисления.Сотрудник,
	|	НачисленияПоказатели.Ссылка,
	|	НачисленияПоказатели.Показатель,
	|	НачисленияПоказатели.Показатель.ВидТарифнойСтавки,
	|	ДействующиеНачисления.НомерСтроки
	|ИЗ
	|	ВТДействующиеНачисленияСотрудников КАК ДействующиеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиСовокупнойТарифнойСтавкиСотрудников КАК ПоказателиСовокупнойТарифнойСтавкиСотрудников
	|			ПО НачисленияПоказатели.Показатель = ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель
	|				И (ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель.ТипПоказателя = &ПоказательЗависящийОтСтажа)
	|		ПО ДействующиеНачисления.Начисление = НачисленияПоказатели.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиНачисленияПоказатели.Период КАК Период,
	|	СотрудникиНачисленияПоказатели.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(СотрудникиНачисленияПоказатели.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТСотрудникиИндексыТарифныхСтавок
	|ИЗ
	|	ВТСотрудникиНачисленияПоказатели КАК СотрудникиНачисленияПоказатели
	|ГДЕ
	|	СотрудникиНачисленияПоказатели.ВидТарифнойСтавки В (ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка))
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиНачисленияПоказатели.Сотрудник,
	|	СотрудникиНачисленияПоказатели.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиИндексыТарифныхСтавок.Период КАК Период,
	|	СотрудникиИндексыТарифныхСтавок.Сотрудник КАК Сотрудник,
	|	СотрудникиНачисленияПоказатели.ВидТарифнойСтавки КАК ВидТарифнойСтавки
	|ПОМЕСТИТЬ ВТСотрудникиВидыТарифныхСтавок
	|ИЗ
	|	ВТСотрудникиИндексыТарифныхСтавок КАК СотрудникиИндексыТарифныхСтавок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиНачисленияПоказатели КАК СотрудникиНачисленияПоказатели
	|		ПО СотрудникиИндексыТарифныхСтавок.Сотрудник = СотрудникиНачисленияПоказатели.Сотрудник
	|			И СотрудникиИндексыТарифныхСтавок.НомерСтроки = СотрудникиНачисленияПоказатели.НомерСтроки
	|			И СотрудникиИндексыТарифныхСтавок.Период = СотрудникиНачисленияПоказатели.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиНачисленияПоказатели.Сотрудник КАК Сотрудник,
	|	СотрудникиНачисленияПоказатели.Начисление КАК Начисление
	|ПОМЕСТИТЬ ВТНачисленияСовокупнойСтавкиСотрудников
	|ИЗ
	|	ВТСотрудникиНачисленияПоказатели КАК СотрудникиНачисленияПоказатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеНачисления.Период,
	|	ДействующиеНачисления.Сотрудник,
	|	ДействующиеНачисления.Начисление,
	|	ДействующиеНачисления.РазмерФОТ,
	|	ДействующиеНачисления.СреднемесячноеЧислоЧасов,
	|	ДействующиеНачисления.СреднемесячноеЧислоДней,
	|	ДействующиеНачисления.ДоляНеполногоРабочегоВремени
	|ПОМЕСТИТЬ ВТСотрудникиНачисления
	|ИЗ
	|	ВТДействующиеНачисленияСотрудников КАК ДействующиеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСовокупнойСтавкиСотрудников КАК НачисленияСовокупнойСтавки
	|		ПО ДействующиеНачисления.Сотрудник = НачисленияСовокупнойСтавки.Сотрудник
	|			И ДействующиеНачисления.Начисление = НачисленияСовокупнойСтавки.Начисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиНачисления.Период,
	|	СотрудникиНачисления.Сотрудник,
	|	ЕСТЬNULL(СотрудникиВидыТарифныхСтавок.ВидТарифнойСтавки, ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)) КАК ВидТарифнойСтавки,
	|	СУММА(СотрудникиНачисления.РазмерФОТ) КАК СовокупнаяТарифнаяСтавка,
	|	СотрудникиНачисления.СреднемесячноеЧислоЧасов,
	|	СотрудникиНачисления.СреднемесячноеЧислоДней,
	|	СотрудникиНачисления.ДоляНеполногоРабочегоВремени
	|ПОМЕСТИТЬ ВТСовокупныеТарифныеСтавкиСотрудниковЗаМесяц
	|ИЗ
	|	ВТСотрудникиНачисления КАК СотрудникиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиВидыТарифныхСтавок КАК СотрудникиВидыТарифныхСтавок
	|		ПО СотрудникиНачисления.Сотрудник = СотрудникиВидыТарифныхСтавок.Сотрудник
	|			И СотрудникиНачисления.Период = СотрудникиВидыТарифныхСтавок.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиНачисления.Период,
	|	СотрудникиНачисления.Сотрудник,
	|	СотрудникиНачисления.СреднемесячноеЧислоЧасов,
	|	СотрудникиНачисления.СреднемесячноеЧислоДней,
	|	СотрудникиНачисления.ДоляНеполногоРабочегоВремени,
	|	ЕСТЬNULL(СотрудникиВидыТарифныхСтавок.ВидТарифнойСтавки, ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СовокупныеТарифныеСтавкиСотрудниковЗаМесяц.Период,
	|	СовокупныеТарифныеСтавкиСотрудниковЗаМесяц.Сотрудник,
	|	СовокупныеТарифныеСтавкиСотрудниковЗаМесяц.ВидТарифнойСтавки,
	|	ВЫБОР
	|		КОГДА СовокупныеТарифныеСтавкиСотрудниковЗаМесяц.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка)
	|			ТОГДА СовокупныеТарифныеСтавкиСотрудниковЗаМесяц.СовокупнаяТарифнаяСтавка / СовокупныеТарифныеСтавкиСотрудниковЗаМесяц.СреднемесячноеЧислоЧасов / СовокупныеТарифныеСтавкиСотрудниковЗаМесяц.ДоляНеполногоРабочегоВремени
	|		КОГДА СовокупныеТарифныеСтавкиСотрудниковЗаМесяц.ВидТарифнойСтавки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка)
	|			ТОГДА СовокупныеТарифныеСтавкиСотрудниковЗаМесяц.СовокупнаяТарифнаяСтавка / СовокупныеТарифныеСтавкиСотрудниковЗаМесяц.СреднемесячноеЧислоДней / СовокупныеТарифныеСтавкиСотрудниковЗаМесяц.ДоляНеполногоРабочегоВремени
	|		ИНАЧЕ СовокупныеТарифныеСтавкиСотрудниковЗаМесяц.СовокупнаяТарифнаяСтавка / СовокупныеТарифныеСтавкиСотрудниковЗаМесяц.ДоляНеполногоРабочегоВремени
	|	КОНЕЦ КАК СовокупнаяТарифнаяСтавка
	|ПОМЕСТИТЬ ВТЗначенияСовокупныхТарифныхСтавок
	|ИЗ
	|	ВТСовокупныеТарифныеСтавкиСотрудниковЗаМесяц КАК СовокупныеТарифныеСтавкиСотрудниковЗаМесяц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗначенияСовокупныхТарифныхСтавокПредварительно.Период,
	|	ЗначенияСовокупныхТарифныхСтавокПредварительно.Сотрудник,
	|	ЗначенияСовокупныхТарифныхСтавокПредварительно.ВидТарифнойСтавки,
	|	ЗначенияСовокупныхТарифныхСтавокПредварительно.СовокупнаяТарифнаяСтавка
	|ИЗ
	|	ВТЗначенияСовокупныхТарифныхСтавокПредварительно КАК ЗначенияСовокупныхТарифныхСтавокПредварительно";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УстановитьИспользованиеИндивидуальныхПравилПересчетаТарифныхСтавок() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользованиеИндивидуальныхПравилПересчета = Ложь;
	
	Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СтоимостьДня", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня"));
		Запрос.УстановитьПараметр("СтоимостьЧаса", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса"));
		Запрос.УстановитьПараметр("СтоимостьДняЧаса", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса"));
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НачисленияПоказатели.Ссылка
		               |ИЗ
		               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		               |ГДЕ
		               |	НачисленияПоказатели.Показатель В (&СтоимостьДня, &СтоимостьЧаса, &СтоимостьДняЧаса)
		               |	И НачисленияПоказатели.Ссылка.ПометкаУдаления = ЛОЖЬ
		               |	И НачисленияПоказатели.Ссылка.ВАрхиве = ЛОЖЬ
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УдержанияПоказатели.Ссылка
		               |ИЗ
		               |	ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
		               |ГДЕ
		               |	УдержанияПоказатели.Показатель В (&СтоимостьДня, &СтоимостьЧаса, &СтоимостьДняЧаса)
		               |	И УдержанияПоказатели.Ссылка.ПометкаУдаления = ЛОЖЬ
		               |	И УдержанияПоказатели.Ссылка.ВАрхиве = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ИспользованиеИндивидуальныхПравилПересчета = Не РезультатЗапроса.Пустой();
		
	КонецЕсли;
	
	Если ИспользованиеИндивидуальныхПравилПересчета <> Константы.ИспользоватьИндивидуальныеПравилаПересчетаТарифныхСтавокСотрудников.Получить() Тогда
		Константы.ИспользоватьИндивидуальныеПравилаПересчетаТарифныхСтавокСотрудников.Установить(ИспользованиеИндивидуальныхПравилПересчета);
	КонецЕсли;
	
КонецПроцедуры

Функция СоставПоказателейСовокупнойТарифнойСтавки() Экспорт 
	
	Запрос = Новый Запрос;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент"));
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДСВ"));
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНПФ"));
	МассивПоказателей.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентПрофсоюзныхВзносов"));
	
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплаты.Ссылка КАК Показатель,
	               |	ВЫБОР
	               |		КОГДА ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Выбран
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиСовокупнойТарифнойСтавкиСотрудников КАК ПоказателиСовокупнойТарифнойСтавкиСотрудников
	               |		ПО (ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель = ПоказателиРасчетаЗарплаты.Ссылка)
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника)
	               |	И ПоказателиРасчетаЗарплаты.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное)
	               |	И НЕ ПоказателиРасчетаЗарплаты.НеИспользуется
	               |	И НЕ ПоказателиРасчетаЗарплаты.ПометкаУдаления
	               |	И НЕ ПоказателиРасчетаЗарплаты.Ссылка В (&МассивПоказателей)
	               |	И НЕ ПоказателиРасчетаЗарплаты.ЗначениеРассчитываетсяАвтоматически
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПоказателиРасчетаЗарплаты.РеквизитДопУпорядочивания";
				   
	Возврат Запрос.Выполнить().Выгрузить();			   
	
КонецФункции

// Метод дополняет вторичные записи совокупных ставок при срабатывании регламентного задания
// или при изменении сведений о стаже.
//
Процедура ПересчитатьСовокупнуюТарифнуюСтавкуЗависящуюОтСтажа(Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСовокупныхТарифныхСтавок.Регистратор
	               |ИЗ
	               |	РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавок
	               |ГДЕ
	               |	ЗначенияСовокупныхТарифныхСтавок.Регистратор = &Регистратор
	               |	И НЕ ЗначенияСовокупныхТарифныхСтавок.ВторичнаяЗапись";
				   
	РезультатЗапроса = Запрос.Выполнить();			   
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		ПерезаполнитьВторичныеЗаписиЗначенийСовокупныхТарифныхСтавок(Регистратор);
		
	Иначе 
		
		// Если документ не делал движений в регистр совокупных ставок (например, при совмещении),
		// то записываем новые движения на предыдущий регистратор, который находим по набору плановых начислений.
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ИзмеренияДаты.Период,
		               |	ИзмеренияДаты.Сотрудник,
		               |	ИзмеренияДаты.Регистратор
		               |ПОМЕСТИТЬ ВТСотрудникиПериоды
		               |ИЗ
		               |	РегистрСведений.ПлановыеНачисления КАК ИзмеренияДаты
		               |ГДЕ
		               |	ИзмеренияДаты.Регистратор = &Регистратор
		               |	И НЕ ИзмеренияДаты.ВторичнаяЗапись
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СотрудникиПериоды.Период КАК Период,
		               |	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		               |	МАКСИМУМ(ЗначенияСовокупныхТарифныхСтавокСотрудников.Период) КАК ПериодПредыдущегоРегистратора
		               |ПОМЕСТИТЬ ВТПериодыРегистрации
		               |ИЗ
		               |	ВТСотрудникиПериоды КАК СотрудникиПериоды
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
		               |		ПО СотрудникиПериоды.Сотрудник = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник
		               |			И СотрудникиПериоды.Регистратор <> ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор
		               |			И СотрудникиПериоды.Период > ЗначенияСовокупныхТарифныхСтавокСотрудников.Период
		               |			И (НЕ ЗначенияСовокупныхТарифныхСтавокСотрудников.ВторичнаяЗапись)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СотрудникиПериоды.Период,
		               |	СотрудникиПериоды.Сотрудник
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор КАК Регистратор
		               |ИЗ
		               |	ВТПериодыРегистрации КАК ПериодыРегистрации
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
		               |		ПО ПериодыРегистрации.ПериодПредыдущегоРегистратора = ЗначенияСовокупныхТарифныхСтавокСотрудников.Период
		               |			И ПериодыРегистрации.Сотрудник = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник
		               |			И (НЕ ЗначенияСовокупныхТарифныхСтавокСотрудников.ВторичнаяЗапись)";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			ПерезаполнитьВторичныеЗаписиЗначенийСовокупныхТарифныхСтавок(Выборка.Регистратор);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОтображенияТарифнойСтавкиСотрудникВШапке(Сотрудник, ДанныеНачислений, Действие = Неопределено) Экспорт 
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Для Каждого СтрокаНачисления Из ДанныеНачислений Цикл
		
		Если ?(Действие = Неопределено, СтрокаНачисления.Действие, Действие) = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Начисление = СтрокаНачисления.Начисление;
		
	КонецЦикла;
	
	ПараметрыОтображенияПолейТарифнойСтавки = ПараметрыОтображенияПолейПересчетаТарифнойСтавки(ИсходныеДанные);
	
	Возврат ПараметрыОтображенияПолейТарифнойСтавки;
	
КонецФункции

Функция ПараметрыОтображенияТарифнойСтавкиУходЗаРебенком(ДанныеНачислений) Экспорт 
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Для Каждого СтрокаНачисления Из ДанныеНачислений Цикл
		
		Если СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.Сотрудник = СтрокаНачисления.РабочееМесто;
		НоваяСтрока.Начисление = СтрокаНачисления.Начисление;
		
	КонецЦикла;
	
	ПараметрыОтображенияПолейТарифнойСтавки = ПараметрыОтображенияПолейПересчетаТарифнойСтавки(ИсходныеДанные);
	
	Возврат ПараметрыОтображенияПолейТарифнойСтавки;
	
КонецФункции

Функция ВторичныеЗаписиЗначенийСовокупныхТарифныхСтавок(Регистратор) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИзмеренияДаты.Период,
	               |	ИзмеренияДаты.Сотрудник,
	               |	ИзмеренияДаты.Регистратор,
	               |	ИзмеренияДаты.Значение КАК ФактическоеЗначениеСтавки,
	               |	ИзмеренияДаты.ДействуетДо,
	               |	ИзмеренияДаты.ЗначениеПоОкончании,
	               |	ИзмеренияДаты.ВидТарифнойСтавкиПоОкончании
	               |ПОМЕСТИТЬ ВТСотрудникиПериоды
	               |ИЗ
	               |	РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ИзмеренияДаты
	               |ГДЕ
	               |	ИзмеренияДаты.Регистратор = &Регистратор
	               |	И НЕ ИзмеренияДаты.ВторичнаяЗапись
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиПериоды.Сотрудник КАК Сотрудник,
	               |	СотрудникиПериоды.Период КАК ДатаНачала,
	               |	ЕСТЬNULL(МИНИМУМ(ЗначенияСовокупныхТарифныхСтавокСотрудников.Период), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончания
	               |ПОМЕСТИТЬ ВТПериодыНачислений
	               |ИЗ
	               |	ВТСотрудникиПериоды КАК СотрудникиПериоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
	               |		ПО СотрудникиПериоды.Сотрудник = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник
	               |			И СотрудникиПериоды.Регистратор <> ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор
	               |			И СотрудникиПериоды.Период < ЗначенияСовокупныхТарифныхСтавокСотрудников.Период
	               |			И (НЕ ЗначенияСовокупныхТарифныхСтавокСотрудников.ВторичнаяЗапись)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СотрудникиПериоды.Период,
	               |	СотрудникиПериоды.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПлановыеНачисленияВторичныеЗаписи.Период,
	               |	ПлановыеНачисленияВторичныеЗаписи.Сотрудник,
	               |	ПлановыеНачисленияВторичныеЗаписи.Начисление,
	               |	ПлановыеНачисленияВторичныеЗаписи.ФизическоеЛицо,
	               |	ПлановыеНачисленияВторичныеЗаписи.Используется,
	               |	ПлановыеНачисленияВторичныеЗаписи.Размер,
	               |	ПлановыеНачисленияВторичныеЗаписи.ПересчетНеТребуется,
	               |	ПлановыеНачисленияВторичныеЗаписи.ВторичнаяЗапись,
	               |	ПлановыеНачисленияВторичныеЗаписи.Активность,
	               |	ПлановыеНачисленияВторичныеЗаписи.НомерСтроки,
	               |	ПлановыеНачисленияВторичныеЗаписи.Регистратор
	               |ПОМЕСТИТЬ ВТПлановыеНачисления
	               |ИЗ
	               |	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисленияВторичныеЗаписи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыНачислений КАК ПериодыНачислений
	               |		ПО (ПериодыНачислений.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	               |				ИЛИ ПлановыеНачисленияВторичныеЗаписи.Период >= ПериодыНачислений.ДатаНачала)
	               |			И (ПериодыНачислений.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |				ИЛИ ПлановыеНачисленияВторичныеЗаписи.Период <= ПериодыНачислений.ДатаОкончания)
	               |			И (ПериодыНачислений.Сотрудник = ПлановыеНачисленияВторичныеЗаписи.Сотрудник)
	               |			И (ПлановыеНачисленияВторичныеЗаписи.ВторичнаяЗапись = ИСТИНА)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПлановыеНачисления.Период,
	               |	ПлановыеНачисления.Сотрудник
	               |ПОМЕСТИТЬ ВТСотрудникиДаты
	               |ИЗ
	               |	ВТПлановыеНачисления КАК ПлановыеНачисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиСовокупнойТарифнойСтавкиСотрудников КАК ПоказателиСовокупнойТарифнойСтавкиСотрудников
	               |			ПО НачисленияПоказатели.Показатель = ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель
	               |		ПО ПлановыеНачисления.Начисление = НачисленияПоказатели.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиДаты.Период,
	               |	СотрудникиДаты.Сотрудник
	               |ПОМЕСТИТЬ ВТСотрудникиДатыДополненная
	               |ИЗ
	               |	ВТСотрудникиДаты КАК СотрудникиДаты
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	СотрудникиПериоды.Период,
	               |	СотрудникиПериоды.Сотрудник
	               |ИЗ
	               |	ВТСотрудникиПериоды КАК СотрудникиПериоды";
				   
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиДатыДополненная",
			"Сотрудник"));
			
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиДатыДополненная",
			"Сотрудник"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПлановыеНачисленияСрезПоследних.Период КАК Период,
	               |	ПлановыеНачисленияСрезПоследних.Сотрудник,
	               |	ПлановыеНачисленияСрезПоследних.Начисление,
	               |	ЕСТЬNULL(ПлановыеНачисления.Размер, ПлановыеНачисленияСрезПоследних.Размер) КАК РазмерФОТ,
	               |	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка) КАК ГрафикРаботы,
	               |	0 КАК КоличествоСтавок,
	               |	ПлановыеНачисленияСрезПоследних.НомерСтроки
	               |ПОМЕСТИТЬ ВТТаблицаСотрудниковПредварительно
	               |ИЗ
	               |	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисления КАК ПлановыеНачисления
	               |		ПО ПлановыеНачисленияСрезПоследних.Начисление = ПлановыеНачисления.Начисление
	               |			И ПлановыеНачисленияСрезПоследних.Период = ПлановыеНачисления.Период
	               |ГДЕ
	               |	ПлановыеНачисленияСрезПоследних.Используется
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСотрудниковПредварительно.Период,
	               |	ТаблицаСотрудниковПредварительно.Сотрудник,
	               |	ТаблицаСотрудниковПредварительно.Начисление,
	               |	НачисленияПоказатели.Показатель
	               |ПОМЕСТИТЬ ВТПоказателиНачислений
	               |ИЗ
	               |	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудниковПредварительно
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |		ПО ТаблицаСотрудниковПредварительно.Начисление = НачисленияПоказатели.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоказателиНачислений.Период,
	               |	ПоказателиНачислений.Сотрудник,
	               |	ПоказателиНачислений.Показатель,
	               |	ЗначенияПоказателейРасчетаЗарплаты.Значение
	               |ПОМЕСТИТЬ ВТПоказателиСотрудников
	               |ИЗ
	               |	ВТПоказателиНачислений КАК ПоказателиНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПоказателейРасчетаЗарплаты
	               |		ПО ПоказателиНачислений.Период = ЗначенияПоказателейРасчетаЗарплаты.Период
	               |			И ПоказателиНачислений.Сотрудник = ЗначенияПоказателейРасчетаЗарплаты.Сотрудник
	               |			И ПоказателиНачислений.Показатель = ЗначенияПоказателейРасчетаЗарплаты.Показатель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТПоказателиНачислений";
				   
	Запрос.Выполнить();
	
	СоздатьВТЗначенияСовокупныхТарифныхСтавок(Запрос.МенеджерВременныхТаблиц);

	Запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиПериоды.Период КАК Период,
	               |	СотрудникиПериоды.Сотрудник КАК Сотрудник,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ЗначенияСовокупныхТарифныхСтавок.СовокупнаяТарифнаяСтавка, 0) = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ СотрудникиПериоды.ФактическоеЗначениеСтавки / ЗначенияСовокупныхТарифныхСтавок.СовокупнаяТарифнаяСтавка
	               |	КОНЕЦ КАК Коэффициент
	               |ПОМЕСТИТЬ ВТКоэффициентыПересчета
	               |ИЗ
	               |	ВТСотрудникиПериоды КАК СотрудникиПериоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияСовокупныхТарифныхСтавок КАК ЗначенияСовокупныхТарифныхСтавок
	               |		ПО СотрудникиПериоды.Период = ЗначенияСовокупныхТарифныхСтавок.Период
	               |			И СотрудникиПериоды.Сотрудник = ЗначенияСовокупныхТарифныхСтавок.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиДаты.Период КАК Период,
	               |	СотрудникиДаты.Сотрудник КАК Сотрудник,
	               |	СотрудникиДаты.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки КАК ВидТарифнойСтавки,
	               |	ЗначенияСовокупныхТарифныхСтавок.СовокупнаяТарифнаяСтавка * ЕСТЬNULL(КоэффициентыПересчета.Коэффициент, 1) КАК Значение,
	               |	ЗначенияСовокупныхТарифныхСтавокПоОкончании.ДействуетДо КАК ДействуетДо,
	               |	ЗначенияСовокупныхТарифныхСтавокПоОкончании.ВидТарифнойСтавкиПоОкончании КАК ВидТарифнойСтавкиПоОкончании,
	               |	ЗначенияСовокупныхТарифныхСтавокПоОкончании.ЗначениеПоОкончании КАК ЗначениеПоОкончании,
	               |	ИСТИНА КАК Активность,
	               |	ИСТИНА КАК ВторичнаяЗапись
	               |ИЗ
	               |	ВТСотрудникиДаты КАК СотрудникиДаты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияСовокупныхТарифныхСтавок КАК ЗначенияСовокупныхТарифныхСтавок
	               |		ПО СотрудникиДаты.Период = ЗначенияСовокупныхТарифныхСтавок.Период
	               |			И СотрудникиДаты.Сотрудник = ЗначенияСовокупныхТарифныхСтавок.Сотрудник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК ЗначенияСовокупныхТарифныхСтавокПоОкончании
	               |		ПО СотрудникиДаты.Сотрудник = ЗначенияСовокупныхТарифныхСтавокПоОкончании.Сотрудник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчета КАК КоэффициентыПересчета
	               |		ПО СотрудникиДаты.Сотрудник = КоэффициентыПересчета.Сотрудник";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура УдалитьВторичныеЗаписиСовокупныхТарифныхСтавокПредыдущихРегистраторов(НаборЗаписей) Экспорт 
	
	ИзмеренияДаты = НаборЗаписей.Выгрузить();
	
	ВремяРегистрацииДокумента = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
		МассивДат = ИзмеренияДаты.ВыгрузитьКолонку("Период");
		ВремяРегистрацииДокумента = ЗначенияВремениРегистрацииДокумента(Регистратор, МассивДат);
	КонецЕсли;
	
	Для Каждого СтрокаДвижений Из ИзмеренияДаты Цикл 
		СтрокаДвижений.Период = ВремяРегистрацииДокумента.Получить(НачалоДня(СтрокаДвижений.Период));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИзмеренияДаты.Период,
	               |	ИзмеренияДаты.Сотрудник,
	               |	ИзмеренияДаты.Регистратор,
	               |	ИзмеренияДаты.ВторичнаяЗапись
	               |ПОМЕСТИТЬ ВТСотрудникиПериоды
	               |ИЗ
	               |	&ИзмеренияДаты КАК ИзмеренияДаты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиПериоды.Период КАК Период,
	               |	СотрудникиПериоды.Сотрудник КАК Сотрудник,
	               |	МАКСИМУМ(ЗначенияСовокупныхТарифныхСтавокСотрудников.Период) КАК ПериодПредыдущегоРегистратора
	               |ПОМЕСТИТЬ ВТПериодыРегистрации
	               |ИЗ
	               |	ВТСотрудникиПериоды КАК СотрудникиПериоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
	               |		ПО СотрудникиПериоды.Сотрудник = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник
	               |			И СотрудникиПериоды.Регистратор <> ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор
	               |			И СотрудникиПериоды.Период > ЗначенияСовокупныхТарифныхСтавокСотрудников.Период
	               |			И (НЕ СотрудникиПериоды.ВторичнаяЗапись)
	               |ГДЕ
	               |	НЕ СотрудникиПериоды.ВторичнаяЗапись
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СотрудникиПериоды.Период,
	               |	СотрудникиПериоды.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(ПериодыРегистрации.Период, ДЕНЬ) КАК Период,
	               |	ПериодыРегистрации.Сотрудник,
	               |	ПериодыРегистрации.ПериодПредыдущегоРегистратора,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор КАК ПредыдущийРегистратор
	               |ПОМЕСТИТЬ ВТСведенияОДвиженияхСовокупныхСтавок
	               |ИЗ
	               |	ВТПериодыРегистрации КАК ПериодыРегистрации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
	               |		ПО ПериодыРегистрации.ПериодПредыдущегоРегистратора = ЗначенияСовокупныхТарифныхСтавокСотрудников.Период
	               |			И ПериодыРегистрации.Сотрудник = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СведенияОДвиженияхСовокупныхСтавок.Период КАК Период,
	               |	СведенияОДвиженияхСовокупныхСтавок.Сотрудник КАК Сотрудник,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор КАК Регистратор,
	               |	МАКСИМУМ(ЗначенияСовокупныхТарифныхСтавокСотрудников.Период) КАК ПериодВторичнойЗаписи
	               |ПОМЕСТИТЬ ВТПериодыВторичныхЗаписей
	               |ИЗ
	               |	ВТСведенияОДвиженияхСовокупныхСтавок КАК СведенияОДвиженияхСовокупныхСтавок
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
	               |		ПО СведенияОДвиженияхСовокупныхСтавок.ПредыдущийРегистратор = ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор
	               |			И СведенияОДвиженияхСовокупныхСтавок.Сотрудник = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник
	               |			И (ЗначенияСовокупныхТарифныхСтавокСотрудников.ВторичнаяЗапись)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СведенияОДвиженияхСовокупныхСтавок.Период,
	               |	СведенияОДвиженияхСовокупныхСтавок.Сотрудник,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПериодыВторичныхЗаписей.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ВТОбновляемыеРегистраторы
	               |ИЗ
	               |	ВТПериодыВторичныхЗаписей КАК ПериодыВторичныхЗаписей
	               |ГДЕ
	               |	ПериодыВторичныхЗаписей.Период <= ПериодыВторичныхЗаписей.ПериодВторичнойЗаписи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Период,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор КАК Регистратор,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ФизическоеЛицо,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Значение,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ВидТарифнойСтавки,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ДействуетДо,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ЗначениеПоОкончании,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ВидТарифнойСтавкиПоОкончании,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ВторичнаяЗапись
	               |ИЗ
	               |	РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбновляемыеРегистраторы КАК ОбновляемыеРегистраторы
	               |		ПО ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор = ОбновляемыеРегистраторы.Регистратор
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОДвиженияхСовокупныхСтавок КАК СведенияОДвиженияхСовокупныхСтавок
	               |		ПО ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор = СведенияОДвиженияхСовокупныхСтавок.ПредыдущийРегистратор
	               |			И ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник = СведенияОДвиженияхСовокупныхСтавок.Сотрудник
	               |			И ЗначенияСовокупныхТарифныхСтавокСотрудников.Период >= СведенияОДвиженияхСовокупныхСтавок.Период
	               |			И (ЗначенияСовокупныхТарифныхСтавокСотрудников.ВторичнаяЗапись)
	               |ГДЕ
	               |	СведенияОДвиженияхСовокупныхСтавок.Период ЕСТЬ NULL 
	               |ИТОГИ ПО
	               |	Регистратор";
				   
	РезультатЗапроса = Запрос.Выполнить();			   
	ВыборкаПоРегистраторам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		Набор = РегистрыСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		
		Выборка = ВыборкаПоРегистраторам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
		КонецЦикла; 
		
		Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		Набор.Записать();
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура СоздатьВТРегистраторыСовокупныхТарифныхСтавок(Регистратор, МенеджерВременныхТаблиц) Экспорт 

	УстановитьПривилегированныйРежим(Истина);			   
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИзмеренияДаты.Период,
	               |	ИзмеренияДаты.Сотрудник,
	               |	ИзмеренияДаты.Регистратор
	               |ПОМЕСТИТЬ ВТСотрудникиПериоды
	               |ИЗ
	               |	РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ИзмеренияДаты
	               |ГДЕ
	               |	ИзмеренияДаты.Регистратор = &Регистратор
	               |	И НЕ ИзмеренияДаты.ВторичнаяЗапись
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиПериоды.Период КАК Период,
	               |	СотрудникиПериоды.Сотрудник КАК Сотрудник,
	               |	МАКСИМУМ(ЗначенияСовокупныхТарифныхСтавокСотрудников.Период) КАК ПериодПредыдущегоРегистратора
	               |ПОМЕСТИТЬ ВТПериодыРегистрации
	               |ИЗ
	               |	ВТСотрудникиПериоды КАК СотрудникиПериоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
	               |		ПО СотрудникиПериоды.Сотрудник = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник
	               |			И СотрудникиПериоды.Регистратор <> ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор
	               |			И СотрудникиПериоды.Период > ЗначенияСовокупныхТарифныхСтавокСотрудников.Период
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СотрудникиПериоды.Период,
	               |	СотрудникиПериоды.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ ВТРегистраторыСовокупныхТарифныхСтавок
	               |ИЗ
	               |	ВТПериодыРегистрации КАК ПериодыРегистрации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
	               |		ПО ПериодыРегистрации.ПериодПредыдущегоРегистратора = ЗначенияСовокупныхТарифныхСтавокСотрудников.Период
	               |			И ПериодыРегистрации.Сотрудник = ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник";
				   
	Запрос.Выполнить();			   
	
КонецПроцедуры

Процедура ДополнитьВторичныеЗаписиРегистраторовСовокупныхТарифныхСтавокРегистраторов(МенеджерВременныхТаблиц) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);			   
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Период,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор КАК Регистратор,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ФизическоеЛицо,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Значение,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ВидТарифнойСтавки,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ДействуетДо,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ЗначениеПоОкончании,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ВидТарифнойСтавкиПоОкончании,
	               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ВторичнаяЗапись
	               |ИЗ
	               |	РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыСовокупныхТарифныхСтавок КАК РегистраторыСовокупныхТарифныхСтавок
	               |		ПО ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор = РегистраторыСовокупныхТарифныхСтавок.Регистратор
	               |ГДЕ
	               |	НЕ ЗначенияСовокупныхТарифныхСтавокСотрудников.ВторичнаяЗапись
	               |ИТОГИ ПО
	               |	Регистратор";
				   
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРегистраторам.Следующий() Цикл 
		
		РезультатЗапроса = ВторичныеЗаписиЗначенийСовокупныхТарифныхСтавок(ВыборкаПоРегистраторам.Регистратор);
		
		Если Не РезультатЗапроса.Пустой() Тогда 
			
			НаборЗаписей = РегистрыСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
			
			Выборка = ВыборкаПоРегистраторам.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла; 
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла; 
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьВторичныеЗаписиЗначенийСовокупныхТарифныхСтавок(Регистратор) Экспорт 
	
	РезультатЗапроса = ВторичныеЗаписиЗначенийСовокупныхТарифныхСтавок(Регистратор);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Регистратор", Регистратор);					  
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Период,
		               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор,
		               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник,
		               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ФизическоеЛицо,
		               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Значение,
		               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ВидТарифнойСтавки,
		               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ДействуетДо,
		               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ЗначениеПоОкончании,
		               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ВидТарифнойСтавкиПоОкончании,
		               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.ВторичнаяЗапись
		               |ИЗ
		               |	РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
		               |ГДЕ
		               |	ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор = &Регистратор
		               |	И НЕ ЗначенияСовокупныхТарифныхСтавокСотрудников.ВторичнаяЗапись";
					   
		ТаблицаНабора = Запрос.Выполнить().Выгрузить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			НайденныеСтроки = ТаблицаНабора.НайтиСтроки(Новый Структура("Сотрудник,Период", Выборка.Сотрудник, Выборка.Период));
			Если НайденныеСтроки.Количество() = 0 Тогда 
				ЗаполнитьЗначенияСвойств(ТаблицаНабора.Добавить(), Выборка);
			КонецЕсли;	
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписей.Загрузить(ТаблицаНабора);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеВидаТарифнойСтавки(Объект, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(Объект.СовокупнаяТарифнаяСтавка) И Не ЗначениеЗаполнено(Объект.ВидТарифнойСтавки) Тогда 
		ТекстСообщения = НСтр("ru='Не указан вид совокупной тарифной ставки.';uk='Не зазначено вид сукупної тарифної ставки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВидТарифнойСтавки", "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеНесколькихДокументовНаОднуДату

Функция ЗначениеСдвигаПериодаЗаписиРегистра(Документ) Экспорт 
	
	ТипДокумента = ТипЗнч(Документ);
	
	Сдвиг = Неопределено;
	
	Если ТипДокумента = Тип("ДокументСсылка.ПереносДанных") Тогда 
		Сдвиг = 0;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НачальнаяШтатнаяРасстановка") Тогда
		Сдвиг = 10;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриемНаРаботу")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПриемНаРаботуСписком") Тогда
		Сдвиг = 20;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратИзОтпускаПоУходуЗаРебенком") Тогда
		Сдвиг = 30;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВводНачальныхОстатковОтпусков") Тогда
		Сдвиг = 40;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.УтверждениеТарифнойСетки") Тогда
		Сдвиг = 86340;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
		Сдвиг = 86350;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.Увольнение") Тогда
		Сдвиг = 86360;
	КонецЕсли;
	
	Возврат Сдвиг;
	
КонецФункции

Функция КонкурирующиеПоПериодуРегистраторыНачислений() Экспорт 
	
	КонкурирующиеРегистраторы = Новый Массив;
	
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеАванса"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеКвалификационногоРазряда"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеОплатыТруда"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеПлановыхНачислений"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.НазначениеПлановогоНачисления"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ПрекращениеПлановогоНачисления"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеМестРаботы"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИндексацияЗаработка"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.КадровыйПеревод"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.КадровыйПереводСписком"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ОтменаДоплатыДоСреднегоЗаработка"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ОтменаСовмещения"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ПеремещениеВДругоеПодразделение"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ПриказНаДоплатуДоСреднегоЗаработка"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.Совмещение"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеГрафикаРаботыСписком"));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьСписокКонкурирующихПоПериодуРегистраторовНачислений(КонкурирующиеРегистраторы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.ДополнитьСписокКонкурирующихПоПериодуРегистраторовНачислений(КонкурирующиеРегистраторы);
	КонецЕсли;
	
	Возврат КонкурирующиеРегистраторы;
	
КонецФункции

Процедура УстановитьВремяРегистрацииДокумента(Движения, СотрудникиДаты, Регистратор, ИмяКолонкиПериод = "ДатаСобытия") Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	СдвигПериода = ЗначениеСдвигаПериодаЗаписиРегистра(Регистратор);
	
	Если СдвигПериода <> Неопределено Тогда 
		
		// Документ с фиксированным временем.
		СотрудникиДаты.Свернуть(ИмяКолонкиПериод + ", Сотрудник");
		
		НаборЗаписей = РегистрыСведений.ВремяРегистрацииДокументовПлановыхНачислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Регистратор);
		
		Для Каждого ДанныеСотрудника Из СотрудникиДаты Цикл 
			
			ДатаСобытия = НачалоДня(ДанныеСотрудника[ИмяКолонкиПериод]);
			ВремяРегистрации = ДатаСобытия + СдвигПериода;
			
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаписьРегистра.Дата = ДатаСобытия;
			ЗаписьРегистра.Сотрудник = ДанныеСотрудника.Сотрудник;
			ЗаписьРегистра.Документ = Регистратор;
			ЗаписьРегистра.ВремяРегистрации = ВремяРегистрации;
			ЗаписьРегистра.Проведен = Истина;
			
		КонецЦикла;
	
		НаборЗаписей.Записать();
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&ИмяКолонкиПериод КАК Дата,
	               |	СотрудникиДаты.Сотрудник КАК Сотрудник
	               |ПОМЕСТИТЬ ВТСотрудникиДаты
	               |ИЗ
	               |	&СотрудникиДаты КАК СотрудникиДаты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НАЧАЛОПЕРИОДА(СотрудникиДаты.Дата, ДЕНЬ) КАК Дата,
	               |	СотрудникиДаты.Сотрудник
	               |ПОМЕСТИТЬ ВТИзмеренияДаты
	               |ИЗ
	               |	ВТСотрудникиДаты КАК СотрудникиДаты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИзмеренияДаты.Дата
	               |ПОМЕСТИТЬ ВТИсходныеДаты
	               |ИЗ
	               |	ВТИзмеренияДаты КАК ИзмеренияДаты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремяРегистрацииДокументов.Дата КАК Дата,
	               |	ВремяРегистрацииДокументов.Сотрудник КАК Сотрудник,
	               |	ВремяРегистрацииДокументов.Документ КАК Документ,
	               |	ВремяРегистрацииДокументов.ВремяРегистрации КАК ВремяРегистрации
	               |ПОМЕСТИТЬ ВТЗаписиРегистра
	               |ИЗ
	               |	ВТИсходныеДаты КАК ИсходныеДаты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВремяРегистрацииДокументовПлановыхНачислений КАК ВремяРегистрацииДокументов
	               |		ПО ИсходныеДаты.Дата = ВремяРегистрацииДокументов.Дата
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Документ,
	               |	Дата,
	               |	Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИсходныеДаты.Дата,
	               |	ЗаписиРегистра.ВремяРегистрации КАК ВремяРегистрации
	               |ПОМЕСТИТЬ ВТВремяРегистрацииДокументов
	               |ИЗ
	               |	ВТИсходныеДаты КАК ИсходныеДаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаписиРегистра КАК ЗаписиРегистра
	               |		ПО ИсходныеДаты.Дата = ЗаписиРегистра.Дата
	               |			И (ЗаписиРегистра.Документ = &Регистратор)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремяРегистрацииДокументов.Дата,
	               |	ВремяРегистрацииДокументов.ВремяРегистрации
	               |ИЗ
	               |	ВТВремяРегистрацииДокументов КАК ВремяРегистрацииДокументов
	               |ГДЕ
	               |	ВремяРегистрацииДокументов.ВремяРегистрации ЕСТЬ NULL ";
				   
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяКолонкиПериод", "СотрудникиДаты." + ИмяКолонкиПериод);
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ВремяРегистрацииДокумента = Новый Соответствие;
	
	ТребуетсяНовоеВремяРегистрации = Не РезультатЗапроса.Пустой();
	
	Если Не ТребуетсяНовоеВремяРегистрации Тогда
		
		// Проверим, что по набору сотрудников нет конфликтов с другими регистраторами.
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИзмеренияДаты.Сотрудник
		               |ИЗ
		               |	ВТИзмеренияДаты КАК ИзмеренияДаты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВремяРегистрацииДокументов КАК ВремяРегистрацииДокументов
		               |		ПО ИзмеренияДаты.Дата = ВремяРегистрацииДокументов.Дата
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиРегистра КАК ЗаписиРегистра
		               |		ПО ИзмеренияДаты.Дата = ЗаписиРегистра.Дата
		               |			И ИзмеренияДаты.Сотрудник = ЗаписиРегистра.Сотрудник
		               |			И (ВремяРегистрацииДокументов.ВремяРегистрации = ЗаписиРегистра.ВремяРегистрации)
		               |			И (ЗаписиРегистра.Документ <> &Регистратор)";
					   
		РезультатЗапроса = Запрос.Выполнить();
					   
		ТребуетсяНовоеВремяРегистрации = Не РезультатЗапроса.Пустой();
		
	КонецЕсли;
	
	Если Не ТребуетсяНовоеВремяРегистрации Тогда
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВремяРегистрацииДокументов.Дата,
		               |	ВремяРегистрацииДокументов.ВремяРегистрации
		               |ИЗ
		               |	ВТВремяРегистрацииДокументов КАК ВремяРегистрацииДокументов";
					   
		Выборка = Запрос.Выполнить().Выбрать();			   
		
		Пока Выборка.Следующий() Цикл 
			ВремяРегистрацииДокумента.Вставить(Выборка.Дата, Выборка.ВремяРегистрации);
		КонецЦикла;
		
		// Если список сотрудников и дат в переданной таблице и в регистре не совпадает - нужно перезаписать набор.
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВремяРегистрацииДокументов.Дата КАК Дата,
		               |	ВремяРегистрацииДокументов.Сотрудник КАК Сотрудник
		               |ПОМЕСТИТЬ ВТЗаписиРегистратора
		               |ИЗ
		               |	РегистрСведений.ВремяРегистрацииДокументовПлановыхНачислений КАК ВремяРегистрацииДокументов
		               |ГДЕ
		               |	ВремяРегистрацииДокументов.Документ = &Регистратор
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИзмеренияДаты.Сотрудник
		               |ИЗ
		               |	ВТИзмеренияДаты КАК ИзмеренияДаты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаписиРегистратора КАК ЗаписиРегистратора
		               |		ПО ИзмеренияДаты.Дата = ЗаписиРегистратора.Дата
		               |			И ИзмеренияДаты.Сотрудник = ЗаписиРегистратора.Сотрудник
		               |ГДЕ
		               |	ЗаписиРегистратора.Сотрудник ЕСТЬ NULL 
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЗаписиРегистратора.Сотрудник
		               |ИЗ
		               |	ВТЗаписиРегистратора КАК ЗаписиРегистратора
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТИзмеренияДаты КАК ИзмеренияДаты
		               |		ПО ЗаписиРегистратора.Дата = ИзмеренияДаты.Дата
		               |			И ЗаписиРегистратора.Сотрудник = ИзмеренияДаты.Сотрудник
		               |ГДЕ
		               |	ИзмеренияДаты.Сотрудник ЕСТЬ NULL ";
					   
		РезультатЗапроса = Запрос.Выполнить();
					   
		ЗаписатьНабор = Не РезультатЗапроса.Пустой();
		
	Иначе 
		
		// Определим свободное время для регистрации движений документа.
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаписиРегистра.Дата КАК Дата,
		               |	МАКСИМУМ(ДОБАВИТЬКДАТЕ(ЗаписиРегистра.ВремяРегистрации, СЕКУНДА, 1)) КАК ВремяРегистрации
		               |ПОМЕСТИТЬ ВТСвободноеВремяРегистрации
		               |ИЗ
		               |	ВТИзмеренияДаты КАК ИзмеренияДаты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиРегистра КАК ЗаписиРегистра
		               |		ПО ИзмеренияДаты.Дата = ЗаписиРегистра.Дата
		               |			И ИзмеренияДаты.Сотрудник = ЗаписиРегистра.Сотрудник
		               |			И (ЗаписиРегистра.Документ <> &Регистратор)
		               |			И (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаписиРегистра.ВремяРегистрации, ДЕНЬ), ЗаписиРегистра.ВремяРегистрации, СЕКУНДА) МЕЖДУ 60 И 86339)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаписиРегистра.Дата
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВремяРегистрацииДокументов.Дата КАК Дата,
		               |	ЕСТЬNULL(СвободноеВремяРегистрации.ВремяРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяРегистрации
		               |ИЗ
		               |	ВТВремяРегистрацииДокументов КАК ВремяРегистрацииДокументов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСвободноеВремяРегистрации КАК СвободноеВремяРегистрации
		               |		ПО ВремяРегистрацииДокументов.Дата = СвободноеВремяРегистрации.Дата";
					   
		Выборка = Запрос.Выполнить().Выбрать();			   
		
		СдвигПериода = 60;
		
		Пока Выборка.Следующий() Цикл
			ВремяРегистрации = ?(ЗначениеЗаполнено(Выборка.ВремяРегистрации), Выборка.ВремяРегистрации, Выборка.Дата + СдвигПериода);
			ВремяРегистрацииДокумента.Вставить(Выборка.Дата, ВремяРегистрации);
		КонецЦикла;
		
		ЗаписатьНабор = Истина;
		
	КонецЕсли;
	
	Если ЗаписатьНабор Тогда 
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИзмеренияДаты.Дата КАК Дата,
		               |	ИзмеренияДаты.Сотрудник КАК Сотрудник
		               |ИЗ
		               |	ВТИзмеренияДаты КАК ИзмеренияДаты";
					  
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.ВремяРегистрацииДокументовПлановыхНачислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Регистратор);
			
		Пока Выборка.Следующий() Цикл 
			
			ДатаСобытия = Выборка.Дата;
			ВремяРегистрации = ВремяРегистрацииДокумента.Получить(ДатаСобытия);
			
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаписьРегистра.Дата = ДатаСобытия;
			ЗаписьРегистра.Сотрудник = Выборка.Сотрудник;
			ЗаписьРегистра.Документ = Регистратор;
			ЗаписьРегистра.ВремяРегистрации = ВремяРегистрации;
			ЗаписьРегистра.Проведен = Истина;
			
		КонецЦикла;
	
		НаборЗаписей.Записать();
		
	Иначе 
		
		НаборЗаписей = РегистрыСведений.ВремяРегистрацииДокументовПлановыхНачислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл 
			ЗаписьРегистра.Проведен = Истина;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Для Каждого НаборЗаписейРегистра Из Движения Цикл 
		НаборЗаписейРегистра.ДополнительныеСвойства.Вставить("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначенияВремениРегистрацииДокумента(Регистратор, МассивДат) Экспорт

	СдвигПериода = ЗначениеСдвигаПериодаЗаписиРегистра(Регистратор);
	
	Если СдвигПериода = Неопределено Тогда 
		
		КонкурирующиеРегистраторы = КонкурирующиеПоПериодуРегистраторыНачислений();
		Если КонкурирующиеРегистраторы.Найти(ТипЗнч(Регистратор)) = Неопределено Тогда 
			СдвигПериода = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнитьДаннымиРегистра = Ложь;
	
	Если СдвигПериода = Неопределено Тогда 
		СдвигПериода = 86339;
		ДополнитьДаннымиРегистра = Истина;
	КонецЕсли;
	
	ДатыСобытий = Новый Массив;
	
	ЗначенияВремениРегистрации = Новый Соответствие;
	
	Для Каждого Дата Из МассивДат Цикл 
		
		ДатаСобытия = НачалоДня(Дата);
		
		Если ЗначенияВремениРегистрации[ДатаСобытия] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДатыСобытий.Добавить(ДатаСобытия);
		ЗначенияВремениРегистрации.Вставить(ДатаСобытия, ДатаСобытия + СдвигПериода);
		
	КонецЦикла;
	
	// Если регистратор относится к конкурирующим по периоду - проверяем наличие записей в регистре.
	Если ДополнитьДаннымиРегистра Тогда 
	
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ДатыСобытий", ДатыСобытий);
		Запрос.УстановитьПараметр("Документ", Регистратор);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВремяРегистрацииДокументовПлановыхНачислений.Дата,
		               |	ВремяРегистрацииДокументовПлановыхНачислений.ВремяРегистрации
		               |ИЗ
		               |	РегистрСведений.ВремяРегистрацииДокументовПлановыхНачислений КАК ВремяРегистрацииДокументовПлановыхНачислений
		               |ГДЕ
		               |	ВремяРегистрацииДокументовПлановыхНачислений.Дата В(&ДатыСобытий)
		               |	И ВремяРегистрацииДокументовПлановыхНачислений.Документ = &Документ";
					   
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл 
			ЗначенияВремениРегистрации.Вставить(Выборка.Дата, Выборка.ВремяРегистрации);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗначенияВремениРегистрации;	
		
КонецФункции

Функция ВремяРегистрацииДокумента(Регистратор, Знач ДатаСобытия) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДатаСобытия) Тогда 
		ДатаСобытия = ТекущаяДатаСеанса();
	КонецЕсли;
	
	МассивДат = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДатаСобытия);
	
	ЗначенияВремениРегистрации = ЗначенияВремениРегистрацииДокумента(Регистратор, МассивДат);
	
	ВремяРегистрации = ЗначенияВремениРегистрации.Получить(НачалоДня(ДатаСобытия));
	
	Возврат ВремяРегистрации;
	
КонецФункции

Процедура ОформлениеНесколькихДокументовНаОднуДатуДополнитьФорму(Форма, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт 
	
	Если ДобавлятьРеквизитыФормы Тогда
	
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РанееВведенныеДокументы", Новый ОписаниеТипов("СписокЗначений")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументыВведенныеПозже", Новый ОписаниеТипов("СписокЗначений")));
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
	
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
		
		Элементы = Форма.Элементы;
		ВведенныеНаДатуДокументыГруппа = Элементы.ВведенныеНаДатуДокументыГруппа;
		
		Если Элементы.Найти("РанееВведенныеДокументыГруппа") = Неопределено Тогда
			РанееВведенныеДокументыГруппа = Элементы.Добавить("РанееВведенныеДокументыГруппа", Тип("ГруппаФормы"), ВведенныеНаДатуДокументыГруппа);
			РанееВведенныеДокументыГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			РанееВведенныеДокументыГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
			РанееВведенныеДокументыГруппа.ОтображатьЗаголовок = Ложь;
		КонецЕсли;
		
		Если Элементы.Найти("НадписьРанееВведенныеДокументы") = Неопределено Тогда
			Элемент = Элементы.Добавить("НадписьРанееВведенныеДокументы", Тип("ДекорацияФормы"), РанееВведенныеДокументыГруппа);
			Элемент.Вид = ВидДекорацииФормы.Надпись;
			Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
			Элемент.Заголовок = Новый ФорматированнаяСтрока("");
			Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОткрытьРанееВведенныеДокументы");
		КонецЕсли;
		
		Если Элементы.Найти("ДокументыВведенныеПозжеГруппа") = Неопределено Тогда
			ДокументыВведенныеПозжеГруппа = Элементы.Добавить("ДокументыВведенныеПозжеГруппа", Тип("ГруппаФормы"), ВведенныеНаДатуДокументыГруппа);
			ДокументыВведенныеПозжеГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ДокументыВведенныеПозжеГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
			ДокументыВведенныеПозжеГруппа.ОтображатьЗаголовок = Ложь;
		КонецЕсли;
		
		Если Элементы.Найти("НадписьДокументыВведенныеПозже") = Неопределено Тогда
			Элемент = Элементы.Добавить("НадписьДокументыВведенныеПозже", Тип("ДекорацияФормы"), ДокументыВведенныеПозжеГруппа);
			Элемент.Вид = ВидДекорацииФормы.Надпись;
			Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
			Элемент.Заголовок = Новый ФорматированнаяСтрока("");
			Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОткрытьДокументыВведенныеПозже");
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекстНадписиОДокументахВведенныхНаДату(Форма, ВремяРегистрации, МассивСотрудников, Регистратор, ЧтениеБезОграничений = Истина, ИсправленныйДокумент = Неопределено) Экспорт 
	
	Если Не ЧтениеБезОграничений Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РанееВведенныеДокументыГруппа", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДокументыВведенныеПозжеГруппа", "Видимость", Ложь);
		Возврат;
	КонецЕсли;
	
	ДокументыНаДату = ВведенныеНаДатуДокументыПлановыхНачислений(ВремяРегистрации, МассивСотрудников, Регистратор, ИсправленныйДокумент);
	Форма.РанееВведенныеДокументы.ЗагрузитьЗначения(ДокументыНаДату.РанееВведенныеДокументы);
	Форма.ДокументыВведенныеПозже.ЗагрузитьЗначения(ДокументыНаДату.ДокументыВведенныеПозже);
	
	Если Форма.РанееВведенныеДокументы.Количество() > 1 Тогда 
		ТекстНадписиНачало = НСтр("ru='%1 уже проведены';uk='%1 вже проведені'") + " ";
		ТекстНадписиНачало = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиНачало, Формат(ВремяРегистрации, "ДЛФ=ДД"));
		ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(НСтр("ru='другие документы';uk='інші документи'"), , , , "ссылка");
		ТекстНадписиОкончание = НСтр("ru='При заполнении необходимо учитывать эти проведенные ранее документы.';uk='При заповненні необхідно враховувати ці проведені раніше документи.'");
		ТекстНадписиОкончание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиОкончание, Регистратор.Метаданные().Синоним);  
		ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ". ", ТекстНадписиОкончание);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьРанееВведенныеДокументы", "Заголовок", ТекстНадписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОткрытьРанееВведенныеДокументы", "Заголовок", НСтр("ru='Открыть документы';uk='Відкрити документи'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РанееВведенныеДокументыГруппа", "Видимость", Истина);
	ИначеЕсли Форма.РанееВведенныеДокументы.Количество() = 1 Тогда 
		ТекстНадписиНачало = НСтр("ru='%1 уже проведен документ';uk='%1 вже проведено документ'") + " ";
		ТекстНадписиНачало = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиНачало, Формат(ВремяРегистрации, "ДЛФ=ДД"));
		ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(Форма.РанееВведенныеДокументы[0].Значение.Метаданные().Синоним, , , , "ссылка");
		ТекстНадписиОкончание = НСтр("ru='При заполнении необходимо учитывать проведенный ранее документ.';uk='При заповненні необхідно враховувати проведений раніше документ.'");
		ТекстНадписиОкончание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиОкончание, Регистратор.Метаданные().Синоним);  
		ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ". ", ТекстНадписиОкончание);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьРанееВведенныеДокументы", "Заголовок", ТекстНадписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОткрытьРанееВведенныеДокументы", "Заголовок", Форма.РанееВведенныеДокументы[0].Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РанееВведенныеДокументыГруппа", "Видимость", Истина);
	Иначе 	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РанееВведенныеДокументыГруппа", "Видимость", Ложь);
	КонецЕсли;
	
	Если Форма.ДокументыВведенныеПозже.Количество() > 1 Тогда 
		ТекстНадписиНачало = НСтр("ru='После этого документа %1 проведены';uk='Після цього документа %1 проведено'") + " ";
		ТекстНадписиНачало = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиНачало, Формат(ВремяРегистрации, "ДЛФ=ДД"));
		ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(НСтр("ru='другие документы';uk='інші документи'"), , , , "ссылка");
		ТекстНадписиОкончание = НСтр("ru='Зарплата будет считаться на основании более поздних документов.';uk='Зарплата буде рахуватись на підставі пізніших документів.'");
		ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ". ", ТекстНадписиОкончание);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьДокументыВведенныеПозже", "Заголовок", ТекстНадписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОткрытьДокументыВведенныеПозже", "Заголовок", НСтр("ru='Открыть документы';uk='Відкрити документи'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДокументыВведенныеПозжеГруппа", "Видимость", Истина);
	ИначеЕсли Форма.ДокументыВведенныеПозже.Количество() = 1 Тогда 
		ТекстНадписиНачало = НСтр("ru='После этого документа %1 проведен документ';uk='Після цього документа %1 проведено документ'") + " ";
		ТекстНадписиНачало = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиНачало, Формат(ВремяРегистрации, "ДЛФ=ДД"));
		ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(Форма.ДокументыВведенныеПозже[0].Значение.Метаданные().Синоним, , , , "ссылка");
		ТекстНадписиОкончание = НСтр("ru='Зарплата будет считаться на основании более позднего документа.';uk='Зарплата буде рахуватись на підставі більш пізнього документа.'");
		ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ". ", ТекстНадписиОкончание);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьДокументыВведенныеПозже", "Заголовок", ТекстНадписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОткрытьДокументыВведенныеПозже", "Заголовок", Форма.ДокументыВведенныеПозже[0].Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДокументыВведенныеПозжеГруппа", "Видимость", Истина);
	Иначе 	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДокументыВведенныеПозжеГруппа", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ВведенныеНаДатуДокументыПлановыхНачислений(ВремяРегистрации, МассивСотрудников, Регистратор = Неопределено, ИсправленныйДокумент = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВремяРегистрации", ВремяРегистрации);
	Запрос.УстановитьПараметр("ДатаСобытия", НачалоДня(ВремяРегистрации));
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("Документ", Регистратор);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремяРегистрацииДокументовПлановыхНачислений.Документ,
	|	ВремяРегистрацииДокументовПлановыхНачислений.ВремяРегистрации
	|ПОМЕСТИТЬ ВТДокументыНаДату
	|ИЗ
	|	РегистрСведений.ВремяРегистрацииДокументовПлановыхНачислений КАК ВремяРегистрацииДокументовПлановыхНачислений
	|ГДЕ
	|	ВремяРегистрацииДокументовПлановыхНачислений.Дата = &ДатаСобытия
	|	И ВремяРегистрацииДокументовПлановыхНачислений.Сотрудник В(&МассивСотрудников)
	|	И ВремяРегистрацииДокументовПлановыхНачислений.Документ <> &Документ
	|	И ВремяРегистрацииДокументовПлановыхНачислений.Документ <> &ИсправленныйДокумент
	|	И ВремяРегистрацииДокументовПлановыхНачислений.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыНаДату.Документ
	|ИЗ
	|	ВТДокументыНаДату КАК ДокументыНаДату
	|ГДЕ
	|	ДокументыНаДату.ВремяРегистрации < &ВремяРегистрации
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыНаДату.Документ,
	|	ДокументыНаДату.ВремяРегистрации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыНаДату.ВремяРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыНаДату.Документ
	|ИЗ
	|	ВТДокументыНаДату КАК ДокументыНаДату
	|ГДЕ
	|	ДокументыНаДату.ВремяРегистрации > &ВремяРегистрации
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыНаДату.Документ,
	|	ДокументыНаДату.ВремяРегистрации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыНаДату.ВремяРегистрации";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДокументыНаДату = Новый Структура;
	ДокументыНаДату.Вставить("РанееВведенныеДокументы", РезультатыЗапроса[1].Выгрузить().ВыгрузитьКолонку("Документ"));
	ДокументыНаДату.Вставить("ДокументыВведенныеПозже", РезультатыЗапроса[2].Выгрузить().ВыгрузитьКолонку("Документ"));
	
	Возврат ДокументыНаДату;
	
КонецФункции

#КонецОбласти

#Область КорректировкаПериодаДействияНачислений

// Выполняет корректировку даты начала и окончания для начислений, не имеющих периода действия с учетом периода работы
// сотрудника.
//
Процедура СкорректироватьДатыНачисленийБезПериодаДействия(ТаблицаНачислений, ПериодРегистрации, ИмяПоляНачисления = "Начисление", РеквизитыНачислений = Неопределено, ПроверятьСторно = Ложь) Экспорт
	
	МассивНачислений = Новый Массив;
	МассивСотрудников = Новый Массив;
	УникальныеНачисления = Новый Соответствие;
	УникальныеСотрудники = Новый Соответствие;
	Для Каждого Строка Из ТаблицаНачислений Цикл
		Если ТипЗнч(Строка[ИмяПоляНачисления]) <> Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
			Продолжить;
		КонецЕсли;
		Если УникальныеНачисления[Строка[ИмяПоляНачисления]] = Неопределено Тогда
			МассивНачислений.Добавить(Строка[ИмяПоляНачисления]);
			УникальныеНачисления.Вставить(Строка[ИмяПоляНачисления], Истина);
		КонецЕсли;
		Если УникальныеСотрудники[Строка.Сотрудник] = Неопределено Тогда
			МассивСотрудников.Добавить(Строка.Сотрудник);
			УникальныеСотрудники.Вставить(Строка.Сотрудник, Истина);
		КонецЕсли;
	КонецЦикла;
	
	НачисленияБезПериодаДействия = Новый Соответствие;
	
	Если РеквизитыНачислений = Неопределено Тогда
		РеквизитыНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			МассивНачислений, "КатегорияНачисленияИлиНеоплаченногоВремени,ИспользованиеПериода");
	КонецЕсли;
	НачисленияБезПериодаДействия = Новый Соответствие;
	Для Каждого КлючИЗначение Из РеквизитыНачислений Цикл
		РеквизитыНачисления = КлючИЗначение.Значение;
		Если РеквизитыНачисления.ИспользованиеПериода <> Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия Тогда
			НачисленияБезПериодаДействия.Вставить(КлючИЗначение.Ключ, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Если НачисленияБезПериодаДействия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Получим дату приема, увольнения сотрудников.
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивСотрудников, "ДатаПриема,ДатаУвольнения,ГрафикРаботы", КонецМесяца(ПериодРегистрации));
	КадровыеДанныеСотрудников.Индексы.Добавить("Сотрудник");
	
	// Если это не пособие, то его необходимо ограничить еще и датами изменения применения плановых начислений.
	ДатыИзмененияПримененияПлановыхНачислений = ДатыИзмененияПримененияПлановыхНачислений(МассивСотрудников, ПериодРегистрации);
	КатегорииПособий = ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком();
	
	ЗаполнениеПериодаДействия = Новый Структура("ПериодДействия");
	ЗаполнениеДат = Новый Структура("ДатаНачала, ДатаОкончания");
	
	ВидУчетаРабочееВремя = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	
	Для Каждого Строка Из ТаблицаНачислений Цикл
		// Корректируем период действия начисления датами приема/увольнения.
		Если НачисленияБезПериодаДействия[Строка[ИмяПоляНачисления]] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ПроверятьСторно Тогда
			Если Строка.Сторно Тогда
				// Для сторно-записей не выполняем корректировку периода.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЗаполнениеДат, Строка);
		ЗаполнятьДаты = Истина;
		ПериодЗаполнен = ЗначениеЗаполнено(ЗаполнениеДат.ДатаНачала) И ЗначениеЗаполнено(ЗаполнениеДат.ДатаОкончания);
		ИспользованиеПериода = РеквизитыНачислений[Строка[ИмяПоляНачисления]].ИспользованиеПериода;
		Если ПериодЗаполнен И ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.НеИспользовать Тогда
			ЗаполнятьДаты = Ложь;
		КонецЕсли;
		// Разные строки могут относиться к разным месяцам.
		Месяц = НачалоМесяца(Строка.ДатаНачала);
		Если Не ЗначениеЗаполнено(Месяц) Тогда
			Месяц = ПериодРегистрации;
		КонецЕсли;
		Если ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
			// Начисления, рассчитываемые по базе прошлого периода, пока фиксируются (и включаются в базу) периодом регистрации.
			Месяц = ПериодРегистрации;
		КонецЕсли;
		НачалоМесяца = НачалоМесяца(Месяц);
		КонецМесяца = КонецМесяца(Месяц);
		ЗаполнениеПериодаДействия.ПериодДействия = Месяц;
		// Корректируем период начисления без явного обращения к полям.
		ЗаполнитьЗначенияСвойств(Строка, ЗаполнениеПериодаДействия);
		Если ЗаполнятьДаты Тогда
			ЗаполнениеДат.ДатаНачала = НачалоМесяца;
			ЗаполнениеДат.ДатаОкончания = КонецМесяца;
			ЗаполнитьЗначенияСвойств(Строка, ЗаполнениеДат);
		КонецЕсли;
		Если КадровыеДанныеСотрудников = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(Строка.Сотрудник, "Сотрудник");
		Если КадровыеДанныеСотрудника <> Неопределено Тогда
			// Если дата приема, попадает в текущий интервал.
			Если КадровыеДанныеСотрудника.ДатаПриема < КонецМесяца Тогда
				Строка.ДатаНачала = Макс(ЗаполнениеДат.ДатаНачала, КадровыеДанныеСотрудника.ДатаПриема);
			КонецЕсли;
			Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.ДатаУвольнения) И КадровыеДанныеСотрудника.ДатаУвольнения < КонецМесяца Тогда
				Если КадровыеДанныеСотрудника.ДатаУвольнения > ЗаполнениеДат.ДатаНачала Тогда
					ЗаполнениеДат.ДатаОкончания = Мин(ЗаполнениеДат.ДатаОкончания, КонецДня(КадровыеДанныеСотрудника.ДатаУвольнения));
					ЗаполнитьЗначенияСвойств(Строка, ЗаполнениеДат);
				КонецЕсли;
			КонецЕсли;
			// Заполняем график работы и вид учета времени, только если они не заполнены.
			ЗаполнениеГрафика = Новый Структура("ГрафикРаботы, ВидУчетаВремени");
			ЗаполнитьЗначенияСвойств(ЗаполнениеГрафика, Строка);
			Если Не ЗначениеЗаполнено(ЗаполнениеГрафика.ГрафикРаботы) Тогда
				ЗаполнениеГрафика.ГрафикРаботы = КадровыеДанныеСотрудника.ГрафикРаботы;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЗаполнениеГрафика.ВидУчетаВремени) Тогда
				ЗаполнениеГрафика.ВидУчетаВремени = ВидУчетаРабочееВремя;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Строка, ЗаполнениеГрафика);
		КонецЕсли;
		// Если начисление не является пособием, то ограничиваем его еще и датами изменения применения плановых начислений.
		РеквизитыНачисления = РеквизитыНачислений[Строка[ИмяПоляНачисления]];
		ОписаниеДатИзменения = ДатыИзмененияПримененияПлановыхНачислений[Строка.Сотрудник];
		Если ОписаниеДатИзменения <> Неопределено 
			И КатегорииПособий.Найти(РеквизитыНачисления.КатегорияНачисленияИлиНеоплаченногоВремени) = Неопределено Тогда
			Если ЗначениеЗаполнено(ОписаниеДатИзменения.ДатаНачала) Тогда
				Строка.ДатаНачала = Макс(ЗаполнениеДат.ДатаНачала, ОписаниеДатИзменения.ДатаНачала);
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеДатИзменения.ДатаОкончания) И ОписаниеДатИзменения.ДатаОкончания < КонецМесяца Тогда
				Если ОписаниеДатИзменения.ДатаОкончания > ЗаполнениеДат.ДатаНачала Тогда
					ЗаполнениеДат.ДатаОкончания = Мин(ЗаполнениеДат.ДатаОкончания, КонецДня(ОписаниеДатИзменения.ДатаОкончания));
					ЗаполнитьЗначенияСвойств(Строка, ЗаполнениеДат);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура СоздатьВТДатыИзмененияПримененияПлановыхНачислений(МенеджерВременныхТаблиц, ИмяВТСотрудники = "ВТСотрудникиПериоды") Экспорт
	
	// Получаем записи изменения применения за месяц, а также состояние на начало месяца.
	// Отбрасываем записи, фактически не меняющие состояния (где применение равно предыдущей записи).
	// Оставшиеся записи группируем по сотруднику, выбирая самые поздние даты "включения" и "выключения" применения.
	// Если в месяце несколько интервалов "включения"/"выключения" выбираем таким образом последний.
	// Если дата "выключения" раньше, чем дата "включения", считаем, что это дата от предыдущего "включения" и игнорируем ее.
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТСотрудники, "Сотрудник");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра("ПрименениеПлановыхНачислений", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ПрименениеПлановыхНачислений", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрименениеПлановыхНачислений.Сотрудник,
		|	ПрименениеПлановыхНачислений.ПериодЗаписи КАК Период,
		|	ПрименениеПлановыхНачислений.Применение
		|ПОМЕСТИТЬ ВТПрименениеПлановыхНачисленийСрезИДвижения
		|ИЗ
		|	ВТПрименениеПлановыхНачисленийСрезПоследних КАК ПрименениеПлановыхНачислений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПрименениеПлановыхНачислений.Сотрудник,
		|	ПрименениеПлановыхНачислений.Период,
		|	ПрименениеПлановыхНачислений.Применение
		|ИЗ
		|	ВТПрименениеПлановыхНачислений КАК ПрименениеПлановыхНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрименениеПлановыхНачислений.Сотрудник,
		|	ПрименениеПлановыхНачислений.Период,
		|	ПрименениеПлановыхНачислений.Применение,
		|	МАКСИМУМ(ПредыдущееСостояние.Период) КАК ДатаПредыдущегоСостояния
		|ПОМЕСТИТЬ ВТДатыПредыдущихСостояний
		|ИЗ
		|	ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПрименениеПлановыхНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПредыдущееСостояние
		|		ПО (ПредыдущееСостояние.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник)
		|			И (ПредыдущееСостояние.Период < ПрименениеПлановыхНачислений.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПрименениеПлановыхНачислений.Сотрудник,
		|	ПрименениеПлановыхНачислений.Период,
		|	ПрименениеПлановыхНачислений.Применение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыИзмененияПримененияПлановыхНачислений.Сотрудник,
		|	ДатыИзмененияПримененияПлановыхНачислений.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ДатыИзмененияПримененияПлановыхНачислений.ДатаОкончания > ДатыИзмененияПримененияПлановыхНачислений.ДатаНачала
		|			ТОГДА ДатыИзмененияПримененияПлановыхНачислений.ДатаОкончания
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДатыИзмененияПримененияПлановыхНачислений
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПрименениеПлановыхНачислений.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА ПрименениеПлановыхНачислений.Применение = ИСТИНА
		|					ТОГДА ПрименениеПлановыхНачислений.Период
		|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|			КОНЕЦ) КАК ДатаНачала,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА ПрименениеПлановыхНачислений.Применение = ЛОЖЬ
		|					ТОГДА ДОБАВИТЬКДАТЕ(ПрименениеПлановыхНачислений.Период, СЕКУНДА, -1)
		|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|			КОНЕЦ) КАК ДатаОкончания
		|	ИЗ
		|		ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПрименениеПлановыхНачислений
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПредыдущихСостояний КАК ДатыПредыдущихСостояний
		|			ПО (ДатыПредыдущихСостояний.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник)
		|				И (ДатыПредыдущихСостояний.Период = ПрименениеПлановыхНачислений.Период)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПредыдущиеСостояния
		|			ПО (ПредыдущиеСостояния.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник)
		|				И (ПредыдущиеСостояния.Период = ДатыПредыдущихСостояний.ДатаПредыдущегоСостояния)
		|	ГДЕ
		|		(ПредыдущиеСостояния.Применение ЕСТЬ NULL 
		|				ИЛИ ПредыдущиеСостояния.Применение <> ПрименениеПлановыхНачислений.Применение)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПрименениеПлановыхНачислений.Сотрудник) КАК ДатыИзмененияПримененияПлановыхНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПрименениеПлановыхНачисленийСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПрименениеПлановыхНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПрименениеПлановыхНачисленийСрезИДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДатыПредыдущихСостояний";
		
	Запрос.Выполнить();
	
КонецПроцедуры

// Определяет даты изменения применения плановых начислений для сотрудников в пределах месяца.
// Используется для ограничения периода начислений, выполняемых в целом за месяц.
//
// Параметры:
//	Сотрудники - массив сотрудников.
//	Месяц - месяц, в котором произошли изменения.
//
// Возвращаемое значение - соответствие, в котором ключом является сотрудник, 
//	а значением - структура описания дат с полями ДатаНачала и ДатаОкончания.
//
Функция ДатыИзмененияПримененияПлановыхНачислений(Сотрудники, Месяц)
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ДатаНачала = НачалоМесяца(Месяц);
		НоваяСтрока.ДатаОкончания = КонецМесяца(Месяц);
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.ДатаНачала КАК Период,
		|	СотрудникиПериоды.ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&СотрудникиПериоды КАК СотрудникиПериоды";
	
	Запрос.УстановитьПараметр("СотрудникиПериоды", ИзмеренияДаты);
	Запрос.Выполнить();
	
	СоздатьВТДатыИзмененияПримененияПлановыхНачислений(МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыИзмененияПримененияПлановыхНачислений.Сотрудник КАК Сотрудник,
		|	ДатыИзмененияПримененияПлановыхНачислений.ДатаНачала,
		|	ДатыИзмененияПримененияПлановыхНачислений.ДатаОкончания
		|ИЗ
		|	ВТДатыИзмененияПримененияПлановыхНачислений КАК ДатыИзмененияПримененияПлановыхНачислений
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДатыИзменения = Новый Соответствие;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеДат = Новый Структура("ДатаНачала, ДатаОкончания");
		ОписаниеДат.ДатаНачала = Выборка.ДатаНачала;
		ОписаниеДат.ДатаОкончания = Выборка.ДатаОкончания;
		ДатыИзменения.Вставить(Выборка.Сотрудник, ОписаниеДат);
	КонецЦикла;
	
	Возврат ДатыИзменения;
	
КонецФункции

#КонецОбласти


// Функция возвращает имя справочника обособленных подразделений,
// используемого для автоматического заполнения статистической отчетности.
//
// Пример:
//  Возврат "ПодразделенияОрганизаций";
//
Функция ИмяСправочникаОбособленныхПодразделений() Экспорт
	Возврат "ПодразделенияОрганизаций";
КонецФункции

// Функция возвращает имя реквизита справочника подразделений, который
// определяет, является ли подразделение обособленным (в трактовке Росстата).
// Используется для автоматического заполнения статистической отчетности.
//
// Тип реквизита - Булево.
// Если значение реквизита равно Истина - подразделение является обособленным.
// Если значение реквизита равно Ложь - подразделение не является обособленным.
//
// Пример:
//  Возврат "ИмеетНомерТерриториальногоОрганаРосстата";
//
Функция ИмяРеквизитаПризнакаОбособленногоПодразделения() Экспорт
	Возврат "ИмеетНомерТерриториальногоОрганаРосстата";
КонецФункции

// Процедура переопределяет обработчик подписки на событие "ЗаписьОбъектовРегламентированнойОтчетности*".
//
// Параметры: - (см. РегламентированнаяОтчетностьПереопределяемый.ЗаписьОбъектовРегламентированнойОтчетности).
//
Процедура ЗаписьОбъектовРегламентированнойОтчетности(Ссылка, Отказ, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ЗаписьОбъектовРегламентированнойОтчетности(Ссылка, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоказателейСдельногоЗаработка(ВидРасчетаИнфо, СтрокаНачислений, РежимРаботы, ДокументСсылка = Неопределено)
	
	Если РежимРаботы = 0 Или РежимРаботы = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПоказательСдельногоЗаработка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок");
	
	Если ПоказательСдельногоЗаработка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикПоказателей = 1;
	Для Каждого СтрокаПоказателя Из ВидРасчетаИнфо.Показатели Цикл
		Если СтрокаПоказателя.Показатель = ПоказательСдельногоЗаработка Тогда
			СтрокаНачислений["КомандаРасшифровки" + СчетчикПоказателей] = НСтр("ru='Подробнее';uk='Докладніше'");
		КонецЕсли;			
		СчетчикПоказателей = СчетчикПоказателей + 1;
	КонецЦикла;
	
КонецПроцедуры

#Область УниверсальныеПроцедуры

#Область УправлениеОтображениемГруппыФормы

// Устанавливает свойство ИмяСвойства группы или таблицы формы с именем ИмяГруппы в значение Значение, а также
// устанавливает значение этого свойства у всех подчиненных элементов (рекурсивно). Поддерживается установка 
// свойств Видимость, Доступность, ТолькоПросмотр.
//
// Параметры:
//  ЭлементыФормы - свойство ЭлементыФормы управляемой формы.
//  ИмяГруппы     - Строка       - имя группы или таблицы формы.
//  ИмяСвойства   - Строка       - имя устанавливаемого свойства элемента формы (Видимость, Доступность,
//                                 ТолькоПросмотр).
//  Значение      - Произвольный - новое значение элемента.
// 
Процедура УстановитьОтображениеГруппыФормы(ЭлементыФормы, ИмяГруппы, ИмяСвойства, Значение) Экспорт 

	Группа = ЭлементыФормы.Найти(ИмяГруппы);
	
	Если Группа = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	СвойстваЭлементовФормы = Новый Соответствие;
	
	СписокСвойств = Новый Структура("Видимость, Доступность, ТолькоПросмотр");
	СвойстваЭлементовФормы.Вставить(Тип("ГруппаФормы"), СписокСвойств);
	СвойстваЭлементовФормы.Вставить(Тип("ТаблицаФормы"), СписокСвойств);
	СвойстваЭлементовФормы.Вставить(Тип("ПолеФормы"), СписокСвойств);
	
	СписокСвойств = Новый Структура("Видимость, Доступность");
	СвойстваЭлементовФормы.Вставить(Тип("КнопкаФормы"), СписокСвойств);
	СвойстваЭлементовФормы.Вставить(Тип("ДекорацияФормы"), СписокСвойств);
	
	Группа[ИмяСвойства] = Значение;
	
	УстановитьОтображениеПодчиненныхЭлементовГруппыФормы(Группа, ИмяСвойства, Значение, СвойстваЭлементовФормы);
	
КонецПроцедуры

Процедура УстановитьОтображениеПодчиненныхЭлементовГруппыФормы(Группа, ИмяСвойства, Значение, СвойстваЭлементовФормы)
	
	Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл 
		
		ТипЭлемента = ТипЗнч(Элемент);
		СвойстваЭлемента = СвойстваЭлементовФормы[ТипЭлемента];
		
		Если СвойстваЭлемента.Свойство(ИмяСвойства) Тогда 
			Элемент[ИмяСвойства] = Значение;
		КонецЕсли;
		
		Если ТипЭлемента = Тип("ГруппаФормы") Или ТипЭлемента = Тип("ТаблицаФормы") Тогда 
			УстановитьОтображениеПодчиненныхЭлементовГруппыФормы(Элемент, ИмяСвойства, Значение, СвойстваЭлементовФормы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Изменить реквизиты формы по пакету реквизитов, накопленных при инициализации формы
// Вызывается в формах документов, реквизиты которых дорабатываются теми или иными механизмами
// Вызов выполняется между процедурами сбора реквизитов для добавления (например, НачатьИнициализациюФормы)
// и процедурой формирования дерева элементов формы для добавленных реквизитов (например, ЗавершитьИнициализациюФормы).
Процедура ИзменитьРеквизитыФормы(ЭтаФорма) Экспорт
	
	// Достаем их формы заботливо подготовленные списки.
	МассивРеквизитыКДобавлению = ЭтаФорма.РеквизитыКДобавлению.ВыгрузитьЗначения();
	МассивРеквизитыКУдалению = ЭтаФорма.РеквизитыКУдалению.ВыгрузитьЗначения();
	
	Если МассивРеквизитыКДобавлению.Количество() = 0 И МассивРеквизитыКУдалению.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	// Заполняем массив существующих реквизитов формы.
	// Определяем пути, содержащиеся в МассивРеквизитыКДобавлению
	СписокПутей	= Новый Массив;
	Для каждого РеквизитКДобавлению Из МассивРеквизитыКДобавлению Цикл
		Если СписокПутей.Найти(РеквизитКДобавлению.Путь) = Неопределено Тогда
			СписокПутей.Добавить(РеквизитКДобавлению.Путь);
		КонецЕсли;
	КонецЦикла; 
	// Заполняем все реквизиты с учетом табличных частей.
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, МассивИменРеквизитовФормы);
	Для каждого ПутьКДанным Из СписокПутей Цикл
		Если ЗначениеЗаполнено(ПутьКДанным) Тогда
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, МассивИменРеквизитовФормы, ПутьКДанным);
		КонецЕсли;
	КонецЦикла; 
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(ЭтаФорма, МассивРеквизитыКДобавлению, МассивИменРеквизитовФормы, МассивРеквизитыКУдалению);
	
КонецПроцедуры

// Возвращает организации с налоговыми параметрами (ИНН, КПП) для подготовки 
// печатных форм документов.
//
// Параметры:
//  ОрганизацииИДаты  - ТаблицаЗначений - Таблица значений вида:
//		* Первая колонка - СправочникСсылка.Организации - Организация,
//		* Вторая колонка - Дата - На которую следует получить параметры.
//
// Возвращаемое значение:
//   Соответствие   - Соответствие организаций и параметров этих организаций вида:
//		* Ключ - СправочникСсылка.Организации - Организация,
//		* Значение - Структура - Структура значений параметров вида:
//			** Ключ - Строка - Наименования параметров - "ИНН", "КПП",
//			** Значение - Строка - Значения параметров соответствующих ключу.
//
Функция ПолучитьИННиКППОрганизаций(ОрганизацииИДаты) Экспорт

	ОрганизацииИСведенияОНих = Новый Соответствие;
	
	ЗапрашиваемыеПоОрганизацииСведения = Новый СписокЗначений;
	ЗапрашиваемыеПоОрганизацииСведения.Добавить("", "ИННЮЛ");
	ЗапрашиваемыеПоОрганизацииСведения.Добавить("", "КППЮЛ");
	
	Для каждого ОрганизацияИДата Из ОрганизацииИДаты Цикл
	
		СведенияОбОрганизацииПолученные = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(ОрганизацияИДата[0], 
			ОрганизацияИДата[1],
			ЗапрашиваемыеПоОрганизацииСведения);
		СведенияОбОрганизации = Новый Структура("ИНН, КПП");
		СведенияОбОрганизацииПолученные.Свойство("ИННЮЛ", СведенияОбОрганизации.ИНН);
		СведенияОбОрганизацииПолученные.Свойство("КППЮЛ", СведенияОбОрганизации.КПП);
		ОрганизацииИСведенияОНих.Вставить(ОрганизацияИДата[0], СведенияОбОрганизации);
		
	КонецЦикла;

	Возврат ОрганизацииИСведенияОНих;
	
КонецФункции

// Формирует пустую таблицу значений - входной параметр "ОрганизацииИДаты" для
// функции "ПолучитьИННиКППОрганизаций()"
//
// Возвращаемое значение:
//  ОрганизацииИДаты  - ТаблицаЗначений - Таблица значений вида:
//		* Первая колонка - СправочникСсылка.Организации - Организация,
//		* Вторая колонка - Дата - На которую следует получить параметры.
//
Функция ПараметрОрганизацииИДатыДляПолучитьИННиКППОрганизаций() Экспорт

	ОрганизацииИДаты = Новый ТаблицаЗначений;
	ОрганизацииИДаты.Колонки.Добавить("Организация");
	ОрганизацииИДаты.Колонки.Добавить("ДатаСведенийОрганизации");
	
	Возврат ОрганизацииИДаты;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Печать
//

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	ЗарплатаКадрыБазовый.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	
	СписокОбъектов.Добавить(Справочники.ГрафикиРаботыСотрудников);
	СписокОбъектов.Добавить(Справочники.Должности);
	СписокОбъектов.Добавить(Справочники.ПодразделенияОрганизаций);
	СписокОбъектов.Добавить(Справочники.ПоказателиРасчетаЗарплаты);
	СписокОбъектов.Добавить(Справочники.СоставыВоеннослужащих);
	СписокОбъектов.Добавить(Справочники.ТарифыПлатежныхАгентов);
	СписокОбъектов.Добавить(Справочники.ШтатноеРасписание);
	СписокОбъектов.Добавить(Документы.АктПриемкиВыполненныхРаботОказанныхУслуг);
	СписокОбъектов.Добавить(Документы.АктПроверкиСтраховыхВзносов);
	СписокОбъектов.Добавить(Документы.БольничныйЛист);
	СписокОбъектов.Добавить(Документы.БронированиеГражданПребывающихВЗапасе);
	СписокОбъектов.Добавить(Документы.ВводНачальныхОстатковОтпусков);
	СписокОбъектов.Добавить(Документы.ВедомостьНаВыплатуЗарплатыПеречислением);
	СписокОбъектов.Добавить(Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком);
	СписокОбъектов.Добавить(Документы.ВозвратИзОтпускаПоУходуЗаРебенком);
	СписокОбъектов.Добавить(Документы.ВходящаяСправкаОЗаработкеДляРасчетаПособий);
	СписокОбъектов.Добавить(Документы.ВыплатаБывшимСотрудникам);
	СписокОбъектов.Добавить(Документы.ГрафикОтпусков);
	СписокОбъектов.Добавить(Документы.ДанныеДляРасчетаЗарплаты);
	СписокОбъектов.Добавить(Документы.ДоговорАвторскогоЗаказа);
	СписокОбъектов.Добавить(Документы.ДоговорЗаймаСотруднику);
	СписокОбъектов.Добавить(Документы.ДоговорРаботыУслуги);
	СписокОбъектов.Добавить(Документы.ДоходВНатуральнойФорме);
	СписокОбъектов.Добавить(Документы.ЕдиновременноеПособиеЗаСчетФСС);
	СписокОбъектов.Добавить(Документы.ИзменениеАванса);
	СписокОбъектов.Добавить(Документы.ИзменениеГрафикаРаботыСписком);
	СписокОбъектов.Добавить(Документы.ИзменениеКвалификационногоРазряда);
	СписокОбъектов.Добавить(Документы.ИзменениеОплатыТруда);
	СписокОбъектов.Добавить(Документы.ИзменениеПлановыхНачислений);
	СписокОбъектов.Добавить(Документы.ИзменениеУсловийДоговораЗаймаСотруднику);
	СписокОбъектов.Добавить(Документы.ИзменениеУсловийИсполнительногоЛиста);
	СписокОбъектов.Добавить(Документы.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком);
	СписокОбъектов.Добавить(Документы.ИзменениеШтатногоРасписания);
	СписокОбъектов.Добавить(Документы.ИндексацияЗаработка);
	СписокОбъектов.Добавить(Документы.ИндексацияШтатногоРасписания);
	СписокОбъектов.Добавить(Документы.ИндивидуальныйГрафик);
	СписокОбъектов.Добавить(Документы.КадровыйПереводСписком);
	СписокОбъектов.Добавить(Документы.Командировка);
	СписокОбъектов.Добавить(Документы.КомандировкиСотрудников);
	СписокОбъектов.Добавить(Документы.КомпенсацияЗаЗадержкуЗарплаты);
	СписокОбъектов.Добавить(Документы.ЛистокСообщенияДляВоенкомата);
	СписокОбъектов.Добавить(Документы.МатериальнаяПомощь);
	СписокОбъектов.Добавить(Документы.ИзменениеМестРаботы);
	СписокОбъектов.Добавить(Документы.НачальнаяЗадолженностьПоЗарплате);
	СписокОбъектов.Добавить(Документы.НачальнаяШтатнаяРасстановка);
	СписокОбъектов.Добавить(Документы.НачислениеЗаПервуюПоловинуМесяца);
	СписокОбъектов.Добавить(Документы.НазначениеПлановогоНачисления);
	СписокОбъектов.Добавить(Документы.ОплатаПоСреднемуЗаработку);
	СписокОбъектов.Добавить(Документы.Отгул);
	СписокОбъектов.Добавить(Документы.ОтменаБронированияГражданПребывающихВЗапасе);
	СписокОбъектов.Добавить(Документы.ОтменаДоплатыДоСреднегоЗаработка);
	СписокОбъектов.Добавить(Документы.ОтменаСовмещения);
	СписокОбъектов.Добавить(Документы.ОтпускаСотрудников);
	СписокОбъектов.Добавить(Документы.ОтпускБезСохраненияОплаты);
	СписокОбъектов.Добавить(Документы.ОтпускПоУходуЗаРебенком);
	СписокОбъектов.Добавить(Документы.ПереводКДругомуРаботодателю);
	СписокОбъектов.Добавить(Документы.ПеремещениеВДругоеПодразделение);
	СписокОбъектов.Добавить(Документы.ПеремещениеМеждуТерриториями);
	СписокОбъектов.Добавить(Документы.ПереносОтпуска);
	СписокОбъектов.Добавить(Документы.ПостоянноеУдержаниеВПользуТретьихЛиц);
	СписокОбъектов.Добавить(Документы.Премия);
	СписокОбъектов.Добавить(Документы.ПриемНаРаботуСписком);
	СписокОбъектов.Добавить(Документы.ПризПодарок);
	СписокОбъектов.Добавить(Документы.ПриказНаДоплатуДоСреднегоЗаработка);
	СписокОбъектов.Добавить(Документы.ПрогулНеявка);
	СписокОбъектов.Добавить(Документы.ПродлениеКонтрактаДоговора);
	СписокОбъектов.Добавить(Документы.ПростойСотрудников);
	СписокОбъектов.Добавить(Документы.РаботаВВыходныеИПраздничныеДни);
	СписокОбъектов.Добавить(Документы.РаботаСверхурочно);
	СписокОбъектов.Добавить(Документы.РазовоеНачисление);
	СписокОбъектов.Добавить(Документы.РаспределениеОсновногоЗаработка);
	СписокОбъектов.Добавить(Документы.РегистрацияПереработок);
	СписокОбъектов.Добавить(Документы.РегистрацияПрочихДоходов);
	СписокОбъектов.Добавить(Документы.Совмещение);
	СписокОбъектов.Добавить(Документы.СторнированиеНачислений);
	СписокОбъектов.Добавить(Документы.ТабельУчетаРабочегоВремени);
	СписокОбъектов.Добавить(Документы.УвольнениеСписком);
	СписокОбъектов.Добавить(Документы.УдержаниеВСчетРасчетовПоПрочимОперациям);
	СписокОбъектов.Добавить(Документы.УдержаниеПрофсоюзныхВзносов);
	СписокОбъектов.Добавить(Документы.УтверждениеТарифнойСетки);
	СписокОбъектов.Добавить(Документы.УтверждениеШтатногоРасписания);
	СписокОбъектов.Добавить(Обработки.ГрупповоеРедактированиеНачислений);
	СписокОбъектов.Добавить(Обработки.ПлатежиПоРезультатамРасчетаЗарплаты);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроизвольныеКадровыеПриказы");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЗаймыСотрудникамВХО");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетСтраховыхВзносовВХО");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Подработки");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Дивиденды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Дивиденды");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеЗарплатыВФинансовомУчете");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетНДФЛВХО");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетДепонированнойЗарплатыВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплатыВХО");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХОРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиВХОРасширенный");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличныхЧастейВедомостей(Знач Объект, Отказ) Экспорт
	
	Для каждого Запись ИЗ Объект.Состав Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("ФизическоеЛицо", Запись.ФизическоеЛицо);
		ТаблицаПоФизЛицу = Объект.Зарплата.НайтиСтроки(Отбор);
		Для нСтроки = 1 По ТаблицаПоФизЛицу.Количество() Цикл
			Результат = ГруппаНачислений(ТаблицаПоФизЛицу[нСтроки-1].ГруппаУчетаНачислений);
			Если Результат <> "" Тогда
				Сообщить("В строке №"+Строка(нСтроки)+" таблицы зарплата по сотруднику "+ТаблицаПоФизЛицу[нСтроки-1].Сотрудник+" не заполнена группа учета начислений");
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		Если НЕ Отказ Тогда
			ТаблицаПоФизЛицу = Объект.НДФЛ.НайтиСтроки(Отбор);
			Для нСтроки = 1 По ТаблицаПоФизЛицу.Количество() Цикл
				Результат = ГруппаУдержаний(ТаблицаПоФизЛицу[нСтроки-1]);
				Если Результат <> "" Тогда
					Сообщить("В строке №"+Строка(нСтроки)+" таблицы НДФЛ по сотруднику "+ТаблицаПоФизЛицу[нСтроки-1].ФизическоеЛицо+" не " + ?(Результат = "ГруппаУчетаУдержаний", "заполнена группа учета удержаний",?(Результат = "КодДохода","заполнен код дохода", "заполнен налоговый период")));
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

Функция ГруппаНачислений (Группа)
	Если Группа = Справочники.ГруппыУчетаНачисленийИУдержаний.ПустаяСсылка() Тогда
		Возврат "Ошибка!"; 	
	Иначе	
	    Возврат "";
	КонецЕсли;	
КонецФункции

Функция ГруппаУдержаний (Группа)
	Если Группа.ГруппаУчетаУдержаний = Справочники.ГруппыУчетаНачисленийИУдержаний.ПустаяСсылка() Тогда
		Возврат "ГруппаУчетаУдержаний!"; 	
	ИначеЕсли Группа.КодДохода = Справочники.ВидыДоходовНДФЛ.ПустаяСсылка() Тогда
		Возврат "КодДохода";
	ИначеЕсли Группа.ПериодВзаиморасчетов = Дата("00010101000000") Тогда
		Возврат "Дата";
	Иначе	
	    Возврат "";
	КонецЕсли;	
КонецФункции


#КонецОбласти

#КонецОбласти

#КонецОбласти