
#Область ПрограммныйИнтерфейс

// Возвращает дату передачи выплаты пособий в ФСС.
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//	Дата
//
Функция ДатаПередачиФССВыплатыПособий(Организация) Экспорт

	Возврат Неопределено
	
КонецФункции

// Определяет по статусу является ли объект редактируемым или нет 
//
// Параметры
//  Статус - Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий
//
// Возвращаемое значение:
//    Булево - истина, если статус позволяет редактировать документ.
//
Функция СтатусПозволяетРедактироватьДокумент(Статус) Экспорт
	СписокСтатусовПозволяющихРедактироватьДокумент = Новый Массив;
	СписокСтатусовПозволяющихРедактироватьДокумент.Добавить(Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПустаяСсылка());
	СписокСтатусовПозволяющихРедактироватьДокумент.Добавить(Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ВРаботе);
	СписокСтатусовПозволяющихРедактироватьДокумент.Добавить(Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.Подготовлен);
	СписокСтатусовПозволяющихРедактироватьДокумент.Добавить(Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.НеПринятФСС);
	СписокСтатусовПозволяющихРедактироватьДокумент.Добавить(Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.Аннулирован);
	
	Возврат СписокСтатусовПозволяющихРедактироватьДокумент.Найти(Статус) <> Неопределено;	
	
КонецФункции 

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность).
//
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	

КонецПроцедуры

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности создания новый объектов из формы Отчетность
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений -  (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности).
//		
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьПризнакВыплачиваетсяФСССуществующихДокументов(МенеджерВременныхТаблиц) Экспорт
	
	ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ЗаполнитьПризнакВыплачиваетсяФСССуществующихДокументов(МенеджерВременныхТаблиц);
	
КонецПроцедуры

Функция ДопустимыеЗначенияРайонногоКоэффициента() Экспорт
	
	ДопустимыеЗначенияРайонногоКоэффициента = Новый Массив;
	
	ROWSET 	= КорневойЭлементРеестраПилотногоПроектаФСС();			
	ROW 	= ЭлементРеестраПилотногоПроектаФСС(ROWSET);
	ФасетыРК = ROW.Свойства().Получить("KF_REG").Тип.Фасеты.Перечисления;
	
	Для Каждого Фасет Из ФасетыРК Цикл
		Если ПустаяСтрока(Фасет.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ПриведенноеЗначение = Число(Фасет.Значение) / 100;
		
		ДопустимыеЗначенияРайонногоКоэффициента.Добавить(ПриведенноеЗначение);
		
	КонецЦикла; 
	
	Возврат ДопустимыеЗначенияРайонногоКоэффициента;	
	
КонецФункции 

Функция КатегорииНачисленийПособийПоПрямымВыплатамФСС() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.КатегорииНачисленийПособийПоПрямымВыплатамФСС();	
	
КонецФункции

Функция ПособиеПлатитУчастникПилотногоПроекта(Организация, ДатаВыплатыПособия) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Функция - Проверить выплату пособия участником пилотного проекта ФСС
//
// Параметры:
//  Организация	 - 	СправочникСсылка.Организации - ссылка на организацию выплаты которой проверяются
//  Пособия		 - 	Таблица значение, колонки: НомерСтроки, Начисление, ДатаНачала 
// 
// Возвращаемое значение:
//  НайденныеОшибки - Соответствие. Ключ соответствия - номер строки из таблицы Пособия, значение - текст ошибки
//
Функция ПроверитьОплатуПособийУчастникомПилотногоПроектаФСС(Организация, Пособия) Экспорт
	
	НайденныеОшибки = Новый Соответствие();
	
	Если Пособия.Количество() = 0 Тогда
		Возврат НайденныеОшибки;
	КонецЕсли;
	
	ДатаПередачиФССВыплатыПособий = ДатаПередачиФССВыплатыПособий(Организация);
	
	Если Не ЗначениеЗаполнено(ДатаПередачиФССВыплатыПособий) Тогда
		Возврат НайденныеОшибки;
	КонецЕсли;
	
	КатегорииНачисленийПособийПоПрямымВыплатамФСС = КатегорииНачисленийПособийПоПрямымВыплатамФСС();
	Для каждого Пособие Из Пособия Цикл
		ОписаниеНачисления = ЗарплатаКадрыПовтИсп.ПолучитьИнформациюОВидеРасчета(Пособие.Начисление);
		Если КатегорииНачисленийПособийПоПрямымВыплатамФСС.Найти(ОписаниеНачисления.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено
			И Пособие.ДатаНачала >= ДатаПередачиФССВыплатыПособий
			И Пособие.Результат > 0 Тогда
			Текст = НСтр("ru='Пособие (%1 с %2 по %3) не может быть начислено в организации - участнике пилотного проекта по прямым выплатам пособий.';uk='Допомога (%1 з %2 по %3) не може бути нарахована в організації - учаснику пілотного проекту за прямими виплатами допомог.'");	
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Пособие.Начисление, Формат(Пособие.ДатаНачала, "ДЛФ=D"), Формат(Пособие.ДатаОкончания, "ДЛФ=D"));
			НайденныеОшибки.Вставить(Пособие.НомерСтроки, Текст); 
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеОшибки;
	
КонецФункции

// Функция подготавливает пустую таблицу для механизма проверки оплаты пособий участником пилотного проекта ФСС
// 
// Возвращаемое значение:
//  Таблица - ТаблицаЗначений
//
Функция ПустаяТаблицаДляПроверкиОплатыПособийУчастникомПилотногоПроектаФСС() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерСтроки");
	Таблица.Колонки.Добавить("Начисление");
	Таблица.Колонки.Добавить("ДатаНачала");
	Таблица.Колонки.Добавить("ДатаОкончания");
	Таблица.Колонки.Добавить("Результат");

	Возврат Таблица;
	
КонецФункции 

#Область БлокФункцийПервоначальногоЗаполненияИОбновленияИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
		
КонецПроцедуры	

#КонецОбласти   

// Определяет есть ли в массиве начислений пособия оплачиваемые за счет ФСС 
//
// Параметры
//  МассивНачислений - массив или список значений содержащий виды расчетов
//
// Возвращаемое значение:
//    Булево - истина, если в массиве начислений есть пособия за счет ФСС.
//
Функция КоллекцияСодержитПособияЗаСчетФСС(МассивНачислений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка В(&МассивНачислений)
	|	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&МассивКатегорий)";
	Запрос.УстановитьПараметр("МассивНачислений", МассивНачислений);
	Запрос.УстановитьПараметр("МассивКатегорий", ПрямыеВыплатыПособийСоциальногоСтрахования.КатегорииНачисленийПособийПоПрямымВыплатамФСС());
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаявлениеРасчетВФСС

Функция ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Месяц, ФондСоциальногоСтрахования, Организация, СписокСотрудников, Ссылка, ОплатаДнейУходаЗаДетьмиИнвалидами = Неопределено) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Месяц, ФондСоциальногоСтрахования, Организация, СписокСотрудников, Ссылка, ОплатаДнейУходаЗаДетьмиИнвалидами);
	
КонецФункции 

Функция ОписаниеФиксацииРеквизитовЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ОписаниеФиксацииРеквизитовЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов();
	
КонецФункции 

Функция ИспользуетсяЗаполнениеЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ИспользуетсяЗаполнениеДокументаЗаявлениеРасчетВФСС();
	
КонецФункции 

#КонецОбласти

Функция ДанныеЗаполненияРасходовНаПогребение(Месяц, ФондСоциальногоСтрахования, Организация, СписокСотрудников = Неопределено, Ссылка, ЕдиновременноеПособие = Неопределено) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ДанныеЗаполненияРасходовНаПогребение(Месяц, ФондСоциальногоСтрахования, Организация, СписокСотрудников, Ссылка, ЕдиновременноеПособие);
	
КонецФункции


#Область РаботаСXDTO

Функция URIПространстваИменРеестровФСС() Экспорт
	
	Возврат "http://pilot.fss.ru/1.7";	
	
КонецФункции 

Функция КорневойЭлементРеестраПилотногоПроектаФСС() Экспорт
	
	URIПространстваИменРеестровФСС 	= URIПространстваИменРеестровФСС();
	ПакетXDTOРеестровФСС 			= ФабрикаXDTO.Пакеты.Получить(URIПространстваИменРеестровФСС);
	ТипROWSET 						= ПакетXDTOРеестровФСС.КорневыеСвойства.Получить("ROWSET").Тип;
	
	Возврат ФабрикаXDTO.Создать(ТипROWSET);
	
КонецФункции 

Функция ЭлементРеестраПилотногоПроектаФСС(КорневойXDTOЭлемент) Экспорт
	
	ТипROW = КорневойXDTOЭлемент.Свойства().Получить("ROW").Тип;
	
	Возврат ФабрикаXDTO.Создать(ТипROW);
	
КонецФункции 

Функция СписокЭлементовРеестраПилотногоПроектаФСС(ROWSET) Экспорт
	
	Возврат ROWSET["ROW"];
	
КонецФункции 

Функция ЗаписатьРеестрВСтрокуXML(ROWSET) Экспорт
	
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML();
	ФабрикаXDTO.ЗаписатьXML(ПотокВыгрузкиXML, ROWSET, "ROWSET");
	СтрокаXML = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	УдалитьURIПространстваИменРеестровФССИзСтрокиXML(СтрокаXML);
	
	Возврат СтрокаXML;
	
КонецФункции

Процедура УдалитьURIПространстваИменРеестровФССИзСтрокиXML(СтрокаXML) Экспорт
	
	АтрибутXMLNS = "xmlns=""" + URIПространстваИменРеестровФСС() + """";
	СтрокаXML = СтрЗаменить(СтрокаXML, АтрибутXMLNS, ""); 
	
КонецПроцедуры 

#КонецОбласти

Функция ЗапросПоСтруктуре(Структура) Экспорт
	
	Запрос = Новый Запрос;  
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ШаблонПоля = " &#Парам# КАК #Парам#,";
	
	Текст = "ВЫБРАТЬ #Поля#
	|	ПОМЕСТИТЬ ВТВторичныеДанные";
	
	Поля = "";
	
	Для каждого Поле Из Структура Цикл
		Поля = Поля + Символы.ПС + СтрЗаменить(ШаблонПоля, "#Парам#", Поле.Ключ);
		Запрос.Параметры.Вставить(Поле.Ключ);
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Поля, 1);
	Запрос.Текст = СтрЗаменить(Текст, "#Поля#", Поля);
	
	ЗаполнитьЗначенияСвойств(Запрос.Параметры, Структура); 
	
	Возврат Запрос
	
КонецФункции 

Функция ЗапросПоСтрокеПолей(СтрокаПолей) Экспорт
	
	Запрос = Новый Запрос;  
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ШаблонПоля = " ЕстьNULL(&#Парам#, """") КАК #Парам#,";
	
	Текст = "ВЫБРАТЬ #Поля#
	|	ПОМЕСТИТЬ ВТВторичныеДанные";
	
	Поля = "";
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПолей);
	Для каждого Поле Из МассивПолей Цикл
		Поля = Поля + Символы.ПС + СтрЗаменить(ШаблонПоля, "#Парам#", Поле);
		Запрос.Параметры.Вставить(Поле);
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Поля, 1);
	Запрос.Текст = СтрЗаменить(Текст, "#Поля#", Поля);
	
	Возврат Запрос
	
КонецФункции 

#КонецОбласти
