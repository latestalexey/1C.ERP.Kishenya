
#Область ПрограммныйИнтерфейс

//Создает список доступных для создания планов обмена
Процедура СписокПлановОбмена(ПланыОбменаПодсистемы) Экспорт
	
	//++ НЕ УТКА
	ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.ОбменУправлениеПредприятиемДокументооборот);
	//-- НЕ УТКА
	//++ НЕ УТ
	//-- НЕ УТ
	
КонецПроцедуры

//Возвращает признак доступности плана обмена, для базовой или проф версии
Функция ПроверкаВозможностиСозданияУзлаОбмена(ПланОбмена) Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат ДоступностьПланаОбменаВБазовойВерсии(ПланОбмена.Имя);
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Блокирует изменение настроек узла плана обмена
//
Процедура УстановитьДоступностьНастроекУзлаИнформационнойБазы(Форма) Экспорт
	
	Если ОбменДаннымиПовтИспУТУП.ЭтоПодчиненныйУзелРИБСОтбором() Тогда
	
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаПояснениеБлокировки",
			"Видимость",
			Истина);

		Для Каждого ЭлементФормы Из Форма.Элементы Цикл
			
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") Тогда
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Форма.Элементы,
					ЭлементФормы.Имя,
					"Доступность",
					Ложь);
					
			КонецЕсли;
				
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для точной идентификации имени этой конфигурации при настройке 
// синхронизации данных в модели сервиса.
// В случае если данная конфигурация разработана на основе оригинальной конфигурации
// и должна поддерживать обмен с другими прикладными решениями с помощью плана обмена,
// взятого из оригинальной конфигурации, то следует вернуть имя оригинальной конфигурации.
// Например, для конфигурации МояБухгалтерия, которая является доработанной конфигурацией БухгалтерияПредприятия,
// следует вернуть БухгалтерияПредприятия.
//
// Используется только для планов обмена в модели сервиса.
//
// Возвращаемое значение:
//	Строка - имя этой или другой конфигурации, от имени которой выполняется обмен данными
//			(имя конфигурации как задано в метаданных).
//
// Пример:
//  Возврат "БухгалтерияПредприятия";
//
Функция ИмяКонфигурацииИсточника() Экспорт
 	Возврат "BASERP";
КонецФункции

Процедура РегистрацияИзмененияДляНачальнойВыгрузки(Получатель, СтандартнаяОбработка, Отбор) Экспорт
	
	
КонецПроцедуры

// Возвращает признак наличия действующих обменов, использующих формирование договоров по заказам.
// 
// Возвращаемое значение:
//  Булево - признак наличия узлов
//
Функция ЕстьОбменыСФормированиемДоговоровПоЗаказам() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Информирует пользователя о запрете создания или изменения объекта в этой 
// информационной базе
Процедура КонтрольСозданияДокументовВРаспределеннойИБ(Объект, Отказ) Экспорт
	Возврат;
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность редактирования реквизитов
// с помощью экспортной функции ПолучитьБлокируемыеРеквизитыОбъекта.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Запрет редактирования реквизитов объектов";
//                            В качестве значения - пустую строку.
//
// Пример: 
//   Объекты.Вставить(Метаданные.Документы.ЗаказПокупателя.ПолноеИмя(), "");
//
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	//Заглушка
КонецПроцедуры

// Возвращает значение ссылки управленческой организации 
// для настройки отбора, при настройке через внешнее соединение
//
// Возвращаемое значение:
//  Строка - идентификатор ссылки управленческой организации
//
Функция СсылкаУправленческойОрганизации() Экспорт
	Возврат ЗначениеВСтрокуВнутр(Справочники.Организации.УправленческаяОрганизация);
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Возвращает признак доступности плана обмена в базовой версии
Функция ДоступностьПланаОбменаВБазовойВерсии(ИмяПланаОбмена,СообщатьПользователю = Истина)
	
	КоличествоУзловПланаОбмена = 1;
	СписокДоступныхПлановОбмена = ОбменДаннымиПовтИсп.ПланыОбменаБСП();
	
	Если СписокДоступныхПлановОбмена.Найти(ИмяПланаОбмена) <> Неопределено
		И ОбменДаннымиСобытия.ВсеУзлыПланаОбмена(ИмяПланаОбмена).Количество() < КоличествоУзловПланаОбмена Тогда
		Возврат Истина;
	Иначе
		Если СообщатьПользователю Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Используются ограничения базовой версии. Выбранный план обмена создать невозможно.';uk='Використовуються обмеження базової версії. Вибраний план обміну створити неможливо.'");
			Сообщение.Сообщить();
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#Область ОбработчикиОбновленияИнформационнойБазы

#КонецОбласти

#КонецОбласти
