
#Область СлужебныйПрограммныйИнтерфейс

Процедура ПроверкаРайонногоКоэффициентаПередЗаписью(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗарплатаКадрыОрганизацииПередЗаписью(Источник, Отказ) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗарплатаКадрыОрганизацииПриЗаписи(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	// Пишем функциональную опцию в зависимости от использования 
	// начисления зарплаты.
	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	ЗаписиФО = РегистрыСведений.НастройкиЗарплатаКадры.СоздатьНаборЗаписей();
	ЗаписиФО.Отбор.Организация.Установить(Источник.Ссылка);
	ЗаписиФО.Прочитать();
	Если ЗаписиФО.Количество() = 0 Тогда
		Строка = ЗаписиФО.Добавить();
	Иначе
		Строка = ЗаписиФО[0];
	КонецЕсли;
	
		Строка.Организация = Источник.Ссылка;
		ЗаписиФО.Записать();
	
КонецПроцедуры

// Обработчик подписки на событие ЗаполнениеФизическихЛиц.
// Предназначена для заполнения физических лиц, 
// используемых при ограничении доступа к документам.
// Выполняется заполнение реквизита типа "Физические лица" по данным реквизита 
// типа "Сотрудники" в шапке или специальной табличной части ФизическиеЛица.
// Кроме того, заполняет реквизит КраткийСоставДокумента.
//	
Процедура ЗаполнениеФизическихЛицПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	// Выявление реквизитов, в которых содержатся сотрудники и физические лица:
	МетаданныеИсточника = Источник.Метаданные();
	
	// - в шапке 
	ИмяРеквизитаСотрудник = Неопределено;
	ИмяРеквизитаФизическоеЛицо = Неопределено;
	Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		
		Типы = Реквизит.Тип.Типы();
		Если Типы[0] = Тип("СправочникСсылка.Сотрудники") И Типы.Количество() = 1 Тогда
			ИмяРеквизитаСотрудник = Реквизит.Имя;
		ИначеЕсли Типы[0] = Тип("СправочникСсылка.ФизическиеЛица") И Типы.Количество() = 1 Тогда
			ИмяРеквизитаФизическоеЛицо = Реквизит.Имя;
		КонецЕсли;
		
		Если ИмяРеквизитаСотрудник <> Неопределено
			И ИмяРеквизитаФизическоеЛицо <> Неопределено Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнятьШапку = ИмяРеквизитаСотрудник <> Неопределено И ИмяРеквизитаФизическоеЛицо <> Неопределено;
	
	СписокТабличныхЧастейСотрудники = Новый Соответствие;
	СписокТабличныхЧастейФизическиеЛица = Новый Соответствие;
		
	// - в табличных частях
	ЗаполнятьТабличнуюЧасть = МетаданныеИсточника.ТабличныеЧасти.Найти("ФизическиеЛица") <> Неопределено;
	ЗаполнятьКраткийСостав = МетаданныеИсточника.Реквизиты.Найти("КраткийСоставДокумента") <> Неопределено;
	МассивТабличныхЧастейИсключаемыхИзКраткогоСостава = Новый Массив;
	ЗарплатаКадры.ЗаполнитьСписокТабличныхЧастейИсключаемыхИзКраткогоСостава(МассивТабличныхЧастейИсключаемыхИзКраткогоСостава);
	Если ЗаполнятьТабличнуюЧасть Или ЗаполнятьКраткийСостав Тогда
		Для Каждого ТабличнаяЧасть Из МетаданныеИсточника.ТабличныеЧасти Цикл
			Если ТабличнаяЧасть.Имя <> "ФизическиеЛица" Тогда
				Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
					Типы = Реквизит.Тип.Типы();
					Если Типы[0] = Тип("СправочникСсылка.Сотрудники") И Типы.Количество() = 1 Тогда
						СписокТабличныхЧастейСотрудники.Вставить(ТабличнаяЧасть.Имя, Реквизит.Имя);
					ИначеЕсли Типы[0] = Тип("СправочникСсылка.ФизическиеЛица") И Типы.Количество() = 1 Тогда
						СписокТабличныхЧастейФизическиеЛица.Вставить(ТабличнаяЧасть.Имя, Реквизит.Имя);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Инициализируем поля для последующего заполнения.
	Если ЗаполнятьШапку Тогда
		Источник[ИмяРеквизитаФизическоеЛицо] = Неопределено;
	КонецЕсли;
	Если ЗаполнятьТабличнуюЧасть Тогда
		Источник.ФизическиеЛица.Очистить();
	КонецЕсли;
	Если ЗаполнятьКраткийСостав Тогда
		Источник.КраткийСоставДокумента = Неопределено;
	КонецЕсли;
	
	// Сбор данных сотрудников
	Сотрудники = Новый Массив;
	СотрудникиКраткийСостав = Новый Массив;
	
	Если ЗаполнятьШапку Тогда
		Сотрудники.Добавить(Источник[ИмяРеквизитаСотрудник]);
		СотрудникиКраткийСостав.Добавить(Источник[ИмяРеквизитаСотрудник]);
	КонецЕсли;
	
	Если ЗаполнятьТабличнуюЧасть Или ЗаполнятьКраткийСостав Тогда
		Для Каждого ЭлементСоответствия Из СписокТабличныхЧастейСотрудники Цикл 
			СотрудникиТабличнойЧасти = ОбщегоНазначения.ВыгрузитьКолонку(Источник[ЭлементСоответствия.Ключ], ЭлементСоответствия.Значение, Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, СотрудникиТабличнойЧасти, Истина);
			Если МассивТабличныхЧастейИсключаемыхИзКраткогоСостава.Найти(ЭлементСоответствия.Ключ) = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиКраткийСостав, СотрудникиТабличнойЧасти, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Массив физических лиц
	Физлица = Новый Массив;
	ФизлицаКраткийСостав = Новый Массив;
	
	// Заполняем данными табличных частей, где непосредственно Физические лица.
	Если ЗаполнятьТабличнуюЧасть Или ЗаполнятьКраткийСостав Тогда
		Для Каждого ЭлементСоответствия Из СписокТабличныхЧастейФизическиеЛица Цикл 
			ФизлицаТабличнойЧасти = ОбщегоНазначения.ВыгрузитьКолонку(Источник[ЭлементСоответствия.Ключ], ЭлементСоответствия.Значение, Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Физлица, ФизлицаТабличнойЧасти, Истина);
			Если МассивТабличныхЧастейИсключаемыхИзКраткогоСостава.Найти(ЭлементСоответствия.Ключ) = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизлицаКраткийСостав, ФизлицаТабличнойЧасти, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СотрудникиКраткийСостав.Количество() > 0 Тогда
		// Получение физических лиц для собранных сотрудников.
		ФизлицаСотрудниковКраткийСостав = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СотрудникиКраткийСостав, "ФизическоеЛицо");
		// Массив физических лиц сотрудников.
		МассивФизлицСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ФизлицаСотрудниковКраткийСостав, "Значение", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизлицаКраткийСостав, МассивФизлицСотрудников, Истина);
	КонецЕсли;
	
	ФизлицаСотрудников = Новый Соответствие;
	
	Если Сотрудники.Количество() > 0 Тогда
		// Получение физических лиц для собранных сотрудников.
		ФизлицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
		// Массив физических лиц сотрудников.
		МассивФизлицСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ФизлицаСотрудников, "Значение", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Физлица, МассивФизлицСотрудников, Истина);
	КонецЕсли;
	
	Если Физлица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение физических лиц
	Если ЗаполнятьШапку Тогда
		Источник[ИмяРеквизитаФизическоеЛицо] = ФизлицаСотрудников[Источник[ИмяРеквизитаСотрудник]];
	КонецЕсли;
	
	Если ЗаполнятьТабличнуюЧасть Тогда
		Источник.ФизическиеЛица.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Источник.ФизическиеЛица, Физлица, "ФизическоеЛицо");
	Иначе
		
		// Заполнение физических лиц в ТЧ, содержащих реквизит Физическое лицо.
		Если СписокТабличныхЧастейСотрудники.Количество() > 0
			И ФизлицаСотрудников.Количество() > 0 Тогда
			
			Для каждого ТабличнаяЧастьСотрудника Из СписокТабличныхЧастейСотрудники Цикл
				
				ИмяРеквизитаФизическоеЛицо = СписокТабличныхЧастейФизическиеЛица.Получить(ТабличнаяЧастьСотрудника.Ключ);
				Если ИмяРеквизитаФизическоеЛицо <> Неопределено Тогда
					
					Для каждого СтрокаТабличнойЧасти Из Источник[ТабличнаяЧастьСотрудника.Ключ] Цикл
						
						СтрокаТабличнойЧасти[ИмяРеквизитаФизическоеЛицо] =
							ФизлицаСотрудников.Получить(СтрокаТабличнойЧасти[ТабличнаяЧастьСотрудника.Значение]);
							
					КонецЦикла;
					
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли; 
			
	КонецЕсли;
	
	// Заполнение краткого состава документа.
	Если ЗаполнятьКраткийСостав Тогда
		Источник.КраткийСоставДокумента = ЗарплатаКадры.КраткийСоставСотрудников(СотрудникиКраткийСостав, Источник.Дата, ФизлицаКраткийСостав, ФизлицаСотрудниковКраткийСостав);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПодразделенияОрганизацийПередЗаписью(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОбработкаЗаписиРодителя") И Источник.ДополнительныеСвойства.ОбработкаЗаписиРодителя Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура УстановитьЗначенияРеквизитовПодчиненныхПодразделенийПриЗаписи(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОбработкаЗаписиРодителя") И Источник.ДополнительныеСвойства.ОбработкаЗаписиРодителя Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура РегистрыУчетаНалоговВзносовСФОТПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаНабора Из Источник Цикл
		СтрокаНабора.Период = НачалоДня(СтрокаНабора.Период)
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПодчиненностьОрганизации(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ЭтоНовый() Тогда
		
		ПредыдущаяГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ГоловнаяОрганизация");
		Если ЗначениеЗаполнено(ПредыдущаяГоловнаяОрганизация) И Источник.ГоловнаяОрганизация <> ПредыдущаяГоловнаяОрганизация Тогда
			
			ЗарплатаКадры.ПроверитьВозможностьСменыГоловнойОрганизации(Источник.Ссылка, Отказ);
			
			Если НЕ Отказ Тогда
				Источник.ДополнительныеСвойства.Вставить("ИзмененаГоловнаяОрганизация", ПредыдущаяГоловнаяОрганизация);
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьПодчиненностьОрганизации(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяГоловнаяОрганизация = Неопределено;
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ИзмененаГоловнаяОрганизация", ПредыдущаяГоловнаяОрганизация) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Источник.Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ПредыдущаяГоловнаяОрганизация);
	
	Если ПредыдущаяГоловнаяОрганизация = Источник.Ссылка Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				Попытка 
					СотрудникОбъект.Заблокировать();
				Исключение
					ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не удалось изменить головную организацию ""%1"".
                            |Возможно, сотрудник редактируется другим пользователем'
                            |;uk='Не вдалося змінити головну організацію ""%1"".
                            |Можливо, співробітник редагується іншим користувачем'"),
						СотрудникОбъект.Наименование);			
					ВызватьИсключение ТекстИсключенияЗаписи;
				КонецПопытки;
		
				СотрудникОбъект.ГоловнаяОрганизация = Источник.ГоловнаяОрганизация;
				СотрудникОбъект.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Подразделения.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК Подразделения
		|ГДЕ
		|	Подразделения.Владелец = &Организация
		|	И Подразделения.ГоловнаяОрганизация <> &ГоловнаяОрганизация";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПодразделениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Попытка 
				ПодразделениеОбъект.Заблокировать();
			Исключение
				ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось изменить головную организацию ""%1"".
                        |Возможно, подразделение редактируется другим пользователем'
                        |;uk='Не вдалося змінити головну організацію ""%1"".
                        |Можливо, підрозділ редагується іншим користувачем'"),
					ПодразделениеОбъект.Наименование);			
				ВызватьИсключение ТекстИсключенияЗаписи;
			КонецПопытки;
		
			ПодразделениеОбъект.ГоловнаяОрганизация = Источник.ГоловнаяОрганизация;
			ПодразделениеОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ЗапретитьРедактированиеОбщихДанныхНаборЗаписейПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем, если...
	// - набор пустой, 
	// - и хотя бы одно его ведущее измерение заполнено ссылкой на несуществующий (удаленный) объект, 
	// ..то пропускаем, т.е. снимаем запрет.
	Если Источник.Количество() = 0 Тогда
		Для Каждого Измерение Из Источник.Метаданные().Измерения Цикл
			Если Измерение.Ведущее Тогда
				ЭлементОтбора = Источник.Отбор.Найти(Измерение.Имя);
				Если ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование = Истина Тогда
					Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЭлементОтбора.Значение)) И Не ОбщегоНазначения.СсылкаСуществует(ЭлементОтбора.Значение) Тогда
						 Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписьОбщихДанных") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПодборИзКлассификатора") Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Редактирование общих данных запрещено.';uk='Редагування загальних даних заборонено.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	
КонецПроцедуры

Процедура ЗапретитьРедактированиеОбщихДанныхОбъектПередЗаписью(Источник, Отказ) Экспорт
	
	Возврат;
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписьОбщихДанных") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПодборИзКлассификатора") Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Редактирование общих данных запрещено.';uk='Редагування загальних даних заборонено.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	
КонецПроцедуры

Процедура ПроверитьЗаписьПоУмолчаниюРегистраСведений(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОтсчетаПериодическихСведений = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	
	Для каждого Запись Из Источник Цикл
		
		Если Запись.Период < ДатаОтсчетаПериодическихСведений Тогда
			
			МетаданныеРегистра = Источник.Метаданные();
			Если МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Месяц Тогда
				МинимальныйДопустимыйПериод = КонецМесяца(ДатаОтсчетаПериодическихСведений) + 1;
			Иначе
				МинимальныйДопустимыйПериод = КонецДня(ДатаОтсчетаПериодическихСведений) + 1;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Новые значения ""%1"" можно установить не ранее чем с %2';uk='Нові значення ""%1"" можна встановити не раніше ніж з %2'"),
					МетаданныеРегистра.Имя,
					Формат(МинимальныйДопустимыйПериод, "ДЛФ=DD")),
				,
				"Объект.Период",
				,
				Отказ);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеРеквизитаОрганизацияПриОднофирменномУчетеОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт

	ЗарплатаКадры.ЗаполнитьЗначениеРеквизитаОрганизацияПриОднофирменномУчете(Источник);
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеРеквизитаОрганизацияСправочникаПриОднофирменномУчетеБазоваяОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ЗарплатаКадры.ЗаполнитьЗначениеРеквизитаОрганизацияПриОднофирменномУчете(Источник);
	
КонецПроцедуры

// Обработчик подписки на событие ПроверитьУникальностьЕстественногоКлюча.
// Предназначена для обеспечения уникальности естественных ключей объектов.
//	
Процедура ПроверитьУникальностьЕстественногоКлюча(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	
	
	МетаданныеИсточника = Источник.Метаданные(); 
	МенеджерИсточника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеИсточника.ПолноеИмя());
	ПоляЕстественногоКлюча = МенеджерИсточника.ПоляЕстественногоКлюча();	
	
	ПредставлениеТипа = МетаданныеИсточника.ПредставлениеОбъекта;
	Если ПустаяСтрока(ПредставлениеТипа) Тогда
		ПредставлениеТипа = МетаданныеИсточника.Представление();
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИсточника.Ссылка КАК Ссылка
	|ИЗ
	|	#ТаблицаИсточника КАК ТаблицаИсточника
	|ГДЕ
	|	ТаблицаИсточника.Ссылка <> &Источник
	|	И НЕ ТаблицаИсточника.ПометкаУдаления
	|	И &Условие";
	Запрос.УстановитьПараметр("Источник", Источник.Ссылка);
	
	ИменаКлючей = "";
	ПредставлениеКлючей = "";
	Условие = "";
	Итерация = 0;
	Для Каждого ПолеЕстественногоКлюча Из ПоляЕстественногоКлюча Цикл 
		
		ЗнакПрепинания = ?(Итерация = 0, "", ", ");
		ЛогическаяФункция = ?(Итерация = 0, "", " И ");

		ИменаКлючей = ИменаКлючей + ЗнакПрепинания + ПолеЕстественногоКлюча;
		ПредставлениеКлючей = ПредставлениеКлючей + ЗнакПрепинания + Источник[ПолеЕстественногоКлюча];
		
		Условие = Условие + ЛогическаяФункция + "ТаблицаИсточника."+ПолеЕстественногоКлюча +" = &"+ПолеЕстественногоКлюча;
		Запрос.УстановитьПараметр(ПолеЕстественногоКлюча, Источник[ПолеЕстественногоКлюча]);
		
		Итерация = Итерация + 1;
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаИсточника", МетаданныеИсточника.ПолноеИмя());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", Условие);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат
	КонецЕсли;	
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		?(ПоляЕстественногоКлюча.Количество() = 1,
			НСтр("ru='Уже существует %1 с таким значением поля %2 (%3)';uk='Вже існує %1 з таким значенням поля %2 (%3)'"),
			НСтр("ru='Уже существует %1 с таким значением полей %2 (%3)';uk='Вже існує %1 з таким значенням полів %2 (%3)'")),
		НРег(ПредставлениеТипа),
		ИменаКлючей,
		ПредставлениеКлючей);
		
	ВызватьИсключение ТекстСообщения	
	
КонецПроцедуры

Процедура УстановитьНастройкиЗарплатаКадрыПередЗаписью(Источник, Отказ) Экспорт
	
	Возврат;
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	// Пишем функциональную опцию в зависимости от использования 
	// начисления зарплаты.
	
	// Получим данные об организациях.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ПрименятьСевернуюНадбавку,
	|	Организации.ПрименятьРайонныйКоэффициент
	|ИЗ
	|	РегистрСведений.НастройкиЗарплатаКадры КАК НастройкиЗарплатаКадры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО НастройкиЗарплатаКадры.Организация = Организации.Ссылка");
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗаписиФО = РегистрыСведений.НастройкиЗарплатаКадры.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		Строка = ЗаписиФО.Добавить();
		Строка.Организация = Выборка.Организация;
		Строка.ПрименятьСевернуюНадбавку = Источник.Значение И Выборка.ПрименятьСевернуюНадбавку;
		Строка.ПрименятьРайонныйКоэффициент = Источник.Значение И Выборка.ПрименятьРайонныйКоэффициент;
	КонецЦикла;
	ЗаписиФО.Записать();									
	
КонецПроцедуры

Процедура УстановитьДатуДокументаЗарплатаКадрыОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ИменаПодсистем = "ЗарплатаКадрыПодсистемы,ЗарплатаКадрыПриложения,ЗарплатаКадрыРасширеннаяПодсистемы,ЗарплатаКадрыКорпоративнаяПодсистемы";
	ИсточникВходитВПодсистемуЗарплатаКадры = ЗарплатаКадры.ОбъектМетаданныхВключенВПодсистемы(Источник.Метаданные().ПолноеИмя(), ИменаПодсистем);
	Если ИсточникВходитВПодсистемуЗарплатаКадры И НЕ ЗначениеЗаполнено(Источник.Дата) Тогда
		Источник.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораПеречисления(Источник, ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		//Список уже сформирован, чистим его
		КолвоЭлементов = ДанныеВыбора.Количество(); 
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл 
		     Элемент = ДанныеВыбора[КолвоЭлементов - ОбратныйИндекс]; 
		     Если СтрНайти(Строка(Элемент),"ѳ") > 0 Тогда 
		          ДанныеВыбора.Удалить(КолвоЭлементов - ОбратныйИндекс); 
		     КонецЕсли; 
		КонецЦикла; 			
	Иначе
		//Стандартная обработка, изменяем отбор
		Если Параметры.Отбор.Свойство("Ссылка") Тогда
			//Уже есть отбор по ссылке, чистим
			МассивСсылок = Параметры.Отбор.Ссылка;
			КолвоЭлементов = МассивСсылок.Количество(); 
			Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл 
			     Элемент = МассивСсылок[КолвоЭлементов - ОбратныйИндекс]; 
			     Если СтрНайти(Строка(Элемент),"ѳ") > 0 Тогда 
			          МассивСсылок.Удалить(КолвоЭлементов - ОбратныйИндекс); 
			     КонецЕсли; 
			КонецЦикла; 			
		Иначе
			//Формируем массив доступных ссылок
			МассивСсылок = Новый Массив();
			Для Каждого Элемент из Источник Цикл
				Если СтрНайти(Строка(Элемент),"ѳ") = 0 Тогда
					МассивСсылок.Добавить(Элемент);
				КонецЕсли;	
			КонецЦикла;
			Параметры.Отбор.Вставить("Ссылка", МассивСсылок);

		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры


#КонецОбласти
