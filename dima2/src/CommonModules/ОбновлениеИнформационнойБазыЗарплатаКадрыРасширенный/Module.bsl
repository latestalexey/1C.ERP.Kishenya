
#Область СлужебныйПрограммныйИнтерфейс

// Заполняет стандартные свойства библиотеки или конфигурации, требуемые для ее использования.
// Поставляемая конфигурация должна рассматриваться как потенциальная библиотека, поэтому
// ее свойства описываются не только в метаданных, но и в коде, как и для любой библиотеки.
//
// Под библиотекой понимается одна или несколько подсистем, а под конфигурацией все, что
// не принадлежит ни одной библиотеке. Библиотека у которой имя совпадает с именем
// конфигурации в метаданных, считается конечной конфигурацией.
// БСП - всегда первая, конечная конфигурация всегда последняя (например, для порядка обновления ИБ).
// 
// Параметры:
//  Описание - Структура со свойствами:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив значений типа Строка, содержащий имена других библиотек.
//                         После получения описаний всех библиотек будет проверено, что
//                         все библиотеки требуемые другими библиотеками зарегистрированы и
//                         будет построена линейная последовательность библиотек по мере
//                         их требуемости. При наличии взаимозависимости или их отсутствии
//                         порядок определяется порядком добавления основных модулей библиотек
//                         в процедуре ПриДобавленииПодсистемы общего модуля
//                         ПодсистемыКонфигурацииПереопределяемый.
//                         Порядок используется при выполнении обработчиков обновления
//                         информационной базы.
//
// Для стандартных процедур в основных модулях библиотек рекомендуется использовать
// не копию комментария, а ссылку на комментарий в модуле этом модуле.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "ЗарплатаКадрыРасширенная";
	Описание.Версия = "3.0.0.16";
	
КонецПроцедуры

#Область ОбработчикиСобытийОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьФункциональныеОпцииПоМетаданным";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьФункциональныеОпцииИспользованияЗарплатыИКадров";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьИспользованиеНесколькихОрганизаций";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьВидОрганизации";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьЗначениеКонстантыРаботаВНесколькихХозрасчетныхОрганизациях";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьЗначениеКонстантыИспользоватьНачислениеЗарплатыНесколькихОрганизаций";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.УстановитьИспользованиеЗарплатаКадрыКорпоративнаяПодсистемы";
	Обработчик.НачальноеЗаполнение = Истина;
	

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.3";
	Обработчик.Процедура = "РегистрыСведений.РазмерыГосударственныхПособий.ЗаполнитьГосударственныеПособия";
	
	РасчетЗарплатыРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ВзаиморасчетыССотрудникамиРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетПособийСоциальногоСтрахованияРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетРабочегоВремени.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	КадровыйУчетРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УправлениеШтатнымРасписанием.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетСреднегоЗаработка.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ИсполнительныеЛисты.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ЗаймыСотрудникам.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	СостоянияСотрудников.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетНДФЛРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	КонтрактыДоговорыСотрудников.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ПерерасчетЗарплаты.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ОстаткиОтпусков.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	// ЗарплатаКадрыПриложения.ПереносДанных
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПереносДанных") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПереносДанных");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ПереносДанных
	
	// ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура
	
	// ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетХозрасчетныхОрганизаций");
		Модуль.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций
	
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения монопольного обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
//                                             подсистемы, сгруппированных по номеру версии.
//                            Процедура обхода выполненных обработчиков:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
//                                тогда выводить форму с описанием обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	// Не используется в БСП.
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОбновленияИнформационнойБазы

Процедура УстановитьФункциональныеОпцииПоМетаданным() Экспорт
	
	ИспользоватьВХО = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации");
	ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры = Константы.ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры.Получить();
	Если ИспользоватьВХО <> ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры Тогда
		Константы.ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры.Установить(ИспользоватьВХО);
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьФункциональныеОпцииИспользованияЗарплатыИКадров() Экспорт

	Константы.ИспользоватьКадровыйУчет.Установить(Истина);

	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	НеИспользоватьНачислениеЗарплаты = Константы.НеИспользоватьНачислениеЗарплаты.Получить();
	Если ИспользоватьНачислениеЗарплаты <> НеИспользоватьНачислениеЗарплаты Тогда
		Возврат;                 
	КонецЕсли;
	Константы.ИспользоватьНачислениеЗарплаты.Установить(Не ИспользоватьНачислениеЗарплаты);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитДопУпорядочиванияИерархическогоПодразделений() Экспорт
	
	Запрос = Новый запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И ПодразделенияОрганизаций.РеквизитДопУпорядочиванияИерархического = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПодразделениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПодразделениеОбъект.Записать();
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРолиСотрудников() Экспорт
	
	ЗарплатаКадрыРасширенный.ЗаполнитьРолиСотрудников();
	
КонецПроцедуры

Процедура УстановитьИспользованиеНесколькихОрганизаций() Экспорт 
	
	Справочники.Организации.ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций();
	
КонецПроцедуры

Процедура УстановитьВидОрганизации() Экспорт
	РаботаВХозрасчетнойОрганизации = ЗарплатаКадрыРасширенный.ЗначениеРаботаВХозрасчетнойОрганизации();
	Если РаботаВХозрасчетнойОрганизации = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	Константы.РаботаВХозрасчетнойОрганизации.Установить(РаботаВХозрасчетнойОрганизации);
	Константы.РаботаВБюджетномУчреждении.Установить(Не РаботаВХозрасчетнойОрганизации);
	
КонецПроцедуры

Процедура УстановитьЗначениеКонстантыИспользоватьНачислениеЗарплатыНесколькихОрганизаций() Экспорт
				
	Константы.ИспользоватьНачислениеЗарплатыВНесколькихОрганизациях.Установить(ЗарплатаКадрыРасширенный.ИспользоватьНачислениеЗарплатыНесколькихОрганизаций());
	
КонецПроцедуры

Процедура УстановитьЗначениеКонстантыРаботаВНесколькихХозрасчетныхОрганизациях() Экспорт
										
	Константы.РаботаВНесколькихХозрасчетныхОрганизациях.Установить(ЗарплатаКадрыРасширенный.РаботаВНесколькихХозрасчетныхОрганизациях());
	
КонецПроцедуры

Процедура ЗаменитьРазделенныеДанныеОбщими() Экспорт
	
	
КонецПроцедуры

Процедура УстановитьИспользованиеЗарплатаКадрыКорпоративнаяПодсистемы() Экспорт 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда 
		Возврат;
	КонецЕсли;
	
	ЕстьЗарплатаКадрыКорпоративнаяПодсистемы = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы");
	Константы.ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы.Установить(ЕстьЗарплатаКадрыКорпоративнаяПодсистемы);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, РеквизитыМетаданных, ИзмененныеОбъекты)
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, РеквизитыМетаданных, ИзмененныеОбъекты);
КонецПроцедуры

Процедура ЗаменитьСсылкиВРегистре(МетаданныеРегистра, Поля, СоответствиеСсылок) Экспорт
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗаменитьСсылкиВРегистре(МетаданныеРегистра, Поля, СоответствиеСсылок);
КонецПроцедуры

Функция СоответствиеСсылок(МетаданныеСправочника, ИмяКлюча)
	Возврат ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.СоответствиеСсылок(МетаданныеСправочника, ИмяКлюча);
КонецФункции

#КонецОбласти