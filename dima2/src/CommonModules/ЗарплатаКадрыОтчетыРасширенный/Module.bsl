
#Область СлужебныеПроцедурыИФункции

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	// Базовые настройки вариантов отчетов.
	ЗарплатаКадрыОтчетыБазовый.НастроитьВариантыОтчетов(Настройки);
	
	// Исключение вариантов отчетов, не предназначенных для интерактивного использования.
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ЖурналУчетаИсполнительныхДокументов, "КарточкаУчетаИсполнительныхДокументов");
	Вариант.Включен = Ложь;
	
	// Технические варианты отчетов.
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ФактическиеОтпускаСотрудников, "ФактическиеОтпускаСотрудников");
	Вариант.Включен = Ложь;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ПлановыеУдержанияСотрудников, "ПлановыеУдержанияСотрудников");
	Вариант.Включен = Ложь;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.КадроваяИсторияСотрудников, "КадроваяИсторияСотрудников");
	Вариант.Включен = Ложь;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ОтчетыПоСотрудникам, "ЗаполнениеСписковСотрудников");
	Вариант.Включен = Ложь;
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализНачисленийИУдержаний, "РасчетнаяВедомостьРасширенная");
	Вариант.Включен = Ложь;
	
	
	
	// Подчинение вариантов отчета по источникам финансирования функциональной опции ИспользоватьИсточникиФинансирования.
	ФункциональныеОпции = Новый Массив;
	ФункциональныеОпции.Добавить("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализЗадолженностиПоЗарплате, "ЗадолженностьВРазрезеИсточниковФинансирования");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	
	
	
	// Обновление настроек отчетов по штатному расписанию.
	УправлениеШтатнымРасписанием.УстановитьДоступностьОтчетовПоШтатномуРасписанию(Настройки);
	
	
	
	
	
	
	

	// Настройки вариантов отчетов приложений.
#Область ЗарплатаКадрыПриложения	
	// Обновление настроек отчетов по учету депонентов.
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетДепонированнойЗарплаты") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплатыРасширенный");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс") Тогда
		МодульКомандныйИнтерфейс = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыКомандныйИнтерфейс");
		МодульКомандныйИнтерфейс.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Подработки");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;		
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;		
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли; 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли; 
	
#КонецОбласти

	// Настройка отчетов
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.АнализЗадолженностиПоЗарплате);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.АнализПлановыхНачислений);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ВоинскийУчетОбщий);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ВыплатыНезарплатныхДоходов);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ГрафикОтпусков);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДинамикаПлановыхНачислений);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.Договорники);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ЖурналУчетаИсполнительныхДокументов);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ЗаймыСотрудникам);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ИзменениеШтатногоРасписания);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.КадроваяИсторияСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.КонтактнаяИнформацияСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ОбразованияСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПлановыеУдержанияСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СоставыСемейСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СостояниеШтатногоРасписания);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СостоянияСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СравнениеПлановыхИФактическихНачислений);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СтажиСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СтатистикаПерсонала);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ТрудоваяДеятельностьСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ФактическиеОтпускаСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ШтатноеРасписание);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ШтатноеРасписаниеНачисления);
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ТиповаяФормаП5);
	
КонецПроцедуры

Процедура ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета) Экспорт
	
	КоллекцияПользовательскихПолей = НастройкиОтчета.ПользовательскиеПоля.Элементы;
	
	Если КлючВарианта = "РасчетнаяВедомость" Тогда
		
		Для Каждого ПользовательскоеПоле Из КоллекцияПользовательскихПолей Цикл
			
			Если ПользовательскоеПоле.Заголовок = "ОтработаноРабочихДней" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных <> ""Праздники""
					|		И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных <> ""ВыходныеДни""
					|		И ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
					|		И ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
					|		Тогда ОтработаноДней
					|	Иначе 0
					|Конец";
					
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ОтработаноРабочихЧасов" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных <> ""Праздники""
					|		И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных <> ""ВыходныеДни""
					|		И ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
					|		И ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
					|		Тогда ОтработаноЧасов
					|	Иначе 0
					|Конец";
					
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
			ИначеЕсли ПользовательскоеПоле.Заголовок = "НачисленоПовременно" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
					|		И ВидРасчета.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
					|		Тогда Сумма
					|	Иначе 0
					|Конец";
					
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "НачисленоСдельно" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда)
					|		Тогда Сумма
					|	Иначе 0
					|Конец";
					
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "НачисленоВНатуральнойФорме" Тогда
				
				Выражение = 
					"Выбор
					|	Когда (Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено) ИЛИ Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно))
					|		И (ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме)
					|		ИЛИ ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме))
					|		Тогда Сумма
					|	Иначе 0
					|Конец";
					
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ПрочиеДоходы" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
					|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда)
					|       И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Премия)
					|       И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
					|       И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста)
					|       И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам)
					|       И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве)
					|       И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
					|       И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Индексация)
					|       ИЛИ (Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно) ИЛИ Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)) 
					|		И (ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме)
					|			ИЛИ ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме))
					|		ИЛИ ВидРасчета В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа),
					|			ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги))
					|		Тогда Сумма
					|	Иначе 0
					|Конец";
					
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ПрочиеУдержания" Тогда
					
					Выражение = 
						"Выбор
						|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса)
						|		Тогда 0
						|	Когда ВидРасчета.КатегорияУдержания = Значение(Перечисление.КатегорииУдержаний.ИсполнительныйЛист) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
						|		Тогда 0
						|	Когда ВидРасчета <> Значение(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ) И ВидРасчета <> Значение(Перечисление.ВидыОсобыхНачисленийИУдержаний.ВоенныйСбор) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
						|		Тогда Сумма
						|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод)
						|		Тогда 0
						|	Когда ((Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено) ИЛИ Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно))
						|       И (ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме)
						|		ИЛИ ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме)))
						|		Тогда Сумма
						|	Иначе 0
						|Конец";
						
					
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ВсегоУдержано" Тогда
				
				Выражение = 
					"Выбор
					|	Когда ВидРасчета = Значение(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
					|		Тогда Сумма
					|	Когда ВидРасчета = Значение(Перечисление.ВидыОсобыхНачисленийИУдержаний.ВоенныйСбор)
					|		Тогда Сумма
					|	Когда ВидРасчета <> Значение(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ) И ВидРасчета <> Значение(Перечисление.ВидыОсобыхНачисленийИУдержаний.ВоенныйСбор) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
					|		Тогда Сумма
					|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса)
					|		Тогда Сумма
					|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод)
					|		Тогда Сумма
					|	Когда ((Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено) ИЛИ Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно))
					|       И (ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме)
					|		ИЛИ ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме)))
					|		Тогда Сумма
					|	Иначе 0
					|Конец";
					
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли КлючВарианта = "РасчетныйЛисток" ИЛИ КлючВарианта = "РасчетныйЛистокСРазбивкойПоИсточникамФинансирования" Тогда
		
		Для Каждого ПользовательскоеПоле Из КоллекцияПользовательскихПолей Цикл
			
			Если ПользовательскоеПоле.Заголовок = "УчетВремениВЧасах" Тогда
				
				Выражение = "ЕСТЬNULL(ВидРасчета.УчетВремениВЧасах, Ложь)";

				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей(Выражение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьВариантОтчетаРасчетныйЛисток(НастройкиОтчета) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание")
			И ПолучитьФункциональнуюОпцию("ИспользоватьПриОписанииПозицииШтатногоРасписанияРазрядыКатегорииКлассыДолжностейИПрофессий") Тогда
			
		ДобавитьВГруппировкуРазрядКатегорияГоловногоСотрудникаНаКонецПериода(НастройкиОтчета.Структура);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОтчетАнализНачисленийИУдержанийПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если КлючВарианта = "РасчетныйЛисток"
		Или КлючВарианта = "РасчетныйЛистокСРазбивкойПоИсточникамФинансирования" Тогда
		
		УстановитьИспользованиеПараметраОтчета("ВыводитьПоказателиНачислений", НовыеНастройкиКД);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ОтчетАнализНачисленийИУдержанийПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИспользованиеПараметраОтчета(ИмяПараметра,НовыеНастройкиКД) Экспорт
	
	ПараметрОтчета = НовыеНастройкиКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ПараметрОтчета <> Неопределено Тогда
		ПараметрОтчета.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли; 
	
КонецПроцедуры

Функция ДобавитьВГруппировкуРазрядКатегорияГоловногоСотрудникаНаКонецПериода(Структура)
	
	ВставленоПолеГруппировки = Ложь;
	Для каждого ЭлементСтруктуры Из Структура Цикл
		
		Если ЭлементСтруктуры.Использование Тогда
			
			ВставленоПолеГруппировки = Ложь;
			Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() > 0 Тогда
				
				Для каждого ЭлементГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
					
					Если ТипЗнч(ЭлементГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
						
						Если ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных("ДолжностьГоловногоСотрудникаНаКонецПериода") Тогда
							
							ПолеГруппировки = ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
							ПолеГруппировки.Использование = Истина;
							ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("РазрядКатегорияГоловногоСотрудникаНаКонецПериода");
							
							ВставленоПолеГруппировки = Истина;
							Прервать;
							
						КонецЕсли; 
						
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЕсли; 
			
			Если Не ВставленоПолеГруппировки Тогда
				ВставленоПолеГруппировки = ДобавитьВГруппировкуРазрядКатегорияГоловногоСотрудникаНаКонецПериода(ЭлементСтруктуры.Структура)
			КонецЕсли; 
			
			Если ВставленоПолеГруппировки Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ВставленоПолеГруппировки;
		
КонецФункции

#КонецОбласти