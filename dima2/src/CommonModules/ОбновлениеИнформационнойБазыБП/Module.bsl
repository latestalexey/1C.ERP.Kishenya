////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление версии ИБ"
// Серверные процедуры и функции обновления подсистемы регламентированного учета 
// в информационной базе при смене версии конфигурации.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = ОбновлениеИнформационнойБазыБППереопределяемый.ИмяПодсистемы();
	Описание.Версия = "1.0.13.1";
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

 	// Обработчики, выполняемые при заполнении пустой ИБ

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "0.0.0.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПервыйЗапуск";
	Обработчик.НачальноеЗаполнение = Истина; 

	// Обработчики, выполняемые при каждом обновлении ИБ
 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "1.0.4.1";
	Обработчик.Процедура    = "Справочники.ВидыРегистровУчета.ЗаполнитьВидыРегистровУчета";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при первом запуске
	Обработчик.ОбщиеДанные  = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.9.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.УдалитьНастройкиФормСтандартныхОтчетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	
	

	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.13.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.УстановитьСубконтоСтатьиДвиженияДенежныхСредств";
	Обработчик.НачальноеЗаполнение = Ложь;
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
// 
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
 
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
// 
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
  Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
 
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
 
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	

КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик первого запуска.
//
Процедура ПервыйЗапуск() Экспорт
 
	ЗаполнитьПустуюИБ();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Функция выполняет начальное заполнение информационной базы.
//
// Параметры:
//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
//
// Возвращаемое значение:
//  Функция возвращает номер первой коммерческой версии конфигурации.
//
Процедура ЗаполнитьПустуюИБ() Экспорт
	
	// Вызов функций заполнения данных для пустой информационной базы

	Если НЕ ЗначениеЗаполнено(Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
		ВалютаРегламентированногоУчета = НайтиСоздатьВалюту(
			"980", 
			"грн", 
			НСтр("ru='Гривна';uk='Гривня'", Локализация.КодЯзыкаИнформационнойБазы()), 
			"гривна, гривны, гривен, ж, копейка, копейки, копеек, ж, 2", 
			"гривня, гривні, гривень, ж, копійка, копійки, копійок, ж, 2");

		Константы.ВалютаРегламентированногоУчета.Установить(ВалютаРегламентированногоУчета);
	КонецЕсли;
			
	УстановитьФорматСохраненияРегистровУчета();
	
	
	// Заполнение реквизита "Запретить использовать в проводках" в планах счетов
	УстановитьПараметрыСчетовБУ();
	// Заполнение кодов быстрого выбора в планах счетов
	ЗаполнениеКодовБыстрогоВыбора();


	УстановитьСуммовойУчетНаСкладах();
	УстановитьСубконтоСтатьиДвиженияДенежныхСредств();
	ОбновлениеИнформационнойБазыБППереопределяемый.УстановитьУчетПоРаботникам();
	
	ОбновлениеИнформационнойБазыБППереопределяемый.ЗаполнитьАналитикуНаСчетах();
	ОбновлениеИнформационнойБазыБППереопределяемый.ЗаполнитьСчетаУчетаПоУмолчанию();
	
	ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии();
    	
КонецПроцедуры // ЗаполнитьПустуюИБ()

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском, ПараметрыПрописиНаУкраинском) Экспорт

	
	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
	
	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		
		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;
		СправочникОбъект.ПараметрыПрописиНаУкраинском = ПараметрыПрописиНаУкраинском;
		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		
		Ссылка = СправочникОбъект.Ссылка;
		
		// установим курс и кратность = 1 на 1 января 1980
		РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
		
	Иначе
		
		Если Ссылка.Наименование <> Наименование Тогда
			СправочникОбъект = Ссылка.ПолучитьОбъект();
			СправочникОбъект.Наименование = Наименование;
			
			ЗаписатьСправочникОбъект(СправочникОбъект);
			Ссылка = СправочникОбъект.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru='Создана группа справочника ""%1"", код: ""%2"", наименование: ""%3""';uk='Створена група довідника ""%1"", код: ""%2"", назва: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru='Создан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""';uk='Створений елемент довідника ""%1"", код: ""%2"", назва: ""%3""'") ;
		КонецЕсли; 
	Иначе
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru='Обработана группа справочника ""%1"", код: ""%2"", наименование: ""%3""';uk='Оброблена група довідника ""%1"", код: ""%2"", найменування: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru='Обработан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""';uk='Оброблений елемент довідника ""%1"", код: ""%2"", найменування: ""%3""'") ;
		КонецЕсли; 
	КонецЕсли;

	Если СправочникОбъект.Метаданные().ДлинаКода > 0 Тогда
		ПолныйКод = СправочникОбъект.ПолныйКод();
	Иначе
		ПолныйКод = НСтр("ru='<без кода>';uk='<без коду>'");
	КонецЕсли; 
	СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СправочникОбъект.Метаданные().Синоним, ПолныйКод, СправочникОбъект.Наименование);

	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСообщения, СправочникОбъект);
		КонецЕсли;

	Исключение

		ТекстСообщения = НСтр("ru='Не удалось завершить действие: %1';uk='Не вдалося завершити дію: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрСообщения);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;

КонецПроцедуры

// Устанавливает флаг "Запретить использовать в проводках"
// хозрасчетным счетам 
//
Процедура УстановитьПараметрыСчетовБУ()

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();

	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		СсылкаНаРодителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаСчетов.Ссылка, "Родитель");

		Если НЕ ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
			Продолжить;
		КонецЕсли;

		Объект = СсылкаНаРодителя.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

// Заполнение кодов быстрого выбора в планах счетов
// 
Процедура ЗаполнениеКодовБыстрогоВыбора(ТолькоНезаполненные = Ложь) Экспорт
	
	МассивПлановСчетов = Новый Массив;
	МассивПлановСчетов.Добавить(ПланыСчетов.Хозрасчетный);
	
	Для Каждого ЭлементПланСчетов ИЗ МассивПлановСчетов Цикл
		Попытка
			ПланСчетов = ЭлементПланСчетов.Выбрать();
			Пока ПланСчетов.Следующий() Цикл
				Объект = ПланСчетов.ПолучитьОбъект();
				
				Если ТолькоНезаполненные Тогда
					Если НЕ ЗначениеЗаполнено(Объект.КодБыстрогоВыбора) Тогда
						Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Объект.Код, ".", ""));
					КонецЕсли;
				Иначе
					Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Объект.Код, ".", ""));
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
				
			КонецЦикла;
		Исключение
			ШаблонСообщения = НСтр("ru='Не удалось установить код быстрого выбора по счету
                                   |%1'
                                   |;uk='Не вдалося встановити код швидкого вибору за рахунком
                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ПланыСчетов.Хозрасчетный,
				Объект.Ссылка, 
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// заполнение только незаполненных
Процедура ДозаполнениеКодовБыстрогоВыбора() Экспорт
	
	ЗаполнениеКодовБыстрогоВыбора(Истина);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ АНАЛИТИКИ НА СЧЕТАХ УЧЕТА

// Процедура устанавливает признак суммового учета по субконто Склады.
//
Процедура УстановитьСуммовойУчетНаСкладах()

	// Предопределенные элементы обрабатываются только в главном узле РИБ.
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Счета = Новый СписокЗначений();
	Счета.Добавить("МатериалыПереданныеВПереработку");
	Счета.Добавить("ТоварыНаКомиссии");

	Для каждого Счет Из Счета Цикл
		УстановитьСубконтоНоменклатура(Счет.Значение, "Хозрасчетный", Истина, Истина);
	КонецЦикла;
	
	Счета = Новый СписокЗначений();
	Счета.Добавить("ПриобретениеОсновныхСредств");
	Счета.Добавить("ПриобретениеДругихНеоборотныхМатериальныхАктивов");
	Счета.Добавить("ПроизводственныеЗапасы");
	Счета.Добавить("Полуфабрикаты");
	Счета.Добавить("ГотоваяПродукция");
	Счета.Добавить("Товары");
	Счета.Добавить("ТоварыПринятыеНаКомиссиюВсего");
	Счета.Добавить("МалоценныеИБыстроизнашивающиесяПредметыНаСкладе");

	Для каждого Счет Из Счета Цикл
		УстановитьСубконтоНоменклатура(Счет.Значение, "Хозрасчетный", Истина, Ложь);
	КонецЦикла;

	ЗафиксироватьТранзакцию();

КонецПроцедуры // УправлениеСуммовымУчетомНаСкладах()


// Установка субконто "Статьи движения денежных средств" на 30-31 счетах.
//
Процедура УстановитьСубконтоСтатьиДвиженияДенежныхСредств() Экспорт

	// Предопределенные элементы обрабатываются только в главном узле РИБ.
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбрабатываемыеСчета = Новый Массив;
	
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.КассаВИностраннойВалюте);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РозничнаяВыручкаВКассахККМ);	
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте);	
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте);	
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ДругиеСчетаВБанкеВНациональнойВалюте);	
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ДругиеСчетаВБанкеВИностраннойВалюте);	
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчетаВНациональнойВалюте);	

	Для Каждого Счет Из ОбрабатываемыеСчета Цикл

		Попытка
			СчетОбъект    = Счет.ПолучитьОбъект();
			Субконто      = СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто");
			НетСтатьиДДС = (Субконто = Неопределено);
			ВсегоСубконто = СчетОбъект.ВидыСубконто.Количество();
			Если НетСтатьиДДС И ВсегоСубконто < 3 Тогда

				НовыйВид = СчетОбъект.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
				НовыйВид.Суммовой       = Истина;
				НовыйВид.Валютный       = Истина;
				НовыйВид.Количественный = Истина;
				НовыйВид.ТолькоОбороты  = Истина;

				СчетОбъект.Записать();
			КонецЕсли;
			Если НЕ НетСтатьиДДС И Субконто.ТолькоОбороты = Ложь Тогда
				Субконто.ТолькоОбороты = Истина;
				СчетОбъект.Записать();
			КонецЕсли; 

		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = НСтр("ru='Установка субконто ""Статьи движения денежных средств"" для счета %1 не выполнена';uk='Установка субконто ""Статті руху грошових коштів"" для рахунку %1 не виконано'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Счет.Код);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

// Устанавливает субконто "Номенклатура" и "Контрагент" у указанного счета.
//
Процедура УстановитьСубконтоНоменклатура(ИмяСчета, ИмяПланаСчетов, ЕстьКоличество, ЕстьКонтрагент)

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	ВидСубконто = "ВидыСубконтоХозрасчетные";

	Попытка

		Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл
			// счета исключения
			Если (НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВТорговле)) И
				(НЕ (ВыборкаСчетов.Ссылка= ПланыСчетов.Хозрасчетный.ТорговаяНаценка)) И 
				(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.НеоборотныеАктивыИГруппыВыбытияУдерживаемыеДляПродажи)) И				
				(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ДопРасходыТовары)) И 
				(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ДопРасходыПроизводственныеЗапасы)) И 
				(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ДопРасходыТовары))
				Тогда
				Счета.Добавить(ВыборкаСчетов.Ссылка);
			КонецЕсли;
		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект = Счет.Значение.ПолучитьОбъект();

			Если ЕстьКонтрагент Тогда

				Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Контрагенты, "ВидСубконто") = Неопределено Тогда

					НовыйВид = Объект.ВидыСубконто.Вставить(0);

					НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Контрагенты;
					НовыйВид.Суммовой    = Истина;

					Если ЕстьКоличество Тогда
						НовыйВид.Количественный = Истина;
					КонецЕсли;

					Объект.Записать();
				КонецЕсли;

			КонецЕсли;

			Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Номенклатура, "ВидСубконто") = Неопределено Тогда

				НовыйВид = Объект.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Номенклатура;
				НовыйВид.Суммовой    = Истина;

				Если ЕстьКоличество Тогда
					НовыйВид.Количественный = Истина;
				КонецЕсли;

				Объект.Записать();
			КонецЕсли;

		КонецЦикла;

	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;

КонецПроцедуры // УстановитьСубконтоНоменклатура()

// Устанавливает субконто расчетные документы у указанного счета.
//
Процедура ПрименитьПараметрыРасчетовССотрудниками(ИмяСчета, ИмяПланаСчетов, ВестиУчетПоРаботникам) Экспорт

	Попытка

		Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл

			Счета.Добавить(ВыборкаСчетов.Ссылка);

		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект   = Счет.Значение.ПолучитьОбъект();
			КодСчета = Объект.Код;

			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто");

			Если НЕ (Субконто = Неопределено) Тогда
				Если Субконто.Предопределенное Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если ВестиУчетПоРаботникам = Истина Тогда // Добавляем 

				Если Субконто = Неопределено Тогда

					НовыйВид = Объект.ВидыСубконто.Добавить();

					НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
					НовыйВид.Суммовой    = Истина;
					
					Если Объект.Количественный Тогда
						НовыйВид.Количественный = Истина;
					КонецЕсли;
					

				КонецЕсли;

			ИначеЕсли ВестиУчетПоРаботникам = Ложь Тогда // Удаляем

				Если Субконто = Неопределено Тогда // кто-то удалил вид субконто вручную!
					Возврат;
				КонецЕсли;

				Объект.ВидыСубконто.Удалить(Субконто);
				
			КонецЕсли;
			
			Объект.Записать();

		КонецЦикла;

	Исключение

		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки

КонецПроцедуры

// Установка субконто "Виды начислений оплаты труда по статье 255 НК РФ" на счетах зарплаты (70)
Процедура УстановитьУчетНаСчетахУчетаЗарплаты()

	// Предопределенные элементы обрабатываются только в главном узле РИБ.
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;


КонецПроцедуры

// Включает режим разделения итогов для регистров бухгалтерии и регистров накопления
//
Процедура ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии()
	
	Для каждого Регистр из РегистрыБухгалтерии Цикл
			Регистр.УстановитьРежимРазделенияИтогов(Истина);
	КонецЦикла;
	
	Для Каждого Регистр Из РегистрыБухгалтерии Цикл
			Регистр.УстановитьРежимРазделенияИтогов(Истина);
	КонецЦикла;

КонецПроцедуры //ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии

// Записывает константу "Формат сохранения регистров учета" значение по умолчанию.
//
Процедура УстановитьФорматСохраненияРегистровУчета() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.ФорматСохраненияРегистровУчета.Получить()) Тогда
		Константы.ФорматСохраненияРегистровУчета.Установить(Перечисления.ФорматыСохраненияОтчетов.PDF);
	КонецЕсли;
	
КонецПроцедуры

// Очищает настройки форм для стандартных бухгалтерских отчетов.
//
Процедура УдалитьНастройкиФормСтандартныхОтчетов() Экспорт
	
	НастройкиФормСтандартныхОтчетов = Новый Массив;
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ОборотноСальдоваяВедомость.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.АнализСчета.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.КарточкаСчета.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ОборотыСчета.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.АнализСубконто.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.КарточкаСубконто.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ОборотыМеждуСубконто.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.СводныеПроводки.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ОтчетПоПроводкам.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ГлавнаяКнига.Форма.ФормаОтчета/НастройкиФормы");
	НастройкиФормСтандартныхОтчетов.Добавить("Отчет.ШахматнаяВедомость.Форма.ФормаОтчета/НастройкиФормы");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Настройка Из НастройкиФормСтандартныхОтчетов Цикл
		ХранилищеСистемныхНастроек.Удалить(Настройка, Неопределено, Неопределено);
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти
