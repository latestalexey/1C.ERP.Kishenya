
#Область СлужебныйПрограммныйИнтерфейс

// Расчет НДФЛ


Функция РассчитатьНалогДляНезарплатыхДоходов(ДатаПолученияДохода, Доходы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Доходы", Доходы); 
	Запрос.УстановитьПараметр("НалоговыйПериод", НачалоМесяца(ДатаПолученияДохода)); 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Список.НомерСтроки КАК НомерСтроки,
	|	Список.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Список.КодДохода КАК КодДохода,
	|	&НалоговыйПериод КАК НалоговыйПериод,
	|	Список.СуммаДохода КАК Доход
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	&Доходы КАК Список
	|;
    |////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Список.НомерСтроки КАК НомерСтроки,
	|	Список.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Список.КодДохода КАК КодДохода,
	|	Список.НалоговыйПериод КАК НалоговыйПериод
	|ПОМЕСТИТЬ ВТСтрокиРасчета
	|ИЗ
	|	ВТДоходы КАК Список
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Список.НомерСтроки КАК НомерСтроки,
	|	Список.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВидыДоходовНДФЛ.ОблагаетсяВоеннымСбором КАК КодДохода,
	|	Список.НалоговыйПериод КАК НалоговыйПериод
	|ИЗ
	|	ВТДоходы КАК Список
	|   ЛЕВОЕ СОЕДИНЕНИЕ
	|   Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|   ПО ВидыДоходовНДФЛ.Ссылка = Список.КодДохода
	|ГДЕ
	|   ВидыДоходовНДФЛ.ОблагаетсяВоеннымСбором <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|";
	Запрос.Выполнить();
	
	// История изменения нормативных величин	
	ОтборыОТ = Новый Структура();
	ВыбираемыеПоляОТ = Новый Структура();
	ОтборыРС = Новый Структура();
	ВыбираемыеПоляРС = Новый Структура();
	ВыбираемыеПоляРС.Вставить("ВидСтавки","ВидСтавкиНДФЛ");
	ВыбираемыеПоляРС.Вставить("Ставка","СтавкаНДФЛ");
	ВыбираемыеПоляРС.Вставить("Порог","ПорогСтавкаНДФЛ");
	ПоляСвязей = Новый Структура();
	
	Запрос.Текст = ЗарплатаКадры.ЗапросВТСрезПоследнихНаВсеДаты("ВТИсторияНормативныхВеличин", "ВТСтрокиРасчета", ОтборыОТ, ВыбираемыеПоляОТ, "НалоговыйПериод", "РегистрСведений.СтавкиНДФЛ", ОтборыРС, ВыбираемыеПоляРС,"Период", ПоляСвязей, ЛОЖЬ, ЛОЖЬ, ЛОЖЬ);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	   "ВЫБРАТЬ
	   |	СтрокиРасчета.НомерСтроки,
	   |	СтрокиРасчета.ФизическоеЛицо,
	   |	СтрокиРасчета.КодДохода,
	   |	СтрокиРасчета.НалоговыйПериод,
	   |	ЕСТЬNULL(Доходы.Доход, 0) КАК Доход,
	   |	0 КАК ДоходНатуральныйКоэффициент,
	   |	ЕСТЬNULL(Доходы.Доход, 0) КАК ДоходПолный,
   	   |	0 КАК Налог,
	   |    ВидыДоходовНДФЛ.ВидСтавкиРезидента КАК ВидСтавки,
	   |    ВидыДоходовНДФЛ.ВидСтавкиУвеличенная КАК УвеличеннаяСтавка,
	   |    ЕСТЬNULL(История1.СтавкаНДФЛ, 0) КАК СтавкаНДФЛ,
	   |    ЕСТЬNULL(История2.СтавкаНДФЛ, 0) КАК СтавкаНДФЛУвеличенная,
	   |    ЕСТЬNULL(История2.ПорогСтавкаНДФЛ, 0) КАК ПорогСтавкаНДФЛУвеличенная
	   |ИЗ
	   |	ВТСтрокиРасчета КАК СтрокиРасчета
	   |    ЛЕВОЕ СОЕДИНЕНИЕ
	   |    Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	   |    ПО СтрокиРасчета.КодДохода = ВидыДоходовНДФЛ.Ссылка
	   |    ЛЕВОЕ СОЕДИНЕНИЕ
	   |	ВТДоходы КАК Доходы
	   |    ПО СтрокиРасчета.НомерСтроки = Доходы.НомерСтроки
	   |    ЛЕВОЕ СОЕДИНЕНИЕ
	   |	ВТИсторияНормативныхВеличин КАК История1
	   |    ПО ВидыДоходовНДФЛ.ВидСтавкиРезидента = История1.ВидСтавкиНДФЛ
	   |     И СтрокиРасчета.НалоговыйПериод = История1.НалоговыйПериод
	   |    ЛЕВОЕ СОЕДИНЕНИЕ
	   |	ВТИсторияНормативныхВеличин КАК История2
	   |    ПО ВидыДоходовНДФЛ.ВидСтавкиУвеличенная = История2.ВидСтавкиНДФЛ
	   |     И СтрокиРасчета.НалоговыйПериод = История2.НалоговыйПериод
	   |	
	   |;
	   |";
	   
	РезультатНДФЛ = Запрос.Выполнить().Выгрузить();	   
	
	Для каждого ВыборкаНДФЛ из РезультатНДФЛ Цикл
		
		//Данные запроса
		ДоходДо			= 0;
		НалогДо			= 0;
		Доход			= ВыборкаНДФЛ.Доход;
		ДоходПолный		= ВыборкаНДФЛ.ДоходПолный;
		
		ДоходНатура 	= ВыборкаНДФЛ.ДоходНатуральныйКоэффициент;
		
		СтавкаНДФЛ					= ВыборкаНДФЛ.СтавкаНДФЛ;
		СтавкаНДФЛУвеличенная		= ВыборкаНДФЛ.СтавкаНДФЛУвеличенная;
		ПорогСтавкаНДФЛУвеличенная	= ВыборкаНДФЛ.ПорогСтавкаНДФЛУвеличенная;
		
		//Учет ЕСВ 
		ВзносыВсего = 0;  //Всего учитываеться взносов для работника в этом периоде
		СуммаВзносов = 0; //в т.ч. по данному виду дохода НДФЛ
		
		СуммаЛьготы = 0;
		
		//Расчет
		БазаНалога = Окр(Доход, 2) - СуммаЛьготы - СуммаВзносов;
		Налог = Окр(Макс(БазаНалога * СтавкаНДФЛ, 0), 5);
		
		//ст. 167.1 Налогового кодекса - если общий доход превышает 10-ти кратный размер минимальной зарплаты,
		//то к сумме превышения применяется ставка 17%.
		//Т.е. к налогу по ставке 15% (уже рассчитано) надо доначислить 2% от суммы превышения.
		//Если в месяце есть несколько видов дохода - учтем по каждому пропорционально?
		Если СтавкаНДФЛУвеличенная <> 0 И СтавкаНДФЛУвеличенная <> СтавкаНДФЛ И ДоходПолный <> 0 И (ДоходПолный <> ВзносыВсего) И Доход <> 0 Тогда
			Превышение = Макс(ДоходПолный - ВзносыВсего - ПорогСтавкаНДФЛУвеличенная,0)*БазаНалога/(ДоходПолный - ВзносыВсего);
			СтавкаПревышение = Макс(СтавкаНДФЛУвеличенная - СтавкаНДФЛ,0);
			НалогПревышение = Окр(Превышение*СтавкаПревышение,5);
			Налог = Налог + НалогПревышение;
		Иначе
			Превышение = 0;
			НалогПревышение = 0;
		КонецЕсли;
		
		Если ДоходНатура <> 0 и Доход <> 0 Тогда
			ДоходБезНатуры = Доход; 
			Доля = ДоходНатура/Доход;
			Натура15 = Окр(ДоходНатура*(1/(1-СтавкаНДФЛ)-1),2);
			Натура17 = Окр(Превышение*Доля*(1/(1-СтавкаНДФЛУвеличенная)-1) - Превышение*Доля*(1/(1-СтавкаНДФЛ)-1),2);
				
			Доход = Окр(Доход + Натура15 + Натура17,2); 
			БазаНалога = Окр(Доход, 2) - СуммаЛьготы - СуммаВзносов;
				
			Налог = Налог + Окр(Натура15*СтавкаНДФЛ,2);
			НалогПревышение = Окр((Превышение+Натура17)*Макс(СтавкаНДФЛУвеличенная - СтавкаНДФЛ,0),2);
		КонецЕсли;
		
		Налог = Окр(Налог,2);
		
		//Запись расчетных величин
		ВыборкаНДФЛ.Доход = Доход;
		ВыборкаНДФЛ.Налог = Налог;
		ВыборкаНДФЛ.ДоходПолный = ДоходПолный;
		
	КонецЦикла;
	
	Возврат РезультатНДФЛ;
	
КонецФункции

// формирование движений

Процедура УчестьПеределыДоходов(Движения, Отказ, Организация, МесяцНачисления, ИсключаемыйРегистратор, Записывать) Экспорт
	
	
	ТаблицаДоходов = Движения.СведенияОДоходахНДФЛ.Выгрузить();
	Если ТаблицаДоходов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("ТаблицаДоходов", ТаблицаДоходов);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("РасчетПриПроведении", ИсключаемыйРегистратор = Движения.СведенияОДоходахНДФЛ.Отбор.Регистратор.Значение );
	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДоходов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДоходов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаДоходов.КодДохода КАК КодДохода,
	|	ТаблицаДоходов.СуммаДохода КАК СуммаДохода
	|ПОМЕСТИТЬ ВТДоходыДокумента
	|ИЗ
	|	&ТаблицаДоходов КАК ТаблицаДоходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДоходов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДоходов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаДоходов.КодДохода КАК КодДохода,
	|	ТаблицаДоходов.СуммаДохода КАК СуммаДохода,
	|	ВидыДоходовНДФЛ.ОблагаетсяСверхПредела КАК КодДоходаСП,
	|	ВидыДоходовВС.ОблагаетсяВоеннымСбором КАК КодДоходаВС
	|ПОМЕСТИТЬ ВТДоходыДокументаСПределами
	|ИЗ
	|	ВТДоходыДокумента КАК ТаблицаДоходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|		ПО ТаблицаДоходов.КодДохода = ВидыДоходовНДФЛ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовВС
	|		ПО ВидыДоходовНДФЛ.ОблагаетсяСверхПредела = ВидыДоходовВС.Ссылка
	|ГДЕ
	|	ВидыДоходовНДФЛ.ОблагаетсяСверхПредела <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыДокументаСПределами.НомерСтроки,
	|	СУММА(СведенияОДоходахНДФЛ.СуммаДоходаОборот) КАК СуммаДоходаОборот
	|ПОМЕСТИТЬ ВТДоходыЗаГод
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ.Обороты(
	|			НАЧАЛОПЕРИОДА(&МесяцНачисления, ГОД),
	|			КОНЕЦПЕРИОДА(&МесяцНачисления, ГОД),
	|			Регистратор,
	|			НАЧАЛОПЕРИОДА(НалоговыйПериод, ГОД) = НАЧАЛОПЕРИОДА(&МесяцНачисления, ГОД)
	|				И ГоловнаяОрганизация = &Организация) КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДоходыДокументаСПределами КАК ДоходыДокументаСПределами
	|		ПО СведенияОДоходахНДФЛ.ФизическоеЛицо = ДоходыДокументаСПределами.ФизическоеЛицо
	|			И СведенияОДоходахНДФЛ.КодДохода = ДоходыДокументаСПределами.КодДохода
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Регистратор <> &ИсключаемыйРегистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыДокументаСПределами.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыДокументаСПределами.НомерСтроки,
	|	ДоходыДокументаСПределами.КодДохода,
	|	ДоходыДокументаСПределами.КодДоходаСП,
	|	ДоходыДокументаСПределами.КодДоходаВС,
	|	ДоходыДокументаСПределами.СуммаДохода,
	|	ЕСТЬNULL(ПределыДоходовНДФЛ.Предел, 0) КАК Предел,
	|	ЕСТЬNULL(ДоходыЗаГод.СуммаДоходаОборот, 0) КАК Оборот,
	|	ВЫБОР
	|		КОГДА &РасчетПриПроведении
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ПределыДоходовНДФЛ.Предел, 0) = 0
	|						ТОГДА 0
	|					КОГДА ЕСТЬNULL(ПределыДоходовНДФЛ.Предел, 0) - ЕСТЬNULL(ДоходыЗаГод.СуммаДоходаОборот, 0) <= 0
	|						ТОГДА 0
	|					КОГДА ЕСТЬNULL(ПределыДоходовНДФЛ.Предел, 0) - ЕСТЬNULL(ДоходыЗаГод.СуммаДоходаОборот, 0) > ДоходыДокументаСПределами.СуммаДохода
	|						ТОГДА ДоходыДокументаСПределами.СуммаДохода
	|					ИНАЧЕ ЕСТЬNULL(ПределыДоходовНДФЛ.Предел, 0) - ЕСТЬNULL(ДоходыЗаГод.СуммаДоходаОборот, 0)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ПределыДоходовНДФЛ.Предел, 0) = 0
	|					ТОГДА 0
	|				КОГДА ЕСТЬNULL(ПределыДоходовНДФЛ.Предел, 0) - ЕСТЬNULL(ДоходыЗаГод.СуммаДоходаОборот, 0) + ДоходыДокументаСПределами.СуммаДохода <= 0
	|					ТОГДА 0
	|				КОГДА ЕСТЬNULL(ПределыДоходовНДФЛ.Предел, 0) - ЕСТЬNULL(ДоходыЗаГод.СуммаДоходаОборот, 0) + ДоходыДокументаСПределами.СуммаДохода > ДоходыДокументаСПределами.СуммаДохода
	|					ТОГДА ДоходыДокументаСПределами.СуммаДохода
	|				ИНАЧЕ ЕСТЬNULL(ПределыДоходовНДФЛ.Предел, 0) - ЕСТЬNULL(ДоходыЗаГод.СуммаДоходаОборот, 0) + ДоходыДокументаСПределами.СуммаДохода
	|			КОНЕЦ
	|	КОНЕЦ КАК СуммаДоходаДоступно
	|ИЗ
	|	ВТДоходыДокументаСПределами КАК ДоходыДокументаСПределами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПределыДоходовНДФЛ.СрезПоследних(&МесяцНачисления, ) КАК ПределыДоходовНДФЛ
	|		ПО ДоходыДокументаСПределами.КодДохода = ПределыДоходовНДФЛ.КодДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыЗаГод КАК ДоходыЗаГод
	|		ПО ДоходыДокументаСПределами.НомерСтроки = ДоходыЗаГод.НомерСтроки
	|		 И ПределыДоходовНДФЛ.ВидПредела = ЗНАЧЕНИЕ(Перечисление.ВидыПределовДоходовНДФЛ.Годовой)
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаДоход = ТаблицаДоходов.Найти(Выборка.НомерСтроки, "НомерСтроки");
		Превышение = Выборка.СуммаДохода - Выборка.СуммаДоходаДоступно;
		Если Превышение > 0 Тогда 
			СтрокаДоход.СуммаДохода = Выборка.СуммаДоходаДоступно;
			НС =  ТаблицаДоходов.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаДоход);
			НС.КодДохода = Выборка.КодДоходаСП;
			НС.СуммаДохода = Превышение;
			Если ЗначениеЗаполнено(Выборка.КодДоходаВС) Тогда
				НСВС =  ТаблицаДоходов.Добавить();
				ЗаполнитьЗначенияСвойств(НСВС, НС);
				НС.КодДохода = Выборка.КодДоходаВС;
				НС.НатуральныйКоэффициент = Ложь;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Движения.СведенияОДоходахНДФЛ.Загрузить(ТаблицаДоходов);
	
	Если Записывать Тогда
		// Записываем сразу и не выставляем признак Записывать этому набору записей движений документа.
		Движения.СведенияОДоходахНДФЛ.Записать();
		Движения.СведенияОДоходахНДФЛ.Записывать = Ложь;
	Иначе
		Движения.СведенияОДоходахНДФЛ.Записывать = Истина;
	КонецЕсли;
	
	
КонецПроцедуры	
	
// Формирует движения по регистрам подсистемы, от базовой реализации отличается учетом возможных сторнирований и
// исправлений документов.
//      	 
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		ДатаВыплаты - дата -
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит вр. таблицу 
//			ВТНачисления с полями.
//				Сотрудник, тип СправочникСсылка.Сотрудники.
//				Начисление, тип ПланВидовРасчетаСсылка.Начисления,СправочникСсылка.ВидыДоходовНДФЛ 
//				ДатаНачала, тип дата 
//				Сторно, тип булево 
//				СторнируемыйДокумент, тип ДокументСсылка
//				СуммаДохода, тип число
//				СуммаВычетаНДФЛ, тип число
//				КодВычетаНДФЛ, тип СправочникСсылка.ВидыВычетовНДФЛ.
//				Подразделение, тип СправочникСсылка.ПодразделенияОрганизаций.
//		МесяцНачисления - дата -
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//		ИмяВТНачисления - строка - имя вр. таблицы начислений, по умолчанию "ВТНачисления".
//		ИсключаемыйРегистратор - ДокументСсылка - документ, движения которого не следует учитывать при расчете движений.
//
Процедура СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц, МесяцНачисления = Неопределено, Записывать = Ложь, ОкончательныйРасчет = Истина, ИмяВТНачисления = "ВТНачисления", ИсключаемыйРегистратор = Неопределено) Экспорт
	
	
	Если Не ЗначениеЗаполнено(МесяцНачисления) Тогда
		МесяцНачисления = ДатаОперации
	КонецЕсли;
	
	
	УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц, МесяцНачисления, Записывать, ОкончательныйРасчет, ИмяВТНачисления);
	Если ТипЗнч(ИсключаемыйРегистратор) = Тип("ДокументСсылка.МатериальнаяПомощь") Тогда
		УчестьПеределыДоходов(Движения, Отказ, Организация, МесяцНачисления, ИсключаемыйРегистратор, Записывать);	
	КонецЕсли;	
	
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы, от базовой реализации отличается учетом расширенных настроек.
//
// Параметры:
//		Регистратор - ДокументСсылка -
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		МесяцНачисления - дата -
//		Удержания - ТаблицаЗначений - содержит колонки
//				ФизическоеЛицо: должно быть непустым.
//				КатегорияУдержания - тип ПеречислениеСсылка.КатегорииУдержаний.
//				Удержание - тип ПланВидовРасчетаСсылка.Удержания.
//				ДокументОснование - тип ДокументСсылка.УдержаниеДобровольныхВзносовВНПФ, ДокументСсылка.УдержаниеДобровольныхСтраховыхВзносов, ДокументСсылка.ПереносДанных
//				Сумма
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//
Процедура СформироватьСоциальныеВычетыПоУдержаниям(Регистратор, Движения, Отказ, Организация, ДатаОперации, МесяцНачисления, Удержания, Записывать = Ложь, ОкончательныйРасчет = Истина) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Удержания", Удержания);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&МесяцНачисления КАК Период,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Удержания.ФизическоеЛицо,
	|	Удержания.КатегорияУдержания КАК КатегорияВзносов,
	|	ВЫБОР
	|		КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ)
	|			ТОГДА ЗНАЧЕНИЕ(Документ.УдержаниеДобровольныхСтраховыхВзносов.ПустаяСсылка)
	|		ИНАЧЕ Удержания.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	Удержания.Удержание,
	|	Удержания.Сумма
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	&Удержания КАК Удержания";
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПредоставлениеСоциальныхВычетовУРаботодателя",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТДанныеДокумента",
			"ГоловнаяОрганизация,ФизическоеЛицо,КатегорияВзносов,ДокументОснование"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.КатегорияВзносов КАК КатегорияУдержания,
	|	ДанныеДокумента.Удержание,
	|	ДанныеДокумента.Сумма
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставлениеСоциальныхВычетовУРаботодателяСрезПоследних КАК ДанныеРегистра
	|		ПО ДанныеДокумента.ГоловнаяОрганизация = ДанныеРегистра.ГоловнаяОрганизация
	|			И ДанныеДокумента.ФизическоеЛицо = ДанныеРегистра.ФизическоеЛицо
	|			И ДанныеДокумента.КатегорияВзносов = ДанныеРегистра.КатегорияВзносов
	|			И ДанныеДокумента.ДокументОснование = ДанныеРегистра.ДокументОснование
	|ГДЕ
	|	НЕ ЕСТЬNULL(ДанныеРегистра.НеПредоставлятьВычет, ЛОЖЬ)";
	
	УчетНДФЛ.СформироватьСоциальныеВычетыПоУдержаниям(Регистратор, Движения, Отказ, Организация, ДатаОперации, МесяцНачисления, Запрос.Выполнить().Выгрузить(), Записывать, ОкончательныйРасчет);
	
КонецПроцедуры
	
// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		Удержания - ТаблицаЗначений - содержит колонки
//				ФизическоеЛицо: должно быть непустым
//				КатегорияВзносов: должно быть непустым, тип ПеречислениеСсылка.КатегорииУдержаний.
//				ДокументОснование - необязательное, тип ДокументСсылка.УдержаниеДобровольныхВзносовВНПФ,
//				                    ДокументСсылка.УдержаниеДобровольныхСтраховыхВзносов, ДокументСсылка.ПереносДанных.
//				НеПредоставлятьВычет - необязательное, булево.
//				ДействуетДо - необязательное, дата.
//				НеПредоставлятьВычетПоОкончании - необязательное, булево.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьПрименениеСоциальныхВычетовПоУдержаниям(Движения, Отказ, Организация, ДатаОперации, Удержания, Записывать = Ложь) Экспорт
	
	Если Удержания = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ЕстьНовыеСтроки = Ложь;
	Для Каждого СтрокаДанных Из Удержания Цикл
		ЕстьНовыеСтроки = Истина;
		НоваяСтрока = СтрокаПримененияСоциальныхВычетов(Движения, Организация, ДатаОперации, СтрокаДанных);
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Если Записывать Тогда
			Движения.ПредоставлениеСоциальныхВычетовУРаботодателя.Записать();
			Движения.ПредоставлениеСоциальныхВычетовУРаботодателя.Записывать = Ложь;
		Иначе
			Движения.ПредоставлениеСоциальныхВычетовУРаботодателя.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по НДФЛ: регистрирует доходы, вычеты и исчисленный налог (как в учете НДФЛ, так и в учете
// начисленной зарплаты).
//
// Параметры:
//		Регистратор - ДокументСсылка -
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		Дата, ПериодРегистрации - реквизиты регистратора.
//		ПорядокВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты - Межрасчет / Зарплата / Аванс
//		ПланируемаяДатаВыплаты - дата -
//		ДанныеДляПроведения - структура - структура данных, используемая при проведении документов
//				обязательные поля
//					МенеджерВременныхТаблиц с вр.таблицами ВТНачисления, ВТФизическиеЛица.
//					НДФЛ - таблица значений с данными об исчисленном НДФЛ и предоставленных вычетах.
//					УдержанияПоСотрудникам - таблица значений с данными о суммах удержаний.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		РегистрироватьСуммыНалога - булево - признак того, надо ли писать движения по исчисленным налогам,
//					если не указан будет определяться по значению параметра ПорядокВыплаты: истине соответствует Межрасчет.
//
Процедура ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(Регистратор, Движения, Отказ, Организация, Дата, ПериодРегистрации, ПорядокВыплаты, ПланируемаяДатаВыплаты, ДанныеДляПроведения, Записывать = Ложь, РегистрироватьСуммыНалога = Неопределено) Экспорт 
	
	ДатаОперацииПоНалогам = ДатаОперацииПоДокументу(Дата, ПериодРегистрации);
	
	Если РегистрироватьСуммыНалога = Неопределено Тогда 
		РегистрироватьСуммыНалога = РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	КонецЕсли;
	
	// регистрация доходов
	СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ПланируемаяДатаВыплаты, ДанныеДляПроведения.МенеджерВременныхТаблиц, ПериодРегистрации, Истина, Не РегистрироватьСуммыНалога, , Регистратор);
	
	Если РегистрироватьСуммыНалога Тогда
		
		// Регистрация исчисленного налога.
		УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НДФЛ, Записывать, Ложь);
		
		// Учет исчисленного налога в "зарплате".
		УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НДФЛПоСотрудникам);
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляПроведения.НДФЛПоСотрудникам, ДанныеДляПроведения.МенеджерВременныхТаблиц, ПорядокВыплаты, Записывать);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по НДФЛ: регистрирует доходы, вычеты и исчисленный налог (как в учете НДФЛ, так и в учете
// начисленной зарплаты).
//
// Параметры:
//		Регистратор - ДокументСсылка -
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		Дата - дата - реквизит регистратора.
//		МесяцНачисления - дата.
//		ПорядокВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты - Межрасчет / Зарплата / Аванс
//		ДанныеДляПроведения - структура - структура данных, используемая при проведении документов
//				обязательные поля
//					МенеджерВременныхТаблиц с вр.таблицей ВТФизическиеЛица.
//					НДФЛ - таблица значений с данными об исчисленном НДФЛ и предоставленных вычетах.
//					УдержанияПоСотрудникам - таблица значений с данными о суммах удержаний.
//		ТаблицаДоходов - ТаблицаЗначений - содержит колонки
//				ФизическоеЛицо: должно быть непустым.
//				Подразделение: тип СправочникСсылка.ПодразделенияОрганизаций
//      	    ДатаПолученияДохода: должно быть непустым
//				КодДохода
//				СуммаДохода
//      	    КодВычета
//          	СуммаВычета.
//				Сотрудник - необязательная, может отсутствовать.
//      	    Начисление - необязательная, может отсутствовать.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		РегистрироватьСуммыНалога - булево - признак того, надо ли писать движения по исчисленным налогам,
//					если не указан будет определяться по значению параметра ПорядокВыплаты: истине соответствует Межрасчет.
//
Процедура ЗарегистрироватьДоходыИСуммыНДФЛПоТаблицеДоходов(Регистратор, Движения, Отказ, Организация, Дата, МесяцНачисления, ПорядокВыплаты, ДанныеДляПроведения, ТаблицаДоходов, Записывать = Ложь, РегистрироватьСуммыНалога = Неопределено) Экспорт 
	
	ДатаОперацииПоНалогам = ДатаОперацииПоДокументу(Дата, МесяцНачисления);
	
	Если РегистрироватьСуммыНалога = Неопределено Тогда 
		РегистрироватьСуммыНалога = Ложь;
	КонецЕсли;
	
    РегистрироватьСуммыНалога = Ложь;
	
	// регистрация доходов
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ТаблицаДоходов, Истина, Не РегистрироватьСуммыНалога);
	
	Если РегистрироватьСуммыНалога Тогда
		
		// Регистрация исчисленного налога.
		УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НДФЛ, Записывать, Ложь);
		СформироватьСоциальныеВычетыПоУдержаниям(Регистратор, Движения, Отказ, Организация, ДатаОперацииПоНалогам, МесяцНачисления, ДанныеДляПроведения.УдержанияПоСотрудникам, Записывать, Ложь);
		
		// Учет исчисленного налога в "зарплате".
		УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НДФЛПоСотрудникам);
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(Движения, Отказ, Организация, МесяцНачисления, ДанныеДляПроведения.НДФЛПоСотрудникам, ДанныеДляПроведения.МенеджерВременныхТаблиц, ПорядокВыплаты, Записывать);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет регистрацию доходов по дивидендам и налога с этих доходов.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаВыплаты - дата - дата, которой будет зарегистрировано движение.
//		Дивиденды - ТаблицаЗначений - содержит, как минимум, колонки.
//			Акционер
//			Начислено
//			ВычетПоНДФЛ
//			НДФЛ
//		ВключатьВДекларациюПоНалогуНаПрибыль - булево -
//
Процедура СформироватьДоходыИНДФЛСДивидендов(Движения, Отказ, Организация, ДатаВыплаты, Дивиденды, Ссылка) Экспорт
	
	Если Дивиденды.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ЕстьНовыеСтроки = Ложь;
	Для Каждого СтрокаДанных Из Дивиденды Цикл
		
		Если СтрокаДанных.НДФЛ > 0 Тогда
			ЕстьНовыеСтроки = Истина;
			НоваяСтрока = Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Добавить();
			НоваяСтрока.Период = ДатаВыплаты;			
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
			НоваяСтрока.ФизическоеЛицо = СтрокаДанных.Акционер;
			НоваяСтрока.ПериодВзаиморасчетов = НачалоМесяца(ДатаВыплаты);
			НоваяСтрока.ГруппаУчетаУдержаний = Справочники.ГруппыУчетаНачисленийИУдержаний.НДФЛ;
			НоваяСтрока.КодДохода = СтрокаДанных.КодДохода;
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ОбособленноеПодразделение = СтрокаДанных.ОбособленноеПодразделение;
			НоваяСтрока.НалоговыйПериод = НачалоМесяца(ДатаВыплаты);
			НоваяСтрока.ДокументОснование = Ссылка;
			
			НоваяСтрока.Налог = СтрокаДанных.НДФЛ;
			НоваяСтрока.Доход = СтрокаДанных.Начислено;
			
			НоваяСтрока = Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Добавить();
			НоваяСтрока.Период = ДатаВыплаты;			
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
			НоваяСтрока.ФизическоеЛицо = СтрокаДанных.Акционер;
			НоваяСтрока.ПериодВзаиморасчетов = НачалоМесяца(ДатаВыплаты);
			НоваяСтрока.ГруппаУчетаУдержаний = Справочники.ГруппыУчетаНачисленийИУдержаний.НДФЛ;
			НоваяСтрока.КодДохода = СтрокаДанных.КодДохода;
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ОбособленноеПодразделение = СтрокаДанных.ОбособленноеПодразделение;
			НоваяСтрока.НалоговыйПериод = НачалоМесяца(ДатаВыплаты);
			НоваяСтрока.ДокументОснование = Ссылка;
			
			НоваяСтрока.Налог = СтрокаДанных.НДФЛ;
			НоваяСтрока.Доход = СтрокаДанных.Начислено;
			
		КонецЕсли;
		
		Если СтрокаДанных.ВС > 0 Тогда
			ЕстьНовыеСтроки = Истина;
			НоваяСтрока = Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Добавить();
			НоваяСтрока.Период = ДатаВыплаты;			
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
			НоваяСтрока.ФизическоеЛицо = СтрокаДанных.Акционер;
			НоваяСтрока.ПериодВзаиморасчетов = НачалоМесяца(ДатаВыплаты);
			НоваяСтрока.ГруппаУчетаУдержаний = Справочники.ГруппыУчетаНачисленийИУдержаний.ВоенныйСбор;
			НоваяСтрока.КодДохода = СтрокаДанных.КодДоходаВС;
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ОбособленноеПодразделение = СтрокаДанных.ОбособленноеПодразделение;
			НоваяСтрока.НалоговыйПериод = НачалоМесяца(ДатаВыплаты);
			НоваяСтрока.ДокументОснование = Ссылка;
			
			НоваяСтрока.Налог = СтрокаДанных.ВС;
			НоваяСтрока.Доход = СтрокаДанных.Начислено;
			
			НоваяСтрока = Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Добавить();
			НоваяСтрока.Период = ДатаВыплаты;			
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
			НоваяСтрока.ФизическоеЛицо = СтрокаДанных.Акционер;
			НоваяСтрока.ПериодВзаиморасчетов = НачалоМесяца(ДатаВыплаты);
			НоваяСтрока.ГруппаУчетаУдержаний = Справочники.ГруппыУчетаНачисленийИУдержаний.ВоенныйСбор;
			НоваяСтрока.КодДохода = СтрокаДанных.КодДоходаВС;
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ОбособленноеПодразделение = СтрокаДанных.ОбособленноеПодразделение;
			НоваяСтрока.НалоговыйПериод = НачалоМесяца(ДатаВыплаты);
			НоваяСтрока.ДокументОснование = Ссылка;
			
			НоваяСтрока.Налог = СтрокаДанных.ВС;
			НоваяСтрока.Доход = СтрокаДанных.Начислено
			
		КонецЕсли;	

		
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Если Истина Тогда
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записать();
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Ложь;
		Иначе
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
	
	
	
КонецПроцедуры

// Выполняет регистрацию доходов по призам и подаркам и налога с этих доходов.
// Параметры:
//	- Организация
//	- ПризыПодарки - таблица, содержащая колонки
//		ФизическоеЛицо.
//		Подразделение
//		КодДохода  
//		КодВычета 
//		СтавкаНалогообложенияРезидента 
//		СуммаДохода
//		СуммаВычета.
//		Сумма - исчисленный НДФЛ
//
Процедура СформироватьДоходыИНДФЛСПризовПодарков(Движения, Отказ, Организация, ДатаПолученияДохода, Дата, МесяцНачисления, ПризыПодарки) Экспорт
	
	ДатаОперацииПоНалогам = ДатаОперацииПоДокументу(Дата, МесяцНачисления);
	
	ПризыПодарки.Колонки.Добавить("ДатаПолученияДохода", Новый ОписаниеТипов("Дата"));
	ПризыПодарки.ЗаполнитьЗначения(ДатаПолученияДохода, "ДатаПолученияДохода");
	ПризыПодарки.Колонки.Добавить("МесяцНалоговогоПериода", Новый ОписаниеТипов("Дата"));
	ПризыПодарки.ЗаполнитьЗначения(НачалоМесяца(ДатаПолученияДохода), "МесяцНалоговогоПериода");

	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ПризыПодарки, Истина);
	УчетНДФЛ.СформироватьИсчисленныйНалогПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ПризыПодарки);
	
КонецПроцедуры

// Заполняет данные для регистрации факта применения вычетов по результатам удержаний.
//
// Параметры:
//		ДанныеДляПроведения - Структура
//		Документ - Ссылка на документ.
//
Процедура ЗаполнитьДанныеДляПримененияСоциальныхВычетов(ДанныеДляПроведения, Документ) Экспорт
	
	МетаданныеДокумента = Документ.Метаданные();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ПустойДокументОснование", Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументУдержания.Ссылка.ДатаНачала КАК Период,
	|	ДокументУдержания.Ссылка.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Ссылка.Удержание.КатегорияУдержания КАК КатегорияВзносов,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.Ссылка.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.Ссылка.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Начать)
	|				ИЛИ ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Изменить)
	|			ТОГДА ДокументУдержания.Ссылка.НеПредоставлятьСоциальныйВычетУРаботодателя
	|		ИНАЧЕ НЕ ДокументУдержания.Ссылка.НеПредоставлятьСоциальныйВычетУРаботодателя
	|	КОНЕЦ КАК НеПредоставлятьВычет
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	#ТаблицаДокумента КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Ссылка = &Документ";
	
	// Если документ регистрирует удержания без учета документа основания, модифицируем текст запроса.
	Если МетаданныеДокумента.Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|	ВЫБОР
			|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
			|			ТОГДА ДокументУдержания.Ссылка
			|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
			|	КОНЕЦ КАК ДокументОснование,", 
			"
			|	&ПустойДокументОснование КАК ДокументОснование,");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ТаблицаДокумента", МетаданныеДокумента.ПолноеИмя() + ".Удержания");
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Документ);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПредоставлениеСоциальныхВычетовУРаботодателя",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТДанныеДокумента",
			"ГоловнаяОрганизация,ФизическоеЛицо,КатегорияВзносов,ДокументОснование"),
		ПараметрыПостроения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период,
	|	ДанныеДокумента.ГоловнаяОрганизация,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.КатегорияВзносов,
	|	ДанныеДокумента.ДокументОснование,
	|	ДанныеДокумента.ДействуетДо,
	|	ДанныеДокумента.НеПредоставлятьВычет,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЕСТЬNULL(ДанныеРегистра.НеПредоставлятьВычет, ЛОЖЬ)
	|	КОНЕЦ КАК НеПредоставлятьВычетПоОкончании
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставлениеСоциальныхВычетовУРаботодателяСрезПоследних КАК ДанныеРегистра
	|		ПО ДанныеДокумента.ГоловнаяОрганизация = ДанныеРегистра.ГоловнаяОрганизация
	|			И ДанныеДокумента.ФизическоеЛицо = ДанныеРегистра.ФизическоеЛицо
	|			И ДанныеДокумента.КатегорияВзносов = ДанныеРегистра.КатегорияВзносов
	|			И ДанныеДокумента.ДокументОснование = ДанныеРегистра.ДокументОснование";
	
	ДанныеДляПроведения.Вставить("ПримененияСоциальныхВычетов",Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Формирует временную таблицу сотрудников, получивших доход в указанном периоде, исключая заданных.
//
Процедура СоздатьВТСотрудникиДополнительныйДоход(МенеджерВременныхТаблиц, Организация, Подразделение, ИсключаяСотрудников, Начало, Окончание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачала", Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", Окончание);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Не ЗначениеЗаполнено(Подразделение));
	Запрос.УстановитьПараметр("Сотрудники", ИсключаяСотрудников);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛицаДополнительныйДоход
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.ФизическоеЛицо = СведенияОДоходахНДФЛ.ФизическоеЛицо)
	|			И (Сотрудники.Ссылка В (&Сотрудники))
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СведенияОДоходахНДФЛ.Организация = &Организация
	|	И (СведенияОДоходахНДФЛ.Подразделение В ИЕРАРХИИ (&Подразделение)
	|			ИЛИ &ПоВсемПодразделениям)
	|	И Сотрудники.Ссылка ЕСТЬ NULL ";
	
	Запрос.Выполнить();
	
	Параметры = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	Параметры.Организация = Организация;
	Параметры.Подразделение = Подразделение;
	Параметры.ИмяВТФизическиеЛица = "ВТФизическиеЛицаДополнительныйДоход";

	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, Параметры);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиДополнительныйДоход
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";

	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СформироватьНачислениеНДФЛПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, НДФЛ, Записывать = Ложь) Экспорт
	
	Если НДФЛ = Неопределено Или НДФЛ.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ЕстьНовыеСтроки = Ложь;
	Для Каждого СтрокаДанных Из НДФЛ Цикл
		
		Если СтрокаДанных.Налог = 0 И СтрокаДанных.Доход = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьНовыеСтроки = Истина;
		НоваяСтрокаРасчетовНалогоплательщика = СтрокаРасчетовНалогоплательщикаСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Приход, СтрокаДанных);
		
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Если Записывать Тогда
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записать();
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Ложь;
		Иначе
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура СформироватьПеречислениеНДФЛПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, НДФЛ, ПеречислениеНДФЛВыполнено = Истина, Записывать = Ложь) Экспорт
	
	Если НДФЛ = Неопределено Или НДФЛ.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ЕстьНовыеСтроки = Ложь;
	Для Каждого СтрокаДанных Из НДФЛ Цикл
		
		Если ПеречислениеНДФЛВыполнено И СтрокаДанных.Налог = 0 И СтрокаДанных.Доход = 0 Тогда
			Продолжить;
		ИначеЕсли НЕ ПеречислениеНДФЛВыполнено И СтрокаДанных.Доход = 0 Тогда
			Продолжить;	
		КонецЕсли;
		
		ЕстьНовыеСтроки = Истина;
		НоваяСтрокаРасчетовНалогоплательщика = СтрокаРасчетовНалогоплательщикаСБюджетом(Движения, Организация, ДатаОперации, ВидДвиженияНакопления.Расход, СтрокаДанных, ПеречислениеНДФЛВыполнено);
		Если НЕ ПеречислениеНДФЛВыполнено Тогда
			НоваяСтрокаРасчетовНалогоплательщика.Налог = 0;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Если Записывать Тогда
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записать();
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Ложь;
		Иначе
			Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокаРасчетовНалогоплательщикаСБюджетом(Движения, Организация, ДатаОперации, ВидДвижения, ДанныеДокумента, ПеречислениеНДФЛВыполнено = Истина, ОкончательныйРасчет = Истина)
	
	НоваяСтрока = Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
	НоваяСтрока.ВидДвижения = ВидДвижения;
	НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период = ДатаОперации;
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПериодВзаиморасчетов) Тогда
		НоваяСтрока.ПериодВзаиморасчетов = НачалоМесяца(ДатаОперации);
	КонецЕсли;	
	НоваяСтрока.РасчетМежрасчетногоПериода = Не ОкончательныйРасчет;
	
    Возврат НоваяСтрока
	
КонецФункции



// Обслуживание печати в документах выплаты зарплаты.

Процедура ДобавитьКомандуПечатиРеестраПеречисленногоНалога(КомандыПечати) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеНалоговИВзносов, ЧтениеНалоговИВзносов", , Ложь) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ПФ_MXL_РеестрПеречисленныхСуммНДФЛ";
		КомандаПечати.Представление = НСтр("ru='Реестр перечисленных сумм НДФЛ';uk='Реєстр перерахованих сум ПДФО'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ПФ_MXL_РеестрПеречисленныхСуммВС";
		КомандаПечати.Представление = НСтр("ru='Реестр перечисленных сумм военного сбора';uk='Реєстр перерахованих сум військового збору'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли
	
КонецПроцедуры

Процедура ВывестиРеестрПеречисленногоНалогаПоПлатежномуДокументу(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати, НДФЛ = Истина) Экспорт
	
	Если НДФЛ Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрПеречисленныхСуммНДФЛ";
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_РеестрПеречисленныхСуммНДФЛ");
	Иначе
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрПеречисленныхСуммВС";
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_РеестрПеречисленныхСуммВС");
		
	КонецЕсли;	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	// получаем данные для печати
	ВыборкаШапок = ВедомостИВыборкаДляПечатиШапки(МассивОбъектов, НДФЛ);
	ВыборкаСтрок = ВедомостиВыборкаДляПечатиТаблицы(МассивОбъектов, НДФЛ);

	ПервыйДокумент = Истина;
	Пока ВыборкаШапок.Следующий() Цикл
		
		// Документы нужно выводить на разных страницах.
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подсчитываем количество страниц документа - для корректного разбиения на страницы.
		ВсегоСтрокДокумента = ВыборкаСтрок.Количество();
		
		ОбластьМакетаШапка			= Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаПодвал 		= Макет.ПолучитьОбласть("Подвал");
		
		// выводим данные о документе
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаШапок);
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		
		ОбластьМакетаШапка.Параметры.Номер			= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаШапок.Номер, Истина, Истина);
		ОбластьМакетаШапка.Параметры.Дата			= Формат(ВыборкаШапок.Дата, "ДФ=dd.MM.yyyy");
		ОбластьМакетаШапка.Параметры.ПериодРегистрации	= Формат(ВыборкаШапок.ПериодРегистрации, "ДФ = 'ММММ гггг'");
		
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаШапок); // Подвал документа.
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		ВыведеноСтраниц = 1; ВыведеноСтрок = 0; ИтогоНаСтранице = 0; Итого = 0;
		
		// Выводим данные по строкам документа.
		НомерСтроки = 0;
		ВыборкаСтрок.Сбросить();
		Пока ВыборкаСтрок.НайтиСледующий(ВыборкаШапок.Ссылка, "Ведомость") Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.Заполнить(ВыборкаСтрок);
			ОбластьМакетаСтрока.Параметры.НомерСтроки = НомерСтроки;
				
			Если НастройкиПечатныхФорм.ВыводитьПолныеФИОВСписочныхПечатныхФормах Тогда
					
				ОбластьМакетаСтрока.Параметры.Физлицо = СокрЛП(ВыборкаСтрок.Фамилия)
					+ ?(ПустаяСтрока(ВыборкаСтрок.Имя), "", " " + ВыборкаСтрок.Имя)
					+ ?(ПустаяСтрока(ВыборкаСтрок.Отчество), "", " " + ВыборкаСтрок.Отчество);
					
			Иначе
				ФИО = Новый Структура("Фамилия, Имя, Отчество");
				ФИО.Фамилия = ВыборкаСтрок.Фамилия;
				ФИО.Имя = ВыборкаСтрок.Имя;
				ФИО.Отчество = ВыборкаСтрок.Отчество;
				ОбластьМакетаСтрока.Параметры.Физлицо = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			ИтогоНаСтранице = ИтогоНаСтранице + ВыборкаСтрок.Сумма;
			Итого = Итого + ВыборкаСтрок.Сумма;
			
		КонецЦикла; // по строкам документа
		
		ОбластьМакетаПодвал.Параметры.СуммаУплатыВсего = Итого;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаШапок.Ссылка);
		
	КонецЦикла; // по документам
	
	Если НДФЛ Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрПеречисленныхСуммНДФЛ", 
			НСтр("ru='Реестр перечисленных сумм НДФЛ';uk='Реєстр перерахованих сум ПДФО'"), ТабличныйДокумент, , "ОбщийМакет.ПФ_MXL_РеестрПеречисленныхСуммНДФЛ");
	Иначе
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрПеречисленныхСуммВС", 
			НСтр("ru='Реестр перечисленных сумм военного сбора';uk='Реєстр перерахованих сум військового збору'"), ТабличныйДокумент, , "ОбщийМакет.ПФ_MXL_РеестрПеречисленныхСуммВС");
	КонецЕсли;		
	
	
	
КонецПроцедуры

Функция НужноПечататьРеестрПеречисленногоНалога(КоллекцияПечатныхФорм) Экспорт
	
	Возврат УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрПеречисленныхСуммНДФЛ");
	
КонецФункции

Функция НужноПечататьРеестрПеречисленногоНалогаВС(КоллекцияПечатныхФорм) Экспорт
	
	Возврат УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрПеречисленныхСуммВС");
	
КонецФункции

Функция ВедомостИВыборкаДляПечатиШапки(МассивОбъектов, НДФЛ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка.Дата КАК Дата,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Номер КАК Номер,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ПериодРегистрации КАК ПериодРегистрации,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ВедомостьНаВыплатуЗарплатыВБанк.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ГлавныйБухгалтер,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Бухгалтер
	|ПОМЕСТИТЬ ВТДанныеРегистраторов
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка.Дата КАК Дата,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Номер КАК Номер,
	|	ВедомостьНаВыплатуЗарплатыВКассу.ПериодРегистрации КАК ПериодРегистрации,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ВедомостьНаВыплатуЗарплатыВКассу.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	ВедомостьНаВыплатуЗарплатыВКассу.ГлавныйБухгалтер,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ВедомостьНаВыплатуЗарплатыВКассу
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка.Дата КАК Дата,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Номер КАК Номер,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.ПериодРегистрации КАК ПериодРегистрации,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ВедомостьНаВыплатуЗарплатыПеречислением.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,	
	|	ВедомостьНаВыплатуЗарплатыПеречислением.ГлавныйБухгалтер,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК ВедомостьНаВыплатуЗарплатыПеречислением
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка.Дата КАК Дата,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Номер КАК Номер,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.ПериодРегистрации КАК ПериодРегистрации,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ВедомостьНаВыплатуЗарплатыРаздатчиком.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,	
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.ГлавныйБухгалтер,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком КАК ВедомостьНаВыплатуЗарплатыРаздатчиком
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка В(&МассивОбъектов)
	|";

	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеРегистраторов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.Номер,
	|	ДанныеДокументов.ПериодРегистрации,
	|	ДанныеДокументов.НазваниеОрганизации,
	|	ДанныеДокументов.КодПоЕДРПОУ,
	|	ЕСТЬNULL(ФИОГлавногоБухгалтера.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ЕСТЬNULL(ФИОБухгалтера.РасшифровкаПодписи, """") КАК Бухгалтер
	|ИЗ
	|	ВТДанныеРегистраторов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И ДанныеДокументов.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОБухгалтера.Ссылка
	|			И ДанныеДокументов.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.Ссылка";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВедомостиВыборкаДляПечатиТаблицы(МассивОбъектов, НДФЛ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ГруппаУчета", ?(НДФЛ, Справочники.ГруппыУчетаНачисленийИУдержаний.НДФЛ, Справочники.ГруппыУчетаНачисленийИУдержаний.ВоенныйСбор));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка.Дата КАК Дата,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВедомостьНаВыплатуЗарплатыВБанк.КодДохода КАК КодДохода,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ГруппаУчетаУдержаний КАК ГруппаУчетаУдержаний,
	|	СУММА(ВедомостьНаВыплатуЗарплатыВБанк.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТНДФЛ
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.НДФЛ КАК ВедомостьНаВыплатуЗарплатыВБанк
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка В(&МассивОбъектов)
	|   И ВедомостьНаВыплатуЗарплатыВБанк.ГруппаУчетаУдержаний = &ГруппаУчета
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка.Дата,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ФизическоеЛицо,
	|	ВедомостьНаВыплатуЗарплатыВБанк.КодДохода,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ГруппаУчетаУдержаний
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка.Дата КАК Дата,
	|	ВедомостьНаВыплатуЗарплатыВКассу.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВедомостьНаВыплатуЗарплатыВКассу.КодДохода КАК КодДохода,
	|	ВедомостьНаВыплатуЗарплатыВКассу.ГруппаУчетаУдержаний КАК ГруппаУчетаУдержаний,
	|	СУММА(ВедомостьНаВыплатуЗарплатыВКассу.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.НДФЛ КАК ВедомостьНаВыплатуЗарплатыВКассу
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка В(&МассивОбъектов)
	|   И ВедомостьНаВыплатуЗарплатыВКассу.ГруппаУчетаУдержаний = &ГруппаУчета
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка.Дата,
	|	ВедомостьНаВыплатуЗарплатыВКассу.ФизическоеЛицо,
	|	ВедомостьНаВыплатуЗарплатыВКассу.КодДохода,
	|	ВедомостьНаВыплатуЗарплатыВКассу.ГруппаУчетаУдержаний
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка.Дата КАК Дата,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.КодДохода КАК КодДохода,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.ГруппаУчетаУдержаний КАК ГруппаУчетаУдержаний,
	|	СУММА(ВедомостьНаВыплатуЗарплатыПеречислением.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.НДФЛ КАК ВедомостьНаВыплатуЗарплатыПеречислением
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка В(&МассивОбъектов)
	|   И ВедомостьНаВыплатуЗарплатыПеречислением.ГруппаУчетаУдержаний = &ГруппаУчета
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка.Дата,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.ФизическоеЛицо,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.КодДохода,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.ГруппаУчетаУдержаний
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка.Дата КАК Дата,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.КодДохода КАК КодДохода,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.ГруппаУчетаУдержаний КАК ГруппаУчетаУдержаний,
	|	СУММА(ВедомостьНаВыплатуЗарплатыРаздатчиком.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.НДФЛ КАК ВедомостьНаВыплатуЗарплатыРаздатчиком
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка В(&МассивОбъектов)
	|   И ВедомостьНаВыплатуЗарплатыРаздатчиком.ГруппаУчетаУдержаний = &ГруппаУчета	
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка.Дата,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.ФизическоеЛицо,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.КодДохода,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.ГруппаУчетаУдержаний
	|";

	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НДФЛ.Дата КАК Период
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТНДФЛ КАК НДФЛ";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
    		Запрос.МенеджерВременныхТаблиц,
    		"ВТФизическиеЛица");
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, "Фамилия, Имя, Отчество");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НДФЛ.Ссылка КАК Ведомость,
	|	НДФЛ.КодДохода,
	|	КадровыеДанныеФизическихЛиц.Фамилия,
	|	КадровыеДанныеФизическихЛиц.Имя,
	|	КадровыеДанныеФизическихЛиц.Отчество,
	|	НДФЛ.Сумма КАК Сумма
	|ИЗ
	|	ВТНДФЛ КАК НДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
	|		ПО НДФЛ.ФизическоеЛицо = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
	|			И НДФЛ.Дата = КадровыеДанныеФизическихЛиц.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДФЛ.Ссылка,
	|	КадровыеДанныеФизическихЛиц.Фамилия,
	|	КадровыеДанныеФизическихЛиц.Имя,
	|	КадровыеДанныеФизическихЛиц.Отчество,
	|	НДФЛ.КодДохода";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	




////////////////////////////////////////////////////////////////////////////////

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.4";
	Обработчик.Процедура = "УчетНДФЛРасширенный.ЗаполнитьПределыДоходовНДФЛ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.5";
	Обработчик.Процедура = "УчетНДФЛРасширенный.ЗаполнитьВидыПрочихДоходовФизическихЛиц";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.7";
	Обработчик.Процедура = "УчетНДФЛРасширенный.ЗаполнитьПределыДоходовНДФЛ";
	
	
КонецПроцедуры

Процедура ЗаполнитьПределыДоходовНДФЛ() Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "ПределыДоходовНДФЛ");
	
КонецПроцедуры

Процедура ЗаполнитьВидыПрочихДоходовФизическихЛиц() Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", "ВидыПрочихДоходовФизическихЛиц");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДоходыНДФЛПоВидуОсобыхНачислений(ВидНачисления) Экспорт

	ВидыДоходаНДФЛ = Новый Массив;
	Если ВидНачисления = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги Тогда
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код102);
	ИначеЕсли ВидНачисления = Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа Тогда
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код103);
	ИначеЕсли ВидНачисления = Перечисления.ВидыПризовПодарков.Подарок Тогда
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код160);
	ИначеЕсли ВидНачисления = Перечисления.ВидыПризовПодарков.Приз Тогда
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код160);
	ИначеЕсли ВидНачисления = Перечисления.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты Тогда
		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код101);
	ИначеЕсли ВидНачисления = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение Тогда
	    ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код146);
	КонецЕсли;
	
	Возврат ВидыДоходаНДФЛ;

КонецФункции

Функция ДатаОперацииПоДокументу(ДатаДокумента, ПериодРегистрации) Экспорт

	Возврат УчетНДФЛ.ДатаОперацииПоДокументу(ДатаДокумента, ПериодРегистрации)

КонецФункции

// Функция возвращает структуру с доходами НДФЛ.
// Параметр
//	ПрочиеДоходы - структура
//		Ключ - вид дохода, для которого надо подобрать вид дохода НДФЛ.
//
Функция ВидыДоходовНДФЛПрочихДоходовИВыплатБывшимСотрудникам(ПрочиеДоходы) Экспорт

	ДоходыНДФЛ = Новый Структура;
	Для каждого ВидДоход Из ПрочиеДоходы Цикл
		
		Доход = ВидДоход.Ключ;
		Если Доход = "АрендаТранспорта" Тогда
			Код = "2400";
		ИначеЕсли Доход = "ПризыВЦеляхРекламы" Тогда
			Код = "2740";
		ИначеЕсли Доход = "Подарки" Тогда
			Код = "2720";
		ИначеЕсли Доход = "ЛицензионныйДоговор" Тогда
			Код = "1300";
		ИначеЕсли Доход = "ОтчуждениеАвторскихПрав" Тогда
			Код = "1301";
		ИначеЕсли Доход = "ВознагражденияНаследникам" Тогда
			Код = "2210";
		ИначеЕсли Доход = "МатериальнаяПомощьБывшимСотрудникам" Тогда
			Код = "2760";
		ИначеЕсли Доход = "ВозмещениеСтоимостиМедикаментов" Тогда
			Код = "2770";	
		Иначе
			Код = "";
		КонецЕсли;
		
		СсылкаНаЭлемент = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду(Код);
		ДоходыНДФЛ.Вставить(Доход, СсылкаНаЭлемент);
	
	КонецЦикла;
		
	Возврат ДоходыНДФЛ;

КонецФункции 

// Функция осматривает переданные начисления и сообщает, нужна ли дата выплаты.
//
// Параметры:
//	Начисления - массив в.р. из ПВР Начисления.
//
// Возвращаемое значение - Истина/Ложь.
//
Функция ДоходыВУчетеНДФЛРегистрируютсяПоДатеВыплаты(Начисления) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка В(&Начисления)
	|	И Начисления.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И НЕ Начисления.КодДоходаНДФЛ.СоответствуетОплатеТруда";
	Запрос.УстановитьПараметр("Начисления", Начисления);
	
	Возврат Не Запрос.Выполнить().Пустой()
	
КонецФункции 

// Функция анализирует порядок выплаты и переданные начисления и сообщает, нужна ли дата выплаты.
//
// Параметры:
//	ПорядокВыплаты - ПорядокВыплаты, ПеречислениеСсылка.ХарактерВыплатыЗарплаты
//	Начисления - массив в.р. из ПВР Начисления.
//
// Возвращаемое значение - Истина/Ложь.
//
Функция ДатаВыплатыОбязательнаКЗаполнению(ПорядокВыплаты, Начисления) Экспорт

	Возврат РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты)
			Или ДоходыВУчетеНДФЛРегистрируютсяПоДатеВыплаты(Начисления);
	
КонецФункции 

// Функция возвращает массив кодов дохода, которыми регистрируется оплата труда для целей ст. 223 НК РФ.
//
// Параметры:
//	нет
//
// Возвращаемое значение - массив значений типа СправочникСсылка.ВидыДоходовНДФЛ.
//
Функция КодыДоходовОплатыТруда() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДоходовНДФЛ.Ссылка
	|ИЗ
	|	Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|ГДЕ
	|	ВидыДоходовНДФЛ.СоответствуетОплатеТруда";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Определяет, применяется ли автоматически социальный вычет, соответствующий переданному документу-основанию.
//
// Параметры:
//	Организация
//	ФизическоеЛицо
//	Удержание - тип ПланВидовРасчетаСсылка.Удержания
//	ДокументОснование.
//	ДатаАктуальности - дата, на которую определяется применение вычета.
//	Регистратор - если указан, движения регистратора игнорируются.
//	
Функция ПрименениеСоциальныхВычетовНаДату(Организация, ФизическоеЛицо, Удержание, ДокументОснование, ДатаАктуальности, Регистратор = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Удержание", Удержание);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ДатаАктуальности КАК Период,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	&ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ДокументОснование КАК ДокументОснование,
	|	&Удержание КАК Удержание
	|ПОМЕСТИТЬ ВТДанныеДокумента";
	Запрос.Выполнить();

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период,
	|	ДанныеДокумента.ГоловнаяОрганизация,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ)
	|			ТОГДА ЗНАЧЕНИЕ(Документ.УдержаниеДобровольныхСтраховыхВзносов.ПустаяСсылка)
	|		ИНАЧЕ ДанныеДокумента.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ДанныеДокумента.Удержание.КатегорияУдержания КАК КатегорияВзносов
	|ПОМЕСТИТЬ ВТИзмерения
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента";
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	Если ЗначениеЗаполнено(Регистратор) Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПредоставлениеСоциальныхВычетовУРаботодателя",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмерения",
			"ГоловнаяОрганизация,ФизическоеЛицо,КатегорияВзносов,ДокументОснование"),
		ПараметрыПостроения);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеРегистра.НеПредоставлятьВычет, ЛОЖЬ) КАК НеПредоставлятьВычет
	|ИЗ
	|	ВТИзмерения КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставлениеСоциальныхВычетовУРаботодателяСрезПоследних КАК ДанныеРегистра
	|		ПО ДанныеДокумента.ГоловнаяОрганизация = ДанныеРегистра.ГоловнаяОрганизация
	|			И ДанныеДокумента.ФизическоеЛицо = ДанныеРегистра.ФизическоеЛицо
	|			И ДанныеДокумента.КатегорияВзносов = ДанныеРегистра.КатегорияВзносов
	|			И ДанныеДокумента.ДокументОснование = ДанныеРегистра.ДокументОснование";
	
	НеПредоставлятьВычет = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НеПредоставлятьВычет = Выборка.НеПредоставлятьВычет;
	КонецЕсли;
	
	Возврат НеПредоставлятьВычет;
	
КонецФункции

Функция КонтролируемыеПоляДляФиксацииРезультатов() Экспорт

	НДФЛФиксРасчет = Новый Массив;
	НДФЛФиксРасчет.Добавить("Налог");
	НДФЛФиксРасчет.Добавить("Доход");

	НДФЛФиксСтрока = Новый Массив;
	НДФЛФиксСтрока.Добавить("ФизическоеЛицо");
	НДФЛФиксСтрока.Добавить("НалоговыйПериод");
	НДФЛФиксСтрока.Добавить("Подразделение");
	
	Возврат Новый Структура("ФиксРасчет, ФиксСтрока", НДФЛФиксРасчет, НДФЛФиксСтрока)
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеФункцииИПроцедуры

Функция СтрокаПримененияСоциальныхВычетов(Движения, Организация, ДатаОперации, ДанныеДокумента)
	
	НоваяСтрока = Движения.ПредоставлениеСоциальныхВычетовУРаботодателя.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
	НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	НоваяСтрока.Период = ДатаОперации;
	
    Возврат НоваяСтрока
	
КонецФункции

Процедура УточнитьСторнируемыеДокументы(ТаблицаСторнируемыхДокументов, ТаблицаПромежуточныхИсправлений)
    
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаСторнируемыхДокументов Цикл
	    Если Не ЗначениеЗаполнено(СтрокаТЗ.СторнируемыйДокумент) Тогда
			СтрокиКУдалению.Добавить(СтрокаТЗ)
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЗ Из СтрокиКУдалению Цикл
		ТаблицаСторнируемыхДокументов.Удалить(СтрокаТЗ)
	КонецЦикла;
	
	ОбработанныеДокументы = Новый Соответствие;	
	Для каждого СтрокаТЗ Из ТаблицаСторнируемыхДокументов Цикл
		УточненныйДокумент = ОбработанныеДокументы[СтрокаТЗ.СторнируемыйДокумент];
		Если ЗначениеЗаполнено(УточненныйДокумент) Тогда
			СтрокаТЗ.СторнируемыйДокумент = УточненныйДокумент
		Иначе
			Если СтрокаТЗ.СторнируемыйДокумент.Метаданные().Реквизиты.Найти("ИсправленныйДокумент") = Неопределено Тогда
				ОбработанныеДокументы.Вставить(СтрокаТЗ.СторнируемыйДокумент, СтрокаТЗ.СторнируемыйДокумент);
				Продолжить;
			КонецЕсли;
			ПредыдущаяСсылка = СтрокаТЗ.СторнируемыйДокумент;
			СледующаяСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредыдущаяСсылка, "ИсправленныйДокумент");
			НовыеСтроки = Новый Массив;
			Пока ЗначениеЗаполнено(СледующаяСсылка) Цикл
				СтрокаТаблицыПромежуточныхИсправлений = ТаблицаПромежуточныхИсправлений.Добавить();
				СтрокаТаблицыПромежуточныхИсправлений.ПромежуточноеИсправление = ПредыдущаяСсылка;
				НовыеСтроки.Добавить(СтрокаТаблицыПромежуточныхИсправлений);
				ПредыдущаяСсылка = СледующаяСсылка;
				Если ПредыдущаяСсылка.Метаданные().Реквизиты.Найти("ИсправленныйДокумент") = Неопределено Тогда
					Прервать;
				КонецЕсли;
				СледующаяСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредыдущаяСсылка, "ИсправленныйДокумент")
			КонецЦикла;
			ОбработанныеДокументы.Вставить(СтрокаТЗ.СторнируемыйДокумент, ПредыдущаяСсылка);
			СтрокаТЗ.СторнируемыйДокумент = ПредыдущаяСсылка;
			Для каждого СтрокаТаблицыПромежуточныхИсправлений Из НовыеСтроки Цикл
				СтрокаТаблицыПромежуточныхИсправлений.СторнируемыйДокумент = ПредыдущаяСсылка;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Обновление ИБ

#КонецОбласти

