////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции, используемые в подсистеме 
// международного финансового учета.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет использование группы финансового учета
// в настройках уточнения счетов учета в международном финансовом учете
//
// Параметры:
//  ГруппаФинансовогоУчета - СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры,
//							 СправочникСсылка.ГруппыФинансовогоУчетаРасчетов,
//							 СправочникСсылка.ГруппыФинансовогоУчетаДенежныхСредств,
//                           СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов
//
// Возвращаемое значение:
//  Структура - Ключи:
//				КоличествоСвязанныхШаблонов - количество шаблонов проводок, использующих
//											  уточнение счетов с помощью данного типа групп финансового учета
//              КоличествоНастроенныхШаблонов - количество шаблонов проводок, для которых настроены счета учета
//   										    для данной группы финансового учета
//
Функция СостояниеУточненияСчетовУчета(ГруппаФинансовогоУчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаУточненияСчетов.ШаблонПроводки,
	|	ПравилаУточненияСчетов.ВидДвижения,
	|	ПравилаУточненияСчетов.СчетУчета
	|ПОМЕСТИТЬ ПравилаУточненияСчетов
	|ИЗ
	|	РегистрСведений.ПравилаУточненияСчетовВМеждународномУчете КАК ПравилаУточненияСчетов
	|ГДЕ
	|	ПравилаУточненияСчетов.ГруппаФинансовогоУчета = &ГруппаФинансовогоУчета
	|;
	|
	|ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка КАК ШаблонПроводки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Дебет) КАК ВидДвижения,
	|	ПравилаУточненияСчетов.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ШаблоныПроводок
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУточненияСчетов КАК ПравилаУточненияСчетов
	|		ПО (ПравилаУточненияСчетов.ШаблонПроводки = ШаблоныПроводок.Ссылка)
	|			И (ПравилаУточненияСчетов.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Дебет))
	|ГДЕ
	|	ШаблоныПроводок.ТипИсточникаУточненияСчетаДт В (&ТипыИсточниковУточненияСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит),
	|	ПравилаУточненияСчетов.СчетУчета
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУточненияСчетов КАК ПравилаУточненияСчетов
	|		ПО (ПравилаУточненияСчетов.ШаблонПроводки = ШаблоныПроводок.Ссылка)
	|			И (ПравилаУточненияСчетов.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит))
	|ГДЕ
	|	ШаблоныПроводок.ТипИсточникаУточненияСчетаКт В (&ТипыИсточниковУточненияСчета)
	|;
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ШаблоныПроводок.ШаблонПроводки) КАК КоличествоСвязанныхШаблонов
	|ИЗ
	|	ШаблоныПроводок КАК ШаблоныПроводок
	|;
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ШаблоныПроводок.ШаблонПроводки) КАК КоличествоНастроенныхШаблонов
	|ИЗ
	|	ШаблоныПроводок КАК ШаблоныПроводок
	|ГДЕ
	|	НЕ ШаблоныПроводок.СчетУчета ЕСТЬ NULL
	|";
	
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", ГруппаФинансовогоУчета);  
	Запрос.УстановитьПараметр("ТипыИсточниковУточненияСчета", МеждународныйУчетКлиентСервер.ТипыИсточниковУточненияСчета(ГруппаФинансовогоУчета));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	КоличествоСвязанныхШаблонов = 0;
	КоличествоНастроенныхШаблонов = 0;
	
	ВыборкаСвязанныеШаблоны = МассивРезультатов[2].Выбрать();
	Если ВыборкаСвязанныеШаблоны.Следующий() Тогда
		КоличествоСвязанныхШаблонов = ВыборкаСвязанныеШаблоны.КоличествоСвязанныхШаблонов;
	КонецЕсли;
	ВыборкаНастроенныеШаблоны = МассивРезультатов[3].Выбрать();
	Если ВыборкаНастроенныеШаблоны.Следующий() Тогда
		КоличествоНастроенныхШаблонов = ВыборкаНастроенныеШаблоны.КоличествоНастроенныхШаблонов;
	КонецЕсли;
	
	Возврат Новый Структура("КоличествоСвязанныхШаблонов, КоличествоНастроенныхШаблонов",
							КоличествоСвязанныхШаблонов, КоличествоНастроенныхШаблонов);
	
КонецФункции

// Возвращает элемент справочника НастройкиХозяйственныхОпераций
// по ссылке на значение перечисления ХозяйственныеОперации.
//
// Параметры:
//  ЗначениеПеречисления - ПеречислениеСсылка.ХозяйственныеОперации - ссылка на значение
//						   перечисления ХозяйственныеОперации.
//
Функция ХозяйственнаяОперацияПоПеречислению(ЗначениеПеречисления) Экспорт

	ХозяйственнаяОперация = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиХозопераций.Ссылка КАК ХозяйственнаяОперация 
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозопераций
	|ГДЕ
	|	НастройкиХозопераций.ХозяйственнаяОперация = &ЗначениеПеречисления
	|";
	
	Запрос.УстановитьПараметр("ЗначениеПеречисления", ЗначениеПеречисления);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ХозяйственнаяОперация = Выборка.ХозяйственнаяОперация;
	КонецЕсли;
	
	Возврат ХозяйственнаяОперация;

КонецФункции

// Пересчитывает сумму функциональной валюты в валюту представления
//
// Параметры:
//  Сумма - Сумма в функциональной валюте 
//  Дата - Дата определения курса валют 
//
// Возвращаемое значение:
//  Число - Сумма в валюте представления
//
Функция РасчитатьСуммуПредставления(Сумма, Дата) Экспорт
	
	ВалютаМеждународногоУчета = МеждународнаяОтчетностьВызовСервера.УчетнаяВалюта();
	КурсФункциональнойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаМеждународногоУчета.Функциональная, Дата);
	КурсВалютыПредставления = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаМеждународногоУчета.Представления, Дата);
	
	Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Сумма,КурсФункциональнойВалюты,КурсВалютыПредставления);
	
КонецФункции

// Функция получает коэффициенты пересчета сумм из заданной валюты
// в функциональную валюту и валюту представления.
//
Функция ПолучитьКоэффициентыПересчетаВалюты(ИсходнаяВалюта, Период)Экспорт

	ВалютаМеждународногоУчета = МеждународнаяОтчетностьВызовСервера.УчетнаяВалюта();

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КурсыВалют.Валюта    КАК Валюта,
	|	КурсыВалют.Курс      КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период,
	|		Валюта = &ВалютаФункциональная ИЛИ Валюта = &ВалютаПредставления ИЛИ Валюта = &ИсходнаяВалюта
	|	) КАК КурсыВалют
	|");
	Запрос.УстановитьПараметр("Период",               Период);
	Запрос.УстановитьПараметр("ВалютаФункциональная", ВалютаМеждународногоУчета.Функциональная);
	Запрос.УстановитьПараметр("ВалютаПредставления",  ВалютаМеждународногоУчета.Представления);
	Запрос.УстановитьПараметр("ИсходнаяВалюта",       ИсходнаяВалюта);

	КурсВалютыФункц            = 1;
	КратностьВалютыФункц       = 1;

	КурсВалютыПред           = 1;
	КратностьВалютыПред      = 1;

	КурсИсходнойВалюты      = 1;
	КратностьИсходнойВалюты = 1;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.Валюта = ВалютаМеждународногоУчета.Функциональная Тогда

			КурсВалютыФункц      = Выборка.Курс;
			КратностьВалютыФункц = Выборка.Кратность;

		КонецЕсли;

		Если Выборка.Валюта = ВалютаМеждународногоУчета.Представления Тогда

			КурсВалютыПред      = Выборка.Курс;
			КратностьВалютыПред = Выборка.Кратность;

		КонецЕсли;

		Если Выборка.Валюта = ИсходнаяВалюта Тогда

			КурсИсходнойВалюты      = Выборка.Курс;
			КратностьИсходнойВалюты = Выборка.Кратность;

		КонецЕсли;
	КонецЦикла;

	Результат = Новый Структура("ВФункциональнуюВалюту, ВВалютуПредставления");

	Результат.ВФункциональнуюВалюту  = КурсИсходнойВалюты * КратностьВалютыФункц / (КратностьИсходнойВалюты * КурсВалютыФункц); 
	Результат.ВВалютуПредставления = КурсИсходнойВалюты * КратностьВалютыПред / (КратностьИсходнойВалюты * КурсВалютыПред);

	Возврат Результат;

КонецФункции

// Проверяет доступность чтения настроек международного финансового учета.
//
Функция ДоступноЧтениеНастроекМеждународногоУчета() Экспорт

	Возврат	ПравоДоступа("Чтение", Метаданные.Справочники.ШаблоныПроводокДляМеждународногоУчета);

КонецФункции

// Проверяет доступность изменения настроек международного финансового учета.
//
Функция ДоступноИзменениеНастроекМеждународногоУчета() Экспорт

	Возврат	ПравоДоступа("Изменение", Метаданные.Справочники.ШаблоныПроводокДляМеждународногоУчета);

КонецФункции

// Возвращает значение признака "Валютный" для счета плана счетов.
//
// Параметры:
//  Счет - ПланСчетовСсылка - ссылка на счет плана счетов.
//
// Возвращаемое значение:
//  Булево - значение признака "Валютный".
//
Функция СчетВалютный(Счет) Экспорт

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "Валютный") = Истина;

КонецФункции

// Установить условное оформление проводок международного учета.
// Оформляются поля таблы формы проводок: Субконто, ПредставлениеВидаСубконто, Валюта, ТипПроводки.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - коллекция элементов условного оформления формы.
//  ТаблицаПроводок - Строка - Имя таблицы формы отображающей проводки.
//
Процедура УстановитьОформлениеПроводок(УсловноеОформление, ТаблицаПроводок) Экспорт
	
	// Не заполненнон поле "ТипПроводки" отборажать серым текстом "Обычная"
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТипПроводки");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".ТипПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Обычная';uk='Звичайна'"));
	
	// Поля зависящие от стороны счета
	МаксКоличествоСубконто = Метаданные.ПланыСчетов.Международный.МаксКоличествоСубконто;
	// Дт
	Для Индекс = 1 По МаксКоличествоСубконто Цикл
		УстановитьОформлениеСубконто(УсловноеОформление, ТаблицаПроводок, "Дт", Индекс);
	КонецЦикла;
	УстановитьОформлениеВалюты(УсловноеОформление, ТаблицаПроводок, "Дт");
	
	// Кт
	Для Индекс = 1 По МаксКоличествоСубконто Цикл
		УстановитьОформлениеСубконто(УсловноеОформление, ТаблицаПроводок, "Кт", Индекс);
	КонецЦикла;
	УстановитьОформлениеВалюты(УсловноеОформление, ТаблицаПроводок, "Кт");
	
КонецПроцедуры

// Заполняет вспомогательные поля представления видов субконто
//
// Параметры:
//  ТаблицаФормы  - ДанныеФормыКоллекция - Реквизит формы (таблица) содержащая проводки.
//
Процедура ЗаполнитьПредставлениеВидовСубконто(ТаблицаФормы) Экспорт

	Для каждого СтрокаТаблицы Из ТаблицаФормы Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПредставлениеВидовСубконто(СтрокаТаблицы.СчетДт, "Дт"));
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПредставлениеВидовСубконто(СтрокаТаблицы.СчетКт, "Кт"));
	КонецЦикла;

КонецПроцедуры

// Получает строковые представления видов субконто счета.
//
// Параметры:
//  Счет  - ПланСчетовСсылка - счет международного плана счетов
//  ВидДвижения  - Сторона проводки "Дт" или "Кт".
//
// Возвращаемое значение:
//   Структура   - Ключ структуры - Натменование поля представления вида субконто на форме ("ПредставлениеВидСубконтоДт1", "ПредставлениеВидСубконтоДт2" и т.д.)
//                 Значение структуры - строковое представление вида субконто
//
Функция ПредставлениеВидовСубконто(Счет, ВидДвижения) Экспорт

	ПредставлениеВидовСубконто = Новый Структура;
	МаксКоличествоСубконто = Метаданные.ПланыСчетов.Международный.МаксКоличествоСубконто;
	КоличествоВидовСубконто = Счет.ВидыСубконто.Количество();
	Для К = 1 По МаксКоличествоСубконто Цикл
		ПредставлениеВидаСубконто = ?(КоличествоВидовСубконто >= К, "<" + Счет.ВидыСубконто[К - 1].ВидСубконто + ">", Неопределено);
		ПредставлениеВидовСубконто.Вставить("ПредставлениеВидСубконто" + ВидДвижения + К, ПредставлениеВидаСубконто);
	КонецЦикла;
	ПредставлениеВидовСубконто.Вставить("ВалютныйУчет" + ВидДвижения, СчетВалютный(Счет));
	ПредставлениеВидовСубконто.Вставить("КоличествоСубконто" + ВидДвижения, КоличествоВидовСубконто);

	Возврат ПредставлениеВидовСубконто;

КонецФункции

// Получает заголовок кнопки для вызова команды УстановитьДатуЗапрета
//
// Параметры:
//  ДатаЗапрета  - <Дата> - дата запрета формирования проводок по международному учету
//
// Возвращаемое значение:
//   <Строка> - Текст заголовока кнопки
//
Функция ПредставлениеКомандыУстановитьДатуЗапрета(ДатаЗапрета = Неопределено) Экспорт
	
	Шаблон = НСтр("ru='Дата запрета формирования проводок %ДатаЗапрета%';uk='Дата заборони формування проводок %ДатаЗапрета%'");
	Замена = ?(ЗначениеЗаполнено(ДатаЗапрета),Формат(ДатаЗапрета, "ДЛФ=DD"),НСтр("ru='не установлена';uk='не встановлена'"));
	Возврат СтрЗаменить(Шаблон, "%ДатаЗапрета%", Замена);
	
КонецФункции

// Метод регламентного задания "ЗакрытиеМесяцаМеждународныйУчет".
//
Процедура ВыполнитьЗакрытиеМесяца(Параметры) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	Организация = Справочники.Организации.ПустаяСсылка();
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	ПериодРегистрации = '00010101';
	Если Параметры.Свойство("ПериодРегистрации") Тогда
		ПериодРегистрации = Параметры.ПериодРегистрации;
	КонецЕсли;
	
	Обработка = Обработки.ОперацииЗакрытияМесяцаМеждународныйУчет;
	Обработка.ВыполнитьОперацииПоЗакрытиюМесяца(Организация, ПериодРегистрации);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Установить условное оформление полей Субконто и ПредставлениеВидаСубконто для таблицы формы проводок.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - коллекция элементов условного оформления формы.
//  ТаблицаПроводок - Строка - Имя таблицы формы отображающей проводки.
//  ДтКт - Строка - Сторона проводки "Дт" или "Кт".
//  НомерСубконто - Число,Строка - порядоквый номер субконто.
//
Процедура УстановитьОформлениеСубконто(УсловноеОформление, ТаблицаПроводок, ДтКт, НомерСубконто)
	
	Номер = Строка(НомерСубконто);
	ПолеСубконто = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".Субконто" + ДтКт + Номер);
	ПолеВидаСубконто = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконто" + ДтКт + Номер);
	
	// Серый текст полей субконто если указан счет и не заполненны его доступные субконто
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = ПолеВидаСубконто;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".Счет" + ДтКт);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеСубконто;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	// Если у счета нет субконто, то скрыть подсказки ввода
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = ПолеВидаСубконто;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеСубконто;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

// Установить условное оформление полей Валюта и ВалютнаяСумма для таблицы формы проводок.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - коллекция элементов условного оформления формы.
//  ТаблицаПроводок - Строка - Имя таблицы формы отображающей проводки.
//  ДтКт - Строка - Сторона проводки "Дт" или "Кт".
//  НомерСубконто - Число,Строка - порядоквый номер субконто.
//
Процедура УстановитьОформлениеВалюты(УсловноеОформление, ТаблицаПроводок, ДтКт)
	
	// Если на счете ведется валютный учет и не указана валюта, то подсветить незаполненное поле
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Валюта" + ДтКт);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".ВалютныйУчет" + ДтКт);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".Валюта" + ДтКт);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

#КонецОбласти

