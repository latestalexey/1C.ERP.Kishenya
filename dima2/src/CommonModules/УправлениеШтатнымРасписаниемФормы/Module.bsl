////////////////////////////////////////////////////////////////////////////////
// УправлениеШтатнымРасписаниемФормы:
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Процедура ПроверкаШтатногоРасписания(Форма, ДатаВступленияВСилу) Экспорт
	
	ШтатноеРасписание = Форма.Объект.Позиции.Выгрузить(, "Должность,Подразделение,КоличествоСтавок");
	ШтатноеРасписание.Колонки.Добавить("ФондОплатыТруда", Новый ОписаниеТипов("Число"));
	ШтатноеРасписание.Колонки.Добавить("Результат", Новый ОписаниеТипов("Булево"));
	ШтатноеРасписание.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	УправлениеШтатнымРасписаниемПереопределяемый.ПроверитьШтатноеРасписание(ДатаВступленияВСилу, Форма.Объект.Организация, ШтатноеРасписание);
	КомментарийШтатногоРасписанияТекст = "";
	ЕстьОшибки = Ложь;
	Для Каждого Позиция Из ШтатноеРасписание Цикл
		КомментарийШтатногоРасписанияТекст = КомментарийШтатногоРасписанияТекст + Позиция.Комментарий + Символы.ПС;
		ЕстьОшибки = ЕстьОшибки Или  Не Позиция.Результат;
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	Иначе
		ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		КомментарийШтатногоРасписанияТекст = НСтр("ru='Штатное расписание проверено. Ошибок нет';uk='Штатний розклад перевірено. Помилок немає'");
	КонецЕсли;
	Форма.Элементы.ОшибкиШтатногоРасписания.ЦветТекста = ЦветТекста;
	Форма.ОшибкиШтатногоРасписания = КомментарийШтатногоРасписанияТекст;
	
КонецПроцедуры

Процедура ПроверкаШтатногоРасписанияПодготовитьТаблицуФормы(Форма, РеквизитыПроверяемыеНаСоответствие, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если ДобавлятьРеквизитыФормы Тогда
		
		// Добавим реквизиты для контроля соответствия начисления и показателей.
		ДобавляемыеРеквизиты = Новый Массив;
		
		Значение = Новый РеквизитФормы("ЦветаСтиляПоясняющийОшибкуТекст", 
			Новый ОписаниеТипов("Цвет"),
			"");
		ДобавляемыеРеквизиты.Добавить(Значение);
		
		Значение = Новый РеквизитФормы("ЦветаСтиляЦветТекстаПоля",
			Новый ОписаниеТипов("Цвет"),
			"");
		ДобавляемыеРеквизиты.Добавить(Значение);
		
		Для Каждого ОписаниеТабличнойЧасти Из РеквизитыПроверяемыеНаСоответствие.ТабличныеЧасти Цикл
			
			ИмяТаблицы = ОписаниеТабличнойЧасти.Ключ;
			Если ОписаниеТабличнойЧасти.Значение.Свойство("ПутьКДанным") Тогда
				ПутьКДанным = ОписаниеТабличнойЧасти.Значение.ПутьКДанным;
			Иначе
				ПутьКДанным = "Объект." + ИмяТаблицы;
			КонецЕсли;
			
			Значение = Новый РеквизитФормы(ОписаниеТабличнойЧасти.Значение.РеквизитНесоответствияСтроки.ИмяРеквизитаНесоответствия, 
				Новый ОписаниеТипов("Булево"),
				ПутьКДанным);
				
			ДобавляемыеРеквизиты.Добавить(Значение);
			
			Если ОписаниеТабличнойЧасти.Значение.ОписаниеСоответствияПоказателей <> Неопределено Тогда
				Для Каждого РеквизитСоответствия Из ОписаниеТабличнойЧасти.Значение.ОписаниеСоответствияПоказателей Цикл
					Значение = Новый РеквизитФормы(РеквизитСоответствия.Значение, 
						Новый ОписаниеТипов("Булево"),
						ПутьКДанным);
					ДобавляемыеРеквизиты.Добавить(Значение);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКДанным);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);	
		
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
	
		Форма.ЦветаСтиляПоясняющийОшибкуТекст = ЦветаСтиля.ПоясняющийОшибкуТекст;
		Форма.ЦветаСтиляЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		
		Для Каждого ОписаниеТабличнойЧасти Из РеквизитыПроверяемыеНаСоответствие.ТабличныеЧасти Цикл
			
			ИмяТаблицы = ОписаниеТабличнойЧасти.Ключ;
			Если ОписаниеТабличнойЧасти.Значение.Свойство("ПутьКДанным") Тогда
				ПутьКДанным = ОписаниеТабличнойЧасти.Значение.ПутьКДанным;
			Иначе
				ПутьКДанным = "Объект." + ИмяТаблицы;
			КонецЕсли;
			
			ЭлементыУсловногоОформления = Форма.УсловноеОформление.Элементы;
		
			// Условное оформление соответствия начисления.
			ЭлементУсловногоОформления = ЭлементыУсловногоОформления.Добавить();
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ОписаниеТабличнойЧасти.Значение.РеквизитНесоответствияСтроки.ИмяРеквизита);
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + "." + ОписаниеТабличнойЧасти.Значение.РеквизитНесоответствияСтроки.ИмяРеквизитаНесоответствия);
			ЭлементОтбора.ПравоеЗначение = Истина;
			
			Если ОписаниеТабличнойЧасти.Значение.ОписаниеСоответствияПоказателей <> Неопределено Тогда
				Для Каждого РеквизитСоответствия Из ОписаниеТабличнойЧасти.Значение.ОписаниеСоответствияПоказателей Цикл
					
					// Условное оформление соответствия показателя.
					ЭлементУсловногоОформления = ЭлементыУсловногоОформления.Добавить();
					ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
					ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + РеквизитСоответствия.Ключ);
					ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + "." + РеквизитСоответствия.Значение);
					ЭлементОтбора.ПравоеЗначение = Истина;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчики событий форм документов УтверждениеШтатногоРасписания и ИзменениеШтатногоРасписания.

Процедура ДокументыПриСозданииНаСервере(Форма, ПутьКДаннымДатаВступленияВСилу) Экспорт
	
	ФорматКоличестваСтавок = УправлениеШтатнымРасписанием.ФорматКоличестваСтавок();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПозицииКоличествоСтавок",
		"Формат",
		ФорматКоличестваСтавок);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПозицииКоличествоСтавок",
		"ФорматРедактирования",
		ФорматКоличестваСтавок);
		
	УстановитьДоступностьДокументаДляРедактирования(Форма);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда	
		
		Форма.ДоступноЧтениеНачисленийШтатногоРасписания = 
			Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленийШтатногоРасписания,ЧтениеНачисленийШтатногоРасписания", , Ложь);
			
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
		Если Не ЗначениеЗаполнено(Форма.Объект.Подразделение)
			И ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
			
			ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
			
		КонецЕсли;
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(Форма, ЗначенияДляЗаполнения);
		
		ДатаВступленияВСилу = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымДатаВступленияВСилу);
		ПриПолученииДанныхНаСервере(Форма, ДатаВступленияВСилу);
		
	КонецЕсли;
	
	УстановитьМаксимальныйИдентификаторСтрокиПозиции(Форма);
	
	// Подключить команду проверки штатного расписания.
	Если УправлениеШтатнымРасписаниемПереопределяемый.ПроверкаШтатногоРасписанияДоступна() Тогда
		Форма.Элементы.ПроверкаШРГруппа.Видимость = Истина;
	Иначе
		Форма.Элементы.ПроверкаШРГруппа.Видимость = Ложь;
	КонецЕсли;
	
	ОстаткиОтпусков.УстановитьУсловноеОформлениеЕжегодныхОтпусков(Форма);
	
	КадровыйУчетРасширенный.УстановитьПараметрыВыбораНачисленийПоКатегории(
		Форма,
		Форма.ОписаниеТаблицыНачисленийНаСервере(),
		УправлениеШтатнымРасписанием.ПараметрыВыбораКатегорииНачислений());
		
	КадровыйУчетФормыРасширенный.УстановитьОтображениеКнопкиРедактироватьФОТ(Форма);
	
	УстановитьВидимостьЭлементовУправленияЗависящихОтФункциональныхОпций(Форма);
	
	УстановитьСтрокуТекущейПозиции(Форма, "Объект.Позиции", "Позиции", "Позиция");
	
	УстановитьПараметрыВыбораПодразделений(Форма, "Подразделение");
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораПодразделений(Форма, ИмяЭлементаПодразделение) Экспорт
	
	Если Константы.ОграничиватьДоступНаУровнеЗаписейПодразделенияОрганизаций.Получить() Тогда
		
		ПолеПодразделение = Форма.Элементы.Найти(ИмяЭлементаПодразделение);
		Если ПолеПодразделение <> Неопределено Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ПодчиненностьПодразделенийОрганизаций.Подразделение
				|ИЗ
				|	РегистрСведений.ПодчиненностьПодразделенийОрганизаций КАК ПодчиненностьПодразделенийОрганизаций";
			
			ДоступныеПодразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
			Если ПолеПодразделение.ПараметрыВыбора = Неопределено Тогда
				ПараметрыВыбора = Новый Массив;
			Иначе
				ПараметрыВыбора = Новый Массив(ПолеПодразделение.ПараметрыВыбора);
			КонецЕсли;
			
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ДоступныеПодразделения)));
			ПолеПодразделение.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьДокументаДляРедактирования(Форма) Экспорт
	
	Если Форма.ТолькоПросмотр ИЛИ НЕ Форма.Объект.Проведен Тогда
		
		Форма.Элементы.ГруппаСообщенияОНевозможностиИзмененияДокумента.Видимость = Ложь;
		
	Иначе
		
		РезультатПроверки = РегистрыСведений.ИсторияИспользованияШтатногоРасписания.ПроверитьВозможностьВнесенияИзменений(
			Форма.Объект.Ссылка);
			
		Если НЕ РезультатПроверки.ИзмененияВозможны Тогда
			
			ЗаголовокДекорации = Новый ФорматированнаяСтрока(
				НСтр("ru='Документ недоступен для редактирования, т.к. зарегистрированы более поздние изменения штатного расписания.
                    |См'
                    |;uk='Документ недоступний для редагування, т. к. зареєстровані пізніші зміни штатного розкладу.
                    |Див'") + ". ",
				Новый ФорматированнаяСтрока(Строка(РезультатПроверки.РегистраторПредставление),,,, ПолучитьНавигационнуюСсылку(РезультатПроверки.Регистратор)),
				НСтр("ru=', позиция';uk=' позиція'") + " - """,
				Строка(РезультатПроверки.Позиция),
				""".");
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ДекорацияНадписьСообщенияОНевозможностиИзмененияДокумента",
				"Заголовок",
				ЗаголовокДекорации);
				
		КонецЕсли; 
		
		Форма.ТолькоПросмотр = НЕ РезультатПроверки.ИзмененияВозможны;
									
		Форма.Элементы.ГруппаСообщенияОНевозможностиИзмененияДокумента.Видимость = Форма.ТолькоПросмотр;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыПриЧтенииНаСервере(Форма, ТекущийОбъект, ДатаВступленияВСилу) Экспорт
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	Форма.ИзмененныеПозиции = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПриПолученииДанныхНаСервере(Форма, ДатаВступленияВСилу);
	
	ПоместитьДанныеОбъектаВДанныеФормы(Форма, ТекущийОбъект, ДатаВступленияВСилу);
	
КонецПроцедуры

Процедура ДокументыОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ПроверяемыйОбъект = Форма.РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект." + Форма.Объект.Ссылка.Метаданные().Имя));
	
	РеквизитВДанные(Форма, ПроверяемыйОбъект);	
	
	Если НЕ ПроверяемыйОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");	

КонецПроцедуры

Процедура ПрочитатьДополнительныеДанныеДолжностиДляПозицииШтатногоРасписания(Форма) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ПрочитатьДополнительныеДанныеДолжностиДляПозицииШтатногоРасписания(Форма);
	КонецЕсли;
	
	// Подсистема "Охрана труда"
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТрудаФормы");
		Модуль.ПрочитатьДополнительныеЗначенияПозицииШтатногоРасписания(Форма, ?(Форма.ВнешниеДанные, Форма.РедактируемаяПозиция, Форма.СсылкаНаОбъект));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьФормуЭлементаСправочникаШтатноеРасписание(Форма) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДополнитьФормуЭлементаСправочникаШтатноеРасписание(Форма);
	КонецЕсли;
	
	// Подсистема "Охрана труда"
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТрудаФормы");
		Модуль.ДополнитьФормуПозицииШтатногоРасписания(Форма);
	КонецЕсли;
	
КонецПроцедуры

#Область ВспомогательныеПроцедурыИФункции

Функция УстановитьСтрокуТекущейПозиции(Форма, ПутьКДанным, ИмяТаблицыФормы, ИмяРеквизитаПозиция) Экспорт
	
	ТекущаяСтрокаУстановлена = Ложь;
	Если Форма.Параметры.Свойство("ТекущаяПозиция")
		И ЗначениеЗаполнено(Форма.Параметры.ТекущаяПозиция) Тогда
		
		ДанныеПозиций = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		
		СтрокиПозиции =ДанныеПозиций.НайтиСтроки(Новый Структура(ИмяРеквизитаПозиция, Форма.Параметры.ТекущаяПозиция));
		Если СтрокиПозиции.Количество() > 0 Тогда
			
			ИдентификаторТекущейСтроки = СтрокиПозиции[0].ПолучитьИдентификатор();
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				ИмяТаблицыФормы,
				"ТекущаяСтрока",
				ИдентификаторТекущейСтроки);
				
			ТекущаяСтрокаУстановлена = Истина;
				
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ТекущаяСтрокаУстановлена;
	
КонецФункции

Функция ИнформацияОбУтвержденииИЗакрытииПозиции(Позиция) Экспорт
	
	Информация = Новый Структура("УтвердившийРегистратор,ЗакрывшийРегистратор");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПозицияШтатногоРасписания", Позиция);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МИНИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК ДатаУтверждения,
			|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК ПоследняяДатаСведений,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
			|ПОМЕСТИТЬ ВТПерваяИПоследняяДатыПозиции
			|ИЗ
			|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			|ГДЕ
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = &ПозицияШтатногоРасписания
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсторияИспользованияШтатногоРасписанияУтверждение.Регистратор КАК УтвердившийРегистратор,
			|	ИсторияИспользованияШтатногоРасписанияЗакрытие.Регистратор КАК ЗакрывшийРегистратор
			|ИЗ
			|	ВТПерваяИПоследняяДатыПозиции КАК ПерваяИПоследняяДатыПозиции
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписанияУтверждение
			|		ПО ПерваяИПоследняяДатыПозиции.ДатаУтверждения = ИсторияИспользованияШтатногоРасписанияУтверждение.Дата
			|			И ПерваяИПоследняяДатыПозиции.ПозицияШтатногоРасписания = ИсторияИспользованияШтатногоРасписанияУтверждение.ПозицияШтатногоРасписания
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписанияЗакрытие
			|		ПО ПерваяИПоследняяДатыПозиции.ПоследняяДатаСведений = ИсторияИспользованияШтатногоРасписанияЗакрытие.Дата
			|			И ПерваяИПоследняяДатыПозиции.ПозицияШтатногоРасписания = ИсторияИспользованияШтатногоРасписанияЗакрытие.ПозицияШтатногоРасписания
			|			И (НЕ ИсторияИспользованияШтатногоРасписанияЗакрытие.Используется)";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(Информация, Выборка);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Информация;
	
КонецФункции

Функция ПоследняяДатаИзменений(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ИсторияИспользованияШтатногоРасписания.Дата) КАК Дата
		|ИЗ
		|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
		|ГДЕ
		|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Владелец = &Организация";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.Дата) Тогда
			Возврат Выборка.Дата;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

Функция ДанныеШтатногоРасписания(ПозицияШтатногоРасписания, Дата) Экспорт
	
	
	
	Запрос = Новый Запрос;
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("ПозицияШтатногоРасписания", ПозицияШтатногоРасписания);
	Запрос.УстановитьПараметр("Организация", ПозицияШтатногоРасписания.Владелец);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсторИспШтРасписания.КоличествоСтавок КАК КоличествоСтавок,
	|	ИсторИспШтРасписания.ПозицияШтатногоРасписания КАК Должность,
	|	ИсторИспШтРасписания.ПозицияШтатногоРасписания.Владелец КАК Организация,
	|	ИсторИспШтРасписания.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_ДанныеРегистра
	|ИЗ
	|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторИспШтРасписания
	|ГДЕ
	|	ИсторИспШтРасписания.ПозицияШтатногоРасписания = &ПозицияШтатногоРасписания
	|	И ИсторИспШтРасписания.Используется
	|	И ИсторИспШтРасписания.ПозицияШтатногоРасписания.Владелец = &Организация" ;
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ДанныеРегистра.КоличествоСтавок,
	|	ВТ_ДанныеРегистра.Должность,
	|	ВТ_ДанныеРегистра.Организация,
	|	ВТ_ДанныеРегистра.Дата КАК Дата
	|ПОМЕСТИТЬ ВремТаблица
	|ИЗ
	|	ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра
	|ГДЕ
	|	ВТ_ДанныеРегистра.Дата <= &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ДанныеРегистра.КоличествоСтавок, 0) = 0
	|			ТОГДА ВремТаблица.Дата
	|		ИНАЧЕ ВТ_ДанныеРегистра.Дата
	|	КОНЕЦ КАК ДатаМакс,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ДанныеРегистра.КоличествоСтавок, 0) = 0
	|			ТОГДА ВремТаблица.КоличествоСтавок
	|		ИНАЧЕ ВТ_ДанныеРегистра.КоличествоСтавок
	|	КОНЕЦ КАК КоличествоСтавок
	|ПОМЕСТИТЬ ТаблицаМаксДата
	|ИЗ
	|	ВремТаблица КАК ВремТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра
	|		ПО ВремТаблица.КоличествоСтавок < ВТ_ДанныеРегистра.КоличествоСтавок
	|			И ВремТаблица.Дата >= ВТ_ДанныеРегистра.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ДанныеРегистра.Дата УБЫВ,
	|	ВТ_ДанныеРегистра.КоличествоСтавок УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ДанныеРегистра.КоличествоСтавок, 0) = 0
	|			ТОГДА ТаблицаМаксДата.ДатаМакс
	|		ИНАЧЕ ВТ_ДанныеРегистра.Дата
	|	КОНЕЦ КАК ДатаМин,
	|	ТаблицаМаксДата.ДатаМакс,
	|	ТаблицаМаксДата.КоличествоСтавок
	|ПОМЕСТИТЬ ИнтервалВыборкиИКоличествоСтавок
	|ИЗ
	|	ТаблицаМаксДата КАК ТаблицаМаксДата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра
	|		ПО ТаблицаМаксДата.ДатаМакс > ВТ_ДанныеРегистра.Дата
	|			И ТаблицаМаксДата.КоличествоСтавок >= ВТ_ДанныеРегистра.КоличествоСтавок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ДанныеРегистра.Дата КАК Дата
	|ИЗ
	|	ИнтервалВыборкиИКоличествоСтавок КАК ИнтервалВыборкиИКоличествоСтавок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра
	|		ПО ИнтервалВыборкиИКоличествоСтавок.КоличествоСтавок = ВТ_ДанныеРегистра.КоличествоСтавок
	|			И ИнтервалВыборкиИКоличествоСтавок.ДатаМин <= ВТ_ДанныеРегистра.Дата
	|			И ИнтервалВыборкиИКоличествоСтавок.ДатаМакс >= ВТ_ДанныеРегистра.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	МВТ.Закрыть();
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Дата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДатуСозданияРабочегоМестаНаСервере(Должность) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Должность, "ДатаУтверждения")
	
КонецФункции	
	

Функция ОписаниеДанныхПозицииВХранилище(Форма, ИдентификаторСтрокиТекущейПозиции, ДатаВступленияВСилу, ПодразделениеПозиций = Неопределено, ВыборПодчиненныхПодразделений = Ложь) Экспорт
	
	Форма.ИдентификаторРедактируемойСтроки = ИдентификаторСтрокиТекущейПозиции;
	
	ДанныеПозиции = Форма.Объект.Позиции.НайтиПоИдентификатору(Форма.ИдентификаторРедактируемойСтроки);
	
	ОписаниеПозиции = УправлениеШтатнымРасписанием.ОписаниеПозицииШтатногоРасписания();
	ОписаниеПозиции.Вставить("Действие");
	ОписаниеПозиции.Вставить("ТекущееКоличествоСтавок");
	ОписаниеПозиции.Вставить("ТекущийФОТ");
	ЗаполнитьЗначенияСвойств(ОписаниеПозиции, ДанныеПозиции);
	
	ОписаниеПозиции.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр ИЛИ ДанныеПозиции.Действие = Перечисления.ДействияСПозициямиШтатногоРасписания.ЗакрытьПозицию);
	ОписаниеПозиции.Вставить("ДатаУтверждения", ДатаВступленияВСилу);
	ОписаниеПозиции.Вставить("Регистратор", Форма.Объект.Ссылка);
	ОписаниеПозиции.Вставить("ПодразделениеПозиций", ПодразделениеПозиций);
	Если ВыборПодчиненныхПодразделений Тогда
		ОписаниеПозиции.Вставить("ВыборПодчиненныхПодразделений", Истина);
	КонецЕсли; 
	
	ОписаниеПозиции.Организация = Форма.Объект.Организация;
	ОписаниеПозиции.ПозицияШтатногоРасписания = ДанныеПозиции.Позиция;
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	// Начисления с показателями
	НачисленияПозиции = Форма.Объект.Начисления.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", ДанныеПозиции.ИдентификаторСтрокиПозиции));
	ОписаниеПозиции.Начисления 	= НачисленияПозиции;
	
	// Дополнительные показатели и коэффициенты.
	ПоказателиПозиции = Новый Массив;
	ДополнительныеПоказатели =  Форма.Объект.Показатели.Выгрузить(
		Новый Структура("ИдентификаторСтрокиПозиции,ИдентификаторСтрокиВидаРасчета",
			ДанныеПозиции.ИдентификаторСтрокиПозиции, 0));
			
	Для каждого СтрокаДополнительногоПоказателя Из ДополнительныеПоказатели Цикл
		ОписаниеПоказателя = Новый Структура("Показатель,ИдентификаторСтрокиВидаРасчета,Значение,ЗначениеМин,ЗначениеМакс");
		ЗаполнитьЗначенияСвойств(ОписаниеПоказателя, СтрокаДополнительногоПоказателя);
		ПоказателиПозиции.Добавить(ОписаниеПоказателя);
	КонецЦикла;
	
	ОписаниеПозиции.Вставить("Показатели", ПоказателиПозиции);
	
	// Ежегодные отпуска
	ЕжегодныеОтпускаПозиции = Форма.Объект.ЕжегодныеОтпуска.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", ДанныеПозиции.ИдентификаторСтрокиПозиции));
	ОписаниеПозиции.ЕжегодныеОтпуска = ЕжегодныеОтпускаПозиции;
	
	// Специальности
	СпециальностиПозиции = Форма.Объект.Специальности.Выгрузить(Новый Структура("ИдентификаторСтрокиПозиции", ДанныеПозиции.ИдентификаторСтрокиПозиции));
	ОписаниеПозиции.Специальности = СпециальностиПозиции;
	
	ОписаниеДанныхПозицииВХранилище = Новый Структура;
	ОписаниеДанныхПозицииВХранилище.Вставить("Ключ", ОписаниеПозиции.ПозицияШтатногоРасписания);
	ОписаниеДанныхПозицииВХранилище.Вставить("АдресДанныхПозицииВХранилище", ПоместитьВоВременноеХранилище(ОписаниеПозиции, Форма.УникальныйИдентификатор));
	
	Возврат ОписаниеДанныхПозицииВХранилище;
	
КонецФункции

Процедура ПрочитатьДанныеПозицииВФорму(Форма, АдресДанныхПозиции) Экспорт
	
	НовыеДанныеПозиции = ПолучитьИзВременногоХранилища(АдресДанныхПозиции);
	
	ДанныеТекущейПозиции = Форма.Объект.Позиции.НайтиПоИдентификатору(Форма.ИдентификаторРедактируемойСтроки);
	ЗаполнитьЗначенияСвойств(ДанныеТекущейПозиции, НовыеДанныеПозиции);
	ДанныеТекущейПозиции.Позиция = НовыеДанныеПозиции.ПозицияШтатногоРасписания;
	
	Если ЗначениеЗаполнено(ДанныеТекущейПозиции.Позиция) Тогда
		
		Если Форма.ИзмененныеПозиции = Неопределено Тогда
			ИзмененныеПозиции = Новый Соответствие;
		Иначе
			ИзмененныеПозиции = Новый Соответствие(Форма.ИзмененныеПозиции);
		КонецЕсли; 
		
		Если ИзмененныеПозиции.Получить(ДанныеТекущейПозиции.Позиция) = Неопределено Тогда
			
			ИзмененныеПозиции.Вставить(ДанныеТекущейПозиции.Позиция, Истина);
			Форма.ИзмененныеПозиции = Новый ФиксированноеСоответствие(ИзмененныеПозиции);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеШтатнымРасписаниемФормы.УдалитьНачисленияИЕжегодныеОтпуска(Форма);
	
	УдалитьСпециальностиПоИдентификаторуСтрокиПозиции(Форма, ДанныеТекущейПозиции.ИдентификаторСтрокиПозиции);
	
	Для каждого ОписаниеНачисления Из НовыеДанныеПозиции.Начисления Цикл
		
		НоваяСтрокаНачислений = Форма.Объект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНачислений, ОписаниеНачисления);
		НоваяСтрокаНачислений.ИдентификаторСтрокиПозиции = ДанныеТекущейПозиции.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
	Для каждого ОписаниеПоказателя Из НовыеДанныеПозиции.Показатели Цикл
		
		НоваяСтрокаПоказателя = Форма.Объект.Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателя, ОписаниеПоказателя);
		НоваяСтрокаПоказателя.ИдентификаторСтрокиПозиции = ДанныеТекущейПозиции.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
	Для каждого ОписаниеЕжегодногоОтпуска Из НовыеДанныеПозиции.ЕжегодныеОтпуска Цикл
		
		НоваяСтрокаЕжегодногоОтпуска = Форма.Объект.ЕжегодныеОтпуска.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЕжегодногоОтпуска, ОписаниеЕжегодногоОтпуска);
		НоваяСтрокаЕжегодногоОтпуска.ИдентификаторСтрокиПозиции = ДанныеТекущейПозиции.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
		
	Для каждого ОписаниеСпециальности Из НовыеДанныеПозиции.Специальности Цикл
		
		НоваяСтрокаСпециальности = Форма.Объект.Специальности.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСпециальности, ОписаниеСпециальности);
		НоваяСтрокаСпециальности.ИдентификаторСтрокиПозиции = ДанныеТекущейПозиции.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьНовыйДокумент(Форма, ДатаВступленияВСилу) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект." + Форма.Объект.Ссылка.Метаданные().Имя));
	
	ДокументОбъект.АвтозаполнениеТекущимиДаннымиШР();
	
	Форма.ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ПоместитьДанныеОбъектаВДанныеФормы(Форма, ДокументОбъект, ДатаВступленияВСилу);
	
	Если Форма.Объект.Позиции.Количество() > 0 Тогда
		Форма.Элементы.Позиции.ТекущаяСтрока = Форма.Объект.Позиции[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	ЗаполнитьТерриториальныеУсловияВСтрокахПозиций(Форма, ДатаВступленияВСилу);
	
	УправлениеШтатнымРасписанием.УпорядочитьСписокПозиций(Форма.Объект.Позиции);
	
	УстановитьМаксимальныйИдентификаторСтрокиПозиции(Форма);
	
КонецПроцедуры

Процедура ОбработатьЗаполнениеДокументаВФорме(Форма) Экспорт
	
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(Форма.АдресХранилища);
	
	ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
	
	УправлениеШтатнымРасписанием.ЗаполнитьДокументПоДаннымЗаполнения(ДокументОбъект, ДанныеЗаполнения);
	
	Форма.ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ПоместитьДанныеОбъектаВДанныеФормы(Форма, Форма.Объект, ДанныеЗаполнения.ДатаВступленияВСилу);
	
	Если Форма.Объект.Позиции.Количество() > 0 Тогда
		Форма.Элементы.Позиции.ТекущаяСтрока = Форма.Объект.Позиции[0].ПолучитьИдентификатор();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторЗадания) Тогда
		ВывестиСообщенияФоновогоЗадания(Форма.ИдентификаторЗадания);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ДополнитьФорму(Форма)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеТаблицыВидовРасчета = Форма.ОписаниеТаблицыНачисленийНаСервере();
	ОписаниеТаблицыПозиций = ОписаниеТаблицыПозиций();
	РедактированиеСостоянияШРДополнитьФорму(Форма, ОписаниеТаблицыПозиций, ОписаниеТаблицыВидовРасчета);
	
	УстановитьУсловноеОформление(Форма);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура РеквизитВДанные(Форма, ОбъектПриемник) Экспорт
	
	ОписаниеТаблицыВидовРасчета = Форма.ОписаниеТаблицыНачисленийНаСервере();
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(Форма, ОбъектПриемник, ОписаниеТаблицыВидовРасчета, 0);
	ДобавитьДополнительныеСведенияПозиций(Форма, ОбъектПриемник);
	
КонецПроцедуры

Процедура ПриПолученииДанныхНаСервере(Форма, ДатаВступленияВСилу) Экспорт
	
	Форма.ДоступноЧтениеНачисленийШтатногоРасписания = 
		Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленийШтатногоРасписания,ЧтениеНачисленийШтатногоРасписания", , Ложь);
		
	УстановитьФункциональныеОпцииФормы(Форма);
	
	ДополнитьФорму(Форма);
	
	ОстаткиОтпусков.ДополнитьСведениямиОПредыдущихЕжегодныхОтпускахШтатногоРасписания(Форма.Объект, ДатаВступленияВСилу);
	
КонецПроцедуры

Процедура ПоместитьДанныеОбъектаВДанныеФормы(Форма, ТекущийОбъект, ДатаВступленияВСилу) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеТаблицыВидовРасчета = Форма.ОписаниеТаблицыНачисленийНаСервере();
	ОписаниеТаблицыПозиций = ОписаниеТаблицыПозиций();
	РедактированиеСостоянияШРДанныеВРеквизиты(ТекущийОбъект.Ссылка, ДатаВступленияВСилу, Форма, ОписаниеТаблицыПозиций, ОписаниеТаблицыВидовРасчета);
	УстановитьКомментарииКСтрокамПозиций(Форма);
	
	ЗаполнитьТерриториальныеУсловияВСтрокахПозиций(Форма, ДатаВступленияВСилу);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДобавитьДополнительныеСведенияПозиций(Форма, ТекущийОбъект)
	
	СведенияОНаименованиях = Новый Соответствие;
	
	Если СведенияОНаименованиях.Количество() > 0 Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СведенияОНаименованиях", СведенияОНаименованиях);
	КонецЕсли;
	
КонецПроцедуры

Процедура РедактированиеСостоянияШРДополнитьФорму(Форма, ОписаниеТаблицыПозиций, ОписаниеТаблицыВидовРасчета)
	
	ИмяТаблицыПозиции = ОписаниеТаблицыПозиций.ИмяТаблицы;
	ПутьКДаннымПозиции = "Объект." + ИмяТаблицыПозиции;
	
	ИмяТаблицыНачисления = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ПутьКДаннымНачисления = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	
	ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(
		Форма, ОписаниеТаблицыВидовРасчета, "Начисления", 0, Ложь);
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКДаннымПозиции);
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКДаннымНачисления);
	
	ДействующаяПозиция = Новый РеквизитФормы(
		"ДействующаяПозиция",  
		Новый ОписаниеТипов("Булево"),
		ПутьКДаннымПозиции);
	ДобавляемыеРеквизиты.Добавить(ДействующаяПозиция);
	
	Комментарий = Новый РеквизитФормы(
		"Комментарий",  
		Новый ОписаниеТипов("Строка"),
		ПутьКДаннымПозиции);	
	ДобавляемыеРеквизиты.Добавить(Комментарий);	
	
	ТекущееКоличествоСтавок = Новый РеквизитФормы(
		"ТекущееКоличествоСтавок",  
		Новый ОписаниеТипов("Число"),
		ПутьКДаннымПозиции);
	ДобавляемыеРеквизиты.Добавить(ТекущееКоличествоСтавок);
	
	ТекущийФОТ = Новый РеквизитФормы(
		"ТекущийФОТ",  
		Новый ОписаниеТипов("Число"),
		ПутьКДаннымПозиции);
	ДобавляемыеРеквизиты.Добавить(ТекущийФОТ);
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	ПолеКомментарий = Форма.Элементы.Найти(ИмяТаблицыПозиции + "Комментарий");
	Если ПолеКомментарий = Неопределено Тогда
		
		Таблица = Форма.Элементы.Найти(ИмяТаблицыПозиции);
		
		ПолеКомментарий = Форма.Элементы.Добавить(ИмяТаблицыПозиции + "Комментарий", Тип("ПолеФормы"), Таблица);
		ПолеКомментарий.ПутьКДанным = ПутьКДаннымПозиции + ".Комментарий";
		ПолеКомментарий.Доступность = Истина;
		ПолеКомментарий.ОтображатьВШапке = Истина;
		ПолеКомментарий.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РедактированиеСостоянияШРДанныеВРеквизиты(ДокументСсылка, Период, Форма, ОписаниеТаблицыПозиций, ОписаниеТаблицыВидовРасчета)
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(Форма, ОписаниеТаблицыВидовРасчета, 0);
	РедактированиеСостоянияШРПрочитатьТекущиеДанные(ДокументСсылка, Период, Форма, ОписаниеТаблицыПозиций, ОписаниеТаблицыВидовРасчета);
	УстановитьКомментарииДействийСНачислениями(Форма, ОписаниеТаблицыВидовРасчета);
КонецПроцедуры

Процедура РедактированиеСостоянияШРПрочитатьТекущиеДанные(ДокументСсылка, Период, Форма, ОписаниеТаблицыПозиций, ОписаниеТаблицыВидовРасчета)
	
	ИмяТаблицыПозиции = ОписаниеТаблицыПозиций.ИмяТаблицы;
	ПозицииПутьКДанным = "Объект." + ИмяТаблицыПозиции;
	
	ИмяТаблицыНачисления = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	НачисленияПутьКДанным = "Объект." + ИмяТаблицыНачисления;	
	
	МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета);
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	ПозицииДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПозицииПутьКДанным);
	
	ТаблицаПозиций = ПозицииДанныеФормы.Выгрузить();
	
	ТаблицаПозиций.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ТаблицаПозиций.ЗаполнитьЗначения(Период, "Период");
	
	КолонкаПозиция = ТаблицаПозиций.Колонки.Найти(ОписаниеТаблицыПозиций.ИмяРеквизитаПозиция);
	КолонкаПозиция.Имя = "Позиция";
	
	НачисленияДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, НачисленияПутьКДанным);
	ТаблицаНачислений = Новый ТаблицаЗначений;
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
	ТаблицаНачислений.Колонки.Добавить("ИдентификаторСтрокиПозиции", Новый ОписаниеТипов("Число"));
	
	СоответствиеНачисленийИдентификаторам = Новый Соответствие;
	Для Каждого СтрокаНачисления Из НачисленияДанныеФормы Цикл
		СтрокаТаблицы = ТаблицаНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаНачисления);
		СтрокаТаблицы.Начисление = СтрокаНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета];
		
		СоответствиеНачисленийИдентификаторам.Вставить(СтрокаНачисления.ИдентификаторСтрокиВидаРасчета, СтрокаНачисления);
	КонецЦикла;
	
	ДанныеПоказателей = Новый ТаблицаЗначений;
	ДанныеПоказателей.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
	
	ДанныеПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ДанныеПоказателей.Колонки.Добавить("ЗначениеМин", Новый ОписаниеТипов("Число"));
	ДанныеПоказателей.Колонки.Добавить("ЗначениеМакс", Новый ОписаниеТипов("Число"));
	
	ДанныеПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ДанныеПоказателей.Колонки.Добавить("НомерПоказателя", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаНачисления Из НачисленияДанныеФормы Цикл
		
		Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
			
			Если ЗначениеЗаполнено(СтрокаНачисления["Показатель" + НомерПоказателя]) Тогда
				
				ОписаниеПоказателя = ДанныеПоказателей.Добавить();
				ОписаниеПоказателя.НомерПоказателя = НомерПоказателя;
				ОписаниеПоказателя.ИдентификаторСтрокиВидаРасчета = СтрокаНачисления.ИдентификаторСтрокиВидаРасчета;
				ОписаниеПоказателя.Показатель = СтрокаНачисления["Показатель" + НомерПоказателя];
				
				Если СтрокаНачисления.Свойство("Значение" + НомерПоказателя) Тогда
					ОписаниеПоказателя.Значение = СтрокаНачисления["Значение" + НомерПоказателя];
				КонецЕсли;
				
				Если СтрокаНачисления.Свойство("МинимальноеЗначение" + НомерПоказателя) Тогда
					ОписаниеПоказателя.ЗначениеМин = СтрокаНачисления["МинимальноеЗначение" + НомерПоказателя];
				КонецЕсли;
				
				Если СтрокаНачисления.Свойство("МаксимальноеЗначение" + НомерПоказателя) Тогда
					ОписаниеПоказателя.ЗначениеМакс = СтрокаНачисления["МаксимальноеЗначение" + НомерПоказателя];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Позиции", ТаблицаПозиций);
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ДанныеПоказателей);
	
	Отбор = Новый Массив;
	ЭлементОтбора = Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "Регистратор", "<>", ДокументСсылка);
	Отбор.Добавить(ЭлементОтбора);
	
	ПараметрыПолученияПозиций = УправлениеШтатнымРасписанием.ПараметрыПолученияПозицийШтатногоРасписания();
	ПараметрыПолученияПозиций.ПозицииШтатногоРасписания = ТаблицаПозиций.ВыгрузитьКолонку("Позиция");
	ПараметрыПолученияПозиций.ДатаАктуальности = Период;
	ПараметрыПолученияПозиций.Отбор = Отбор;
	
	УправлениеШтатнымРасписанием.СоздатьВТПозицииШтатногоРасписания(Истина, Запрос.МенеджерВременныхТаблиц, "ВТАктуальныеПозицииШтатногоРасписания",ПараметрыПолученияПозиций);
	
	ОписательВременныхТаблиц = УправлениеШтатнымРасписанием.ОписательВременныхТаблицДляПолученияДанныхПозицийШтатногоРасписания(
		Запрос.МенеджерВременныхТаблиц,
		"ВТАктуальныеПозицииШтатногоРасписания");
	УправлениеШтатнымРасписанием.СоздатьВТНачисленияПозицийШтатногоРасписания(Истина, ОписательВременныхТаблиц, "ВТАктуальныеНачисленияПозиций");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПоказателей.Показатель,
	|	ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета,
	|	ТаблицаПоказателей.Значение,
	|	ТаблицаПоказателей.ЗначениеМин,
	|	ТаблицаПоказателей.ЗначениеМакс,
	|	ТаблицаПоказателей.НомерПоказателя
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	&ТаблицаПоказателей КАК ТаблицаПоказателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Позиции.Позиция,
	|	Позиции.ИдентификаторСтрокиПозиции,
	|	Позиции.НомерСтроки
	|ПОМЕСТИТЬ ВТПозиции
	|ИЗ
	|	&Позиции КАК Позиции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНачислений.Начисление,
	|	ТаблицаНачислений.ИдентификаторСтрокиВидаРасчета,
	|	ТаблицаНачислений.ИдентификаторСтрокиПозиции
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Позиции.Позиция,
	|	Позиции.ИдентификаторСтрокиПозиции,
	|	Начисления.Начисление,
	|	ПоказателиНачислений.Показатель,
	|	Показатели.Значение,
	|	Показатели.ЗначениеМин,
	|	Показатели.ЗначениеМакс,
	|	Начисления.ИдентификаторСтрокиВидаРасчета,
	|	Показатели.НомерПоказателя
	|ПОМЕСТИТЬ ВТНачисленияДокумента
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПозиции КАК Позиции
	|		ПО (Позиции.ИдентификаторСтрокиПозиции = Начисления.ИдентификаторСтрокиПозиции)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
	|		ПО Начисления.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|		ПО Начисления.Начисление = ПоказателиНачислений.Ссылка
	|			И (Показатели.Показатель = ПоказателиНачислений.Показатель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК СвойстваПоказателей
	|		ПО (Показатели.Показатель = СвойстваПоказателей.Ссылка)
	|ГДЕ
	|	(СвойстваПоказателей.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное)
	|				И НЕ СвойстваПоказателей.ЗначениеРассчитываетсяАвтоматически
	|			ИЛИ Показатели.НомерПоказателя ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Позиции.Позиция,
	|	ВЫРАЗИТЬ(Позиции.Позиция КАК Справочник.ШтатноеРасписание).Наименование КАК Наименование,
	|	АктуальныеПозицииШтатногоРасписания.КоличествоСтавок КАК ТекущееКоличествоСтавок,
	|	ВЫБОР
	|		КОГДА АктуальныеПозицииШтатногоРасписания.ПозицияШтатногоРасписания ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДействующаяПозиция,
	|	ЕСТЬNULL(АктуальныеПозицииШтатногоРасписания.ФОТ, 0) КАК ТекущийФОТ,
	|	Позиции.НомерСтроки КАК НомерСтрокиПозиция
	|ИЗ
	|	ВТПозиции КАК Позиции
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеПозицииШтатногоРасписания КАК АктуальныеПозицииШтатногоРасписания
	|		ПО Позиции.Позиция = АктуальныеПозицииШтатногоРасписания.ПозицияШтатногоРасписания
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиПозиция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.ИдентификаторСтрокиПозиции,
	|	НачисленияДокумента.Позиция КАК Позиция,
	|	НачисленияДокумента.Начисление КАК Начисление,
	|	НачисленияДокумента.Показатель КАК Показатель,
	|	НачисленияДокумента.Значение,
	|	НачисленияДокумента.ЗначениеМин,
	|	НачисленияДокумента.ЗначениеМакс,
	|	НачисленияДокумента.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	|	ЕСТЬNULL(АктуальныеНачисленияПозиций.Значение, 0) КАК ТекущееЗначение,
	|	ЕСТЬNULL(АктуальныеНачисленияПозиций.ЗначениеМин, 0) КАК ТекущееЗначениеМин,
	|	ЕСТЬNULL(АктуальныеНачисленияПозиций.ЗначениеМакс, 0) КАК ТекущееЗначениеМакс,
	|	ВЫБОР
	|		КОГДА АктуальныеНачисленияПозиций.Начисление ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДействующийВидРасчета,
	|	ИСТИНА КАК НачислениеДокумента,
	|	НачисленияДокумента.НомерПоказателя КАК НомерПоказателя
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеНачисленияПозиций КАК АктуальныеНачисленияПозиций
	|		ПО НачисленияДокумента.Позиция = АктуальныеНачисленияПозиций.ПозицияШтатногоРасписания
	|			И НачисленияДокумента.Начисление = АктуальныеНачисленияПозиций.Начисление
	|			И (ЕСТЬNULL(НачисленияДокумента.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) = АктуальныеНачисленияПозиций.Показатель)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Позиции.ИдентификаторСтрокиПозиции,
	|	Позиции.Позиция,
	|	АктуальныеНачисленияПозиций.Начисление,
	|	АктуальныеНачисленияПозиций.Показатель,
	|	0,
	|	0,
	|	0,
	|	NULL,
	|	АктуальныеНачисленияПозиций.Значение,
	|	АктуальныеНачисленияПозиций.ЗначениеМин,
	|	АктуальныеНачисленияПозиций.ЗначениеМакс,
	|	ВЫБОР
	|		КОГДА АктуальныеНачисленияПозиций.Начисление ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	0
	|ИЗ
	|	ВТАктуальныеНачисленияПозиций КАК АктуальныеНачисленияПозиций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПозиции КАК Позиции
	|		ПО АктуальныеНачисленияПозиций.ПозицияШтатногоРасписания = Позиции.Позиция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
	|		ПО (Позиции.ИдентификаторСтрокиПозиции = Начисления.ИдентификаторСтрокиПозиции)
	|			И АктуальныеНачисленияПозиций.Начисление = Начисления.Начисление
	|ГДЕ
	|	Начисления.Начисление ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачисленияДокумента.ИдентификаторСтрокиПозиции,
	|	ИдентификаторСтрокиВидаРасчета,
	|	Показатель";
	
	Результаты = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = Результаты.Количество();
	
	ВыборкаПозиций = Результаты[КоличествоРезультатов - 2].Выбрать();
	ВыборкаНачислений = Результаты[КоличествоРезультатов - 1].Выбрать();
	
	СоответствиеПозицийСтрокамТаблицы = Новый Соответствие;
	
	Для Каждого СтрокаПозиции Из ПозицииДанныеФормы Цикл
		
		ВыборкаПозиций.СледующийПоЗначениюПоля("НомерСтрокиПозиция");
		
		СтрокаПозиции.ДействующаяПозиция = ВыборкаПозиций.ДействующаяПозиция;
		СтрокаПозиции.ТекущееКоличествоСтавок = ВыборкаПозиций.ТекущееКоличествоСтавок;
		СтрокаПозиции.ТекущийФОТ = ВыборкаПозиций.ТекущийФОТ;
		
		Если ЗначениеЗаполнено(СтрокаПозиции.Позиция) Тогда
			СтрокаПозиции.Наименование = ВыборкаПозиций.Наименование;
		Иначе
			СтрокаПозиции.Наименование = УправлениеШтатнымРасписаниемКлиентСервер.НаименованиеПозицииШтатногоРасписания(СтрокаПозиции.Подразделение, СтрокаПозиции.Должность, СтрокаПозиции.РазрядКатегория);
		КонецЕсли;
		
		СоответствиеПозицийСтрокамТаблицы.Вставить(СтрокаПозиции.ИдентификаторСтрокиПозиции, СтрокаПозиции);
		
	КонецЦикла;
	
	Пока ВыборкаНачислений.СледующийПоЗначениюПоля("ИдентификаторСтрокиПозиции") Цикл
		
		Пока ВыборкаНачислений.СледующийПоЗначениюПоля("ИдентификаторСтрокиВидаРасчета") Цикл
			
			Если ВыборкаНачислений.НачислениеДокумента Тогда
				
				ДанныеСтрокиНачисления = СоответствиеНачисленийИдентификаторам.Получить(ВыборкаНачислений.ИдентификаторСтрокиВидаРасчета);
				ДанныеСтрокиНачисления["ДействующийВидРасчета"] = ВыборкаНачислений.ДействующийВидРасчета;
				Если ЗначениеЗаполнено(ВыборкаНачислений.НомерПоказателя) Тогда
					
					Пока ВыборкаНачислений.Следующий() Цикл
						
						Если ДанныеСтрокиНачисления.Свойство("Значение" + ВыборкаНачислений.НомерПоказателя) Тогда
							ДанныеСтрокиНачисления["Значение" + ВыборкаНачислений.НомерПоказателя] = ВыборкаНачислений.Значение;
							ДанныеСтрокиНачисления["ТекущееЗначение" + ВыборкаНачислений.НомерПоказателя] = ВыборкаНачислений.ТекущееЗначение;
						КонецЕсли;
						
						Если ДанныеСтрокиНачисления.Свойство("МинимальноеЗначение" + ВыборкаНачислений.НомерПоказателя) Тогда
							ДанныеСтрокиНачисления["МинимальноеЗначение" + ВыборкаНачислений.НомерПоказателя] = ВыборкаНачислений.ЗначениеМин;
							ДанныеСтрокиНачисления["ТекущееМинимальноеЗначение" + ВыборкаНачислений.НомерПоказателя] = ВыборкаНачислений.ТекущееЗначениеМин;
						КонецЕсли;
						
						Если ДанныеСтрокиНачисления.Свойство("МаксимальноеЗначение" + ВыборкаНачислений.НомерПоказателя) Тогда
							ДанныеСтрокиНачисления["МаксимальноеЗначение" + ВыборкаНачислений.НомерПоказателя] = ВыборкаНачислений.ЗначениеМакс;
							ДанныеСтрокиНачисления["ТекущееМаксимальноеЗначение" + ВыборкаНачислений.НомерПоказателя] = ВыборкаНачислений.ТекущееЗначениеМакс;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаПозиции = СоответствиеПозицийСтрокамТаблицы.Получить(ВыборкаНачислений.ИдентификаторСтрокиПозиции);
		
	КонецЦикла;
	
	Для Каждого СтрокаПозиции Из ПозицииДанныеФормы Цикл
		УправлениеШтатнымРасписаниемКлиентСервер.ПолучитьКомментарийКДействиюСПозициейШР(
			СтрокаПозиции, Форма.ДоступноЧтениеНачисленийШтатногоРасписания);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление(Форма) 
	
	КоличествоПозицийДокумента = Форма.Объект.Позиции.Количество(); 
	СтруктураОтбора = Новый Структура("Действие", Перечисления.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию);
	КоличествоСоздаваемыхПозиций = Форма.Объект.Позиции.НайтиСтроки(СтруктураОтбора).Количество();
	
	// Раскраска строк позиций штатного расписания.
		
	// Синий - изменяемые позиции
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки  = "УправлениеШтатнымРасписанием";
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.ТекущееКоличествоСтавок");
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.КоличествоСтавок");
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.ФОТ");
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.ТекущийФОТ");
			
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Позиции");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененныеСтроки);

	// Зеленый - новые позиции
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки  = "УправлениеШтатнымРасписанием";
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.Действие");
	ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Позиции");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НовыеСтроки);
	
	// Красный - закрываемые позиции.
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки  = "УправлениеШтатнымРасписанием";
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.Действие");
	ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСПозициямиШтатногоРасписания.ЗакрытьПозицию;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Позиции");
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УдаленныеСтроки);
		
	// ТолькоПросмотр Подразделение, Должность, РазрядКатегория если выбрана позиция.
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.Действие");
	ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСПозициямиШтатногоРасписания.СоздатьНовуюПозицию;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Позиции.Позиция");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПозицииПодразделение");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПозицииДолжность");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПозицииРазрядКатегория");
	
КонецПроцедуры	

Процедура УстановитьФункциональныеОпцииФормы(Форма, ТекущийОбъект = Неопределено) Экспорт
	
	Если ТекущийОбъект = Неопределено Тогда
		ПараметрыФО = Новый Структура("Организация", Форма.Объект.Организация);
	Иначе
		ПараметрыФО = Новый Структура("Организация", ТекущийОбъект.Организация);
	КонецЕсли;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

Процедура ЗаполнитьТерриториальныеУсловияВСтрокахПозиций(Форма, ДатаВступленияВСилу)
	
		
КонецПроцедуры

Функция ТерриториальныеУсловияПФРПодразделений(Подразделения, ДатаСведений) Экспорт
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("СтруктурнаяЕдиница", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	Если ТипЗнч(Подразделения) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		СписокПодразделений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделения);
	Иначе
		СписокПодразделений = Подразделения;
	КонецЕсли;
	
	Для каждого Подразделение Из СписокПодразделений Цикл
		НоваяСтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		НоваяСтрокаИзмеренияДаты.Период = ДатаСведений;
		НоваяСтрокаИзмеренияДаты.СтруктурнаяЕдиница = Подразделение;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ТерриториальныеУсловияПФР",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));	
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТерриториальныеУсловия.СтруктурнаяЕдиница,
		|	ТерриториальныеУсловия.ТерриториальныеУсловияПФР
		|ИЗ
		|	ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловия";
		
	СоответствиеУсловийПодразделениям = Новый Соответствие;
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеУсловийПодразделениям.Вставить(Выборка.СтруктурнаяЕдиница, Выборка.ТерриториальныеУсловияПФР);
	КонецЦикла; 
	
	Возврат СоответствиеУсловийПодразделениям;
	
КонецФункции

Процедура ДополнитьПоТекущейКадровойРасстановке(ПараметрыВыполнения, АдресВоВременномХранилище = Неопределено) Экспорт
	
	ПоместитьВоВременноеХранилище(УправлениеШтатнымРасписанием.РезультатЗаполненияПоТекущейКадровойРасстановке(ПараметрыВыполнения), АдресВоВременномХранилище);
	
КонецПроцедуры

Процедура ВывестиСообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		МассивСообщений = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Если МассивСообщений <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из МассивСообщений Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 
			
КонецПроцедуры

Процедура УстановитьМаксимальныйИдентификаторСтрокиПозиции(Форма)
	
	Форма.ИдентификаторСтрокиПозицииМакс = УправлениеШтатнымРасписанием.МаксимальныйИдентификаторСтроки(Форма.Объект.Позиции, "ИдентификаторСтрокиПозиции");	
	
КонецПроцедуры	

Функция ОписаниеТаблицыПозиций() 
	
	ОписаниеТаблицы = Новый Структура("ИмяТаблицы, ИмяРеквизитаПозиция");
	ОписаниеТаблицы.ИмяТаблицы = "Позиции";
	ОписаниеТаблицы.ИмяРеквизитаПозиция = "Позиция";
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

Процедура СкопироватьДанныеПозиции(Форма, ИдентификаторТекущейПозиции, ИдентификаторПозицииИсточника) Экспорт
	
	ТекущиеДанные = Форма.Объект.Позиции.НайтиПоИдентификатору(ИдентификаторТекущейПозиции);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаИсточник = Форма.Объект.Позиции.НайтиПоИдентификатору(ИдентификаторПозицииИсточника);
	Если СтрокаИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИсходныеСтроки = Форма.Объект.Начисления.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаИсточник.ИдентификаторСтрокиПозиции));
	Для каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
		
		НоваяСтрока = Форма.Объект.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
	ИсходныеСтроки = Форма.Объект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции,ИдентификаторСтрокиВидаРасчета", СтрокаИсточник.ИдентификаторСтрокиПозиции, 0));
	Для каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
		
		НоваяСтрока = Форма.Объект.Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
	ИсходныеСтроки = Форма.Объект.ЕжегодныеОтпуска.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаИсточник.ИдентификаторСтрокиПозиции));
	Для каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
		
		НоваяСтрока = Форма.Объект.ЕжегодныеОтпуска.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
	ИсходныеСтроки = Форма.Объект.Специальности.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаИсточник.ИдентификаторСтрокиПозиции));
	Для каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
		
		НоваяСтрока = Форма.Объект.Специальности.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементовУправленияЗависящихОтФункциональныхОпций(Форма)
	
	ФОИспользоватьРасчетЗарплатыРасширенная = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетЗарплатыРасширенная");
	
	Если НЕ ФОИспользоватьРасчетЗарплатыРасширенная Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПозицииГруппаОкладТариф",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФОТПоПозиции",
			"Видимость",
			Ложь);
		
	Иначе
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПозицииФОТПоПозиции",
			"Видимость",
			Форма.ДоступноЧтениеНачисленийШтатногоРасписания);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПозицииФОТПоПозицииМин",
			"Видимость",
			Форма.ДоступноЧтениеНачисленийШтатногоРасписания);

		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПозицииФОТПоПозицииМакс",
			"Видимость",
			Форма.ДоступноЧтениеНачисленийШтатногоРасписания);
			
	КонецЕсли;
			
КонецПроцедуры

Процедура УстановитьКомментарииДействийСНачислениями(Форма, ОписаниеТаблицыВидовРасчета)
	
	Если Форма.ДоступноЧтениеНачисленийШтатногоРасписания Тогда
		
		ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
		
		Начисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		
		ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
		
		Для Каждого СтрокаНачисления Из Начисления Цикл
			
			УправлениеШтатнымРасписаниемКлиентСервер.УстановитьКомментарииДействийСНачислением(
				СтрокаНачисления,
				ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета),
				ФОИспользоватьВилкуСтавокВШтатномРасписании);
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКомментарииКСтрокамПозиций(Форма)
	Для каждого СтрокаПозиции Из Форма.Объект.Позиции Цикл
		СтрокаПозиции.Комментарий = УправлениеШтатнымРасписаниемКлиентСервер.ПолучитьКомментарийКДействиюСПозициейШР(
			СтрокаПозиции, Форма.ДоступноЧтениеНачисленийШтатногоРасписания);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьДанныеПоПозиции(Форма, Позиция, ДатаВступленияВСилу) Экспорт
	
	НоваяСтрокаПозиции = Форма.Объект.Позиции.Добавить();
	
	Форма.ИдентификаторСтрокиПозицииМакс = Форма.ИдентификаторСтрокиПозицииМакс + 1;
	НоваяСтрокаПозиции.ИдентификаторСтрокиПозиции = Форма.ИдентификаторСтрокиПозицииМакс;
	
	НоваяСтрокаПозиции.Позиция = Позиция;
	
	ЗаполнитьТекущиеДанныеПозиции(Форма, НоваяСтрокаПозиции, ДатаВступленияВСилу);
	
КонецПроцедуры

Процедура ЗаполнитьТекущиеДанныеПозиции(Форма, ТекущиеДанные, ДатаВступленияВСилу)
	
	ДанныеТекущейПозиции = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(ТекущиеДанные.Позиция, ДатаВступленияВСилу, , Ложь);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеТекущейПозиции);
	
	ТекущиеДанные.ТекущееКоличествоСтавок = ДанныеТекущейПозиции.КоличествоСтавок;
	ТекущиеДанные.ТекущийФОТ = ДанныеТекущейПозиции.ФОТМакс;
	ТекущиеДанные.Наименование = ДанныеТекущейПозиции.Наименование;
	
	ТекущиеДанные.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.ПустаяСсылка();
	
	УдалитьНачисленияИЕжегодныеОтпускаПоИдентификаторуСтрокиПозиции(Форма, ТекущиеДанные.ИдентификаторСтрокиПозиции);
	УдалитьСпециальностиПоИдентификаторуСтрокиПозиции(Форма, ТекущиеДанные.ИдентификаторСтрокиПозиции);
	
	
	Начисления = ДанныеТекущейПозиции.Начисления;
	Если Начисления <> Неопределено Тогда
		
		Для каждого Начисление Из Начисления Цикл
			
			НоваяСтрокаНачислений = Форма.Объект.Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНачислений, Начисление);
			
			НоваяСтрокаНачислений.ДействующийВидРасчета = Истина;
			
			НоваяСтрокаНачислений.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
			
			НомерПоказателя = 1;
			Показатели = Начисление.Показатели;
			Для каждого Показатель Из Показатели Цикл
				
				Если ЗначениеЗаполнено(Показатель.Показатель) Тогда
					
					ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(Показатель.Показатель);
					НоваяСтрокаНачислений["Показатель" + НомерПоказателя] = Показатель.Показатель;
					НоваяСтрокаНачислений["ПредставлениеПоказателя" + НомерПоказателя] = ?(ЗначениеЗаполнено(ПоказательИнфо["КраткоеНаименование"]), ПоказательИнфо["КраткоеНаименование"], ПоказательИнфо["Наименование"]);;
					
					Если НоваяСтрокаНачислений.Свойство("Значение" + НомерПоказателя) Тогда
						НоваяСтрокаНачислений["Значение" + НомерПоказателя] = Показатель.Значение;
						НоваяСтрокаНачислений["ТекущееЗначение" + НомерПоказателя] = Показатель.Значение;
					КонецЕсли;
					
					Если НоваяСтрокаНачислений.Свойство("МинимальноеЗначение" + НомерПоказателя) Тогда
						НоваяСтрокаНачислений["МинимальноеЗначение" + НомерПоказателя] = Показатель.ЗначениеМин;
						НоваяСтрокаНачислений["ТекущееМинимальноеЗначение" + НомерПоказателя] = Показатель.ЗначениеМин;
					КонецЕсли;
					
					Если НоваяСтрокаНачислений.Свойство("МаксимальноеЗначение" + НомерПоказателя) Тогда
						НоваяСтрокаНачислений["МаксимальноеЗначение" + НомерПоказателя] = Показатель.ЗначениеМакс;
						НоваяСтрокаНачислений["ТекущееМаксимальноеЗначение" + НомерПоказателя] = Показатель.ЗначениеМакс;
					КонецЕсли;
					
					НомерПоказателя = НомерПоказателя + 1;
					
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	НезависимыеПоказатели = ДанныеТекущейПозиции.НезависимыеПоказатели;
	Если НезависимыеПоказатели <> Неопределено Тогда
		
		Для Каждого Показатель Из НезависимыеПоказатели Цикл 
			
			НоваяСтрокаПоказателей = Форма.Объект.Показатели.Добавить();
			НоваяСтрокаПоказателей.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателей, Показатель);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	ЕжегодныеОтпуска = ДанныеТекущейПозиции.ЕжегодныеОтпуска;
	Если ЕжегодныеОтпуска <> Неопределено Тогда
		
		Для каждого ЕжегодныйОтпуск Из ЕжегодныеОтпуска Цикл
			
			НоваяСтрокаЕжегодныеОтпуска = Форма.Объект.ЕжегодныеОтпуска.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЕжегодныеОтпуска, ЕжегодныйОтпуск);
			
			НоваяСтрокаЕжегодныеОтпуска.ДействующийОтпуск = Истина;
			НоваяСтрокаЕжегодныеОтпуска.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Специальности = ДанныеТекущейПозиции.Специальности;
	Если Специальности <> Неопределено Тогда
		
		Для каждого Специальность Из Специальности Цикл
			
			НоваяСтрокаСпециальности = Форма.Объект.Специальности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСпециальности, Специальность);
			НоваяСтрокаСпециальности.ИдентификаторСтрокиПозиции = ТекущиеДанные.ИдентификаторСтрокиПозиции;
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УдалитьНачисленияИЕжегодныеОтпуска(Форма) Экспорт
	
	Для каждого ИдентификаторВыделеннойСтроки Из Форма.Элементы.Позиции.ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = Форма.Объект.Позиции.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		УдалитьНачисленияИЕжегодныеОтпускаПоИдентификаторуСтрокиПозиции(Форма, ВыделеннаяСтрока.ИдентификаторСтрокиПозиции);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНачисленияИЕжегодныеОтпускаПоИдентификаторуСтрокиПозиции(Форма, ИдентификаторСтрокиПозиции)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтрокиПозиции", ИдентификаторСтрокиПозиции);
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Начисления
	УдаляемыеСтроки = Форма.Объект.Начисления.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Форма.Объект.Начисления.Удалить(Форма.Объект.Начисления.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
	// Показатели
	УдаляемыеСтроки = Форма.Объект.Показатели.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Форма.Объект.Показатели.Удалить(Форма.Объект.Показатели.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
	// Ежегодные отпуска
	УдаляемыеСтроки = Форма.Объект.ЕжегодныеОтпуска.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Форма.Объект.ЕжегодныеОтпуска.Удалить(Форма.Объект.ЕжегодныеОтпуска.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УдалитьСпециальностиПоИдентификаторуСтрокиПозиции(Форма, ИдентификаторСтрокиПозиции)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтрокиПозиции", ИдентификаторСтрокиПозиции);
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Специальности
	УдаляемыеСтроки = Форма.Объект.Специальности.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Форма.Объект.Специальности.Удалить(Форма.Объект.Специальности.Индекс(УдаляемаяСтрока));
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПрочитатьТекущиеДанныеПозицииШтатногоРасписанияВФормуСправочника(ОбъектФормы, Ссылка) Экспорт
	
	ОбъектФормы.Начисления.Очистить();
	ОбъектФормы.Показатели.Очистить();
	
	ДанныеПозиции = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(Ссылка, , , Ложь);
	
	СписокЗаполняемыхСвойств =
		"УсловияПриема,
		|ФОТ,
		|ФОТМин,
		|ФОТМакс,
		|ОкладТариф,
		|ОкладТарифМин,
		|ОкладТарифМакс,
		|НадбавкаЗаВредностьРазмер,
		|НадбавкаЗаВредностьРазмерМин,
		|НадбавкаЗаВредностьРазмерМакс,
		|СпособОтраженияЗарплатыВБухучете,
		|СтатьяФинансирования";
	
	ЗаполнитьЗначенияСвойств(ОбъектФормы, ДанныеПозиции, СписокЗаполняемыхСвойств);
	
	Для каждого ОписаниеНачисления Из ДанныеПозиции.Начисления Цикл
		
		СтрокаНачисления = ОбъектФормы.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисления, ОписаниеНачисления);
			
		Для каждого ОписаниеПоказателя Из ОписаниеНачисления.Показатели Цикл
				
			СтрокаПоказатель = ОбъектФормы.Показатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоказатель, ОписаниеПоказателя);
				
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого ОписаниеПоказателя Из ДанныеПозиции.НезависимыеПоказатели Цикл
		
		СтрокаПоказатель = ОбъектФормы.Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоказатель, ОписаниеПоказателя);
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ЗаполнитьДанныеТарифнойСетки(Форма, ДатаВступленияВСилу) Экспорт
	
	Если Форма.Элементы.Позиции.ТекущаяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Форма.Объект.Позиции.НайтиПоИдентификатору(Форма.Элементы.Позиции.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			
			УстановитьПривилегированныйРежим(Истина);
		
			РазрядКатегория = ТекущиеДанные.РазрядКатегория;
			ТарифнаяСетка = ТекущиеДанные.ТарифнаяСетка;
			
			РазрядКатегорияНадбавки = ТекущиеДанные.РазрядКатегорияНадбавки;
			ТарифнаяСеткаНадбавки = ТекущиеДанные.ТарифнаяСеткаНадбавки;
			
			СтрокиНачислений = Форма.Объект.Начисления.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", ТекущиеДанные.ИдентификаторСтрокиПозиции));
		
			ОписаниеТаблицыВидовРасчета = Форма.ОписаниеТаблицыНачисленийНаСервере();
			ЗарплатаКадрыРасширенныйКлиентСервер.ЗаполнитьЗначенияПоказателейТарифныхСеток(Форма, СтрокиНачислений , ОписаниеТаблицыВидовРасчета, 0 , ТарифнаяСетка, РазрядКатегория, ДатаВступленияВСилу, ТарифнаяСеткаНадбавки, РазрядКатегорияНадбавки, Истина);
																				
			УстановитьПривилегированныйРежим(Ложь);
		
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
