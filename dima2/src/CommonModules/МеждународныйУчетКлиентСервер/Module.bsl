////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции, используемые в подсистеме международного
// финансового учета.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет типы источников уточнения счета, соответствующие группе финансового учета.
//
// Параметры:
//  ГруппаФинансовогоУчета - СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры,
//							 СправочникСсылка.ГруппыФинансовогоУчетаРасчетов,
//							 СправочникСсылка.ГруппыФинансовогоУчетаДенежныхСредств,
//                           СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов.
//
// Возвращаемое значение:
//  Массив - массив значений перечисления ТипыИсточниковУточненияСчета.
//
Функция ТипыИсточниковУточненияСчета(ГруппаФинансовогоУчета) Экспорт

	ТипыИсточников = Новый Массив;
	Если ТипЗнч(ГруппаФинансовогоУчета) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры") Тогда
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатуры"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатурыДебета"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатурыКредита"));
	ИначеЕсли ТипЗнч(ГруппаФинансовогоУчета) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов") Тогда
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетов"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетовДебета"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетовКредита"));
	ИначеЕсли ТипЗнч(ГруппаФинансовогоУчета) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаДенежныхСредств") Тогда
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредств"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредствДебета"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредствКредита"));
	ИначеЕсли ТипЗнч(ГруппаФинансовогоУчета) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов") Тогда
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходов"));
	КонецЕсли; 
	
	Возврат ТипыИсточников;

КонецФункции

// Определяет имя справочника групп финансового учета по типу источника уточнения счета.
//
// Параметры:
//  ТипИсточника - ПеречислениеСсылка.ТипыИсточниковУточненияСчета - тип источника уточнения счета.
//
// Возвращаемое значение:
//  Строка - имя справочника.
//
Функция ИмяСправочникаГруппФинансовогоУчета(ТипИсточника) Экспорт
	
	ИмяСправочника = "";
	Если ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатуры")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатурыДебета")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатурыКредита") Тогда
		ИмяСправочника = "ГруппыФинансовогоУчетаНоменклатуры";
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетов")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетовДебета")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетовКредита") Тогда
		ИмяСправочника = "ГруппыФинансовогоУчетаРасчетов";
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредств")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредствДебета")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредствКредита") Тогда
		ИмяСправочника = "ГруппыФинансовогоУчетаДенежныхСредств";
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходов") Тогда
		ИмяСправочника = "ГруппыФинансовогоУчетаДоходовРасходов";
	КонецЕсли; 
	
	Возврат ИмяСправочника;
	
КонецФункции	

Процедура СкопироватьДанныеФормыДерево(Приемник, Источник, ВключатьПодчиненные) Экспорт

	ЭлементыИсточника = Источник.ПолучитьЭлементы();
	ЭлементыПриемника = Приемник.ПолучитьЭлементы();
	Для каждого ЭлементИсточника Из ЭлементыИсточника Цикл
		ЭлементПриемника = ЭлементыПриемника.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементПриемника, ЭлементИсточника);
		Если ВключатьПодчиненные Тогда
			СкопироватьДанныеФормыДерево(ЭлементПриемника, ЭлементИсточника, ВключатьПодчиненные = Ложь);			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция НайтиЭлементДерева(ДанныеФормыДерево, ЗначениеРеквизита, ИмяРеквизита, ВключатьПодчиненные = Ложь) Экспорт

	ЭлементыДерева = ДанныеФормыДерево.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева[ИмяРеквизита] = ЗначениеРеквизита Тогда		
			Возврат ЭлементДерева;
		Иначе	
			Если ВключатьПодчиненные Тогда
				НайденныйЭлементДерева = НайтиЭлементДерева(ЭлементДерева, ЗначениеРеквизита, ИмяРеквизита, ВключатьПодчиненные);
				Если НайденныйЭлементДерева <> Неопределено Тогда
					Возврат НайденныйЭлементДерева;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Неопределено;

КонецФункции

Процедура РазвернутьДерево(Форма, ИмяТаблицыФормы, ДанныеФормыДерево, ВключатьПодчиненные = Ложь) Экспорт

	ЭлементыДерева = ДанныеФормыДерево.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Форма.Элементы[ИмяТаблицыФормы].Развернуть(ЭлементДерева.ПолучитьИдентификатор(), ВключатьПодчиненные); 	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
