////////////////////////////////////////////////////////////////////////////////
// Подсистема «Состояния сотрудников».
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область МетодыДляРаботыСДаннымиСостоянийСотрудников

// Составляет таблицу состояний сотрудников. 
// Если указаны даты начала/окончания, будут отобраны записи о состояниях, 
// которые хотя бы одним днем попадают в указанный период.
//
// Параметры:
//	Сотрудники - (необязательный) массив сотрудников, для которых нужно выбрать состояния, 
//		если не указан, выбираются состояния всех разрешенных сотрудников.
//	Состояния - (необязательный) отбор по состояниям.
//	ДатаНачала - (необязательный) начало анализируемого периода.
//	
// Возвращаемое значение - таблица значений с колонками.
//	Сотрудник, Состояние, Начало, Окончание
//
Функция СостоянияСотрудников(Сотрудники = Неопределено, Состояния = Неопределено, ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТСостоянияСотрудников(МенеджерВременныхТаблиц, Сотрудники, Состояния, ДатаНачала, ДатаОкончания);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТСостоянияСотрудников КАК СостоянияСотрудников";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Добавляет в менеджер временную таблицу состояний сотрудников.
// Подробное описание параметров см. в описании функции СостоянияСотрудников.
//
Процедура СоздатьВТСостоянияСотрудников(МенеджерВременныхТаблиц, Сотрудники = Неопределено, Состояния = Неопределено, ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СостоянияСотрудников.Период КАК Начало,
	|	СостоянияСотрудников.ДействуетДо КАК Окончание,
	|	СостоянияСотрудников.ОкончаниеПредположительно,
	|	СостоянияСотрудников.Сотрудник,
	|	СостоянияСотрудников.Состояние
	|ПОМЕСТИТЬ ВТСостоянияСотрудников
	|ИЗ
	|	РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
	|ГДЕ
	|	(СостоянияСотрудников.Период <= &ДатаОкончания
	|			ИЛИ &ДатаОкончанияНеОграничена)
	|	И (СостоянияСотрудников.ДействуетДо >= &ДатаНачала
	|			ИЛИ &ДатаНачалаНеОграничена
	|			ИЛИ СостоянияСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))
	|	И (СостоянияСотрудников.Сотрудник В (&Сотрудники)
	|			ИЛИ &ПоВсемСотрудникам)
	|	И (СостоянияСотрудников.Состояние В (&Состояния)
	|			ИЛИ &ПоВсемСостояниям)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);
	Запрос.УстановитьПараметр("Состояния", Состояния);
	Запрос.УстановитьПараметр("ПоВсемСостояниям", Состояния = Неопределено);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаНачалаНеОграничена", ДатаНачала = Неопределено);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаОкончанияНеОграничена", ДатаОкончания = Неопределено);
	Запрос.Выполнить();
	
КонецПроцедуры

// Добавляет в менеджер временную таблицу состояний сотрудников.
// Параметры
//	МенеджерВременныхТаблиц
//	ИмяВТПараметров - имя временной таблицы в менеджере, содержащей следующие поля:
//		- Сотрудник
//		- ДатаНачала
//		- ДатаОкончания
// Создает в менеджере временную таблицу "ВТПериодыСостоянийСотрудников" с полями
//		- Сотрудник
//		- ДатаНачала
//		- ДатаОкончания
//		- Состояние
//		- Начало - начало нахождения в данном состоянии
//		- Окончание
//		- ОкончаниеПредположительно
//		- ВидВремени
Процедура СоздатьВТПериодыСостоянийСотрудников(МенеджерВременныхТаблиц, ИмяВТПараметров = "ВТСотрудникиПериоды") Экспорт
	
	Запрос = ЗапросВТПериодыСостоянийСотрудников(МенеджерВременныхТаблиц, ИмяВТПараметров);
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует запрос для получения периодов состояний сотрудников.
// Подробности см. СоздатьВТПериодыСостоянийСотрудников
Функция ЗапросВТПериодыСостоянийСотрудников(МенеджерВременныхТаблиц, ИмяВТПараметров = "ВТСотрудникиПериоды") Экспорт
	
	// Формируем уникальных сотрудников
	ЗапросПериодовСостояний = Новый Запрос;
	ЗапросПериодовСостояний.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПериодовСостояний.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА Сотрудники.ГоловнойСотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			ТОГДА Сотрудники.Ссылка
		|		ИНАЧЕ Сотрудники.ГоловнойСотрудник
		|	КОНЕЦ КАК Сотрудник,
		|	СотрудникиПериоды.ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания
		|ПОМЕСТИТЬ ВТНормализованныеСотрудники
		|ИЗ
		|	%ВТСотрудникиПериоды% КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СотрудникиПериоды.Сотрудник = Сотрудники.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНормализованныеСотрудники.Сотрудник,
		|	ВТНормализованныеСотрудники.ДатаНачала,
		|	ВТНормализованныеСотрудники.ДатаОкончания,
		|	СостоянияСотрудников.Состояние,
		|	СостоянияСотрудников.Период КАК Начало,
		|	СостоянияСотрудников.ДействуетДо КАК Окончание,
		|	СостоянияСотрудников.ОкончаниеПредположительно,
		|	СостоянияСотрудников.ВидВремени,
		|	ВЫБОР
		|	 КОГДА СостоянияСотрудников.ДокументОснование = НЕОПРЕДЕЛЕНО
		|     ТОГДА НЕОПРЕДЕЛЕНО
		|	 ИНАЧЕ СостоянияСотрудников.ДокументОснование.Дата 
		|	КОНЕЦ КАК ОснованиеДата,
		|	ВЫБОР
		|	 КОГДА СостоянияСотрудников.ДокументОснование = НЕОПРЕДЕЛЕНО
		|     ТОГДА НЕОПРЕДЕЛЕНО
		|	 ИНАЧЕ СостоянияСотрудников.ДокументОснование.Номер 
		|	КОНЕЦ КАК ОснованиеНомер
		|ПОМЕСТИТЬ ВТПериодыСостоянийСотрудников
		|ИЗ
		|	ВТНормализованныеСотрудники КАК ВТНормализованныеСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
		|		ПО (ВТНормализованныеСотрудники.Сотрудник = СостоянияСотрудников.Сотрудник)
		|			И (ВТНормализованныеСотрудники.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ СостоянияСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ СостоянияСотрудников.ДействуетДо >= ВТНормализованныеСотрудники.ДатаНачала)
		|			И (ВТНормализованныеСотрудники.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ СостоянияСотрудников.Период = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ СостоянияСотрудников.Период <= ВТНормализованныеСотрудники.ДатаОкончания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНормализованныеСотрудники";
	
	ЗапросПериодовСостояний.Текст = СтрЗаменить(ЗапросПериодовСостояний.Текст, "%ВТСотрудникиПериоды%", ИмяВТПараметров);	
	
	Возврат ЗапросПериодовСостояний;
	
КонецФункции

Процедура ЗарегистрироватьСостояниеСотрудника(Движения, ДокументСсылка, Сотрудник, Состояние, Начало, Окончание = Неопределено, ИсправленныйДокумент = Неопределено, ВидВремени = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		// Если указан документ исправления, и он заполнен, то нужно зарегистрировать сторно-запись о состоянии.
		ЗарегистрироватьСторноСостоянийСотрудников(Движения, ДокументСсылка, ИсправленныйДокумент);
	КонецЕсли;
	
	ДобавитьЗаписьСостоянияСотрудника(Движения, ДокументСсылка, Сотрудник, Состояние, Начало, Окончание, , ВидВремени);
	
КонецПроцедуры

Процедура ЗарегистрироватьСостоянияСотрудников(Движения, ДокументСсылка, ДанныеСостояний, ИсправленныйДокумент = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		// Если указан документ исправления, и он заполнен, то нужно зарегистрировать сторно-запись о состоянии.
		ЗарегистрироватьСторноСостоянийСотрудников(Движения, ДокументСсылка, ИсправленныйДокумент);
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеСостояний Цикл
		ДобавитьЗаписьСостоянияСотрудника(Движения, ДокументСсылка, СтрокаДанных.Сотрудник, СтрокаДанных.Состояние, СтрокаДанных.Начало, СтрокаДанных.Окончание);
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыСостоянияФизическогоЛица() Экспорт
	
	Параметры = Новый Структура(
		"ДокументСсылка, 
		|Организация, 
		|Состояние, 
		|Начало, 
		|Окончание, 
		|ОкончаниеПредположительно, 
		|ИсправленныйДокумент");
		
	Возврат Параметры;
	
КонецФункции

Процедура ЗарегистрироватьСостояниеФизическогоЛица(Движения, ФизическоеЛицо, ПараметрыСостояния) Экспорт
	
	Начало = ПараметрыСостояния.Начало;
	Окончание = ПараметрыСостояния.Окончание;
	ОкончаниеПредположительно = ПараметрыСостояния.ОкончаниеПредположительно;
	ДокументСсылка = ПараметрыСостояния.ДокументСсылка;
	Организация = ПараметрыСостояния.Организация;
	ИсправленныйДокумент = ПараметрыСостояния.ИсправленныйДокумент;
	
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		// Если указан документ исправления, и он заполнен, то нужно зарегистрировать сторно-запись о состоянии.
		ЗарегистрироватьСторноСостоянийСотрудников(Движения, ДокументСсылка, ИсправленныйДокумент);
	КонецЕсли;
	
	// Получаем всех сотрудников физического лица в организации и устанавливаем для них указанное состояние.
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.НачалоПериода = Начало;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = Начало;
	ПараметрыПолученияСотрудников.Организация = Организация;
	ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыПолученияСотрудников.РаботникиПоТрудовымДоговорам = Истина;
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолученияСотрудников);
	
	Для Каждого СтрокаТаблицы Из ТаблицаСотрудников Цикл
		ДобавитьЗаписьСостоянияСотрудника(Движения, ДокументСсылка, СтрокаТаблицы.Сотрудник, ПараметрыСостояния.Состояние, Начало, Окончание, , , ОкончаниеПредположительно);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьОтпускСотрудника(Движения, ДокументСсылка, Сотрудник, ВидОтпуска, Начало, Окончание = Неопределено, ИсправленныйДокумент = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		// Если указан документ исправления, и он заполнен, то нужно зарегистрировать сторно-запись о состоянии.
		ЗарегистрироватьСторноСостоянийСотрудников(Движения, ДокументСсылка, ИсправленныйДокумент);
	КонецЕсли;
	
	ДобавитьЗаписьСостоянияСотрудника(Движения, ДокументСсылка, Сотрудник, СостояниеПоВидуОтпуска(ВидОтпуска), Начало, Окончание);
	
КонецПроцедуры

// Выполняет регистрацию записей, отменяющих действие указанного документа.
//
Процедура ЗарегистрироватьСторноСостоянийСотрудников(Движения, ДокументСсылка, СторнируемыйДокумент) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеСостоянийСотрудников.Сотрудник,
	|	ДанныеСостоянийСотрудников.Состояние,
	|	ДанныеСостоянийСотрудников.Начало,
	|	ДанныеСостоянийСотрудников.Окончание
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
	|ГДЕ
	|	ДанныеСостоянийСотрудников.Регистратор = &Регистратор
	|	И НЕ ДанныеСостоянийСотрудников.Сторно";
	
	ЗарплатаКадры.ЗарегистрироватьСторноИсходныхДанныхСостояний(Движения, "ДанныеСостоянийСотрудников", ДокументСсылка, СторнируемыйДокумент);	
КонецПроцедуры

Функция ПустаяТаблицаДанныхСостоянийСотрудника() Экспорт
	
	ДанныеСостояний = Новый ТаблицаЗначений;
	ДанныеСостояний.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеСостояний.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСотрудника"));
	ДанныеСостояний.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	ДанныеСостояний.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата"));
	
	Возврат ДанныеСостояний;
	
КонецФункции

Процедура ОбновитьСостоянияСотрудников(Сотрудники, РежимЗагрузки = Ложь) Экспорт
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеРегистраПервичныхДанных = ЗарплатаКадры.ОписаниеРегистраИсходныхПериодовСостояний();
	ОписаниеРегистраПервичныхДанных.ИмяРегистра = "ДанныеСостоянийСотрудников";
	ОписаниеРегистраПервичныхДанных.ИмяПоляДатаНачалаСобытия = "Начало";
	ОписаниеРегистраПервичныхДанных.ИмяПоляДатаНачалаПериода = "Начало";
	ОписаниеРегистраПервичныхДанных.ИмяПоляДатаОкончанияПериода = "Окончание"; 
	ОписаниеРегистраПервичныхДанных.ИмяПоляПриоритет = "Состояние";
	ОписаниеРегистраПервичныхДанных.Измерения.Добавить("Сотрудник");
	ОписаниеРегистраПервичныхДанных.Ресурсы.Добавить("Состояние");
	ОписаниеРегистраПервичныхДанных.Ресурсы.Добавить("ВидВремени");
	ОписаниеРегистраПервичныхДанных.Ресурсы.Добавить("ОкончаниеПредположительно");
	ОписаниеРегистраПервичныхДанных.Ресурсы.Добавить("ДокументОснование");
	
	ОписаниеРегистраВторичныхДанных = ЗарплатаКадры.ОписаниеРегистраРассчитанныхПериодовСостояний();
	ОписаниеРегистраВторичныхДанных.ИмяРегистра = "СостоянияСотрудников";
	ОписаниеРегистраВторичныхДанных.ИмяПоляДатаНачалаПериода = "Период";
	ОписаниеРегистраВторичныхДанных.ИмяПоляДатаОкончанияПериода = "ДействуетДо"; 
	ОписаниеРегистраВторичныхДанных.Измерения.Добавить("Сотрудник");
	ОписаниеРегистраВторичныхДанных.Ресурсы.Добавить("Состояние");
	ОписаниеРегистраВторичныхДанных.Ресурсы.Добавить("ВидВремени");
	ОписаниеРегистраВторичныхДанных.Ресурсы.Добавить("ОкончаниеПредположительно");
	ОписаниеРегистраВторичныхДанных.Ресурсы.Добавить("ДокументОснование");

	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для Каждого ЭлементОтбора Из Сотрудники Цикл
		СтрокаТаблицы = ТаблицаОтбора.Добавить();
		СтрокаТаблицы.Сотрудник = ЭлементОтбора;
	КонецЦикла;	
	
	ЗарплатаКадры.ОбновитьРегистрРассчитанныхПериодовСостояний(
		ОписаниеРегистраПервичныхДанных,
		ОписаниеРегистраВторичныхДанных,
		ТаблицаОтбора,
		РежимЗагрузки)
	
КонецПроцедуры

Функция СостояниеПоВидуОтпуска(ВидОтпуска) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидОтпуска) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Предопределенные = Новый Соответствие;
	Предопределенные.Вставить("ОтпускПострадавшимВАварииЧАЭС", Перечисления.СостоянияСотрудника.ДополнительныйОтпуск);
	Предопределенные.Вставить("ОтпускУчебный", Перечисления.СостоянияСотрудника.ОтпускУчебныйОплачиваемый);
	Предопределенные.Вставить("ОтпускБезОплатыУчебный", Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый);
	Предопределенные.Вставить("Основной", Перечисления.СостоянияСотрудника.ОтпускОсновной);
	Предопределенные.Вставить("ОтпускЗаСвойСчетПоСоглашению", Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству);
	Предопределенные.Вставить("ОтпускЗаСвойСчет", Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя);
	
	Для Каждого КлючИЗначение Из Предопределенные Цикл
		ПредопределенныйВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков." + КлючИЗначение.Ключ);
		Если ЗначениеЗаполнено(ПредопределенныйВидОтпуска) И ПредопределенныйВидОтпуска = ВидОтпуска Тогда
			Возврат КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Не удалось сопоставить ни с одним из предопределенных.
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОтпуска, "ОтпускБезОплаты") Тогда
		Возврат Перечисления.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый;
	Иначе
		Возврат Перечисления.СостоянияСотрудника.ДополнительныйОтпуск;
	КонецЕсли;
	
КонецФункции

Функция СостояниеПоВидуОтпускаУходаЗаРебенком(ВидОтпуска) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидОтпуска) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидОтпуска = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет Тогда
		Возврат Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком;
	ИначеЕсли ВидОтпуска = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет Тогда
		Возврат Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком6лет;	
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

// Добавляет в структуру данных для проведения поля, необходимые для заполнения состояний.
//
// Параметры:
//	ДанныеДляПроведения - см. РасчетЗарплатыРасширенный.СоздатьДанныеДляПроведенияНачисленияЗарплаты.
//
Процедура ДополнитьОписаниеДанныхДляПроведения(ДанныеДляПроведения) Экспорт
	
	ДанныеДляПроведения.Вставить("ДанныеСостоянийСотрудников");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получения значений параметров СКД. Используется когда, значением параметра является предопределенный
// 	элемент справочника.
//
// Параметры:
//  ИмяПараметра - строка
//
//	Возвращаемое значение - значение параметра.
//	
Функция ЗначениеПараметраОтчетаПоУмолчанию(ИмяПараметра) Экспорт
	
	Если ИмяПараметра = "РабочееВремя" Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьЗаписьСостоянияСотрудника(Движения, ДокументОснование, Сотрудник, Состояние, Начало, Окончание = Неопределено, Сторно = Ложь, ВидВремени = Неопределено, ОкончаниеПредположительно = Неопределено)
	
	НоваяСтрока = Движения.ДанныеСостоянийСотрудников.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.ДокументОснование = ДокументОснование;
	НоваяСтрока.Сторно = Сторно;
	НоваяСтрока.Состояние = Состояние;
	НоваяСтрока.Начало = Начало;
	НоваяСтрока.Окончание = Окончание;
	НоваяСтрока.ОкончаниеПредположительно = ОкончаниеПредположительно;
	НоваяСтрока.ВидВремени = ВидВремени;
	
	Движения.ДанныеСостоянийСотрудников.Записывать = Истина;
	
КонецПроцедуры

Процедура ДобавитьЗаписиСостоянияСотрудников(Движения, ДокументСсылка, ДанныеСостояний, Сторно = Ложь) Экспорт
	
	Для Каждого СтрокаДанных Из ДанныеСостояний Цикл
		ДобавитьЗаписьСостоянияСотрудника(Движения, ДокументСсылка, СтрокаДанных.Сотрудник, СтрокаДанных.Состояние, СтрокаДанных.Начало, СтрокаДанных.Окончание, Сторно);
	КонецЦикла;
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	
КонецПроцедуры

Процедура ЗаполнитьСостоянияСотрудников() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо,
	|	Сотрудники.ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТСотрудникиОрганизации
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	Документ.БольничныйЛист КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО (СотрудникиОрганизации.ФизическоеЛицо = ТаблицаДокумента.Сотрудник)
	|			И (СотрудникиОрганизации.ГоловнаяОрганизация = ВЫБОР
	|				КОГДА ТаблицаДокумента.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ТаблицаДокумента.Организация
	|				ИНАЧЕ ТаблицаДокумента.Организация.ГоловнаяОрганизация
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = СотрудникиОрганизации.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.Командировка КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.Отпуск КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО (СотрудникиОрганизации.ФизическоеЛицо = ТаблицаДокумента.Сотрудник)
	|			И (СотрудникиОрганизации.ГоловнаяОрганизация = ВЫБОР
	|				КОГДА ТаблицаДокумента.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ТаблицаДокумента.Организация
	|				ИНАЧЕ ТаблицаДокумента.Организация.ГоловнаяОрганизация
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = СотрудникиОрганизации.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ПрогулНеявка КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.ПростойСотрудников КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПростойСотрудников.Начисления КАК ТаблицаСотрудников
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаСотрудников.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаСотрудников.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.СторнированиеНачислений КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка
	|ИЗ
	|	Документ.Увольнение КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сотрудник = ТаблицаДокумента.Сотрудник)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ДанныеСостояний.Сотрудник ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.БолезньБезОплаты) КАК Состояние,
	|	ЛОЖЬ КАК Сторно,
	|	БольничныйЛист.ДатаНачала КАК Начало,
	|	БольничныйЛист.ДатаОкончания КАК Окончание,
	|	NULL КАК ВидОтпуска
	|ПОМЕСТИТЬ ВТДанныеСостояний
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|	И НЕ БольничныйЛист.НазначитьПособие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.БолезньБезОплаты),
	|	ЛОЖЬ,
	|	БольничныйЛист.ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(БольничныйЛист.ДатаНачалаОплаты, ДЕНЬ, -1),
	|	NULL
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|	И БольничныйЛист.НазначитьПособие
	|	И БольничныйЛист.ДатаНачала < БольничныйЛист.ДатаНачалаОплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Болезнь),
	|	ЛОЖЬ,
	|	БольничныйЛист.ДатаНачалаОплаты,
	|	БольничныйЛист.ДатаОкончанияОплаты,
	|	NULL
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|	И БольничныйЛист.НазначитьПособие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Болезнь),
	|	ЛОЖЬ,
	|	ДОБАВИТЬКДАТЕ(БольничныйЛист.ДатаОкончанияОплаты, ДЕНЬ, 1),
	|	БольничныйЛист.ДатаОкончания,
	|	NULL
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|	И БольничныйЛист.НазначитьПособие
	|	И БольничныйЛист.ДатаОкончанияОплаты < БольничныйЛист.ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник,
	|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа),
	|	ЛОЖЬ,
	|	ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата,
	|	НЕОПРЕДЕЛЕНО,
	|	NULL
	|ИЗ
	|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ВозвратИзОтпускаПоУходуЗаРебенком
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО (СотрудникиОрганизации.ФизическоеЛицо = ВозвратИзОтпускаПоУходуЗаРебенком.Сотрудник)
	|			И (СотрудникиОрганизации.ГоловнаяОрганизация = ВЫБОР
	|				КОГДА ВозвратИзОтпускаПоУходуЗаРебенком.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ВозвратИзОтпускаПоУходуЗаРебенком.Организация
	|				ИНАЧЕ ВозвратИзОтпускаПоУходуЗаРебенком.Организация.ГоловнаяОрганизация
	|			КОНЕЦ)
	|ГДЕ
	|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Командировка.Сотрудник,
	|	Командировка.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Командировка),
	|	ЛОЖЬ,
	|	Командировка.ДатаНачала,
	|	Командировка.ДатаОкончания,
	|	NULL
	|ИЗ
	|	Документ.Командировка КАК Командировка
	|ГДЕ
	|	Командировка.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработку.Сотрудник,
	|	ОплатаПоСреднемуЗаработку.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ВыполнениеГосударственныхОбязанностей),
	|	ЛОЖЬ,
	|	ОплатаПоСреднемуЗаработку.ДатаНачала,
	|	ОплатаПоСреднемуЗаработку.ДатаОкончания,
	|	NULL
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
	|ГДЕ
	|	ОплатаПоСреднемуЗаработку.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Отпуск.Сотрудник,
	|	Отпуск.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускОсновной),
	|	ЛОЖЬ,
	|	Отпуск.ДатаНачалаОсновногоОтпуска,
	|	Отпуск.ДатаОкончанияОсновногоОтпуска,
	|	NULL
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|ГДЕ
	|	Отпуск.ПредоставитьОсновнойОтпуск
	|	И Отпуск.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Отпуск.Сотрудник,
	|	Отпуск.Ссылка,
	|	NULL,
	|	ЛОЖЬ,
	|	ДопОтпуска.ДатаНачала,
	|	ДопОтпуска.ДатаОкончания,
	|	ДопОтпуска.ВидОтпуска
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск.ДополнительныеОтпуска КАК ДопОтпуска
	|		ПО (ДопОтпуска.Ссылка = Отпуск.Ссылка)
	|			И (Отпуск.ПредоставитьДополнительныйОтпуск)
	|			И (Отпуск.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТРегистраторы.Ссылка
	|				ИЗ
	|					ВТРегистраторы))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускБезСохраненияОплаты.Сотрудник,
	|	ОтпускБезСохраненияОплаты.Ссылка,
	|	NULL,
	|	ЛОЖЬ,
	|	ОтпускБезСохраненияОплаты.ДатаНачала,
	|	ОтпускБезСохраненияОплаты.ДатаОкончания,
	|	ОтпускБезСохраненияОплаты.ВидОтпуска
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	|ГДЕ
	|	ОтпускБезСохраненияОплаты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник,
	|	ОтпускПоУходуЗаРебенком.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком),
	|	ЛОЖЬ,
	|	ОтпускПоУходуЗаРебенком.ДатаНачала,
	|	ОтпускПоУходуЗаРебенком.ДатаОкончания,
	|	NULL
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО (СотрудникиОрганизации.ФизическоеЛицо = ОтпускПоУходуЗаРебенком.Сотрудник)
	|			И (СотрудникиОрганизации.ГоловнаяОрганизация = ВЫБОР
	|				КОГДА ОтпускПоУходуЗаРебенком.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ОтпускПоУходуЗаРебенком.Организация
	|				ИНАЧЕ ОтпускПоУходуЗаРебенком.Организация.ГоловнаяОрганизация
	|			КОНЕЦ)
	|ГДЕ
	|	ОтпускПоУходуЗаРебенком.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриемНаРаботу.Сотрудник,
	|	ПриемНаРаботу.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа),
	|	ЛОЖЬ,
	|	ПриемНаРаботу.ДатаПриема,
	|	НЕОПРЕДЕЛЕНО,
	|	NULL
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрогулНеявка.Сотрудник,
	|	ПрогулНеявка.Ссылка,
	|	ВЫБОР
	|		КОГДА ПрогулНеявка.ВидОтсутствия.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Прогул)
	|		КОГДА ПрогулНеявка.ВидОтсутствия.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам)
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ПрогулНеявка.ДатаНачала,
	|	ПрогулНеявка.ДатаОкончания,
	|	NULL
	|ИЗ
	|	Документ.ПрогулНеявка КАК ПрогулНеявка
	|ГДЕ
	|	ПрогулНеявка.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленияПростой.Сотрудник,
	|	ПростойСотрудников.Ссылка,
	|	ВЫБОР
	|		КОГДА ПростойСотрудников.УдалитьВидПростоя = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника)
	|		КОГДА ПростойСотрудников.УдалитьВидПростоя = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойПоВинеРаботника)
	|		КОГДА ПростойСотрудников.УдалитьВидПростоя = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойПоВинеРаботодателя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника)
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ПростойСотрудников.ДатаНачала,
	|	ПростойСотрудников.ДатаОкончания,
	|	NULL
	|ИЗ
	|	Документ.ПростойСотрудников КАК ПростойСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПростойСотрудников.Начисления КАК НачисленияПростой
	|		ПО (НачисленияПростой.Ссылка = ПростойСотрудников.Ссылка)
	|			И (ПростойСотрудников.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТРегистраторы.Ссылка
	|				ИЗ
	|					ВТРегистраторы))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Увольнение.Сотрудник,
	|	Увольнение.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение),
	|	ЛОЖЬ,
	|	Увольнение.ДатаУвольнения,
	|	НЕОПРЕДЕЛЕНО,
	|	NULL
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|ГДЕ
	|	Увольнение.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСостояний.Сотрудник,
	|	ДанныеСостояний.ДокументОснование,
	|	ДанныеСостояний.Состояние,
	|	ДанныеСостояний.Сторно,
	|	ДанныеСостояний.Начало,
	|	ДанныеСостояний.Окончание,
	|	ДанныеСостояний.ВидОтпуска
	|ИЗ
	|	ВТДанныеСостояний КАК ДанныеСостояний
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеИсправленияСостояний.Сотрудник,
	|	ДанныеСостояний.ДокументОснование,
	|	ДанныеИсправленияСостояний.Состояние,
	|	ИСТИНА,
	|	ДанныеИсправленияСостояний.Начало,
	|	ДанныеИсправленияСостояний.Окончание,
	|	ДанныеИсправленияСостояний.ВидОтпуска
	|ИЗ
	|	ВТДанныеСостояний КАК ДанныеСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСостояний КАК ДанныеИсправленияСостояний
	|		ПО (ДанныеИсправленияСостояний.ДокументОснование = ДанныеСостояний.ДокументОснование.ИсправленныйДокумент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеИсправленияСостояний.Сотрудник,
	|	СторнированиеНачислений.Ссылка,
	|	ДанныеИсправленияСостояний.Состояние,
	|	ИСТИНА,
	|	ДанныеИсправленияСостояний.Начало,
	|	ДанныеИсправленияСостояний.Окончание,
	|	ДанныеИсправленияСостояний.ВидОтпуска
	|ИЗ
	|	Документ.СторнированиеНачислений КАК СторнированиеНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСостояний КАК ДанныеИсправленияСостояний
	|		ПО (ДанныеИсправленияСостояний.ДокументОснование = СторнированиеНачислений.СторнируемыйДокумент)
	|ГДЕ
	|	СторнированиеНачислений.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеСостояний.ДокументОснование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	Сотрудники = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.ДанныеСостоянийСотрудников.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			СтрокаНабора.Регистратор = Выборка.ДокументОснование;
			Если Не ЗначениеЗаполнено(Выборка.Состояние) И ЗначениеЗаполнено(Выборка.ВидОтпуска) Тогда
				СтрокаНабора.Состояние = СостояниеПоВидуОтпуска(Выборка.ВидОтпуска);
			КонецЕсли;
			Сотрудники.Добавить(Выборка.Сотрудник);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	СостоянияСотрудников.ОбновитьСостоянияСотрудников(Сотрудники, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитСостояниеСотрудникаПрогулНеявка() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПрогулНеявка.Ссылка,
	|	ВЫБОР
	|		КОГДА ПрогулНеявка.ВидОтсутствия.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам)
	|		КОГДА ПрогулНеявка.ВидОтсутствия.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Прогул)
	|	КОНЕЦ КАК СостояниеСотрудника
	|ИЗ
	|	Документ.ПрогулНеявка КАК ПрогулНеявка
	|ГДЕ
	|	ПрогулНеявка.СостояниеСотрудника <> ВЫБОР
	|			КОГДА ПрогулНеявка.ВидОтсутствия.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам)
	|			КОГДА ПрогулНеявка.ВидОтсутствия.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Прогул)
	|		КОНЕЦ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитСостояниеСотрудниковПростой() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПростойСотрудников.Ссылка,
	|	ВЫБОР
	|		КОГДА ПростойСотрудников.УдалитьВидПростоя = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника)
	|		КОГДА ПростойСотрудников.УдалитьВидПростоя = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойПоВинеРаботника)
	|		КОГДА ПростойСотрудников.УдалитьВидПростоя = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойПоВинеРаботодателя)
	|	КОНЕЦ КАК ВидПростоя
	|ИЗ
	|	Документ.ПростойСотрудников КАК ПростойСотрудников
	|ГДЕ
	|	ПростойСотрудников.ВидПростоя <> ВЫБОР
	|			КОГДА ПростойСотрудников.УдалитьВидПростоя = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника)
	|			КОГДА ПростойСотрудников.УдалитьВидПростоя = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойПоВинеРаботника)
	|			КОГДА ПростойСотрудников.УдалитьВидПростоя = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойПоВинеРаботодателя)
	|		КОНЕЦ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитСостояниеСотрудникаОплатаПоСреднемуЗаработку() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработку.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ВыполнениеГосударственныхОбязанностей) КАК УдалитьВидОтсутствия
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
	|ГДЕ
	|	ОплатаПоСреднемуЗаработку.УдалитьВидОтсутствия = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПустаяСсылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсправленияСостоянияСотрудников() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.ИсправленныйДокумент
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	Документ.БольничныйЛист КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сторно)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.БольничныйЛист.ПустаяСсылка)
	|	И ДанныеСостояний.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.ИсправленныйДокумент
	|ИЗ
	|	Документ.Командировка КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сторно)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.Командировка.ПустаяСсылка)
	|	И ДанныеСостояний.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.ИсправленныйДокумент
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сторно)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.ОплатаПоСреднемуЗаработку.ПустаяСсылка)
	|	И ДанныеСостояний.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.ИсправленныйДокумент
	|ИЗ
	|	Документ.Отпуск КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сторно)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.Отпуск.ПустаяСсылка)
	|	И ДанныеСостояний.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.ИсправленныйДокумент
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сторно)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.ОтпускБезСохраненияОплаты.ПустаяСсылка)
	|	И ДанныеСостояний.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.ИсправленныйДокумент
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сторно)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)
	|	И ДанныеСостояний.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.ИсправленныйДокумент
	|ИЗ
	|	Документ.ПрогулНеявка КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сторно)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.ПрогулНеявка.ПустаяСсылка)
	|	И ДанныеСостояний.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.ИсправленныйДокумент
	|ИЗ
	|	Документ.ПростойСотрудников КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПростойСотрудников.Начисления КАК ТаблицаСотрудников
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаСотрудников.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сторно)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.ПростойСотрудников.ПустаяСсылка)
	|	И ДанныеСостояний.Регистратор ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.ИсправленныйДокумент
	|ИЗ
	|	Документ.Увольнение КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Сторно)
	|ГДЕ
	|	ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка)
	|	И ДанныеСостояний.Регистратор ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСостояний.Сотрудник,
	|	Регистраторы.Ссылка КАК ДокументОснование,
	|	ИСТИНА КАК Сторно,
	|	ДанныеСостояний.Состояние,
	|	ДанныеСостояний.Начало,
	|	ДанныеСостояний.Окончание
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.ИсправленныйДокумент = ДанныеСостояний.Регистратор)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеСостояний.Сотрудник,
	|	ДанныеСостояний.ДокументОснование,
	|	ДанныеСостояний.Сторно,
	|	ДанныеСостояний.Состояние,
	|	ДанныеСостояний.Начало,
	|	ДанныеСостояний.Окончание
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.Ссылка = ДанныеСостояний.Регистратор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	Сотрудники = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.ДанныеСостоянийСотрудников.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			СтрокаНабора.Регистратор = Выборка.ДокументОснование;
			Сотрудники.Добавить(Выборка.Сотрудник);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	СостоянияСотрудников.ОбновитьСостоянияСотрудников(Сотрудники, Истина);
	
КонецПроцедуры

Процедура ИсправитьСостоянияВозвратныхДокументов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.ДокументОснование КАК ИсправленныйДокумент,
	|	ТаблицаДокумента.ДатаВозврата
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (НЕ ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						РегистрСведений.ДанныеСостоянийСотрудников КАК СторноСостояния
	|					ГДЕ
	|						СторноСостояния.Сторно = ИСТИНА
	|						И СторноСостояния.Регистратор = ТаблицаДокумента.Ссылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСостояний.Сотрудник,
	|	Регистраторы.Ссылка КАК ДокументОснование,
	|	ИСТИНА КАК Сторно,
	|	ДанныеСостояний.Состояние,
	|	ДанныеСостояний.Начало,
	|	ДанныеСостояний.Окончание
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.ИсправленныйДокумент = ДанныеСостояний.Регистратор)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСостояний.Сотрудник,
	|	Регистраторы.Ссылка,
	|	ЛОЖЬ,
	|	ДанныеСостояний.Состояние,
	|	ДанныеСостояний.Начало,
	|	Регистраторы.ДатаВозврата
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.ИсправленныйДокумент = ДанныеСостояний.Регистратор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	Сотрудники = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.ДанныеСостоянийСотрудников.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			СтрокаНабора.Регистратор = Выборка.ДокументОснование;
			Сотрудники.Добавить(Выборка.Сотрудник);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	СостоянияСотрудников.ОбновитьСостоянияСотрудников(Сотрудники, Истина);
	
КонецПроцедуры

Процедура УточнитьОкончанияВозвратныхСостояний() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.ДатаВозврата
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ТаблицаДокумента.Ссылка)
	|			И (ДанныеСостояний.Окончание = ТаблицаДокумента.ДатаВозврата)
	|			И (ДанныеСостояний.Сторно = ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСостояний.Сотрудник,
	|	ДанныеСостояний.ДокументОснование,
	|	ДанныеСостояний.Сторно,
	|	ДанныеСостояний.Состояние,
	|	ДанныеСостояний.Начало,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеСостояний.Сторно
	|			ТОГДА ДОБАВИТЬКДАТЕ(Регистраторы.ДатаВозврата, ДЕНЬ, -1)
	|		ИНАЧЕ ДанныеСостояний.Окончание
	|	КОНЕЦ КАК Окончание
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.Ссылка = ДанныеСостояний.Регистратор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеСостояний.ДокументОснование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	Сотрудники = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.ДанныеСостоянийСотрудников.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			СтрокаНабора.Регистратор = Выборка.ДокументОснование;
			Сотрудники.Добавить(Выборка.Сотрудник);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	СостоянияСотрудников.ОбновитьСостоянияСотрудников(Сотрудники, Истина);
	
КонецПроцедуры

Процедура ИсправитьНеверноРассчитанныеСостоянияСотрудников() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеСостояний.Сотрудник
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСотрудников КАК Состояния
	|		ПО (Состояния.Сотрудник = ДанныеСостояний.Сотрудник)
	|ГДЕ
	|	Состояния.Сотрудник ЕСТЬ NULL 
	|	И ДанныеСостояний.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Состояния.Сотрудник
	|ИЗ
	|	РегистрСведений.СостоянияСотрудников КАК Состояния
	|ГДЕ
	|	Состояния.Период = ДАТАВРЕМЯ(1, 1, 2)";
	
	Сотрудники = Новый Массив;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сотрудники.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	
	СостоянияСотрудников.ОбновитьСостоянияСотрудников(Сотрудники, Истина);
	
КонецПроцедуры

Процедура УдалитьЗаписиСНеЗаполненнымСостоянием() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеСостоянийСотрудников.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
	|ГДЕ
	|	ДанныеСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистраторы.Регистратор КАК Регистратор,
	|	ДанныеСостоянийСотрудников.Сотрудник,
	|	ДанныеСостоянийСотрудников.ДокументОснование,
	|	ДанныеСостоянийСотрудников.Сторно,
	|	ДанныеСостоянийСотрудников.Состояние,
	|	ДанныеСостоянийСотрудников.Начало,
	|	ДанныеСостоянийСотрудников.Окончание
	|ИЗ
	|	ВТРегистраторы КАК Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
	|		ПО (ДанныеСостоянийСотрудников.Регистратор = Регистраторы.Регистратор)
	|			И (ДанныеСостоянийСотрудников.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПустаяСсылка))
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоРегистраторам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ДанныеСостоянийСотрудников.СоздатьНаборЗаписей();
		Выборка = ВыборкаПоРегистраторам.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Состояние) Тогда
				СтрокаНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьДвиженияДокументаНачальнаяШтатнаяРасстановка() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СотрудникиДокумента.Ссылка КАК ДокументОснование,
	|	СотрудникиДокумента.Ссылка.Месяц КАК Начало,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Окончание,
	|	СотрудникиДокумента.Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа) КАК Состояние
	|ИЗ
	|	Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК СотрудникиДокумента
	|ГДЕ
	|	НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
	|				ГДЕ
	|					ДанныеСостоянийСотрудников.Регистратор = СотрудникиДокумента.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникиДокумента.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	Сотрудники = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.ДанныеСостоянийСотрудников.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			СтрокаНабора.Регистратор = Выборка.ДокументОснование;
			Сотрудники.Добавить(Выборка.Сотрудник);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	СостоянияСотрудников.ОбновитьСостоянияСотрудников(Сотрудники, Истина);
	
КонецПроцедуры

Процедура ОтменитьОкончаниеОтпускаПоУходуЗаРебенком() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеСостояний.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|		ПО (ОтпускПоУходуЗаРебенком.Ссылка = ДанныеСостояний.Регистратор)
	|			И (ДанныеСостояний.Окончание <> ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСостояний.Регистратор,
	|	ДанныеСостояний.Сотрудник,
	|	ДанныеСостояний.ДокументОснование,
	|	ДанныеСостояний.Сторно,
	|	ДанныеСостояний.Состояние,
	|	ДанныеСостояний.Начало,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Окончание
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|ГДЕ
	|	ДанныеСостояний.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеСостояний.Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	Сотрудники = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ДанныеСостоянийСотрудников.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			Сотрудники.Добавить(Выборка.Сотрудник);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	СостоянияСотрудников.ОбновитьСостоянияСотрудников(Сотрудники, Истина);
	
КонецПроцедуры

Процедура ИсправитьДокументыОтпускаПоУходуЗаРебенком() Экспорт
	
	// Удаляем возвратные движения документа Возврат из отпуска по уходу за ребенком.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратИзОтпуска.Ссылка
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ВозвратИзОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ВозвратИзОтпуска.Ссылка)
	|			И (ДанныеСостояний.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа))
	|ГДЕ
	|	ДанныеСостояний.Регистратор ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСостояний.Активность,
	|	ДанныеСостояний.Сотрудник,
	|	ДанныеСостояний.ДокументОснование,
	|	ДанныеСостояний.Сторно,
	|	ДанныеСостояний.Состояние,
	|	ДанныеСостояний.Начало,
	|	ДанныеСостояний.Окончание
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|ГДЕ
	|	ДанныеСостояний.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа)
	|	И ДанныеСостояний.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеСостояний.ДокументОснование";
	
	Сотрудники = Новый Массив;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.ДанныеСостоянийСотрудников.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		Сотрудники.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	
	СостоянияСотрудников.ОбновитьСостоянияСотрудников(Сотрудники, Истина);
	
	// Добавляем состояние изменения выхода на работу в период отпуска по уходу за ребенком.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзменениеУсловий.Ссылка
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком КАК ИзменениеУсловий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ПО (ДанныеСостояний.Регистратор = ИзменениеУсловий.Ссылка)
	|ГДЕ
	|	ИзменениеУсловий.Проведен = ИСТИНА
	|	И ИзменениеУсловий.ИзменитьПрименениеПлановыхНачислений
	|	И ДанныеСостояний.Регистратор ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзменениеПримененияНачислений.Ссылка КАК ДокументОснование,
	|	ИзменениеПримененияНачислений.РабочееМесто КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ИзменениеПримененияНачислений.Применение = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком)
	|	КОНЕЦ КАК Состояние,
	|	ИзменениеПримененияНачислений.Ссылка.ДатаИзменения КАК Начало
	|ИЗ
	|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ПрименениеПлановыхНачислений КАК ИзменениеПримененияНачислений
	|ГДЕ
	|	ИзменениеПримененияНачислений.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Ссылка
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументОснование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.ДанныеСостоянийСотрудников.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		Сотрудники.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	
	СостоянияСотрудников.ОбновитьСостоянияСотрудников(Сотрудники, Истина);
	
КонецПроцедуры

Процедура ИсправитьДвиженияОтпускаПоУходуЗаРебенкомСНеПрекращеннойОплатойТруда() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеСостояний.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|		ПО (ОтпускПоУходуЗаРебенком.Ссылка = ДанныеСостояний.Регистратор)
	|			И (ОтпускПоУходуЗаРебенком.НеНачислятьЗарплатуИНеВыплачиватьАвансВоВремяОтпуска = ЛОЖЬ)
	|			И (ДанныеСостояний.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСостояний.Регистратор,
	|	ДанныеСостояний.НомерСтроки,
	|	ДанныеСостояний.Активность,
	|	ДанныеСостояний.Сотрудник,
	|	ДанныеСостояний.ДокументОснование,
	|	ДанныеСостояний.Сторно,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком) КАК Состояние,
	|	ДанныеСостояний.Начало,
	|	ДанныеСостояний.Окончание
	|ИЗ
	|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО (Регистраторы.Регистратор = ДанныеСостояний.Регистратор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеСостояний.ДокументОснование";
	
	Сотрудники = Новый Массив;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.ДанныеСостоянийСотрудников.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		Сотрудники.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	
	СостоянияСотрудников.ОбновитьСостоянияСотрудников(Сотрудники, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьВидыВремениОплатыПоСреднемуЗаработку() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОплатаПоСреднемуЗаработку.Ссылка,
		|	ОплатаПоСреднемуЗаработку.УдалитьВидОтсутствия
		|ИЗ
		|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
		|ГДЕ
		|	ОплатаПоСреднемуЗаработку.УдалитьВидОтсутствия <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПустаяСсылка)
		|	И ОплатаПоСреднемуЗаработку.ВидВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.УдалитьВидОтсутствия = Перечисления.СостоянияСотрудника.ВынужденныйПрогул Тогда
			ДокументОбъект.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВынужденныйПрогул");
		ИначеЕсли ДокументОбъект.УдалитьВидОтсутствия = Перечисления.СостоянияСотрудника.ВыполнениеГосударственныхОбязанностей Тогда
			ДокументОбъект.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ГосударственныеОбязанности");
		КонецЕсли;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОкончаниеПредположительно() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСостояний.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходу
		|		ПО ДанныеСостояний.Регистратор = ОтпускПоУходу.Ссылка
		|			И (ДанныеСостояний.ОкончаниеПредположительно = ДАТАВРЕМЯ(1, 1, 1))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеСостояний.Регистратор,
		|	ДанныеСостояний.НомерСтроки,
		|	ДанныеСостояний.Активность,
		|	ДанныеСостояний.Сотрудник,
		|	ДанныеСостояний.ДокументОснование,
		|	ДанныеСостояний.Сторно,
		|	ДанныеСостояний.Состояние,
		|	ДанныеСостояний.Начало,
		|	ДанныеСостояний.Окончание,
		|	ДанныеСостояний.ВидВремени,
		|	ОтпускПоУходу.ДатаОкончания КАК ОкончаниеПредположительно
		|ИЗ
		|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостояний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходу
		|		ПО ДанныеСостояний.Регистратор = ОтпускПоУходу.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО (Регистраторы.Регистратор = ДанныеСостояний.Регистратор)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеСостояний.Регистратор");
		
	Сотрудники = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ДанныеСостоянийСотрудников.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		Сотрудники.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	
	СостоянияСотрудников.ОбновитьСостоянияСотрудников(Сотрудники, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
