////////////////////////////////////////////////////////////////////////////////
// ОУП: Процедуры подсистемы оперативного учета производства
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
 
// Подготавливает данные для печати маршрутной карты на продукцию
//
// Параметры:
//  ДанныеОПродукции	- Массив - содержит массив структур в которых данные КодСтроки,Заказ
//
// Возвращаемое значение:
//   Структура   - содержит параметры печати
//
Функция ПодготовитьДанныеДляПечатиМаршрутнойКартыНаПродукцию(ДанныеОПродукции) Экспорт

	МассивОбъектов = Новый Массив;
	
	ТаблицаПродукции = Новый ТаблицаЗначений;
	ТаблицаПродукции.Колонки.Добавить("Заказ",     Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаПродукции.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ТаблицаПродукции.Колонки.Добавить("Порядок",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Порядок = 1;
	Для каждого СтруктураДанных Из ДанныеОПродукции Цикл
		Если МассивОбъектов.Найти(СтруктураДанных.Заказ) = Неопределено Тогда
			МассивОбъектов.Добавить(СтруктураДанных.Заказ);
		КонецЕсли; 
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
		НоваяСтрока.Порядок = Порядок;
		Порядок = Порядок + 1;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ КАК Заказ,
	|	ТаблицаПродукции.КодСтроки КАК КодСтроки,
	|	ТаблицаПродукции.Порядок КАК Порядок
	|ПОМЕСТИТЬ ТаблицаПродукции
	|ИЗ
	|	&ТаблицаПродукции КАК ТаблицаПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ КАК Заказ,
	|	ТаблицаПродукции.КодСтроки КАК КодСтроки,
	|	ИСТИНА КАК Пометка,
	|	ЗаказПродукция.НомерСтроки КАК НомерСтроки,
	|	ЗаказПродукция.Номенклатура КАК Номенклатура,
	|	ЗаказПродукция.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЗаказПродукция.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	МИНИМУМ(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера) КАК ДатаЗапуска,
	|	МАКСИМУМ(ЗаказЭтапыГрафик.ОкончаниеЗавершающегоБуфера) КАК ДатаЗавершения
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|		ПО (ЗаказПродукция.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказПродукция.КодСтроки = ТаблицаПродукции.КодСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
	|		ПО (ЗаказЭтапыГрафик.Ссылка = ЗаказПродукция.Ссылка)
	|			И (ЗаказЭтапыГрафик.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукции.Заказ,
	|	ТаблицаПродукции.КодСтроки,
	|	ЗаказПродукция.НомерСтроки,
	|	ЗаказПродукция.Номенклатура,
	|	ЗаказПродукция.Характеристика,
	|	ТаблицаПродукции.Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукции.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ТаблицаПродукции.КодСтроки КАК КодСтроки,
	|	ИСТИНА КАК Пометка,
	|	ЗаказВыходныеИзделия.НомерСтроки,
	|	ЗаказВыходныеИзделия.Номенклатура,
	|	ЗаказВыходныеИзделия.Характеристика,
	|	ВЫБОР
	|		КОГДА ЗаказВыходныеИзделия.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|																				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|																				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	МИНИМУМ(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера) КАК ДатаЗапуска,
	|	МАКСИМУМ(ЗаказЭтапыГрафик.ОкончаниеЗавершающегоБуфера) КАК ДатаЗавершения
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|		ПО (ЗаказПродукция.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказПродукция.КодСтроки = ТаблицаПродукции.КодСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказВыходныеИзделия
	|		ПО (ЗаказВыходныеИзделия.Ссылка = ЗаказПродукция.Ссылка)
	|			И (ЗаказВыходныеИзделия.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|			И (ЗаказВыходныеИзделия.КлючСвязиПолуфабрикат <> &ПустойКлючСвязи)
	|			И (ЗаказВыходныеИзделия.ПроизводитсяВПроцессе)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказПродукция.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат <> &ПустойКлючСвязи)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
	|		ПО (ЗаказЭтапыГрафик.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ЗаказЭтапыГрафик.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукции.Заказ,
	|	ТаблицаПродукции.КодСтроки,
	|	ЗаказВыходныеИзделия.НомерСтроки,
	|	ЗаказВыходныеИзделия.Номенклатура,
	|	ЗаказВыходныеИзделия.Характеристика,
	|	ТаблицаПродукции.Заказ";
	
	Запрос.УстановитьПараметр("ТаблицаПродукции", ТаблицаПродукции);
	Запрос.УстановитьПараметр("ПустойКлючСвязи",  Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПродукция = Результат[1].Выбрать();
	ТаблицаПолуфабрикаты = Результат[2].Выгрузить();
	
	СписокПродукции = Новый ДеревоЗначений;
	СписокПродукции.Колонки.Добавить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СписокПродукции.Колонки.Добавить("Характеристика",             Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СписокПродукции.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	СписокПродукции.Колонки.Добавить("ДатаЗапуска",                Новый ОписаниеТипов("Дата"));
	СписокПродукции.Колонки.Добавить("ДатаЗавершения",             Новый ОписаниеТипов("Дата"));
	СписокПродукции.Колонки.Добавить("Пометка",                    Новый ОписаниеТипов("Булево"));
	СписокПродукции.Колонки.Добавить("Заказ",                      Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	СписокПродукции.Колонки.Добавить("НомерСтроки",                Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));

	ЕстьПолуфабрикаты = Ложь;
	ЭлементыПродукция = СписокПродукции.Строки;
	Пока ВыборкаПродукция.Следующий() Цикл
		СтрокаПродукция = ЭлементыПродукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПродукция, ВыборкаПродукция);
		СтруктураПоиска = Новый Структура("Заказ,КодСтроки", ВыборкаПродукция.Заказ, ВыборкаПродукция.КодСтроки);
  		СписокСтрок = ТаблицаПолуфабрикаты.НайтиСтроки(СтруктураПоиска);
		ЭлементыПолуфабрикат = СтрокаПродукция.Строки;
		Для каждого ВыборкаПолуфабрикат Из СписокСтрок Цикл
			СтрокаПолуфабрикат = ЭлементыПолуфабрикат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПолуфабрикат, ВыборкаПолуфабрикат);
			ЕстьПолуфабрикаты = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьПолуфабрикаты Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(СписокПродукции, Новый УникальныйИдентификатор);
		ДанныеДляПечати = Неопределено;
	Иначе
		АдресХранилища = "";
		ДанныеДляПечати = Новый Массив;
		Для каждого СтрокаПродукция Из СписокПродукции.Строки Цикл
			СтруктураДанных = Новый Структура("Заказ,НомерСтроки");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаПродукция);
			СтруктураДанных.Вставить("ЭтоПолуфабрикат", Ложь);
			ДанныеДляПечати.Добавить(СтруктураДанных);
		КонецЦикла;
	КонецЕсли;
	
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ДанныеДляПечати", ДанныеДляПечати);
	ПараметрыПечати.Вставить("АдресХранилища", АдресХранилища);
	ПараметрыПечати.Вставить("ЕстьПолуфабрикаты", ЕстьПолуфабрикаты);
	ПараметрыПечати.Вставить("МассивОбъектов", МассивОбъектов);
	
	Возврат ПараметрыПечати;
	
КонецФункции

// Формирует маршрутные листы
//
// Параметры:
//  ДанныеМаршрутныхЛистов	- Массив - данные для формирования маршрутных листов
//
// Возвращаемое значение:
//   Число   - Количество сформированных документов
//
Функция СформироватьМаршрутныеЛисты(ДанныеМаршрутныхЛистов) Экспорт

	КоличествоОбработанных = 0;
	Для каждого ДанныеЗаполнения Из ДанныеМаршрутныхЛистов Цикл
		
		НовыйДокумент = Документы.МаршрутныйЛистПроизводства.СоздатьДокумент();
		НовыйДокумент.Заполнить(ДанныеЗаполнения);
		
		НовыйДокумент.Дата = ТекущаяДатаСеанса();
		НовыйДокумент.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан;
		
		НовыйДокумент.ДополнительныеСвойства.Вставить("ТребуетсяПроверкаГрафика", Ложь);
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;

	Возврат КоличествоОбработанных;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует маршрутные листы по заказам на производство и возвращает результат
//
// Параметры:
//  СписокРаспоряжений	- Массив - заказы на производство для которого требуется сформировать МЛ
//
// Возвращаемое значение:
//   Структура   - содержит результат формирования документов
//
Функция СформироватьМаршрутныеЛистыПоЗаказам(СписокРаспоряжений) Экспорт

	ТекстПредупреждения = ПоЗаказамМожноСформироватьМаршрутныеЛисты(СписокРаспоряжений);
	
	Если ТекстПредупреждения <> Неопределено  Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", Ложь);
		Результат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		
		Возврат Результат;
		
	КонецЕсли;
	
	ДанныеМаршрутныхЛистов = ДанныеДляФормированияМаршрутныхЛистов(, СписокРаспоряжений);
	КоличествоОбработанных = СформироватьМаршрутныеЛисты(ДанныеМаршрутныхЛистов);
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("КоличествоОбработанных", КоличествоОбработанных);
	Результат.Вставить("КоличествоВсего", ДанныеМаршрутныхЛистов.Количество());
	
	Возврат Результат;

КонецФункции
 
// Возвращает данные, необходимые для формирования маршрутных листов
//
// Параметры:
//  Подразделение					- СправочникСсылка.СтруктураПредприятия - подразделение для которого требуется сформировать МЛ
//  СписокРаспоряжений				- Массив - заказы на производство для которого требуется сформировать МЛ
//  СписокЭтапов					- Массив - этапы графика
//	УправлениеМаршрутнымиЛистами 	- ПеречислениеСсылка.УправлениеМаршрутнымиЛистами - ограничение по методике управления МЛ
//
// Возвращаемое значение:
//   Массив   - содержит данные для формирования маршрутных листов
//
Функция ДанныеДляФормированияМаршрутныхЛистов(Подразделение = Неопределено, СписокРаспоряжений = Неопределено, СписокЭтапов = Неопределено, УправлениеМаршрутнымиЛистами = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеГрафикаПроизводства.Распоряжение,
	|	ДанныеГрафикаПроизводства.КодСтрокиПродукция КАК КодСтроки,
	|	ДанныеГрафикаПроизводства.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ДанныеГрафикаПроизводства.Подразделение КАК Подразделение,
	|	ДанныеГрафикаПроизводства.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
	|	ДанныеГрафикаПроизводства.Подразделение.УправлениеМаршрутнымиЛистами КАК УправлениеМаршрутнымиЛистами,
	|	ДанныеГрафикаПроизводства.Этап КАК Этап,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта <> ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
	|			ТОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.МаксимальноеКоличествоЕдиницПартийИзделия
	|		ИНАЧЕ ДанныеГрафикаПроизводства.Этап.МаксимальноеКоличествоЕдиницПартийИзделия
	|	КОНЕЦ КАК МаксимальноеКоличествоЕдиницПартийИзделия,
	|	ЭтапыПроизводства.НачалоЭтапа КАК НачалоРаботыКлючевогоРабочегоЦентра,
	|	ЭтапыПроизводства.Период КАК ОкончаниеРаботыКлючевогоРабочегоЦентра,
	|	ЭтапыПроизводства.НачалоПредварительногоБуфера КАК Начало,
	|	ЭтапыПроизводства.ОкончаниеЗавершающегоБуфера КАК Окончание,
	|	ДанныеГрафикаПроизводства.Запланировано КАК Запланировать
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства КАК ДанныеГрафикаПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ПО ДанныеГрафикаПроизводства.Распоряжение = ЭтапыПроизводства.Распоряжение
	|			И ДанныеГрафикаПроизводства.КодСтрокиПродукция = ЭтапыПроизводства.КодСтрокиПродукция
	|			И ДанныеГрафикаПроизводства.КодСтрокиЭтапыГрафик = ЭтапыПроизводства.КодСтрокиЭтапыГрафик
	|			И ДанныеГрафикаПроизводства.Этап = ЭтапыПроизводства.Этап
	|			И ДанныеГрафикаПроизводства.Подразделение = ЭтапыПроизводства.Подразделение
	|			И (ЭтапыПроизводства.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО (ЗаказНаПроизводствоПродукция.Ссылка = ДанныеГрафикаПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоПродукция.КодСтроки = ДанныеГрафикаПроизводства.КодСтрокиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|			ПО (ЗаказНаПроизводствоЭтапы.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка)
	|				И (ЗаказНаПроизводствоЭтапы.КлючСвязи = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы)
	|		ПО (ЗаказНаПроизводствоЭтапыГрафик.Ссылка = ДанныеГрафикаПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КодСтроки = ДанныеГрафикаПроизводства.КодСтрокиЭтапыГрафик)
	|ГДЕ
	|	(ДанныеГрафикаПроизводства.Подразделение = &Подразделение
	|			ИЛИ &Подразделение = НЕОПРЕДЕЛЕНО
	|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	И &УсловиеОтбораРаспоряжение
	|	И НЕ ДанныеГрафикаПроизводства.ПроизводствоНаСтороне
	|	И (&НеИспользоватьУправлениеМаршрутнымиЛистами
	|			ИЛИ ДанныеГрафикаПроизводства.Подразделение.УправлениеМаршрутнымиЛистами = &УправлениеМаршрутнымиЛистами)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начало,
	|	ДанныеГрафикаПроизводства.Распоряжение,
	|	КодСтрокиЭтапыГрафик,
	|	ЗаказНаПроизводствоПродукция.Спецификация,
	|	ЗаказНаПроизводствоЭтапы.НомерЭтапа");
	
	ТаблицыДляКонтроля = Документы.МаршрутныйЛистПроизводства.ИменаТаблицДляКонтроляБлокировкиРаспоряжений();
	ТаблицыДляКонтроля.Добавить("РегистрСведений.ГрафикЭтаповПроизводства");
	ТаблицыДляКонтроля.Добавить("РегистрНакопления.ЭтапыПроизводства");
	ТаблицыДляКонтроля.Добавить("Документ.ЗаказНаПроизводство");
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицыДляКонтроля);
	
	Если СписокРаспоряжений = Неопределено Тогда
		
		ЗаблокированныеРаспоряжения = Документы.ЗаказНаПроизводство.ВыбратьЗаблокированныеДляЧтенияИИзмененияСсылки(
			ТаблицыДляКонтроля);
		
		Если ЗаблокированныеРаспоряжения.Количество() = 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораРаспоряжение", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораРаспоряжение",
				"НЕ ДанныеГрафикаПроизводства.Распоряжение В (&ЗаблокированныеРаспоряжения)");
			Запрос.УстановитьПараметр("ЗаблокированныеРаспоряжения", ЗаблокированныеРаспоряжения);
		КонецЕсли;
		
	Иначе
		
		ЗаблокированныеРаспоряжения = Документы.ЗаказНаПроизводство.ВыбратьЗаблокированныеДляЧтенияИИзмененияСсылки(
			ТаблицыДляКонтроля, СписокРаспоряжений);
		
		ОтборРаспоряжения = Новый Массив;
		Для каждого Распоряжение Из СписокРаспоряжений Цикл
			Если ЗаблокированныеРаспоряжения.Найти(Распоряжение) = Неопределено Тогда
				ОтборРаспоряжения.Добавить(Распоряжение);
			КонецЕсли;
		КонецЦикла;
			
		Если ОтборРаспоряжения.Количество() = 0 Тогда
			Возврат Новый Массив;
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораРаспоряжение", "ДанныеГрафикаПроизводства.Распоряжение В (&ОтборРаспоряжения)");
			Запрос.УстановитьПараметр("ОтборРаспоряжения", ОтборРаспоряжения);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("УправлениеМаршрутнымиЛистами", УправлениеМаршрутнымиЛистами);
	Запрос.УстановитьПараметр("НеИспользоватьУправлениеМаршрутнымиЛистами", НЕ ЗначениеЗаполнено(УправлениеМаршрутнымиЛистами));
	
	ДанныеГрафика = Запрос.Выполнить().Выбрать();
	
	ДанныеМаршрутныхЛистов = Новый Массив;
	
	ИспользоватьОтборПоЭтапам = (СписокЭтапов <> Неопределено И СписокЭтапов.Количество() <> 0);
	
	Пока ДанныеГрафика.Следующий() Цикл
		
		Если ИспользоватьОтборПоЭтапам Тогда
			СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик", ДанныеГрафика.Распоряжение, ДанныеГрафика.КодСтрокиЭтапыГрафик);
			Если СписокЭтапов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли; 
		
		МаксимальноеКоличество = ДанныеГрафика.МаксимальноеКоличествоЕдиницПартийИзделия;
		
		Потребность = ДанныеГрафика.Запланировать;
		Пока Потребность > 0 Цикл
		
			ДанныеЗаполнения = Новый Структура("
				|Распоряжение,
				|Подразделение,
				|ИнтервалПланирования,
				|УправлениеМаршрутнымиЛистами,
				|КодСтроки,
				|КодСтрокиЭтапыГрафик,
				|Этап,
				|Начало,
				|Окончание,
				|НачалоРаботыКлючевогоРабочегоЦентра,
				|ОкончаниеРаботыКлючевогоРабочегоЦентра,
				|Запланировано");
			
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДанныеГрафика);
			
			ДанныеЗаполнения.Запланировано = ?(МаксимальноеКоличество = 0, Потребность, Мин(Потребность, МаксимальноеКоличество));
			
			Потребность = Потребность - ДанныеЗаполнения.Запланировано;
			
			ДанныеМаршрутныхЛистов.Добавить(ДанныеЗаполнения);
			
		КонецЦикла; 
	
	КонецЦикла;
	
	Возврат ДанныеМаршрутныхЛистов;

КонецФункции

Функция ДанныеДляФормированияМаршрутныхЛистовПоРасписанию(Подразделение, ВидРабочегоЦентра, ДатаИнтервала) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеГрафикаПроизводства.Распоряжение,
	|	ДанныеГрафикаПроизводства.КодСтрокиПродукция КАК КодСтроки,
	|	ДанныеГрафикаПроизводства.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ДанныеГрафикаПроизводства.Этап КАК Этап,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта <> ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
	|			ТОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.МаксимальноеКоличествоЕдиницПартийИзделия
	|		ИНАЧЕ ДанныеГрафикаПроизводства.Этап.МаксимальноеКоличествоЕдиницПартийИзделия
	|	КОНЕЦ КАК МаксимальноеКоличествоЕдиницПартийИзделия,
	|	ЭтапыПроизводства.НачалоЭтапа КАК НачалоРаботыКлючевогоРабочегоЦентра,
	|	ЭтапыПроизводства.Период КАК ОкончаниеРаботыКлючевогоРабочегоЦентра,
	|	ЭтапыПроизводства.НачалоПредварительногоБуфера КАК Начало,
	|	ЭтапыПроизводства.ОкончаниеЗавершающегоБуфера КАК Окончание,
	|	ДанныеГрафикаПроизводства.Запланировано КАК Запланировать
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства КАК ДанныеГрафикаПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ПО ДанныеГрафикаПроизводства.Распоряжение = ЭтапыПроизводства.Распоряжение
	|			И ДанныеГрафикаПроизводства.КодСтрокиПродукция = ЭтапыПроизводства.КодСтрокиПродукция
	|			И ДанныеГрафикаПроизводства.КодСтрокиЭтапыГрафик = ЭтапыПроизводства.КодСтрокиЭтапыГрафик
	|			И ДанныеГрафикаПроизводства.Этап = ЭтапыПроизводства.Этап
	|			И ДанныеГрафикаПроизводства.Подразделение = ЭтапыПроизводства.Подразделение
	|			И (ЭтапыПроизводства.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО (ЗаказНаПроизводствоПродукция.Ссылка = ДанныеГрафикаПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоПродукция.КодСтроки = ДанныеГрафикаПроизводства.КодСтрокиПродукция)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|			ПО (ЗаказНаПроизводствоЭтапы.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка)
	|				И (ЗаказНаПроизводствоЭтапы.КлючСвязи = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы)
	|				И (НЕ ЗаказНаПроизводствоЭтапы.ПроизводствоНаСтороне)
	|		ПО (ЗаказНаПроизводствоЭтапыГрафик.Ссылка = ДанныеГрафикаПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КодСтроки = ДанныеГрафикаПроизводства.КодСтрокиЭтапыГрафик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВидыРабочихЦентров КАК ЗаказНаПроизводствоВидыРабочихЦентров
	|		ПО (ЗаказНаПроизводствоВидыРабочихЦентров.Ссылка = ЗаказНаПроизводствоЭтапы.Ссылка)
	|			И (ЗаказНаПроизводствоВидыРабочихЦентров.КлючСвязиЭтапы = ЗаказНаПроизводствоЭтапы.КлючСвязи)
	|			И (ЗаказНаПроизводствоВидыРабочихЦентров.ВидРабочегоЦентра = &ВидРабочегоЦентра)
	|ГДЕ
	|	ДанныеГрафикаПроизводства.Подразделение = &Подразделение
	|	И ЭтапыПроизводства.НачалоЭтапа = &ДатаИнтервала
	|	И НЕ ЗаказНаПроизводствоВидыРабочихЦентров.Ссылка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начало,
	|	ДанныеГрафикаПроизводства.Распоряжение,
	|	КодСтрокиЭтапыГрафик,
	|	ЗаказНаПроизводствоПродукция.Спецификация,
	|	ЗаказНаПроизводствоЭтапы.НомерЭтапа";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", ВидРабочегоЦентра);
	Запрос.УстановитьПараметр("ДатаИнтервала", ДатаИнтервала);
	
	Результат = Запрос.Выполнить();
	ДанныеГрафика = Результат.Выбрать();
	
	ДанныеМаршрутныхЛистов = ЗаполнитьДанныеМаршрутныхЛистов(ДанныеГрафика);
	
	Возврат ДанныеМаршрутныхЛистов;

КонецФункции

Функция ЗаполнитьДанныеМаршрутныхЛистов(ДанныеГрафика)

	ДанныеМаршрутныхЛистов = Новый Массив;
	Пока ДанныеГрафика.Следующий() Цикл
	
		МаксимальноеКоличество = ДанныеГрафика.МаксимальноеКоличествоЕдиницПартийИзделия;
		
		Потребность = ДанныеГрафика.Запланировать;
		Пока Потребность > 0 Цикл
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Распоряжение");
			ДанныеЗаполнения.Вставить("КодСтроки");
			ДанныеЗаполнения.Вставить("КодСтрокиЭтапыГрафик");
			ДанныеЗаполнения.Вставить("Этап");
			ДанныеЗаполнения.Вставить("Начало");
			ДанныеЗаполнения.Вставить("Окончание");
			ДанныеЗаполнения.Вставить("НачалоРаботыКлючевогоРабочегоЦентра");
			ДанныеЗаполнения.Вставить("ОкончаниеРаботыКлючевогоРабочегоЦентра");
			ДанныеЗаполнения.Вставить("Запланировано");
			
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДанныеГрафика);
			
			ДанныеЗаполнения.Запланировано = ?(МаксимальноеКоличество = 0, Потребность, Мин(Потребность, МаксимальноеКоличество));
			
			Потребность = Потребность - ДанныеЗаполнения.Запланировано;
			
			ДанныеМаршрутныхЛистов.Добавить(ДанныеЗаполнения);
			
		КонецЦикла; 
	
	КонецЦикла;

	Возврат ДанныеМаршрутныхЛистов;
	
КонецФункции

Функция ПараметрыОформленияВыработкиСотрудников(МассивРаспоряжений, ТекстПредупреждения) Экспорт
	
	ТекстПредупреждения = Неопределено;
	
	СтруктураОтбора = Новый Структура("МассивРаспоряжений", МассивРаспоряжений);
	ТаблицаТрудозатратыКОформлению = Документы.ВыработкаСотрудников.ТрудозатратыКОформлению(СтруктураОтбора);
	
	Если ТаблицаТрудозатратыКОформлению.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='По выбранным распоряжениям выработка сотрудников уже оформлена или оформлление не требуется.';uk='За вибраними розпорядженнями виробіток співробітників вже оформлений або оформлление не потрібно.'");
		Возврат Неопределено;
	КонецЕсли;
	
	ТекОрганизация = Неопределено;
	ТекПодразделение = Неопределено;
	
	Отказ = Ложь;
	
	Для Каждого ДанныеСтроки из ТаблицаТрудозатратыКОформлению Цикл
		
		Если ТекОрганизация = Неопределено ИЛИ ТекПодразделение = Неопределено Тогда
			ТекОрганизация = ДанныеСтроки.Организация;
			ТекПодразделение = ДанныеСтроки.Подразделение;
		КонецЕсли;
		
		Если ТекОрганизация <> ДанныеСтроки.Организация Тогда
			ТекстПредупреждения = НСтр("ru='Документ может быть сформирован только по одной организации.';uk='Документ може бути сформований лише по одній організації.'");
			Отказ = Истина;
		ИначеЕсли ТекПодразделение <> ДанныеСтроки.Подразделение Тогда
			ТекстПредупреждения = НСтр("ru='Документ может быть сформирован только по одному подразделению.';uk='Документ може бути сформований тільки по одному підрозділу.'");
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОформления = Новый Структура;
	ПараметрыОформления.Вставить("Организация", ТекОрганизация);
	ПараметрыОформления.Вставить("Подразделение", ТекПодразделение);
	
	Возврат ПараметрыОформления;
	
КонецФункции

Функция ПоЗаказамМожноСформироватьМаршрутныеЛисты(СписокРаспоряжений)

	РеквизитыЗаказов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокРаспоряжений, "Статус,Проведен,СтатусГрафикаПроизводства");
	Для каждого ЗначенияРеквизитов Из РеквизитыЗаказов Цикл
		ДанныеЗаказа = ЗначенияРеквизитов.Значение;
		Если ДанныеЗаказа.Статус <> Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству 
			ИЛИ НЕ ДанныеЗаказа.Проведен Тогда
			
			Если СписокРаспоряжений.Количество() = 1 Тогда
				ТекстПредупреждения = НСтр("ru='Заказ должен быть проведен со статусом ""К производству"".';uk='Замовлення повинен бути проведений зі статусом ""До виробництва"".'");
			Иначе
				ТекстПредупреждения = НСтр("ru='Заказы должны быть проведены со статусом ""К производству"".';uk='Замовлення повинні бути проведені зі статусом ""До виробництва"".'");
			КонецЕсли; 
			ТекстПредупреждения = НСтр("ru='Формирование маршрутных листов недоступно.';uk='Формування маршрутних листів недоступно.'") + Символы.ПС + ТекстПредупреждения;
			
			Возврат ТекстПредупреждения;
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого ЗначенияРеквизитов Из РеквизитыЗаказов Цикл
		ДанныеЗаказа = ЗначенияРеквизитов.Значение;
		Если ДанныеЗаказа.СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать Тогда
			Если СписокРаспоряжений.Количество() = 1 Тогда
				ТекстПредупреждения = НСтр("ru='Требуется выполнить планирование заказа.';uk='Потрібно виконати планування замовлення.'");
			Иначе
				ТекстПредупреждения = НСтр("ru='Требуется выполнить планирование заказов.';uk='Потрібно виконати планування замовлень.'");
			КонецЕсли; 
			ТекстПредупреждения = НСтр("ru='Формирование маршрутных листов недоступно.';uk='Формування маршрутних листів недоступно.'") + Символы.ПС + ТекстПредупреждения;
			
			Возврат ТекстПредупреждения;
		КонецЕсли; 
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводстваОбороты.Распоряжение КАК Распоряжение,
	|	СУММА(ЭтапыПроизводстваОбороты.ЗапланированоЗаказомОборот) КАК ЗапланированоЗаказом,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗаказНаПроизводствоЭтапы.ПроизводствоНаСтороне, ЛОЖЬ) <> ИСТИНА
	|				ТОГДА ЭтапыПроизводстваОбороты.ЗапланированоЗаказомОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗапланированоКПроизводству,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗаказНаПроизводствоЭтапы.ПроизводствоНаСтороне, ЛОЖЬ) <> ИСТИНА
	|				ТОГДА ЭтапыПроизводстваОбороты.ЗапланированоПроизводствомОборот 
	|						+ ЭтапыПроизводстваОбороты.КВыполнениюОборот 
	|						+ ЭтапыПроизводстваОбороты.ВыполненоОборот 
	|						+ ЭтапыПроизводстваОбороты.БракОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗапланированоВПроизводстве
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Обороты(, , , Распоряжение В (&СписокРаспоряжений)) КАК ЭтапыПроизводстваОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|			ПО (ЗаказНаПроизводствоЭтапы.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка)
	|				И (ЗаказНаПроизводствоЭтапы.КлючСвязи = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы)
	|		ПО (ЗаказНаПроизводствоЭтапыГрафик.Ссылка = ЭтапыПроизводстваОбороты.Распоряжение)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КодСтроки = ЭтапыПроизводстваОбороты.КодСтрокиЭтапыГрафик)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПроизводстваОбороты.Распоряжение";
	
	Запрос.УстановитьПараметр("СписокРаспоряжений", СписокРаспоряжений);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗапланированоЗаказом = Выборка.ЗапланированоЗаказом;
		ЗапланированоВПроизводстве = Выборка.ЗапланированоВПроизводстве;
		ЗапланированоКПроизводству = Выборка.ЗапланированоКПроизводству;
	Иначе
		ЗапланированоЗаказом = 0;
		ЗапланированоВПроизводстве = 0;
		ЗапланированоКПроизводству = 0;
	КонецЕсли; 
	
	Если ЗапланированоЗаказом = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Формировать маршрутные листы не требуется.
                                            |Не запланированы этапы производства.'
                                            |;uk='Формувати маршрутні листи не потрібно.
                                            |Не заплановані етапи виробництва.'");
		
		Возврат ТекстПредупреждения;
		
	ИначеЕсли ЗапланированоКПроизводству = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='Формировать маршрутные листы не требуется.
                                            |Нет этапов собственного производства.'
                                            |;uk='Формувати маршрутні листи не потрібно.
                                            |Немає етапів власного виробництва.'");
		
		Возврат ТекстПредупреждения;
		
	ИначеЕсли ЗапланированоКПроизводству = ЗапланированоВПроизводстве Тогда
		
		ТекстПредупреждения = НСтр("ru='Формировать маршрутные листы не требуется.
                                            |Все маршрутные листы уже сформированы.'
                                            |;uk='Формувати маршрутні листи не потрібно.
                                            |Всі маршрутні листи вже сформовані.'");
		Возврат ТекстПредупреждения;
		
	КонецЕсли; 
	
	Возврат Неопределено;

КонецФункции

#КонецОбласти
