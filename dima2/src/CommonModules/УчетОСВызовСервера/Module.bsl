////////////////////////////////////////////////////////////////////////////////
// Модуль работы с объектами основных средств
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет проверку ошибок в заполнении способов отражения расходов по амортизации
//
// Параметры:
// 		ЭтотОбъект - ДокументОбъект.АмортизацияОС - Объект документа амортизации
//
Процедура ПроверитьСпособыОтраженияРасходовНаПрочиеАктивы(ЭтотОбъект, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", КонецМесяца(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияОСОрганизацийСрезПоследних.Организация КАК Организация,
	|	СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство КАК ОбъектУчета
	|ПОМЕСТИТЬ втАктуальныеОбъекты
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(&Дата, Организация В (&Организация)) КАК СостоянияОСОрганизацийСрезПоследних
	|ГДЕ
	|	СостоянияОСОрганизацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.Организация КАК Организация,
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОбъектУчета
	|ПОМЕСТИТЬ втОбъектыКНачислению
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			(Организация, ОсновноеСредство) В
	|				(ВЫБРАТЬ
	|					Т.Организация,
	|					Т.ОбъектУчета
	|				ИЗ
	|					втАктуальныеОбъекты КАК Т)) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
	|ГДЕ
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.Организация,
	|	НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
	|			&Дата,
	|			(Организация, ОсновноеСредство) В
	|				(ВЫБРАТЬ
	|					Т.Организация,
	|					Т.ОбъектУчета
	|				ИЗ
	|					втАктуальныеОбъекты КАК Т)) КАК НачислениеАмортизацииОСНалоговыйУчетСрезПоследних
	|ГДЕ
	|	НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.НачислятьАмортизацию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОбъектУчета,
	|	ЕСТЬNULL(ИзменениеПараметровОСОтражениеАмортизационныхРасходов.СтатьяРасходов, СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетБухгалтерскийУчетСрезПоследних.СтатьяРасходов) КАК СтатьяРасходов
	|ПОМЕСТИТЬ втСтатьиАмортизации
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			(Организация, ОсновноеСредство) В
	|				(ВЫБРАТЬ
	|					Т.Организация,
	|					Т.ОбъектУчета
	|				ИЗ
	|					втОбъектыКНачислению КАК Т)) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеПараметровОС.ОтражениеАмортизационныхРасходов КАК ИзменениеПараметровОСОтражениеАмортизационныхРасходов
	|		ПО СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов = ИзменениеПараметровОСОтражениеАмортизационныхРасходов.Ссылка
	|			И (СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходовЗаданДокументом)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК СтатьяРасходов,
	|	втСтатьиАмортизации.ОбъектУчета КАК ОбъектУчета
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтатьиАмортизации КАК втСтатьиАмортизации
	|		ПО (втСтатьиАмортизации.СтатьяРасходов = СтатьиРасходов.Ссылка)
	|ГДЕ
	|	СтатьиРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)";
	#КонецОбласти
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СообщениеОбОшибке =
		НСтр("ru='В способе отражения расходов по амортизации для ""%1"" использована статья ""%2"" с не поддерживаемым вариантом распределения расходов ""На прочие активы""
        |Измените способ отражения расходов для данного актива с помощью документа ""Изменение параметров ОС""'
        |;uk='У способі відображення витрат по амортизації для ""%1"" використана стаття ""%2"" з варіантом розподілу витрат ""На інші активи"", що не підтримується.
        |Змінить спосіб відображення витрат для даного активу з допомогою документа ""Зміна параметрів ОС""
        |'");
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			СообщениеОбОшибке,
			Выборка.ОбъектУчета,
			Выборка.СтатьяРасходов);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СообщениеОбОшибке,,,,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает временную таблицу накопленных стоимостей для указанного менеджера в разрезе основных средств и документов
// 		Переданный менеджер временных таблиц должен содержать таблицу "втОбъектыДокументов",
// 		содержащую поля "Ссылка", "ОсновноеСредство", "Дата", "Организация"
//
// Параметры:
// 		МенеджерВТ - МенеджерВременныхТаблиц - Менеджер временных таблиц исходного запроса.
//
Процедура СоздатьВременнуюТаблицуСостоянияОС(МенеджерВТ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втОбъектыДокументов.Организация,
	|	втОбъектыДокументов.ОсновноеСредство,
	|	МАКСИМУМ(СчетаУчета.Период) КАК Период,
	|	втОбъектыДокументов.Ссылка
	|ПОМЕСТИТЬ втСчетаУчетаПериод
	|ИЗ
	|	втОбъектыДокументов КАК втОбъектыДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаУчета
	|		ПО втОбъектыДокументов.ОсновноеСредство = СчетаУчета.ОсновноеСредство
	|			И втОбъектыДокументов.Организация = СчетаУчета.Организация
	|			И втОбъектыДокументов.Ссылка <> СчетаУчета.Регистратор
	|			И втОбъектыДокументов.Дата > СчетаУчета.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыДокументов.ОсновноеСредство,
	|	втОбъектыДокументов.Организация,
	|	втОбъектыДокументов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСчетаУчетаПериод.Ссылка,
	|	втСчетаУчетаПериод.ОсновноеСредство,
	|	ЕСТЬNULL(СчетаУчета.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
	|	ЕСТЬNULL(СчетаУчета.СчетНачисленияАмортизации, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетАмортизации
	|ПОМЕСТИТЬ втСчетаУчета
	|ИЗ
	|	втСчетаУчетаПериод КАК втСчетаУчетаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаУчета
	|		ПО втСчетаУчетаПериод.ОсновноеСредство = СчетаУчета.ОсновноеСредство
	|			И втСчетаУчетаПериод.Организация = СчетаУчета.Организация
	|			И втСчетаУчетаПериод.Период = СчетаУчета.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиОборотыСчетУчета.Период КАК Период,
	|	ОстаткиОборотыСчетУчета.Регистратор КАК Регистратор,
	|	ОстаткиОборотыСчетУчета.Организация КАК Организация,
	|	ОстаткиОборотыСчетУчета.Субконто1 КАК ОсновноеСредство,
	|	ОстаткиОборотыСчетУчета.Счет КАК Счет,
	|	ОстаткиОборотыСчетУчета.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	|	ОстаткиОборотыСчетУчета.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
	|	ОстаткиОборотыСчетУчета.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	|	ОстаткиОборотыСчетУчета.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт
	|ПОМЕСТИТЬ втСтоимостиЗаписи
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			,
	|			,
	|			Регистратор,
	|			Движения,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Т.СчетУчета
	|				ИЗ
	|					втСчетаУчета КАК Т
	|			
	|				ОБЪЕДИНИТЬ ВСЕ
	|			
	|				ВЫБРАТЬ
	|					Т.СчетАмортизации
	|				ИЗ
	|					втСчетаУчета КАК Т),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			(Организация, Субконто1) В
	|				(ВЫБРАТЬ
	|					Т.Организация,
	|					Т.ОсновноеСредство
	|				ИЗ
	|					втОбъектыДокументов КАК Т)) КАК ОстаткиОборотыСчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыДокументов.Организация КАК Организация,
	|	втОбъектыДокументов.ОсновноеСредство КАК ОсновноеСредство,
	|	втСтоимостиЗаписи.Счет КАК Счет,
	|	МАКСИМУМ(втСтоимостиЗаписи.Период) КАК Период,
	|	втОбъектыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втСтоимостиПериод
	|ИЗ
	|	втОбъектыДокументов КАК втОбъектыДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтоимостиЗаписи КАК втСтоимостиЗаписи
	|		ПО втОбъектыДокументов.ОсновноеСредство = втСтоимостиЗаписи.ОсновноеСредство
	|			И втОбъектыДокументов.Организация = втСтоимостиЗаписи.Организация
	|			И втОбъектыДокументов.Дата >= втСтоимостиЗаписи.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыДокументов.ОсновноеСредство,
	|	втОбъектыДокументов.Организация,
	|	втСтоимостиЗаписи.Счет,
	|	втОбъектыДокументов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСтоимостиПериод.Ссылка,
	|	втСтоимостиЗаписи.ОсновноеСредство,
	|	втСтоимостиЗаписи.Счет КАК Счет,
	|	ВЫБОР
	|		КОГДА втСтоимостиПериод.Ссылка = втСтоимостиЗаписи.Регистратор
	|			ТОГДА втСтоимостиЗаписи.СуммаНачальныйОстатокДт
	|		ИНАЧЕ втСтоимостиЗаписи.СуммаКонечныйОстатокДт
	|	КОНЕЦ КАК СуммаОстатокДт,
	|	ВЫБОР
	|		КОГДА втСтоимостиПериод.Ссылка = втСтоимостиЗаписи.Регистратор
	|			ТОГДА втСтоимостиЗаписи.СуммаНачальныйОстатокКт
	|		ИНАЧЕ втСтоимостиЗаписи.СуммаКонечныйОстатокКт
	|	КОНЕЦ КАК СуммаОстатокКт
	|ПОМЕСТИТЬ втСтоимости
	|ИЗ
	|	втСтоимостиПериод КАК втСтоимостиПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтоимостиЗаписи КАК втСтоимостиЗаписи
	|		ПО втСтоимостиПериод.ОсновноеСредство = втСтоимостиЗаписи.ОсновноеСредство
	|			И втСтоимостиПериод.Организация = втСтоимостиЗаписи.Организация
	|			И втСтоимостиПериод.Счет = втСтоимостиЗаписи.Счет
	|			И втСтоимостиПериод.Период = втСтоимостиЗаписи.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыДокументов.Организация,
	|	втОбъектыДокументов.ОсновноеСредство,
	|	МАКСИМУМ(ПервоначальныеСведения.Период) КАК Период,
	|	втОбъектыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втПервоначальныеСведенияПериод
	|ИЗ
	|	втОбъектыДокументов КАК втОбъектыДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведения
	|		ПО втОбъектыДокументов.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
	|			И втОбъектыДокументов.Организация = ПервоначальныеСведения.Организация
	|			И втОбъектыДокументов.Ссылка <> ПервоначальныеСведения.Регистратор
	|			И втОбъектыДокументов.Дата > ПервоначальныеСведения.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыДокументов.ОсновноеСредство,
	|	втОбъектыДокументов.Организация,
	|	втОбъектыДокументов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПервоначальныеСведенияПериод.Ссылка КАК Ссылка,
	|	ПервоначальныеСведения.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведения.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведения.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведения.Период КАК ДатаПринятияКУчету
	|ПОМЕСТИТЬ втПервоначальныеСведения
	|ИЗ
	|	втПервоначальныеСведенияПериод КАК втПервоначальныеСведенияПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведения
	|		ПО втПервоначальныеСведенияПериод.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
	|			И втПервоначальныеСведенияПериод.Организация = ПервоначальныеСведения.Организация
	|			И втПервоначальныеСведенияПериод.Период = ПервоначальныеСведения.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыДокументов.Организация,
	|	втОбъектыДокументов.ОсновноеСредство,
	|	МАКСИМУМ(МестонахождениеБУ.Период) КАК Период,
	|	втОбъектыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втМестонахождениеБУПериод
	|ИЗ
	|	втОбъектыДокументов КАК втОбъектыДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеБУ
	|		ПО втОбъектыДокументов.ОсновноеСредство = МестонахождениеБУ.ОсновноеСредство
	|			И втОбъектыДокументов.Организация = МестонахождениеБУ.Организация
	|			И втОбъектыДокументов.Ссылка <> МестонахождениеБУ.Регистратор
	|			И втОбъектыДокументов.Дата > МестонахождениеБУ.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыДокументов.ОсновноеСредство,
	|	втОбъектыДокументов.Организация,
	|	втОбъектыДокументов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМестонахождениеБУПериод.Ссылка КАК Ссылка,
	|	МестонахождениеБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеБУ.МОЛ КАК МОЛ,
	|	МестонахождениеБУ.Местонахождение КАК Местонахождение
	|ПОМЕСТИТЬ втМестонахождениеБУ
	|ИЗ
	|	втМестонахождениеБУПериод КАК втМестонахождениеБУПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеБУ
	|		ПО втМестонахождениеБУПериод.ОсновноеСредство = МестонахождениеБУ.ОсновноеСредство
	|			И втМестонахождениеБУПериод.Организация = МестонахождениеБУ.Организация
	|			И втМестонахождениеБУПериод.Период = МестонахождениеБУ.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыДокументов.Организация,
	|	втОбъектыДокументов.ОсновноеСредство,
	|	МАКСИМУМ(ПараметрыАмортизации.Период) КАК Период,
	|	втОбъектыДокументов.Ссылка
	|ПОМЕСТИТЬ втПараметрыАмортизацииПериод
	|ИЗ
	|	втОбъектыДокументов КАК втОбъектыДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет КАК ПараметрыАмортизации
	|		ПО втОбъектыДокументов.ОсновноеСредство = ПараметрыАмортизации.ОсновноеСредство
	|			И втОбъектыДокументов.Организация = ПараметрыАмортизации.Организация
	|			И втОбъектыДокументов.Ссылка <> ПараметрыАмортизации.Регистратор
	|			И втОбъектыДокументов.Дата > ПараметрыАмортизации.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыДокументов.ОсновноеСредство,
	|	втОбъектыДокументов.Организация,
	|	втОбъектыДокументов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПараметрыАмортизацииПериод.Ссылка КАК Ссылка,
	|	ПараметрыАмортизации.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизации.СрокПолезногоИспользования КАК СрокПолезногоИспользования
	|ПОМЕСТИТЬ втПараметрыАмортизации
	|ИЗ
	|	втПараметрыАмортизацииПериод КАК втПараметрыАмортизацииПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет КАК ПараметрыАмортизации
	|		ПО втПараметрыАмортизацииПериод.ОсновноеСредство = ПараметрыАмортизации.ОсновноеСредство
	|			И втПараметрыАмортизацииПериод.Организация = ПараметрыАмортизации.Организация
	|			И втПараметрыАмортизацииПериод.Период = ПараметрыАмортизации.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыДокументов.Ссылка КАК Ссылка,
	|	втОбъектыДокументов.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(втПервоначальныеСведения.ИнвентарныйНомер, """") КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(втПервоначальныеСведения.СпособНачисленияАмортизации, """") КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(втПервоначальныеСведения.ДатаПринятияКУчету, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПринятияКУчету,
	|	ЕСТЬNULL(втМестонахождениеБУ.МОЛ, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК МОЛ,
	|	ЕСТЬNULL(втМестонахождениеБУ.Местонахождение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Местонахождение,
	|	ЕСТЬNULL(втСчетаУчета.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
	|	ЕСТЬNULL(втСчетаУчета.СчетАмортизации, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетАмортизации,
	|	ЕСТЬNULL(втПараметрыАмортизации.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	ЕСТЬNULL(втНакопленнаяСтоимость.СуммаОстатокДт, 0) КАК НакопленнаяСтоимость,
	|	ЕСТЬNULL(втНакопленнаяАмортизация.СуммаОстатокКт, 0) КАК НакопленнаяАмортизация,
	|	ЕСТЬNULL(втНакопленнаяСтоимость.СуммаОстатокДт, 0) - ЕСТЬNULL(втНакопленнаяАмортизация.СуммаОстатокКт, 0) КАК ОстаточнаяСтоимость
	|ПОМЕСТИТЬ втСведенияОбъектовДокументов
	|ИЗ
	|	втОбъектыДокументов КАК втОбъектыДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПервоначальныеСведения КАК втПервоначальныеСведения
	|		ПО втОбъектыДокументов.Ссылка = втПервоначальныеСведения.Ссылка
	|			И втОбъектыДокументов.ОсновноеСредство = втПервоначальныеСведения.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМестонахождениеБУ КАК втМестонахождениеБУ
	|		ПО втОбъектыДокументов.Ссылка = втМестонахождениеБУ.Ссылка
	|			И втОбъектыДокументов.ОсновноеСредство = втМестонахождениеБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПараметрыАмортизации КАК втПараметрыАмортизации
	|		ПО втОбъектыДокументов.Ссылка = втПараметрыАмортизации.Ссылка
	|			И втОбъектыДокументов.ОсновноеСредство = втПараметрыАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаУчета КАК втСчетаУчета
	|		ПО втОбъектыДокументов.Ссылка = втСчетаУчета.Ссылка
	|			И втОбъектыДокументов.ОсновноеСредство = втСчетаУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСтоимости КАК втНакопленнаяСтоимость
	|		ПО (втСчетаУчета.Ссылка = втНакопленнаяСтоимость.Ссылка)
	|			И (втСчетаУчета.ОсновноеСредство = втНакопленнаяСтоимость.ОсновноеСредство)
	|			И (втСчетаУчета.СчетУчета = втНакопленнаяСтоимость.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСтоимости КАК втНакопленнаяАмортизация
	|		ПО (втСчетаУчета.Ссылка = втНакопленнаяАмортизация.Ссылка)
	|			И (втСчетаУчета.ОсновноеСредство = втНакопленнаяАмортизация.ОсновноеСредство)
	|			И (втСчетаУчета.СчетАмортизации = втНакопленнаяАмортизация.Счет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияОбъектовДокументов.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСведенияОбъектовДокументов.СпособНачисленияАмортизации) КАК КоличествоРазличныхСпособНачисленияАмортизации,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСведенияОбъектовДокументов.МОЛ) КАК КоличествоРазличныхМОЛ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСведенияОбъектовДокументов.Местонахождение) КАК КоличествоРазличныхМестонахождение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСведенияОбъектовДокументов.СчетУчета) КАК КоличествоРазличныхСчетУчета,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСведенияОбъектовДокументов.СчетАмортизации) КАК КоличествоРазличныхСчетАмортизации,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСведенияОбъектовДокументов.СрокПолезногоИспользования) КАК КоличествоРазличныхСрокПолезногоИспользования,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСведенияОбъектовДокументов.НакопленнаяСтоимость) КАК КоличествоРазличныхНакопленнаяСтоимость,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСведенияОбъектовДокументов.НакопленнаяАмортизация) КАК КоличествоРазличныхНакопленнаяАмортизация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСведенияОбъектовДокументов.ОстаточнаяСтоимость) КАК КоличествоРазличныхОстаточнаяСтоимость,
	|	МАКСИМУМ(втСведенияОбъектовДокументов.СпособНачисленияАмортизации) КАК СпособНачисленияАмортизации,
	|	МАКСИМУМ(втСведенияОбъектовДокументов.МОЛ) КАК МОЛ,
	|	МАКСИМУМ(втСведенияОбъектовДокументов.Местонахождение) КАК Местонахождение,
	|	МАКСИМУМ(втСведенияОбъектовДокументов.СчетУчета) КАК СчетУчета,
	|	МАКСИМУМ(втСведенияОбъектовДокументов.СчетАмортизации) КАК СчетАмортизации,
	|	МАКСИМУМ(втСведенияОбъектовДокументов.СрокПолезногоИспользования) КАК СрокПолезногоИспользования,
	|	МАКСИМУМ(втСведенияОбъектовДокументов.НакопленнаяСтоимость) КАК НакопленнаяСтоимость,
	|	МАКСИМУМ(втСведенияОбъектовДокументов.НакопленнаяАмортизация) КАК НакопленнаяАмортизация,
	|	МАКСИМУМ(втСведенияОбъектовДокументов.ОстаточнаяСтоимость) КАК ОстаточнаяСтоимость
	|ПОМЕСТИТЬ втОбщиеСведенияОбъектовДокументов
	|ИЗ
	|	втСведенияОбъектовДокументов КАК втСведенияОбъектовДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	втСведенияОбъектовДокументов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСтоимости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСтоимостиЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСтоимостиПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСчетаУчетаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСчетаУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПервоначальныеСведения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПервоначальныеСведенияПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втМестонахождениеБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втМестонахождениеБУПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПараметрыАмортизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПараметрыАмортизацииПериод";
	#КонецОбласти
	
	Запрос.Выполнить();
	
КонецПроцедуры


// Возвращает текст запроса временных таблиц для отражения амортизации в регламентированном учете
//
// Параметры:
// 		ИмяДокумента - Строка - Строка имени метаданных
//
// Возвращаемое значение:
// 		Строка - Текст запроса
//
Функция ТекстЗапросаВТОтраженияВРеглУчетеНачисленнойАмортизацииУКР(ИмяДокумента) Экспорт
	
	ТекстВТ = ТекстЗапросаВТНачисленнаяАмортизация(ИмяДокумента)
		+ ТекстЗапросаВТОбъектыДокумента(ИмяДокумента)
		+ ТекстЗапросаВТСчетаОтражения()		
		+ ТекстЗапросаВТМестонахожденияОС()
		+ ТекстЗапросаВТНалоговыеНазначенияОС();  // - новый, созданый для УКР
	Возврат ТекстВТ;
КонецФункции	

// Возвращает текст запроса временной таблицы остатков по счетам учета
//
// Параметры:
//
// Возвращаемое значение:
// 		Строка - Текст запроса
//
Функция ТекстЗапросаВТОтраженияВРеглУчетеОстаткиПоСчетам() Экспорт
	
	Возврат
	"ВЫБРАТЬ
	|	втНачисленнаяАмортизация.ОбъектУчета КАК ОбъектУчета,
	|	СУММА(ЕСТЬNULL(втНачисленнаяАмортизация.СуммаБУ, 0)) КАК СуммаБУ,
	|	СУММА(ЕСТЬNULL(втНачисленнаяАмортизация.СуммаНУ, 0)) КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	0 КАК СуммаВР
	|ПОМЕСТИТЬ втАмортизацияСгруппированная
	|ИЗ
	|	втНачисленнаяАмортизация КАК втНачисленнаяАмортизация
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленнаяАмортизация.ОбъектУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втСчетаОтражения.СчетУчета КАК Счет
	|ПОМЕСТИТЬ втВсеСчета
	|ИЗ
	|	втСчетаОтражения КАК втСчетаОтражения
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втСчетаОтражения.СчетНачисленияАмортизации
	|ИЗ
	|	втСчетаОтражения КАК втСчетаОтражения
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОбъектыДокумента.Организация КАК Организация,
	|	Местонахождение.Подразделение КАК Подразделение,
	|	ВЫБОР КОГДА &ИспользоватьУчетВнеоборотныхАктивовПоНаправлениямДеятельности
	|		ТОГДА ОбъектыУчета.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	втОбъектыДокумента.ОбъектУчета КАК ОбъектУчета
	|ПОМЕСТИТЬ втОбъектыСгруппированные
	|ИЗ
	|	втОбъектыДокумента КАК втОбъектыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМестонахожденияОС КАК Местонахождение
	|		ПО втОбъектыДокумента.ОбъектУчета = Местонахождение.ОбъектУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК ОбъектыУчета
	|		ПО втОбъектыДокумента.ОбъектУчета = ОбъектыУчета.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОбъектУчета,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	0 КАК СуммаВР
	|ПОМЕСТИТЬ втОстаткиИДвиженияДокумента
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаМесяцОкончание,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Т.Счет
	|				ИЗ
	|					втВсеСчета КАК Т),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			(Организация, Подразделение, НаправлениеДеятельности, Субконто1) В
	|				(ВЫБРАТЬ
	|					Т.Организация,
	|					Т.Подразделение,
	|					Т.НаправлениеДеятельности,
	|					Т.ОбъектУчета
	|				ИЗ
	|					втОбъектыСгруппированные КАК Т)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйСубконто.Значение,
	|	Хозрасчетный.СчетДт,
	|	-Хозрасчетный.Сумма,
	|	-Хозрасчетный.СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВсеСчета КАК втВсеСчета
	|		ПО Хозрасчетный.СчетДт = втВсеСчета.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбъектыСгруппированные КАК втОбъектыСгруппированные
	|		ПО Хозрасчетный.Организация = втОбъектыСгруппированные.Организация
	|			И Хозрасчетный.ПодразделениеДт = втОбъектыСгруппированные.Подразделение
	|			И Хозрасчетный.НаправлениеДеятельностиДт = втОбъектыСгруппированные.НаправлениеДеятельности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО Хозрасчетный.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (втОбъектыСгруппированные.ОбъектУчета = ХозрасчетныйСубконто.Значение)
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства))
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйСубконто.Значение,
	|	Хозрасчетный.СчетКт,
	|	Хозрасчетный.Сумма,
	|	Хозрасчетный.СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВсеСчета КАК втВсеСчета
	|		ПО Хозрасчетный.СчетКт = втВсеСчета.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбъектыСгруппированные КАК втОбъектыСгруппированные
	|		ПО Хозрасчетный.Организация = втОбъектыСгруппированные.Организация
	|			И Хозрасчетный.ПодразделениеКт = втОбъектыСгруппированные.Подразделение
	|			И Хозрасчетный.НаправлениеДеятельностиКт = втОбъектыСгруппированные.НаправлениеДеятельности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО Хозрасчетный.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (втОбъектыСгруппированные.ОбъектУчета = ХозрасчетныйСубконто.Значение)
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства))
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстаткиИДвиженияДокумента.ОбъектУчета КАК ОбъектУчета,
	|	втОстаткиИДвиженияДокумента.Счет КАК Счет,
	|	СУММА(втОстаткиИДвиженияДокумента.СуммаБУ) КАК СуммаБУ,
	|	СУММА(втОстаткиИДвиженияДокумента.СуммаНУ) КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	0 КАК СуммаВР
	|ПОМЕСТИТЬ втХозрасчетныйОстатки
	|ИЗ
	|	втОстаткиИДвиженияДокумента КАК втОстаткиИДвиженияДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	втОстаткиИДвиженияДокумента.ОбъектУчета,
	|	втОстаткиИДвиженияДокумента.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыСгруппированные.ОбъектУчета КАК ОбъектУчета,
	|	ЕСТЬNULL(втОстаткиСчетУчета.СуммаБУ, 0) КАК ВосстановительнаяСтоимостьБУ,
	|	ЕСТЬNULL(втОстаткиСчетУчета.СуммаНУ, 0) КАК ВосстановительнаяСтоимостьНУ,
	|	0 КАК ВосстановительнаяСтоимостьПР,
	|	0 КАК ВосстановительнаяСтоимостьВР,
	|	ЕСТЬNULL(-втОстаткиСчетАмортизации.СуммаБУ, 0) + ЕСТЬNULL(втАмортизация.СуммаБУ, 0) КАК НакопленнаяАмортизацияБУ,
	|	ЕСТЬNULL(-втОстаткиСчетАмортизации.СуммаНУ, 0) + ЕСТЬNULL(втАмортизация.СуммаНУ, 0) КАК НакопленнаяАмортизацияНУ,
	|	0 КАК НакопленнаяАмортизацияПР,
	|	0 КАК НакопленнаяАмортизацияВР,
	|	ЕСТЬNULL(втОстаткиСчетУчета.СуммаБУ, 0) - (-ЕСТЬNULL(втОстаткиСчетАмортизации.СуммаБУ, 0) + ЕСТЬNULL(втАмортизация.СуммаБУ, 0)) КАК ОстаточнаяСтоимостьБУ,
	|	ЕСТЬNULL(втОстаткиСчетУчета.СуммаНУ, 0) - (-ЕСТЬNULL(втОстаткиСчетАмортизации.СуммаНУ, 0) + ЕСТЬNULL(втАмортизация.СуммаНУ, 0)) КАК ОстаточнаяСтоимостьНУ,
	|	0 КАК ОстаточнаяСтоимостьПР,
	|	0 КАК ОстаточнаяСтоимостьВР,
	|	0 КАК НакопленнаяАмортизацияБУЦФ,
	|	0 КАК НакопленнаяАмортизацияНУЦФ,
	|	0 КАК НакопленнаяАмортизацияПРЦФ,
	|	0 КАК НакопленнаяАмортизацияВРЦФ
	|ПОМЕСТИТЬ втОстаткиПоСчетам
	|ИЗ
	|	втОбъектыСгруппированные КАК втОбъектыСгруппированные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСчетаОтражения КАК втСчетаОтражения
	|		ПО втОбъектыСгруппированные.ОбъектУчета = втСчетаОтражения.ОбъектУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАмортизацияСгруппированная КАК втАмортизация
	|		ПО втОбъектыСгруппированные.ОбъектУчета = втАмортизация.ОбъектУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втХозрасчетныйОстатки КАК втОстаткиСчетУчета
	|		ПО втОбъектыСгруппированные.ОбъектУчета = втОстаткиСчетУчета.ОбъектУчета
	|			И (втСчетаОтражения.СчетУчета = втОстаткиСчетУчета.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втХозрасчетныйОстатки КАК втОстаткиСчетАмортизации
	|		ПО втОбъектыСгруппированные.ОбъектУчета = втОстаткиСчетАмортизации.ОбъектУчета
	|			И (втСчетаОтражения.СчетНачисленияАмортизации = втОстаткиСчетАмортизации.Счет)" + ";";	
	
КонецФункции

// Возвращает текст запроса для отражения амортизации по документу в регламентированном учете.
//
// Возвращаемое значение:
// 		Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчетеНачисленнойАмортизации() Экспорт
	
	Разделитель = Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ " + Символы.ПС;
	
	ТекстОтражения = ТекстОтраженияАмортизация()
		+ Разделитель + ТекстОтраженияАмортизацияНаПрочиеОперации()
		 + Разделитель + ТекстОтраженияПропорциональногоУменьшенияДопКапитала();
	Возврат ТекстОтражения;
	
КонецФункции

// Возвращает пустую таблицу значений начисленной амортизации
//
//
Функция ПустаяТаблицаЗначенийНачисленнойАмортизации() Экспорт
	
	ТаблицаАмортизации = Новый ТаблицаЗначений;
	
	МассивТиповОбъектовУчета = Новый Массив;
	МассивТиповОбъектовУчета.Добавить(Тип("СправочникСсылка.ОбъектыЭксплуатации"));
	МассивТиповОбъектовУчета.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
	ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов(МассивТиповОбъектовУчета));
	
	ТаблицаАмортизации.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаАмортизации.Колонки.Добавить("СуммаУменьшенияДооценки", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаБУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаНУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаПР", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаВР", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаАмортизации.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	ТаблицаАмортизации.Колонки.Добавить("АналитикаРасходов", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
	

	
	ТаблицаАмортизации.Колонки.Добавить("НалоговоеНазначениеКт",  Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаАмортизации.Колонки.Добавить("НалоговоеНазначение",  Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаАмортизации.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	
	ТаблицаАмортизации.Колонки.Добавить("ПередаватьРасходыВДругуюОрганизацию", Новый ОписаниеТипов("Булево"));
	ТаблицаАмортизации.Колонки.Добавить("ОрганизацияПолучательРасходов", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаАмортизации.Колонки.Добавить("СчетПередачиРасходов", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ТаблицаАмортизации.Колонки.Добавить("НачислятьИзнос", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаАмортизации;
	
КонецФункции

// Возвращает таблицу начисленной амортизации
//
// Параметры:
// 		ТаблицаОбъектовУчета - ТаблицаЗначений - Таблица объектов для начисления амортизации
// 		ТаблицаРеквизитов - ТаблицаЗначений - Таблица реквизитов документа
// 		Отказ - Булево - Признак удачного заверешения функции начисления амортизации
//
// Возвращаемое значение:
// 		ТаблицаЗначений - Таблица начисленных расходов по амортизации (формат представлен в функции ПустаяТаблицаЗначенийНачисленнойАмортизации)
//
Функция НачисленнаяАмортизация(ТаблицаОбъектовУчета, ТаблицаРеквизитов, Отказ) Экспорт
	
	Возврат ПодготовитьТаблицуАмортизацияОС(ТаблицаОбъектовУчета, ТаблицаРеквизитов, Отказ);
	
КонецФункции

#Область ОтражениеАмортизацииВОперативномУчете

// Инициализирует параметры запроса данных проведения при отражении начисленной амортизации
//
// Параметры:
// 		Запрос - Запрос - Объект запроса к данным
// 		ДополнительныеСвойства - Структура - Структура дополнительных свойств объекта документа
//
Процедура ИнициализироватьПараметрыЗапросаПриОтраженииАмортизации(Запрос, ДополнительныеСвойства) Экспорт
	
	Запрос.УстановитьПараметр("ТаблицаАмортизации", ДополнительныеСвойства.НачисленнаяАмортизация);
	Запрос.УстановитьПараметр("Граница", Дата(1, 1, 1, 0, 0, 0));
	
	Запрос.УстановитьПараметр("СписаниеОстаточнойСтоимости", Ложь);
	Запрос.УстановитьПараметр("ДатаСписанияОстаточнойСтоиости", Дата(1, 1, 1, 0, 0, 0));
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.УстановитьПараметр("СтатьяРасходов", ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка());
	Запрос.УстановитьПараметр("АналитикаРасходов", Неопределено);
	
	Запрос.УстановитьПараметр(
		"ИспользоватьУчетПрочихДоходовРасходов",
		ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	Запрос.УстановитьПараметр(
		"ПогашениеУпрЗатрат",
		ПолучитьФункциональнуюОпцию("ИспользоватьАмортизациюБухгалтерскогоУчетаВУправленческомУчете"));
	
КонецПроцедуры

// Текст запроса временной таблицы начисленной амортизации при проведении документа начисления амортизации
//
// Параметры:
// 		ТекстыЗапроса - СписокЗначений - Список текстов запроса
//
Процедура ВременнаяТаблицаНачисленнаяАмортизацияДокумента(ТекстыЗапроса) Экспорт
	
	ИмяТаблицы = "втНачисленнаяАмортизацияДокумента";
	
	Если ПроведениеСервер.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Временная таблица втНачисленнаяАмортизацияДокумента
	|"+
	"ВЫБРАТЬ
	|	ТаблицаАмортизации.ОбъектУчета КАК ОбъектУчета,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.ПередаватьРасходыВДругуюОрганизацию КАК БУЛЕВО) КАК ПередаватьРасходыВДругуюОрганизацию,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.НачислятьИзнос КАК БУЛЕВО) КАК НачислятьИзнос,
	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаАмортизации.ПередаватьРасходыВДругуюОрганизацию КАК БУЛЕВО)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаАмортизации.ОрганизацияПолучательРасходов КАК Справочник.Организации)
	|		ИНАЧЕ ВЫРАЗИТЬ(&Организация КАК Справочник.Организации)
	|	КОНЕЦ КАК Организация,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.Подразделение КАК Справочник.СтруктураПредприятия) КАК Подразделение,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.СуммаУменьшенияДооценки КАК ЧИСЛО) КАК СуммаУменьшенияДооценки,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.СуммаБУ КАК ЧИСЛО) КАК СуммаБУ,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.СуммаНУ КАК ЧИСЛО) КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	0 КАК СуммаВР,	
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.Коэффициент КАК ЧИСЛО) КАК Коэффициент,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов) КАК СтатьяРасходов,
	|	ТаблицаАмортизации.АналитикаРасходов КАК АналитикаРасходов
	|ПОМЕСТИТЬ втНачисленнаяАмортизацияДокумента
	|ИЗ
	|	&ТаблицаАмортизации КАК ТаблицаАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета" + ";";
	
	ТекстыЗапроса.Добавить(Текст, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Текст запроса временной таблицы начисленной амортизации при проведении документа начисления амортизации
//
// Параметры:
// 		ТекстыЗапроса - СписокЗначений - Список текстов запроса
//
Процедура ВременнаяТаблицаНачисленнаяАмортизация(ТекстыЗапроса) Экспорт
	
	ИмяТаблицы = "втНачисленнаяАмортизация";
	
	Если ПроведениеСервер.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ВременнаяТаблицаНачисленнаяАмортизацияДокумента(ТекстыЗапроса);
	
	Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Временная таблица втНачисленнаяАмортизация
	|"+
	"ВЫБРАТЬ
	|	втНачисленнаяАмортизацияДокумента.ОбъектУчета КАК ОбъектУчета,
	|	СправочникОбъектовУчета.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	втНачисленнаяАмортизацияДокумента.ПередаватьРасходыВДругуюОрганизацию КАК ПередаватьРасходыВДругуюОрганизацию,
	|	втНачисленнаяАмортизацияДокумента.НачислятьИзнос КАК НачислятьИзнос,
	
	|	втНачисленнаяАмортизацияДокумента.Организация КАК Организация,
	|	втНачисленнаяАмортизацияДокумента.Подразделение КАК Подразделение,
	|	втНачисленнаяАмортизацияДокумента.СуммаУменьшенияДооценки КАК СуммаУменьшенияДооценки,
	|	втНачисленнаяАмортизацияДокумента.СуммаБУ КАК СуммаБУ,
	|	втНачисленнаяАмортизацияДокумента.СуммаНУ КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	0 КАК СуммаВР,
	|	втНачисленнаяАмортизацияДокумента.Коэффициент КАК Коэффициент,
	|	втНачисленнаяАмортизацияДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|	втНачисленнаяАмортизацияДокумента.АналитикаРасходов КАК АналитикаРасходов
	|ПОМЕСТИТЬ втНачисленнаяАмортизация
	|ИЗ
	|	втНачисленнаяАмортизацияДокумента КАК втНачисленнаяАмортизацияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК СправочникОбъектовУчета
	|		ПО втНачисленнаяАмортизацияДокумента.ОбъектУчета = СправочникОбъектовУчета.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета" + ";";
	
	ТекстыЗапроса.Добавить(Текст, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Текст запроса временной таблицы стоимости активов в упр. учете при проведении документа начисления амортизации
//
// Параметры:
// 		ТекстыЗапроса - СписокЗначений - Список текстов запроса
//
Процедура ВременнаяТаблицаСтоимостиУпр(ТекстыЗапроса) Экспорт
	
	ИмяТаблицы = "втСтоимостиУпр";
	
	Если ПроведениеСервер.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ВременнаяТаблицаНачисленнаяАмортизация(ТекстыЗапроса);
	
	Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Временная таблица втСтоимостиУпр
	|"+
	"ВЫБРАТЬ
	|	ПрочиеРасходыОстатки.Подразделение КАК Подразделение,
	|	ПрочиеРасходыОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходыОстатки.АналитикаРасходов КАК АналитикаРасходов,
	|	ПрочиеРасходыОстатки.СуммаОстаток КАК Сумма,
	|	ПрочиеРасходыОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС
	|ПОМЕСТИТЬ втСтоимостиУпр
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Остатки(
	|			&Период,
	|			СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И СтатьяРасходов.РасходыНаРемонтОС = Ложь
	|				И Организация = &Организация                                                                                      
	|				И АналитикаРасходов В
	|					(ВЫБРАТЬ
	|						Т.ОбъектУчета
	|					ИЗ
	|						втНачисленнаяАмортизация КАК Т)) КАК ПрочиеРасходыОстатки
	|ГДЕ
	|	&ПогашениеУпрЗатрат
	|	И ПрочиеРасходыОстатки.СуммаОстаток > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяРасходов,
	|	АналитикаРасходов" + ";";
	
	ТекстыЗапроса.Добавить(Текст, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Текст запроса временной таблицы движений амортизации в прочих расходах при проведении документа начисления амортизации
//
// Параметры:
// 		ТекстыЗапроса - СписокЗначений - Список текстов запроса
//
Процедура ВременнаяТаблицаАмортизацияПрочиеРасходы(ТекстыЗапроса) Экспорт
	
	ИмяТаблицы = "втАмортизацияПрочиеРасходы";
	
	Если ПроведениеСервер.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ВременнаяТаблицаНачисленнаяАмортизация(ТекстыЗапроса);
	ВременнаяТаблицаСтоимостиУпр(ТекстыЗапроса);
	
	Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Временная таблица втАмортизацияПрочиеРасходы
	|" +
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	
	|	&Организация КАК Организация,
	|	СтоимостиУпр.Подразделение КАК Подразделение,
	|	СтоимостиУпр.СтатьяРасходов КАК СтатьяРасходов,
	|	СтоимостиУпр.АналитикаРасходов КАК АналитикаРасходов,
	|	
	|	СУММА(СтоимостиУпр.Сумма * НачисленнаяАмортизация.Коэффициент) КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	0 КАК СуммаРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	
	|	Неопределено КАК ХозяйственнаяОперация,
	|	Неопределено КАК АналитикаУчетаНоменклатуры
	|ПОМЕСТИТЬ втАмортизацияПрочиеРасходы
	|ИЗ
	|	втНачисленнаяАмортизация КАК НачисленнаяАмортизация
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтоимостиУпр КАК СтоимостиУпр
	|		ПО НачисленнаяАмортизация.ОбъектУчета = СтоимостиУпр.АналитикаРасходов
	|ГДЕ
	|	&ИспользоватьУчетПрочихДоходовРасходов
	|	И НачисленнаяАмортизация.СтатьяРасходов.ВариантРаспределенияРасходов В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НеРаспределять)
	|	)
	|	И СтоимостиУпр.СтатьяРасходов.РасходыНаРемонтОС = Ложь
	|СГРУППИРОВАТЬ ПО
	|	СтоимостиУпр.Подразделение,
	|	СтоимостиУпр.СтатьяРасходов,
	|	СтоимостиУпр.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	
	|	&Организация КАК Организация,
	|	СтоимостиУпр.Подразделение КАК Подразделение,
	|	СтоимостиУпр.СтатьяРасходов КАК СтатьяРасходов,
	|	СтоимостиУпр.АналитикаРасходов КАК АналитикаРасходов,
	|	
	|	СУММА(СтоимостиУпр.Сумма * НачисленнаяАмортизация.Коэффициент) КАК Сумма,
	|	СУММА(СтоимостиУпр.СуммаБезНДС * НачисленнаяАмортизация.Коэффициент) КАК СуммаБезНДС,
	|	0 КАК СуммаРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	
	|	Неопределено КАК ХозяйственнаяОперация,
	|	Неопределено КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	втНачисленнаяАмортизация КАК НачисленнаяАмортизация
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтоимостиУпр КАК СтоимостиУпр
	|		ПО НачисленнаяАмортизация.ОбъектУчета = СтоимостиУпр.АналитикаРасходов
	|ГДЕ
	|	&ИспользоватьУчетПрочихДоходовРасходов
	|	И НачисленнаяАмортизация.СтатьяРасходов.ВариантРаспределенияРасходов В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|	)
	|СГРУППИРОВАТЬ ПО
	|	СтоимостиУпр.Подразделение,
	|	СтоимостиУпр.СтатьяРасходов,
	|	СтоимостиУпр.АналитикаРасходов
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяРасходов,
	|	АналитикаРасходов
	|"+";";
	
	ТекстыЗапроса.Добавить(Текст, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Текст запроса таблицы движений амортизации в прочих расходах при проведении документа начисления амортизации
//
// Параметры:
// 		ТекстыЗапроса - СписокЗначений - Список текстов запроса
// 		Регистры - Строка, Структура, Неопределено - список регистров, разделенных запятой, или структура, в ключах которой - имена регистров требущихся к заполнению
//
Процедура ПрочиеРасходы(ТекстыЗапроса, Регистры, ДополнительныйТекстЗапроса=Неопределено) Экспорт
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВременнаяТаблицаНачисленнаяАмортизация(ТекстыЗапроса);
	ВременнаяТаблицаСтоимостиУпр(ТекстыЗапроса);
	ВременнаяТаблицаАмортизацияПрочиеРасходы(ТекстыЗапроса);
	
	Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Таблица ПрочиеРасходы
	|"+ ?(ЗначениеЗаполнено(ДополнительныйТекстЗапроса), ДополнительныйТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС, "") +
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	НачисленнаяАмортизация.Организация КАК Организация,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначение,
	|	НачисленнаяАмортизация.Подразделение КАК Подразделение,
	|	НачисленнаяАмортизация.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленнаяАмортизация.АналитикаРасходов КАК АналитикаРасходов,
	|	
	|	СУММА(СтоимостиУпр.Сумма * НачисленнаяАмортизация.Коэффициент) КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	
	|	Неопределено КАК ХозяйственнаяОперация,
	|	Неопределено КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	втНачисленнаяАмортизация КАК НачисленнаяАмортизация
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтоимостиУпр КАК СтоимостиУпр
	|		ПО НачисленнаяАмортизация.ОбъектУчета = СтоимостиУпр.АналитикаРасходов
	|ГДЕ
	|	&ИспользоватьУчетПрочихДоходовРасходов
	|	И НачисленнаяАмортизация.СтатьяРасходов.ВариантРаспределенияРасходов В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НеРаспределять)
	|	)
	|	И СтоимостиУпр.СтатьяРасходов.РасходыНаРемонтОС = Ложь
	|СГРУППИРОВАТЬ ПО
	|	НачисленнаяАмортизация.Организация,
	|	НачисленнаяАмортизация.Подразделение,
	|	НачисленнаяАмортизация.СтатьяРасходов,
	|	НачисленнаяАмортизация.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	НачисленнаяАмортизация.Организация КАК Организация,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначение,
	|	НачисленнаяАмортизация.Подразделение КАК Подразделение,
	|	НачисленнаяАмортизация.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленнаяАмортизация.АналитикаРасходов КАК АналитикаРасходов,
	|	
	|	СУММА(СтоимостиУпр.Сумма * НачисленнаяАмортизация.Коэффициент) КАК Сумма,
	|	СУММА(СтоимостиУпр.СуммаБезНДС * НачисленнаяАмортизация.Коэффициент) КАК СуммаБезНДС,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	
	|	Неопределено КАК ХозяйственнаяОперация,
	|	Неопределено КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	втНачисленнаяАмортизация КАК НачисленнаяАмортизация
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтоимостиУпр КАК СтоимостиУпр
	|		ПО НачисленнаяАмортизация.ОбъектУчета = СтоимостиУпр.АналитикаРасходов
	|ГДЕ
	|	&ИспользоватьУчетПрочихДоходовРасходов
	|	И НачисленнаяАмортизация.СтатьяРасходов.ВариантРаспределенияРасходов В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|	)
	|СГРУППИРОВАТЬ ПО
	|	НачисленнаяАмортизация.Организация,
	|	НачисленнаяАмортизация.Подразделение,
	|	НачисленнаяАмортизация.СтатьяРасходов,
	|	НачисленнаяАмортизация.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АмортизацияПрочиеРасходы.Период КАК Период,
	|	АмортизацияПрочиеРасходы.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	
	|	АмортизацияПрочиеРасходы.Организация КАК Организация,
    |	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначение,
	|	АмортизацияПрочиеРасходы.Подразделение КАК Подразделение,
	|	АмортизацияПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	АмортизацияПрочиеРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	
	|	АмортизацияПрочиеРасходы.Сумма КАК Сумма,
	|	АмортизацияПрочиеРасходы.СуммаБезНДС КАК СуммаБезНДС,
	|	АмортизацияПрочиеРасходы.СуммаРегл КАК СуммаРегл,
	|	АмортизацияПрочиеРасходы.СуммаРегл КАК СуммаРеглБезНДС,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	
	|	Неопределено КАК ХозяйственнаяОперация,
	|	Неопределено КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	втАмортизацияПрочиеРасходы КАК АмортизацияПрочиеРасходы
	|ГДЕ
	|	&ИспользоватьУчетПрочихДоходовРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	Строки.Организация КАК Организация,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначение,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.СтатьяРасходов КАК СтатьяРасходов,
	|	Строки.АналитикаРасходов КАК АналитикаРасходов,
	|	
	|	0 КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	Строки.СуммаБУ КАК СуммаРегл,
	|	Строки.СуммаБУ КАК СуммаРеглБезНДС,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	
	|	Неопределено КАК ХозяйственнаяОперация,
	|	Неопределено КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	втНачисленнаяАмортизация КАК Строки
	|ГДЕ
	|НЕ Строки.НачислятьИзнос
	|	И Строки.СтатьяРасходов.ВариантРаспределенияРасходов В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НеРаспределять)
	|	)
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаСписанияОстаточнойСтоиости КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	&Организация КАК Организация,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначение,
	|	&Подразделение КАК Подразделение,
	|	&СтатьяРасходов КАК СтатьяРасходов,
	|	&АналитикаРасходов КАК АналитикаРасходов,
	|	
	|	СтоимостиУпр.Сумма - ЕСТЬNULL(АмортизацияПрочиеРасходы.Сумма, 0) КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	
	|	Неопределено КАК ХозяйственнаяОперация,
	|	Неопределено КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	втСтоимостиУпр КАК СтоимостиУпр
	|	ЛЕВОЕ СОЕДИНЕНИЕ втАмортизацияПрочиеРасходы КАК АмортизацияПрочиеРасходы
	|	ПО СтоимостиУпр.СтатьяРасходов = АмортизацияПрочиеРасходы.СтатьяРасходов
	|		И СтоимостиУпр.АналитикаРасходов = АмортизацияПрочиеРасходы.АналитикаРасходов
	|ГДЕ
	|	&СписаниеОстаточнойСтоимости
	|	И &ИспользоватьУчетПрочихДоходовРасходов
	|	И ВЫРАЗИТЬ(&СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов).ВариантРаспределенияРасходов В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НеРаспределять)
	|	)
	|	И СтоимостиУпр.СтатьяРасходов.РасходыНаРемонтОС = Ложь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаСписанияОстаточнойСтоиости КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	&Организация КАК Организация,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначение,
	|	&Подразделение КАК Подразделение,
	|	&СтатьяРасходов КАК СтатьяРасходов,
	|	&АналитикаРасходов КАК АналитикаРасходов,
	|	
	|	СтоимостиУпр.Сумма - ЕСТЬNULL(АмортизацияПрочиеРасходы.Сумма, 0) КАК Сумма,
	|	СтоимостиУпр.СуммаБезНДС - ЕСТЬNULL(АмортизацияПрочиеРасходы.СуммаБезНДС, 0) КАК СуммаБезНДС,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	
	|	Неопределено КАК ХозяйственнаяОперация,
	|	Неопределено КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	втСтоимостиУпр КАК СтоимостиУпр
	|	ЛЕВОЕ СОЕДИНЕНИЕ втАмортизацияПрочиеРасходы КАК АмортизацияПрочиеРасходы
	|	ПО СтоимостиУпр.СтатьяРасходов = АмортизацияПрочиеРасходы.СтатьяРасходов
	|		И СтоимостиУпр.АналитикаРасходов = АмортизацияПрочиеРасходы.АналитикаРасходов
	|ГДЕ
	|	&СписаниеОстаточнойСтоимости
	|	И &ИспользоватьУчетПрочихДоходовРасходов
	|	И ВЫРАЗИТЬ(&СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов).ВариантРаспределенияРасходов В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаСписанияОстаточнойСтоиости КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	
	|	&Организация КАК Организация,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначение,
	|	СтоимостиУпр.Подразделение КАК Подразделение,
	|	СтоимостиУпр.СтатьяРасходов КАК СтатьяРасходов,
	|	СтоимостиУпр.АналитикаРасходов КАК АналитикаРасходов,
	|	
	|	СтоимостиУпр.Сумма - ЕСТЬNULL(АмортизацияПрочиеРасходы.Сумма, 0) КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	
	|	Неопределено КАК ХозяйственнаяОперация,
	|	Неопределено КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	втСтоимостиУпр КАК СтоимостиУпр
	|	ЛЕВОЕ СОЕДИНЕНИЕ втАмортизацияПрочиеРасходы КАК АмортизацияПрочиеРасходы
	|	ПО СтоимостиУпр.СтатьяРасходов = АмортизацияПрочиеРасходы.СтатьяРасходов
	|		И СтоимостиУпр.АналитикаРасходов = АмортизацияПрочиеРасходы.АналитикаРасходов
	|ГДЕ
	|	&СписаниеОстаточнойСтоимости
	|	И &ИспользоватьУчетПрочихДоходовРасходов
	|	И СтоимостиУпр.СтатьяРасходов.ВариантРаспределенияРасходов В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НеРаспределять)
	|	)
	|	И СтоимостиУпр.СтатьяРасходов.РасходыНаРемонтОС = Ложь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаСписанияОстаточнойСтоиости КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	
	|	&Организация КАК Организация,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначение,
	|	СтоимостиУпр.Подразделение КАК Подразделение,
	|	СтоимостиУпр.СтатьяРасходов КАК СтатьяРасходов,
	|	СтоимостиУпр.АналитикаРасходов КАК АналитикаРасходов,
	|	
	|	СтоимостиУпр.Сумма - ЕСТЬNULL(АмортизацияПрочиеРасходы.Сумма, 0) КАК Сумма,
	|	СтоимостиУпр.СуммаБезНДС - ЕСТЬNULL(АмортизацияПрочиеРасходы.СуммаБезНДС, 0) КАК СуммаБезНДС,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	
	|	Неопределено КАК ХозяйственнаяОперация,
	|	Неопределено КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	втСтоимостиУпр КАК СтоимостиУпр
	|	ЛЕВОЕ СОЕДИНЕНИЕ втАмортизацияПрочиеРасходы КАК АмортизацияПрочиеРасходы
	|	ПО СтоимостиУпр.СтатьяРасходов = АмортизацияПрочиеРасходы.СтатьяРасходов
	|		И СтоимостиУпр.АналитикаРасходов = АмортизацияПрочиеРасходы.АналитикаРасходов
	|ГДЕ
	|	&СписаниеОстаточнойСтоимости
	|	И &ИспользоватьУчетПрочихДоходовРасходов
	|	И СтоимостиУпр.СтатьяРасходов.ВариантРаспределенияРасходов В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|	)
	|"+";";
	
	ТекстыЗапроса.Добавить(Текст, ИмяРегистра, Истина);
	
КонецПроцедуры

// Текст запроса таблицы движений амортизации в партиях прочих расходов при проведении документа начисления амортизации
//
// Параметры:
// 		ТекстыЗапроса - СписокЗначений - Список текстов запроса
// 		Регистры - Строка, Структура, Неопределено - список регистров, разделенных запятой, или структура, в ключах которой - имена регистров требущихся к заполнению
//
Процедура ПартииПрочихРасходов(ТекстыЗапроса, Регистры, ДополнительныйТекстЗапроса=Неопределено) Экспорт
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВременнаяТаблицаНачисленнаяАмортизация(ТекстыЗапроса);
	ВременнаяТаблицаСтоимостиУпр(ТекстыЗапроса);
	ВременнаяТаблицаАмортизацияПрочиеРасходы(ТекстыЗапроса);
	
	Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Таблица ПартииПрочихРасходов
	|"+ ?(ЗначениеЗаполнено(ДополнительныйТекстЗапроса), ДополнительныйТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС, "") +
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	НачисленнаяАмортизация.Организация КАК Организация,
	|	НачисленнаяАмортизация.Подразделение КАК Подразделение,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	НачисленнаяАмортизация.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленнаяАмортизация.АналитикаРасходов КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаПартий,
	|	
	|	СУММА(СтоимостиУпр.Сумма * НачисленнаяАмортизация.Коэффициент) КАК Стоимость,
	|	СУММА(СтоимостиУпр.Сумма * НачисленнаяАмортизация.Коэффициент) КАК СтоимостьБезНДС,
	|	0 КАК СтоимостьРегл,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница
	|ИЗ
	|	втНачисленнаяАмортизация КАК НачисленнаяАмортизация
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтоимостиУпр КАК СтоимостиУпр
	|		ПО НачисленнаяАмортизация.ОбъектУчета = СтоимостиУпр.АналитикаРасходов
	|ГДЕ
	|	&ИспользоватьУчетПрочихДоходовРасходов
	|	И НачисленнаяАмортизация.СтатьяРасходов.ВариантРаспределенияРасходов В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	)
	|СГРУППИРОВАТЬ ПО
	|	НачисленнаяАмортизация.Организация,
	|	НачисленнаяАмортизация.Подразделение,
	|	НачисленнаяАмортизация.СтатьяРасходов,
	|	НачисленнаяАмортизация.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	ТаблицаАмортизации.Организация КАК Организация,
	|	ТаблицаАмортизации.Подразделение КАК Подразделение,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	ТаблицаАмортизации.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаАмортизации.АналитикаРасходов КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаПартий,
	|	
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	ТаблицаАмортизации.СуммаБУ КАК СтоимостьРегл,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница
	|ИЗ
	|	втНачисленнаяАмортизация КАК ТаблицаАмортизации
	|ГДЕ
	|НЕ ТаблицаАмортизации.НачислятьИзнос
	|	И ТаблицаАмортизации.СтатьяРасходов.ВариантРаспределенияРасходов В (ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	ТаблицаАмортизации.Организация КАК Организация,
	|	ТаблицаАмортизации.Подразделение КАК Подразделение,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	ТаблицаАмортизации.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаАмортизации.АналитикаРасходов КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаПартий,
	|	
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	ТаблицаАмортизации.СуммаБУ КАК СтоимостьРегл,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница
	|ИЗ
	|	втНачисленнаяАмортизация КАК ТаблицаАмортизации
	|ГДЕ
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаСписанияОстаточнойСтоиости КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	&Организация КАК Организация,
	|	СтоимостиУпр.Подразделение КАК Подразделение,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	СтоимостиУпр.СтатьяРасходов КАК СтатьяРасходов,
	|	СтоимостиУпр.АналитикаРасходов КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаПартий,
	|	
	|	СУММА(СтоимостиУпр.Сумма - ЕСТЬNULL(АмортизацияПрочиеРасходы.Сумма, 0)) КАК Сумма,
	|	СУММА(СтоимостиУпр.СуммаБезНДС - ЕСТЬNULL(АмортизацияПрочиеРасходы.СуммаБезНДС, 0)) КАК СуммаБезНДС,
	|	0 КАК СтоимостьРегл,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница
	|ИЗ
	|	втСтоимостиУпр КАК СтоимостиУпр
	|	ЛЕВОЕ СОЕДИНЕНИЕ втАмортизацияПрочиеРасходы КАК АмортизацияПрочиеРасходы
	|	ПО СтоимостиУпр.СтатьяРасходов = АмортизацияПрочиеРасходы.СтатьяРасходов
	|		И СтоимостиУпр.АналитикаРасходов = АмортизацияПрочиеРасходы.АналитикаРасходов
	|ГДЕ
	|	&СписаниеОстаточнойСтоимости
	|	И &ИспользоватьУчетПрочихДоходовРасходов
	|	И СтоимостиУпр.СтатьяРасходов.ВариантРаспределенияРасходов В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	)
	|СГРУППИРОВАТЬ ПО
	|	СтоимостиУпр.Подразделение,
	|	СтоимостиУпр.СтатьяРасходов,
	|	СтоимостиУпр.АналитикаРасходов
	|"+";";
	
	ТекстыЗапроса.Добавить(Текст, ИмяРегистра, Истина);
	
КонецПроцедуры

// Текст запроса таблицы порядка отражения прочих операций по начисленной амортизации
//
// Параметры:
// 		ТекстыЗапроса - СписокЗначений - Список текстов запроса
// 		Регистры - Строка, Структура, Неопределено - список регистров, разделенных запятой, или структура, в ключах которой - имена регистров требущихся к заполнению
//
Процедура ПорядокОтраженияПрочихОпераций(ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "ПорядокОтраженияПрочихОпераций";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВременнаяТаблицаНачисленнаяАмортизация(ТекстыЗапроса);
	
	Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Таблица ПорядокОтраженияПрочихОпераций
	|" +
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&Период КАК Дата,
	|	&Организация КАК Организация,
	|	&Ссылка КАК Документ,
	|	"""" КАК ИдентификаторСтроки
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиПрочихОпераций
	|	
	|ГДЕ
	|	СтатьиПрочихОпераций.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|	И(
	|		СтатьиПрочихОпераций.Ссылка = &СтатьяРасходов
	|		ИЛИ СтатьиПрочихОпераций.Ссылка В (ВЫБРАТЬ Т.СтатьяРасходов ИЗ втНачисленнаяАмортизация КАК Т)
	|	)
	|" + ";";
	
	ТекстыЗапроса.Добавить(Текст, ИмяРегистра, Истина);
	
КонецПроцедуры

// Текст запроса таблицы отражения документа в регл. учете
//
// Параметры:
// 		ТекстыЗапроса - СписокЗначений - Список текстов запроса
// 		Регистры - Строка, Структура, Неопределено - список регистров, разделенных запятой, или структура, в ключах которой - имена регистров требущихся к заполнению
//
Процедура ОтражениеДокументовВРеглУчете(ТекстыЗапроса, Регистры, ДополнительныйТекстЗапроса=Неопределено) Экспорт
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВременнаяТаблицаНачисленнаяАмортизация(ТекстыЗапроса);
	
	Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Таблица ОтражениеДокументовВРеглУчете
	|" + ?(ЗначениеЗаполнено(ДополнительныйТекстЗапроса), ДополнительныйТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС, "") +
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	
	|	&Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете) КАК Статус
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период КАК Период,
	|	
	|	НачисленнаяАмортизация.Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете) КАК Статус
	|
	|ИЗ
	|	втНачисленнаяАмортизация КАК НачисленнаяАмортизация
	|ГДЕ
	|	НачисленнаяАмортизация.Организация <> &Организация" + ";";
	
	ТекстыЗапроса.Добавить(Текст, ИмяРегистра, Истина);
	
КонецПроцедуры

Процедура ПереоценкаОСБухгалтерскийУчет(ТекстыЗапроса, Регистры, ДополнительныйТекстЗапроса=Неопределено)  Экспорт

	
	ИмяРегистра = "ПереоценкаОСБухгалтерскийУчет";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ВременнаяТаблицаНачисленнаяАмортизация(ТекстыЗапроса);

	Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Таблица УменьшенияСтоимостиДопКапитала
	|"+ ?(ЗначениеЗаполнено(ДополнительныйТекстЗапроса), ДополнительныйТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС, "") +
	"ВЫБРАТЬ // Уценка восстановительной стоимости
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	
	|	НачисленнаяАмортизация.Организация КАК Организация,
	|	НачисленнаяАмортизация.ОбъектУчета КАК ОсновноеСредство,
	|	
	|	НачисленнаяАмортизация.СуммаУменьшенияДооценки КАК СуммаПереоценки
	|ИЗ
	|	втНачисленнаяАмортизация КАК НачисленнаяАмортизация
	|		
	|ГДЕ
	|	НачисленнаяАмортизация.СуммаУменьшенияДооценки > 0
	|
	|"+";";
	ТекстыЗапроса.Добавить(Текст, ИмяРегистра, Истина);
КонецПроцедуры

#КонецОбласти

#Область БлокировкаПриОбновленииИБ

// Заполняет входящие данные рассчета и отражения амортизации, необходимые для проверки выполенных обновлений ИБ
//
// Параметры:
// 		ВходящиеДанные - Соответствие
// 			Ключ - Строка, ОбъектМетаданныхКонфигурации - входящие данные, используемые  операцией
// 			Значение - см. ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки, параметр Отбор
//
Процедура ЗаполнитьВходящиеДанныеАмортизации(ВходящиеДанные) Экспорт
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы);	
	ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПереоценкаОСБухгалтерскийУчет);	
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыБухгалтерии.Хозрасчетный);
	
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СостоянияОСОрганизаций);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.НачислениеАмортизацииОСБухгалтерскийУчет);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.НачислениеАмортизацииОСНалоговыйУчет);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПервоначальныеСведенияОСБухгалтерскийУчет);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ПервоначальныеСведенияОСНалоговыйУчет);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.НаработкиОбъектовЭксплуатации);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ГрафикиАмортизацииОСБухгалтерскийУчет);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.СчетаБухгалтерскогоУчетаОС);
	ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.МестонахождениеОСБухгалтерскийУчет);
	
	ВходящиеДанные.Вставить(Метаданные.Справочники.ГодовыеГрафикиАмортизацииОС);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаВТНачисленнаяАмортизация(ИмяДокумента)
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Временная таблица втНачисленнаяАмортизация
	|"+
	"ВЫБРАТЬ
	|	ТаблицаАмортизации.Ссылка.Организация КАК Организация,
	|	ТаблицаАмортизации.ОбъектУчета КАК ОбъектУчета,
	|	ТаблицаАмортизации.ОбъектУчета.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаАмортизации.Подразделение КАК Подразделение,
	|	ТаблицаАмортизации.СуммаБУ КАК СуммаБУ,
	|	ТаблицаАмортизации.СуммаНУ КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	0 КАК СуммаВР,
	|	ТаблицаАмортизации.СуммаУменьшенияДооценки КАК СуммаУменьшенияДооценки,
	|	ТаблицаАмортизации.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаАмортизации.АналитикаРасходов КАК АналитикаРасходов,
	|	ТаблицаАмортизации.ПередаватьРасходыВДругуюОрганизацию КАК ПередаватьРасходыВДругуюОрганизацию,
	|	ТаблицаАмортизации.ОрганизацияПолучательРасходов КАК ОрганизацияПолучательРасходов,
	|	ТаблицаАмортизации.СчетПередачиРасходов КАК СчетПередачиРасходов
	|ПОМЕСТИТЬ втНачисленнаяАмортизация
	|ИЗ
	|	Документ.СписаниеОС.НачисленнаяАмортизация КАК ТаблицаАмортизации
	|ГДЕ
	|	ТаблицаАмортизации.Ссылка = &Ссылка" + ";";
	
	Если ИмяДокумента = "АмортизацияОС" Тогда
		
		ТекстВыборкиТаблицыПараметра = 
		"ВЫБРАТЬ
		|	ТаблицаАмортизации.Организация КАК Организация,
		|	ТаблицаАмортизации.ОбъектУчета КАК ОбъектУчета,
		|	ОбъектыУчета.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТаблицаАмортизации.Подразделение КАК Подразделение,
		|	ТаблицаАмортизации.СуммаБУ КАК СуммаБУ,
		|	ТаблицаАмортизации.СуммаНУ КАК СуммаНУ,
		|	0 КАК СуммаПР,
		|	0 КАК СуммаВР,
		|	ТаблицаАмортизации.СуммаУменьшенияДооценки КАК СуммаУменьшенияДооценки,
		|	ТаблицаАмортизации.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаАмортизации.АналитикаРасходов КАК АналитикаРасходов,
		|	ТаблицаАмортизации.ПередаватьРасходыВДругуюОрганизацию КАК ПередаватьРасходыВДругуюОрганизацию,
		|	ТаблицаАмортизации.ОрганизацияПолучательРасходов КАК ОрганизацияПолучательРасходов,
		|	ТаблицаАмортизации.СчетПередачиРасходов КАК СчетПередачиРасходов
		|ИЗ
		|	втТаблицаАмортизации КАК ТаблицаАмортизации
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК ОбъектыУчета
		|		ПО ТаблицаАмортизации.ОбъектУчета = ОбъектыУчета.Ссылка
		|";
		
		ТекстВыборкиТаблицыПараметра = Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС
			+ ТекстВыборкиТаблицыПараметра;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Ссылка", "&Ссылка" + ТекстВыборкиТаблицыПараметра);
		
	КонецЕсли;
	
	Возврат СтрЗаменить(ТекстЗапроса, "Документ.СписаниеОС", "Документ."+ИмяДокумента);
	
КонецФункции

Функция ТекстЗапросаВТОбъектыДокумента(ИмяДокумента)
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|// Временная таблица втВсеОбъектыДокумента
	|"+
	"ВЫБРАТЬ
	|	ТаблицаАмортизации.Организация КАК Организация,
	|	ТаблицаАмортизации.ОбъектУчета КАК ОбъектУчета
	|ПОМЕСТИТЬ втВсеОбъектыДокумента
	|ИЗ
	|	втНачисленнаяАмортизация КАК ТаблицаАмортизации";
	
	Если ИмяДокумента <> "АмортизацияОС" Тогда
		
		ТекстВыборкиТаблицыПараметра = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.ОсновноеСредство КАК ОбъектУчета
		|ИЗ
		|	Документ.СписаниеОС.ОС КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + ТекстВыборкиТаблицыПараметра;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ";";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.СписаниеОС", "Документ."+ИмяДокумента);
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "
	|////////////////////////////////////////////////////////////////////////////////
	|// Временная таблица втОбъектыДокумента
	|"+
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втВсеОбъектыДокумента.Организация КАК Организация,
	|	втВсеОбъектыДокумента.ОбъектУчета КАК ОбъектУчета
	|ПОМЕСТИТЬ втОбъектыДокумента
	|ИЗ
	|	втВсеОбъектыДокумента КАК втВсеОбъектыДокумента" + ";";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТСчетаОтражения()
	
	Возврат "
	|////////////////////////////////////////////////////////////////////////////////
	|// Таблица ВТСчетаОтражения
	|"+
	"ВЫБРАТЬ
	|	втОбъектыДокумента.ОбъектУчета КАК ОбъектУчета,
	|	ЕСТЬNULL(СчетаОтражения.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
	|	ЕСТЬNULL(СчетаОтражения.СчетНачисленияАмортизации, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетНачисленияАмортизации,
	|	ЕСТЬNULL(СчетаОтражения.СчетУчетаДооценокОС, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчетаДооценокОС
	|ПОМЕСТИТЬ втСчетаОтражения
	|ИЗ
	|	втОбъектыДокумента КАК втОбъектыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|				&Дата,
	|				Регистратор <> &Ссылка
	|					И (Организация, ОсновноеСредство) В
	|						(ВЫБРАТЬ
	|							Т.Организация,
	|							Т.ОбъектУчета
	|						ИЗ
	|							втОбъектыДокумента КАК Т)) КАК СчетаОтражения
	|		ПО втОбъектыДокумента.ОбъектУчета = СчетаОтражения.ОсновноеСредство" + ";";
КонецФункции


Функция ТекстЗапросаВТНалоговыеНазначенияОС()
	
	Возврат "
	|////////////////////////////////////////////////////////////////////////////////
	|// Таблица ВТНалоговыеНазначенияОС
	|"+
	"ВЫБРАТЬ
	|	втОбъектыДокумента.ОбъектУчета КАК ОбъектУчета,
	|	НалоговыеНазначенияОС.НалоговоеНазначение КАК НалоговоеНазначение
	|ПОМЕСТИТЬ ВТНалоговыеНазначенияОС
	|ИЗ
	|	втОбъектыДокумента КАК втОбъектыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НалоговыеНазначенияОС.СрезПоследних(
	|				&Дата,
	|				Регистратор <> &Ссылка
	|					И (Организация, ОсновноеСредство) В
	|						(ВЫБРАТЬ
	|							Т.Организация,
	|							Т.ОбъектУчета
	|						ИЗ
	|							втОбъектыДокумента КАК Т)) КАК НалоговыеНазначенияОС
	|		ПО втОбъектыДокумента.ОбъектУчета = НалоговыеНазначенияОС.ОсновноеСредство" + ";";
	
КонецФункции

Функция ТекстЗапросаВТМестонахожденияОС()
	
	Возврат "
	|////////////////////////////////////////////////////////////////////////////////
	|// Таблица ВТМестонахожденияОС
	|"+
	"ВЫБРАТЬ
	|	втОбъектыДокумента.ОбъектУчета КАК ОбъектУчета,
	|	ЕСТЬNULL(Метонахождения.Местонахождение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение
	|ПОМЕСТИТЬ втМестонахожденияОС
	|ИЗ
	|	втОбъектыДокумента КАК втОбъектыДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Регистратор <> &Ссылка
	|			И (Организация, ОсновноеСредство) В
	|				(ВЫБРАТЬ
	|					Т.Организация, Т.ОбъектУчета
	|				ИЗ
	|					втОбъектыДокумента КАК Т)) КАК Метонахождения
	|	ПО втОбъектыДокумента.ОбъектУчета = Метонахождения.ОсновноеСредство" + ";";
	
КонецФункции


Функция ТекстОтраженияАмортизация()
	
	Возврат "
	|////////////////////////////////////////////////////////////////////////////////////////////////////
	|// Амортизация (Дт СчетУчетаЗатрат :: Кт СчетНакопленияАмортизации)
	|ВЫБРАТЬ
	|	
	|	&Ссылка КАК Ссылка,
	|	&Дата КАК Период,
	|	Строки.Организация КАК Организация,
	|	"""" КАК ИдентификаторСтроки,
	|	
	|	Строки.СуммаБУ КАК Сумма,
	|	
	|	// Дт ///////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаДт,
	|	Строки.СтатьяРасходов КАК АналитикаУчетаДт,
	|	Строки.Подразделение КАК МестоУчетаДт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,	
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначениеДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Строки.СтатьяРасходов КАК СубконтоДт1,
	|	Строки.АналитикаРасходов КАК СубконтоДт2,
	|   ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.Прочее) КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	Строки.СуммаНУ КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	// Кт ///////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	МестонахождениеОС.Подразделение КАК ПодразделениеКт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|   НалоговыеНазначенияОС.НалоговоеНазначение КАК НалоговоеНазначениеКт,
	|		СчетаОтражения.СчетНачисленияАмортизации КАК СчетКт,
	|	Строки.ОбъектУчета КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	Строки.СуммаНУ КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	
	|	/////////////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	""Начисление амортизации"" КАК Содержание
	|ИЗ
	|	втНачисленнаяАмортизация КАК Строки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиСтроительства
	|	ПО Строки.СтатьяРасходов = СтатьиСтроительства.Ссылка
	|		И СтатьиСтроительства.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиНаПрочиеАктивы
	|	ПО Строки.СтатьяРасходов = СтатьиНаПрочиеАктивы.Ссылка
	|		И СтатьиНаПрочиеАктивы.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ втМестонахожденияОС КАК МестонахождениеОС
	|	ПО Строки.ОбъектУчета = МестонахождениеОС.ОбъектУчета
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТНалоговыеНазначенияОС КАК НалоговыеНазначенияОС
	|		ПО Строки.ОбъектУчета = НалоговыеНазначенияОС.ОбъектУчета
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСчетаОтражения КАК СчетаОтражения
	|	ПО Строки.ОбъектУчета = СчетаОтражения.ОбъектУчета
	|
	|ГДЕ
	|	Строки.СуммаБУ > 0
	|	ИЛИ Строки.СуммаНУ > 0		
	|";
	
КонецФункции

Функция ТекстОтраженияПропорциональногоУменьшенияДопКапитала()
	
	Возврат "
	|////////////////////////////////////////////////////////////////////////////////////////////////////
	|// Амортизация (Дт СчетДооценки :: Кт СчетНераспределеннойПрибыли)
	|ВЫБРАТЬ
	|	
	|	&Ссылка КАК Ссылка,
	|	&Дата КАК Период,
	|	Строки.Организация КАК Организация,
	|	"""" КАК ИдентификаторСтроки,
	|	
	|	Строки.СуммаУменьшенияДооценки КАК Сумма,
	|	
	|	// Дт ///////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,	
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначениеДт,
	|
	|	СчетаОтражения.СчетУчетаДооценокОС КАК СчетДт,
	|	СчетаОтражения.ОбъектУчета КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|   НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	Строки.СуммаНУ КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	// Кт ///////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	Строки.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначениеКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяПрибыль) КАК СчетКт,
	|	СчетаОтражения.ОбъектУчета КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	Строки.СуммаНУ КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	
	|	/////////////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	""УменьшениеДопКапитала"" КАК Содержание
	|ИЗ
	|	втНачисленнаяАмортизация КАК Строки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиСтроительства
	|	ПО Строки.СтатьяРасходов = СтатьиСтроительства.Ссылка
	|		И СтатьиСтроительства.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиНаПрочиеАктивы
	|	ПО Строки.СтатьяРасходов = СтатьиНаПрочиеАктивы.Ссылка
	|		И СтатьиНаПрочиеАктивы.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ втМестонахожденияОС КАК МестонахождениеОС
	|	ПО Строки.ОбъектУчета = МестонахождениеОС.ОбъектУчета
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТНалоговыеНазначенияОС КАК НалоговыеНазначенияОС
	|		ПО Строки.ОбъектУчета = НалоговыеНазначенияОС.ОбъектУчета
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСчетаОтражения КАК СчетаОтражения
	|	ПО Строки.ОбъектУчета = СчетаОтражения.ОбъектУчета
	|	
	|ГДЕ
	|	Строки.СуммаУменьшенияДооценки > 0
	|	
	|";
	
КонецФункции


Функция ТекстОтраженияАмортизацияНаПрочиеОперации()
	
	Возврат "
	|////////////////////////////////////////////////////////////////////////////////////////////////////
	|// Амортизация (Дт СчетУчетаЗатрат :: Кт СчетНакопленияАмортизации)
	|ВЫБРАТЬ
	|	
	|	&Ссылка КАК Ссылка,
	|	&Дата КАК Период,
	|	Строки.Организация КАК Организация,
	|	"""" КАК ИдентификаторСтроки,
	|	
	|	Строки.СуммаБУ КАК Сумма,
	|	
	|	// Дт ///////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеОперации) КАК ВидСчетаДт,
	|	Строки.СтатьяРасходов КАК АналитикаУчетаДт,
	|	Строки.Подразделение КАК МестоУчетаДт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначениеДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	Строки.СуммаНУ КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	// Кт ///////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	МестонахождениеОС.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначениеКт,
	|
	|	СчетаОтражения.СчетНачисленияАмортизации КАК СчетКт,
	|	Строки.ОбъектУчета КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	Строки.СуммаНУ КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	
	|	/////////////////////////////////////////////////////////////////////////////////////////////////
	|	
	|	""Начисление амортизации"" КАК Содержание
	|ИЗ
	|	втНачисленнаяАмортизация КАК Строки
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиНаПрочиеАктивы
	|	ПО Строки.СтатьяРасходов = СтатьиНаПрочиеАктивы.Ссылка
	|		И СтатьиНаПрочиеАктивы.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ втМестонахожденияОС КАК МестонахождениеОС
	|	ПО Строки.ОбъектУчета = МестонахождениеОС.ОбъектУчета
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСчетаОтражения КАК СчетаОтражения
	|	ПО Строки.ОбъектУчета = СчетаОтражения.ОбъектУчета
	|
	|";
	
КонецФункции


#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//ПОСТУПЛЕНИЕ ОБОРУДОВАНИЯ

Процедура СформироватьДвиженияПоступлениеОборудования(ТаблицаТовары, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПоступлениеОборудования(ТаблицаТовары, ТаблицаРеквизиты);

	Если Параметры.ТаблицаТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	СпособОценкиМПЗ         = Перечисления.СпособыОценки.ПоСредней;
	ВедетсяУчетПоПартиям    = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТаблицы.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Реквизиты.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		КонецЕсли;

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаТаблицы.Количество;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеОборудования(ТаблицаТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"        // <СправочникСсылка.Номенклатура> - поступающий оборудование
	+ "СуммаВзаиморасчетов," // <Число,15,2> - сумма в валюте взаиморасчетов с поставщиком
	+ "СуммаБУ,"             // <Число,15,2> - сумма в гривнах
	+ "СуммаНУ,"             // <Число,15,2> - сумма в гривнах (НУ)
	+ "Количество,"          // <Число,15,3> - количество поступающего оборудования
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется оборудование
	+ "Содержание";          // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаТовары", ТаблицаТовары.Скопировать(, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает оборудование
	+ "Подразделение,"                  // Подразделение, в которое поступает оборудование
	+ "Склад,"                          // <СправочникСсылка.Склады> - склад, на который поступает оборудование
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты> - поставщик оборудования
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому поступает оборудование
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с поставщиком, обычно 60.01
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов с поставщиком

	Параметры.Вставить("Реквизиты", ТаблицаРеквизиты.Скопировать(, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПОСТУПЛЕНИЕ ОБЪЕКТОВ СТРОИТЕЛЬСТВА

Процедура СформироватьДвиженияПоступлениеОбъектовСтроительства(ТаблицаОбъектыСтроительства, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПоступлениеОбъектовСтроительства(ТаблицаОбъектыСтроительства, ТаблицаРеквизиты);

	Если Параметры.ОбъектыСтроительства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из Параметры.ОбъектыСтроительства Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;
		

		Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТаблицы.ОбъектСтроительства);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТаблицы.СтатьяЗатрат);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеОбъектовСтроительства(ТаблицаОбъектыСтроительства, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ОбъектыСтроительства

	СписокОбязательныхКолонок = ""
	+ "ОбъектСтроительства," // <СправочникСсылка.ОбъектыСтроительства> - объект строительства, на который относятся затраты
	+ "СтатьяЗатрат,"        // <СправочникСсылка.СтатьиЗатрат>
	+ "СуммаВзаиморасчетов," // <Число,15,2> - сумма в валюте взаиморасчетов с поставщиком
	+ "СуммаБУ,"             // <Число,15,2> - сумма в гривнах
	+ "СуммаНУ,"             // <Число,15,2> - сумма в гривнах (НУ)
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который относятся затраты
	+ "Содержание";          // <Строка,150> - содержание проводки

	Параметры.Вставить("ОбъектыСтроительства", ТаблицаОбъектыСтроительства.Скопировать(, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает товар
	+ "Подразделение,"                  // Подразделение, в которое поступает товар
	+ "Склад,"                          // <СправочникСсылка.Склады> - склад, на который поступает товар
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты> - поставщик товара
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому поступает товар
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с поставщиком, обычно 60.01
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов с поставщиком

	Параметры.Вставить("Реквизиты", ТаблицаРеквизиты.Скопировать(, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПРИНЯТИЕ К УЧЕТУ ОС - ОБЪЕКТЫ СТРОИТЕЛЬСТВА

Процедура СформироватьДвиженияПринятиеКУчетуОСОбъектыСтроительства(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПринятиеКУчетуОСОбъектыСтроительства(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого СтрокаТаблицы Из ТаблицаОС Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = НСтр("ru='Принят к учету объект ОС';uk='Прийнятий до обліку об''єкт ОЗ'");

		Проводка.СчетДт = Реквизиты.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.ПодразделениеДт;
		КонецЕсли;

		Проводка.СчетКт = Реквизиты.СчетУчетаВнеоборотногоАктива;

		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", Реквизиты.ОбъектСтроительства);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.ПодразделениеКт;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеКУчетуОСОбъектыСтроительства(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "СуммаБУ,"          // <Число, 15, 2> - стоимость ОС по данным бухгалтерского учета
	+ "СуммаНУ,"          // <Число, 15, 2> - стоимость ОС по данным налогового учета
	+ "СуммаПР,"          // <Число, 15, 2> - постоянные разницы в стоимости ОС (ПБУ 18/02)
	+ "СуммаВР";          // <Число, 15, 2> - временные разницы в стоимости ОС (ПБУ 18/02)

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата>
	+ "ОбъектСтроительства,"          // <СправочникСсылка.ОбъектыСтроительства> - объект строительства с которого
	                                  // списывается стоимость ОС
	+ "Организация,"                  // <СправочникСсылка.Организации>
	+ "ПодразделениеДт,"              // 
	+ "ПодразделениеКт,"              // 
	+ "Регистратор,"                  // <ДокументСсылка.*>
	+ "СчетУчета,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет на который принимается к учету ОС
	+ "СчетУчетаВнеоборотногоАктива"; // <ПланСчетовСсылка.Хозрасчетный> - счет учета объекта строительства

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПРИНЯТИЕ К УЧЕТУ ОС - ПО РЕЗУЛЬТАТАМ ИНВЕНТАРИЗАЦИИ

Процедура СформироватьДвиженияПринятиеКУчетуОСПоРезультатамИнвентаризации(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПринятиеКУчетуОСПоРезультатамИнвентаризации(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из ТаблицаОС Цикл

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = НСтр("ru='Принят к учету объект ОС';uk='Прийнятий до обліку об''єкт ОЗ'");

		Проводка.СчетДт = Реквизиты.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.ПодразделениеДт;
		КонецЕсли;
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ДругиеДоходы;

		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", Реквизиты.СтатьяДоходов);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.ПодразделениеКт;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеКУчетуОСПоРезультатамИнвентаризации(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "СуммаБУ,"          // <Число, 15, 2> - стоимость ОС по данным бухгалтерского учета
	+ "СуммаНУ";          // <Число, 15, 2> - стоимость ОС по данным налогового учета

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"              // <Дата>
	+ "Организация,"         // <СправочникСсылка.Организации>
	+ "ПодразделениеДт,"       // 
	+ "ПодразделениеКт,"       // 
	+ "Регистратор,"         // <ДокументСсылка.*>
	+ "СтатьяДоходов,"       // <СправочникСсылка.ПрочиеДоходыИРасходы> - статья, по которой будет отражена выручка по
	                         // оприходванию объекта ОС
	+ "СчетУчета";           // <ПланСчетовСсылка.Хозрасчетный> - счет учета ОС

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СПИСАНИЕ ОС НА РАСХОДЫ (НУ) ПРИ ПРИНЯТИИ К УЧЕТУ
Функция ПодготовитьТаблицуСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	ТаблицаДляСписания = Параметры.ТаблицаПервоначальныеСведенияОС;

	ТаблицаДляСписания.Колонки.ОсновноеСредство.Имя = "ОбъектУчета";
	ТаблицаДляСписания.Колонки.Добавить("СчетНачисленияАмортизации", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.СчетУчета, "СчетНачисленияАмортизации");
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииБУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииПР", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииВР", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаДляСписания.Колонки.СуммаНУ.Имя = "СуммаАмортизацииНУ";
	ТаблицаДЛяСписания.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
	ТаблицаДляСписания.Колонки.Добавить("НомерСтроки", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(5, 0));
	ТаблицаДляСписания.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	ТаблицаДляСписания.Колонки.Добавить("АналитикаРасходов", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);

	// Распределение стоимости по направлениям.
	ТаблицаЗатратПоАмортизации = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(ТаблицаДляСписания, Параметры.Реквизиты, Отказ);
	

	Возврат ТаблицаЗатратПоАмортизации;

КонецФункции

Функция ПодготовитьПараметрыСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "СуммаНУ";          // <Число, 15, 2> - сумма, относимая на расходы (НУ)

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                   // <Дата>
	+ "Организация,"                              // <СправочникСсылка.Организации>
	+ "Подразделение,"                            // 
	+ "ПорядокПогашенияСтоимостиБУ,"              // <ПеречислениеСсылка.ПорядокПогашенияСтоимостиОС> - порядок погашения
		// стоимости ОС
	+ "Регистратор,"                              // <ДокументСсылка.*>
	+ "СчетУчета,"                                // <ПланСчетовСсылка.Хозрасчетный> - счет на котором формируется
		// стоимость ОС
	+ "Содержание,"                              // <Строка, 150>
	+ "ИмяСписка";                               // <Строка>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПРОВЕРКИ ДАННЫХ ОС НА КОРРЕКТНОСТЬ

Процедура ПроверитьСоответствиеОСОрганизации(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыСоответствиеОСОрганизации(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОбъектыЭксплуатации) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБУ.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ПервоначальныеСведенияОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБУ.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСБУ КАК ПервоначальныеСведенияОСБУ
	|		ПО ТаблицаОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство
	|ГДЕ
	|	ПервоначальныеСведенияОСБУ.ОсновноеСредство ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияБУ = НСтр("ru='Основное средство <%1 (%2)> не отражалось в бухгалтерском учете по организации <%3>';uk='Основний засіб <%1 (%2)> не відображався в бухгалтерському обліку по організації <%3>'");

		Пока Выборка.Следующий() Цикл
			
			Если НЕ Выборка.ОтражалосьВБухгалтерскомУчете Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияБУ,
					Выборка.ОсновноеСредство, Выборка.КодОС, Реквизиты.Организация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;
				
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСоответствиеОСОрганизации(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСостояниеОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыСостояниеОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОбъектыЭксплуатации) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.ДатаСостояния,
	|	СостоянияОСОрганизаций.Регистратор,
	|	СостоянияОСОрганизаций.Состояние,
	|	СостоянияОСОрганизаций.Организация
	|ПОМЕСТИТЬ СостоянияОС
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
	|			И (СостоянияОСОрганизаций.ДатаСостояния < &Дата)
	|			И (СостоянияОСОрганизаций.Организация = &Организация)
	|			И (СостоянияОСОрганизаций.Активность = ИСТИНА)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(СостоянияОС.ДатаСостояния) КАК ДатаСостояния
	|ПОМЕСТИТЬ ДатыПоследнихСостоянийОС
	|ИЗ
	|	СостоянияОС КАК СостоянияОС
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОС.ДатаСостояния,
	|	СостоянияОС.Регистратор,
	|	СостоянияОС.Организация,
	|	СостоянияОС.Состояние
	|ПОМЕСТИТЬ ПоследниеСостоянияОС
	|ИЗ
	|	ДатыПоследнихСостоянийОС КАК ДатыПоследнихСостоянийОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияОС КАК СостоянияОС
	|		ПО ДатыПоследнихСостоянийОС.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|			И ДатыПоследнихСостоянийОС.ДатаСостояния = СостоянияОС.ДатаСостояния
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ПоследниеСостоянияОС.ДатаСостояния,
	|	ПоследниеСостоянияОС.Регистратор,
	|	ПоследниеСостоянияОС.Организация,
	|	ПоследниеСостоянияОС.Состояние
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеСостоянияОС КАК ПоследниеСостоянияОС
	|		ПО ТаблицаОС.ОсновноеСредство = ПоследниеСостоянияОС.ОсновноеСредство
	|ГДЕ
	|	(ПоследниеСостоянияОС.Состояние ЕСТЬ NULL
	|			ИЛИ ПоследниеСостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			Если Выборка.Состояние = Null Тогда
				ШаблонСообщения = НСтр("ru='По состоянию на %4.
                    |Основное средство <%1 (%2)> не принято к учету в организации <%3>.'
                    |;uk='Станом на %4.
                    |Основний засіб <%1 (%2)> не прийнято до обліку в організації <%3>.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
					Выборка.КодОС, Реквизиты.Организация, Формат(Реквизиты.Период, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			Иначе
				ШаблонСообщения = НСтр("ru='Основное средство <%1 (%2)> снято с учета в организации <%3>
                    |документом <%4>. Дата состояния: %5'
                    |;uk='Основний засіб <%1 (%2)> знято з обліку в організації <%3>
                    |документом <%4>. Дата стану: %5'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
					Выборка.КодОС, Реквизиты.Организация, Выборка.Регистратор, Формат(Выборка.ДатаСостояния, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;

		Возврат;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСостояниеОСПринятоКУчету(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <ДокументСсылка.*>
	+ "Регистратор"; // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСоответствиеМестонахожденияОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыСоответствиеМестонахожденияОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("МОЛ", Реквизиты.МОЛ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОбъектыЭксплуатации) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБУ.МОЛ,
	|	МестонахождениеОСБУ.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ МестонахождениеОСБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК МестонахождениеОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	МестонахождениеОСБУ.МОЛ,
	|	МестонахождениеОСБУ.Подразделение
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБУ КАК МестонахождениеОСБУ
	|		ПО ТаблицаОС.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство
	|ГДЕ
	|	(МестонахождениеОСБУ.ОсновноеСредство ЕСТЬ NULL
	|			ИЛИ МестонахождениеОСБУ.Подразделение <> &Подразделение
	|			ИЛИ &МОЛ <> НЕОПРЕДЕЛЕНО
	|				И МестонахождениеОСБУ.МОЛ <> &МОЛ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияПодразделение = НСтр("ru='Основное средство <%1 (%2)> не отражалось в учете в местонахождении <%3>';uk='Основний засіб <%1 (%2)> не відображався в обліку в місцезнаходженні <%3>'");
		ШаблонСообщенияМОЛ = НСтр("ru='Основное средство <%1 (%2)> не отражалось в учете за МОЛ <%3>';uk='Основний засіб <%1 (%2)> не відображали в обліку за МВО <%3>'");

		Пока Выборка.Следующий() Цикл
			Если Выборка.Подразделение <> Реквизиты.Подразделение Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияПодразделение,
					Выборка.ОсновноеСредство, Выборка.КодОС, Реквизиты.Подразделение);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;

			Если Реквизиты.МОЛ <> Неопределено И Выборка.МОЛ <> Реквизиты.МОЛ Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияМОЛ,
					Выборка.ОсновноеСредство, Выборка.КодОС, Реквизиты.МОЛ);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСоответствиеМестонахожденияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "ИмяСписка,"     // <Строка, 0>
	+ "МОЛ,"           // <СправочникСсылка.ФизическиеЛица> - МОЛ, за которым закреплено ОС
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // Подразделение в котором находится ОС
	+ "Регистратор";   // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьЗаполнениеСчетаУчетаОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыЗаполнениеСчетаУчетаОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОбъектыЭксплуатации) КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ СчетаУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
	|	СчетаУчетаОС.СчетУчета
	|ИЗ
	|	ТаблицаОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	СчетаУчетаОС
	|	ПО
	|		ТаблицаОС.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
	|ГДЕ
	|	(СчетаУчетаОС.ОсновноеСредство ЕСТЬ NULL
	|			ИЛИ СчетаУчетаОС.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщения = НСтр("ru='Для основного средства <%1 (%2)> не указан счет учета.';uk='Для основного засобу <%1 (%2)> не вказано рахунок обліку.'");

		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Выборка.ОсновноеСредство, Выборка.КодОС);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
				+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыЗаполнениеСчетаУчетаОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ПроверитьСоответствиеОСНалоговомуНазначению(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыСоответствиеОСНалоговомуНазначению(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("НалоговоеНазначение", Реквизиты.НалоговоеНазначение);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОС.НомерСтроки,
		|	ВЫРАЗИТЬ(ТаблицаОС.ОсновноеСредство КАК Справочник.ОбъектыЭксплуатации) КАК ОсновноеСредство
		|ПОМЕСТИТЬ ТаблицаОС
		|ИЗ
		|	&ТаблицаОС КАК ТаблицаОС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОС.НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство,
		|	ТаблицаОС.ОсновноеСредство.Код КАК КодОС,
		|	НалоговыеНазначенияОССрезПоследних.НалоговоеНазначение
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НалоговыеНазначенияОС.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ТаблицаОС.ОсновноеСредство
		|						ИЗ
		|							ТаблицаОС КАК ТаблицаОС)) КАК НалоговыеНазначенияОССрезПоследних
		|		ПО ТаблицаОС.ОсновноеСредство = НалоговыеНазначенияОССрезПоследних.ОсновноеСредство
		|ГДЕ
		|	НалоговыеНазначенияОССрезПоследних.НалоговоеНазначение <> &НалоговоеНазначение";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщенияБУ = НСтр("ru='Налоговое Назначение ОС <%1 (%2)> отличается от указанного в документе <%3>';uk='Податкове Призначення ОЗ <%1 (%2)> відрізняється від зазначеного в документі <%3>'");

		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияБУ,
				Выборка.ОсновноеСредство, Выборка.КодОС, Реквизиты.НалоговоеНазначение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
				+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
				
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыСоответствиеОСНалоговомуНазначению(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "НалоговоеНазначение," // <СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции		

// РЕГИСТРАЦИЯ СОБЫТИЙ ОС

Процедура СформироватьДвиженияРегистрацияСобытияОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияСобытияОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	НазваниеДокумента = Реквизиты.Регистратор.Метаданные().Представление();

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СобытияОСОрганизаций.Добавить();
		Движение.Период            = Реквизиты.Период;
		Движение.ОсновноеСредство  = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация       = Реквизиты.Организация;
		Движение.Событие           = Реквизиты.СобытиеОС;
		Движение.НазваниеДокумента = НазваниеДокумента;
		Движение.НомерДокумента    = Реквизиты.Номер;
		Движение.СуммаЗатратБУ     = СтрокаТаблицы.СуммаЗатратБУ;
		Движение.СуммаЗатратНУ     = СтрокаТаблицы.СуммаЗатратНУ;
	КонецЦикла;

	Движения.СобытияОСОрганизаций.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияСобытияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "СуммаЗатратБУ,"    // <Число, 15, 2> - сумма затрат по бухгалтерскому учету при модернизации ОС
	+ "СуммаЗатратНУ,"    // <Число, 15, 2> - сумма затрат по налоговому учету при модернизации ОС
	;   

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             // <Дата>
	+ "Номер,"              // <Строка, 0> - номер документа, отразившего событие
	+ "Организация,"        // <СправочникСсылка.Организации>
	+ "СобытиеОС,"          // <СправочникСсылка.СобытияОС> - событие с ОС
	+ "Регистратор";        // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// РЕГИСТРАЦИЯ СОСТОЯНИЯ ОС

Процедура ПроверитьВозможностьИзмененияСостоянияОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыВозможностьИзмененияСостоянияОС(ТаблицаОС, ТаблицаРеквизиты);
	
	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация );
	Запрос.УстановитьПараметр("Состояние", Реквизиты.СостояниеОС);
	Запрос.УстановитьПараметр("Документ", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	
	Запрос.Выполнить();
	
	Если Реквизиты.СостояниеОС = Перечисления.СостоянияОС.ПринятоКУчету
		Или Реквизиты.СостояниеОС = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету Тогда
		Запрос.УстановитьПараметр("Дата", Реквизиты.Период);
		Запрос.УстановитьПараметр("Документ", Реквизиты.Регистратор);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
		|	СостоянияОСОрганизаций.ДатаСостояния,
		|	ТаблицаОС.НомерСтроки,
		|	СостоянияОСОрганизаций.Регистратор,
		|	СостоянияОСОрганизаций.Состояние,
		|	СостоянияОСОрганизаций.Организация
		|ПОМЕСТИТЬ СостоянияОС
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
		|		ПО СостоянияОСОрганизаций.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
		|			И (СостоянияОСОрганизаций.ДатаСостояния < &Дата)
		|			И (СостоянияОСОрганизаций.Регистратор <> &Документ)
		|			И (СостоянияОСОрганизаций.Активность = ИСТИНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
		|	МАКСИМУМ(СостоянияОС.ДатаСостояния) КАК ДатаСостояния
		|ПОМЕСТИТЬ ДатыПоследнихСостоянийОС
		|ИЗ
		|	СостоянияОС КАК СостоянияОС
		|
		|СГРУППИРОВАТЬ ПО
		|	СостоянияОС.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияОС.ОсновноеСредство,
		|	СостоянияОС.ОсновноеСредство.Код КАК КодОС,
		|	СостоянияОС.ДатаСостояния,
		|	СостоянияОС.НомерСтроки КАК НомерСтроки,
		|	СостоянияОС.Регистратор,
		|	СостоянияОС.Организация
		|ИЗ
		|	ДатыПоследнихСостоянийОС КАК ДатыПоследнихСостоянийОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияОС КАК СостоянияОС
		|		ПО ДатыПоследнихСостоянийОС.ОсновноеСредство = СостоянияОС.ОсновноеСредство
		|			И ДатыПоследнихСостоянийОС.ДатаСостояния = СостоянияОС.ДатаСостояния
		|ГДЕ
		|	СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|	ИЛИ СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			
			ШаблонСообщения = НСтр("ru='Основное средство <%1 (%2)> принято к учету в организации <%3>
                |документом <%4>. Дата состояния: %5'
                |;uk='Основний засіб <%1 (%2)> прийнято до обліку в організації <%3>
                |документом <%4>. Дата стану: %5'");
			
			Пока Выборка.Следующий() Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
					Выборка.КодОС, Выборка.Организация, Выборка.Регистратор, Формат(Выборка.ДатаСостояния, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Реквизиты.Регистратор, Реквизиты.ИмяСписка + "["
					+ Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].ОсновноеСредство", "Объект", Отказ);
			КонецЦикла;
			
			Возврат;
		КонецЕсли;
	ИначеЕсли Реквизиты.СостояниеОС = Перечисления.СостоянияОС.СнятоСУчета Тогда
		ПроверитьСостояниеОСПринятоКУчету(Параметры.ТаблицаОС, Параметры.Реквизиты, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВозможностьИзмененияСостоянияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ИмяСписка,"   // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "СостояниеОС," // <ПеречислениеСсылка.СостоянияОС> - состояние ОС, которое требуется установить
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияИзменениеСостоянияОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеСостоянияОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СостоянияОСОрганизаций.Добавить();
		Движение.Период           = Реквизиты.Период;
		Движение.ДатаСостояния    = Реквизиты.Период;
		Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация      = Реквизиты.Организация;
		Движение.Состояние        = Реквизиты.СостояниеОС;
	КонецЦикла;

	Движения.СостоянияОСОрганизаций.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСостоянияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"           // <Дата>
	+ "Организация,"      // <СправочникСсылка.Организации>
	+ "СостояниеОС";      // <ПеречислениеСсылка.СостоянияОС> - состояние ОС, которое требуется установить

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПЕРВОНАЧАЛЬНЫЕ СВЕДЕНИЯ ОС

Функция ПодготовитьТаблицуПервоначальныеСведенияОС(ТаблицаОС, ТаблицаСписанныеТовары, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПервоначальныеСведенияОС(ТаблицаОС, ТаблицаСписанныеТовары, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ПервоначальныеСведенияОС = Новый ТаблицаЗначений;
	ПервоначальныеСведенияОС.Колонки.Добавить("НомерСтроки");
	ПервоначальныеСведенияОС.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОбъектыЭксплуатации"));
	ПервоначальныеСведенияОС.Колонки.Добавить("ИнвентарныйНомер",
		ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(9));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаБУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаНУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаПР", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаВР", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ПервоначальныеСведенияОС.Колонки.Добавить("СуммаУСН", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));

	Если Реквизиты.ИспользоватьСуммыСписания Тогда
		Для каждого СтрокаСписания Из Параметры.ТаблицаСписанныеТовары Цикл
			СтрокаПервоначальнойСтоимости = ПервоначальныеСведенияОС.Добавить();
			СтрокаПервоначальнойСтоимости.СуммаБУ  = СтрокаСписания.СуммаСписания;
			СтрокаПервоначальнойСтоимости.СуммаНУ  = СтрокаСписания.СуммаСписанияНУ;
			СтрокаПервоначальнойСтоимости.СуммаПР  = 0;
			СтрокаПервоначальнойСтоимости.СуммаВР  = 0;
			СтрокаПервоначальнойСтоимости.СуммаУСН = 0;			
			

			ЗаполнитьЗначенияСвойств(СтрокаПервоначальнойСтоимости, ТаблицаОС[СтрокаСписания.НомерСтроки - 1]);
		КонецЦикла;
	Иначе
		Для каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
			СтрокаПервоначальнойСтоимости = ПервоначальныеСведенияОС.Добавить();
			СтрокаПервоначальнойСтоимости.СуммаБУ  = Реквизиты.СуммаБУ;
			СтрокаПервоначальнойСтоимости.СуммаНУ  = Реквизиты.СуммаНУ;
			СтрокаПервоначальнойСтоимости.СуммаПР  = 0;
			СтрокаПервоначальнойСтоимости.СуммаВР  = 0;
			СтрокаПервоначальнойСтоимости.СуммаУСН = 0;

			ЗаполнитьЗначенияСвойств(СтрокаПервоначальнойСтоимости, СтрокаОС);
		КонецЦикла;
	КонецЕсли;

	Возврат ПервоначальныеСведенияОС;

КонецФункции

Функция ПодготовитьПараметрыПервоначальныеСведенияОС(ТаблицаОС, ТаблицаСписанныеТовары, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ИнвентарныйНомер," // <Строка, 9> - инвентарный номер, под которым ОС принимается к учету
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаСписанныеТовары

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0> - номер строки табличной части документа
	+ "СуммаСписания,"    // <Число, 15, 2> - стоимость списанной партии по данным бухгалтерского учета
	+ "СуммаСписанияНУ,"  // <Число, 15, 2> - стоимость списанной партии по данным налогового учета
	+ "СуммаСписанияПР,"  // <Число, 15, 2> - постоянные разницы в стоимости списанной партии (ПБУ 18/02)
	+ "СуммаСписанияВР";  // <Число, 15, 2> - временные разницы в стоимости списанной партии (ПБУ 18/02)

	Параметры.Вставить("ТаблицаСписанныеТовары",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанныеТовары, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ИспользоватьСуммыСписания,"    // <Булево> - использовать стоимость списанных партий для определения стоимости ОС
	+ "СуммаБУ,"                      // <Число, 15, 2> - стоимость ОС по данным бухгалтерского учета
	+ "СуммаНУ,"                      // <Число, 15, 2> - стоимость ОС по данным налогового учета
	+ "СуммаПР,"                      // <Число, 15, 2> - постоянные разницы в стоимости ОС (ПБУ 18/02)
	+ "СуммаВР,"                      // <Число, 15, 2> - временные разницы в стоимости ОС (ПБУ 18/02)
	+ "СуммаУСН";                     // <Число, 15, 2> - стоимость ОС по данным УСН

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаПервоначальныеСведенияОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПервоначальныеСведенияОС Цикл
		Движение = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Добавить();
		Движение.Период                      = Реквизиты.Период;
		Движение.ОсновноеСредство            = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                 = Реквизиты.Организация;
		Движение.ПервоначальнаяСтоимость     = СтрокаТаблицы.СуммаБУ;
		Движение.СпособНачисленияАмортизации = Реквизиты.СпособНачисленияАмортизации;
		Движение.ИнвентарныйНомер            = СтрокаТаблицы.ИнвентарныйНомер;
		Движение.ПоказательНаработки         = Реквизиты.ПоказательНаработки;
		Движение.ЛиквидационнаяСтоимость         = Реквизиты.ЛиквидационнаяСтоимостьБУ;
	КонецЦикла;

	Движения.ПервоначальныеСведенияОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ИнвентарныйНомер," // <Строка, 9> - инвентарный номер, под которым ОС принимается к учету
	+ "ОсновноеСредство," // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "СуммаБУ";          // <Число, 15, 2> - стоимость ОС по данным бухгалтерского учета

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                      // <Дата>
	+ "Организация,"                 // <СправочникСсылка.Организации>
	+ "ПоказательНаработки,"           // <СправочникСсылка.ПоказателиНаработки> - парамтр для определения выработки ОС
		// за месяц
		// по бухгалтерскому учету
	+ "СпособНачисленияАмортизации," // <ПеречислениеСсылка.СпособыНачисленияАмортизацииОС> - способ начисления
		// амортизации ОС по бухгалтерскому учету
	+ "ЛиквидационнаяСтоимость";

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуПервоначальныеСведенияОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПервоначальныеСведенияОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если ОтражатьВНалоговомУчете Тогда
		ТаблицаПервоначальныеСведенияОСНУ = Параметры.ТаблицаПервоначальныеСведенияОС.Скопировать();
	Иначе
		ТаблицаПервоначальныеСведенияОСНУ = Параметры.ТаблицаПервоначальныеСведенияОС.СкопироватьКолонки();
	КонецЕсли;

	Возврат ТаблицаПервоначальныеСведенияОСНУ;

КонецФункции

Функция ПодготовитьПараметрыПервоначальныеСведенияОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "СуммаНУ,"          // <Число, 0, 0> - стоимость ОС по данным налогового учета
	+ "СуммаПР";          // <Число, 0, 0> - стоимость ОС по данным налогового учета

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                   // <Дата>
	+ "Организация,"                              // <СправочникСсылка.Организации>
	+ "СрокПолезногоИспользования,"               // <Число, 4, 0> - срок полезного использования для целей
	                                              // начисления амортизации по налоговому учету
	+ "СпособНачисленияАмортизацииНУ,"
	+ "НалоговоеНазначение"
	;
	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийОСНУ(ТаблицаПервоначальныеСведенияОСНУ, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСНУ(ТаблицаПервоначальныеСведенияОСНУ, ТаблицаРеквизиты);

	Если Параметры.ТаблицаПервоначальныеСведенияОСНУ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПервоначальныеСведенияОСНУ Цикл
		Движение = Движения.ПервоначальныеСведенияОСНалоговыйУчет.Добавить();
		Движение.Период                                   = Реквизиты.Период;
		Движение.ОсновноеСредство                         = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                              = Реквизиты.Организация;
		Движение.ПорядокВключенияСтоимостиВСоставРасходов = Реквизиты.ПорядокВключенияСтоимостиВСоставРасходов;
		Движение.ПервоначальнаяСтоимостьНУ                = СтрокаТаблицы.СуммаНУ;
		Движение.СпособНачисленияАмортизацииНУ            = Реквизиты.СпособНачисленияАмортизацииНУ;
		Движение.НалоговоеНазначение                	  = Реквизиты.НалоговоеНазначение;
	КонецЦикла;

	Движения.ПервоначальныеСведенияОСНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийОСНУ(ТаблицаПервоначальныеСведенияОСНУ, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОСНУ

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "СуммаНУ";          // <Число, 15, 2> - первоначальная стоимость ОС по данным налогового учета

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОСНУ",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОСНУ, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                   // <Дата>
	+ "Организация,"                              // <СправочникСсылка.Организации>
	+ "СрокПолезногоИспользования";               // <Число, 4, 0> - срок полезного использования ОС для целей начисления
		// амортизации по налоговому учету

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


// МЕСТОНАХОЖДЕНИЕ ОС

Процедура СформироватьДвиженияИзменениеМестонахожденияОСБУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеМестонахожденияОСБУ(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.МестонахождениеОСБухгалтерскийУчет.Добавить();
		Движение.Период           = Реквизиты.Период;
		Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация      = Реквизиты.Организация;
		Движение.Местонахождение  = Реквизиты.Местонахождение;
		Движение.МОЛ              = Реквизиты.МОЛ;
	КонецЦикла;

	Движения.МестонахождениеОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеМестонахожденияОСБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"          // <Дата>
	+ "Местонахождение," // 
	+ "МОЛ,"             // <СправочникСсылка.ФизическиеЛица> - МОЛ, за которым закреплено ОС
	+ "Организация";     // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// НАЧИСЛЕНИЕ АМОРТИЗАЦИИ ОС (БУ) (признак)

Процедура СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеПризнакаНачисленияАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период               = Реквизиты.Период;
		Движение.ОсновноеСредство     = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация          = Реквизиты.Организация;
		Движение.НачислятьАмортизацию = Реквизиты.НачислятьАмортизацию;
	КонецЦикла;

	Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеПризнакаНачисленияАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"               // <Дата>
	+ "НачислятьАмортизацию," // <Булево> - признак необходимости начисления амортизации по бухгалтерскому учету
	+ "Организация";          // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// НАЧИСЛЕНИЕ АМОРТИЗАЦИИ ОС (НУ) (признак)

Процедура СформироватьДвиженияИзменениеПризнакаНачисленияАмортизацииОСНУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеПризнакаНачисленияАмортизацииОСНУ(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
		Движение.Период               = Реквизиты.Период;
		Движение.ОсновноеСредство     = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация          = Реквизиты.Организация;
		Движение.НачислятьАмортизацию = Реквизиты.НачислятьАмортизацию;
	КонецЦикла;

	Движения.НачислениеАмортизацииОСНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеПризнакаНачисленияАмортизацииОСНУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "НачислятьАмортизацию,"      // <Булево> - признак необходимости начисления амортизации по налоговому учету
	+ "Организация";               // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ОТРАЖЕНИЕ ОС В УЧЕТЕ

Процедура СформироватьДвиженияРегистрацияСчетовБухгалтерскогоУчетаОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияСчетовБухгалтерскогоУчетаОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СчетаБухгалтерскогоУчетаОС.Добавить();
		Движение.Период                    = Реквизиты.Период;
		Движение.ОсновноеСредство          = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация               = Реквизиты.Организация;
		Движение.СчетУчета                 = Реквизиты.СчетУчета;
		Движение.СчетНачисленияАмортизации = Реквизиты.СчетНачисленияАмортизации;
		Движение.СчетУчетаДооценокОС 	   = Реквизиты.СчетУчетаДооценокОС;
	КонецЦикла;

	Движения.СчетаБухгалтерскогоУчетаОС.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияСчетовБухгалтерскогоУчетаОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "СчетНачисленияАмортизации," // <ПланСчетовСсылка.Хозрасчетный> - счет начисления амортизации ОС
	+ "СчетУчета,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета ОС
	+ "СчетУчетаДооценокОС"        // <ПланСчетовСсылка.Хозрасчетный> - счет учета дооценок ОС
	;
	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияИзменениеСпособовОтраженияРасходовПоАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		Движение.ОсновноеСредство = СтрокаТаблицы.ОсновноеСредство;
	КонецЦикла;

	Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                // <Дата>
	+ "Организация,"                           // <СправочникСсылка.Организации>
	+ "СтатьяРасходов, АналитикаРасходов";
		// отражения расходов по амортизации ОС

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПАРАМЕТРЫ АМОРТИЗАЦИИ ОС (БУ)

Функция ПодготовитьТаблицуПараметрыАмортизацииОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПараметрыАмортизацииОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПараметров = Параметры.ТаблицаПервоначальныеСведенияОС.Скопировать();

	ТаблицаПараметров.Колонки.Добавить("ОбъемПродукцииРабот");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.ПредполагаемыйОбъемПродукции, "ОбъемПродукцииРабот");
	ТаблицаПараметров.Колонки.Добавить("СрокПолезногоИспользования");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.СрокПолезногоИспользования, "СрокПолезногоИспользования");
	ТаблицаПараметров.Колонки.Добавить("СрокИспользованияДляВычисленияАмортизации");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.СрокПолезногоИспользования, "СрокИспользованияДляВычисленияАмортизации");
	ТаблицаПараметров.Колонки.Добавить("ОбъемПродукцииРаботДляВычисленияАмортизации");
	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.ПредполагаемыйОбъемПродукции, "ОбъемПродукцииРаботДляВычисленияАмортизации");
	ТаблицаПараметров.Колонки.СуммаБУ.Имя = "СтоимостьДляВычисленияАмортизации";

	Возврат ТаблицаПараметров;

КонецФункции

Функция ПодготовитьПараметрыПараметрыАмортизацииОСБУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "СуммаБУ";          // <Число, 15, 2> - стоимость ОС для целей начисления амортизации (БУ)

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ГодоваяНормаАмортизации,"      // <Число, 4, 2> - годовая норма амортизации для способов начисления амортизации
	+ "Период,"                       // <Дата>
	+ "Организация,"                  // <СправочникСсылка.Организации>
	+ "ПредполагаемыйОбъемПродукции," // <Число, 10, 0> - предопологаемый объем продукции для начисления амортизации
	+ "СрокПолезногоИспользования";   // <Число, 4, 0> - срок полезного использования для начисления амортизации способами
		// "линейный", " по сумме чисел лет использования" и "уменьшаемого остатка". Используется  справочно и для других
		// способов

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияИзмененияПараметровАмортизацииОСБУ(ТаблицаПараметров, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзмененияПараметровАмортизацииОСБУ(ТаблицаПараметров, ТаблицаРеквизиты);

	Если Параметры.ТаблицаПараметров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПараметров Цикл
		Движение = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период                                      = Реквизиты.Период;
		Движение.ОсновноеСредство                            = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                                 = Реквизиты.Организация;
		Движение.ОбъемПродукцииРабот                         = СтрокаТаблицы.ОбъемПродукцииРабот;
		Движение.СрокПолезногоИспользования                  = СтрокаТаблицы.СрокПолезногоИспользования;
		Движение.СрокИспользованияДляВычисленияАмортизации   = СтрокаТаблицы.СрокИспользованияДляВычисленияАмортизации;
		Движение.СтоимостьДляВычисленияАмортизации           = СтрокаТаблицы.СтоимостьДляВычисленияАмортизации;
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаТаблицы.ОбъемПродукцииРаботДляВычисленияАмортизации;
	КонецЦикла;

	Движения.ПараметрыАмортизацииОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзмененияПараметровАмортизацииОСБУ(ТаблицаПараметров, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПараметров

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"                            // <СправочникСсылка.ОбъектыЭксплуатации>
		// амортизации "уменьшаемого остатка"
	+ "ОбъемПродукцииРабот,"                         // <Число, 10, 0> - предопологаемый объем продукции для начисления
		// амортизации  способом "пропорционально объему продукции"
	+ "ОбъемПродукцииРаботДляВычисленияАмортизации," // <Число, 10, 0> - предопологаемый объем продукции для начисления
		// амортизации  способом "пропорционально объему продукции"
	+ "СрокИспользованияДляВычисленияАмортизации,"   // <Число, 4, 2> - срок полезного использования для начисления
		// амортизации способами "линейный", " по сумме чисел лет использования" и "уменьшаемого остатка". Используется
		// справочно и для других способов
	+ "СрокПолезногоИспользования,"                  // <Число, 4, 2> - срок полезного использования для начисления
		// амортизации способами "линейный", " по сумме чисел лет использования" и "уменьшаемого остатка". Используется
		// справочно и для других способов
	+ "СтоимостьДляВычисленияАмортизации";           // <Число, 15, 2> - стоимость ОС для целей начисления амортизации (БУ)

	Параметры.Вставить("ТаблицаПараметров",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаПараметров, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата>
	+ "Организация";                  // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияИзменениеГрафиковДляАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеГрафиковДляАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	Если НЕ ЗначениеЗаполнено(Реквизиты.ГрафикАмортизации) Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаОС Цикл
		Движение = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет.Добавить();
		Движение.Период            = Реквизиты.Период;
		Движение.ОсновноеСредство  = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация       = Реквизиты.Организация;
		Движение.ГрафикАмортизации = Реквизиты.ГрафикАмортизации;
	КонецЦикла;

	Движения.ГрафикиАмортизацииОСБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеГрафиковДляАмортизацииОСБУ(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ГрафикАмортизации," // <СправочникСсылка.ГодовыеГрафикиАмортизацииОС> - график распределения амортизации по году.
	+ "Период,"            // <Дата>
	+ "Организация";       // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПАРАМЕТРЫ АМОРТИЗАЦИИ ОС (НУ)

Функция ПодготовитьТаблицуПараметрыАмортизацииОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаВключенияСтоимостиВРасходы, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПараметрыАмортизацииОСНУ(
		ТаблицаПервоначальныеСведенияОС,
		ТаблицаВключенияСтоимостиВРасходы, 
		ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПараметров = Параметры.ТаблицаПервоначальныеСведенияОС.Скопировать();

	ТаблицаПараметров.Колонки.Добавить("СрокПолезногоИспользования");

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат ТаблицаПараметров.СкопироватьКолонки();
	КонецЕсли;

	ТаблицаПараметров.ЗаполнитьЗначения(Реквизиты.СрокПолезногоИспользования, "СрокПолезногоИспользования");

	ТаблицаПР = Параметры.ТаблицаВключенияСтоимостиВРасходы;
	ТаблицаПР.Свернуть("ОбъектУчета", "СуммаПР");

	Для каждого СтрокаОС Из ТаблицаПараметров Цикл
		СтрокаТаблицыПР = ТаблицаПР.Найти(СтрокаОС.ОсновноеСредство, "ОбъектУчета");
		Если СтрокаТаблицыПР <> Неопределено Тогда
		КонецЕсли
	КонецЦикла;
	
	Возврат ТаблицаПараметров;

КонецФункции

Функция ПодготовитьПараметрыПараметрыАмортизацииОСНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаВключенияСтоимостиВРасходы, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "СуммаПР";          // <Число, 15, 2> - постоянные разницы (ПБУ 18/02) в стоимости ОС для целей начисления
		// амортизации

	Параметры.Вставить("ТаблицаПервоначальныеСведенияОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ТаблицаВключенияСтоимостиВРасходы

	СписокОбязательныхКолонок = ""
	+ "ОбъектУчета," // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "СуммаПР";     // <Число, 15, 2> - постоянные разницы (ПБУ 18/02) в стоимости ОС для целей начисления
		// амортизации

	Параметры.Вставить("ТаблицаВключенияСтоимостиВРасходы",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаВключенияСтоимостиВРасходы, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                     // <Дата>
	+ "Организация,"                // <СправочникСсылка.Организации>
	+ "СрокПолезногоИспользования"; // <Число, 4, 0> - срок полезного использования ОС для целей начисления амортизации по налоговому учету

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияИзменениеПараметровАмортизацииОСНУ(ТаблицаПараметров, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеПараметровАмортизацииОСНУ(ТаблицаПараметров, ТаблицаРеквизиты);

	Если Параметры.ТаблицаПараметров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаПараметров Цикл
		Движение = Движения.ПараметрыАмортизацииОСНалоговыйУчет.Добавить();
		Движение.Период                     = Реквизиты.Период;
		Движение.ОсновноеСредство           = СтрокаТаблицы.ОсновноеСредство;
		Движение.Организация                = Реквизиты.Организация;
		Движение.СрокПолезногоИспользования = СтрокаТаблицы.СрокПолезногоИспользования;
		//Движение.ПРДляВычисленияАмортизации = СтрокаТаблицы.ПРДляВычисленияАмортизации;
		Движение.СрокИспользованияДляВычисленияАмортизации = СтрокаТаблицы.СрокПолезногоИспользования;
		Движение.СтоимостьДляВычисленияАмортизации = СтрокаТаблицы.СтоимостьДляВычисленияАмортизации;
	КонецЦикла;

	Движения.ПараметрыАмортизацииОСНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеПараметровАмортизацииОСНУ(ТаблицаПараметров, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПараметров

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"           // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "СрокИспользованияДляВычисленияАмортизации,"
	+ "СтоимостьДляВычисленияАмортизации,"
	+ "СрокПолезногоИспользования"; // <Число, 4, 0> - срок полезного использования ОС для целей начисления амортизации
		// по налоговому учету

	Параметры.Вставить("ТаблицаПараметров",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаПараметров, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "Организация"; // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОТЛОЖЕННОЕ ПРИНЯТИЕ К УЧЕТУ ОС ПРИ РАСЧЕТЕ СЕБЕСТОМОСТИ РЕГЛАМЕНТНОЙ ОПЕРАЦИЕЙ

// Процедура СформироватьДвиженияПоСтоимостиОСПриПринятииКУчетуОтложенноеПроведение()
// формирует движения по дополнительным регистрам учета ОС после того, как становится известна
// стоимость списания оборудования со склада (сумма проводки Дт 01 - Кт 08.04). 
// Используется в случаях, когда момент списания себестоимости оборудования отличается 
// от момента принятия к учету ОС.
// 
// 
// Параметры:
//  ТаблицаСебестоимостьСписанныхТоваров - 	таблица значений со структурой как в функции 
//							  			   	УчетТоваровСервер.ПолучитьПустуюТаблицуСписанныеТовары() со следующими
//										 	значениями полей:
//		ПодразделениеОС 	- Подразделение учета ОС (Подразделение Дт), совпадает с МестонахождениемОС
//		ОсновноеСредство	- СправочникСсылка.ОбъектыЭксплуатации
//		СчетУчетаОС			- ПланСчетовСсылка.Хозрасчетный (например, 01.01)
//		Номенклатура		- СправочникСсылка.Номенклатура, позиция списанного оборудования (Номенклатура Кт)
//		Партия				- ДокументСсылка или НЕОПРЕДЕЛЕНО, если партинный учет не ведется
//		Период				- Дата проведения
//		ПодразделениеНоменклатуры	- Подразделение Кт
//		Склад				- СправочникСсылка.Склады, склад, с которого списано оборудование (Склад Кт)
//		СуммаВРОС			- Число, ВР в стоимости принимаемого ОС (СуммаВРДт)
//		СуммаНУОС			- Число, стоимость по НУ принимаемого ОС (СуммаНУДт)
//		СуммаПРОС			- Число, ПР в стоимости принимаемого ОС (СуммаПРДт)
//		СтоимостьБУ			- Число, стоимость БУ принимаемого ОС (Сумма)
//		СуммаВРНоменклатуры	- Число, ВР в стоимости списываемого оборудования (СуммаВРКт)
//		СуммаНУНоменклатуры - Число, стоимость по НУ списываемого оборудования (СуммаНУКт)
//		СуммаПРНоменклатуры - Число, ПР в стоимости списываемого оборудования (СуммаПРКт)
//		СчетУчетаНоменклатуры - ПланСчетовСсылка.Хозрасчетный (например, 08.04)
//
//  Организация			 	- СправочникСсылка.Организация.
//  ДатаДокумента			- Дата документа регистратора.
//  Регистратор			 	- Документ-регистратор, для которого будут записываться движения регистров ОС.
//							  В УП это, например, это документ расчета себестоимости списания.
//  Движения				- Коллекция наборов движений регистров.
//  Отказ					- Булево, признак отказа от проведения.
//
Процедура СформироватьДвиженияПоСтоимостиОСПриПринятииКУчетуОтложенноеПроведение(
										ТаблицаСебестоимостьСписанныхТоваров, 
										Организация, 
										ДатаДокумента, 
										Регистратор, 
										Движения, 
										Отказ) Экспорт

    // Подготовим ТаблицаСебестоимостьСписанныхТоваров к виду, используемому в процедурах принятия к учету ОС
    // по аналогии с тем, какую таблицу формирует УчетТоваровСервер.ПолучитьПустуюТаблицуСписанныеТовары().
    
	ПустаяТаблицаСписанныеТовары = ПолучитьПустуюТаблицуСписанныеТовары();

	ТаблицаСебестоимостьСписанныхТоваров.Колонки.ПодразделениеОС.Имя 			= "КорПодразделение";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.ОсновноеСредство.Имя 			= "КорСубконто1";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СчетУчетаОС.Имя 				= "КорСчетСписания";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.ПодразделениеНоменклатуры.Имя	= "Подразделение";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СуммаВРОС.Имя					= "СуммаКорСписанияВР";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СуммаНУОС.Имя					= "СуммаКорСписанияНУ";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СуммаПРОС.Имя					= "СуммаКорСписанияПР";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СтоимостьБУ.Имя				= "СуммаСписания";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СуммаВРНоменклатуры.Имя		= "СуммаСписанияВР";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СуммаНУНоменклатуры.Имя		= "СуммаСписанияНУ";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СуммаПРНоменклатуры.Имя		= "СуммаПРНоменклатуры";
	ТаблицаСебестоимостьСписанныхТоваров.Колонки.СчетУчетаНоменклатуры.Имя		= "СчетУчета";
    
	Для Каждого Колонка Из ПустаяТаблицаСписанныеТовары.Колонки Цикл
		Если ТаблицаСебестоимостьСписанныхТоваров.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			ТаблицаСебестоимостьСписанныхТоваров.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
    
	// Заполним одинаковые значения.
	ВидСубконтоОсновныеСредства = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
    ТаблицаСебестоимостьСписанныхТоваров.ЗаполнитьЗначения(ВидСубконтоОсновныеСредства, "ВидКорСубконто1");
    ТаблицаСебестоимостьСписанныхТоваров.ЗаполнитьЗначения("ОС", "ИмяСписка");
	ТаблицаСебестоимостьСписанныхТоваров.ЗаполнитьЗначения(1, "Количество");
	ТаблицаСебестоимостьСписанныхТоваров.ЗаполнитьЗначения(НСтр("ru='Основные средства';uk='Основні засоби'"), "СинонимСписка");
	ТаблицаСебестоимостьСписанныхТоваров.ЗаполнитьЗначения(0, "Себестоимость");
	
	// Пронумеруем таблицу.
	Для Н = 1 По ТаблицаСебестоимостьСписанныхТоваров.Количество() Цикл
		СтрокаТаблицы 				= ТаблицаСебестоимостьСписанныхТоваров[Н - 1];
		СтрокаТаблицы.НомерСтроки 	= Н;
	КонецЦикла;
	
	// Построим таблицы с необходимыми данными по учету ОС 
	// по аналогии с текстами в менеджере документа ПринятиеКУчетуОС.
	
	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ТаблицаОС", 		ТаблицаСебестоимостьСписанныхТоваров.Скопировать(,"КорСубконто1, НомерСтроки"));
	Запрос.УстановитьПараметр("ДатаКон", 		КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("ПлательщикНалогаНаПрибыль", УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаДокумента));
	Запрос.УстановитьПараметр("Регистратор", 	Регистратор);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТабОС.КорСубконто1 КАК Справочник.ОбъектыЭксплуатации) КАК ОсновноеСредство,
	|	ТабОС.НомерСтроки КАК НомерСтроки
	|
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТабОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство" 
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
	+ ПолучитьТекстЗапросаПринятиеКУчетуОСОтложенноеПроведениеБУ()
	+ ПолучитьТекстЗапросаПринятиеКУчетуОСОтложенноеПроведениеНУ()
	+ 
	"ВЫБРАТЬ
	|
	|	// ОсновныеСредства
	|
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство,
	|	ЕСТЬNULL(ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ИнвентарныйНомер, """") КАК ИнвентарныйНомер,
	|	
	|
	|	// ПервоначальныеСведенияОСБУ
	|
	|	&Регистратор КАК Регистратор,
	|	&ДатаКон КАК Период,
	|   ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.Регистратор КАК ДокументПринятияКУчету,
	|	&Организация КАК Организация,
	|	&ПлательщикНалогаНаПрибыль КАК ПлательщикНалогаНаПрибыль,
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ПоказательНаработки КАК ПоказательНаработки,
	|	ИСТИНА КАК ИспользоватьСуммыСписания,
	|	0 КАК СуммаБУ,
	|	0 КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	0 КАК СуммаВР,
	|	0 КАК СуммаУСН,
	|
	|
	| 	// ПервоначальныеСведенияОСНУ
	|
	|	ЕСТЬNULL(ВТ_ПараметрыАмортизацииОСНалоговыйУчет.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияНУ,
	|	ВТ_ПервоначальныеСведенияОСНалоговыйУчет.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	ВТ_ПервоначальныеСведенияОСНалоговыйУчет.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	ВТ_ПервоначальныеСведенияОСНалоговыйУчет.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|
	|
	|
	|	
	|	// ПараметрыАмортизацииОСБУ
	|
	|	ЕСТЬNULL(ВТ_ПараметрыАмортизацииОСБухгалтерскийУчет.ГодоваяНормаАмортизации, 0) КАК ГодоваяНормаАмортизации,
	|	ЕСТЬNULL(ВТ_ПараметрыАмортизацииОСБухгалтерскийУчет.ПредполагаемыйОбъемПродукции, 0) КАК ПредполагаемыйОбъемПродукции,
	|	ЕСТЬNULL(ВТ_ПараметрыАмортизацииОСБухгалтерскийУчет.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияБУ,
	|
	|
	|	// АмортизационнаяПремия - все поля выбраны ранее
	|	
	|	// ВключениеВРасходыПриПринятииКУчетуНУ
	|	ВТ_ПервоначальныеСведенияОСНалоговыйУчет.СпособОтраженияРасходовПриВключенииВСтоимость КАК СпособыОтраженияРасходовПоАмортизации,
	|	ВТ_СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета
	|
	|ИЗ
	|	ТаблицаОС
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ПО ТаблицаОС.ОсновноеСредство = ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыАмортизацииОСБухгалтерскийУчет
	|		ПО ТаблицаОС.ОсновноеСредство = ВТ_ПараметрыАмортизацииОСБухгалтерскийУчет.ОсновноеСредство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервоначальныеСведенияОСНалоговыйУчет
	|		ПО ТаблицаОС.ОсновноеСредство = ВТ_ПервоначальныеСведенияОСНалоговыйУчет.ОсновноеСредство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыАмортизацииОСНалоговыйУчет
	|		ПО ТаблицаОС.ОсновноеСредство = ВТ_ПараметрыАмортизацииОСНалоговыйУчет.ОсновноеСредство
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаБухгалтерскогоУчетаОС
	|		ПО ТаблицаОС.ОсновноеСредство = ВТ_СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки
	|";	
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка			 = РезультатЗапроса.Выбрать();
	
	// Подготовим таблицы для передачи в качестве параметров.
	
	// Таблица для имитации шапки документа.
	ТаблицаРеквизиты = Новый ТаблицаЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТаблицаРеквизиты.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	ТаблицаРеквизиты.Добавить();
	
	ПараметрыПроведения = Новый Структура("ОсновныеСредства, ПервоначальныеСведенияОСБУ,
										 |ПервоначальныеСведенияОСНУ, ПараметрыАмортизацииОСБУ,
										 |ВключениеВРасходыПриПринятииКУчетуНУ, ПараметрыАмортизацииОСНУ,
										 |РеквизитыНДС");
	// Таблицы для отдельных регистров, в которых учитываются ОС.
	
	// В документе ПринятиеКУчетуОС	это таблица по табличной части,
	// в текущей процедуре - одна строка запроса.
	СписокКолонок = "НомерСтроки, ОсновноеСредство, ИнвентарныйНомер";
	ПараметрыПроведения.ОсновныеСредства = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок); 	
	ПараметрыПроведения.ОсновныеСредства.Добавить();
	
	
	СписокКолонок = "Регистратор, Период, Организация, ПлательщикНалогаНаПрибыль, 
					|СпособНачисленияАмортизации,
					|ПоказательНаработки, ИспользоватьСуммыСписания,
					|СуммаБУ, СуммаНУ, СуммаПР, СуммаВР";	
	ПараметрыПроведения.ПервоначальныеСведенияОСБУ = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок);  // таблица из шапки документа - одна строка
	ПараметрыПроведения.ПервоначальныеСведенияОСБУ.Добавить();
	
	
	СписокКолонок = "Регистратор, Период, Организация, ПлательщикНалогаНаПрибыль,
					|СрокПолезногоИспользованияНУ, ПорядокВключенияСтоимостиВСоставРасходовНУ";
	ПараметрыПроведения.ПервоначальныеСведенияОСНУ = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок); // таблица из шапки - одна строка
	ПараметрыПроведения.ПервоначальныеСведенияОСНУ.Колонки.СрокПолезногоИспользованияНУ.Имя = "СрокПолезногоИспользования";
	ПараметрыПроведения.ПервоначальныеСведенияОСНУ.Колонки.ПорядокВключенияСтоимостиВСоставРасходовНУ.Имя = "ПорядокВключенияСтоимостиВСоставРасходов";
	ПараметрыПроведения.ПервоначальныеСведенияОСНУ.Добавить();
	
	
	СписокКолонок = "Регистратор, Период, Организация, 
					|ГодоваяНормаАмортизации, ПредполагаемыйОбъемПродукции,
					|СрокПолезногоИспользованияБУ";
	ПараметрыПроведения.ПараметрыАмортизацииОСБУ = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок); // таблица из шапки - одна строка
	ПараметрыПроведения.ПараметрыАмортизацииОСБУ.Колонки.СрокПолезногоИспользованияБУ.Имя = "СрокПолезногоИспользования";
	ПараметрыПроведения.ПараметрыАмортизацииОСБУ.Добавить();
	
	
	СписокКолонок = "Регистратор, Период, Организация, ПлательщикНалогаНаПрибыль,
					|ПорядокВключенияСтоимостиВСоставРасходовНУ, СпособыОтраженияРасходовПоАмортизации,
					|СчетУчета";
	ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок); // таблица из шапки - одна строка
	ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ.Колонки.ПорядокВключенияСтоимостиВСоставРасходовНУ.Имя = "ПорядокВключенияСтоимостиВСоставРасходов";
	ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ.Колонки.Добавить("Содержание", Новый ОписаниеТипов("Строка"));
	ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ.Колонки.Добавить("ИмяСубконто", Новый ОписаниеТипов("Строка"));
	ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ.Колонки.Добавить("ИмяСписка", Новый ОписаниеТипов("Строка"));
	
	СтрокаТаблицы = ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ.Добавить();
	СтрокаТаблицы.Содержание 	= НСтр("ru='Включение стоимости в состав расходов (НУ)';uk='Включення вартості до складу витрат (ПО)'");
	СтрокаТаблицы.ИмяСубконто 	= "ОсновныеСредства";
	СтрокаТаблицы.ИмяСписка 	= "ОС";
						                               
	
	СписокКолонок = "Регистратор, Период, Организация, СрокПолезногоИспользованияНУ, ПлательщикНалогаНаПрибыль";
	ПараметрыПроведения.ПараметрыАмортизацииОСНУ = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок); // таблица из шапки - одна строка
	ПараметрыПроведения.ПараметрыАмортизацииОСНУ.Колонки.СрокПолезногоИспользованияНУ.Имя = "СрокПолезногоИспользования";
	ПараметрыПроведения.ПараметрыАмортизацииОСНУ.Добавить();
	
	СписокКолонок = "Регистратор, Период, Организация";
	ПараметрыПроведения.РеквизитыНДС = ТаблицаРеквизиты.СкопироватьКолонки(СписокКолонок); // таблица из шапки - одна строка
	ПараметрыПроведения.РеквизитыНДС.Колонки.Добавить("Подразделение", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ПараметрыПроведения.РеквизитыНДС.Добавить();
	
	// Для передачи в качестве параметра создадим копию таблицы списанных товаров.
	ТаблицаСписанныеТовары = ТаблицаСебестоимостьСписанныхТоваров.СкопироватьКолонки();
	ТаблицаСписанныеТовары.Колонки.Добавить("НомерСтрокиДокумента");
	ТаблицаСписанныеТовары.Добавить();
	
	// Обработку результата запроса необходимо производить по каждому объекту ОС отдельно, 
	// т.к. у разных объектов ОС могут быть разные параметры (сроки, порядок включения в стоимость и т.п.).
	
	Пока Выборка.Следующий() Цикл
	
		// Позиционируемся в таблице списанных товаров.
		СтрокаТаблицыСписанныеТовары = ТаблицаСебестоимостьСписанныхТоваров[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(ТаблицаСписанныеТовары[0], СтрокаТаблицыСписанныеТовары);
		ТаблицаСписанныеТовары[0].НомерСтроки = 1;
		ТаблицаСписанныеТовары[0].НомерСтрокиДокумента = 1;
	
		// Заполним таблицы.
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.ОсновныеСредства[0], Выборка);
		
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.ПервоначальныеСведенияОСБУ[0], Выборка);
		
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.ПервоначальныеСведенияОСНУ[0], Выборка);
		ПараметрыПроведения.ПервоначальныеСведенияОСНУ[0].СрокПолезногоИспользования = Выборка.СрокПолезногоИспользованияНУ;
		ПараметрыПроведения.ПервоначальныеСведенияОСНУ[0].ПорядокВключенияСтоимостиВСоставРасходов = Выборка.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.ПараметрыАмортизацииОСБУ[0], Выборка);
		ПараметрыПроведения.ПараметрыАмортизацииОСБУ[0].СрокПолезногоИспользования = Выборка.СрокПолезногоИспользованияБУ;
		
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ[0], Выборка);
		ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ[0].ПорядокВключенияСтоимостиВСоставРасходов = Выборка.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ[0].ПорядокПогашенияСтоимостиБУ = Выборка.ПорядокПогашенияСтоимости;
		ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ[0].Подразделение = СтрокаТаблицыСписанныеТовары.КорПодразделение; // Подразделение местонахождения ОС
	
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.ПараметрыАмортизацииОСНУ[0], Выборка);
		ПараметрыПроведения.ПараметрыАмортизацииОСНУ[0].СрокПолезногоИспользования = Выборка.СрокПолезногоИспользованияНУ;
		
		
		ЗаполнитьЗначенияСвойств(ПараметрыПроведения.РеквизитыНДС[0], Выборка);
		ПараметрыПроведения.РеквизитыНДС[0].Подразделение = СтрокаТаблицыСписанныеТовары.Подразделение; // подразделение номенклатуры
		
		
		// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

		// Таблица первоначальных сведений ОС
		ТаблицаПервоначальныеСведенияОС = ПодготовитьТаблицуПервоначальныеСведенияОС(
			ПараметрыПроведения.ОсновныеСредства,
			ТаблицаСписанныеТовары,
			ПараметрыПроведения.ПервоначальныеСведенияОСБУ,
			Отказ);

		// Таблица первоначальных сведений ОС (НУ)
		ТаблицаПервоначальныеСведенияОСНУ = ПодготовитьТаблицуПервоначальныеСведенияОСНУ(
			ТаблицаПервоначальныеСведенияОС,
			ПараметрыПроведения.ПервоначальныеСведенияОСНУ,
			Отказ);
			
		// Таблица параметров амортизации (БУ)
		ТаблицаПараметровАмортизацииБУ = ПодготовитьТаблицуПараметрыАмортизацииОСБУ(
			ТаблицаПервоначальныеСведенияОС,
			ПараметрыПроведения.ПараметрыАмортизацииОСБУ,
			Отказ);


		// Таблица включения в расходы при принятии к учету (НУ)
		ТаблицаЗатратПоВключениюСтоимостиВСоставРасходовНУ = ПодготовитьТаблицуСписаниеНаРасходыНУ(
			ТаблицаПервоначальныеСведенияОС,
			ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ,
			Отказ);

		// Таблица параметров амортизации (НУ)
		ТаблицаПараметровАмортизацииНУ = ПодготовитьТаблицуПараметрыАмортизацииОСНУ(
			ТаблицаПервоначальныеСведенияОСНУ,
			ТаблицаЗатратПоВключениюСтоимостиВСоставРасходовНУ,
			ПараметрыПроведения.ПараметрыАмортизацииОСНУ,
			Отказ);
			
		// ФОРМИРОВАНИЕ ДВИЖЕНИЙ
		СформироватьДвиженияРегистрацияПервоначальныхСведенийОСБУ(
			ТаблицаПервоначальныеСведенияОС,
			ПараметрыПроведения.ПервоначальныеСведенияОСБУ,
			Движения, Отказ);

		СформироватьДвиженияИзмененияПараметровАмортизацииОСБУ(
			ТаблицаПараметровАмортизацииБУ,
			ПараметрыПроведения.ПараметрыАмортизацииОСБУ,
			Движения, Отказ);

		СформироватьДвиженияИзменениеПараметровАмортизацииОСНУ(
			ТаблицаПараметровАмортизацииНУ,
			ПараметрыПроведения.ПараметрыАмортизацииОСНУ,
			Движения, Отказ);
		
		УправлениеВнеоборотнымиАктивамиПереопределяемый.СформироватьДвиженияНачислениеАмортизации(
			ТаблицаЗатратПоВключениюСтоимостиВСоставРасходовНУ,
			ПараметрыПроведения.ВключениеВРасходыПриПринятииКУчетуНУ,
			Движения, Отказ);

		СформироватьДвиженияРегистрацияПервоначальныхСведенийОСНУ(
			ТаблицаПервоначальныеСведенияОСНУ,
			ПараметрыПроведения.ПервоначальныеСведенияОСНУ,
			Движения, Отказ);
			
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПустуюТаблицуСписанныеТовары()
	
	ТаблицаСписанныеТовары = Новый ТаблицаЗначений;
	ТаблицаСписанныеТовары.Колонки.Добавить("ИмяСписка",          ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаСписанныеТовары.Колонки.Добавить("СинонимСписка",      ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаСписанныеТовары.Колонки.Добавить("Период",             ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаСписанныеТовары.Колонки.Добавить("НомерСтроки",        ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(5, 0));
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетУчета",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Склад",              Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаСписанныеТовары.Колонки.Добавить("Партия",             Документы.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("Себестоимость",      ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("Количество",         ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСчетСписания",    Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконто1");
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконто2");
	ТаблицаСписанныеТовары.Колонки.Добавить("ВидКорСубконто3");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто1");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто2");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорСубконто3");
	ТаблицаСписанныеТовары.Колонки.Добавить("КорПодразделение",   БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаСписанныеТовары.Колонки.Добавить("Подразделение",      БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписания",      ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияНУ",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияПР",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаСписанияВР",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаКорСписанияНУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаКорСписанияПР", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаКорСписанияВР", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныеТовары.Колонки.Добавить("Содержание",		  ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(0));

	ТаблицаСписанныеТовары.Колонки.Добавить("Комитент",  					Справочники.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("ДоговорКомиссии",  			Справочники.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетРасчетовСКомитентом",		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("СчетАвансовСКомитентом",		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаСписанныеТовары.Колонки.Добавить("ВалютаРасчетовСКомитентом",	Справочники.ТипВсеСсылки());
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаРасчетовСКомитентом",		ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаСписанныеТовары.Колонки.Добавить("СуммаПоступленияОтКомитента",	ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаСписанныеТовары.Колонки.Добавить("Покупатель",                   Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаСписанныеТовары.Колонки.Добавить("КлючСтроки",                   ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(5));
	
	Возврат ТаблицаСписанныеТовары;
	
КонецФункции

Функция ПолучитьТекстЗапросаПринятиеКУчетуОСОтложенноеПроведениеБУ()

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.Регистратор КАК Регистратор,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ПоказательНаработки КАК ПоказательНаработки
	|
	|ПОМЕСТИТЬ ВТ_ПервоначальныеСведенияОСБухгалтерскийУчет
	|
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|						&ДатаКон, 
	|						Организация = &Организация
	|							И ОсновноеСредство В (ВЫБРАТЬ ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.ОсновноеСредство,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.ОбъемПродукцииРабот КАК ПредполагаемыйОбъемПродукции,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.СрокПолезногоИспользования КАК СрокПолезногоИспользования
	|
	|ПОМЕСТИТЬ ВТ_ПараметрыАмортизацииОСБухгалтерскийУчет
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|						&ДатаКон,
	|						Организация = &Организация
	|							И ОсновноеСредство В (ВЫБРАТЬ ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС)) КАК ПараметрыАмортизацииОСБухгалтерскийУчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчетаДооценокОС
	|
	|ПОМЕСТИТЬ ВТ_СчетаБухгалтерскогоУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|						&ДатаКон,
	|						Организация = &Организация
	|							И ОсновноеСредство В (ВЫБРАТЬ ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС)) КАК СчетаБухгалтерскогоУчетаОС
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ПолучитьТекстЗапросаПринятиеКУчетуОСОтложенноеПроведениеНУ()	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНалоговыйУчет.ОсновноеСредство,
	|	ПервоначальныеСведенияОСНалоговыйУчет.ПорядокВключенияСтоимостиВСоставРасходов,
	|	ПервоначальныеСведенияОСНалоговыйУчет.СпособНачисленияАмортизацииНУ
	|
	|ПОМЕСТИТЬ ВТ_ПервоначальныеСведенияОСНалоговыйУчет
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|						&ДатаКон,
	|						Организация = &Организация
	|							И ОсновноеСредство В (ВЫБРАТЬ ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС)) КАК ПервоначальныеСведенияОСНалоговыйУчет
	|
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСНалоговыйУчет.ОсновноеСредство,
	|	ПараметрыАмортизацииОСНалоговыйУчет.СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСНалоговыйУчет.СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСНалоговыйУчет.СтоимостьДляВычисленияАмортизации
	|
	|ПОМЕСТИТЬ ВТ_ПараметрыАмортизацииОСНалоговыйУчет
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	|						&ДатаКон,
	|						Организация = &Организация
	|							И ОсновноеСредство В (ВЫБРАТЬ ТаблицаОС.ОсновноеСредство ИЗ ТаблицаОС)) КАК ПараметрыАмортизацииОСНалоговыйУчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции	
	

// РАСЧЕТ АМОРТИЗАЦИИ ОС

Функция ПодготовитьТаблицуАмортизацияОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОбъект = Неопределено;
	
	Параметры = ПодготовитьПараметрыАмортизацияОС(ТаблицаОС, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаАмортизации = ПустаяТаблицаЗначенийНачисленнойАмортизации();
	
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

			ШаблонСообщения = НСтр("ru='Не указан метод начисления амортизации (НУ) в учетной политике организации %1
                |Укажите метод начисления амортизации на %2.'
                |;uk='Не зазначений метод нарахування амортизації (ПО) в обліковій політиці організації %1
                |Вкажіть метод нарахування амортизації на %2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Реквизиты.Организация,
				Формат(НачалоГода(Реквизиты.ДатаРасчета)));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Реквизиты.ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериодаДата", НачалоМесяца(Реквизиты.ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", Новый Граница(НачалоМесяца(Реквизиты.ДатаРасчета), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Реквизиты.ДатаРасчета));
	Запрос.УстановитьПараметр("Период", Реквизиты.ДатаРасчета);
	
	// Получим список основных средств для расчета амортизации
	Если Параметры.ТаблицаОС.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСПоТаблице();
	Иначе
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСВсе();
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСНачислениеАмортизации();
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеАмортизацииБУ.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	НачислениеАмортизацииБУ КАК НачислениеАмортизацииБУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачислениеАмортизацииНУ.ОсновноеСредство
	|ИЗ
	|	НачислениеАмортизацииНУ КАК НачислениеАмортизацииНУ";
	ТаблицаОСНачислениеАмортизации = Запрос.Выполнить().Выгрузить();
	ТаблицаОСНачислениеАмортизации.Свернуть("ОсновноеСредство");
	

	// Получим признак возможности начисления амортизации по НУ только линейным методом
	ТаблицаПризнаков = ПодготовитьТаблицуПризнаков(ТаблицаОСНачислениеАмортизации, Параметры.Реквизиты, Отказ);
	
	Запрос.УстановитьПараметр("ТаблицаПризнаков", ТаблицаПризнаков);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПризнаков.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	&ТаблицаПризнаков КАК ТаблицаПризнаков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();
	
	Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСПервоначальныеСведения()
		+ ПолучитьТекстЗапросаАмортизацияОСПараметрыАмортизации()
		+ ПолучитьТекстЗапросаАмортизацияОСПараметрыОтраженияВУчете()
		+ ПолучитьТекстЗапросаАмортизацияОСПрочиеПараметры();
	
	Запрос.Выполнить();
	
	// Получим таблицу графиков амортизации
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиАмортизацииБУ.ГрафикАмортизации
	|ИЗ
	|	ГрафикиАмортизацииБУ КАК ГрафикиАмортизацииБУ";
	СписокГрафиков = Запрос.Выполнить().Выгрузить();
	ТаблицаГрафиков = ПолучитьТаблицуГрафиковАмортизации(СписокГрафиков);
	
	// Соберем все параметры в одну таблицу
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(НачислениеАмортизацииБУ.НачислятьАмортизациюБУ, ЛОЖЬ) КАК НачислятьАмортизациюБУ,
	|	ЕСТЬNULL(НачислениеАмортизацииНУ.НачислятьАмортизациюНУ, ЛОЖЬ) КАК НачислятьАмортизациюНУ,
	|	ЕСТЬNULL(ВыработкаОС.ОбъемВыработки, 0) КАК Количество,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБУ.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБУ.Период КАК Период,
	|	ПараметрыАмортизацииОСНУ.Период КАК ПериодНУ,
	|	ГрафикиАмортизацииБУ.ГрафикАмортизации КАК ГрафикАмортизации,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчетаДооценокОС КАК СчетУчетаДооценокОС,
	|	ПервоначальныеСведенияОСБУ.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНУ.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНУ.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизацииНУ,
	|	СчетаБухгалтерскогоУчетаОСНачалоГода.СчетУчета КАК СчетУчетаНачалоГода,
	|	СчетаБухгалтерскогоУчетаОСНачалоГода.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииНачалоГода,
	|	ПервоначальныеСведенияОСБУ.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОСБУ.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	СпособыОтраженияРасходовБУ.СтатьяРасходов КАК СтатьяРасходов,
	|	СпособыОтраженияРасходовБУ.АналитикаРасходов КАК АналитикаРасходов,
	|	СпособыОтраженияРасходовБУ.ПередаватьРасходыВДругуюОрганизацию,
	|	СпособыОтраженияРасходовБУ.ОрганизацияПолучательРасходов,
	|	СпособыОтраженияРасходовБУ.СчетПередачиРасходов,
	|	СпособыОтраженияРасходовБУ.СпособОтраженияРасходовЗаданДокументом КАК СпособОтраженияРасходовЗаданДокументом,
	|	СпособыОтраженияРасходовБУ.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	ЕСТЬNULL(СпособыОтраженияРасходовБУ.СпособОтраженияРасходовДокументОснование, НЕОПРЕДЕЛЕНО) КАК СпособОтраженияРасходовДокументОснование,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНУ.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияНУ,
	
	|	ПервоначальныеСведенияОСНУ.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	МестонахождениеОСБУ.Подразделение КАК Подразделение,
	|	СостоянияОСПринятоКУчету.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	ПервоначальныеСведенияОСНУ.СпособНачисленияАмортизацииНУ КАК СпособНачисленияАмортизацииНУ,
	|	ПервоначальныеСведенияОСНУ.НалоговоеНазначение КАК НалоговоеНазначение
	|ПОМЕСТИТЬ СписокОССПараметрами
	|ИЗ
	|	СписокОС КАК СписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачислениеАмортизацииБУ КАК НачислениеАмортизацииБУ
	|		ПО СписокОС.ОсновноеСредство = НачислениеАмортизацииБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачислениеАмортизацииНУ КАК НачислениеАмортизацииНУ
	|		ПО СписокОС.ОсновноеСредство = НачислениеАмортизацииНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСБУ КАК ПервоначальныеСведенияОСБУ
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСБУ КАК ПараметрыАмортизацииОСБУ
	|		ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииОСБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиАмортизацииБУ КАК ГрафикиАмортизацииБУ
	|		ПО СписокОС.ОсновноеСредство = ГрафикиАмортизацииБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовБУ КАК СпособыОтраженияРасходовБУ
	|		ПО СписокОС.ОсновноеСредство = СпособыОтраженияРасходовБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
	|		ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОСНачалоГода КАК СчетаБухгалтерскогоУчетаОСНачалоГода
	|		ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОСНачалоГода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаОС КАК ВыработкаОС
	|		ПО СписокОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСНУ КАК ПервоначальныеСведенияОСНУ
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСНУ КАК ПараметрыАмортизацииОСНУ
	|		ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииОСНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБУ КАК МестонахождениеОСБУ
	|		ПО СписокОС.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОСПринятоКУчету КАК СостоянияОСПринятоКУчету
	|		ПО СписокОС.ОсновноеСредство = СостоянияОСПринятоКУчету.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();
	
	
	Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
	// Получим амортизацию ранее начисленную документом
	Если ЗначениеЗаполнено(Реквизиты.Регистратор) Тогда
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСАмортизацияПоДокументу();
		Запрос.Выполнить();
	Иначе
		ПустаяТаблицаОборотов = Новый ТаблицаЗначений;
		ПустаяТаблицаОборотов.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОбъектыЭксплуатации"));
		ПустаяТаблицаОборотов.Колонки.Добавить("АмортизацияОборот", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		ПустаяТаблицаОборотов.Колонки.Добавить("АмортизацияНУОборот", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Запрос.УстановитьПараметр("ПустаяТаблицаОборотов", ПустаяТаблицаОборотов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПустаяТаблицаОборотов.ОсновноеСредство КАК ОсновноеСредство,
		|	ПустаяТаблицаОборотов.АмортизацияОборот КАК АмортизацияОборот,
		|	ПустаяТаблицаОборотов.АмортизацияНУОборот КАК АмортизацияНУОборот
		|ПОМЕСТИТЬ АмортизацияОСДокумента
		|ИЗ
		|	&ПустаяТаблицаОборотов КАК ПустаяТаблицаОборотов";
		Запрос.Выполнить();
	КонецЕсли;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		
		// Блокировка регистра бухгалтерии.
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаНачисленияАмортизацииБУ.Счет
		|ИЗ
		|	СчетаНачисленияАмортизацииБУ КАК СчетаНачисленияАмортизацииБУ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетаНачисленияАмортизацииБУНачалоГода.Счет
		|ИЗ
		|	СчетаНачисленияАмортизацииБУНачалоГода КАК СчетаНачисленияАмортизацииБУНачалоГода";
		РезультатЗапроса = Запрос.Выполнить();

		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных",
			"РегистрБухгалтерии", "Хозрасчетный", РезультатЗапроса);

		СтруктураЗначенийБлокировки = Новый Структура("Период, Организация",
			Новый Диапазон(, КонецМесяца(Реквизиты.ДатаРасчета)), Реквизиты.Организация);

		СтруктураИсточникаДанных = Новый Структура("Счет", "Счет");

		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);

	КонецЕсли;

	// Получим суммы из регистра бухгалтерии
	МассивВидыСубконтоКВ = Новый Массив;
	МассивВидыСубконтоКВ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("ВидыСубконтоКВ", МассивВидыСубконтоКВ);
	Запрос.Текст = ПолучитьТекстЗапросаАмортизацияОСДанныеПроводок();
	Запрос.Выполнить();
	                                                        ;
	// Получим амортизированные за период активы
	Запрос.Текст = ПолучитьТекстЗапросаНачисленнаяАмортизацияЗаПериод();
	Запрос.Выполнить();
	
	// Заполнение соответствия способов отражения расходов
	СоответствиеСпособовОтражения = Новый Соответствие;
	Запрос.Текст = ПолучитьТекстЗапросаСпособовОтраженияРасходов();
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеСпособовОтражения.Вставить(Выборка.СпособОтраженияРасходов, Выборка.ОтражениеАмортизационныхРасходов.Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	// Сформируем основную таблицу для расчета
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство,
	|	ПРЕДСТАВЛЕНИЕ(СписокОС.ОсновноеСредство) КАК ОсновноеСредствоПредставление,
	|	СписокОС.ОсновноеСредство.Код КАК Код,
	//|	СписокОС.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	//|	СписокОС.КоэффициентУскорения КАК КоэффициентУскорения,
	//|	СписокОС.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	//|	СписокОС.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходов,
	//|	СписокОС.СпециальныйКоэффициент КАК СпециальныйКоэффициент,
	//|	СписокОС.ПРДляВычисленияАмортизации КАК ПРДляВычисленияАмортизации,
	//|	СписокОС.ФактическийСрокПриПереходеКЛинейномуМетоду КАК ФактическийСрокПриПереходеКЛинейномуМетоду,
	//|	СписокОС.ТолькоЛинейныйМетодНУ КАК ТолькоЛинейныйМетодНУ,
	//|	СписокОС.КоэффициентАмортизации КАК КоэффициентАмортизации,
	|	СписокОС.НачислятьАмортизациюБУ КАК НачислятьАмортизациюБУ,
	|	СписокОС.НачислятьАмортизациюНУ КАК НачислятьАмортизациюНУ,
	|	СписокОС.Количество КАК Количество,
	|	СписокОС.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	СписокОС.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	СписокОС.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,	
	|	СписокОС.Период КАК Период,
	|	СписокОС.ПериодНУ КАК ПериодНУ,
	|	СписокОС.ГрафикАмортизации КАК ГрафикАмортизации,
	|	СписокОС.СчетУчета КАК СчетУчета,
	|	СписокОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	СписокОС.ИнвентарныйНомер КАК ИнвентарныйНомер,	
	|	СписокОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	СписокОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	СписокОС.СтатьяРасходов КАК СтатьяРасходов,
	|	СписокОС.АналитикаРасходов КАК АналитикаРасходов,
	|	СписокОС.ПередаватьРасходыВДругуюОрганизацию,
	|	СписокОС.ОрганизацияПолучательРасходов,
	|	СписокОС.СчетПередачиРасходов,
	|	СписокОС.СпособОтраженияРасходовЗаданДокументом КАК СпособОтраженияРасходовЗаданДокументом,
	|	СписокОС.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	СписокОС.СрокПолезногоИспользованияНУ КАК СрокПолезногоИспользованияНУ,	
	|	СписокОС.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	
	|	СписокОС.Подразделение КАК Подразделение,
	|
	|	ЕСТЬNULL(СписокОС.НалоговоеНазначение, ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)) КАК НалоговоеНазначениеКт,
	|	СписокОС.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	ЕСТЬNULL(СписокОС.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СуммаОстатокДт,0)      КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СуммаНУОстатокДт,0)    КАК СтоимостьНУКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.СуммаОстатокКт,0)    КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.СуммаНУОстатокКт,0)  КАК АмортизацияНУКонечныйОстаток,
	|	СписокОС.СпособНачисленияАмортизацииНУ КАК СпособНачисленияАмортизацииНУ,
	|	СписокОС.СрокИспользованияДляВычисленияАмортизацииНУ КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	|	СписокОС.СтоимостьДляВычисленияАмортизацииНУ КАК СтоимостьДляВычисленияАмортизацииНУ,
	|	СписокОС.НалоговоеНазначение КАК НалоговоеНазначение,
	|	
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаОстатокДт, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаОстатокКт, 0) КАК АмортизацияНачальныйОстаток,
	|	(ЕСТЬNULL(СтоимостьНаНачалоГода.СуммаОстатокДт, 0) - ЕСТЬNULL(АмортизацияНаНачалоГода.СуммаОстатокКт, 0)) КАК СтоимостьНаНачалоГода,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаНУОстатокДт, 0) КАК СтоимостьНУНачальныйОстаток,
	|	0 КАК СтоимостьПРНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаНУОстатокКт, 0) КАК АмортизацияНУНачальныйОстаток,
	|	0  КАК АмортизацияПРНачальныйОстаток,
	|	ЕСТЬNULL(ОстаткиДопКапитала.СуммаОстаток, 0) КАК ОстаточнаяСуммаДооценки,
	|	ЕСТЬNULL(ОстаткиДопКапитала.СуммаПриход, 0) КАК СуммаПриход,
	|	
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаОстатокДт, 0) - ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаОстатокКт, 0) КАК ОстаточнаяСтоимостьБУ,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаНУОстатокДт, 0) - ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаНУОстатокКт, 0) КАК ОстаточнаяСтоимостьНУ,
	|	0 КАК ОстаточнаяСтоимостьПР,
	|	
	|
	|	
	|	ЕСТЬNULL(АмортизацияОСОбороты.АмортизацияОборот, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(АмортизацияОСОбороты.АмортизацияНУОборот, 0) КАК АмортизацияНУОборот,
	|	
	|	ВЫБОР КОГДА втАмортизированныеАктивы.ОсновноеСредство ЕСТЬ NULL
	|		ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьНачислениеАмортизацииЗаПериод
	|ИЗ
	|	СписокОССПараметрами КАК СписокОС
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНачалоПериода КАК СтоимостьОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьОСНачалоПериода.ОсновноеСредство
	|			И СписокОС.СчетУчета = СтоимостьОСНачалоПериода.Счет
    |		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиДопКапитала КАК ОстаткиДопКапитала
	|		ПО СписокОС.ОсновноеСредство = ОстаткиДопКапитала.ОсновноеСредство
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиКонецПериода КАК СтоимостьОСКонецПериода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьОСКонецПериода.ОсновноеСредство
	|			И СписокОС.СчетУчета = СтоимостьОСКонецПериода.Счет
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНачалоПериода КАК АмортизацияОСНачалоПериода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСНачалоПериода.ОсновноеСредство
	|			И СписокОС.СчетНачисленияАмортизации = АмортизацияОСНачалоПериода.Счет
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиКонецПериода КАК АмортизацияОСКонецПериода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСКонецПериода.ОсновноеСредство
	|			И СписокОС.СчетНачисленияАмортизации = АмортизацияОСКонецПериода.Счет
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСОбороты КАК АмортизацияОСОбороты
	|		ПО СписокОС.ОсновноеСредство = АмортизацияОСОбороты.ОсновноеСредство
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаНачалоГода КАК СтоимостьНаНачалоГода
	|		ПО СписокОС.ОсновноеСредство = СтоимостьНаНачалоГода.ОсновноеСредство
	|			И СписокОС.СчетУчетаНачалоГода = СтоимостьНаНачалоГода.Счет
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаНачалоГода КАК АмортизацияНаНачалоГода
	|		ПО СписокОС.ОсновноеСредство = АмортизацияНаНачалоГода.ОсновноеСредство
	|			И СписокОС.СчетНачисленияАмортизацииНачалоГода = АмортизацияНаНачалоГода.Счет
	|
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАмортизированныеАктивы КАК втАмортизированныеАктивы
	|		ПО СписокОС.ОсновноеСредство = втАмортизированныеАктивы.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТипГодовой  = Тип ("СправочникСсылка.ГодовыеГрафикиАмортизацииОС");
	
	Пока ВыборкаПоОС.Следующий() Цикл
		
		СуммаАмортизацииБУ = 0;
		СуммаАмортизацииНУ = 0;
		СуммаАмортизацииПР = 0;
		СуммаАмортизацииВР = 0;
		
		СписатьОстатокБУ = Ложь;
		СписатьОстатокНУ = Ложь;
		СписатьОстатокПР = Ложь;
		
		
		СуммаУменьшенияДооценки = 0;
		
		СрокИспользованияДляВычисленияАмортизацииНУ  = ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизацииНУ;
				
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизации) Тогда
			Если Реквизиты.ВыдаватьСообщения Тогда
				СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru='Не указан счет для начисления амортизации';uk='Не зазначений рахунок для нарахування амортизації'"), 
					Реквизиты.Регистратор, Отказ);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Пропустить = Ложь;
				
		
		Если ВыборкаПоОС.НачислятьАмортизациюБУ Тогда
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
				Если Реквизиты.ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru='Не указан способ начисления амортизации';uk='Не вказаний спосіб нарахування амортизації'"),
						Реквизиты.Регистратор, Отказ);
				КонецЕсли;
				Пропустить = Истина;
			КонецЕсли;
			
			Списание_ОС = ТипЗнч(Реквизиты[3]) = Тип("ДокументСсылка.СписаниеОС") 
									ИЛИ ТипЗнч(Реквизиты[3]) = Тип("ДокументСсылка.ПодготовкаКПередачеОС");
			
			Если (ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС._50_50 
				И ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС._100) ИЛИ Списание_ОС Тогда
				
				АмортизируемаяСтоимостьОстаток = ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.ЛиквидационнаяСтоимость - ВыборкаПоОС.АмортизацияНачальныйОстаток;
				
			Иначе
				
				АмортизируемаяСтоимостьОстаток = ВыборкаПоОС.СтоимостьКонечныйОстаток - ВыборкаПоОС.ЛиквидационнаяСтоимость - ВыборкаПоОС.АмортизацияКонечныйОстаток;
				
			КонецЕсли;

			Если АмортизируемаяСтоимостьОстаток <= 0 Тогда
				Пропустить = Истина; 
			КонецЕсли;
			
			Если ВыборкаПоОС.ЕстьНачислениеАмортизацииЗаПериод Тогда
				Пропустить = Истина; // по указанному ОС в этом месяце уже начисляли амортизацию
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) 
				И ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.АмортизацияНачальныйОстаток > 0 Тогда

				Если Реквизиты.ВыдаватьСообщения Тогда
					СообщениеОбОшибке = НСтр("ru='Стоимость для начисления амортизации равна нулю
                    |Возможно, не выполнено закрытие месяца за предыдущий период'
                    |;uk='Вартість для нарахування амортизації дорівнює нулю
                    |Можливо, не виконано закриття місяця за попередній період'");
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СообщениеОбОшибке, Реквизиты.Регистратор, Отказ, Ложь);
				КонецЕсли;
				Пропустить = Истина;
			КонецЕсли;
			
			Если ВыборкаПоОС.ДатаВводаВЭксплуатацию = NULL Тогда
		    	ДатаВводаВЭксплуатациюНУ 				= NULL;
			Иначе	
				ДатаВводаВЭксплуатациюНУ 				= Макс(ВыборкаПоОС.ДатаВводаВЭксплуатацию, '20110331');
			КонецЕсли;
			
			Если (ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
				ИЛИ ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
				И НЕ ЗначениеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) Тогда
				
				Пропустить = Истина;
			КонецЕсли;
			
			Если КонецМесяца(ВыборкаПоОС.ДатаВводаВЭксплуатацию) = КонецМесяца(Реквизиты.ДатаРасчета)
				И ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции
				И ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС._50_50 
				И ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС._100 Тогда
				Пропустить = Истина;	
			КонецЕсли;
						
			Если НЕ Пропустить Тогда
				
				АмортизируемаяСтоимость = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации - ВыборкаПоОС.ЛиквидационнаяСтоимость;
				ОстаточнаяСтоимость = ВыборкаПоОС.ОстаточнаяСтоимостьБУ - ВыборкаПоОС.ЛиквидационнаяСтоимость;
				
				Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
					СуммаГодовойАмортизации = АмортизируемаяСтоимость / ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;
					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
						СуммаАмортизации   = СуммаГодовойАмортизации / 12;
					Иначе
						КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(
							ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, Реквизиты.ДатаРасчета);
						СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
					КонецЕсли;
					Если УчетнаяПолитика.ВключатьСуммуДооценокОСВСоставНераспределеннойПрибыли(Реквизиты.Организация, Реквизиты.ДатаРасчета)
					И ВыборкаПоОС.ОстаточнаяСуммаДооценки > 0 Тогда 
						СуммаУменьшенияДооценки = Окр(РасчетСуммыУменьшенияДооценки(СуммаАмортизации, ОстаточнаяСтоимость, 
																				ВыборкаПоОС),2);
					КонецЕсли;
				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
					
					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) Тогда
						Пропустить = Истина;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
						Если Реквизиты.ВыдаватьСообщения = Истина Тогда
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru='Объем продукции для вычисления не определен';uk='Об''єм продукції для обчислення не визначено'"), 
								Реквизиты.Регистратор, Отказ);
						КонецЕсли;
						Пропустить = Истина;
					КонецЕсли;
					
					Если Пропустить Тогда
						СуммаАмортизации = 0
					Иначе
						СуммаАмортизации = АмортизируемаяСтоимость * ВыборкаПоОС.Количество / ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации;
					КонецЕсли;
					Если УчетнаяПолитика.ВключатьСуммуДооценокОСВСоставНераспределеннойПрибыли(Реквизиты.Организация, Реквизиты.ДатаРасчета)
						И ВыборкаПоОС.ОстаточнаяСуммаДооценки > 0 Тогда 
						СуммаУменьшенияДооценки = Окр(РасчетСуммыУменьшенияДооценки(СуммаАмортизации, ОстаточнаяСтоимость, 
																				ВыборкаПоОС),2);
					КонецЕсли;
				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
					
					Если ВыборкаПоОС.ЛиквидационнаяСтоимость = 0 Тогда					
						Если Реквизиты.ВыдаватьСообщения Тогда
							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации по способу %1 не указана ликвидационная стоимость';uk='При розрахунку амортизації за способом %1 не вказана ліквідаційна вартість'"),ВыборкаПоОС.СпособНачисленияАмортизации),
							                                         Реквизиты.Регистратор, Отказ);
						КонецЕсли;
						Продолжить;					
					КонецЕсли;

					Если ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = 0 Тогда						
						Если Реквизиты.ВыдаватьСообщения Тогда							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации по способу %1 не указан срок полезного использования';uk='При розрахунку амортизації за способом %1 не зазначений строк корисного використання'"),ВыборкаПоОС.СпособНачисленияАмортизации),
							                                         Реквизиты.Регистратор, Отказ);
						КонецЕсли;						
						Продолжить;						
					КонецЕсли;
					
					Если Год(ВыборкаПоОС.Период) = Год(Реквизиты.ДатаРасчета) Тогда						
						СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;						
					Иначе						
						СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;						
					КонецЕсли;
										
		 			Если ВыборкаПоОС.ДатаВводаВЭксплуатацию = NULL Тогда						
						Если Реквизиты.ВыдаватьСообщения Тогда							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации по способу %1 не определилась дата ввода в эксплуатацию';uk='При розрахунку амортизації за способом %1 не визначилася дата введення в експлуатацію'"),ВыборкаПоОС.СпособНачисленияАмортизации),
							                                         Реквизиты.Регистратор, Отказ);
						КонецЕсли;						
						Продолжить;						
					КонецЕсли;
					
					РазностьЛет = Год(Реквизиты.ДатаРасчета) - Год(ВыборкаПоОС.ДатаВводаВЭксплуатацию);
					
					Если РазностьЛет > 0 Тогда						
						ОсталосьЭксплуатироватьВЭтомГоду = ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации 
						                                   - РазностьЛет * 12
						                                   + Месяц(ВыборкаПоОС.ДатаВводаВЭксплуатацию)														   
					ИначеЕсли ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   						
						ОсталосьЭксплуатироватьВЭтомГоду = ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации;														   
					Иначе						
						ОсталосьЭксплуатироватьВЭтомГоду = 0;														   
					КонецЕсли;
															   
					Если (ОсталосьЭксплуатироватьВЭтомГоду < 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда						
						// Последний год применяем прямолинейный метод						
						СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ВыборкаПоОС.ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду						
					ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда						
						СуммаГодовойАмортизации = СтоимостьИтоговая * (1 - Pow(ВыборкаПоОС.ЛиквидационнаяСтоимость / ВыборкаПоОС.СтоимостьДляВычисленияАмортизации,
						                                                       12 / ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации));																			   
					Иначе // Срок использования исчерпан						
						СуммаГодовойАмортизации = 0;						
						Если Реквизиты.ВыдаватьСообщения Тогда							
							Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 при расчете по способу %2 срок использования исчерпан!';uk='Бух. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации));							
						КонецЕсли;						
					КонецЕсли;

					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда						
						СуммаАмортизации   = СуммаГодовойАмортизации / 12;						
					Иначе						
						КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафикаУКР(ТаблицаГрафиков,
						                                                                 ВыборкаПоОС.ГрафикАмортизации,
																						 Реквизиты.ДатаРасчета,
																						 ТипГодовой);
						СуммаАмортизации       = СуммаГодовойАмортизации * КоэффициентАмортизации;					
					КонецЕсли;
					Если УчетнаяПолитика.ВключатьСуммуДооценокОСВСоставНераспределеннойПрибыли(Реквизиты.Организация, Реквизиты.ДатаРасчета)
						И ВыборкаПоОС.ОстаточнаяСуммаДооценки > 0 Тогда 
						СуммаУменьшенияДооценки = Окр(РасчетСуммыУменьшенияДооценки(СуммаАмортизации, ОстаточнаяСтоимость, 
																				ВыборкаПоОС),2);
					КонецЕсли;
				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка Тогда // - для Украины 
			
					Если ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = 0 Тогда
						Если Реквизиты.ВыдаватьСообщения Тогда							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации по способу %1 не указан срок полезного использования';uk='При розрахунку амортизації за способом %1 не зазначений строк корисного використання'"),
																	 ВыборкаПоОС.СпособНачисленияАмортизации), Реквизиты.Регистратор, Отказ);	
						КонецЕсли;						
						Продолжить;						
					КонецЕсли; 
					
					Если ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации <= 24 Тогда						
						Если Реквизиты.ВыдаватьСообщения Тогда							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для корректного начисления амортизации срок использования должен быть более 24 месяца. При расчете амортизации по способу %1 указан срок полезного использования <%2> мес.';uk='Для коректного нарахування амортизації термін використання повинен бути більше 24 місяці. При розрахунку амортизації за способом %1 зазначений строк корисного використання <%2> міс.'"),
																	 ВыборкаПоОС.СпособНачисленияАмортизации, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации),
							                                         Реквизиты.Регистратор, Отказ);
						КонецЕсли;						
					КонецЕсли; 
					
					Если Год(ВыборкаПоОС.Период) = Год(Реквизиты.ДатаРасчета) Тогда						
						СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;						
					Иначе						
						СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;						
					КонецЕсли;										
					
					Если ВыборкаПоОС.ДатаВводаВЭксплуатацию = NULL Тогда						
						Если Реквизиты.ВыдаватьСообщения Тогда							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации по способу %1 не определилась дата ввода в эксплуатацию';uk='При розрахунку амортизації за способом %1 не визначилася дата введення в експлуатацію'"),
																	 ВыборкаПоОС.СпособНачисленияАмортизации), Реквизиты.Регистратор, Отказ);							   
						КонецЕсли;						
						Продолжить;						
					КонецЕсли;
					
					РазностьЛет = Год(Реквизиты.ДатаРасчета) - Год(ВыборкаПоОС.ДатаВводаВЭксплуатацию);
					
					Если РазностьЛет > 0 Тогда						
						ОсталосьЭксплуатироватьВЭтомГоду = ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации 
						                                   - РазностьЛет * 12
						                                   + Месяц(ВыборкаПоОС.ДатаВводаВЭксплуатацию)														   
					ИначеЕсли ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   						
						ОсталосьЭксплуатироватьВЭтомГоду = ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации;														   
					Иначе						
						ОсталосьЭксплуатироватьВЭтомГоду = 0;														   
					КонецЕсли;
					
					Если (ОсталосьЭксплуатироватьВЭтомГоду <= 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда						
						// Последний год применяем прямолинейный метод						
						СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ВыборкаПоОС.ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду;		
					ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда						
						СуммаГодовойАмортизации = 2 * (СтоимостьИтоговая) / ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;						
					Иначе // Срок использования исчерпан						
						СуммаГодовойАмортизации = 0;						
						Если Реквизиты.ВыдаватьСообщения Тогда							
							Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 при расчете по способу %2 срок использования исчерпан!';uk='Бух. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации));							
						КонецЕсли;					
					КонецЕсли;
										
					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда						
						СуммаАмортизации   = СуммаГодовойАмортизации / 12;						
					Иначе						
						КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафикаУКР(ТаблицаГрафиков,
						                                                                 ВыборкаПоОС.ГрафикАмортизации,
																						 Реквизиты.ДатаРасчета,
																						 ТипГодовой);
						СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;						
					КонецЕсли;
					Если УчетнаяПолитика.ВключатьСуммуДооценокОСВСоставНераспределеннойПрибыли(Реквизиты.Организация, Реквизиты.ДатаРасчета)
						И ВыборкаПоОС.ОстаточнаяСуммаДооценки > 0 Тогда 
						СуммаУменьшенияДооценки = Окр(РасчетСуммыУменьшенияДооценки(СуммаАмортизации, ОстаточнаяСтоимость, 
																				ВыборкаПоОС),2);
					КонецЕсли;
				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный Тогда // - для Украины

					Если ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации = 0 Тогда
						
						Если Реквизиты.ВыдаватьСообщения Тогда
							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации по способу %1 не указан срок полезного использования';uk='При розрахунку амортизації за способом %1 не зазначений строк корисного використання'"),
																	 ВыборкаПоОС.СпособНачисленияАмортизации), Реквизиты.Регистратор, Отказ);
						КонецЕсли;
						
						Продолжить;
						
					КонецЕсли; 
					
					Если ВыборкаПоОС.ДатаВводаВЭксплуатацию = NULL Тогда
						
						Если Реквизиты.ВыдаватьСообщения Тогда
							
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации по способу %1 не определилась дата ввода в эксплуатацию';uk='При розрахунку амортизації за способом %1 не визначилася дата введення в експлуатацію'"),
																	 ВыборкаПоОС.СпособНачисленияАмортизации), Реквизиты.Регистратор, Отказ);
						КонецЕсли;
						
						Продолжить;
						
					КонецЕсли;

					ЧислоЛетПользования       = Макс(1,ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации / 12);
					ЧислоЛетПользования  = Цел(ЧислоЛетПользования) + ?(ЧислоЛетПользования  
												- Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому 
					
					ГодИспользования          = Год(Реквизиты.ДатаРасчета) - Год(ВыборкаПоОС.ДатаВводаВЭксплуатацию) + 1;
					
					Если Месяц(ВыборкаПоОС.ДатаВводаВЭксплуатацию) >= Месяц(Реквизиты.ДатаРасчета) Тогда
						
						ГодИспользования	  = ГодИспользования - 1;
						
					КонецЕсли; 

					СуммаГодовойАмортизации   = АмортизируемаяСтоимость * (ЧислоЛетПользования - ГодИспользования + 1)
							/ (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
												  
					Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
						
						СуммаАмортизации = СуммаГодовойАмортизации / 12;

					Иначе
						
						КоэффициентАмортизации  = ПолучитьКоэффициентАмортизацииИзГрафикаУКР(ТаблицаГрафиков,
						                                                                  ВыборкаПоОС.ГрафикАмортизации,
																						  Реквизиты.ДатаРасчета,
																						  ТипГодовой);
						СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;

					КонецЕсли;
					Если УчетнаяПолитика.ВключатьСуммуДооценокОСВСоставНераспределеннойПрибыли(Реквизиты.Организация, Реквизиты.ДатаРасчета)
						И ВыборкаПоОС.ОстаточнаяСуммаДооценки > 0 Тогда 
						СуммаУменьшенияДооценки = Окр(РасчетСуммыУменьшенияДооценки(СуммаАмортизации, ОстаточнаяСтоимость, 
																				ВыборкаПоОС),2);
					КонецЕсли;
				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС._50_50 Тогда
			
					Если ВыборкаПоОС.АмортизацияКонечныйОстаток = 0 Тогда
						
						// При первом начислении амортизации (при вводе в эксплуатацию) - 50%
						// Оставшиеся 50% будут начислены в документах списания
						СуммаАмортизации = АмортизируемаяСтоимость / 2;
					ИначеЕсли ВыборкаПоОС.АмортизацияНачальныйОстаток <> 0 И Списание_ОС Тогда
						СуммаАмортизации = АмортизируемаяСтоимость / 2;
					Иначе
						СуммаАмортизации = 0;
					КонецЕсли;
					
					Метод_50_50 = Истина;
					
					ЛиквидационнаяСтоимость = 0;
				
				ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС._100 Тогда

					// При первом же начислении амортизации - 100%
					// Стоимость всегда должна быть полностью амортизирована
					СуммаАмортизации = ВыборкаПоОС.ОстаточнаяСтоимостьБУ;
					
					Если СуммаАмортизации <= 0 Тогда
						
						НачислятьАмортизацию = Ложь;
						
					КонецЕсли;
					
					ЛиквидационнаяСтоимость = 0
				КонецЕсли;
				
				ВсегоОсталосьСписать = ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.АмортизацияНачальныйОстаток;
				СписатьОстатокБУ = (ВсегоОсталосьСписать < СуммаАмортизации);
				СуммаАмортизацииБУ = Окр(Макс(0, Мин(СуммаАмортизации, ВсегоОсталосьСписать)), 2);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Пропустить = Ложь;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если ВыборкаПоОС.НачислятьАмортизациюНУ Тогда
				
				Если  ВыборкаПоОС.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					Если Реквизиты.ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Указано нехоз. налоговое назначение. Амортизация (НУ) не начислена';uk='Зазначено негосп. податкове призначення. Амортизацію (ПО) не нараховано'"),
																 ВыборкаПоОС.НалоговоеНазначение), Реквизиты.Регистратор, ЛОЖЬ);
						
					КонецЕсли;
					Пропустить = Истина;
				КонецЕсли;
				
				Если (ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС._50_50 
				И ВыборкаПоОС.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС._100) ИЛИ Списание_ОС Тогда
				
					АмортизируемаяСтоимостьНУОстаток = ВыборкаПоОС.СтоимостьНУНачальныйОстаток - ВыборкаПоОС.ЛиквидационнаяСтоимость - ВыборкаПоОС.АмортизацияНУНачальныйОстаток;
					
				Иначе
					
					АмортизируемаяСтоимостьНУОстаток =  ВыборкаПоОС.СтоимостьНУКонечныйОстаток - ВыборкаПоОС.ЛиквидационнаяСтоимость - ВыборкаПоОС.АмортизацияНУКонечныйОстаток;
					
				КонецЕсли;

				Если АмортизируемаяСтоимостьНУОстаток <= 0 Тогда
					Пропустить = Истина; // остаточная стоимость на начало месяца равна 0
				КонецЕсли;
				
				Если ВыборкаПоОС.ЕстьНачислениеАмортизацииЗаПериод Тогда
					Пропустить = Истина; // по указанному ОС в этом месяце уже начисляли амортизацию
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьНУНачальныйОстаток) Тогда
					//Стоимость на начало месяца = 0.
					Пропустить = Истина;
				КонецЕсли;
				МетодНачисленияАмортизации = ВыборкаПоОС.СпособНачисленияАмортизацииНУ;
				
				Если МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный
					И НЕ ЗначениеЗаполнено(ВыборкаПоОС.СрокПолезногоИспользованияНУ) Тогда
					
					Если Реквизиты.ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, НСтр("ru='Срок использования равен нулю';uk='Строк використання дорівнює нулю'"), 
							Реквизиты.Регистратор, Отказ);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				
				Если КонецМесяца(ВыборкаПоОС.ДатаВводаВЭксплуатацию) = КонецМесяца(Реквизиты.ДатаРасчета)
					И МетодНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС._50_50 
					И МетодНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС._100 Тогда
					Пропустить = Истина;	
				КонецЕсли;
				 
				Если НЕ Пропустить Тогда
					
					СуммаАмортизации = 0;
					АмортизируемаяСтоимостьНУ = ВыборкаПоОС.СтоимостьДляВычисленияАмортизацииНУ - ВыборкаПоОС.ЛиквидационнаяСтоимость;
					 
					
					ЛиквидационнаяСтоимость = ВыборкаПоОС.ЛиквидационнаяСтоимость;
					СрокИспользованияДляВычисления = Макс(1, ВыборкаПоОС.СрокПолезногоИспользованияНУ);
					
					
					Если МетодНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
						
						Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда					
							Если Реквизиты.ВыдаватьСообщения Тогда								
								СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации по способу %1 не указан срок полезного использования (НУ)';uk='При розрахунку амортизації за способом %1 не зазначено строк корисного використання (ПО)'"),
																	 ВыборкаПоОС.СпособНачисленияАмортизации), Реквизиты.Регистратор, Отказ);
							КонецЕсли;						
							Продолжить;						
						КонецЕсли; 
				
						СуммаГодовойАмортизацииНУ = АмортизируемаяСтоимостьНУ / СрокИспользованияДляВычисленияАмортизацииНУ * 12;

						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
							СуммаАмортизацииНУ   = СуммаГодовойАмортизацииНУ / 12;
						Иначе							
							КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафикаУКР(ТаблицаГрафиков, 
							                                                                 ВыборкаПоОС.ГрафикАмортизации, 
																							 Реквизиты.ДатаРасчета,
																							 ТипГодовой);
																							 
							СуммаАмортизацииНУ        = СуммаГодовойАмортизацииНУ * КоэффициентАмортизации;
							
						КонецЕсли;
					ИначеЕсли МетодНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
						Если ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации = 0 Тогда					
							Продолжить;					
						КонецЕсли;
						
						СуммаАмортизацииНУ = АмортизируемаяСтоимостьНУ * ВыборкаПоОС.Количество / ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации;
						
					ИначеЕсли МетодНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
						
						Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда					
							Если Реквизиты.ВыдаватьСообщения Тогда								
								СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации по способу %1 не указан срок полезного использования (НУ)';uk='При розрахунку амортизації за способом %1 не зазначено строк корисного використання (ПО)'"),
																	 ВыборкаПоОС.СпособНачисленияАмортизации), Реквизиты.Регистратор, Отказ);				 
							КонецЕсли;							
							Продолжить;							
						КонецЕсли;
				
						Если Год(ВыборкаПоОС.ПериодНУ) = Год(Реквизиты.ДатаРасчета) Тогда							
							СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизацииНУ;							
						Иначе							
							СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;							
						КонецЕсли;
												
						
						Если ДатаВводаВЭксплуатациюНУ = NULL Тогда
							Если Реквизиты.ВыдаватьСообщения Тогда								
								СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации (НУ) по способу %1 не определилась дата ввода в эксплуатацию';uk='При розрахунку амортизації (ПО) за способом %1 не визначилася дата введення в експлуатацію'"),
																	 ВыборкаПоОС.СпособНачисленияАмортизации), Реквизиты.Регистратор, Отказ);
							КонецЕсли;							
							Продолжить;							
						КонецЕсли;
						
						РазностьЛет = Год(Реквизиты.ДатаРасчета) - Год(ДатаВводаВЭксплуатациюНУ);
						
						Если РазностьЛет > 0 Тогда							
							ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизацииНУ 
							                                   - РазностьЛет * 12
							                                   + Месяц(ДатаВводаВЭксплуатациюНУ)															   
						ИначеЕсли СрокИспользованияДляВычисленияАмортизацииНУ < 12 Тогда											   							
							ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизацииНУ;															   
						Иначе							
							ОсталосьЭксплуатироватьВЭтомГоду = 0;															   
						КонецЕсли;
																   
						Если (ОсталосьЭксплуатироватьВЭтомГоду < 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда							
							// Последний год применяем прямолинейный метод							
							СуммаГодовойАмортизацииНУ = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду							
						ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда							
							СуммаГодовойАмортизацииНУ = СтоимостьИтоговая * (1 - Pow(ЛиквидационнаяСтоимость / ВыборкаПоОС.СтоимостьДляВычисленияАмортизацииНУ,
							                                                       12 / СрокИспользованияДляВычисленияАмортизацииНУ));																				   
						Иначе // Срок использования исчерпан							
							СуммаГодовойАмортизацииНУ = 0;							
							Если Реквизиты.ВыдаватьСообщения Тогда								
								Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 при расчете по способу %2 срок использования исчерпан!';uk='Под. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации));								
							КонецЕсли;							
						КонецЕсли;

						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда							
							СуммаАмортизацииНУ   = СуммаГодовойАмортизацииНУ / 12;							
						Иначе							
							КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафикаУКР(ТаблицаГрафиков,
							                                                                 ВыборкаПоОС.ГрафикАмортизации,
																							 Реквизиты.ДатаРасчета,
																							 ТипГодовой);
																							 
							СуммаАмортизацииНУ       = СуммаГодовойАмортизацииНУ * КоэффициентАмортизации;
							
						КонецЕсли;
					ИначеЕсли МетодНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка Тогда	
						
						Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда					
							Если Реквизиты.ВыдаватьСообщения Тогда								
																
								СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации по способу %1 не указан срок полезного использования (НУ)';uk='При розрахунку амортизації за способом %1 не зазначено строк корисного використання (ПО)'"),
																	 ВыборкаПоОС.СпособНачисленияАмортизации), Реквизиты.Регистратор, Отказ);
							КонецЕсли;							
								Продолжить;						
						КонецЕсли; 
				
						Если СрокИспользованияДляВычисленияАмортизацииНУ <= 24 Тогда														
							Если Реквизиты.ВыдаватьСообщения Тогда								
								СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для корректного начисления амортизации срок использования должен быть более 24 месяца. При расчете амортизации по способу %1 указан срок полезного использования (НУ) <%2> мес.';uk='Для коректного нарахування амортизації термін використання повинен бути більше 24 місяці. При розрахунку амортизації за способом %1 зазначений строк корисного використання (ПО) <%2> міс.'"),
																	 ВыборкаПоОС.СпособНачисленияАмортизации, ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации),
							                                         Реквизиты.Регистратор, Отказ);
							КонецЕсли;							
						КонецЕсли; 
						
						Если Год(ВыборкаПоОС.ПериодНУ) = Год(Реквизиты.ДатаРасчета) Тогда							
							СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизацииНУ;							
						Иначе							
							СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;							
						КонецЕсли;
						
						Если ДатаВводаВЭксплуатациюНУ = NULL Тогда							
							Если Реквизиты.ВыдаватьСообщения Тогда								
								СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации (НУ) по способу %1 не определилась дата ввода в эксплуатацию';uk='При розрахунку амортизації (ПО) за способом %1 не визначилася дата введення в експлуатацію'"),
																	 ВыборкаПоОС.СпособНачисленияАмортизации), Реквизиты.Регистратор, Отказ);
							КонецЕсли;							
							Продолжить;							
						КонецЕсли;
						
						РазностьЛет = Год(Реквизиты.ДатаРасчета) - Год(ДатаВводаВЭксплуатациюНУ);
						
						Если РазностьЛет > 0 Тогда							
							ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизацииНУ 
							                                   - РазностьЛет * 12
							                                   + Месяц(ДатаВводаВЭксплуатациюНУ)															   
						ИначеЕсли СрокИспользованияДляВычисленияАмортизацииНУ < 12 Тогда											   							
							ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизацииНУ;															   
						Иначе							
							ОсталосьЭксплуатироватьВЭтомГоду = 0;															   
						КонецЕсли;
						
						Если (ОсталосьЭксплуатироватьВЭтомГоду <= 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда							
							// Последний год применяем прямолинейный метод							
							СуммаГодовойАмортизацииНУ = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду;							
						ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда							
							СуммаГодовойАмортизацииНУ = 2 * (СтоимостьИтоговая) / СрокИспользованияДляВычисленияАмортизацииНУ * 12;							
						Иначе // Срок использования исчерпан							
							СуммаГодовойАмортизацииНУ = 0;							
							Если Реквизиты.ВыдаватьСообщения Тогда								
								Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 при расчете по способу %2 срок использования исчерпан!';uk='Под. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации));								
							КонецЕсли;						
						КонецЕсли;
												
						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
							
							СуммаАмортизацииНУ   = СуммаГодовойАмортизацииНУ / 12;
							
						Иначе							
							КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафикаУКР(ТаблицаГрафиков,
							                                                                 ВыборкаПоОС.ГрафикАмортизации,
																							 Реквизиты.ДатаРасчета,
																							 ТипГодовой);
																							 
							СуммаАмортизацииНУ        = СуммаГодовойАмортизацииНУ * КоэффициентАмортизации;
							
						КонецЕсли;
					ИначеЕсли МетодНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный Тогда
						
						Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда					
							Если Реквизиты.ВыдаватьСообщения Тогда								
								СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации по способу %1 не указан срок полезного использования (НУ)';uk='При розрахунку амортизації за способом %1 не зазначено строк корисного використання (ПО)'"),
																	 ВыборкаПоОС.СпособНачисленияАмортизации), Реквизиты.Регистратор, Отказ);
							КонецЕсли;						
							Продолжить;					
						КонецЕсли; 
						
						Если ДатаВводаВЭксплуатациюНУ = NULL Тогда							
							Если Реквизиты.ВыдаватьСообщения Тогда								
								СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации (НУ) по способу %1 не определилась дата ввода в эксплуатацию';uk='При розрахунку амортизації (ПО) за способом %1 не визначилася дата введення в експлуатацію'"),
																	 ВыборкаПоОС.СпособНачисленияАмортизации), Реквизиты.Регистратор, Отказ);
							КонецЕсли;							
							Продолжить;							
						КонецЕсли;

						ЧислоЛетПользования       = Макс(1,СрокИспользованияДляВычисленияАмортизацииНУ / 12);
						ЧислоЛетПользования  = Цел(ЧислоЛетПользования) + ?(ЧислоЛетПользования  
													- Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому 						
						ГодИспользования          = Год(Реквизиты.ДатаРасчета) - Год(ДатаВводаВЭксплуатациюНУ) + 1;
						
						Если Месяц(ДатаВводаВЭксплуатациюНУ) >= Месяц(Реквизиты.ДатаРасчета) Тогда							
							ГодИспользования	  = ГодИспользования - 1;							
						КонецЕсли; 

						СуммаГодовойАмортизацииНУ   = АмортизируемаяСтоимостьНУ * (ЧислоЛетПользования - ГодИспользования + 1)
								/ (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
													  
						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
							
							СуммаАмортизацииНУ = СуммаГодовойАмортизацииНУ / 12;

						Иначе
							
							КоэффициентАмортизации  = ПолучитьКоэффициентАмортизацииИзГрафикаУКР(ТаблицаГрафиков,
							                                                                  ВыборкаПоОС.ГрафикАмортизации,
																							  Реквизиты.ДатаРасчета,
																							  ТипГодовой);
																							  
							СуммаАмортизацииНУ        = СуммаГодовойАмортизацииНУ * КоэффициентАмортизации;

						КонецЕсли;
						
					ИначеЕсли МетодНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС._50_50 Тогда
						
						Если ВыборкаПоОС.АмортизацияНУКонечныйОстаток = 0 Тогда					
							// При первом начислении амортизации (при вводе в эксплуатацию) - 50%
							// Оставшиеся 50% будут начислены в документах списания
							СуммаАмортизацииНУ = АмортизируемаяСтоимостьНУ / 2;							
						ИначеЕсли ВыборкаПоОС.АмортизацияНУНачальныйОстаток <> 0 И Списание_ОС Тогда
							СуммаАмортизацииНУ = АмортизируемаяСтоимостьНУ / 2;
						Иначе
							СуммаАмортизацииНУ = 0;
						КонецЕсли;
						
						Метод_50_50 = Истина;						
						ЛиквидационнаяСтоимость = 0;
						
					ИначеЕсли МетодНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС._100 Тогда
						// При первом же начислении амортизации - 100%
						// Стоимость всегда должна быть полностью амортизирована
						СуммаАмортизацииНУ = ВыборкаПоОС.ОстаточнаяСтоимостьНУ;						
						Если СуммаАмортизацииНУ <= 0 Тогда							
							НачислятьАмортизациюНУ = Ложь;							
						КонецЕсли;						
						ЛиквидационнаяСтоимость = 0;
					Иначе
						Если Реквизиты.ВыдаватьСообщения  Тогда				
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='При расчете амортизации, установлен способ %1, не поддерживаемый в регламентированном учете';uk='При розрахунку амортизації, встановлений спосіб %1, не підтримуваний в регламентованому обліку'"),
																	 МетодНачисленияАмортизации), Реквизиты.Регистратор, Отказ);
						КонецЕсли;	
					КонецЕсли;	
					ВсегоОсталосьСписать = ВыборкаПоОС.СтоимостьНУНачальныйОстаток - ВыборкаПоОС.АмортизацияНУНачальныйОстаток;
					СписатьОстатокНУ = (ВсегоОсталосьСписать < СуммаАмортизацииНУ);
					СуммаАмортизацииНУ = Окр(Мин(ВсегоОсталосьСписать, СуммаАмортизацииНУ), 2);
					НалоговоеНазначениеКт =  ВыборкаПоОС.НалоговоеНазначениеКт;
				КонецЕсли;
				
			КонецЕсли;
			
			СуммаАмортизацииВР = 0;
						
		КонецЕсли;
		
		Если ВыборкаПоОС.НачислятьАмортизациюБУ  И (СуммаАмортизацииБУ = 0) И (СуммаАмортизацииНУ > 0) Тогда
			 СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: амортизация равна 0! ';uk='Бух. розрахунок амортизації: амортизація дорівнює 0! '"), ВыборкаПоОС.ОсновноеСредство),
					Реквизиты.Регистратор, Ложь, Реквизиты.Регистратор);
		КонецЕсли; 
		
		СпособОтражения = Неопределено;
		Если ВыборкаПоОС.СпособОтраженияРасходовЗаданДокументом Тогда
			СпособОтражения = СоответствиеСпособовОтражения.Получить(ВыборкаПоОС.СпособОтраженияРасходов);
		КонецЕсли;
		
		Если СуммаУменьшенияДооценки = Неопределено Тогда
			СуммаУменьшенияДооценки = 0;
		КонецЕсли;
		
		НовыеСтроки = ПодготовитьСтрокиВТаблицуАмортизации(
			ВыборкаПоОС,
			НалоговоеНазначениеКт,
			СуммаУменьшенияДооценки,
			СуммаАмортизацииБУ, СуммаАмортизацииНУ,
			СписатьОстатокБУ, СписатьОстатокНУ);
		ДобавитьСтрокиВТаблицуАмортизации(ТаблицаАмортизации, ВыборкаПоОС, НовыеСтроки, СпособОтражения);
		
		

	Если СуммаУменьшенияДооценки > 0 Тогда
			СуммаУменьшенияДооценки = 0;
	КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаАмортизации;
	
КонецФункции

Функция ПодготовитьСтрокиВТаблицуАмортизации(
		ВыборкаДанных,
		НалоговоеНазначениеКт,
		СуммаУменьшенияДооценки,
		СуммаАмортизацииБУ, СуммаАмортизацииНУ,
		СписатьОстатокБУ=Ложь, СписатьОстатокНУ=Ложь)
	ПоляСтроки = "ОбъектУчета, НалоговоеНазначениеКт, СуммаУменьшенияДооценки, СуммаБУ, СуммаНУ, СуммаПР, СуммаВР, Коэффициент";
	СтрокаАмортизации = Новый Структура(ПоляСтроки);
	
	МассивРезультат = Новый Массив;
	
	Если СуммаАмортизацииБУ > 0
		ИЛИ СуммаАмортизацииНУ > 0
		ИЛИ СуммаУменьшенияДооценки > 0 Тогда
		
		МассивРезультат.Добавить(СтрокаАмортизации);
		
		ЗаполнитьЗначенияСвойств(СтрокаАмортизации, ВыборкаДанных);
		
		СтрокаАмортизации.ОбъектУчета = ВыборкаДанных.ОсновноеСредство;
		СтрокаАмортизации.НалоговоеНазначениеКт = ВыборкаДанных.НалоговоеНазначениеКт;
		СтрокаАмортизации.СуммаУменьшенияДооценки = СуммаУменьшенияДооценки;
				
		СтрокаАмортизации.СуммаБУ = СуммаАмортизацииБУ;
		СтрокаАмортизации.СуммаНУ = СуммаАмортизацииНУ;
		СтрокаАмортизации.СуммаПР = 0;
		СтрокаАмортизации.СуммаВР = 0;
		//Вычисление Коэффициент для рассчета амортизации по управленческому учету
		Если ВыборкаДанных.СтоимостьНачальныйОстаток <= ВыборкаДанных.АмортизацияНачальныйОстаток Тогда
			СтрокаАмортизации.Коэффициент = 1;
		Иначе
			СтрокаАмортизации.Коэффициент = СуммаАмортизацииБУ / (ВыборкаДанных.СтоимостьНачальныйОстаток - ВыборкаДанных.АмортизацияНачальныйОстаток);
		КонецЕсли;
		
		
		СтрокаАмортизации.СуммаБУ = ?(СписатьОстатокБУ, ВыборкаДанных.ОстаточнаяСтоимостьБУ - ВыборкаДанных.ЛиквидационнаяСтоимость, СтрокаАмортизации.СуммаБУ);
		СтрокаАмортизации.СуммаНУ = ?(СписатьОстатокНУ, ВыборкаДанных.ОстаточнаяСтоимостьНУ - ВыборкаДанных.ЛиквидационнаяСтоимость, СтрокаАмортизации.СуммаНУ);
		СтрокаАмортизации.СуммаПР = 0;
		СтрокаАмортизации.СуммаВР = 0;
		СтрокаАмортизации.Коэффициент = СтрокаАмортизации.Коэффициент;
		
		
	КонецЕсли;
	
	Возврат МассивРезультат;
	
КонецФункции

Процедура ДобавитьСтрокиВТаблицуАмортизации(Таблица, ВыборкаДанных, НовыеСтроки, ТаблицаРаспределения)
	
	Для Каждого Строка Из НовыеСтроки Цикл
		
		Если (Строка.СуммаБУ = 0 И Строка.СуммаНУ=0) Тогда
			Если Строка.СуммаУменьшенияДооценки <= 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаРаспределения = Неопределено Тогда
			СтрокаТаблицыЗатрат = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗатрат, ВыборкаДанных);
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗатрат, Строка);
		Иначе
			МассивКоэффицентов = ТаблицаРаспределения.ВыгрузитьКолонку("Коэффициент");
			СуммаУменьшенияДооценки = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Строка.СуммаУменьшенияДооценки, МассивКоэффицентов);
			СуммыБУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Строка.СуммаБУ, МассивКоэффицентов);
			СуммыНУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Строка.СуммаНУ, МассивКоэффицентов); 
			СуммыПР = 0;
			СуммыВР = 0;
			Коэффициенты = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Строка.Коэффициент, МассивКоэффицентов, 100);
			
			Если СуммыБУ = Неопределено И СуммыНУ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Индекс=0 По ТаблицаРаспределения.Количество()-1 Цикл
				ПравилоОтражения = ТаблицаРаспределения[Индекс];
				СтрокаТаблицыЗатрат = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗатрат, ВыборкаДанных);
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗатрат, Строка);
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗатрат, ПравилоОтражения);
				СтрокаТаблицыЗатрат.СуммаУменьшенияДооценки = ?(СуммаУменьшенияДооценки=Неопределено, 0, СуммаУменьшенияДооценки[Индекс]);
				СтрокаТаблицыЗатрат.СуммаБУ = ?(СуммыБУ=Неопределено, 0, СуммыБУ[Индекс]);
				СтрокаТаблицыЗатрат.СуммаНУ = ?(СуммыНУ=Неопределено, 0, СуммыНУ[Индекс]);
				СтрокаТаблицыЗатрат.СуммаПР = 0;
				СтрокаТаблицыЗатрат.СуммаВР = 0;
				СтрокаТаблицыЗатрат.Коэффициент = ?(Коэффициенты=Неопределено, 0, Коэффициенты[Индекс]);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыАмортизацияОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ДатаРасчета," // <Дата>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор," // <ДокументСсылка.*>
	+ "ВыдаватьСообщения"; // <Булево>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСВсе()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация КАК Организация,
	|	МАКСИМУМ(СостоянияОСОрганизаций.ДатаСостояния) КАК ДатаСостояния
	|ПОМЕСТИТЬ ДатыПоследнихСостояний
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.ДатаСостояния < &Период
	|	И СостоянияОСОрганизаций.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	СостоянияОСОрганизаций.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ НеСнятыеСУчета
	|ИЗ
	|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ПО ДатыПоследнихСостояний.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
	|			И ДатыПоследнихСостояний.Организация = СостоянияОСОрганизаций.Организация
	|			И ДатыПоследнихСостояний.ДатаСостояния = СостоянияОСОрганизаций.ДатаСостояния
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСНеСнятыеСУчетаОСПоТаблице()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОС.ДатаСостояния КАК ДатаСостояния,
	|	СостоянияОС.Состояние
	|ПОМЕСТИТЬ СостоянияОС
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
	|		ПО ТаблицаОС.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|ГДЕ
	|	СостоянияОС.Организация = &Организация
	|	И СостоянияОС.ДатаСостояния < &Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ДатаСостояния
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(СостоянияОС.ДатаСостояния) КАК ДатаСостояния
	|ПОМЕСТИТЬ ДатыПоследнихСостояний
	|ИЗ
	|	СостоянияОС КАК СостоянияОС
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ДатаСостояния
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ НеСнятыеСУчета
	|ИЗ
	|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияОС КАК СостоянияОС
	|		ПО ДатыПоследнихСостояний.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|			И ДатыПоследнихСостояний.ДатаСостояния = СостоянияОС.ДатаСостояния
	|ГДЕ
	|	СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСНачислениеАмортизации()

	ТекстЗапрос =
	"ВЫБРАТЬ
	|	НачислениеАмортизацииБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	НачислениеАмортизацииБУ.НачислятьАмортизацию КАК НачислятьАмортизациюБУ
	|ПОМЕСТИТЬ НачислениеАмортизацииБУ
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	//|			   ,
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						НеСнятыеСУчета.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета)) КАК НачислениеАмортизацииБУ
	|ГДЕ
	|	НачислениеАмортизацииБУ.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииНУ.ОсновноеСредство КАК ОсновноеСредство,
	|	НачислениеАмортизацииНУ.НачислятьАмортизацию КАК НачислятьАмортизациюНУ
	|ПОМЕСТИТЬ НачислениеАмортизацииНУ
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						НеСнятыеСУчета.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета)) КАК НачислениеАмортизацииНУ
	|ГДЕ
	|	НачислениеАмортизацииНУ.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапрос;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСПервоначальныеСведения()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБУ.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБУ.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОСБУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОСБУ.ПоказательНаработки КАК ПоказательНаработки,
	|	ПервоначальныеСведенияОСБУ.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость
	
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ПервоначальныеСведенияОСБУ	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСНУ.ОсновноеСредство КАК ОсновноеСредство,	
	|	ПервоначальныеСведенияОСНУ.СпособНачисленияАмортизацииНУ КАК СпособНачисленияАмортизацииНУ,
	|	ПервоначальныеСведенияОСНУ.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ПервоначальныеСведенияОСНУ.Период КАК ДатаПринятияКУчету
	|ПОМЕСТИТЬ ПервоначальныеСведенияОСНУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ПервоначальныеСведенияОСНУ
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСПараметрыАмортизации()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СрезСведенийОСБУ.ОсновноеСредство,
	|	СрезСведенийОСБУ.ПоказательНаработки
	|ПОМЕСТИТЬ АмПоНаработкеОС
	|ИЗ
	//|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, СпособНачисленияАмортизации В (ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции), ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега))) КАК СрезСведенийОСБУ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&КонецПериода, СпособНачисленияАмортизации В (ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции))) КАК СрезСведенийОСБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмПоНаработкеОС.ОсновноеСредство,
	|	АмПоНаработкеОС.ПоказательНаработки,
	|	ВЫБОР
	|		КОГДА СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПринятоКУчетуВПрошломМесяце
	|ПОМЕСТИТЬ АмортизируемыеПоНаработкеОС
	|ИЗ
	|	АмПоНаработкеОС КАК АмПоНаработкеОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|				&КонецПериода,
	|				Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|					И Период < НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ)
	|					И Период >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ), МЕСЯЦ, -1)
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							АмПоНаработкеОС.ОсновноеСредство
	|						ИЗ
	|							АмПоНаработкеОС КАК АмПоНаработкеОС)) КАК СостоянияОСОрганизацийСрезПоследних
	|		ПО АмПоНаработкеОС.ОсновноеСредство = СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НаработкиПериодНачало.ОбъектЭксплуатации, НаработкиПериодОкончание.ОбъектЭксплуатации) КАК ОсновноеСредство,
	|	ЕСТЬNULL(НаработкиПериодНачало.ПоказательНаработки, НаработкиПериодОкончание.ПоказательНаработки) КАК ПоказательНаработки,
	|	ЕСТЬNULL(НаработкиПериодОкончание.Значение, 0) - ЕСТЬNULL(НаработкиПериодНачало.Значение, 0) КАК ОбъемВыработки
	|ПОМЕСТИТЬ ВыработкаОС
	|ИЗ
	|	РегистрСведений.НаработкиОбъектовЭксплуатации.СрезПоследних(
	|			&НачалоПериодаДата,
	|			(ОбъектЭксплуатации, ПоказательНаработки) В
	|				(ВЫБРАТЬ
	|					АмортизируемыеПоНаработкеОС.ОсновноеСредство,
	|					АмортизируемыеПоНаработкеОС.ПоказательНаработки
	|				ИЗ
	|					АмортизируемыеПоНаработкеОС КАК АмортизируемыеПоНаработкеОС
	|				ГДЕ
	|					НЕ АмортизируемыеПоНаработкеОС.ПринятоКУчетуВПрошломМесяце)) КАК НаработкиПериодНачало
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.НаработкиОбъектовЭксплуатации.СрезПоследних(
	|				&КонецПериода,
	|				(ОбъектЭксплуатации, ПоказательНаработки) В
	|					(ВЫБРАТЬ
	|						АмортизируемыеПоНаработкеОС.ОсновноеСредство,
	|						АмортизируемыеПоНаработкеОС.ПоказательНаработки
	|					ИЗ
	|						АмортизируемыеПоНаработкеОС КАК АмортизируемыеПоНаработкеОС
	|					ГДЕ
	|						НЕ АмортизируемыеПоНаработкеОС.ПринятоКУчетуВПрошломМесяце)) КАК НаработкиПериодОкончание
	|		ПО НаработкиПериодНачало.ОбъектЭксплуатации = НаработкиПериодОкончание.ОбъектЭксплуатации
	|			И НаработкиПериодНачало.ПоказательНаработки = НаработкиПериодОкончание.ПоказательНаработки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НаработкиПериодНачало.ОбъектЭксплуатации, НаработкиПериодОкончание.ОбъектЭксплуатации),
	|	ЕСТЬNULL(НаработкиПериодНачало.ПоказательНаработки, НаработкиПериодОкончание.ПоказательНаработки),
	|	ЕСТЬNULL(НаработкиПериодОкончание.Значение, 0) - ЕСТЬNULL(НаработкиПериодНачало.Значение, 0)
	|ИЗ
	|	РегистрСведений.НаработкиОбъектовЭксплуатации.СрезПоследних(
	|			ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&КонецПериода, МЕСЯЦ), МЕСЯЦ, -1),
	|			(ОбъектЭксплуатации, ПоказательНаработки) В
	|				(ВЫБРАТЬ
	|					АмортизируемыеПоНаработкеОС.ОсновноеСредство,
	|					АмортизируемыеПоНаработкеОС.ПоказательНаработки
	|				ИЗ
	|					АмортизируемыеПоНаработкеОС КАК АмортизируемыеПоНаработкеОС
	|				ГДЕ
	|					АмортизируемыеПоНаработкеОС.ПринятоКУчетуВПрошломМесяце)) КАК НаработкиПериодНачало
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.НаработкиОбъектовЭксплуатации.СрезПоследних(
	|				&КонецПериода,
	|				(ОбъектЭксплуатации, ПоказательНаработки) В
	|					(ВЫБРАТЬ
	|						АмортизируемыеПоНаработкеОС.ОсновноеСредство,
	|						АмортизируемыеПоНаработкеОС.ПоказательНаработки
	|					ИЗ
	|						АмортизируемыеПоНаработкеОС КАК АмортизируемыеПоНаработкеОС
	|					ГДЕ
	|						АмортизируемыеПоНаработкеОС.ПринятоКУчетуВПрошломМесяце)) КАК НаработкиПериодОкончание
	|		ПО НаработкиПериодНачало.ОбъектЭксплуатации = НаработкиПериодОкончание.ОбъектЭксплуатации
	|			И НаработкиПериодНачало.ПоказательНаработки = НаработкиПериодОкончание.ПоказательНаработки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСБУ.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБУ.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБУ.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБУ.Период КАК Период
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСБУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ПараметрыАмортизацииОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСНУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСНУ.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСНУ.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСНУ.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСНУ.Период КАК Период
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСНУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ПараметрыАмортизацииОСНУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиАмортизацииБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ГрафикиАмортизацииБУ.ГрафикАмортизации КАК ГрафикАмортизации
	|ПОМЕСТИТЬ ГрафикиАмортизацииБУ
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ГрафикиАмортизацииБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСПараметрыОтраженияВУчете()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СпособыОтраженияРасходовБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовБУ.СтатьяРасходов КАК СтатьяРасходов,
	|	СпособыОтраженияРасходовБУ.АналитикаРасходов КАК АналитикаРасходов,
	|	СпособыОтраженияРасходовБУ.СпособОтраженияРасходовЗаданДокументом,
	|	СпособыОтраженияРасходовБУ.СпособОтраженияРасходов,
	|	ЕСТЬNULL(ИзменениеПараметровАмортизацииОС.ДокументОснование, НЕОПРЕДЕЛЕНО) КАК СпособОтраженияРасходовДокументОснование,
	|	СпособыОтраженияРасходовБУ.ПередаватьРасходыВДругуюОрганизацию,
	|	СпособыОтраженияРасходовБУ.ОрганизацияПолучательРасходов,
	|	СпособыОтраженияРасходовБУ.СчетПередачиРасходов
	|ПОМЕСТИТЬ СпособыОтраженияРасходовБУ
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СпособыОтраженияРасходовБУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеПараметровОС КАК ИзменениеПараметровАмортизацииОС
	|		ПО СпособыОтраженияРасходовБУ.СпособОтраженияРасходов = ИзменениеПараметровАмортизацииОС.Ссылка
	|			И СпособыОтраженияРасходовБУ.СпособОтраженияРасходовЗаданДокументом
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчетаДооценокОС КАК СчетУчетаДооценокОС
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СчетаБухгалтерскогоУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчетаДооценокОС КАК СчетУчетаДооценокОС
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОСНачалоГода
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК СчетаБухгалтерскогоУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК Счет
	|ПОМЕСТИТЬ СчетаУчетаБУ
	|ИЗ
	|	СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОСНачалоГода.СчетУчета КАК Счет
	|ПОМЕСТИТЬ СчетаУчетаБУНачалоГода
	|ИЗ
	|	СчетаБухгалтерскогоУчетаОСНачалоГода КАК СчетаБухгалтерскогоУчетаОСНачалоГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК Счет
	|ПОМЕСТИТЬ СчетаНачисленияАмортизацииБУ
	|ИЗ
	|	СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаОСНачалоГода.СчетНачисленияАмортизации КАК Счет
	|ПОМЕСТИТЬ СчетаНачисленияАмортизацииБУНачалоГода
	|ИЗ
	|	СчетаБухгалтерскогоУчетаОСНачалоГода КАК СчетаБухгалтерскогоУчетаОСНачалоГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаБУ.Счет КАК Счет
	|ПОМЕСТИТЬ СчетаНачалоПериода
	|ИЗ
	|	СчетаУчетаБУ КАК СчетаУчетаБУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаНачисленияАмортизацииБУ.Счет
	|ИЗ
	|	СчетаНачисленияАмортизацииБУ КАК СчетаНачисленияАмортизацииБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаБУ.Счет КАК Счет
	|ПОМЕСТИТЬ СчетаКонецПериода
	|ИЗ
	|	СчетаУчетаБУ КАК СчетаУчетаБУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаНачисленияАмортизацииБУ.Счет
	|ИЗ
	|	СчетаНачисленияАмортизацииБУ КАК СчетаНачисленияАмортизацииБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаБУНачалоГода.Счет КАК Счет
	|ПОМЕСТИТЬ СчетаНачалоГода
	|ИЗ
	|	СчетаУчетаБУНачалоГода КАК СчетаУчетаБУНачалоГода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетаНачисленияАмортизацииБУНачалоГода.Счет
	|ИЗ
	|	СчетаНачисленияАмортизацииБУНачалоГода КАК СчетаНачисленияАмортизацииБУНачалоГода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСПрочиеПараметры()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СостоянияОСПринятоКУчету.ОсновноеСредство,
	|	МАКСИМУМ(СостоянияОСПринятоКУчету.ДатаСостояния) КАК ДатаВводаВЭксплуатацию
	|ПОМЕСТИТЬ СостоянияОСПринятоКУчету
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСПринятоКУчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС КАК СписокОС
	|		ПО СостоянияОСПринятоКУчету.ОсновноеСредство = СписокОС.ОсновноеСредство
	|			И (СостоянияОСПринятоКУчету.Организация = &Организация)
	|			И (СостоянияОСПринятоКУчету.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету))
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСПринятоКУчету.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБУ.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ МестонахождениеОСБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК МестонахождениеОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСАмортизацияПоДокументу()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	Хозрасчетный.Сумма,
	|	Хозрасчетный.СуммаНУКт,
	|	Хозрасчетный.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ Проводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаНачисленияАмортизацииБУ КАК СчетаНачисленияАмортизацииБУ
	|		ПО Хозрасчетный.СчетКт = СчетаНачисленияАмортизацииБУ.Счет
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Регистратор
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Хозрасчетный.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйСубконто.Значение КАК ОсновноеСредство,
	|	СУММА(Проводки.Сумма) КАК АмортизацияОборот,
	|	СУММА(Проводки.СуммаНУКт) КАК АмортизацияНУОборот
	|ПОМЕСТИТЬ АмортизацияОСДокумента
	|ИЗ
	|	Проводки КАК Проводки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО Проводки.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И Проводки.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства))
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйСубконто.Значение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса ;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияОСДанныеПроводок()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОстаткиНачалоПериода.Субконто1 КАК ОсновноеСредство,
	|	ОстаткиНачалоПериода.Счет КАК Счет,
	|	ОстаткиНачалоПериода.СуммаОстатокДт,
	|	ОстаткиНачалоПериода.СуммаНУОстатокДт,
	|	ОстаткиНачалоПериода.СуммаПРОстатокДт,
	|	ОстаткиНачалоПериода.СуммаОстатокКт,
	|	ОстаткиНачалоПериода.СуммаНУОстатокКт,
	|	ОстаткиНачалоПериода.СуммаПРОстатокКт
	|ПОМЕСТИТЬ ОстаткиНачалоПериода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаНачалоПериода.Счет
	|				ИЗ
	|					СчетаНачалоПериода КАК СчетаНачалоПериода),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ОстаткиНачалоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНачалоПериода.Субконто1 КАК ОсновноеСредство,
	|	ОстаткиНачалоПериода.Счет КАК Счет,
	|	-ОстаткиНачалоПериода.СуммаОстаток КАК СуммаОстаток,
	|	ПереоценкаОСБухгалтерскийУчетОбороты.СуммаПереоценкиПриход КАК СуммаПриход
	|ПОМЕСТИТЬ ОстаткиДопКапитала
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаБухгалтерскогоУчетаОС.СчетУчетаДооценокОС
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ОстаткиНачалоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПереоценкаОСБухгалтерскийУчет.Обороты(
	|				&НачалоПериодаДата,
	|				&КонецПериода,
	|				,
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							СписокОС.ОсновноеСредство
	|						ИЗ
	|							СписокОС КАК СписокОС)) КАК ПереоценкаОСБухгалтерскийУчетОбороты
	|		ПО ОстаткиНачалоПериода.Организация = ПереоценкаОСБухгалтерскийУчетОбороты.Организация
	|			И ОстаткиНачалоПериода.Субконто1 = ПереоценкаОСБухгалтерскийУчетОбороты.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиКонецПериода.Субконто1 КАК ОсновноеСредство,
	|	ОстаткиКонецПериода.Счет КАК Счет,
	|	ОстаткиКонецПериода.СуммаОстатокДт,
	|	ОстаткиКонецПериода.СуммаНУОстатокДт,
	|	ОстаткиКонецПериода.СуммаПРОстатокДт,
	|	ОстаткиКонецПериода.СуммаОстатокКт,
	|	ОстаткиКонецПериода.СуммаНУОстатокКт,
	|	ОстаткиКонецПериода.СуммаПРОстатокКт
	|ПОМЕСТИТЬ ОстаткиКонецПериода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаКонецПериода.Счет
	|				ИЗ
	|					СчетаКонецПериода КАК СчетаКонецПериода),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ОстаткиКонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНаНачалоГода.Субконто1 КАК ОсновноеСредство,
	|	ОстаткиНаНачалоГода.Счет КАК Счет,
	|	ОстаткиНаНачалоГода.СуммаОстатокДт,
	|	ОстаткиНаНачалоГода.СуммаОстатокКт
	|ПОМЕСТИТЬ ОстаткиНаНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоГода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаНачалоГода.Счет
	|				ИЗ
	|					СчетаНачалоГода КАК СчетаНачалоГода),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ОстаткиНаНачалоГода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияОСОбороты.Субконто1 КАК ОсновноеСредство,
	|	АмортизацияОСОбороты.СуммаОборотКт КАК АмортизацияОборот,
	|	АмортизацияОСОбороты.СуммаНУОборотКт КАК АмортизацияНУОборот
	|ПОМЕСТИТЬ АмортизацияОСЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериодаДата,
	|			&КонецПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаНачисленияАмортизацииБУ.Счет
	|				ИЗ
	|					СчетаНачисленияАмортизацииБУ КАК СчетаНачисленияАмортизацииБУ),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС),
	|			,
	|			) КАК АмортизацияОСОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаПериод.ОсновноеСредство КАК ОсновноеСредство,
	|	ЗаПериод.АмортизацияОборот - ЕСТЬNULL(ПоДокументу.АмортизацияОборот, 0) КАК АмортизацияОборот,
	|	ЗаПериод.АмортизацияНУОборот - ЕСТЬNULL(ПоДокументу.АмортизацияНУОборот, 0) КАК АмортизацияНУОборот
	|ПОМЕСТИТЬ АмортизацияОСОбороты
	|ИЗ
	|	АмортизацияОСЗаПериод КАК ЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСДокумента КАК ПоДокументу
	|		ПО ЗаПериод.ОсновноеСредство = ПоДокументу.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаСпособовОтраженияРасходов()
	
	Возврат
	"ВЫБРАТЬ
	|	ИзменениеПараметровОС.Ссылка КАК СпособОтраженияРасходов,
	|	ИзменениеПараметровОС.ОтражениеАмортизационныхРасходов.(
	|		НомерСтроки,
	|		Подразделение,
	|		СтатьяРасходов,
	|		АналитикаРасходов,
	|		Коэффициент,
	|		ПередаватьРасходыВДругуюОрганизацию,
	|		ОрганизацияПолучательРасходов,
	|		СчетПередачиРасходов
	|	)
	|ИЗ
	|	СпособыОтраженияРасходовБУ КАК СпособыОтраженияРасходовБУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеПараметровОС КАК ИзменениеПараметровОС
	|		ПО СпособыОтраженияРасходовБУ.СпособОтраженияРасходов = ИзменениеПараметровОС.Ссылка
	|ГДЕ
	|	СпособыОтраженияРасходовБУ.СпособОтраженияРасходовЗаданДокументом";
	
КонецФункции

Функция ПолучитьТекстЗапросаНачисленнаяАмортизацияЗаПериод()
	
	Возврат
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета КАК ОсновноеСредство
	|ПОМЕСТИТЬ втАктивыВДокументахЗаПериод
	|ИЗ
	|	Документ.АмортизацияОС КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АмортизацияОС.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета
	|ИЗ
	|	Документ.ВозвратОСОтАрендатора КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратОСОтАрендатора.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета
	|ИЗ
	|	Документ.ИзменениеПараметровОС КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеПараметровОС.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета
	|ИЗ
	|	Документ.МодернизацияОС КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МодернизацияОС.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета
	|ИЗ
	|	Документ.ПередачаОСАрендатору КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаОСАрендатору.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета
	|ИЗ
	|	Документ.ПеремещениеОС КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеОС.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета
	|ИЗ
	|	Документ.КорректировкаНалоговогоНазначенияОС КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаНалоговогоНазначенияОС.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор			
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета
	|ИЗ
	|	Документ.ПодготовкаКПередачеОС КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодготовкаКПередачеОС.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета
	|ИЗ
	|	Документ.СписаниеОС КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеОС.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ОбъектУчета
	|ИЗ
	|	Документ.ПереоценкаОС КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереоценкаОС.НачисленнаяАмортизация КАК ТабличнаяЧасть
	|		ПО Документ.Ссылка = ТабличнаяЧасть.Ссылка
	|ГДЕ
	|	Документ.Дата МЕЖДУ &НачалоПериодаДата И &КонецПериода
	|	И Документ.Проведен
	|	И НЕ Документ.ПометкаУдаления
	|	И Документ.Ссылка <> &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериодаДата,
	|			&КонецПериода,
	|			Регистратор <> &Регистратор
	|				И Регистратор ССЫЛКА Документ.АмортизацияОС
	|				И СчетКт В
	|					(ВЫБРАТЬ
	|						Т.СчетНачисленияАмортизации
	|					ИЗ
	|						СчетаБухгалтерскогоУчетаОС КАК Т),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втАктивыВДокументахЗаПериод.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ втАмортизированныеАктивы
	|ИЗ
	|	втАктивыВДокументахЗаПериод КАК втАктивыВДокументахЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втАктивыВДокументахЗаПериод";
	
КонецФункции

Функция ПолучитьТаблицуГрафиковАмортизации(Графики)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Графики", Графики);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГодовыеГрафикиАмортизацииОС.Ссылка КАК График,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент1,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент2,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент3,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент4,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент5,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент6,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент7,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент8,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент9,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент10,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент11,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент12,
	|	ГодовыеГрафикиАмортизацииОС.Коэффициент1 + ГодовыеГрафикиАмортизацииОС.Коэффициент2 + ГодовыеГрафикиАмортизацииОС.Коэффициент3 + ГодовыеГрафикиАмортизацииОС.Коэффициент4 + ГодовыеГрафикиАмортизацииОС.Коэффициент5 + ГодовыеГрафикиАмортизацииОС.Коэффициент6 + ГодовыеГрафикиАмортизацииОС.Коэффициент7 + ГодовыеГрафикиАмортизацииОС.Коэффициент8 + ГодовыеГрафикиАмортизацииОС.Коэффициент9 + ГодовыеГрафикиАмортизацииОС.Коэффициент10 + ГодовыеГрафикиАмортизацииОС.Коэффициент11 + ГодовыеГрафикиАмортизацииОС.Коэффициент12 КАК СуммаКоэффициентов,
	|	ПУСТАЯТАБЛИЦА.(
	|		КАК График,
	|		КАК МесяцРасчета,
	|		КАК Коэффициент
	|	) КАК ТаблицаМесяцев
	|ИЗ
	|	Справочник.ГодовыеГрафикиАмортизацииОС КАК ГодовыеГрафикиАмортизацииОС";
	ТаблицаГрафиков = Запрос.Выполнить().Выгрузить();
	ТаблицаГрафиков.Индексы.Добавить("График");

	Возврат ТаблицаГрафиков;

КонецФункции

Функция ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, График, ДатаРасчета)
	
	СтрокаТаблицы = ТаблицаГрафиков.Найти(График, "График");
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	СуммаВсех = СтрокаТаблицы.СуммаКоэффициентов;
	
	КоэффициентАмортизации = 0;
	
	Если СуммаВсех = 0 Тогда
		КоэффициентАмортизации = 1;
	Иначе
		СуммаОдного = СтрокаТаблицы["Коэффициент" + Месяц(ДатаРасчета)];
		КоэффициентАмортизации = СуммаОдного / СуммаВсех;
	КонецЕсли;

	Возврат КоэффициентАмортизации;

КонецФункции // ПолучитьКоэффициентАмортизацииИзГрафика()

//Формула расчета суммы уменьшения дополнительного капитала на нераспределенную прибыль
Функция РасчетСуммыУменьшенияДооценки(СуммаАмортизации, ОстаточнаяСтоимость, ВыборкаПоОС)
	
	Возврат (СуммаАмортизации * ВыборкаПоОС.ОстаточнаяСуммаДооценки)/ОстаточнаяСтоимость;
	
КонецФункции

Функция ПолучитьКоэффициентАмортизацииИзГрафикаУКР(ТаблицаГрафиков, График, ДатаРасчета, ТипГодовой = Неопределено)
	
	КоэффициентАмортизации = 0;
	
	СтрокаТаблицы = ТаблицаГрафиков.Найти(График, "График");
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ТипГодовой = Неопределено Тогда
		СуммаВсех = СтрокаТаблицы.СуммаКоэффициентов;
		СуммаОдного = СтрокаТаблицы["Коэффициент" + Месяц(ДатаРасчета)];
	Иначе
		Если ТипГодовой = ТипЗнч(График) Тогда
			СуммаВсех = СтрокаТаблицы.СуммаКоэффициентов;
			СуммаОдного = СтрокаТаблицы["Коэффициент" + Месяц(ДатаРасчета)];
		Иначе
			ТаблицаМесяцев = СтрокаТаблицы.ТаблицаМесяцев;
			СтрокаМесяца   = ТаблицаМесяцев.Найти(НачалоМесяца(ДатаРасчета), "МесяцРасчета");
			СуммаВсех      = ТаблицаМесяцев.Итог("Коэффициент");
			СуммаОдного    = ?(СтрокаМесяца = Неопределено, 0, СтрокаМесяца.Коэффициент);
	    КонецЕсли;
	КонецЕсли;
	КоэффициентАмортизации = СуммаОдного / ?(СуммаВсех = 0 ИЛИ СуммаВсех = NULL, 1, СуммаВсех);
	Возврат КоэффициентАмортизации;

КонецФункции // ПолучитьКоэффициентАмортизацииИзГрафика()

Процедура СообщитьОбОшибкеПриНачисленииАмортизации(Выборка, ТекстСообщения, РегОперация, Отказ, Ссылка = Неопределено)
	
	ШаблонСообщения = НСтр("ru='%1 для основного средства %2 (%3), инвентарный номер %4.';uk='%1 для основного засобу %2 (%3), інвентарний номер %4.'");
	ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстСообщения, 
		Выборка.ОсновноеСредствоПредставление, Выборка.Код, Выборка.ИнвентарныйНомер);
		
	Если Ссылка = Неопределено Тогда
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС
			+ НСтр("ru='Укажите эти данные в документах принятия к учету или изменения параметров начисления амортизации.';uk='Вкажіть ці дані в документах прийняття до обліку або зміни параметрів нарахування амортизації.'");
		СсылкаСообщения = "e1cib/navigationpoint/ВнеоборотныеАктивы";
	ИначеЕсли Ссылка = Ложь Тогда
		СсылкаСообщения = Неопределено;
	Иначе
		СсылкаСообщения = Ссылка;
	КонецЕсли;
	
	БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстСообщенияОбОшибке, СсылкаСообщения, Отказ, РегОперация);
	
КонецПроцедуры // СообщитьОбОшибкеПриНачисленииАмортизации()


Функция ПодготовитьТаблицуПризнаков(ТаблицаОС, Реквизиты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПризнаков(ТаблицаОС);	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("Период", Реквизиты[0].Период);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ	
	|	ТаблицаОС.ОсновноеСредство
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							Т.ОсновноеСредство
	|						ИЗ
	|							ТаблицаОС КАК Т)
	|						) КАК ПервоначальныеСведенияОСБУ
	|		ПО ТаблицаОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство";
	ТаблицаПризнаков = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПризнаков;
	
КонецФункции	
 
Функция ПодготовитьПараметрыПризнаков(ТаблицаОС)
	Параметры = Новый Структура;
	// Подготовка таблицы Параметры.ТаблицаОС
	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>
	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	Возврат Параметры;
КонецФункции


// СПИСАНИЕ ОСТАТОЧНОЙ СТОИМОСТИ ОС

Функция ПодготовитьТаблицуОстаточнойСтоимости(ТаблицаОС, ТаблицаРеквизиты, ПараметрыВыбытия, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыОстаточнойСтоимости(ТаблицаОС, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПараметрыСписания = ПараметрыВыбытия.ТаблицаПараметрыСписания;

	ОтражатьВНалоговомУчете 		= 	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ	=	Перечисления.МетодыНачисленияАмортизации.Линейный;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.Субконто,
	|	ТаблицаОС.СчетСписания
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	Если ТаблицаПараметрыСписания.Количество() > 0 Тогда
		// Получим остаточную стоимость по результатам выбытия
		Запрос.УстановитьПараметр("ТаблицаПараметрыСписания", ТаблицаПараметрыСписания);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПараметрыСписания.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаПараметрыСписания.СтоимостьОС,
		|	ТаблицаПараметрыСписания.СтоимостьОСНУ,
		|	ТаблицаПараметрыСписания.СтоимостьОСПР,
		|	ТаблицаПараметрыСписания.СтоимостьОСВР,
		|	ТаблицаПараметрыСписания.АмортизацияОС,
		|	ТаблицаПараметрыСписания.АмортизацияОСНУ,
		|	ТаблицаПараметрыСписания.АмортизацияОСПР,
		|	ТаблицаПараметрыСписания.АмортизацияОСВР
		|ПОМЕСТИТЬ ТаблицаПараметрыСписания
		|ИЗ
		|	&ТаблицаПараметрыСписания КАК ТаблицаПараметрыСписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПараметрыСписания.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаПараметрыСписания.СтоимостьОС - ТаблицаПараметрыСписания.АмортизацияОС КАК СтоимостьБУ,
		|	ТаблицаПараметрыСписания.СтоимостьОСНУ - ТаблицаПараметрыСписания.АмортизацияОСНУ КАК СтоимостьНУ,
		|	0 КАК СтоимостьПР,
		|	0 КАК СтоимостьВР
		|ПОМЕСТИТЬ ТаблицаСтоимости
		|ИЗ
		|	ТаблицаПараметрыСписания КАК ТаблицаПараметрыСписания
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		Запрос.Выполнить();
	Иначе
		// получим остаточную стоимость из регистра бухгалтерии, со счета выбытия
		Запрос.УстановитьПараметр("Период", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
		Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСумм.Субконто1 КАК ОсновноеСредство,
		|	ЕСТЬNULL(ТаблицаСумм.СуммаОстатокДт, 0) КАК СтоимостьБУ,
		|	ЕСТЬNULL(ТаблицаСумм.СуммаНУОстатокДт, 0) КАК СтоимостьНУ,
		|	0 КАК СтоимостьПР,
		|	0 КАК СтоимостьВР
		|ПОМЕСТИТЬ ТаблицаСумм
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СписаниеНеоборотныхАктивов),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ТаблицаОС.ОсновноеСредство
		|					ИЗ
		|						ТаблицаОС КАК ТаблицаОС)) КАК ТаблицаСумм
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСтоимости.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаСтоимости.СтоимостьБУ,
		|	ТаблицаСтоимости.СтоимостьНУ,
		|	ТаблицаСтоимости.СтоимостьПР,
		|	ТаблицаСтоимости.СтоимостьВР
		|ПОМЕСТИТЬ ТаблицаСтоимости
		|ИЗ
		|	ТаблицаСумм КАК ТаблицаСтоимости
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		Запрос.Выполнить();
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.Субконто,
	|	ТаблицаОС.СчетСписания,
	|	ТаблицаСтоимости.СтоимостьБУ,
	|	ТаблицаСтоимости.СтоимостьНУ,
	|	ТаблицаСтоимости.СтоимостьПР,
	|	ТаблицаСтоимости.СтоимостьВР
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСтоимости КАК ТаблицаСтоимости
	|		ПО ТаблицаОС.ОсновноеСредство = ТаблицаСтоимости.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОС.НомерСтроки";
	ТаблицаСтоимости = Запрос.Выполнить().Выгрузить();

	Если НЕ ОтражатьВНалоговомУчете Тогда
	Для Каждого СтрокаТаблицы Из ТаблицаСтоимости Цикл
				СтрокаТаблицы.СтоимостьНУ = 0;
				СтрокаТаблицы.СтоимостьПР = 0;
				СтрокаТаблицы.СтоимостьВР = 0;
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаСтоимости;

КонецФункции

Функция ПодготовитьПараметрыОстаточнойСтоимости(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство," // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "Субконто,"         // <Характеристика.ВидыСубконтоХозрасчетные> - субконто расходов по списанию стоимости ОС
	+ "СчетСписания";     // <ПланСчетовСсылка.Хозрасчетный> - счет списания ОС

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "Подразделение,"             // 
	+ "Регистратор";               // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияСписаниеОстаточнойСтоимостиОС(ТаблицаСтоимости, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеОстаточнойСтоимостиОС(ТаблицаСтоимости, ТаблицаРеквизиты);

	Если Параметры.ТаблицаСтоимости.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	Для каждого СтрокаТаблицы Из  Параметры.ТаблицаСтоимости Цикл

		Если Реквизиты.Подразделение <> Неопределено Тогда
			ПодразделениеПроводки = Реквизиты.Подразделение;
		Иначе
			ПодразделениеПроводки = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Субконто = СтрокаТаблицы.Субконто;
		СчетСписания = СтрокаТаблицы.СчетСписания;

		// Списание остаточной стоимости Дт 91.02 Кт 01.09
		СуммаПроводки = СтрокаТаблицы.СтоимостьБУ;
		Если НЕ ОтражатьВНалоговомУчете Тогда

			СуммаПроводкиНУ = 0;
			СуммаПроводкиПР = 0;
			СуммаПроводкиВР = 0;
		Иначе
			СуммаПроводкиНУ = СтрокаТаблицы.СтоимостьНУ;
			СуммаПроводкиПР = 0;
			СуммаПроводкиВР = 0;
		КонецЕсли;

		Если СуммаПроводки > 0
			ИЛИ СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиПР <> 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = Реквизиты.Содержание;

			Проводка.СчетДт = СчетСписания;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Субконто);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.СписаниеНеоборотныхАктивов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

	// Вызов переопределяемой процедуры для выполнения дополнительных действий при списании ОС.
	УправлениеВнеоборотнымиАктивамиПереопределяемый.ВыполнитьДополнительныеДействияСписаниеОС(ТаблицаСтоимости, ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыСписаниеОстаточнойСтоимостиОС(ТаблицаСтоимости, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСтоимости

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство," // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "СтоимостьБУ,"      // <Число, 15, 2> - остаточная стоимость ОС по данным бухгалтерского учета
	+ "СтоимостьНУ,"      // <Число, 15, 2> - остаточная стоимость ОС по данным налогового учета
	+ "СтоимостьПР,"      // <Число, 15, 2> - постоянные разницы в оценке остаточной стоимости ОС (ПБУ 18/02)
	+ "СтоимостьВР,"      // <Число, 15, 2> - временные разницы в оценке остаточной стоимости ОС (ПБУ 18/02)
	+ "Субконто,"         // <Характеристика.ВидыСубконтоХозрасчетные> - субконто расходов по списанию стоимости ОС
	+ "СчетСписания";     // <ПланСчетовСсылка.Хозрасчетный> - счет списания ОС

	Параметры.Вставить("ТаблицаСтоимости",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаСтоимости, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // 
	+ "Содержание";    // <Строка, 150>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


// ПЕРЕМЕЩЕНИЕ ОС

Процедура СформироватьДвиженияПеремещениеОС(ТаблицаОС, ТаблицаРеквизиты, ПараметрыНачисленияАмортизации, Движения, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыПеремещениеОС(ТаблицаОС, ТаблицаРеквизиты);

	Если Параметры.ТаблицаОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	// Выборка остатков по основным средствам в регистрах бухгалтерии.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаОС", Параметры.ТаблицаОС);
	Запрос.УстановитьПараметр("ТаблицаАмортизации", ПараметрыНачисленияАмортизации.Амортизация.ТаблицаАмортизации);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПолучитьПустоеЗначениеПодразделения());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАмортизации.ОбъектУчета КАК ОсновноеСредство,
	|	ТаблицаАмортизации.СуммаАмортизацииБУ КАК СуммаАмортизацииБУ,
	|	ТаблицаАмортизации.СуммаАмортизацииНУ КАК СуммаАмортизацииНУ,
	|	ТаблицаАмортизации.СуммаАмортизацииПР КАК СуммаАмортизацииПР,
	|	ТаблицаАмортизации.СуммаАмортизацииВР КАК СуммаАмортизацииВР
	|ПОМЕСТИТЬ ТаблицаАмортизации
	|ИЗ
	|	&ТаблицаАмортизации КАК ТаблицаАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПодразделенияОС.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ ПодразделенияОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ПодразделенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки,
	|	СчетУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетУчетаОС.СчетУчета,
	|	СчетУчетаОС.СчетНачисленияАмортизации,
	|	ЕСТЬNULL(ПодразделенияОС.Подразделение, &ПустоеПодразделение) КАК Подразделение
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	СчетУчетаОС КАК СчетУчетаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодразделенияОС КАК ПодразделенияОС
	|		ПО СчетУчетаОС.ОсновноеСредство = ПодразделенияОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОС КАК ТаблицаОС
	|		ПО СчетУчетаОС.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетУчетаОС.СчетУчета КАК Счет
	|ПОМЕСТИТЬ РазличныеСчета
	|ИЗ
	|	СчетУчетаОС КАК СчетУчетаОС
	|ГДЕ
	|	СчетУчетаОС.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетУчетаОС.СчетНачисленияАмортизации
	|ИЗ
	|	СчетУчетаОС КАК СчетУчетаОС
	|ГДЕ
	|	СчетУчетаОС.СчетНачисленияАмортизации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|
	|";
	Запрос.Выполнить();

	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда

		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетУчетаОС.ОсновноеСредство,
		|	СчетУчетаОС.СчетУчета КАК Счет
		|ИЗ
		|	СчетУчетаОС КАК СчетУчетаОС
		|ГДЕ
		|	СчетУчетаОС.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетУчетаОС.ОсновноеСредство,
		|	СчетУчетаОС.СчетНачисленияАмортизации
		|ИЗ
		|	СчетУчетаОС КАК СчетУчетаОС
		|ГДЕ
		|	СчетУчетаОС.СчетНачисленияАмортизации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
		|
		|";
		РезультатЗапроса = Запрос.Выполнить();

		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных",
			"РегистрБухгалтерии", "Хозрасчетный", РезультатЗапроса);

		СтруктураЗначенийБлокировки = Новый Структура("Период, Организация",
			Новый Диапазон(, Реквизиты.Период), Реквизиты.Организация);

		СтруктураИсточникаДанных = Новый Соответствие;
		СтруктураИсточникаДанных.Вставить("Счет", "Счет");
		СтруктураИсточникаДанных.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства,
			"ОсновноеСредство");

		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Счет.Код КАК СчетКод,
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СуммаВРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокКт КАК СуммаВРОстатокКт
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ
	|					РазличныеСчета.Счет
	|				ИЗ
	|					РазличныеСчета КАК РазличныеСчета),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						СписокОС КАК СписокОС)) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство,
	|	СписокОС.СчетУчета,
	|	СписокОС.СчетНачисленияАмортизации, 
	|	ЕСТЬNULL(Стоимость.СуммаОстатокДт, 0) КАК СтоимостьБУ,
	|	ЕСТЬNULL(Стоимость.СуммаНУОстатокДт, 0) КАК СтоимостьНУ,
	|	ЕСТЬNULL(Амортизация.СуммаОстатокКт, 0) + ЕСТЬNULL(ИзменениеАмортизации.СуммаАмортизацииБУ, 0) КАК АмортизацияБУ,
	|	ЕСТЬNULL(Амортизация.СуммаНУОстатокКт, 0) + ЕСТЬNULL(ИзменениеАмортизации.СуммаАмортизацииНУ, 0) КАК АмортизацияНУ,
	|	0 КАК АмортизацияПР,
	|	0 КАК АмортизацияВР,
	|	ЕСТЬNULL(Амортизация.СуммаОстатокДт, 0) КАК Износ
	|ИЗ
	|	СписокОС КАК СписокОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК Стоимость
	|		ПО СписокОС.ОсновноеСредство = Стоимость.ОсновноеСредство
	|			И СписокОС.СчетУчета = Стоимость.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК Амортизация
	|		ПО СписокОС.ОсновноеСредство = Амортизация.ОсновноеСредство
	|			И СписокОС.СчетНачисленияАмортизации = Амортизация.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаАмортизации КАК ИзменениеАмортизации
	|		ПО СписокОС.ОсновноеСредство = ИзменениеАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, ) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписокОС.НомерСтроки";
	ТаблицаОстатковПоОС = Запрос.Выполнить().Выгрузить();

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	// Движения по регистрам бухгалтерии.
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковПоОС Цикл

		// Перемещение стоимости
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
			И (СтрокаТаблицы.СтоимостьБУ > 0
				ИЛИ СтрокаТаблицы.СтоимостьНУ > 0) Тогда 
				
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = НСтр("ru='Перемещение ОС';uk='Переміщення ОЗ'");

			Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеПолучатель;
			КонецЕсли;

			Проводка.СчетКт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.Сумма = СтрокаТаблицы.СтоимостьБУ;

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СтоимостьНУ;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СтоимостьНУ;
			КонецЕсли;

		КонецЕсли;

		// Перемещение амортизации
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетНачисленияАмортизации)
			И (СтрокаТаблицы.АмортизацияБУ > 0
				ИЛИ СтрокаТаблицы.АмортизацияНУ > 0) Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = НСтр("ru='Перемещение ОС';uk='Переміщення ОЗ'");

			Проводка.СчетДт = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.СчетКт  = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.ПодразделениеПолучатель;
			КонецЕсли;

			Проводка.Сумма = СтрокаТаблицы.АмортизацияБУ;

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.АмортизацияНУ;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.АмортизацияНУ;
			КонецЕсли;

		КонецЕсли;

		// Перемещение износа
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетНачисленияАмортизации) И СтрокаТаблицы.Износ > 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = НСтр("ru='Перемещение ОС';uk='Переміщення ОЗ'");

			Проводка.СчетДт = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.ПодразделениеПолучатель;
			КонецЕсли;

			Проводка.СчетКт  = СтрокаТаблицы.СчетНачисленияАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.Сумма = СтрокаТаблицы.Износ;

		КонецЕсли;


	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПеремещениеОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                  // <Дата>
	+ "Организация,"             // <СправочникСсылка.Организации>
	+ "Подразделение,"           // Подразделение-сдачик
	+ "ПодразделениеПолучатель," // Подразделение-получатель
	+ "Регистратор";             // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// МОДЕРНИЗАЦИЯ ОС

Процедура СформироватьДвиженияМодернизацияОС(ТаблицаМодернизации, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыМодернизацияОС(ТаблицаМодернизации, ТаблицаРеквизиты);

	Если Параметры.ТаблицаМодернизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ИДКонфигурации = РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации();

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ТаблицаМодернизации", Параметры.ТаблицаМодернизации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаМодернизации.НомерСтроки КАК НомерСтроки,
	|	ТаблицаМодернизации.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаМодернизации.СуммаМодернизацииБУ,
	|	ТаблицаМодернизации.СуммаМодернизацииНУ,
	|	ТаблицаМодернизации.СуммаМодернизацииПР,
	|	ТаблицаМодернизации.СуммаМодернизацииВР,
	|	ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	" + ?(ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП", "-ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыНУ", "0") + " КАК СуммаКапитальныхВложенийВключаемыхВРасходыПР,
	|	" + ?(ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП", "0", "-ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыНУ") + " КАК СуммаКапитальныхВложенийВключаемыхВРасходыВР
	|ПОМЕСТИТЬ ТаблицаМодернизации
	|ИЗ
	|	&ТаблицаМодернизации КАК ТаблицаМодернизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаМодернизации.ОсновноеСредство
	|					ИЗ
	|						ТаблицаМодернизации КАК ТаблицаМодернизации)) КАК СчетаУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМодернизации.НомерСтроки КАК НомерСтроки,
	|	ТаблицаМодернизации.ОсновноеСредство,
	|	ТаблицаМодернизации.СуммаМодернизацииБУ,
	|	ТаблицаМодернизации.СуммаМодернизацииНУ,
	|	ТаблицаМодернизации.СуммаМодернизацииПР,
	|	ТаблицаМодернизации.СуммаМодернизацииВР,
	|	ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыНУ,
	|	ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыПР,
	|	ТаблицаМодернизации.СуммаКапитальныхВложенийВключаемыхВРасходыВР,
	|	СчетаУчетаОС.СчетУчета
	|ИЗ
	|	ТаблицаМодернизации КАК ТаблицаМодернизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаОС КАК СчетаУчетаОС
	|		ПО ТаблицаМодернизации.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ТаблицаПараметровМодернизации = Запрос.Выполнить().Выгрузить();

	Для каждого СтрокаТаблицы Из ТаблицаПараметровМодернизации Цикл

		// Списание модернизации Дт 01.01 Кт 08.03
		СуммаПроводки = СтрокаТаблицы.СуммаМодернизацииБУ;

		Если ОтражатьВНалоговомУчете Тогда

			СуммаПроводкиНУ = СтрокаТаблицы.СуммаМодернизацииНУ;
			СуммаПроводкиПР = СтрокаТаблицы.СуммаМодернизацииПР;
			СуммаПроводкиВР = СтрокаТаблицы.СуммаМодернизацииВР;
		Иначе
			СуммаПроводкиНУ = 0;
			СуммаПроводкиПР = 0;
			СуммаПроводкиВР = 0;

		КонецЕсли;

		Если СуммаПроводки > 0
			ИЛИ СуммаПроводкиНУ > 0
			ИЛИ СуммаПроводкиПР <> 0
			ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = НСтр("ru='Модернизация ОС';uk='Модернізація ОЗ'");

			Проводка.СчетДт = СтрокаТаблицы.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаТаблицы.ОсновноеСредство);

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = Реквизиты.Подразделение;
			КонецЕсли;

			Проводка.СчетКт = Реквизиты.СчетУчетаВнеоборотногоАктива;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбъектыСтроительства", Реквизиты.ОбъектСтроительства);

			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.ПодразделениеВнеоборотногоАктива;
			КонецЕсли;

			Проводка.Сумма = СуммаПроводки;

			Если ОтражатьВНалоговомУчете Тогда

				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	
	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыМодернизацияОС(ТаблицаМодернизации, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаМодернизации

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"                                  // <Число, 5, 0>
	+ "ОсновноеСредство,"                             // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "СуммаМодернизацииБУ,"                          // <Число, 15, 2> - сумма модернизации по данным бухгалтерского учета
	+ "СуммаМодернизацииНУ,"                          // <Число, 15, 2> - сумма модернизации по данным налогового учета
	+ "СуммаМодернизацииПР,"                          // <Число, 15, 2> - постоянные разницы в оценке модернизации (ПБУ 18/02)
	+ "СуммаМодернизацииВР";                          // <Число, 15, 2> - временные разницы в оценке модернизации (ПБУ 18/02)


	Параметры.Вставить("ТаблицаМодернизации",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаМодернизации, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                 // <Дата>
	+ "ОбъектСтроительства,"                    // <СправочникСсылка.ОбъектыСтроительства> - объект строительства,
		// стоимость с которого нужно списать на модернизацию ОС
	+ "Организация,"                            // <СправочникСсылка.Организации>
	+ "Подразделение,"                          // 
	+ "ПодразделениеВнеоборотногоАктива,"       // 
	+ "Регистратор,"                            // <ДокументСсылка.*>
	+ "СчетУчетаВнеоборотногоАктива";           // <ПланСчетовСсылка.Хозрасчетный> - счет учета объекта строительства
	
	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// НАЧИСЛЕНИЕ АМОРТИЗАЦИИ


Функция ПодготовитьТаблицыАмортизацииОС(ТаблицаОС, ТаблицаРеквизиты, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПодготовитьТаблицыАмортизацииОС(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Содержание = НСтр("ru='Амортизация ОС';uk='Амортизація ОЗ'");
	
	ПараметрыНачисленияАмортизации = Новый Структура;
	
	Параметры.Реквизиты.Колонки.Добавить("Содержание");
	Параметры.Реквизиты.ЗаполнитьЗначения(Содержание, "Содержание");
	ТаблицаАмортизации = ПодготовитьТаблицуАмортизацияОС(Параметры.ТаблицаОС, Параметры.Реквизиты, Отказ);
	
	ПараметрыАмортизации = Новый Структура;
	ПараметрыАмортизации.Вставить("ТаблицаАмортизации", ТаблицаАмортизации);
	ПараметрыАмортизации.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыНачисленияАмортизации.Вставить("Амортизация", ПараметрыАмортизации);
	
	Параметры.Реквизиты.ЗаполнитьЗначения("", "ИмяСписка");
	
	ТаблицаРаспределения = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
		ТаблицаАмортизации, Параметры.Реквизиты, Отказ);
	
	ПараметрыРаспределения = Новый Структура;
	ПараметрыРаспределения.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыРаспределения.Вставить("ТаблицаЗатрат", ТаблицаРаспределения);
	ПараметрыНачисленияАмортизации.Вставить("РаспределениеАмортизации", ПараметрыРаспределения);
	
	
	Возврат ПараметрыНачисленияАмортизации;
	
КонецФункции

Функция ПодготовитьПараметрыПодготовитьТаблицыАмортизацииОС(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"      // <Число, 5, 0>
	+ "ОсновноеСредство"; // <СправочникСсылка.ОбъектыЭксплуатации>

	Параметры.Вставить("ТаблицаОС",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период," // <Дата>
	+ "ДатаРасчета," // <Дата>
	+ "ВыдаватьСообщения," // <Булево>
	+ "ИмяСписка," // <Строка, 0>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор"; // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияНачислениеАмортизации(ПараметрыНачисленияАмортизации, Движения, Отказ) Экспорт

	УправлениеВнеоборотнымиАктивамиПереопределяемый.СформироватьДвиженияНачислениеАмортизации(ПараметрыНачисленияАмортизации.РаспределениеАмортизации.ТаблицаЗатрат,
		ПараметрыНачисленияАмортизации.РаспределениеАмортизации.ТаблицаРеквизиты, Движения, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;


КонецПроцедуры

// КОЭФФЦИЕНТ ПРИНЯТИЯ К УЧЕТУ ОБЪЕКТОВ СТРОИТЕЛЬСТВА (для НДС)

Функция ПолучитьКоэффициентРаспределенияСпособовСтроительства(ТаблицаРеквизиты, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПодготовитьПараметрыПолучитьКоэффициентРаспределенияСпособовСтроительства(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Если Реквизиты.СуммаСтроительства = 0 Тогда
		Возврат 0;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецПериода", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("Счет", Реквизиты.Счет);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Объект", Реквизиты.Объект);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Остатки.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецПериода,
	|			Счет = &Счет,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства),
	|			Организация = &Организация
	|				И Субконто1 = &Объект) КАК Остатки";

	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		ПараметрыБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");

		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, Реквизиты.Период));
		ЗначенияБлокировки.Вставить("Организация", Реквизиты.Организация);
		ЗначенияБлокировки.Вставить("Счет", Реквизиты.Счет);
		ЗначенияБлокировки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, Реквизиты.Объект);

		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки);
	КонецЕсли;

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СуммаОстатка = 0;
	Иначе
		Результат = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		СуммаОстатка = Результат.Итог("СуммаОстаток");
	КонецЕсли;

	Если СуммаОстатка = 0 Тогда
		КоэффициентРаспределения = 1;
	ИначеЕсли СуммаОстатка < 0 Тогда
		КоэффициентРаспределения = 1;
	Иначе
		КоэффициентРаспределения = Реквизиты.СуммаСтроительства / СуммаОстатка;
	КонецЕсли;

	Возврат КоэффициентРаспределения;

КонецФункции

Функция ПодготовитьПараметрыПолучитьКоэффициентРаспределенияСпособовСтроительства(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"             // <Дата>
	+ "Объект,"             // <СправочникСсылка.ОбъектыСтроительства> - объект строительства, коэффицент принятия
		// к учету, которого требуется определить
	+ "Организация,"        // <СправочникСсылка.Организации>
	+ "Регистратор,"        // <ДокументСсылка.*>
	+ "СуммаСтроительства," // <Число, 15, 2> - сумма принятия к учету
	+ "Счет";               // <ПланСчетовСсылка.Хозрасчетный> - счет учета объекта строительства

	Параметры.Вставить("Реквизиты",
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ ОС

// Функция рассчитывает стоимость объекта строительства по разным видам учета.
// Возвращает структуру со значениями стоимостей по видам учета, поля:
// - СтоимостьБУ
// - СтоимостьНУ
// - СтоимостьПР
// - СтоимостьВР
//
Функция РассчитатьСтоимостьОбъектаСтроительства(Знач Организация, Знач ПодразделениеОрганизации, Знач Период, Знач СчетУчета, Знач ОбъектСтроительства) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураСтоимостьОбъектаСтроительства = Новый Структура;
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьБУ", 0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьНУ", 0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьПР", 0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьВР", 0);
	
	Если ТипЗнч(Период) = Тип("Граница") Тогда
		ГраницаПолученияОстатков = Период;
	Иначе
		ГраницаПолученияОстатков = Новый Граница(Период);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",                   ГраницаПолученияОстатков);
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("СчетУчета",                СчетУчета);
	Запрос.УстановитьПараметр("ОбъектСтроительства",      ОбъектСтроительства);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СтоимостьНУ,
	|	0 КАК СтоимостьПР,
	|	0 КАК СтоимостьВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет = &СчетУчета,
	|			,
	|			Субконто1 = &ОбъектСтроительства
	|				И Организация = &Организация
	|				И (Подразделение = &ПодразделениеОрганизации
	|					ИЛИ Подразделение ЕСТЬ NULL )) КАК ХозрасчетныйОстатки";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СтруктураСтоимостьОбъектаСтроительства, Выборка);
		
	КонецЕсли;
	
	Возврат СтруктураСтоимостьОбъектаСтроительства;

КонецФункции // РассчитатьСтоимостьОбъектаСтроительства()

// ПРОЧЕЕ

Процедура ОпределитьСчетаУчетаОС(ТаблицаОС, Период, Организация, ИмяКолонки = "Номенклатура") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОС", ТаблицаОС.ВыгрузитьКолонку(ИмяКолонки));
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаОС.ОсновноеСредство,
	|	СчетаУчетаОС.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК СчетаУчетаОС";
	РезультатЗапрос = Запрос.Выполнить();
	ТаблицаСчетов = РезультатЗапрос.Выгрузить();
	ТаблицаСчетов.Индексы.Добавить("ОсновноеСредство");
	Для каждого СтрокаОС Из ТаблицаОС Цикл
		НайденнаяСтрока = ТаблицаСчетов.Найти(СтрокаОС[ИмяКолонки], "ОсновноеСредство");
		Если НайденнаяСтрока <> Неопределено Тогда
			СтрокаОС.СчетУчета = НайденнаяСтрока.СчетУчета;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


// По переданной структуре полей формирует запрос по табличной части документа.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа,
//  ИмяТабличнойЧасти - строка, имя табличной части,
//  СтруктураПолей    - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса,
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураПолей) Экспорт

	ТекстЗапроса = "";

	Для Каждого Реквизит Из СтруктураПолей Цикл

		ТекстЗапроса  = ТекстЗапроса + ",
		|	Док." + Реквизит.Значение + " КАК " + СокрЛП(Реквизит.Ключ);

	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.НомерСтроки " + ТекстЗапроса + "
	|
	|ИЗ
	|	Документ." + ДокументОбъект.Метаданные().Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + " КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТабличнойЧасти()

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Возваращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияОС(ОсновноеСредство, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеОС", 	Состояние);
	Запрос.УстановитьПараметр("ОС",             ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияОСОрганизаций.Регистратор КАК Документ,
		|	СостоянияОСОрганизаций.ДатаСостояния КАК Дата
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|
		|ГДЕ
		|	СостоянияОСОрганизаций.ОсновноеСредство = &ОС И
		|	СостоянияОСОрганизаций.Организация = &Организация И
		|	СостоянияОСОрганизаций.Состояние = &СостояниеОС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

// Функция возвращает таблицу значений с инвентарными номерами ОС.
//
// Параметры
//  ТаблицаОС   - Таблица значений со списком ОС, для которой нужно получить инвентарные номера.
//                Обязательные колонки: НомерСтроки, ОсновноеСредство
//  Организация - Организация, по которой требуется получить инвентарные номера.
//  Дата        - Дата, на которую требуется получить инвентарные номера.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица с инвентарными номерами. Колонки: НомерСтроки, ОсновноеСредство, ИнвентарныйНомер
//
Функция ПолучитьТаблицуИнвентарныхНомеровОС(Знач ТаблицаОС, Знач Организация, Знач Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
	|ПОМЕСТИТЬ ИнвентарныеНомера
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(ИнвентарныеНомера.ИнвентарныйНомер, """") КАК ИнвентарныйНомер
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнвентарныеНомера КАК ИнвентарныеНомера
	|		ПО ТаблицаОС.ОсновноеСредство = ИнвентарныеНомера.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = РезультатЗапроса.Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуИнвентарныхНомеровОС()

//  Функция возвращает инвентарный номерам ОС.
//
// Параметры
//  ОсновноеСредство - Объект основных средств, для которого требуется получить инвентарный номер.
//  Организация      - Организация, по которой требуется получить инвентарный номер.
//  Дата             - Дата, на которую требуется получить инвентарный номер.
//
// Возвращаемое значение:
//   Строка - Инвентарный номер переданного ОС
//
Функция ПолучитьИнвентарныйНомерОС(Знач ОсновноеСредство, Знач Организация, Знач Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер, """") КАК ИнвентарныйНомер
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ИнвентарныйНомер;
	КонецЕсли;
	
КонецФункции // ПолучитьИнвентарныйНомерОС()

//  Функция дозаполняет табличную часть основных средств документа основными средствами
// с наименованием совпадающим с заданным основным средством. В случае отсутствия основных
// средств с подходящим наименованием, выдает сообщение об ошибке.
//
// Параметры
//  ПараметрыФормы   - Структура с параметрами заполнения, ключи структуры:
//  	Форма             - форма заполняемого документа
//  	Объект            - Значение основного реквизита формы - документа для заполнения
//  	ИмяТабличнойЧасти - Имя табличной части основных средств документа, значение по умолчанию "ОС"
//  	ПолучатьИнвентарныйНомерИзКода - Флаг необходимости получения основного средства из кода 
//  		справочника (в противном случае, по данным регистра сведений). Значение по умолчанию Ложь.
//  
//  ОсновноеСредство - Основное средство по наименованию которого требуется дозаполнить табличную часть.
//
// Возвращаемое значение:
//   Булево - Истина - в табличную часть добавлены строки с подходящими ОС, Ложь - подходящих ОС не найдено
//
Функция ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(ПараметрыФормы, ОсновноеСредство) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Форма = ПараметрыФормы.Форма;
	Объект = ПараметрыФормы.Объект;
	Если ПараметрыФормы.Свойство("ИмяТабличнойЧасти") Тогда
		ИмяТабличнойЧасти = ПараметрыФормы.ИмяТабличнойЧасти;
	Иначе
		ИмяТабличнойЧасти = "ОС";
	КонецЕсли;
	Если ПараметрыФормы.Свойство("ПолучатьИнвентарныйНомерИзКода") Тогда
		ПолучатьИнвентарныйНомерИзКода = ПараметрыФормы.ПолучатьИнвентарныйНомерИзКода;
	Иначе
		ПолучатьИнвентарныйНомерИзКода = Ложь;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = Объект[ИмяТабличнойЧасти].Выгрузить(, "ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК Код
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И (НЕ ОсновныеСредства.Ссылка В (&СписокОС))
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();
	
	Если НЕ ПолучатьИнвентарныйНомерИзКода Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер
		|ПОМЕСТИТЬ ИнвентарныеНомера
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|			&Дата,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ТаблицаОС.ОсновноеСредство
		|					ИЗ
		|						ТаблицаОС КАК ТаблицаОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство";
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	" + ?(ПолучатьИнвентарныйНомерИзКода, "ТаблицаОС.Код", "ЕСТЬNULL(ИнвентарныеНомера.ИнвентарныйНомер, """")") + " КАК ИнвентарныйНомер
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС" + ?(ПолучатьИнвентарныйНомерИзКода, "", "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнвентарныеНомера КАК ИнвентарныеНомера
	|		ПО ТаблицаОС.ОсновноеСредство = ИнвентарныеНомера.ОсновноеСредство") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	ИнвентарныйНомер
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ШаблонСообщения = НСтр("ru='Другие элементы справочника с наименованием ""%1"" в справочнике ""Основные средства"" отсутствуют.';uk='Інші елементи довідника з найменуванням ""%1"" в довіднику ""Основні засоби"" відсутні.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОсновноеСредствоНаименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект");
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		НоваяСтрока.ОсновноеСредство = Выборка.ОсновноеСредство;
		НоваяСтрока.ИнвентарныйНомер = Выборка.ИнвентарныйНомер;
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
	Возврат Истина;
	
КонецФункции // ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию()

//  Процедура перезаполняет переданную коллекцию формы подобранными основными средствами.
// По основным средствам присутствовавшим в коллекции изначально, данные колонок 
// дополняются исходными.
//
// Параметр:
//  КоллекцияОС - ДанныеФормыКоллекция, отображение табличной части с основными средствами
//  	в реквизит управляемой формы. Обязатлеьно должна присутствовать колонка ОсновноеСредство.
//  
//  ВыбранноеЗначение - Структура, значение из обработчика ОбработкаВыбора полученное в результате
//  	подбора
//..
//  Вовзвращаемое значение:
//    Массив - Массив новых строк коллекции.
//
Функция ОбработатьПодборОсновныхСредств(Знач КоллекцияОС, Знач ВыбранноеЗначение) Экспорт
	
	ТаблицаОС = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресОСВХранилище);
	
	ИсходныеДанные = КоллекцияОС.Выгрузить();
	ИсходныеДанные.Индексы.Добавить("ОсновноеСредство");
	
	ДобавленныеСтроки = Новый Массив;
	
	КоллекцияОС.Очистить();
	Для каждого СтрокаТаблицыОС Из ТаблицаОС Цикл
		ЭлементКоллекции = КоллекцияОС.Добавить();
		
		СтрокаИсходныхДанных = ИсходныеДанные.Найти(СтрокаТаблицыОС.ОсновноеСредство, "ОсновноеСредство");
		Если СтрокаИсходныхДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаИсходныхДанных);
		Иначе
			ДобавленныеСтроки.Добавить(ЭлементКоллекции);
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаТаблицыОС);
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

// Возвращает из справочника событий ОС первую найденную запись с заданным видом события,
// иначе возвращает пустую ссылку на справочник
//
// Параметры
//  ВидСобытия (Перечисление ВидыСобытийОС): вид события
//
// Возвращаемое значение:
//   элемент справочника событий ОС
//
Функция ПолучитьСобытиеПоОСИзСправочника(ВидСобытия) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСобытияОС", ВидСобытия);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка,
	|	ВидСобытияОС
	|ИЗ
	|	Справочник.СобытияОС КАК СобытияОС
	|
	|ГДЕ
	|	ВидСобытияОС = &ВидСобытияОС";
	ТаблицаСобытий = Запрос.Выполнить().Выгрузить();

	Если ТаблицаСобытий.Количество()>0 Тогда
		Возврат ТаблицаСобытий[0].Ссылка;

	Иначе
		Возврат Справочники.СобытияОС.ПустаяСсылка();

	КонецЕсли;

КонецФункции // ПолучитьСобытиеОСИзСправочника()
