
#Область СлужебныеПроцедурыИФункции

Функция ВидыОперацийРасчетаЗарплаты() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыОперацийРасчетаЗарплаты.Ссылка
	               |ИЗ
	               |	Справочник.ВидыОперацийРасчетаЗарплаты КАК ВидыОперацийРасчетаЗарплаты
	               |ГДЕ
	               |	НЕ ВидыОперацийРасчетаЗарплаты.ПометкаУдаления
	               |	И НЕ ВидыОперацийРасчетаЗарплаты.ВАрхиве
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидыОперацийРасчетаЗарплаты.Наименование";
				   
	УстановитьПривилегированныйРежим(Истина);			   
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВидыОпераций = Новый Массив;
	Пока Выборка.Следующий() Цикл 
		ВидыОпераций.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ВидыОпераций;
	
КонецФункции

Функция ДанныеВидаОперации(ВидОперации) Экспорт 
	
	ДанныеВидаОперации = Новый Структура;
	ДанныеВидаОперации.Вставить("ИспользоватьНачисление", Истина);
	ДанныеВидаОперации.Вставить("ИспользоватьДоговоры", Истина);
	ДанныеВидаОперации.Вставить("ИспользоватьПособия", Истина);
	ДанныеВидаОперации.Вставить("ИспользоватьЛьготы", Истина);
	ДанныеВидаОперации.Вставить("ИспользоватьУдержания", Истина);
	ДанныеВидаОперации.Вставить("ИспользоватьНДФЛ", Истина);
	ДанныеВидаОперации.Вставить("ИспользоватьЗаймы", Истина);
	ДанныеВидаОперации.Вставить("ИспользоватьВзносы", Ложь);
	ДанныеВидаОперации.Вставить("ИспользоватьВзносыФОТ", Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыОперацийРасчетаЗарплаты.Начисление КАК ИспользоватьНачисление,
	               |	ВидыОперацийРасчетаЗарплаты.Договоры КАК ИспользоватьДоговоры,
	               |	ВидыОперацийРасчетаЗарплаты.Пособия КАК ИспользоватьПособия,
	               |	ВидыОперацийРасчетаЗарплаты.Льготы КАК ИспользоватьЛьготы,
	               |	ВидыОперацийРасчетаЗарплаты.Удержания КАК ИспользоватьУдержания,
	               |	ВидыОперацийРасчетаЗарплаты.НДФЛ КАК ИспользоватьНДФЛ,
	               |	ВидыОперацийРасчетаЗарплаты.Займы КАК ИспользоватьЗаймы,
				   |	ВидыОперацийРасчетаЗарплаты.ВзносыФОТ КАК ИспользоватьВзносыФОТ,
				   |	ВидыОперацийРасчетаЗарплаты.Взносы КАК ИспользоватьВзносы
	               |ИЗ
	               |	Справочник.ВидыОперацийРасчетаЗарплаты КАК ВидыОперацийРасчетаЗарплаты
	               |ГДЕ
	               |	ВидыОперацийРасчетаЗарплаты.Ссылка = &ВидОперации";
				   
	УстановитьПривилегированныйРежим(Истина);			   
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);			   
	
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(ДанныеВидаОперации, Выборка);
	КонецЕсли;
	
	Возврат ДанныеВидаОперации;
	
КонецФункции

Функция ВидОперацииДокумента(Документ) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОперацииРасчетаЗарплаты.ВидОперации
	               |ИЗ
	               |	РегистрСведений.ОперацииРасчетаЗарплаты КАК ОперацииРасчетаЗарплаты
	               |ГДЕ
	               |	ОперацииРасчетаЗарплаты.Документ = &Документ";
				   
	УстановитьПривилегированныйРежим(Истина);			   
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);			   
	
	ВидОперации = Неопределено;
	Если Выборка.Следующий() Тогда
		ВидОперации = Выборка.ВидОперации;
	КонецЕсли;
	
	Возврат ВидОперации;
	
КонецФункции

Процедура УстановитьВидОперацииДокумента(Форма, Документ, ПутьКДанным = "ВидОперации") Экспорт 
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКДанным, ВидОперацииДокумента(Документ));
	
КонецПроцедуры	

Процедура ЗаписатьВидОперацииДокумента(Документ, ВидОперации) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОперацииРасчетаЗарплаты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Документ = Документ;
	НоваяЗапись.ВидОперации = ВидОперации;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ДоработатьЗапросСпискаНачислений(Форма, ИмяРеквизитаСписок = "Список") Экспорт 
	
	Список = Форма[ИмяРеквизитаСписок];
	
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "&ПредставлениеТипаРасчетЗарплаты", 
		"ВЫБОР
		|	КОГДА ЕСТЬNULL(ОперацииРасчетаЗарплаты.ВидОперации, ЗНАЧЕНИЕ(Справочник.ВидыОперацийРасчетаЗарплаты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыОперацийРасчетаЗарплаты.ПустаяСсылка)
		|		ТОГДА &ПредставлениеТипаРасчетЗарплаты
		|	ИНАЧЕ ОперацииРасчетаЗарплаты.ВидОперации.Наименование
		|КОНЕЦ");
	
	Список.ТекстЗапроса = Список.ТекстЗапроса + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииРасчетаЗарплаты КАК ОперацииРасчетаЗарплаты
		|	ПО ДокументНачислениеЗарплаты.Ссылка = ОперацииРасчетаЗарплаты.Документ";
	
КонецПроцедуры

Процедура ДоработатьЗапросЖурналаНачислений(Форма, ИмяРеквизитаСписок = "Список") Экспорт 
	
	Список = Форма[ИмяРеквизитаСписок];
	
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЖурналДокументовНачислениеЗарплаты.Тип)", 
		"	КОГДА ЖурналДокументовНачислениеЗарплаты.Тип = ТИП(Документ.НачислениеЗарплаты)
		|			И ЕСТЬNULL(ОперацииРасчетаЗарплаты.ВидОперации, ЗНАЧЕНИЕ(Справочник.ВидыОперацийРасчетаЗарплаты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыОперацийРасчетаЗарплаты.ПустаяСсылка)
		|		ТОГДА ОперацииРасчетаЗарплаты.ВидОперации.Наименование
		|	ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЖурналДокументовНачислениеЗарплаты.Тип)");
	
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "ЖурналДокументов.НачислениеЗарплаты КАК ЖурналДокументовНачислениеЗарплаты", 
		"	ЖурналДокументов.НачислениеЗарплаты КАК ЖурналДокументовНачислениеЗарплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииРасчетаЗарплаты КАК ОперацииРасчетаЗарплаты
		|		ПО ЖурналДокументовНачислениеЗарплаты.Ссылка = ОперацииРасчетаЗарплаты.Документ");
	
КонецПроцедуры

Процедура ДополнитьФормуДокумента(Форма, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт 
	
	Если ДобавлятьРеквизитыФормы Тогда 
	
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		
		ДобавляемыеРеквизиты = Новый Массив;
		
		ВидОперации = Новый РеквизитФормы("ВидОперации", Новый ОписаниеТипов("СправочникСсылка.ВидыОперацийРасчетаЗарплаты"));
		ДобавляемыеРеквизиты.Добавить(ВидОперации);
		
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы, , ОтложенноеИзменение);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПервоначальногоЗаполненияИОбновленияИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.23.69";
	Обработчик.Процедура = "ОперацииРасчетаЗарплаты.НачальноеЗаполнениеВидовОперацийРасчетаЗарплаты";
	Обработчик.НачальноеЗаполнение = Истина;
	
КонецПроцедуры

Процедура НачальноеЗаполнениеВидовОперацийРасчетаЗарплаты() Экспорт 
	
	Справочники.ВидыОперацийРасчетаЗарплаты.НачальноеЗаполнение();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

