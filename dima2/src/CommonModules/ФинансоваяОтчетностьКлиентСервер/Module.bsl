

#Область ПрограммныйИнтерфейс

//++ НЕ УТ

// Находит ближайший вверх по иерархии родительский элемент заданного вида.
// Параметры:
//	Дерево - ДанныеФормыДерево, ДанныеФормыЭлементДерева - элемент дерева для которого необходимо определить родительский элемент
//														если заданно дерево то результат будет определяться среди подчиненных строк первого уровня
//	ВидКорневогоЭлемента - Перечисление.ВидыЭлементовФинансовогоОтчета - вид родителя
//
//	Возвращаемое значение:
//		РодительСтроки - ДанныеФормыЭлементДерева, СтрокаДереваЗначений
Функция КорневойЭлемент(Дерево, ВидКорневогоЭлемента = Неопределено) Экспорт
	
	Если ВидКорневогоЭлемента = Неопределено Тогда
		ВидКорневогоЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ПустаяСсылка");
	КонецЕсли;
	
	КорневойЭлемент = Неопределено;
	Если ТипЗнч(Дерево) = Тип("ДанныеФормыДерево") Тогда
		ПодчиненныеСтроки = ПодчиненныеСтроки(Дерево);
		Для Каждого СтрокаДерева Из ПодчиненныеСтроки Цикл
			Если СтрокаДерева.ВидЭлемента = ВидКорневогоЭлемента Тогда
				КорневойЭлемент = СтрокаДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		КорневойЭлемент = РодительСтроки(Дерево);
		Пока КорневойЭлемент <> Неопределено Цикл
			Если КорневойЭлемент.ВидЭлемента = ВидКорневогоЭлемента Тогда
				Прервать;
			КонецЕсли;
			КорневойЭлемент = РодительСтроки(КорневойЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат КорневойЭлемент;
	
КонецФункции

// Переносит строку и все ее подчиненные элементы в новую ветку дерева.
//
//	Параметры:
//		ТекущаяСтрока - ДанныеФормыЭлементДерева, СтрокаДереваЗначений - строка дерева элементов отчета
//		ТекущаяСтрока - ДанныеФормыЭлементДерева, СтрокаДереваЗначений - новая родительская ветка дерева элементов отчета
//		ЭтоСохраненные - Булево - флаг показывающий, что это строки дерева сохраненных элентов
//		КонтрольЗацикливания - Булево - флаг определяющий выполнение контроля зацикливания строк
//		ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы во временной хранилище 
//		                                               которой необходимо поместить данные элемента
//
Процедура УстановитьНовогоРодителя(ТекущаяСтрока, НовыйРодитель, ЭтоСохраненные = Ложь, 
							КонтрольЗацикливания = Истина, ИдентификаторФормы = Неопределено, Копирование = Ложь,
							ПараметрыИдентификаторов = Неопределено) Экспорт
	
	Если КонтрольЗацикливания Тогда
		Родитель = РодительСтроки(НовыйРодитель);
		Пока Родитель <> Неопределено Цикл
			Если ТипЗнч(Родитель) = Тип("ДанныеФормыЭлементДерева") И Родитель.ПолучитьИдентификатор() = ТекущаяСтрока.ПолучитьИдентификатор()
				ИЛИ ЗначениеЗаполнено(Родитель.ЭлементОтчета) И Родитель.ЭлементОтчета = ТекущаяСтрока.ЭлементОтчета
				ИЛИ ЗначениеЗаполнено(Родитель.АдресСтруктурыЭлемента) И Родитель.АдресСтруктурыЭлемента = ТекущаяСтрока.АдресСтруктурыЭлемента Тогда
				Возврат;
			КонецЕсли;
			Родитель = РодительСтроки(Родитель);
		КонецЦикла;
	КонецЕсли;
	
	СтрокиРодителя = ПодчиненныеСтроки(НовыйРодитель);
	Если ЭтоСохраненные Тогда
		НоваяСтрока = СтрокиРодителя.Добавить();
	Иначе
		Индекс = ИндексНовойСтроки(СтрокиРодителя);//если в конце группы есть итог по группе, то новая строка должна встать перед ним
		НоваяСтрока = СтрокиРодителя.Вставить(Индекс);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	Если ПараметрыИдентификаторов <> Неопределено Тогда
		СоответствиеИдентификаторов = ПараметрыИдентификаторов.СоответствиеИдентификаторов;
		Если ПараметрыИдентификаторов.Режим = "Запомнить" Тогда
			СоответствиеИдентификаторов.Вставить(ТекущаяСтрока.ПолучитьИдентификатор(), НоваяСтрока.ПолучитьИдентификатор());
		ИначеЕсли ПараметрыИдентификаторов.Режим = "Восстановить" Тогда
			НоваяСтрока.ИндексСтрокиЭлементовОтчета = СоответствиеИдентификаторов[НоваяСтрока.ИндексСтрокиЭлементовОтчета];
			Для Сч = 2 по ПараметрыИдентификаторов.КоличествоИдентификаторов Цикл
				Если НоваяСтрока["ИндексСтрокиЭлементовОтчета" + Сч] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока["ИндексСтрокиЭлементовОтчета" + Сч] = 
					СоответствиеИдентификаторов[НоваяСтрока["ИндексСтрокиЭлементовОтчета" + Сч]];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторФормы <> Неопределено Тогда
		Если Копирование Тогда
			
			Если ЗначениеЗаполнено(НоваяСтрока.АдресСтруктурыЭлемента) Тогда
				НоваяСтрока.АдресСтруктурыЭлемента = 
					ФинансоваяОтчетностьВызовСервера.СкопироватьЭлементПоАдресу(
						НоваяСтрока.АдресСтруктурыЭлемента, ИдентификаторФормы);
						
			ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрока.АдресСтруктурыЭлемента)
					И ЗначениеЗаполнено(НоваяСтрока.ЭлементОтчета) Тогда
			
				НоваяСтрока.АдресСтруктурыЭлемента = 
					ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(
						НоваяСтрока.ЭлементОтчета, ИдентификаторФормы, Истина);
			КонецЕсли;
			
			НоваяСтрока.ЭлементОтчета = Неопределено;
		
		ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрока.АдресСтруктурыЭлемента)
			И ЗначениеЗаполнено(НоваяСтрока.ЭлементОтчета) Тогда
			
			НоваяСтрока.АдресСтруктурыЭлемента = 
				ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(
					НоваяСтрока.ЭлементОтчета, ИдентификаторФормы);
		
		КонецЕсли;
	КонецЕсли;
	
	СтрокиТекущейСтроки = ПодчиненныеСтроки(ТекущаяСтрока);
	Сч = СтрокиТекущейСтроки.Количество();
	
	Пока Сч > 0 Цикл
		
		НомерСтроки = СтрокиТекущейСтроки.Количество() - Сч;
		Подстрока = СтрокиТекущейСтроки[НомерСтроки];
		УстановитьНовогоРодителя(Подстрока, НоваяСтрока, ЭтоСохраненные, Ложь, ИдентификаторФормы, Копирование, ПараметрыИдентификаторов);
		Сч = Сч - 1;
		
	КонецЦикла;
	
	Если Не Копирование Тогда
		ТекущийРодитель = РодительСтроки(ТекущаяСтрока);
		Если ТекущийРодитель <> Неопределено Тогда
			ТекущаяКоллекцияСтрок = ПодчиненныеСтроки(ТекущийРодитель);
			ТекущаяКоллекцияСтрок.Удалить(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает индекс новой строки с учетом наличия в коллекции элемента отчета "ИтогПоГруппе".
//
//	Параметры:
//		СтрокиДерева - ДанныеФормыКоллекцияЭлементовДерева - коллекция строк в которой необходимо определить индекс втавки новой строки
//
//	Возвращаемое значение:
//		Индекс для вставки новой строки, Число
//
Функция ИндексНовойСтроки(СтрокиДерева) Экспорт
	
	Индекс = -1;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ВидЭлемента = ВидЭлемента("ИтогПоГруппе")
			И НЕ СтрокаДерева.ЭтоСвязанный Тогда
			Индекс = СтрокиДерева.Индекс(СтрокаДерева);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Индекс = -1 ИЛИ Индекс = 0 И СтрокиДерева.Количество() > 1 Тогда
		Индекс = СтрокиДерева.Количество();
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Процедура добавляет строки в дерево
//
// Параметры:
//  СтрокиИсточника  - ДанныеФормыЭлементДерево - строки дерева источника
//  СтрокиПриемника  - ДанныеФормыЭлементДерево - строки дерева приемника
//
Процедура ДобавитьСтрокиВДерево(СтрокиИсточника, СтрокиПриемника) Экспорт
	
	ДобавляемыеСтрокиИсточника = ПодчиненныеСтроки(СтрокиИсточника);
	ДополняемыеСтрокиПриемника = ПодчиненныеСтроки(СтрокиПриемника);
	КонтрольПолей = Новый Структура("НестандартнаяКартинка,ЭтоСвязанный");
	Для Каждого СтрокаИсточника Из ДобавляемыеСтрокиИсточника Цикл
		
		НоваяСтрока = ДополняемыеСтрокиПриемника.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		ЗаполнитьЗначенияСвойств(КонтрольПолей, НоваяСтрока);
		
		Если КонтрольПолей.НестандартнаяКартинка <> Неопределено
			И КонтрольПолей.ЭтоСвязанный <> Неопределено Тогда
			НоваяСтрока.НестандартнаяКартинка = НоваяСтрока.НестандартнаяКартинка + Число(НоваяСтрока.ЭтоСвязанный);
		КонецЕсли;
		
		ДобавитьСтрокиВДерево(СтрокаИсточника, НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет строку списка или дерева элементов отчета
// дополнительными реквизитами
//
// Параметры:
//  Параметры - структура - поля структуры:
//		Источник - структура - источник заполнения 
//		СтрокаПриемник - ДанныеФормыСтрокаДерева - строка, которую заполняем
//		АдресЭлементаВХранилище - строка - адрес хранилища элемента
//		Поле - ДанныеФормыКоллекция - для поиска строки, если приемник - идентификатор строки
//
Процедура ЗаполнитьСтрокуДерева(Параметры) Экспорт
	
	Источник = Параметры.Источник;
	СтрокаПриемник = Параметры.СтрокаПриемник;
	АдресЭлементаВХранилище = Параметры.АдресЭлементаВХранилище;
	ДополнительныеРеквизитыСтроки = Параметры.ДополнительныеРеквизитыСтроки;
	Поле = Параметры.Поле;
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Форма возвращает актуальные реквизиты
	Если ТипЗнч(СтрокаПриемник) = Тип("Число") Тогда
		СтрокаПриемник = Поле.НайтиПоИдентификатору(СтрокаПриемник);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, Источник);
	
	Если Не ЗначениеЗаполнено(АдресЭлементаВХранилище) Тогда
		ДопРеквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
							Источник,
							ДополнительныеРеквизитыСтроки);
	Иначе
		//Но актуальные значения дополнительных реквизитов формируются на сервере
		//в ПередЗаписьюНаСервере, соответственно находятся в хранилище
		ДопРеквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
							АдресЭлементаВХранилище,
							ДополнительныеРеквизитыСтроки);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, ДопРеквизиты);
	Если ЗначениеЗаполнено(Источник.СвязанныйЭлемент) Тогда
		ДопРеквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
							Источник.СвязанныйЭлемент,
							Параметры.ДополнительныеРеквизитыСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ДопРеквизиты,,"КодСтрокиОтчета,Примечание");
		
	ИначеЕсли СтрокаПриемник.ВидЭлемента = ВидЭлемента("МонетарныйПоказатель") Тогда
		СтрокаПриемник.СчетПоказательИзмерение = СтрокаПриемник.СчетПланаСчетов;
		
	ИначеЕсли СтрокаПриемник.ВидЭлемента = ВидЭлемента("НемонетарныйПоказатель") Тогда
		СтрокаПриемник.СчетПоказательИзмерение = ДопРеквизиты.НемонетарныйПоказатель;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаЭлемента(ЭлементыОтчета, АдресСтруктурыЭлемента = Неопределено) Экспорт
	
	Если (ТипЗнч(ЭлементыОтчета) = Тип("ДеревоЗначений")
			ИЛИ ТипЗнч(ЭлементыОтчета) = Тип("ДанныеФормыДерево"))
		И АдресСтруктурыЭлемента = Неопределено Тогда
		
		ВызватьИсключение НСтр("ru='Неверные параметры функции ""Таблица элемента""';uk='Невірні параметри функції ""Таблиця елемента""'");
	КонецЕсли;
	
	Если ТипЗнч(ЭлементыОтчета) = Тип("ДеревоЗначений")
		ИЛИ ТипЗнч(ЭлементыОтчета) = Тип("ДанныеФормыДерево") Тогда
		СтрокаТекущегоЭлемента = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(ЭлементыОтчета, "АдресСтруктурыЭлемента", АдресСтруктурыЭлемента);
	Иначе
		СтрокаТекущегоЭлемента = ЭлементыОтчета;
	КонецЕсли;
	
	Если СтрокаТекущегоЭлемента.ВидЭлемента = ВидЭлемента("ТаблицаПоказателиВКолонках")
		ИЛИ СтрокаТекущегоЭлемента.ВидЭлемента = ВидЭлемента("ТаблицаПоказателиВСтроках")
		ИЛИ СтрокаТекущегоЭлемента.ВидЭлемента = ВидЭлемента("ТаблицаСложная") Тогда
		
		Возврат СтрокаТекущегоЭлемента;
		
	КонецЕсли;
	
	Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаТекущегоЭлемента, ВидЭлемента("ТаблицаПоказателиВКолонках"));
	
	Если Таблица = Неопределено Тогда
		Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаТекущегоЭлемента, ВидЭлемента("ТаблицаПоказателиВСтроках"));
		Если Таблица = Неопределено Тогда
			Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаТекущегоЭлемента, ВидЭлемента("ТаблицаСложная"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

//-- НЕ УТ

// Возвращает родителя переданой строки в зависимости от типа.
//
//	Параметры:
//		СтрокаДерева - ДанныеФормыЭлементДерева, СтрокаДереваЗначений - строка дерева элементов отчета
//
//	Возвращаемое значение:
//		РодительСтроки - ДанныеФормыЭлементДерева, СтрокаДереваЗначений
//
Функция РодительСтроки(СтрокаДерева) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева")
		ИЛИ ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыДерево") Тогда
		РодительСтроки = СтрокаДерева.ПолучитьРодителя();
	Иначе
		РодительСтроки = СтрокаДерева.Родитель;
	КонецЕсли;
	
	Возврат РодительСтроки;
	
КонецФункции

// Находит ближайший вниз по иерархии элемент по значению заданного реквизита.
// Параметры:
//	Дерево - ДанныеФормыДерево, ДанныеФормыЭлементДерева - элемент дерева или строка дерева в котором необходимо проивести поиск
//	ИмяРеквизита - Строка - имя реквизита дерева значение которого сравнивается с заданным для поиска
//	ЗначениеРеквизита - тип заданного реквизита дерева - значение реквизита дерева которое необходимо найти
//
//	Возвращаемое значение:
//		ПодчиненнаяСтрока - ДанныеФормыЭлементДерева, СтрокаДереваЗначений
Функция ПодчиненныйЭлемент(Дерево, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	#Если Сервер Тогда
		Если ТипЗнч(Дерево) = Тип("ДеревоЗначений")
			ИЛИ ТипЗнч(Дерево) = Тип("СтрокаДереваЗначений") Тогда
			
			СтрокиДерева = Дерево.Строки;
			Возврат СтрокиДерева.Найти(ЗначениеРеквизита, ИмяРеквизита, Истина);
			
		КонецЕсли;
	#КонецЕсли
	
	ПодчиненныйЭлемент = Неопределено;
	ПодчиненныеСтроки = ПодчиненныеСтроки(Дерево);
	Для Каждого СтрокаДерева Из ПодчиненныеСтроки Цикл
		Если СтрокаДерева[ИмяРеквизита] = ЗначениеРеквизита Тогда
			ПодчиненныйЭлемент = СтрокаДерева;
			Прервать;
		КонецЕсли;
		ПодчиненныйЭлемент = ПодчиненныйЭлемент(СтрокаДерева, ИмяРеквизита, ЗначениеРеквизита);
		Если ПодчиненныйЭлемент <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодчиненныйЭлемент;
	
КонецФункции

// Возвращает в зависимости от типа, коллекцию подчиненых элементов первого уровня переданой строки дерева элементов отчета.
//
//	Параметры:
//		СтрокаДерева - ДанныеФормыЭлементДерева, СтрокаДереваЗначений - строка дерева элементов отчета
//
//	Возвращаемое значение:
//		ПодчиненныеСтроки - ДанныеФормыКоллекцияЭлементовДерева, КоллекцияСтрокДереваЗначений
//
Функция ПодчиненныеСтроки(СтрокаДерева) Экспорт
	
	ЭтоКоллекцияСтрок = ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыКоллекцияЭлементовДерева");
	#Если Сервер Тогда
		ЭтоКоллекцияСтрок = ЭтоКоллекцияСтрок ИЛИ ТипЗнч(СтрокаДерева) = Тип("КоллекцияСтрокДереваЗначений");
	#КонецЕсли
	
	Если ЭтоКоллекцияСтрок Тогда
		ПодчиненныеСтроки = СтрокаДерева;
	Иначе
		Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева")
			ИЛИ ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыДерево") Тогда
			ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		Иначе
			ПодчиненныеСтроки = СтрокаДерева.Строки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПодчиненныеСтроки;
	
КонецФункции

#КонецОбласти

//++ НЕ УТ

#Область СлужебныеПроцедурыИФункции

// Функция возвращает структуру реквизитов для помещения во временное хранилище
//
// Возвращаемое значение:
//   Структура   - структура реквизитов
//
Функция СтруктураЭлементаОтчета() Экспорт
	
	Результат = Новый Структура;
	//Стандартные реквизиты
	Результат.Вставить("Ссылка");
	Результат.Вставить("Владелец");
	Результат.Вставить("Наименование");
	Результат.Вставить("Код");
	
	//Реквизиты
	Результат.Вставить("ВидЭлемента");
	Результат.Вставить("НаименованиеДляПечати");
	Результат.Вставить("ОбратныйЗнак");
	Результат.Вставить("Комментарий");
	Результат.Вставить("ДополнительныйОтбор");
	Результат.Вставить("ЕстьНастройки");
	Результат.Вставить("ЗначениеАналитики");
	Результат.Вставить("СвязанныйЭлемент");
	
	//Табличные части
	Результат.Вставить("РеквизитыВидаЭлемента");
	Результат.Вставить("ОперандыФормулы");
	Результат.Вставить("ЭлементыТаблицы");
	Результат.Вставить("ДополнительныеПоля");
	
	Результат.Вставить("ЭлементыОформления");
	Результат.Вставить("ОформляемыеСтроки");
	Результат.Вставить("ОформляемыеКолонки");
	Результат.Вставить("РасшифровкаПолейОтбораЭО");
	Результат.Вставить("ИсточникиЗначений");
	
	Возврат Результат;
	
КонецФункции

Функция ВидЭлемента(ИмяВидаЭлемента)
	
	#Если НаСервере Тогда
		
		Возврат Перечисления.ВидыЭлементовФинансовогоОтчета[ИмяВидаЭлемента];
		
	#Иначе
		
		Возврат ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета."+ИмяВидаЭлемента);
		
	#КонецЕсли
	
КонецФункции

#КонецОбласти

//-- НЕ УТ