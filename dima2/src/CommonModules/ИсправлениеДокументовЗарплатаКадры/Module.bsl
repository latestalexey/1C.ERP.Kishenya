
#Область СлужебныйПрограммныйИнтерфейс

// Создает элементы формы для группы Исправления.
//		Исправить
//		Сторнировать
//		ИсправлениеКартинка
//		ИсправлениеИнфоНадпись
//		ПерейтиКИсправлению
//		ПерейтиКСторно
//		ПерейтиКИсправленному
//
Процедура ГруппаИсправлениеДополнитьФорму(Форма, ИспользоватьИсправлениеДокумента = Истина, ИспользоватьСторнированиеДокумента = Истина,  ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДобавлятьРеквизитыФормы Тогда
	
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИсправлениеИнфоНадпись", Новый ОписаниеТипов("Строка")));
		Если ИспользоватьИсправлениеДокумента Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументИсправлен", Новый ОписаниеТипов("Булево")));
			Типы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(Форма.Параметры.Ключ));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументИсправление", Новый ОписаниеТипов(Типы)));
		КонецЕсли;
		Если ИспользоватьСторнированиеДокумента Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументСторнирован", Новый ОписаниеТипов("Булево")));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументСторно", Новый ОписаниеТипов("ДокументСсылка.СторнированиеНачислений")));
		КонецЕсли;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИсправлениеДоступно", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПроведенаВыплатаЗарплаты", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПроизведеноОтражение", Новый ОписаниеТипов("Булево")));
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
	
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
		
		Элементы = Форма.Элементы;
		ГруппаИсправление = Элементы.ГруппаИсправление;
		
		// Группа команд
		Если ИспользоватьИсправлениеДокумента Или ИспользоватьСторнированиеДокумента Тогда
			
			// Команда "Исправить"
			Если ИспользоватьИсправлениеДокумента Тогда
				ИмяКоманды = "Исправить";
				Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
					КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
					КомандаФормы.Заголовок = "Исправить";
					КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
				КонецЕсли;
				Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
					Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
					Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
					Элемент.ИмяКоманды = ИмяКоманды;
				КонецЕсли;
			КонецЕсли;
			
			// Команда "Сторнировать"
			Если ИспользоватьСторнированиеДокумента Тогда
				ИмяКоманды = "Сторнировать";
				Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
					КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
					КомандаФормы.Заголовок = "Сторнировать";
					КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
				КонецЕсли;
				Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
					Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
					Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
					Элемент.ИмяКоманды = ИмяКоманды;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьСторнированиеДокумента Или ИспользоватьИсправлениеДокумента Тогда
			
			// Декорация
			Если Элементы.Найти("ИсправлениеКартинка") = Неопределено Тогда
				Элемент = Элементы.Добавить("ИсправлениеКартинка", Тип("ДекорацияФормы"), ГруппаИсправление);
				Элемент.Вид = ВидДекорацииФормы.Картинка;
				Элемент.Картинка = БиблиотекаКартинок.Предупреждение;
				Элемент.Ширина = 2;
				Элемент.Высота = 1;
			КонецЕсли;
			
			// Надпись
			Если Элементы.Найти("ИсправлениеИнфоНадпись") = Неопределено Тогда
				Элемент = Элементы.Добавить("ИсправлениеИнфоНадпись", Тип("ПолеФормы"), ГруппаИсправление);
				Элемент.ПутьКДанным = "ИсправлениеИнфоНадпись";
				Элемент.Вид = ВидПоляФормы.ПолеНадписи;
				Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
				Элемент.Высота = 3;
				Элемент.РастягиватьПоВертикали = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Команда "Открыть документ- исправление".
		Если ИспользоватьИсправлениеДокумента Тогда
			ИмяКоманды = "ПерейтиКИсправлению";
			Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Заголовок = НСтр("ru='Открыть документ- исправление';uk='Відкрити документ - виправлення'");
				КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
			КонецЕсли;
			Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
				Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
				Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
				Элемент.ИмяКоманды = ИмяКоманды;
				Элемент.Ширина = 13;
				Элемент.Высота = 3;
			КонецЕсли;
		КонецЕсли;
		
		// Команда "Открыть документ-сторно".
		Если ИспользоватьСторнированиеДокумента Тогда
			ИмяКоманды = "ПерейтиКСторно";
			Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Заголовок = НСтр("ru='Открыть документ-сторно';uk='Відкрити документ-сторно'");
				КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
			КонецЕсли;
			Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
				Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
				Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
				Элемент.ИмяКоманды = ИмяКоманды;
				Элемент.Ширина = 11;
				Элемент.Высота = 3;
			КонецЕсли
		КонецЕсли;
		
		// Команда "Открыть исправленный документ".
		Если ИспользоватьИсправлениеДокумента Или ИспользоватьСторнированиеДокумента Тогда
			ИмяКоманды = "ПерейтиКИсправленному";
			Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Заголовок = НСтр("ru='Открыть исправленный документ';uk='Відкрити виправлений документ'");
				КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
			КонецЕсли;
			Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
				Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаИсправление);
				Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
				Элемент.ИмяКоманды = ИмяКоманды;
				Элемент.Ширина = 16;
				Элемент.Высота = 3;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значения реквизитам формы с включенным механизмом исправлений.
// Параметры:
// 		Форма, 
//		РежимИсправления - допустимые значения 
//				"РасчетЗарплаты" - для расчетных документов
//				"ПериодическиеСведения" - для документов, которые вводят периодические сведения.
//		ИмяОсновногоРеквизита - по умолчанию "Объект".
//		ПолеПериодРегистрации - по умолчанию "ПериодРегистрации".
//
Процедура УстановитьПоляИсправления(Форма, РежимИсправления = "РасчетЗарплаты", ИмяОсновногоРеквизита = "Объект", ПолеПериодРегистрации = "ПериодРегистрации") Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимИсправления = "РасчетЗарплаты" И Форма.Параметры.Ключ.Пустая() Тогда
		ПериодРегистрацииИсправленногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма[ИмяОсновногоРеквизита].ИсправленныйДокумент, ПолеПериодРегистрации);
		Если ПериодРегистрацииИсправленногоДокумента <> Неопределено
			И ПериодРегистрацииИсправленногоДокумента >= Форма[ИмяОсновногоРеквизита][ПолеПериодРегистрации] Тогда
			Форма[ИмяОсновногоРеквизита][ПолеПериодРегистрации] = ДобавитьМесяц(ПериодРегистрацииИсправленногоДокумента, 1);
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьИсправлениеДокумента = Форма.Элементы.Найти("Исправить") <> Неопределено;
	ИспользоватьСторнированиеДокумента = Форма.Элементы.Найти("Сторнировать") <> Неопределено;
	
	ДокументУтвержден = УтверждениеДокумента(Форма, Форма.Элементы.Найти("Расчетчик"));
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	Если ПривилегированныйРежим() Тогда 
		ЕстьПравоДобавления = ПравоДоступа("Добавление", Форма.Объект.Ссылка.Метаданные(), ПользователиИнформационнойБазы.ТекущийПользователь());
	Иначе
		ЕстьПравоДобавления = ПравоДоступа("Добавление", Форма.Объект.Ссылка.Метаданные());
	КонецЕсли;
	
	ДоступноИсправлениеДокумента = ДокументУтвержден И ЕстьПравоДобавления
		И ((ИспользоватьНачислениеЗарплаты И РежимИсправления = "РасчетЗарплаты") Или (РежимИсправления <> "РасчетЗарплаты"));
	
	ДоступноСторнирование = РольДоступна("ДобавлениеИзменениеСторнирования") Или РольДоступна("ПолныеПрава");
	ДоступноЧтениеСторнирование = ДоступноСторнирование Или РольДоступна("ЧтениеСторнирования");
	ДоступноСторнированиеДокумента = ((ИспользоватьНачислениеЗарплаты И РежимИсправления = "РасчетЗарплаты") Или (РежимИсправления <> "РасчетЗарплаты"))
		И ДокументУтвержден
		И (ДоступноСторнирование Или ДоступноЧтениеСторнирование);
	
	Если ИспользоватьИсправлениеДокумента Или ИспользоватьСторнированиеДокумента Тогда
		ИсправленныйДокумент = Форма[ИмяОсновногоРеквизита].ИсправленныйДокумент;
	Иначе
		ИсправленныйДокумент = Неопределено;
	КонецЕсли;
	
	Форма.Элементы.ГруппаИсправление.Видимость = ((ДоступноИсправлениеДокумента И ИспользоватьИсправлениеДокумента) Или (ДоступноСторнированиеДокумента И ИспользоватьСторнированиеДокумента)) 
			И ((Форма[ИмяОсновногоРеквизита].Проведен И Форма.ИсправлениеДоступно) Или ЗначениеЗаполнено(ИсправленныйДокумент));
	
	Если Не Форма.Элементы.ГруппаИсправление.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ВидимостьКомандыИсправить = Ложь;
	Если ИспользоватьИсправлениеДокумента Тогда
		ВидимостьКомандыИсправить = Не (?(ИспользоватьСторнированиеДокумента, Форма.ДокументСторнирован, Ложь)
												Или ?(ИспользоватьИсправлениеДокумента, Форма.ДокументИсправлен, Ложь))
												И Форма.ИсправлениеДоступно
												И ДоступноИсправлениеДокумента;
		Форма.Элементы.Исправить.Видимость = ВидимостьКомандыИсправить;
		Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
			Форма.Элементы.Исправить.Заголовок = НСтр("ru='Исправить повторно';uk='Виправити повторно'");
		Иначе
			Форма.Элементы.Исправить.Заголовок = НСтр("ru='Исправить';uk='Виправити'");
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьКомандыСторнировать = Ложь;
	Если ИспользоватьСторнированиеДокумента Тогда
		ВидимостьКомандыСторнировать = Не (?(ИспользоватьСторнированиеДокумента, Форма.ДокументСторнирован, Ложь)
												Или ?(ИспользоватьИсправлениеДокумента, Форма.ДокументИсправлен, Ложь))
												И Форма.ИсправлениеДоступно
												И ДоступноСторнирование;
		Форма.Элементы.Сторнировать.Видимость = ВидимостьКомандыСторнировать;
	КонецЕсли;
	
	Если ИспользоватьИсправлениеДокумента И Форма.ДокументИсправлен Тогда
		Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
			Форма.ИсправлениеИнфоНадпись = НСтр("ru='Документ является исправлением документа предыдущего периода. В свою очередь документ повторно исправлен и его редактирование невозможно';uk='Документ є виправленням документа попереднього періоду. У свою чергу документ повторно виправлено і його редагування неможливе'");
		Иначе
			Форма.ИсправлениеИнфоНадпись = НСтр("ru='Документ исправлен и его редактирование невозможно';uk='Документ виправлено та його редагування неможливе'");
		КонецЕсли;
		Форма.Элементы.ИсправлениеИнфоНадпись.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	ИначеЕсли ИспользоватьСторнированиеДокумента И Форма.ДокументСторнирован Тогда
		Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
			Форма.ИсправлениеИнфоНадпись = НСтр("ru='Документ является исправлением документа предыдущего периода. В свою очередь документ сторнирован и его редактирование невозможно';uk='Документ є виправленням документа попереднього періоду. У свою чергу документ сторновано і його редагування неможливе'");
		Иначе
			Форма.ИсправлениеИнфоНадпись = НСтр("ru='Документ сторнирован и его редактирование невозможно';uk='Документ сторновано і його редагування неможливе'");
		КонецЕсли;
		Форма.Элементы.ИсправлениеИнфоНадпись.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	ИначеЕсли ИспользоватьИсправлениеДокумента И ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		
		Форма.ИсправлениеИнфоНадпись = НСтр("ru='Документ является исправлением документа предыдущего периода';uk='Документ є виправленням документа попереднього періоду'");
		Форма.Элементы.ИсправлениеИнфоНадпись.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		
	ИначеЕсли РежимИсправления = "РасчетЗарплаты" И (ИспользоватьИсправлениеДокумента Или ИспользоватьСторнированиеДокумента) Тогда
		
		ПредставлениеПериода = Формат(Форма[ИмяОсновногоРеквизита][ПолеПериодРегистрации], "ДФ='ММММ гггг ""г""'");
		
		Если Форма.ПроведенаВыплатаЗарплаты И Форма.ПроизведеноОтражение Тогда
			
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='За %1 уже проведены выплата и отражение зарплаты в бухгалтерском учете.';uk='За %1 вже проведені виплата та відображення зарплати в бухгалтерському обліку.'"), 
				ПредставлениеПериода);
				
		ИначеЕсли Форма.ПроведенаВыплатаЗарплаты Тогда
				
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Выплата зарплаты за %1 уже проведена.';uk='Виплата зарплати за %1 вже проведена.'"), 
				ПредставлениеПериода);
				
		Иначе
				
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Произведено отражение зарплаты в бухгалтерском учете за %1.';uk='Вироблено відображення зарплати в бухгалтерському обліку за %1.'"), 
				ПредставлениеПериода);
				
		КонецЕсли;
		
		Если ВидимостьКомандыИсправить И ВидимостьКомандыСторнировать Тогда
			ТекстНадписи = ТекстНадписи + " "
				+ НСтр("ru='Редактирование этого документа не рекомендуется. Воспользуйтесь командой Исправить для исправления этого документа или Сторнировать для его отмены';uk='Редагування цього документа не рекомендується. Скористайтеся командою Виправити для виправлення цього документа або Сторнувати для його скасування'"); 
		ИначеЕсли ВидимостьКомандыИсправить Тогда
			ТекстНадписи = ТекстНадписи + " "
				+ НСтр("ru='Редактирование этого документа не рекомендуется. Воспользуйтесь командой Исправить для исправления этого документа';uk='Редагування цього документа не рекомендується. Скористайтеся командою Виправити для виправлення цього документа'");
		ИначеЕсли ВидимостьКомандыСторнировать Тогда
			ТекстНадписи = ТекстНадписи + " "
				+ НСтр("ru='Редактирование этого документа не рекомендуется. Воспользуйтесь командой Сторнировать для отмены этого документа';uk='Редагування цього документа не рекомендується. Скористайтеся командою Сторнувати для скасування цього документу'");
		КонецЕсли;
			
		Форма.ИсправлениеИнфоНадпись = ТекстНадписи;
		Форма.Элементы.ИсправлениеИнфоНадпись.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		
	ИначеЕсли РежимИсправления = "ПериодическиеСведения" И (ИспользоватьИсправлениеДокумента Или ИспользоватьСторнированиеДокумента) Тогда
		
		ТекстНадписи = НСтр("ru='Если необходимо внести исправление, но при этом сохранить данный экземпляр документа, воспользуйтесь командой Исправить';uk='Якщо необхідно внести виправлення, але при цьому зберегти даний екземпляр документа, скористайтеся командою Виправити'");
		Форма.ИсправлениеИнфоНадпись = ТекстНадписи;
		Форма.Элементы.ИсправлениеИнфоНадпись.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		
	КонецЕсли;
	
	Если ИспользоватьИсправлениеДокумента Тогда
		Форма.Элементы.ПерейтиКИсправлению.Видимость = Форма.ДокументИсправлен;
	КонецЕсли;
	
	Если ИспользоватьСторнированиеДокумента  Тогда
		Форма.Элементы.ПерейтиКСторно.Видимость = Форма.ДокументСторнирован И ДоступноЧтениеСторнирование;
	КонецЕсли;
	
	Если ИспользоватьИсправлениеДокумента Или ИспользоватьСторнированиеДокумента Тогда
		Форма.Элементы.ПерейтиКИсправленному.Видимость = ЗначениеЗаполнено(ИсправленныйДокумент) И ?(ИспользоватьСторнированиеДокумента, ДоступноЧтениеСторнирование, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при чтении данных тех документов, к которым подключен механизм исправления.
// Заполняет реквизиты формы механизма исправления, которые создаются в ГруппаИсправлениеДополнитьФорму.
// Параметры:
// 		Форма, 
//		РежимИсправления - допустимые значения 
//				"РасчетЗарплаты" - для расчетных документов
//				"ПериодическиеСведения" - для документов, которые вводят периодические сведения.
//		ИмяОсновногоРеквизита - по умолчанию "Объект".
//		ПолеОрганизация - по умолчанию "Организация".
//		ПолеПериодРегистрации - по умолчанию "ПериодРегистрации".
//
Процедура ПрочитатьРеквизитыИсправления(Форма, РежимИсправления = "РасчетЗарплаты", ИмяОсновногоРеквизита = "Объект", ПолеОрганизация = "Организация", ПолеПериодРегистрации = "ПериодРегистрации", ПроверятьНаличиеНачислений = Истина) Экспорт
		
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;

	ДокументИсправленЕсть = Ложь;
	ДокументСторнированЕсть = Ложь;
	
	Для Каждого Реквизит Из Форма.ПолучитьРеквизиты() Цикл
		Если Реквизит.Имя = "ДокументИсправлен" Тогда
			ДокументИсправленЕсть = Истина;
		ИначеЕсли Реквизит.Имя = "ДокументСторнирован" Тогда
			ДокументСторнированЕсть = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументИсправленЕсть Тогда
		
		ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Форма[ИмяОсновногоРеквизита].Ссылка);
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	#Таблица КАК Документ
		|ГДЕ
		|	Документ.ИсправленныйДокумент = &Ссылка
		|	И НЕ &ПустаяСсылка
		|	И Документ.Проведен");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ИмяТаблицы);
		Запрос.УстановитьПараметр("Ссылка", Форма[ИмяОсновногоРеквизита].Ссылка);
		Запрос.УстановитьПараметр("ПустаяСсылка", Форма[ИмяОсновногоРеквизита].Ссылка.Пустая());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() <> 0 Тогда
			Форма.ДокументИсправлен = Истина;
			Выборка.Следующий();
			Форма.ДокументИсправление = Выборка.Ссылка;
		Иначе
			Форма.ДокументИсправлен = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокументСторнированЕсть Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СторнированиеНачислений КАК Документ
		|ГДЕ
		|	Документ.СторнируемыйДокумент = &Ссылка
		|	И НЕ &ПустаяСсылка
		|	И Документ.Проведен");
		Запрос.УстановитьПараметр("Ссылка", Форма[ИмяОсновногоРеквизита].Ссылка);
		Запрос.УстановитьПараметр("ПустаяСсылка", Форма[ИмяОсновногоРеквизита].Ссылка.Пустая());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() <> 0 Тогда
			Форма.ДокументСторнирован = Истина;
			Выборка.Следующий();
			Форма.ДокументСторно= Выборка.Ссылка;
		Иначе
			Форма.ДокументСторнирован = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ТолькоПросмотр = Форма.ТолькоПросмотр Или (ДокументИсправленЕсть И Форма.ДокументИсправлен)
			Или (ДокументСторнированЕсть И Форма.ДокументСторнирован);
		
	Если РежимИсправления = "РасчетЗарплаты" Тогда
				
		Документ = Форма[ИмяОсновногоРеквизита].Ссылка;
		Организация = Форма[ИмяОсновногоРеквизита][ПолеОрганизация];
		ПериодРегистрации = Форма[ИмяОсновногоРеквизита][ПолеПериодРегистрации];
		
		РезультатПроверки = ДоступноИсправлениеРасчетногоДокумента(Документ, Организация, ПериодРегистрации, ПроверятьНаличиеНачислений);
		
		Форма.ИсправлениеДоступно = РезультатПроверки.ИсправлениеДоступно;
		Форма.ПроведенаВыплатаЗарплаты = РезультатПроверки.ПроведенаВыплатаЗарплаты;
		Форма.ПроизведеноОтражение = РезультатПроверки.ПроизведеноОтражение;
		
	Иначе
		Форма.ИсправлениеДоступно = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступноИсправлениеРасчетногоДокумента(Документ, Организация, ПериодРегистрации, ПроверятьНаличиеНачислений) Экспорт 
	
	// Проверяется наличие выплаты в периоде.
	БылаВыплатаВПериоде = ВыплатаПроизводилась(Организация, ПериодРегистрации);
	
	// Проверим наличие документа отражение зарплаты в бухгалтерском учете.
	БылоОтражениеЗарплатыВБухучете = ОтражениеВУчетеПроизводилось(Организация, ПериодРегистрации);
	
	БылаВыплатаВПериодеИлиОтражениеЗарплатыВБухучете = (БылаВыплатаВПериоде ИЛИ БылоОтражениеЗарплатыВБухучете);
	
	// Если документ содержит табличную часть начислений, проверяется наличие начислений по документу.
	ИмяТаблицыНачислений = "Начисления";
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	МетаданныеТабличнойЧасти = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТаблицыНачислений);
	
	Если МетаданныеТабличнойЧасти = Неопределено 
		Или Не ПроверятьНаличиеНачислений Тогда
		ДокументРегистрировалНачисления = Истина;
	Иначе		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Поле1
			|ИЗ
			|	#ТаблицаНачислений КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &Ссылка");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
		
		Запрос.УстановитьПараметр("Ссылка", Документ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ДокументРегистрировалНачисления = (Выборка.Количество() <> 0);
	КонецЕсли;
	
	РезультатПроверки = Новый Структура("ИсправлениеДоступно,ПроведенаВыплатаЗарплаты,ПроизведеноОтражение", Ложь, Ложь, Ложь);
	
	Если БылаВыплатаВПериодеИлиОтражениеЗарплатыВБухучете И ДокументРегистрировалНачисления Тогда
		
		РезультатПроверки.ИсправлениеДоступно = Истина;
		РезультатПроверки.ПроведенаВыплатаЗарплаты = БылаВыплатаВПериоде;
		РезультатПроверки.ПроизведеноОтражение = БылоОтражениеЗарплатыВБухучете;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Заполняет в переданную коллекцию движений такие движения, которые "сторнируют" движения переданного регистратора.
// Параметры: 
//		НаборЗаписей - целевой набор записей в который нужно добавить "сторнирующие" начисления.
//		Регистратор - регистратор, записи которого необходимо "сторнировать".
Процедура СторнироватьДвиженияРегистраОстатков(НаборЗаписей, Регистратор) Экспорт
	НаборЗаписейИсходный = РегистрыНакопления[Метаданные.НайтиПоТипу(ТипЗнч(НаборЗаписей)).Имя].СоздатьНаборЗаписей();
	НаборЗаписейИсходный.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписейИсходный.Прочитать();
	Для Каждого Строка Из НаборЗаписейИсходный Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ВидДвижения = ?(Строка.ВидДвижения = ВидДвиженияНакопления.Приход, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку правильности заполнений реквизитов механизма исправления.
// Вызывается из ОбработкаПроверкиЗаполнения документа.
// Параметры:
//		Объект - документ
//		ПроверяемыеРеквизиты - проверяемые реквизиты документа.
//		Отказ - булево
//		РежимИсправления - допустимые значения 
//				"РасчетЗарплаты" - для расчетных документов
//				"ПериодическиеСведения" - для документов, которые вводят периодические сведения.
//		ИмяОсновногоРеквизита - по умолчанию "Объект".
//		ПолеОрганизация - по умолчанию "Организация".
//		ПолеПериодРегистрации - по умолчанию "ПериодРегистрации".
//		
Процедура ПроверитьЗаполнение(Объект, ПроверяемыеРеквизиты, Отказ, РежимИсправления = "РасчетЗарплаты", ПолеПериодРегистрации = "ПериодРегистрации") Экспорт
	
	Если РежимИсправления = "РасчетЗарплаты" Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ПериодРегистрацииИсправленногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИсправленныйДокумент, ПолеПериодРегистрации);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ПериодРегистрацииИсправленногоДокумента <> Неопределено
			И ПериодРегистрацииИсправленногоДокумента >= Объект[ПолеПериодРегистрации] Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неверно указан период: Период должен быть больше, чем в исправляемом документе (%1 г.)';uk='Невірно вказаний період: Період повинен бути більше, ніж у змінюваному документі (%1 р.)'"),
				Формат(ПериодРегистрацииИсправленногоДокумента, "ДФ='ММММ гггг'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеПериодРегистрации,,Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ИсправленныйДокумент", Объект.ИсправленныйДокумент);
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДокумента.Ссылка
			|ИЗ
			|	#ТаблицаДокумента КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Проведен
			|	И ТаблицаДокумента.ИсправленныйДокумент= &ИсправленныйДокумент
			|	И ТаблицаДокумента.Ссылка <> &Ссылка";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаДокумента", Объект.Метаданные().ПолноеИмя());
			
			ШаблонСообщения = НСтр("ru='Документ %1 уже исправлен документом %2';uk='Документ %1 вже виправлений документом %2'");
			
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Пока Выборка.Следующий() Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Объект.ИсправленныйДокумент, Выборка.Ссылка);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ИсправленныйДокумент",,Отказ);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет копирование документа.
//
// Параметры:
//		Приемник - Объект - Документ, в который копируются данные.
//		Источник - Ссылка - Документ, из которого копируются данные.
//		ИсключаемыеСвойства - Строка, список имен свойств, разделенный запятыми, которые необходимо исключить из
//		                      заполнения.
//		ИсключаемыеТабличныеЧасти - Строка, список имен табличных частей, разделенный запятыми, которые необходимо
//		                            исключить из заполнения.
//
Процедура СкопироватьДокумент(Приемник, Источник, ИсключаемыеСвойства = "", ИсключаемыеТабличныеЧасти = "") Экспорт
	
	ДанныеДокумента = Источник.Скопировать();
	МетаданныеДокумента = Приемник.Метаданные();
	
	ЗаполнитьЗначенияСвойств(Приемник, ДанныеДокумента, , ИсключаемыеСвойства);
	
	Если ИсключаемыеТабличныеЧасти = "" Тогда
		ИменаИсключаемыхТабличныхЧастей = Новый Массив;
	Иначе
		ИменаИсключаемыхТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключаемыеТабличныеЧасти, , , Истина);
	КонецЕсли;
	
	Для каждого ТабличнаяЧастьДокумента Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если ИменаИсключаемыхТабличныхЧастей.Найти(ТабличнаяЧастьДокумента.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для каждого СтрокаДокумента Из Источник[ТабличнаяЧастьДокумента.Имя] Цикл
			НоваяСтрока = Приемник[ТабличнаяЧастьДокумента.Имя].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура создает таблицу со всеми документами входящими в цепочку исправления. 
// Т.е. допустим, что в параметре МассивСсылок передана ссылка на Документ_3, который является документом исправлением для Документ_2,
// а Документ_2 является исправлением для Документ_1. Результирующая таблица(две колонки: Ссылка и ИсправленныйДокумент) будет содержать следующие строки:
//	 Документ_3 - Документ_2
//	 Документ_3 - Документ_1
//
// Параметры:
//  МенеджерВременныхТаблиц	 - 	 МенеджерВременныхТаблиц в который будет помещена временная таблица ИмяВТ 
//  МассивСсылок			 - 	 массив ссылок на документы, по которым надо создать временную таблицу 
//  ИмяДокумента			 - 	 имя таблицы документа, например "Отпуск", "Увольнение" 
//  ИмяВТ					 - 	 имя результирующей таблицы. Если не задано, то используется строка: "ВТИсправленныеДокументы" + ИмяДокумента 
//
Процедура СоздатьВТИсправленныеДокументы(МенеджерВременныхТаблиц, МассивСсылок, ИмяДокумента, ИмяВТ = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);

	НомерШага = 0;
	
	РезультатВыполненияШага = ВыполнитьПервыйШагШагПоискаИсправленныхДокументов(Запрос, ИмяДокумента);
	
	ЕстьИсправленные = Не РезультатВыполненияШага.Пустой();

	Пока ЕстьИсправленные Цикл  
		
		НомерШага = НомерШага + 1;
		
		РезультатВыполненияШага = ВыполнитьШагПоискаИсправленныхДокументов(НомерШага, Запрос, ИмяДокумента);
		
		ЕстьИсправленные = Не РезультатВыполненияШага.Пустой();
		
	КонецЦикла;

	ОбъединитьТаблицыШаговПоискаИсправленныхДокументов(НомерШага, Запрос, ИмяДокумента, ИмяВТ);
	
	УничтожитьВременныеТаблицыШаговПоиска(НомерШага, Запрос);
	
КонецПроцедуры

Функция ВыполнитьПервыйШагШагПоискаИсправленныхДокументов(Запрос, ИмяДокумента)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.ИсправленныйДокумент
	|ПОМЕСТИТЬ ВТШага0
	|ИЗ
	|	Документ.#ИмяДокумента# КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТШага0.Ссылка
	|ИЗ
	|	ВТШага0 КАК ВТШага0
	|ГДЕ
	|	ВТШага0.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.#ИмяДокумента#.ПустаяСсылка)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяДокумента#", ИмяДокумента);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ВыполнитьШагПоискаИсправленныхДокументов(НомерШага, Запрос, ИмяДокумента)
	
	ТекстЗапросаШага = 
	"ВЫБРАТЬ
	|	ТаблицаПредыдущегоШага.Ссылка,
	|	Документ.ИсправленныйДокумент
	|ПОМЕСТИТЬ #ТаблицаТекущегоШага#
	|ИЗ
	|	Документ.#ИмяДокумента# КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВТШага# КАК ТаблицаПредыдущегоШага
	|		ПО Документ.Ссылка = ТаблицаПредыдущегоШага.ИсправленныйДокумент
	|ГДЕ
	|	Документ.ИсправленныйДокумент <> ЗНАЧЕНИЕ(Документ.#ИмяДокумента#.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаШага.Ссылка
	|ИЗ
	|	#ТаблицаТекущегоШага# КАК ТаблицаШага";
	
	ТекстЗапросаШага = СтрЗаменить(ТекстЗапросаШага, "#ИмяДокумента#", ИмяДокумента);
	
	Запрос.Текст = ТекстЗапросаШага;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТШага#", "ВТШага" + Строка(НомерШага - 1));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаТекущегоШага#", "ВТШага" + НомерШага);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ИмяВТИсправленныеДокументы(ИмяДокумента, ИмяВТ = Неопределено)
	
	ИмяВТИсправленныеДокументы = ИмяВТ;
	
	Если ИмяВТИсправленныеДокументы = Неопределено Тогда
		ИмяВТИсправленныеДокументы = "ВТИсправленныеДокументы" + ИмяДокумента;
	КонецЕсли;
	
	Возврат ИмяВТИсправленныеДокументы;

КонецФункции

Функция ОбъединитьТаблицыШаговПоискаИсправленныхДокументов(Знач НомерШага, Запрос, ИмяДокумента, ИмяВТ)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТШага.Ссылка,
	|	ВТШага.ИсправленныйДокумент
	|ПОМЕСТИТЬ #ИмяВТ#
	|ИЗ
	|	ВТШага0 КАК ВТШага";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяВТ#", ИмяВТИсправленныеДокументы(ИмяДокумента, ИмяВТ));
	
	ТекстЗапроса = " 
	|	ОБЪЕДИНИТЬ ВСЕ Выбрать ВТШага.Ссылка, ВТШага.ИсправленныйДокумент ИЗ #ВТШага# КАК ВТШага";
	
	Пока НомерШага > 0 Цикл
		
		Запрос.Текст = Запрос.Текст + СтрЗаменить(ТекстЗапроса, "#ВТШага#", "ВТШага" + Строка(НомерШага));
		
		НомерШага = НомерШага - 1;
		
	КонецЦикла;
	
	Запрос.Выполнить();

КонецФункции 

Функция УничтожитьВременныеТаблицыШаговПоиска(Знач НомерШага, Запрос)
	
	Запрос.Текст = "";
	
	ТекстЗапроса = "Уничтожить #ВТШага#;";
	
	Пока НомерШага >= 0 Цикл
			
		Запрос.Текст = Запрос.Текст + СтрЗаменить(ТекстЗапроса, "#ВТШага#", "ВТШага" + Строка(НомерШага));
		
		НомерШага = НомерШага - 1;
		
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Запрос.Текст);
	
	Запрос.Выполнить();

КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УтверждениеДокумента(Форма, ГруппаФормы, ДокументУтвержден = Истина)
	
	Если ГруппаФормы = Неопределено Тогда
		Возврат ДокументУтвержден;
	КонецЕсли;
	
	Для каждого ПодчиненныйЭлемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		Если ПодчиненныйЭлемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			ДокументУтвержден = Форма.Объект[ПодчиненныйЭлемент.Имя];
		КонецЕсли;
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Или ТипЗнч(ПодчиненныйЭлемент) = Тип("ТаблицаФормы") Тогда
			ДокументУтвержден = УтверждениеДокумента(Форма, ПодчиненныйЭлемент, ДокументУтвержден);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументУтвержден;
	
КонецФункции

Функция ВыплатаПроизводилась(Организация, ПериодРегистрации) Экспорт
	Возврат ВзаиморасчетыССотрудникамиРасширенный.ПроизводиласьВыплатаЗарплатыВПериоде(Организация, ПериодРегистрации);
КонецФункции

Функция ОтражениеВУчетеПроизводилось(Организация, ПериодРегистрации) Экспорт
	
	БылоОтражениеЗарплатыВБухучете = Ложь;
	
	ИмяДокументаОтраженияВБухучете = Неопределено;
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизацийРасширенная") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("БухучетХозрасчетныхОрганизацийРасширенный");
			Модуль.ЗаполнитьИмяДокументаОтраженияВБухучете(ИмяДокументаОтраженияВБухучете);
		КонецЕсли;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
			Модуль.ЗаполнитьИмяДокументаОтраженияВБухучете(ИмяДокументаОтраженияВБухучете);
		КонецЕсли;
	КонецЕсли;
	// Если имя документа удалось выяснить, выполняем запрос.
	Если ИмяДокументаОтраженияВБухучете <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Поле1
			|ИЗ
			|	#ИмяДокументаОтраженияВБухучете КАК ОтражениеЗарплатыВБухучете
			|ГДЕ
			|	ОтражениеЗарплатыВБухучете.Организация = &Организация
			|	И ОтражениеЗарплатыВБухучете.Проведен
			|	И ОтражениеЗарплатыВБухучете.ПериодРегистрации = &ПериодРегистрации";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяДокументаОтраженияВБухучете", ИмяДокументаОтраженияВБухучете);
		
		УстановитьПривилегированныйРежим(Истина);
		БылоОтражениеЗарплатыВБухучете = Не Запрос.Выполнить().Пустой();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат БылоОтражениеЗарплатыВБухучете;
	
КонецФункции

#КонецОбласти
