////////////////////////////////////////////////////////////////////////////////
// КадровыйУчетБазовый: методы кадрового учета, работающие на стороне сервера.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует кадровые приказы, при включении ведения кадрового учета документами,
// выполняется в фоновом задании.
//
// Параметры:
//		ПараметрыЗадания - Необходим для поддержки работы длительных операций, для запуска
//							в качестве фонового задания, не используется.
//		АдресВоВременномХранилище - Необходим для поддержки работы длительных операций, для запуска
//							в качестве фонового задания, не используется.
//
Процедура СформироватьКадровыеПриказы(ПараметрыЗадания = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Если Не ФОИспользоватьКадровыйУчет Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение необходимых текущих данных.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ТекущаяДата КАК Период,
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники";
		
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудники");
			
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц,
		Ложь,
		"ГоловнаяОрганизация,ТекущаяОрганизация,ТекущееПодразделение,ТекущаяДолжность,ТекущийВидЗанятости,ДатаПриема,ДатаУвольнения,ТекущаяТарифнаяСтавка,ТекущийСпособРасчетаАванса,ТекущийАванс");
		
	// Отсев сотрудников, у которых даты приема и увольнения установлены некорректно
	// и сотрудников для которых ранее создавались кадровые приказы.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	СотрудникиОрганизации.ТекущаяОрганизация КАК ТекущаяОрганизация,
		|	СотрудникиОрганизации.ТекущееПодразделение КАК ТекущееПодразделение,
		|	СотрудникиОрганизации.ТекущаяДолжность КАК ТекущаяДолжность,
		|	СотрудникиОрганизации.ТекущийВидЗанятости КАК ТекущийВидЗанятости,
		|	СотрудникиОрганизации.ДатаПриема КАК ДатаПриема,
		|	СотрудникиОрганизации.ДатаУвольнения КАК ДатаУвольнения,
		|	СотрудникиОрганизации.ТекущаяТарифнаяСтавка КАК ТекущаяТарифнаяСтавка,
		|	СотрудникиОрганизации.ТекущийСпособРасчетаАванса КАК ТекущийСпособРасчетаАванса,
		|	СотрудникиОрганизации.ТекущийАванс КАК ТекущийАванс,
		|	ЕСТЬNULL(ПриемНаРаботу.Ссылка, ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)) КАК ПриказОПриеме,
		|	ЕСТЬNULL(Увольнение.Ссылка, ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка)) КАК ПриказОбУвольнении
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК СотрудникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ПО СотрудникиОрганизации.Сотрудник = ПриемНаРаботу.Сотрудник
		|			И (ПриемНаРаботу.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Увольнение КАК Увольнение
		|		ПО СотрудникиОрганизации.Сотрудник = Увольнение.Сотрудник
		|			И (Увольнение.Проведен)
		|ГДЕ
		|	(ЕСТЬNULL(ПриемНаРаботу.Ссылка, ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)
		|			ИЛИ СотрудникиОрганизации.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
		|				И СотрудникиОрганизации.ДатаУвольнения <> СотрудникиОрганизации.ДатаПриема
		|				И ЕСТЬNULL(Увольнение.Ссылка, ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка))
		|	И СотрудникиОрганизации.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И СотрудникиОрганизации.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	ПовременныеНачисления = РасчетЗарплаты.НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	
	НачислениеОклад = Неопределено;
	Если ПовременныеНачисления.Количество() > 0 Тогда 
		НачислениеОклад = ПовременныеНачисления[0];
	КонецЕсли;	
	
	ДанныеСотрудников = РезультатЗапроса.Выбрать();
	Пока ДанныеСотрудников.Следующий() Цикл
		
		// Создание приказов о приеме
		Если ЗначениеЗаполнено(ДанныеСотрудников.ДатаПриема)
			И Не ЗначениеЗаполнено(ДанныеСотрудников.ПриказОПриеме) Тогда
			
			ДокументПриемНаРаботу = Документы.ПриемНаРаботу.СоздатьДокумент();
			
			ДокументПриемНаРаботу.Дата = ДанныеСотрудников.ДатаПриема;
			ДокументПриемНаРаботу.ДатаПриема = ДанныеСотрудников.ДатаПриема;
			ДокументПриемНаРаботу.Организация = ДанныеСотрудников.ТекущаяОрганизация;
			ДокументПриемНаРаботу.Сотрудник = ДанныеСотрудников.Сотрудник;
			ДокументПриемНаРаботу.Подразделение = ДанныеСотрудников.ТекущееПодразделение;
			ДокументПриемНаРаботу.Должность = ДанныеСотрудников.ТекущаяДолжность;
			ДокументПриемНаРаботу.ВидЗанятости = ДанныеСотрудников.ТекущийВидЗанятости;
			ДокументПриемНаРаботу.СпособРасчетаАванса = ДанныеСотрудников.ТекущийСпособРасчетаАванса;
			ДокументПриемНаРаботу.Аванс = ДанныеСотрудников.ТекущийАванс;
			
			// Добавление начисления "Оклад" и установка размера тарифной ставки.
			Если НачислениеОклад <> Неопределено Тогда 
				Начисление = ДокументПриемНаРаботу.Начисления.Добавить();
				Начисление.Начисление = НачислениеОклад;
				Начисление.Размер = ДанныеСотрудников.ТекущаяТарифнаяСтавка;
			КонецЕсли;
			
			ДокументПриемНаРаботу.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
			Попытка
				ДокументПриемНаРаботу.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
				ДокументПриемНаРаботу.Записать(РежимЗаписиДокумента.Запись);
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При создании кадровых приказов не удалось провести приказ об увольнении сотрудника %1, необходимо выполнить проведение в ручном режиме.';uk='При створенні кадрових наказів не вдалося провести наказ про звільнення співробітника %1, необхідно виконати проведення в ручному режимі.'"),
					ДанныеСотрудников.Сотрудник);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ДокументПриемНаРаботу.Ссылка);
					
			КонецПопытки;
			
		КонецЕсли; 
		
		// Создание приказов об увольнении.
		Если ЗначениеЗаполнено(ДанныеСотрудников.ДатаУвольнения)
			И Не ЗначениеЗаполнено(ДанныеСотрудников.ПриказОбУвольнении) Тогда
			
			ДокументУвольнение = Документы.Увольнение.СоздатьДокумент();
			
			ДокументУвольнение.Дата = ДанныеСотрудников.ДатаУвольнения;
			ДокументУвольнение.ДатаУвольнения = ДанныеСотрудников.ДатаУвольнения;
			ДокументУвольнение.Организация = ДанныеСотрудников.ТекущаяОрганизация;
			ДокументУвольнение.Сотрудник = ДанныеСотрудников.Сотрудник;
			
			ДокументУвольнение.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
			Попытка
				ДокументУвольнение.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
				ДокументУвольнение.Записать(РежимЗаписиДокумента.Запись);
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При создании кадровых приказов не удалось провести приказ о приеме сотрудника %1, необходимо выполнить проведение в ручном режиме.';uk='При створенні кадрових наказів не вдалося провести наказ про прийом співробітника %1, необхідно виконати проведення в ручному режимі.'"),
					ДанныеСотрудников.Сотрудник);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ДокументУвольнение.Ссылка);
					
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ЗапросВТВсеЗначенияДоступаСотрудников(Сотрудники) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ГоловнаяОрганизация КАК ЗначениеДоступа
		|ПОМЕСТИТЬ ВТВсеЗначенияДоступаСотрудников
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)
		|	И Сотрудники.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	КадроваяИсторияСотрудников.Организация
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.Сотрудник В(&Сотрудники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник В(&Сотрудники)
		|	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Возврат Запрос;
	
КонецФункции

Процедура СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения, ЗаполнятьНаборЗаписей = Истина) Экспорт
	
	Если КадровыеДвижения.Количество() > 0 Тогда
		Движения.КадроваяИсторияСотрудников.Записывать = Истина;
	КонецЕсли; 
	
	Если ЗаполнятьНаборЗаписей Тогда
		
		ТаблицаДляПроведения = КадровыеДвижения.Скопировать();
		
		ТаблицаДляПроведения.Колонки.ДатаСобытия.Имя = "Период";
		Движения.КадроваяИсторияСотрудников.Загрузить(ТаблицаДляПроведения);
		
	КонецЕсли; 
	
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(РегистраторОбъект)) Тогда
		Если РегистраторОбъект.ДополнительныеСвойства.Свойство("ОтключитьПроверкуДатыЗапретаИзменения")
			И РегистраторОбъект.ДополнительныеСвойства.ОтключитьПроверкуДатыЗапретаИзменения Тогда
			
			Движения.КадроваяИсторияСотрудников.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоговорыФизическихЛиц(ТаблицаФизическихЛиц) Экспорт
	
	ТаблицаДоговоров = Новый ТаблицаЗначений;
	ТаблицаДоговоров.Колонки.Добавить("ФизическоеЛицо", 	Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДоговоров.Колонки.Добавить("ВидДоговора", 		Новый ОписаниеТипов("Булево"));
	ТаблицаДоговоров.Колонки.Добавить("ВидДоговораГПХ", 	Новый ОписаниеТипов("Булево"));
	ТаблицаДоговоров.Колонки.Добавить("Номер", 				Новый ОписаниеТипов("Строка"));
	ТаблицаДоговоров.Колонки.Добавить("Дата", 				Новый ОписаниеТипов("Дата"));
	ТаблицаДоговоров.Колонки.Добавить("Организация", 		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДоговоров.Колонки.Добавить("Начало",				Новый ОписаниеТипов("Дата"));
	ТаблицаДоговоров.Колонки.Добавить("Окончание",			Новый ОписаниеТипов("Дата"));
	
	ТаблицаГоловныхОрганизаций = ТаблицаФизическихЛиц.Скопировать(, "ГоловнаяОрганизация,НачалоПериода,ОкончаниеПериода");
	ТаблицаГоловныхОрганизаций.Свернуть("ГоловнаяОрганизация,НачалоПериода,ОкончаниеПериода");
	
	Для каждого СтрокаГоловнойОрганизации Из ТаблицаГоловныхОрганизаций Цикл
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("НачалоПериода", СтрокаГоловнойОрганизации.НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", СтрокаГоловнойОрганизации.ОкончаниеПериода);
		
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация = СтрокаГоловнойОрганизации.ГоловнаяОрганизация;
		ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
		ПараметрыПолученияСотрудников.НачалоПериода		= СтрокаГоловнойОрганизации.НачалоПериода;
		ПараметрыПолученияСотрудников.ОкончаниеПериода	= СтрокаГоловнойОрганизации.ОкончаниеПериода;
		ПараметрыПолученияСотрудников.КадровыеДанные	= "ПриказОПриемеНомер,ПриказОПриемеДата,ДатаПриема,ДатаУвольнения";
		
		СписокФизическихЛиц = ТаблицаФизическихЛиц.Скопировать(Новый Структура("ГоловнаяОрганизация,НачалоПериода,ОкончаниеПериода",
			СтрокаГоловнойОрганизации.ГоловнаяОрганизация, СтрокаГоловнойОрганизации.НачалоПериода, СтрокаГоловнойОрганизации.ОкончаниеПериода),
			"ФизическоеЛицо").ВыгрузитьКолонку("ФизическоеЛицо");
		
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = СписокФизическихЛиц;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизации.Сотрудник,
			|	&НачалоПериода КАК НачалоПериода,
			|	&ОкончаниеПериода КАК ОкончаниеПериода
			|ПОМЕСТИТЬ ВТСотрудникиПериоды
			|ИЗ
			|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
			
		Запрос.Выполнить();
		
		ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
		КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияРабочихМест);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РабочиеМестаСотрудников.Период,
			|	РабочиеМестаСотрудников.Сотрудник,
			|	РабочиеМестаСотрудников.ФизическоеЛицо,
			|	ЛОЖЬ КАК ВидДоговора,
			|	ЛОЖЬ КАК ВидДоговораГПХ,
			|	СотрудникиОрганизации.ПриказОПриемеНомер КАК Номер,
			|	НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ПриказОПриемеДата, ДЕНЬ) КАК Дата,
			|	РабочиеМестаСотрудников.Организация,
			|	НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ДатаПриема, ДЕНЬ) КАК Начало,
			|	ВЫБОР
			|		КОГДА СотрудникиОрганизации.ДатаУвольнения МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|			ТОГДА НАЧАЛОПЕРИОДА(СотрудникиОрганизации.ДатаУвольнения, ДЕНЬ)
			|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
			|	КОНЕЦ КАК Окончание
			|ПОМЕСТИТЬ ВТДоговорыПредварительно
			|ИЗ
			|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
			|		ПО РабочиеМестаСотрудников.Сотрудник = СотрудникиОрганизации.Сотрудник";
			
		Запрос.Выполнить();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Договоры.Период,
			|	Договоры.Сотрудник,
			|	Договоры.ФизическоеЛицо,
			|	Договоры.ВидДоговора,
			|	Договоры.ВидДоговораГПХ,
			|	Договоры.Номер,
			|	Договоры.Дата,
			|	Договоры.Организация,
			|	Договоры.Начало,
			|	Договоры.Окончание,
			|	МИНИМУМ(НАЧАЛОПЕРИОДА(ДоговорыДругаяОрганизация.Период, ДЕНЬ)) КАК СледующийПериод
			|ПОМЕСТИТЬ ВТДоговорыСОкончанием
			|ИЗ
			|	ВТДоговорыПредварительно КАК Договоры
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоговорыПредварительно КАК ДоговорыДругаяОрганизация
			|		ПО Договоры.Сотрудник = ДоговорыДругаяОрганизация.Сотрудник
			|			И Договоры.Организация <> ДоговорыДругаяОрганизация.Организация
			|			И Договоры.Период < ДоговорыДругаяОрганизация.Период
			|
			|СГРУППИРОВАТЬ ПО
			|	Договоры.Период,
			|	Договоры.Сотрудник,
			|	Договоры.ФизическоеЛицо,
			|	Договоры.ВидДоговора,
			|	Договоры.ВидДоговораГПХ,
			|	Договоры.Номер,
			|	Договоры.Дата,
			|	Договоры.Организация,
			|	Договоры.Начало,
			|	Договоры.Окончание
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДоговорыСОкончанием.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДоговорыСОкончанием.ВидДоговора КАК ВидДоговора,
			|	ДоговорыСОкончанием.ВидДоговораГПХ КАК ВидДоговораГПХ,
			|	ДоговорыСОкончанием.Номер КАК Номер,
			|	ДоговорыСОкончанием.Дата КАК Дата,
			|	ДоговорыСОкончанием.Организация КАК Организация,
			|	ЕСТЬNULL(ДоговорыСНовымНачалом.СледующийПериод, ДоговорыСОкончанием.Начало) КАК Начало,
			|	ВЫБОР
			|		КОГДА ДоговорыСОкончанием.СледующийПериод <> ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ДОБАВИТЬКДАТЕ(ДоговорыСОкончанием.СледующийПериод, ДЕНЬ, -1)
			|		ИНАЧЕ ДоговорыСОкончанием.Окончание
			|	КОНЕЦ КАК Окончание
			|ИЗ
			|	ВТДоговорыСОкончанием КАК ДоговорыСОкончанием
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоговорыСОкончанием КАК ДоговорыСНовымНачалом
			|		ПО ДоговорыСОкончанием.Сотрудник = ДоговорыСНовымНачалом.Сотрудник
			|			И (НАЧАЛОПЕРИОДА(ДоговорыСОкончанием.Период, ДЕНЬ) = ДоговорыСНовымНачалом.СледующийПериод)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Организация,
			|	ФизическоеЛицо,
			|	ВидДоговора УБЫВ,
			|	Начало";
			
		ТаблицаДоговоровГоловнойОрганизации = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаТаблицаДоговоровГоловнойОрганизации Из ТаблицаДоговоровГоловнойОрганизации Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДоговоров.Добавить(), СтрокаТаблицаДоговоровГоловнойОрганизации);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДоговоров;
	
КонецФункции

Функция КритерииПоискаСотрудниковПоКоллекцииОтборов(Отборы) Экспорт
	
	КритерииПоиска = Новый Соответствие;
	
	Для каждого УсловиеПоиска Из Отборы Цикл
		
		Если ТипЗнч(УсловиеПоиска) = Тип("Соответствие") Тогда
			
			Для каждого ЭлементСоответствия Из УсловиеПоиска Цикл
				КритерииПоиска.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
			КонецЦикла;
			
			Продолжить;
			
		ИначеЕсли ДобавитьКритерийПоискаСправочникаФизическиеЛица(КритерииПоиска, УсловиеПоиска)
			Или КадровыйУчет.ДобавитьКритерийПоискаПоКонтактнойИнформацииФизическогоЛица(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоДокументамУдостоверяющимЛичность(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОбИнвалидности(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОГражданстве(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОФИОФизическихЛиц(КритерииПоиска, УсловиеПоиска)
			Или УчетСтраховыхВзносовФизическиеЛица.ДобавитьКритерийПоискаПоСведениямОСтатусахЗастрахованныхЛиц(КритерииПоиска, УсловиеПоиска)
			Или УчетНДФЛФизическиеЛица.ДобавитьКритерийПоискаПоСведениямОСтатусахНалогоплательщиков(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаСправочникаСотрудники(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоТекущимКадровымДаннымСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоТекущимТарифнымСтавкамСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямКадровойИсторииСотрудников(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОбУчетеЗатрат(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОПлановыхАвансах(КритерииПоиска, УсловиеПоиска)
			Или ДобавитьКритерийПоискаПоСведениямОЗарплатныхПроектах(КритерииПоиска, УсловиеПоиска) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВызватьИсключение НСтр("ru='Неизвестное условие поиска';uk='Невідома умова пошуку'");
		
	КонецЦикла;
	
	КритерииПоискаКадровойИсторииСотрудников = КритерииПоиска.Получить("РегистрСведений.КадроваяИсторияСотрудников");
	Если КритерииПоискаКадровойИсторииСотрудников <> Неопределено Тогда
		
		КритерииПоискаСправочникаСотрудники = КритерииПоиска.Получить("Справочник.Сотрудники");
		Если КритерииПоискаСправочникаСотрудники <> Неопределено Тогда
			
			ЕстьКритерийПоискаФизическихЛиц = Ложь;
			ПереносимыеУсловияПоиска = Новый Массив;
			Для каждого УсловиеПоиска Из КритерииПоискаСправочникаСотрудники Цикл
				
				ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
				Если ИмяПоля = Врег("ФизическоеЛицо")
					Или ИмяПоля = Врег("ГоловнаяОрганизация") Тогда
					
					Если ИмяПоля = Врег("ФизическоеЛицо") Тогда
						ЕстьКритерийПоискаФизическихЛиц = Истина;
					КонецЕсли;
					
					ПереносимыеУсловияПоиска.Добавить(УсловиеПоиска);
					
				КонецЕсли; 
				
			КонецЦикла;
			
			Если ПереносимыеУсловияПоиска.Количество() > 0 Тогда
				
				Для каждого УсловиеПоиска Из ПереносимыеУсловияПоиска Цикл
					КритерииПоискаКадровойИсторииСотрудников.Добавить(УсловиеПоиска);
				КонецЦикла;
				
				КритерииПоиска.Вставить("РегистрСведений.КадроваяИсторияСотрудников", КритерииПоискаКадровойИсторииСотрудников);
				
				Если ПереносимыеУсловияПоиска.Количество() = КритерииПоискаСправочникаСотрудники.Количество()
					И Не ЕстьКритерийПоискаФизическихЛиц Тогда
					
					КритерииПоиска.Удалить("Справочник.Сотрудники");
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат КритерииПоиска;
	
КонецФункции

Процедура ПроверитьУникальностьТабельногоНомера(ТабельныйНомер, Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", ТабельныйНомер);
	Запрос.УстановитьПараметр("Ссылка", Сотрудник);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Сотрудники.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Код = &Код
		|	И Сотрудники.ГоловнойСотрудник = Сотрудники.Ссылка
		|	И Сотрудники.Ссылка <> &Ссылка";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Значение ""%1"" поля ""Таб. номер"" не уникально';uk='Значення ""%1"" поля ""Таб. номер"" не унікально'"),
			ТабельныйНомер);
			
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры


#Область ФункцииДляРегламентированнойОтчетности

// Функция рассчитывает среднесписочную численность работников, 
// среднесписочную численность женщин, среднесписочную численность инвалидов за период.
//
// Параметры:
//		Организация
//		НачалоПериода
//		КонецПериода
//
// Возвращаемое значение - Структура с полями ЧисленностьРаботников, ЧисленностьЖенщин, ЧисленностьИнвалидов.
//	
Функция СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(Запрос.МенеджерВременныхТаблиц, НачалоПериода, КонецПериода, "ДЕНЬ", "Дата", "Календарь");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Календарь.Дата КАК Дата,
	|	НАЧАЛОПЕРИОДА(Календарь.Дата, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТСписокДат
	|ИЗ
	|	Календарь КАК Календарь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
	|	СписокДат.Дата КАК Период,
	|	СписокДат.Дата КАК Дата,
	|	СписокДат.Месяц
	|ПОМЕСТИТЬ ВТДатыИСотрудники
	|ИЗ
	|	ВТСписокДат КАК СписокДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	|				И ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
	|				И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	|		ПО СписокДат.Дата >= ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	|			И (СписокДат.Дата <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
	|					И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
	|ГДЕ
	|	(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация ЕСТЬ NULL )";
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВсеЗаписи = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СведенияОбИнвалидностиФизическихЛиц",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТДатыИСотрудники",
			"ФизическоеЛицо"),
		ПараметрыПостроения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоСотрудников,
	|	СУММА(ВЫБОР
	|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
	|					И СписокДат.ФизическоеЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоЖенщин,
	|	СУММА(ВЫБОР
	|			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
	|					И ЕСТЬNULL(ДанныеОбИнвалидности.Инвалидность, ЛОЖЬ)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИнвалидов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СписокДат.Дата) КАК ДнейВМесяце,
	|	СписокДат.Месяц
	|ПОМЕСТИТЬ ВТСредняяЧисленностьПоМесяцам
	|ИЗ
	|	ВТДатыИСотрудники КАК СписокДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбИнвалидностиФизическихЛицСрезПоследних КАК ДанныеОбИнвалидности
	|		ПО СписокДат.Период = ДанныеОбИнвалидности.Период
	|			И СписокДат.ФизическоеЛицо = ДанныеОбИнвалидности.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокДат.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.КоличествоСотрудников / СредняяЧисленностьПоМесяцам.ДнейВМесяце КАК ЧИСЛО(15, 0))) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц), 0) КАК СреднесписочнаяЧисленность,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.КоличествоЖенщин / СредняяЧисленностьПоМесяцам.ДнейВМесяце КАК ЧИСЛО(15, 0))) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц), 0) КАК СреднесписочнаяЧисленностьЖенщин,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.КоличествоИнвалидов / СредняяЧисленностьПоМесяцам.ДнейВМесяце КАК ЧИСЛО(15, 0))) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц), 0) КАК СреднесписочнаяЧисленностьИнвалидов
	|ИЗ
	|	ВТСредняяЧисленностьПоМесяцам КАК СредняяЧисленностьПоМесяцам";
	
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЧисленности = Новый Структура("ЧисленностьРаботников, ЧисленностьЖенщин, ЧисленностьИнвалидов", 0, 0, 0);
	Если Выборка.Следующий() Тогда
		ДанныеЧисленности.ЧисленностьРаботников = Окр(Выборка.СреднесписочнаяЧисленность); 
		ДанныеЧисленности.ЧисленностьЖенщин = Окр(Выборка.СреднесписочнаяЧисленностьЖенщин); 
		ДанныеЧисленности.ЧисленностьИнвалидов = Окр(Выборка.СреднесписочнаяЧисленностьИнвалидов); 
	КонецЕсли;
	
	Возврат ДанныеЧисленности;
	
КонецФункции

#КонецОбласти


#Область ФормированиеТекстовЗапросовВременныхТаблиц

Функция ПараметрыПолученияОсновныхСотрудниковФизическихЛиц(СписокФизическихЛиц, Организация, НачалоПериода, ОкончаниеПериода) Экспорт
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыПолученияСотрудниковОрганизаций.Организация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	КонецЕсли;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации 	= Истина;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц			= СписокФизическихЛиц;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода					= НачалоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода				= ?(НачалоПериода > ОкончаниеПериода, НачалоПериода, ОкончаниеПериода);
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные					= "ГоловнаяОрганизация,ФизическоеЛицо,ВидЗанятости,ДатаПриема,ДатаУвольнения";
	
	Возврат ПараметрыПолученияСотрудниковОрганизаций;
	
КонецФункции

Функция ЗапросВТОбъектПоИдентификатору(ПолноеИмяОбъекта, ИмяВТОбъектПоИдентификатору, ИдентификаторОбъекта) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Объекты.Ссылка КАК " + ИдентификаторОбъекта + "
		|ПОМЕСТИТЬ " + ИмяВТОбъектПоИдентификатору + "
		|ИЗ
		|	" + ПолноеИмяОбъекта + " КАК Объекты
		|ГДЕ
		|	Объекты.ИдентификаторОбъекта = """ + ИдентификаторОбъекта + """";
		
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТОбъектПредопределенноеЗначение(ПолноеИмяОбъекта, ИмяВТОбъектПредопределенноеЗначение, ИмяЭлемента) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПредопределенноеЗначениеСсылка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(ПолноеИмяОбъекта + "." + ИмяЭлемента));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Объекты.Ссылка КАК " + ИмяЭлемента + "
		|ПОМЕСТИТЬ " + ИмяВТОбъектПредопределенноеЗначение + "
		|ИЗ
		|	" + ПолноеИмяОбъекта + " КАК Объекты
		|ГДЕ
		|	Объекты.Ссылка = &ПредопределенноеЗначениеСсылка";
		
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТФункциональныеОпцииОрганизаций(ТолькоРазрешенные, ИмяВТФункциональныеОпцииОрганизаций, МассивФункциональныхОпций) Экспорт
	
	Запрос = Новый Запрос;
	
	СоответствиеХранилищ = Новый Соответствие;
	МассивФункциональныхОпцийСправочникаОрганизации = Новый Массив;
	СоответствиеПериодичностиХранилищ = Новый Соответствие;
	
	Для каждого ИмяФункциональнойОпции Из МассивФункциональныхОпций Цикл
		
		Если ВРег(ИмяФункциональнойОпции) = "ОРГАНИЗАЦИЯ" Тогда
			Продолжить;
		КонецЕсли; 
		
		МетаданныеФункциональнойОпции = Метаданные.ФункциональныеОпции[ИмяФункциональнойОпции];
		ИмяОбъектаХранилища = МетаданныеФункциональнойОпции.Хранение.Родитель().ПолноеИмя();
		
		Если ИмяОбъектаХранилища = "Справочник.Организации" Тогда
			
			МассивФункциональныхОпцийСправочникаОрганизации.Добавить( Новый Структура("ИмяФункциональнойОпции,ИмяХранилища", ИмяФункциональнойОпции, МетаданныеФункциональнойОпции.Хранение.Имя));
			
		Иначе
			
			СоответствиеХранилища = СоответствиеХранилищ.Получить(ИмяОбъектаХранилища);
			Если СоответствиеХранилища = Неопределено Тогда
				СоответствиеХранилища = Новый Массив;
			КонецЕсли;
			
			СоответствиеХранилища.Добавить(Новый Структура("ИмяФункциональнойОпции,ИмяХранилища", ИмяФункциональнойОпции, МетаданныеФункциональнойОпции.Хранение.Имя));
			СоответствиеХранилищ.Вставить(ИмяОбъектаХранилища, СоответствиеХранилища);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация";
		
	Для каждого СтруктураОписания Из МассивФункциональныхОпцийСправочникаОрганизации Цикл

		ТекстЗапроса = ТекстЗапроса + ",
			|	Организации." + СтруктураОписания.ИмяХранилища + " КАК " +  СтруктураОписания.ИмяФункциональнойОпции;
						
	КонецЦикла;
	
	Для каждого СоответствиеХранилища Из СоответствиеХранилищ Цикл
		
		МетаданныеОбъектаХранилища = Метаданные.НайтиПоПолномуИмени(СоответствиеХранилища.Ключ);
		
		СоответствиеПериодичностиХранилищ.Вставить(СоответствиеХранилища.Ключ, МетаданныеОбъектаХранилища.ПериодичностьРегистраСведений);
		
		Если ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаданныеОбъектаХранилища) = ОбщегоНазначения.ИмяТипаРегистрыСведений() Тогда
			
			Для каждого СтруктураОписания Из СоответствиеХранилища.Значение Цикл

				ТекстЗапроса = ТекстЗапроса + ",
					|	" + СтрЗаменить(СоответствиеХранилища.Ключ, ".", "") + "." + СтруктураОписания.ИмяХранилища + " КАК " +  СтруктураОписания.ИмяФункциональнойОпции;
						
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ПОМЕСТИТЬ " + ИмяВТФункциональныеОпцииОрганизаций + "
		|ИЗ Справочник.Организации КАК Организации";
	
	Для каждого СоответствиеХранилища Из СоответствиеХранилищ Цикл
			
		ПериодичностьРегистраСведений = СоответствиеПериодичностиХранилищ.Получить(СоответствиеХранилища.Ключ);
		
		Если ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			ПутьКОбъектуХранилища = СоответствиеХранилища.Ключ;
		Иначе
			ПутьКОбъектуХранилища = СоответствиеХранилища.Ключ + ".СрезПоследних";
		КонецЕсли;
				
		ТекстЗапроса = ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПутьКОбъектуХранилища + " КАК " + СтрЗаменить(СоответствиеХранилища.Ключ, ".", "") + "
			|		ПО Организации.Ссылка = " + СтрЗаменить(СоответствиеХранилища.Ключ, ".", "") + ".Организация";
			
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТОтборСотрудниковОрганизации(ТолькоРазрешенные, Параметры, ИмяВТСотрудникиПериоды) Экспорт
	
	Перем СписокФизическихЛиц;
	Перем ИмяВТФизическиеЛица;
	
	ПараметрыОтбораПоОрганизациям = КадровыйУчет.ПараметрыОтбораПоОрганизациям(Параметры);
	
	Параметры.Свойство("СписокФизическихЛиц", СписокФизическихЛиц);
	Параметры.Свойство("ИмяВТФизическиеЛица", ИмяВТФизическиеЛица);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Если ТипЗнч(Параметры.НачалоПериода) = Тип("Строка") Тогда
			ТекстДатаНачала = Параметры.НачалоПериода;
		Иначе
			ТекстДатаНачала = "ДАТАВРЕМЯ(" + Формат(Параметры.НачалоПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
		КонецЕсли;
		
		Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
			ТекстДатаОкончания = Параметры.ОкончаниеПериода;
		Иначе
			ТекстДатаОкончания = "ДАТАВРЕМЯ(" + Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
		КонецЕсли;
		
		УстановленыОтборы = Ложь;
		Отборы = Неопределено;
		
		Параметры.Свойство("Отборы", Отборы);
		Если Отборы = Неопределено Тогда
			Отборы = Новый Массив;
		КонецЕсли;
		
		Если Отборы.Количество() > 0 Тогда
			
			УстановленыОтборы = Истина;
			ИмяВТСотрудникиПоКритериямПоиска = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСотрудникиПоКритериямПоиска");
			
			Если СписокФизическихЛиц <> Неопределено Тогда
				
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
					Отборы, "ФизическоеЛицо", "В", СписокФизическихЛиц);
					
				Отборы.Вставить(0, Отборы[Отборы.Количество() - 1]);
				Отборы.Удалить(Отборы.Количество() - 1);
					
			КонецЕсли; 
			
			КритерииПоиска = КадровыйУчет.КритерииПоискаСотрудниковПоКоллекцииОтборов(Отборы);
			Запрос = КадровыйУчет.ЗапросВТСотрудникиПоКритериямПоиска(
				КритерииПоиска, ТолькоРазрешенные, "Справочник.Сотрудники", ИмяВТСотрудникиПоКритериямПоиска);
				
			ТекстЗапросаВТСотрудникиПериоды =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Сотрудники.Сотрудник КАК Сотрудник,
				|	&ДатаНачала КАК ДатаНачала,
				|	&ДатаОкончания КАК ДатаОкончания
				|ПОМЕСТИТЬ ВТСотрудникиПериоды
				|ИЗ
				|	ВТСотрудникиПоКритериямПоиска КАК Сотрудники";
				
			ТекстЗапросаВТСотрудникиПериоды = СтрЗаменить(ТекстЗапросаВТСотрудникиПериоды, "ВТСотрудникиПоКритериямПоиска", ИмяВТСотрудникиПоКритериямПоиска);
					
			Запрос.Текст =
				Запрос.Текст
				+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
				+ ТекстЗапросаВТСотрудникиПериоды;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Сотрудники.Ссылка КАК Сотрудник,
				|	&ДатаНачала КАК ДатаНачала,
				|	&ДатаОкончания КАК ДатаОкончания
				|ПОМЕСТИТЬ ВТСотрудникиПериоды
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники";
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаНачала", ТекстДатаНачала);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаОкончания", ТекстДатаОкончания);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
		
		ТекстУсловий = "";
		ТекстСоединения = "";
		
		Если СписокФизическихЛиц <> Неопределено Или ИмяВТФизическиеЛица = Неопределено Тогда
			
			Если УстановленыОтборы Тогда
				
				Если СписокФизическихЛиц <> Неопределено Тогда
					Запрос.УстановитьПараметр("МассивФизическихЛиц", СписокФизическихЛиц); 
					ТекстУсловий = "Сотрудники.ФизическоеЛицо В (&МассивФизическихЛиц)";
				КонецЕсли;
				
			Иначе
			
				Если СписокФизическихЛиц = Неопределено Тогда
					
					Запрос.Текст =
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|	&ДатаНачала КАК ДатаНачала,
						|	&ДатаОкончания КАК ДатаОкончания
						|ПОМЕСТИТЬ ВТСотрудникиПериоды";
						
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаНачала", ТекстДатаНачала);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаОкончания", ТекстДатаОкончания);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
				
				Иначе
					Запрос.УстановитьПараметр("МассивФизическихЛиц", СписокФизическихЛиц); 
					ТекстУсловий = "Сотрудники.ФизическоеЛицо В (&МассивФизическихЛиц)";
				КонецЕсли;
				
			КонецЕсли;
					
		ИначеЕсли ИмяВТФизическиеЛица <> Неопределено Тогда
			
			Если УстановленыОтборы Тогда
				
				ТекстСоединения = "
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТФизическиеЛица + " КАК ФизическиеЛица
					|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица." + Параметры.ИмяПоляФизическоеЛицо;
			
			Иначе
				
				ТекстСоединения = "
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТФизическиеЛица + " КАК ФизическиеЛица
					|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица." + Параметры.ИмяПоляФизическоеЛицо;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации) 
			И (СписокФизическихЛиц <> Неопределено
				Или ИмяВТФизическиеЛица <> Неопределено) Тогда
			
			Запрос.УстановитьПараметр("ГоловныеОрганизации", ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации);
			Если УстановленыОтборы
				Или ИмяВТФизическиеЛица <> Неопределено
				Или СписокФизическихЛиц <> Неопределено Тогда
				
				ТекстУсловий = ?(ПустаяСтрока(ТекстУсловий), "", ТекстУсловий + Символы.ПС + "	И ")
					+ "Сотрудники.ГоловнаяОрганизация В (&ГоловныеОрганизации)";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстСоединения) Тогда
			Запрос.Текст = Запрос.Текст + ТекстСоединения;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстУсловий) Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|ГДЕ
				|	" + ТекстУсловий;
				
		КонецЕсли;
		
		Если УстановленыОтборы Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|{ГДЕ
				|	Сотрудники.Сотрудник.*,
				|	Сотрудники.Сотрудник.ГоловнаяОрганизация.* КАК ГоловнаяОрганизация,
				|	Сотрудники.ФизическоеЛицо.*}";
					
		ИначеЕсли СписокФизическихЛиц <> Неопределено Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|{ГДЕ
				|	Сотрудники.Ссылка.* КАК Сотрудник,
				|	Сотрудники.ГоловнаяОрганизация.*,
				|	Сотрудники.ФизическоеЛицо.*}";
					
		КонецЕсли;
			
	Иначе
		
		УстановленыОтборы = Ложь;
		Отборы = Неопределено;
		Если Параметры.Свойство("Отборы",  Отборы)
			И Отборы <> Неопределено Тогда
			
			УстановленыОтборы = Истина;
			ИмяВТСотрудникиПоКритериямПоиска = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСотрудникиПоКритериямПоиска");
			
			КритерииПоиска = КадровыйУчет.КритерииПоискаСотрудниковПоКоллекцииОтборов(Отборы);
			Запрос = КадровыйУчет.ЗапросВТСотрудникиПоКритериямПоиска(
				КритерииПоиска, ТолькоРазрешенные, "Справочник.Сотрудники", ИмяВТСотрудникиПоКритериямПоиска);
				
			ТекстЗапросаВТСотрудникиПериоды =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Сотрудники.Сотрудник КАК Сотрудник,
				|	&Период КАК Период
				|ПОМЕСТИТЬ ВТСотрудникиПериоды
				|ИЗ
				|	ВТСотрудникиПоКритериямПоиска КАК Сотрудники";
				
			ТекстЗапросаВТСотрудникиПериоды = СтрЗаменить(ТекстЗапросаВТСотрудникиПериоды, "ВТСотрудникиПоКритериямПоиска", ИмяВТСотрудникиПоКритериямПоиска);
					
			Запрос.Текст =
				Запрос.Текст
				+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
				+ ТекстЗапросаВТСотрудникиПериоды;
		Иначе
				
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Сотрудники.Ссылка КАК Сотрудник,
				|	&Период КАК Период
				|ПОМЕСТИТЬ ВТСотрудникиПериоды
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники";
	
		КонецЕсли;
		
		Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
			ТекстПериод = Параметры.ОкончаниеПериода;
		Иначе
			ТекстПериод = "ДАТАВРЕМЯ(" + Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Период", ТекстПериод);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
		
		ТекстУсловий = "";
		Если СписокФизическихЛиц <> Неопределено Тогда
			
			Запрос.УстановитьПараметр("МассивФизическихЛиц", СписокФизическихЛиц); 
			ТекстУсловий = ?(ПустаяСтрока(ТекстУсловий), "", ТекстУсловий + Символы.ПС + "	И ")
				+ "Сотрудники.ФизическоеЛицо В (&МассивФизическихЛиц)";
				
		ИначеЕсли ИмяВТФизическиеЛица <> Неопределено Тогда
			
			Если УстановленыОтборы Тогда
				
				Запрос.Текст = Запрос.Текст + "
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТФизическиеЛица + " КАК ФизическиеЛица
					|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица." + Параметры.ИмяПоляФизическоеЛицо;
				
			Иначе
				
				Запрос.Текст = Запрос.Текст + "
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТФизическиеЛица + " КАК ФизическиеЛица
					|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица." + Параметры.ИмяПоляФизическоеЛицо;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации)  Тогда
			
			Запрос.УстановитьПараметр("ГоловныеОрганизации", ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации);
			Если УстановленыОтборы Тогда
				
				ТекстУсловий = ?(ПустаяСтрока(ТекстУсловий), "", ТекстУсловий + Символы.ПС + "	И ")
					+ "Сотрудники.Сотрудник.ГоловнаяОрганизация В (&ГоловныеОрганизации)";
				
			Иначе
				
				ТекстУсловий = ?(ПустаяСтрока(ТекстУсловий), "", ТекстУсловий + Символы.ПС + "	И ")
					+ "Сотрудники.ГоловнаяОрганизация В (&ГоловныеОрганизации)";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстУсловий) Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|ГДЕ
				|	" + ТекстУсловий;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСотрудникиОрганизацииПоРабочимМестам(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВТСотрудникиПериоды, Параметры, МенеджерВременныхТаблиц) Экспорт
	
	Перем ИмяВТФизическиеЛица;
	Параметры.Свойство("ИмяВТФизическиеЛица", ИмяВТФизическиеЛица);
	
	СоздаватьПромежуточныеТаблицы = (МенеджерВременныхТаблиц <> Неопределено);
	ПараметрыОтбораПоОрганизациям = КадровыйУчет.ПараметрыОтбораПоОрганизациям(Параметры);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
			ТекстДатаОкончания = Параметры.ОкончаниеПериода;
		Иначе
			ТекстДатаОкончания = "ДАТАВРЕМЯ(" + Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
		КонецЕсли;
		
		ИмяВТРабочиеМестаСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТРабочиеМестаСотрудников");
		
		ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(
			ИмяВТСотрудникиПериоды, , "ДатаНачала", "ДатаОкончания");
			
		ЗаполнитьЗначенияСвойств(ПараметрыПолученияРабочихМест, Параметры);
		Если Параметры.Свойство("СписокФизическихЛиц")
			И ЗначениеЗаполнено(Параметры.СписокФизическихЛиц) Тогда
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыПолученияРабочихМест.Отборы, "ФизическоеЛицо", "В", Параметры.СписокФизическихЛиц);
			
		ИначеЕсли Параметры.Отборы = Неопределено
			И ИмяВТФизическиеЛица = Неопределено Тогда
			
			ПараметрыПолученияРабочихМест.ИмяПоляСотрудник = "";
			
		КонецЕсли;
		
		Если СоздаватьПромежуточныеТаблицы Тогда
			
			КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПолученияРабочихМест, ИмяВТРабочиеМестаСотрудников);
			Запрос = Новый Запрос;
			
		Иначе
			
			Запрос = КадровыйУчет.ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, ПараметрыПолученияРабочихМест);
			Запрос.Текст = Запрос.Текст
				+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов();
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.КадровыеДанные) Тогда
			ИмяВТСотрудникиОрганизацииДляКадровойИстории = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса(ИмяВТСотрудникиОрганизации);
		Иначе
			ИмяВТСотрудникиОрганизацииДляКадровойИстории = ИмяВТСотрудникиОрганизации;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст
			+ "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	" + ТекстДатаОкончания + " КАК Период,
			|	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
			|	РабочиеМестаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МАКСИМУМ(РабочиеМестаСотрудников.ПериодЗаписи) КАК ПериодЗаписи
			|ПОМЕСТИТЬ " + ИмяВТСотрудникиОрганизацииДляКадровойИстории + "
			|ИЗ
			|	" + ИмяВТРабочиеМестаСотрудников + " КАК РабочиеМестаСотрудников
			|СГРУППИРОВАТЬ ПО
			|	" + ТекстДатаОкончания + ",
			|	РабочиеМестаСотрудников.Сотрудник,
			|	РабочиеМестаСотрудников.ФизическоеЛицо";
			
		ДополнитьЗапросВТСотрудникиОрганизацииКадровымиДанными(
			Запрос,
			ТолькоРазрешенные,
			ИмяВТСотрудникиОрганизации,
			ИмяВТСотрудникиОрганизацииДляКадровойИстории,
			Параметры.КадровыеДанные);
			
	Иначе

		Запрос = Новый запрос;
		
		ИмяВТКадровыеДанныеСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТКадровыеДанныеСотрудников");
		
		МассивНеобходимыхКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ФизическоеЛицо,ОформленПоТрудовомуДоговору,ДатаПриема,ДатаУвольнения,ГоловнаяОрганизация,Организация,Подразделение");
		
		Если ТипЗнч(Параметры.КадровыеДанные) = Тип("Строка") Тогда
			МассивЗаказанныхКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Параметры.КадровыеДанные, ",", , Истина);
		Иначе
			МассивЗаказанныхКадровыхДанных = Параметры.КадровыеДанные;
		КонецЕсли;
		
		Для каждого ИмяПоля Из МассивЗаказанныхКадровыхДанных Цикл
			Если МассивНеобходимыхКадровыхДанных.Найти(ИмяПоля) = Неопределено Тогда
				МассивНеобходимыхКадровыхДанных.Добавить(ИмяПоля)
			КонецЕсли; 
		КонецЦикла;
		
		ПоляОтбораСотрудников = КадровыйУчет.ПоляОтбораСотрудников();
		
		ОписательВременнойТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(
			ИмяВТСотрудникиПериоды,
			ПоляОтбораСотрудников.Сотрудник,
			ПоляОтбораСотрудников.Период);
			
		ЗапросВТКадровыеДанныеСотрудников = КадровыйУчет.ЗапросВТКадровыеДанныеСотрудников(
			ТолькоРазрешенные,
			ОписательВременнойТаблицыОтборов,
			МассивНеобходимыхКадровыхДанных,
			,
			,
			,
			ИмяВТКадровыеДанныеСотрудников);
			
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТКадровыеДанныеСотрудников);
		
		Запрос.Текст = Запрос.Текст
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ "ВЫБРАТЬ
			|	КадровыеДанныеСотрудников.Период КАК ПериодЗаписи,
			|	КадровыеДанныеСотрудников.Период КАК Период,
			|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
			|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо";
			
		Для каждого ИмяПоля Из МассивЗаказанныхКадровыхДанных Цикл
			
			Если ВРег(ИмяПоля) = "ПЕРИОД"
				Или ВРег(ИмяПоля) = "СОТРУДНИК"
				Или ВРег(ИмяПоля) = "ФИЗИЧЕСКОЕЛИЦО" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ",
				|	КадровыеДанныеСотрудников." + ИмяПоля + " КАК " + ИмяПоля;
				
		КонецЦикла;
			
		Запрос.Текст = Запрос.Текст + "
			|ПОМЕСТИТЬ " + ИмяВТСотрудникиОрганизации + "
			|ИЗ
			|	" + ИмяВТКадровыеДанныеСотрудников + " КАК КадровыеДанныеСотрудников";
			
		ТекстЗапросаУсловий = "";
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
			И (ЗначениеЗаполнено(Параметры.НачалоПериода)
				Или ЗначениеЗаполнено(Параметры.ОкончаниеПериода)) Тогда
				
			Если ТипЗнч(Параметры.НачалоПериода) = Тип("Строка") Тогда
				ТекстНачалоПериода = Параметры.НачалоПериода;
			Иначе
				ТекстНачалоПериода = "ДАТАВРЕМЯ(" + Формат(Параметры.НачалоПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
			КонецЕсли;
			
			Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
				ТекстОкончаниеПериода = Параметры.ОкончаниеПериода;
			Иначе
				ТекстОкончаниеПериода = "ДАТАВРЕМЯ(" + Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
			КонецЕсли;
		
			ТекстЗапросаУсловий = "
				|			КадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору
				|			И КадровыеДанныеСотрудников.ДатаПриема > ДАТАВРЕМЯ(1, 1, 1)
				|			И (КадровыеДанныеСотрудников.ДатаПриема <= " + ТекстОкончаниеПериода + "
				|				ИЛИ " + ТекстОкончаниеПериода + " = ДАТАВРЕМЯ(1, 1, 1))
				|			И (КадровыеДанныеСотрудников.ДатаУвольнения >= " + ТекстНачалоПериода + "
				|				ИЛИ КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
				|";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			
			Если Не ПустаяСтрока(ТекстЗапросаУсловий) Тогда
				ТекстЗапросаУсловий = ТекстЗапросаУсловий + "
					|	И ";
			КонецЕсли;
			
			ТекстЗапросаУсловий = ТекстЗапросаУсловий + "КадровыеДанныеСотрудников.Подразделение В ИЕРАРХИИ (&Подразделение)";
			
			Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.Организации) Тогда
			
			Если Не ПустаяСтрока(ТекстЗапросаУсловий) Тогда
				ТекстЗапросаУсловий = ТекстЗапросаУсловий + "
					|	И ";
			КонецЕсли;
			
			ТекстЗапросаУсловий = ТекстЗапросаУсловий + "КадровыеДанныеСотрудников.ГоловнаяОрганизация В (&ГоловныеОрганизации)";
			Запрос.УстановитьПараметр("ГоловныеОрганизации", ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации);
			
			Если Не Параметры.ОтбиратьПоГоловнойОрганизации Тогда
				
				Если Не ПустаяСтрока(ТекстЗапросаУсловий) Тогда
					ТекстЗапросаУсловий = ТекстЗапросаУсловий + "
						|	И ";
				КонецЕсли;
				
				ТекстЗапросаУсловий = ТекстЗапросаУсловий + "КадровыеДанныеСотрудников.Организация В (&Организации)";
				Запрос.УстановитьПараметр("Организации", ПараметрыОтбораПоОрганизациям.Организации);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстЗапросаУсловий) Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|ГДЕ
				|	" + ТекстЗапросаУсловий;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Процедура ДополнитьЗапросВТСотрудникиОрганизацииКадровымиДанными(Запрос, ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВТСотрудникиОрганизацииПромежуточная, КадровыеДанные, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(КадровыеДанные) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТиПЗнч(КадровыеДанные) = Тип("Строка") Тогда
		МассивНеобходимыхКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	Иначе
		МассивНеобходимыхКадровыхДанных = КадровыеДанные;
	КонецЕсли;
	
	
	Если МассивНеобходимыхКадровыхДанных.Найти("ФизическоеЛицо") = Неопределено Тогда
		МассивНеобходимыхКадровыхДанных.Добавить("ФизическоеЛицо");
	КонецЕсли; 
	
	ПоляОтбораСотрудников = КадровыйУчет.ПоляОтбораСотрудников();
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		ОписательВременнойТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(
			ИмяВТСотрудникиОрганизацииПромежуточная,
			ПоляОтбораСотрудников.Сотрудник,
			ПоляОтбораСотрудников.Период);
			
		ЗапросВТКадровыеДанныеСотрудников = КадровыйУчет.ЗапросВТКадровыеДанныеСотрудников(
			ТолькоРазрешенные,
			ОписательВременнойТаблицыОтборов,
			МассивНеобходимыхКадровыхДанных,
			,
			,
			,
			ИмяВТСотрудникиОрганизации);
			
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТКадровыеДанныеСотрудников);

	Иначе
		
		ОписательВременнойТаблицы = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц,
			ИмяВТСотрудникиОрганизацииПромежуточная);
			
		ОписательВременнойТаблицы.ИмяВТКадровыеДанныеСотрудников = ИмяВТСотрудникиОрганизации;
		
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
			ОписательВременнойТаблицыОтборов,
			ТолькоРазрешенные,
			КадровыеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую описание временной таблицы, используемой в качестве фильтра
// для получения контактной информации.
//
//	Параметры:
//		ИмяВТОтборОбъектов - Строка, имя временной таблицы, служащей отбором для получаемой контактной информации.
//		ИмяРеквизитаОбъект - Строка, имя реквизита во временной таблице, содержащего объект отбора контактной информации.
//		ИмяРеквизитаВид - Строка, имя реквизита во временной таблице, содержащего вид контактной информации, если не указано
//							в результирующую таблицу будет помещена контактная информация любого вида.
//		ИмяРеквизитаТип - Строка, имя реквизита во временной таблице, содержащего тип контактной информации, если не указано
//							в результирующую таблицу будет помещена контактная информация любого типа.
//
//	Возвращаемое значение:
//		Структура - содержащая ключи:
//			ИмяВТОтборОбъектов
//			ИмяРеквизитаОбъект
//			ИмяРеквизитаВид
//			ИмяРеквизитаТип
//
Функция ОписаниеВременнойТаблицыОтборовКонтактнойИнформации(ИмяВТОтборОбъектов, ИмяРеквизитаОбъект, ИмяРеквизитаВид = "", ИмяРеквизитаТип = "") Экспорт
	
	ОписаниеВременнойТаблицы = Новый Структура;
	
	ОписаниеВременнойТаблицы.Вставить("ИмяВТОтборОбъектов", ИмяВТОтборОбъектов);
	ОписаниеВременнойТаблицы.Вставить("ИмяРеквизитаОбъект", ИмяРеквизитаОбъект);
	ОписаниеВременнойТаблицы.Вставить("ИмяРеквизитаВид", ИмяРеквизитаВид);
	ОписаниеВременнойТаблицы.Вставить("ИмяРеквизитаТип", ИмяРеквизитаТип);
	
	Возврат ОписаниеВременнойТаблицы;
	
КонецФункции

// Возвращает запрос, с подготовленным текстом, для создания временной таблицы, содержащей контактную информацию.
//
//	Параметры:
//		ТолькоРазрешенные - Булево, если истина - запрос строится с учетом прав доступа к объектам, содержащим
//							контактную информацию, если ложь - без учета прав доступа (возможно, для выполнения запроса
//							потребуется установить привилегированный режим).
//		ИмяВТКонтактнаяИнформация - Строка, имя временной таблицы, которая создастся в ходе выполнения запроса.
//		ПолноеИмяОбъектаМетаданных - Строка, полное имя объекта метаданных, содержащего контактную информацию
//							(например, "Справочник.ФизическиеЛица")
//		ОписаниеВременнойТаблицыОтборов - Структура, подготовленная с помощью метода
//		                                  "ОписаниеВременнойТаблицыОтборовКонтактнойИнформации".
//
//	Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТКонтактнаяИнформация(ТолькоРазрешенные, ИмяВТКонтактнаяИнформация, ПолноеИмяОбъектаМетаданных, ОписаниеВременнойТаблицыОтборов) Экспорт
	
	Запрос = Новый Запрос;
	
	// Формирование текста запроса.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка КАК Объект,
		|	КонтактнаяИнформация.НомерСтроки,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.ЗначенияПолей
		|ПОМЕСТИТЬ ВТВсяКонтактнаяИнформация
		|ИЗ
		|	&КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборКонтактнойИнформации КАК ОтборКонтактнойИнформации
		|		ПО КонтактнаяИнформация.Ссылка = ОтборКонтактнойИнформации.РеквизитОбъекта
		|		И &ТекстОтбораКонтактнойИнформации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсяКонтактнаяИнформация.Объект,
		|	ВсяКонтактнаяИнформация.Вид,
		|	МИНИМУМ(ВсяКонтактнаяИнформация.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТПервыеЗначенияПоВидуКонтактнойИнформации
		|ИЗ
		|	ВТВсяКонтактнаяИнформация КАК ВсяКонтактнаяИнформация
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсяКонтактнаяИнформация.Объект,
		|	ВсяКонтактнаяИнформация.Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсяКонтактнаяИнформация.Объект,
		|	ВсяКонтактнаяИнформация.Тип,
		|	ВсяКонтактнаяИнформация.Вид,
		|	ВсяКонтактнаяИнформация.Представление,
		|	ВсяКонтактнаяИнформация.ЗначенияПолей
		|ПОМЕСТИТЬ ВТКонтактнаяИнформация
		|ИЗ
		|	ВТВсяКонтактнаяИнформация КАК ВсяКонтактнаяИнформация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПервыеЗначенияПоВидуКонтактнойИнформации КАК ПервыеЗначенияПоВидуКонтактнойИнформации
		|		ПО ВсяКонтактнаяИнформация.Объект = ПервыеЗначенияПоВидуКонтактнойИнформации.Объект
		|			И ВсяКонтактнаяИнформация.Вид = ПервыеЗначенияПоВидуКонтактнойИнформации.Вид
		|			И ВсяКонтактнаяИнформация.НомерСтроки = ПервыеЗначенияПоВидуКонтактнойИнформации.НомерСтроки";
		
	ТекстОтбораКонтактнойИнформации = "";
	Если Не ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаВид) Тогда
		ТекстОтбораКонтактнойИнформации =  "
			|			И КонтактнаяИнформация.Вид = ОтборКонтактнойИнформации.РеквизитВид";
	КонецЕсли;
		
	Если Не ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаТип) Тогда
		ТекстОтбораКонтактнойИнформации = ТекстОтбораКонтактнойИнформации + "
			|			И КонтактнаяИнформация.Тип = ОтборКонтактнойИнформации.РеквизитТип";
	КонецЕсли;
		
	// Замена ключевых выражений
	Если Не ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли; 
	
	ИмяВТВсяКонтактнаяИнформация = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТВсяКонтактнаяИнформация");
	ИмяВТПервыеЗначенияПоВидуКонтактнойИнформации = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПервыеЗначенияПоВидуКонтактнойИнформации");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКонтактнаяИнформация", ИмяВТКонтактнаяИнформация);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборКонтактнойИнформации", ОписаниеВременнойТаблицыОтборов.ИмяВТОтборОбъектов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВсяКонтактнаяИнформация", ИмяВТВсяКонтактнаяИнформация);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПервыеЗначенияПоВидуКонтактнойИнформации", ИмяВТПервыеЗначенияПоВидуКонтактнойИнформации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонтактнаяИнформация", ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеквизитОбъекта", ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаОбъект);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ТекстОтбораКонтактнойИнформации", ТекстОтбораКонтактнойИнформации);
	
	Если Не ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаВид) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеквизитВид", ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаВид);
	КонецЕсли; 
	
	Если Не ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаТип) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеквизитТип", ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаТип);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииОбновленияКонтактнойИнформацииФизическихЛиц

// Процедура обновляет значения реквизитов для видов контактной информации 
// используемой в подсистеме Зарплата и Кадры.
//
Процедура ОбновитьВидыКонтактнойИнформацииФизическогоЛица() Экспорт
	
	ОбновитьВидыКонтактнойИнформацииПоПорядку(1);
	ОбновитьПорядкиКонтактнойИнформации();
	
КонецПроцедуры

Процедура ОбновитьПорядкиКонтактнойИнформации() Экспорт
		
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыКонтактнойИнформации.Ссылка) КАК Количество,
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания
		|ПОМЕСТИТЬ ВТКоличествоВидовОдногоПорядка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТКоличествоВидовОдногоПорядка.РеквизитДопУпорядочивания) КАК РеквизитДопУпорядочивания
		|ПОМЕСТИТЬ ВТМинимальныНарушенныйПорядок
		|ИЗ
		|	ВТКоличествоВидовОдногоПорядка КАК ВТКоличествоВидовОдногоПорядка
		|ГДЕ
		|	ВТКоличествоВидовОдногоПорядка.Количество > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка,
		|	ВТМинимальныНарушенныйПорядок.РеквизитДопУпорядочивания
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМинимальныНарушенныйПорядок КАК ВТМинимальныНарушенныйПорядок
		|		ПО ВидыКонтактнойИнформации.РеквизитДопУпорядочивания >= ВТМинимальныНарушенныйПорядок.РеквизитДопУпорядочивания
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания,
		|	ВидыКонтактнойИнформации.Наименование";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Счетчик = 0;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.РеквизитДопУпорядочивания = Выборка.РеквизитДопУпорядочивания + Счетчик;
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
	КонецЕсли; 

КонецПроцедуры

Процедура ОбновитьВидыКонтактнойИнформацииПоПорядку(Порядок = Неопределено) Экспорт
	
	// EMailФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	СвойстваВидаКИ.Подсказка = НСтр("ru='Адрес личной электронной почты';uk='Адреса особистої електронної пошти'");
	СвойстваВидаКИ.НастройкиПроверки.ПроверятьКорректность = Истина;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 1;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	// ТелефонДомашнийФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Истина;
	СвойстваВидаКИ.РедактированиеТолькоВДиалоге = Ложь;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 2;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	// ТелефонРабочийФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Истина;
	СвойстваВидаКИ.РедактированиеТолькоВДиалоге = Ложь;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	СвойстваВидаКИ.РазрешитьВводНесколькихЗначений = Ложь;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 3;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	// АдресПоПропискеФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Ложь;
	СвойстваВидаКИ.РедактированиеТолькоВДиалоге = Истина;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.АдресТолькоРоссийский = Истина;
	СвойстваВидаКИ.НастройкиПроверки.ПроверятьКорректность = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.СкрыватьНеактуальныеАдреса = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ВключатьСтрануВПредставление = Истина;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 4;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	// АдресМестаПроживанияФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Ложь;
	СвойстваВидаКИ.РедактированиеТолькоВДиалоге = Истина;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.АдресТолькоРоссийский = Истина;
	СвойстваВидаКИ.НастройкиПроверки.ПроверятьКорректность = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.СкрыватьНеактуальныеАдреса = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ВключатьСтрануВПредставление = Истина;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 5;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	// АдресЗаПределамиУкраиныФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиУкраиныФизическиеЛица;
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Истина;
	СвойстваВидаКИ.РедактированиеТолькоВДиалоге = Истина;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.АдресТолькоРоссийский = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ПроверятьКорректность = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.СкрыватьНеактуальныеАдреса = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ВключатьСтрануВПредставление = Истина;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 6;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	// АдресДляИнформированияФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Ложь;
	СвойстваВидаКИ.РедактированиеТолькоВДиалоге = Истина;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.АдресТолькоРоссийский = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ПроверятьКорректность = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.СкрыватьНеактуальныеАдреса = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ВключатьСтрануВПредставление = Истина;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 7;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
КонецПроцедуры

#КонецОбласти


#Область ПолучениеРабочихМестСотрудниковОрганизации

Функция ПараметрыДляЗапросВТРабочиеМестаСотрудников() Экспорт
		
	ПараметрыПолученияРабочихМестСотрудников = Новый Структура;
	ПараметрыПолученияРабочихМестСотрудников.Вставить("Организация");
	ПараметрыПолученияРабочихМестСотрудников.Вставить("Подразделение");
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ОтбиратьПоГоловнойОрганизации", Ложь);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ИсключаемыйРегистратор");
	ПараметрыПолученияРабочихМестСотрудников.Вставить("Отборы");
	
	Возврат ПараметрыПолученияРабочихМестСотрудников;
	
КонецФункции

Функция ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, Параметры, МенеджерВременныхТаблиц) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		СоздаватьПромежуточныеТаблицы = (МенеджерВременныхТаблиц <> Неопределено);
	
		// Инициализация параметров получения таблицы регистра.
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			Параметры.ИмяВТСотрудникиПериоды,
			Параметры.ИмяПоляСотрудник);
			
		// Описание переименований полей таблицы отборов.
		Если Не ПустаяСтрока(Параметры.ИмяПоляСотрудник) Тогда
			ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", Параметры.ИмяПоляСотрудник);
		КонецЕсли; 
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаНачала", Параметры.ИмяПоляНачалоПериода);
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаОкончания", Параметры.ИмяПоляОкончаниеПериода);
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
		
		// Установка отбора по организации.
		ПараметрыОтбораПоОрганизациям = КадровыйУчет.ПараметрыОтбораПоОрганизациям(Параметры);
		Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.Организации) Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ГоловнаяОрганизация", "В", ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации);
			Если Не Параметры.ОтбиратьПоГоловнойОрганизации Тогда
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Организация", "В", ПараметрыОтбораПоОрганизациям.Организации);
			КонецЕсли;
		КонецЕсли; 
		
		// Установка отбора по подразделению.
		Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Подразделение", " В ИЕРАРХИИ ", Параметры.Подразделение);
		КонецЕсли; 
		
		// Дополнение таблицы регистра значениями на начало периода.
		ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
		
		// Исключение из записей на начало периода ранее уволенных.
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода, "ВидСобытия", " <> ", Перечисления.ВидыКадровыхСобытий.Увольнение);
		
		Если ЗначениеЗаполнено(Параметры.ИсключаемыйРегистратор) Тогда
			
			Если ТипЗнч(Параметры.ИсключаемыйРегистратор) = Тип("Массив")
				Или ТипЗнч(Параметры.ИсключаемыйРегистратор) = Тип("ФиксированныйМассив")
				Или ТипЗнч(Параметры.ИсключаемыйРегистратор) = Тип("СписокЗначений") Тогда
				
				ВидСравненияРегистратора = "НЕ В";
				
			Иначе
				ВидСравненияРегистратора = "<>";
			КонецЕсли;
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыПостроения.Отборы,
				"Регистратор",
				ВидСравненияРегистратора,
				Параметры.ИсключаемыйРегистратор);
				
		КонецЕсли; 
		
		ИмяВТКадроваяИсторияСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТКадроваяИсторияСотрудников");
		
		Если СоздаватьПромежуточныеТаблицы Тогда
			
			// Получение готового запроса
			Запрос = ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
				"КадроваяИсторияСотрудников",
				МенеджерВременныхТаблиц,
				ТолькоРазрешенные,
				ОписаниеФильтра,
				ПараметрыПостроения,
				ИмяВТКадроваяИсторияСотрудников);
				
			Запрос = Новый Запрос;
				
		Иначе
			
			// Получение готового запроса
			Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
				"КадроваяИсторияСотрудников",
				ТолькоРазрешенные,
				ОписаниеФильтра,
				ПараметрыПостроения,
				ИмяВТКадроваяИсторияСотрудников);
				
		КонецЕсли;
		
		ПоляВТ = КадровыйУчет.ПоляВТРабочиеМестаСотрудников();
		
		ТекстЗапроса = "";
		ДобавитьЗапятую = Ложь;
		Для каждого ОписаниеПоля Из ПоляВТ Цикл
			
			Если ДобавитьЗапятую Тогда
				ТекстЗапроса = ТекстЗапроса + ",";
			Иначе
				ДобавитьЗапятую = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ОписаниеПоля.Значение) Тогда
				ПутьКДанным = "КадроваяИсторияСотрудников." + ОписаниеПоля.Ключ
			Иначе
				ПутьКДанным = ОписаниеПоля.Значение;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + ПутьКДанным + " КАК " + ОписаниеПоля.Ключ;
				
		КонецЦикла;
			
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.ПериодЗаписи,
			|" + ТекстЗапроса + "
			|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|{ГДЕ
			|	КадроваяИсторияСотрудников.Сотрудник.*,
			|	КадроваяИсторияСотрудников.ГоловнаяОрганизация.*,
			|	КадроваяИсторияСотрудников.Организация.*,
			|	КадроваяИсторияСотрудников.Подразделение.*,
			|	КадроваяИсторияСотрудников.ФизическоеЛицо.*}";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТКадроваяИсторияСотрудников", ИмяВТКадроваяИсторияСотрудников);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТРабочиеМестаСотрудников", ИмяВТРабочиеМестаСотрудников);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапроса);
		
	Иначе
		
		Запрос = Новый Запрос;
	
		УсловияОтбора = "";
		
		ПараметрыОтбораПоОрганизациям = КадровыйУчет.ПараметрыОтбораПоОрганизациям(Параметры);
		Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.Организации) Тогда
			
			Если Параметры.ОтбиратьПоГоловнойОрганизации Тогда
				УсловияОтбора = "ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация В &ТекущиеКадровыеДанныеСотрудниковОрганизации";
				ТекущиеКадровыеДанныеСотрудниковОрганизации = ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации;
			Иначе
				УсловияОтбора = "ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация В &ТекущиеКадровыеДанныеСотрудниковОрганизации";
				ТекущиеКадровыеДанныеСотрудниковОрганизации = ПараметрыОтбораПоОрганизациям.Организации;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ТекущиеКадровыеДанныеСотрудниковОрганизации", ТекущиеКадровыеДанныеСотрудниковОрганизации);
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			УсловияОтбора = ?(ПустаяСтрока(УсловияОтбора), "", УсловияОтбора + Символы.ПС + "	И ") + "ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В ИЕРАРХИИ (&ТекущиеКадровыеДанныеСотрудниковПодразделение)";
			Запрос.УстановитьПараметр("ТекущиеКадровыеДанныеСотрудниковПодразделение", Параметры.Подразделение);
		КонецЕсли; 
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема > СотрудникиПериоды.НачалоПериода
			|			ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема
			|		ИНАЧЕ СотрудникиПериоды.НачалоПериода
			|	КОНЕЦ КАК Период,
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК Организация,
			|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение КАК Подразделение,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК Должность,
			|	1 КАК КоличествоСтавок,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости КАК ВидЗанятости,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия
			|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ПО СотрудникиПериоды.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
			|			И СотрудникиПериоды.ОкончаниеПериода >= ТекущиеКадровыеДанныеСотрудников.ДатаПриема
			|			И (ТекущиеКадровыеДанныеСотрудников.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1))
			|			И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
			|				ИЛИ СотрудникиПериоды.НачалоПериода <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
			|					И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > ТекущиеКадровыеДанныеСотрудников.ДатаПриема)
			|			И (ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
			|			И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))
			|ГДЕ
			|	&УсловияОтбора
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДОБАВИТЬКДАТЕ(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ, 1),
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность,
			|	1,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ПО СотрудникиПериоды.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
			|			И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > ТекущиеКадровыеДанныеСотрудников.ДатаПриема)
			|			И СотрудникиПериоды.НачалоПериода <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
			|			И СотрудникиПериоды.ОкончаниеПериода >= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
			|			И (ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
			|			И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))
			|ГДЕ
			|	&УсловияОтбора";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРабочиеМестаСотрудников", ИмяВТРабочиеМестаСотрудников);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды",  Параметры.ИмяВТСотрудникиПериоды);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.Сотрудник", "СотрудникиПериоды." + Параметры.ИмяПоляСотрудник);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.НачалоПериода", "СотрудникиПериоды." + Параметры.ИмяПоляНачалоПериода);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ОкончаниеПериода", "СотрудникиПериоды." + Параметры.ИмяПоляОкончаниеПериода);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияОтбора", ?(ПустаяСтрока(УсловияОтбора), "(ИСТИНА)", УсловияОтбора));
		
	КонецЕсли;
		
	Возврат Запрос;
	
КонецФункции

Функция ПоляВТРабочиеМестаСотрудников() Экспорт
	
	ПоляВТРабочиеМеста = Новый Структура;
	ПоляВТРабочиеМеста.Вставить("Период");
	ПоляВТРабочиеМеста.Вставить("ГоловнаяОрганизация");
	ПоляВТРабочиеМеста.Вставить("Организация");
	ПоляВТРабочиеМеста.Вставить("Сотрудник");
	ПоляВТРабочиеМеста.Вставить("ФизическоеЛицо");
	ПоляВТРабочиеМеста.Вставить("Подразделение");
	ПоляВТРабочиеМеста.Вставить("Должность");
	ПоляВТРабочиеМеста.Вставить("КоличествоСтавок", "1");
	ПоляВТРабочиеМеста.Вставить("ВидЗанятости");
	ПоляВТРабочиеМеста.Вставить("ВидСобытия");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		ПоляВТРабочиеМеста.Вставить("ДокументОснование", "КадроваяИсторияСотрудников.Регистратор");
	КонецЕсли; 
	
	Возврат ПоляВТРабочиеМеста;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииФормированияОтчетов

Функция ДополнительныеСведенияУнифицированнойФормыТ2(СтрокиДанных, ДатаОтчета, КлючВарианта) Экспорт
	
	ДополнительныеСведения = Новый Соответствие;
	ДанныеЗаполненияКадровойИстории = Новый Соответствие;
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТаблицаСотрудников = Новый ТаблицаЗначений;
		ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		
		Для каждого СтрокаСотрудника Из СтрокиДанных Цикл
			НоваяСтрокаТаблицыСотрудников = ТаблицаСотрудников.Добавить();
			НоваяСтрокаТаблицыСотрудников.Сотрудник = СтрокаСотрудника.РабочееМестоСотрудник;
			НоваяСтрокаТаблицыСотрудников.ДатаОкончания = СтрокаСотрудника.ПараметрыДанныхПериод;
		КонецЦикла;
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаСотрудников);
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВидСобытия", "<>", "ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)");
	
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
			"КадроваяИсторияСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра,
			ПараметрыПостроения);
		
		ОписанияНачислений = КадровыйУчет.ОписанияСоставаНачисленийПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТКадроваяИсторияСотрудников");
	
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
			|	КадроваяИсторияСотрудников.Должность КАК Должность,
			|	КадроваяИсторияСотрудников.Регистратор.Номер КАК РегистраторНомер,
			|	КадроваяИсторияСотрудников.Регистратор.Дата КАК РегистраторДата
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	Период";
		
		ВыборкаКадроваяИстория = Запрос.Выполнить().Выбрать();
		Пока ВыборкаКадроваяИстория.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			ДанныеЗаполненияКадровойИсторииПоСотруднику = Новый Массив;
			ОписанияСотрудника = ОписанияНачислений.Получить(ВыборкаКадроваяИстория.Сотрудник);
			
			Пока ВыборкаКадроваяИстория.Следующий() Цикл
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("ДатаПеревода", ВыборкаКадроваяИстория.Период);
				Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ВыборкаКадроваяИстория.Подразделение) Тогда
					СтруктураСтроки.Вставить("ПодразделениеПеревода", ВыборкаКадроваяИстория.Подразделение.ПолноеНаименование());
				Иначе
					СтруктураСтроки.Вставить("ПодразделениеПеревода", ВыборкаКадроваяИстория.Подразделение);
				КонецЕсли; 
				СтруктураСтроки.Вставить("ДолжностьПеревода", ВыборкаКадроваяИстория.Должность);
				
				Если ОписанияСотрудника <> Неопределено Тогда
					ОписанияПериода = ОписанияСотрудника.Получить(ВыборкаКадроваяИстория.Период);
				КонецЕсли; 
				
				Если ОписанияПериода = Неопределено Тогда
					ОписанияПериода = ОписаниеСоставаНачислений();
				КонецЕсли; 
				
				СтруктураСтроки.Вставить("ТарифнаяСтавка", ПредставлениеОкладаИНадбавок(ОписанияПериода));
				
				Если НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
					НомерПриказа = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаКадроваяИстория.РегистраторНомер, Истина, Истина);
				Иначе
					НомерПриказа = ВыборкаКадроваяИстория.РегистраторНомер;
				КонецЕсли;
			
				СтруктураСтроки.Вставить("ОснованиеПеревода", НСтр("ru='Пр';uk='Пр'") + ". № "
						+ НомерПриказа + " " + НСтр("ru='от';uk='від'") + " " + Формат(ВыборкаКадроваяИстория.РегистраторДата, "ДЛФ=D"));
				
				ДанныеЗаполненияКадровойИсторииПоСотруднику.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
			ДанныеЗаполненияКадровойИстории.Вставить(ВыборкаКадроваяИстория.Сотрудник, ДанныеЗаполненияКадровойИсторииПоСотруднику);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДополнительныеСведения.Вставить("ДанныеЗаполненияКадровойИстории", ДанныеЗаполненияКадровойИстории);
	
	// Отпуска
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", СтрокиДанных.ВыгрузитьКолонку("РабочееМестоСотрудник"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отпуск.Сотрудник КАК Сотрудник,
		|	Отпуск.Номер КАК НомерПриказа,
		|	Отпуск.Дата КАК ДатаПриказа,
		|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаС,
		|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаПо,
		|	Отпуск.КоличествоДнейОсновногоОтпуска КАК ДнейОтпуска,
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийГодС,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск КАК РабочийГодПо,
		|	Отпуск.Основание
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Проведен
		|	И Отпуск.Сотрудник В(&Сотрудники)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	ДатаС";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеЗаполнения = Новый Соответствие;
		ВыборкаОтпуска = РезультатЗапроса.Выбрать();
		Пока ВыборкаОтпуска.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			ДанныеЗаполненияПоСотруднику = Новый Массив;
			Пока ВыборкаОтпуска.Следующий() Цикл
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("ВидОтпуска", НСтр("ru='Основной';uk='Основний'"));
				СтруктураСтроки.Вставить("ДатаС", ВыборкаОтпуска.ДатаС);
				СтруктураСтроки.Вставить("ДатаПо", ВыборкаОтпуска.ДатаПо);
				СтруктураСтроки.Вставить("ДнейОтпуска", ВыборкаОтпуска.ДнейОтпуска);
				СтруктураСтроки.Вставить("РабочийГодС", ВыборкаОтпуска.РабочийГодС);
				СтруктураСтроки.Вставить("РабочийГодПо", ВыборкаОтпуска.РабочийГодПо);
				СтруктураСтроки.Вставить("ОснованиеОтпуска", "Пр.№ "+ СокрЛП(ВыборкаОтпуска.НомерПриказа) +" от "
						+ Формат(ВыборкаОтпуска.ДатаПриказа, "ДЛФ=D") + " " + ВыборкаОтпуска.Основание);
						
				ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
			ДанныеЗаполнения.Вставить(ВыборкаОтпуска.Сотрудник, ДанныеЗаполненияПоСотруднику);
			
		КонецЦикла;
			
		ДополнительныеСведения.Вставить("ДанныеЗаполненияОтпуска", ДанныеЗаполнения);

	КонецЕсли; 
	
	Возврат ДополнительныеСведения;
	
КонецФункции

Функция СформироватьЗапросДляП1(МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Если ПечатьПоЭлементуСправочника
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Возврат СформироватьПоЭлементамСправочникаЗапросДляП1П4(МассивОбъектов, "ДатаПриема");
		
	КонецЕсли; 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчет.СоздатьВТДанныеДокументовПриемНаРаботу(МенеджерВременныхТаблиц, МассивОбъектов);
	
	Возврат СформироватьПоДокументамЗапросДляП1П4(МенеджерВременныхТаблиц, МассивОбъектов, Истина);
	
КонецФункции

Функция СформироватьЗапросДляПеревод(МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Если ПечатьПоЭлементуСправочника
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Возврат СформироватьПоЭлементамСправочникаЗапросДляПеревод(МассивОбъектов);
		
	КонецЕсли; 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчет.СоздатьВТДанныеДокументовКадровыхПеремещений(МенеджерВременныхТаблиц, МассивОбъектов);
	
	Возврат СформироватьПоДокументамЗапросДляПеревод(МенеджерВременныхТаблиц, МассивОбъектов);
	
КонецФункции

Функция СформироватьЗапросДляТ6(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Отпуск.Сотрудник,
		|	Отпуск.ДатаНачалаСобытия КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	Отпуск.Сотрудник,
		|	Отпуск.ДатаНачалаСобытия";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Организация,Подразделение,Должность");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Период,
	|	КадровыеДанныеСотрудников.Сотрудник,
	|	КадровыеДанныеСотрудников.ФизическоеЛицо,
	|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация КАК Справочник.Организации) КАК Организация,
	|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
	|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
	|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Должность КАК Справочник.Должности) КАК Должность
	|ПОМЕСТИТЬ ВТДанныеДляПечати
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляПечати.Сотрудник,
	|	Отпуск.Организация КАК Организация,
	//|	ВТДанныеДляПечати.Организация.КодПоОКПО КАК КодПоОКПО,
	|	ВТДанныеДляПечати.Работник,
	|	Отпуск.Номер КАК НомерДок,
	|	Отпуск.Дата КАК ДатаДок,
	|	ВТДанныеДляПечати.ТабельныйНомер,
	|	ЕСТЬNULL(ВТДанныеДляПечати.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(ВТДанныеДляПечати.Должность.Наименование, """") КАК Должность,
	|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачала,
	|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончания,
	|	Отпуск.КоличествоДнейОсновногоОтпуска КАК Продолжительность,
	|	ИСТИНА КАК ЭтоОсновнойОтпуск,
	|	Отпуск.Ссылка КАК Ссылка,
	|	Отпуск.ДатаНачалаСобытия,
	|	Отпуск.Дата КАК Дата,
	|	Отпуск.Руководитель КАК Руководитель,
	|	Отпуск.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	Отпуск.Основание
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	ВТДанныеДляПечати КАК ВТДанныеДляПечати
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК Отпуск
	|		ПО ВТДанныеДляПечати.Сотрудник = Отпуск.Сотрудник
	|			И ВТДанныеДляПечати.Период = Отпуск.ДатаНачалаСобытия
	|ГДЕ
	|	Отпуск.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ИменаПолей = Новый Массив;
	ИменаПолей.Добавить("Руководитель");
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолей, "ВТДанныеДокументов");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Сотрудник,
		|	ДанныеДокументов.Организация,
		|	ВЫРАЗИТЬ(ДанныеДокументов.Организация КАК Справочник.Организации).НаименованиеПолное КАК НазваниеОрганизации,
		//|	ДанныеДокументов.КодПоОКПО,
		|	ДанныеДокументов.Работник,
		|	ДанныеДокументов.НомерДок,
		|	ДанныеДокументов.ДатаДок,
		|	ДанныеДокументов.ТабельныйНомер,
		|	ДанныеДокументов.Подразделение,
		|	ДанныеДокументов.Должность,
		|	ДанныеДокументов.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ДанныеДокументов.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ДанныеДокументов.ДатаНачала,
		|	ДанныеДокументов.ДатаОкончания,
		|	ДанныеДокументов.Продолжительность,
		|	ДанныеДокументов.ЭтоОсновнойОтпуск,
		|	ДанныеДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокументов.ДатаНачалаСобытия,
		|	ДанныеДокументов.Дата,
		|	ДанныеДокументов.Руководитель,
		|	ДанныеДокументов.ДолжностьРуководителя,
		|	ДанныеДокументов.Основание,
		|	ФИОРуководителя.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Дата = ФИОРуководителя.Дата
		|			И ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
		|ИТОГИ ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;	
	
КонецФункции

Функция СформироватьЗапросДляП4(МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
		
	Если ПечатьПоЭлементуСправочника
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Возврат СформироватьПоЭлементамСправочникаЗапросДляП1П4(МассивОбъектов, "ДатаУвольнения", Истина);
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчет.СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов);
	
	Возврат СформироватьПоДокументамЗапросДляП1П4(МенеджерВременныхТаблиц, МассивОбъектов, Ложь);
	
КонецФункции	

Функция СформироватьЗапросДляП3(МассивОбъектов) Экспорт
	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчет.СоздатьВТДанныеДокументовОтпусков(МенеджерВременныхТаблиц, МассивОбъектов);
	
	Возврат СформироватьПоДокументамЗапросДляП3(МенеджерВременныхТаблиц, МассивОбъектов);
	
КонецФункции

Функция СформироватьПоДокументамЗапросДляП3(МенеджерВременныхТаблиц, МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
	Запрос.МенеджерВременныхТаблиц,
	"ВТДанныеДокументов");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
	ОписательВременныхТаблиц,
	Истина,
	КадровыйУчет.КадровыеДанныеДляПечатиКадровыхПриказов());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.*,
	|	ВТКадровыеДанныеСотрудников.Должность,
	|	ВТКадровыеДанныеСотрудников.Подразделение КАК ПодразделениеРаботника,
	|	ВТКадровыеДанныеСотрудников.ФИОПолные КАК Работник
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ПО ДанныеДокументов.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник" ;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса
	
КонецФункции	


Процедура СоздатьВТДанныеДокументовПриемНаРаботу(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.ДатаПриема КАК Дата,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.ДатаПриема КАК Период,
		|	ПриемНаРаботу.Номер КАК НомерДок,
		|	ПриемНаРаботу.Дата КАК ДатаДок,
		|	ПриемНаРаботу.Руководитель,
		|	ПриемНаРаботу.ДолжностьРуководителя,
		|	ПриемНаРаботу.УсловияПриема,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаЗавершенияТрудовогоДоговора,
		|	0 КАК ДлительностьИспытательногоСрока
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Проведен
		|	И ПриемНаРаботу.Ссылка В(&МассивОбъектов)";
		
	Если ПечатьПоЭлементуСправочника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПриемНаРаботу.Ссылка В(&МассивОбъектов)", "ПриемНаРаботу.Сотрудник В(&МассивОбъектов)");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовКадровыхПеремещений(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПечатьПоЭлементуСправочника Тогда
		
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		
		Для каждого Сотрудник Из МассивОбъектов Цикл
			ИзмеренияДаты.Добавить().Сотрудник = Сотрудник;
		КонецЦикла;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВидСобытия", "=", Перечисления.ВидыКадровыхСобытий.Перемещение);
		
		ЗапросКадровыхПереводов = ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"КадроваяИсторияСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			ПараметрыПостроения,
			"ВТКадроваяИсторияСотрудников");
		
		ЗапросКадровыхПереводов = ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеНачисления",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			,
			"ВТПлановыеНачисления");
		
		ЗапросКадровыхПереводов = ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеАвансы",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			,
			"ВТПлановыеАвансы");
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КадроваяИсторияСотрудников.Период,
			|	КадроваяИсторияСотрудников.Регистратор,
			|	КадроваяИсторияСотрудников.Сотрудник
			|ПОМЕСТИТЬ ВТКадровыеПереводы
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПлановыеНачисления.Период,
			|	ПлановыеНачисления.Регистратор,
			|	ПлановыеНачисления.Сотрудник
			|ИЗ
			|	ВТПлановыеНачисления КАК ПлановыеНачисления
			|ГДЕ
			|	ПлановыеНачисления.Регистратор ССЫЛКА Документ.КадровыйПеревод
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПлановыеАвансы.Период,
			|	ПлановыеАвансы.Регистратор,
			|	ПлановыеАвансы.Сотрудник
			|ИЗ
			|	ВТПлановыеАвансы КАК ПлановыеАвансы
			|ГДЕ
			|	ПлановыеАвансы.Регистратор ССЫЛКА Документ.КадровыйПеревод
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(КадровыеПереводы.Период) КАК Период,
			|	КадровыеПереводы.Сотрудник
			|ПОМЕСТИТЬ ВТПериодыПереводов
			|ИЗ
			|	ВТКадровыеПереводы КАК КадровыеПереводы
			|
			|СГРУППИРОВАТЬ ПО
			|	КадровыеПереводы.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадровыеПереводы.Регистратор
			|ИЗ
			|	ВТПериодыПереводов КАК ПериодыПереводов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеПереводы КАК КадровыеПереводы
			|		ПО ПериодыПереводов.Период = КадровыеПереводы.Период
			|			И ПериодыПереводов.Сотрудник = КадровыеПереводы.Сотрудник";
		
		Запрос.Параметры.Вставить("МассивОбъектов", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"));
		
	Иначе
		Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.ДатаНачала КАК Дата,
		|	КадровыйПеревод.Сотрудник КАК Сотрудник,
		|	КадровыйПеревод.ДатаНачала КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	КадровыйПеревод.Номер КАК НомерДок,
		|	КадровыйПеревод.Дата КАК ДатаДок,
		|	КадровыйПеревод.Руководитель,
		|	КадровыйПеревод.ДолжностьРуководителя,
		|	КадровыйПеревод.ФизическоеЛицо,
		|	КадровыйПеревод.ОснованиеПеревода,
		|	КадровыйПеревод.ПричинаПеревода
		|ПОМЕСТИТЬ ВТДанныеДокументовКадровыхПеремещений
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.Ссылка В(&МассивОбъектов)
		|	И КадровыйПеревод.Проведен";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Увольнение.Ссылка,
		|	Увольнение.ДатаУвольнения КАК Дата,
		|	Увольнение.Сотрудник,
		|	Увольнение.ДатаУвольнения КАК Период,
		|	Увольнение.Номер КАК НомерДок,
		|	Увольнение.Дата КАК ДатаДок,
		|	Увольнение.СтатьяКЗоТ,
		|	ВЫБОР
		|		КОГДА Представления.Использовать
		|			ТОГДА Представления.ТекстОснования
		|		ИНАЧЕ Увольнение.СтатьяКЗоТ.ТекстОснования
		|	КОНЕЦ КАК ТекстОснования,
		|	Увольнение.Руководитель,
		|	Увольнение.ДолжностьРуководителя,
		|	Увольнение.ОснованиеУвольнения
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредставленияОснованийУвольнения КАК Представления
		|		ПО Увольнение.СтатьяКЗоТ = Представления.Объект
		|ГДЕ
		|	Увольнение.Проведен
		|	И Увольнение.Ссылка В(&МассивОбъектов)";
	
	Если ПечатьПоЭлементуСправочника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Увольнение.Ссылка В(&МассивОбъектов)", "Увольнение.Сотрудник В(&МассивОбъектов)");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СформироватьПоЭлементамСправочникаЗапросДляП1П4(МассивОбъектов, ИмяРеквизитаДатаСобытия, ДанныеДляП4 = Ложь)

	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивОбъектов, ИмяРеквизитаДатаСобытия, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("КадровыеДанные", КадровыеДанные);
	Запрос.Параметры.Вставить("ДатаСобытия", ТекущаяДатаСеанса());
	Запрос.Параметры.Вставить("ДанныеДляП4", ДанныеДляП4);

	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	ВЫБОР КОГДА Сотрудники." + ИмяРеквизитаДатаСобытия + " = ДАТАВРЕМЯ(1,1,1) ТОГДА &ДатаСобытия ИНАЧЕ Сотрудники." + ИмяРеквизитаДатаСобытия + " КОНЕЦ КАК Период
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	&КадровыеДанные КАК Сотрудники";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТФизическиеЛица");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Организация,Подразделение,Должность,ДатаПриема,ДатаУвольнения,ТабельныйНомер,ФИОПолные,Пол");
	
	Запрос.УстановитьПараметр("НачисленияСотрудников",
		КадровыйУчет.ТаблицаНачисленийСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТФизическиеЛица"));
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанныеСотрудников.Организация,
		|	КадровыеДанныеСотрудников.Период
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	ТаблицаОтветственныхЛиц = Новый ТаблицаЗначений;
	ТаблицаОтветственныхЛиц.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОтветственныхЛиц.Колонки.Добавить("РуководительРасшифровкаПодписи", Новый ОписаниеТипов("Строка"));
	
	Сведения = Новый СписокЗначений;
	// Получаем данные из глобальной общей функции.
	Сведения.Добавить("", "ФИОРук");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Организация) Тогда
			
			НоваяСтрокаОтветственныхЛиц = ТаблицаОтветственныхЛиц.Добавить();
			НоваяСтрокаОтветственныхЛиц.Организация = Выборка.Организация;
			
			ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, Выборка.Период, Сведения);
			ОргСведения.Свойство("ФИОРук", 		НоваяСтрокаОтветственныхЛиц.РуководительРасшифровкаПодписи);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаОтветственныхЛиц", ТаблицаОтветственныхЛиц);
	
	ИмяВТНачисления = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТНачисления");
	ИмяВТОтветственныеЛица = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтветственныеЛица");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Период,
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.ТарифнаяСтавка,
		|	НачисленияСотрудников.Надбавка
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&НачисленияСотрудников КАК НачисленияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОтветственныхЛиц.Организация,
		|	ТаблицаОтветственныхЛиц.РуководительРасшифровкаПодписи
		|ПОМЕСТИТЬ ВТОтветственныеЛица
		|ИЗ
		|	&ТаблицаОтветственныхЛиц КАК ТаблицаОтветственныхЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|ГДЕ
		|	КадровыеДанныеСотрудников.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|ГДЕ
		|	КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|	И &ДанныеДляТ8
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Ссылка,
		|	КадровыеДанныеСотрудников.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		//|	КадровыеДанныеСотрудников.Организация.КодПоОКПО,
		|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
		|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудников.Должность.Наименование КАК Должность,
		|	ЕСТЬNULL(Начисления.ТарифнаяСтавка, 0) КАК ТарифнаяСтавка,
		|	КадровыеДанныеСотрудников.Пол КАК Пол,
		|	ЕСТЬNULL(Начисления.Надбавка, """") КАК Надбавка,
		|	"""" КАК ТекстОснования,
		|	ОтветственныеЛица.РуководительРасшифровкаПодписи
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственныеЛица КАК ОтветственныеЛица
		|		ПО КадровыеДанныеСотрудников.Организация = ОтветственныеЛица.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО КадровыеДанныеСотрудников.Сотрудник = Начисления.Сотрудник
		|			И КадровыеДанныеСотрудников.Период = Начисления.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Работник";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтветственныеЛица", ИмяВТОтветственныеЛица);
	
	РезультатЗапросов = Запрос.ВыполнитьПакет();
	
	Если Не РезультатЗапросов[РезультатЗапросов.Количество() - 3].Пустой() Тогда
		
		Выборка = РезультатЗапросов[РезультатЗапросов.Количество() - 3].Выбрать();
		Выборка.Следующий();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='С сотрудником %1 не оформлен трудовой договор';uk='З співробітником %1 не оформлений трудовий договір'"),
			Выборка.Сотрудник);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли; 
	
	Если Не РезультатЗапросов[РезультатЗапросов.Количество() - 2].Пустой() Тогда
		
		Выборка = РезультатЗапросов[РезультатЗапросов.Количество() - 2].Выбрать();
		Выборка.Следующий();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='У сотрудника %1 не заполнена дата увольнения';uk='У співробітника %1 не заповнено дата звільнення'"),
			Выборка.Сотрудник);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли; 
	
	Возврат РезультатЗапросов[РезультатЗапросов.Количество() - 1];	
	
КонецФункции	

Функция СформироватьПоЭлементамСправочникаЗапросДляПеревод(МассивОбъектов)

	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("МассивСотрудников", МассивОбъектов);
	Запрос.Параметры.Вставить("ДатаСреза", ТекущаяДатаСеанса());

	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	&ДатаСреза КАК Период,
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудников)";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц,
		"ВТФизическиеЛица");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Организация,Подразделение,Должность,ФиоПолные,ДатаПриема");
	
	Запрос.УстановитьПараметр("НачисленияСотрудников",
		КадровыйУчет.ТаблицаНачисленийСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТФизическиеЛица"));
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанныеСотрудников.Организация,
		|	КадровыеДанныеСотрудников.Период
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	ТаблицаОтветственныхЛиц = Новый ТаблицаЗначений;
	ТаблицаОтветственныхЛиц.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОтветственныхЛиц.Колонки.Добавить("РуководительРасшифровкаПодписи", Новый ОписаниеТипов("Строка"));
	
	Сведения = Новый СписокЗначений;
	// Получаем данные из глобальной общей функции.
	Сведения.Добавить("", "ФИОРук");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Организация) Тогда
			
			НоваяСтрокаОтветственныхЛиц = ТаблицаОтветственныхЛиц.Добавить();
			НоваяСтрокаОтветственныхЛиц.Организация = Выборка.Организация;
			
			ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, Выборка.Период, Сведения);
			ОргСведения.Свойство("ФИОРук", 		НоваяСтрокаОтветственныхЛиц.РуководительРасшифровкаПодписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаОтветственныхЛиц", ТаблицаОтветственныхЛиц);
	
	ИмяВТНачисления = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТНачисления");
	ИмяВТОтветственныеЛица = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтветственныеЛица");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Период,
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.ТарифнаяСтавка,
		|	НачисленияСотрудников.Надбавка
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&НачисленияСотрудников КАК НачисленияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОтветственныхЛиц.Организация,
		|	ТаблицаОтветственныхЛиц.РуководительРасшифровкаПодписи
		|ПОМЕСТИТЬ ВТОтветственныеЛица
		|ИЗ
		|	&ТаблицаОтветственныхЛиц КАК ТаблицаОтветственныхЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|ГДЕ
		|	КадровыеДанныеСотрудников.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	Организации.НаименованиеПолное КАК НазваниеОрганизации,
		//|	Организации.КодПоОКПО,
		|	&ДатаСреза КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	""постоянно"" КАК ВидПеревода,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
		|	Сотрудники.Код КАК ТабельныйНомер,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК НовоеПодразделение,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.Должность.Наименование, """") КАК НоваяДолжность,
		|	ЕСТЬNULL(Начисления.ТарифнаяСтавка, 0) КАК ТарифнаяСтавка,
		|	ОтветственныеЛица.РуководительРасшифровкаПодписи,
		|	ЕСТЬNULL(Начисления.Надбавка, """") КАК Надбавка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственныеЛица КАК ОтветственныеЛица
		|			ПО КадровыеДанныеСотрудников.Организация = ОтветственныеЛица.Организация
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|			ПО КадровыеДанныеСотрудников.Сотрудник = Начисления.Сотрудник
		|				И КадровыеДанныеСотрудников.Период = Начисления.Период
		|		ПО Сотрудники.Ссылка = КадровыеДанныеСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (КадровыеДанныеСотрудников.Организация = Организации.Ссылка)
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудников)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Работник";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтветственныеЛица", ИмяВТОтветственныеЛица);
	
	Запрос.Параметры.Вставить("МассивСотрудников", МассивОбъектов);
	Запрос.Параметры.Вставить("ДатаСреза", ТекущаяДатаСеанса());
	
	РезультатЗапросов = Запрос.ВыполнитьПакет();
	
	Если Не РезультатЗапросов[РезультатЗапросов.Количество() - 2].Пустой() Тогда
		
		Выборка = РезультатЗапросов[РезультатЗапросов.Количество() - 2].Выбрать();
		Выборка.Следующий();
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='С сотрудником %1 не оформлен трудовой договор';uk='З співробітником %1 не оформлений трудовий договір'"),
			Выборка.Сотрудник);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли; 
	
	Возврат РезультатЗапросов[РезультатЗапросов.Количество() - 1];	
	
КонецФункции

Функция СформироватьПоДокументамЗапросДляП1П4(МенеджерВременныхТаблиц, МассивОбъектов, ПечатьТ1)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Если ПечатьПоЭлементуСправочника Тогда
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокументов КАК ВТДанныеДокументов
			|		ПО Сотрудники.Ссылка = ВТДанныеДокументов.Сотрудник
			|ГДЕ
			|	Сотрудники.Ссылка В(&МассивОбъектов)
			|	И ВТДанныеДокументов.Сотрудник ЕСТЬ NULL ";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если ПечатьТ1 Тогда
				
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='По сотруднику %1 не оформлен приказ о приеме';uk='По співробітнику %1 не оформлений наказ про прийом'"),
					Выборка.Сотрудник);
				
			Иначе
				
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='По сотруднику %1 не оформлен приказ об увольнении';uk='По співробітнику %1 не оформлений наказ про звільнення'"),
					Выборка.Сотрудник);
					
			КонецЕсли;
			
			ВызватьИсключение ТекстИсключения;
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("НачисленияСотрудников",
		КадровыйУчет.ТаблицаНачисленийСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТДанныеДокументов"));
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокументов");
		
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц,
		Истина,
		КадровыйУчет.КадровыеДанныеДляПечатиКадровыхПриказов());
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	ИмяВТНачисления = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТНачисления");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Период,
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.ТарифнаяСтавка,
		|	НачисленияСотрудников.Надбавка
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&НачисленияСотрудников КАК НачисленияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация.НаименованиеПолное КАК СТРОКА(1))) = """"
		|			ТОГДА ВЫБОР
		|					КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное КАК СТРОКА(1))) = """"
		|						ТОГДА КадровыеДанныеСотрудников.Организация.Наименование
		|					ИНАЧЕ КадровыеДанныеСотрудников.Организация.НаименованиеСокращенное
		|				КОНЕЦ
		|		ИНАЧЕ КадровыеДанныеСотрудников.Организация.НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
		|	ФИООтветственныхЛиц.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	ЕСТЬNULL(Начисления.ТарифнаяСтавка, 0) КАК ТарифнаяСтавка,
		|	ЕСТЬNULL(Начисления.Надбавка, """") КАК Надбавка,
		|	&КадровыеДанныеСотрудников,
		|	&ДанныеДокументов
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ДанныеДокументов.Период = КадровыеДанныеСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
		|		ПО ДанныеДокументов.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИООтветственныхЛиц.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО ДанныеДокументов.Период = Начисления.Период
		|			И ДанныеДокументов.Сотрудник = Начисления.Сотрудник";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КадровыеДанныеСотрудников", "КадровыеДанныеСотрудников.*");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеДокументов", "ДанныеДокументов.*");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;	
	
КонецФункции

Функция СформироватьПоДокументамЗапросДляПеревод(МенеджерВременныхТаблиц, МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Если ПечатьПоЭлементуСправочника Тогда
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДокументовКадровыхПеремещений КАК ВТДанныеДокументов
			|		ПО Сотрудники.Ссылка = ВТДанныеДокументов.Сотрудник
			|ГДЕ
			|	Сотрудники.Ссылка В(&МассивОбъектов)
			|	И ВТДанныеДокументов.Сотрудник ЕСТЬ NULL ";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По сотруднику %1 нет оформленных приказов о кадровом переводе';uk='По співробітнику %1 немає оформлених наказів про кадрове переведення'"),
				Выборка.Сотрудник);
				
			ВызватьИсключение ТекстИсключения;
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("НачисленияСотрудников",
		КадровыйУчет.ТаблицаНачисленийСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТДанныеДокументовКадровыхПеремещений", "ДатаНачала", , "ДатаОкончания"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Сотрудник,
		|	ДОБАВИТЬКДАТЕ(ДанныеДокументов.ДатаНачала, ДЕНЬ, -1) КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТДанныеДокументовКадровыхПеремещений КАК ДанныеДокументов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТДанныеДокументов.Сотрудник,
		|	ВТДанныеДокументов.ДатаНачала
		|ИЗ
		|	ВТДанныеДокументовКадровыхПеремещений КАК ВТДанныеДокументов";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
		
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц,
		Истина,
		КадровыйУчет.КадровыеДанныеДляПечатиКадровыхПриказов());

	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументовКадровыхПеремещений");
	
	ИмяВТНачисления = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТНачисления");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Период,
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.ТарифнаяСтавка,
		|	НачисленияСотрудников.Надбавка
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&НачисленияСотрудников КАК НачисленияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДанныеДокументов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ""постоянно""
		|		ИНАЧЕ ""временно""
		|	КОНЕЦ КАК ВидПеревода,
		//|	КадровыеДанныеСотрудниковПредыдущие.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудниковПредыдущие.Организация.НаименованиеПолное КАК СТРОКА(1))) = """"
		|			ТОГДА ВЫБОР
		|					КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудниковПредыдущие.Организация.НаименованиеСокращенное КАК СТРОКА(1))) = """"
		|						ТОГДА КадровыеДанныеСотрудниковПредыдущие.Организация.Наименование
		|					ИНАЧЕ КадровыеДанныеСотрудниковПредыдущие.Организация.НаименованиеСокращенное
		|				КОНЕЦ
		|		ИНАЧЕ КадровыеДанныеСотрудниковПредыдущие.Организация.НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	ФИООтветственныхЛиц.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
		|	КадровыеДанныеСотрудниковПредыдущие.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудниковПредыдущие.Должность КАК Должность,
		|	КадровыеДанныеСотрудниковПредыдущие.ТабельныйНомер КАК ТабельныйНомер,
		|	ЕСТЬNULL(КадровыеДанныеСотрудниковНовые.ФИОПолные, """") КАК Работник,
		|	КадровыеДанныеСотрудниковНовые.Подразделение КАК НовоеПодразделение,
		|	КадровыеДанныеСотрудниковНовые.Должность КАК НоваяДолжность,
		|	ЕСТЬNULL(Начисления.ТарифнаяСтавка, 0) КАК ТарифнаяСтавка,
		|	ЕСТЬNULL(Начисления.Надбавка, """") КАК Надбавка,
		|	&ТекстКадровыеДанныеСотрудников,
		|	&ДанныеДокументов
		|ИЗ
		|	ВТДанныеДокументовКадровыхПеремещений КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудниковПредыдущие
		|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудниковПредыдущие.Сотрудник
		|			И ДанныеДокументов.ДатаНачала > КадровыеДанныеСотрудниковПредыдущие.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудниковНовые
		|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудниковНовые.Сотрудник
		|			И ДанныеДокументов.ДатаНачала = КадровыеДанныеСотрудниковНовые.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
		|		ПО ДанныеДокументов.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИООтветственныхЛиц.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО ДанныеДокументов.ДатаНачала = Начисления.Период
		|			И ДанныеДокументов.Сотрудник = Начисления.Сотрудник";
		
	ТекстКадровыеДанныеСотрудников = "";
	Для каждого ИмяКадровыхДанных Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыйУчет.КадровыеДанныеДляПечатиКадровыхПриказов(), ",", , Истина) Цикл
		
		Если ВРег(ИмяКадровыхДанных) = ВРег("Организация")
			Или ВРег(ИмяКадровыхДанных) = ВРег("Подразделение")
			Или ВРег(ИмяКадровыхДанных) = ВРег("Должность")
			Или ВРег(ИмяКадровыхДанных) = ВРег("ФИОПолные") Тогда
			
			Продолжить;
			
		ИначеЕсли ВРег(ИмяКадровыхДанных) = ВРег("ТрудовойДоговорНомер")
				Или ВРег(ИмяКадровыхДанных) = ВРег("ТрудовойДоговорДата") Тогда
				
			ТекстКадровыеДанныеСотрудников = 
				?(ПустаяСтрока(ТекстКадровыеДанныеСотрудников), "", ТекстКадровыеДанныеСотрудников + Символы.ПС)
				+ "КадровыеДанныеСотрудниковПредыдущие." + ИмяКадровыхДанных + " КАК " + ИмяКадровыхДанных + ",";
			
		Иначе
			
			Если ВРег(ИмяКадровыхДанных) = ВРег("РазрядКатегория") Тогда
				
				ТекстКадровыеДанныеСотрудников = 
					?(ПустаяСтрока(ТекстКадровыеДанныеСотрудников), "", ТекстКадровыеДанныеСотрудников + Символы.ПС)
					+ "КадровыеДанныеСотрудниковПредыдущие." + ИмяКадровыхДанных + " КАК " + ИмяКадровыхДанных + ",";
				
			КонецЕсли;
			
			ТекстКадровыеДанныеСотрудников = 
				?(ПустаяСтрока(ТекстКадровыеДанныеСотрудников), "", ТекстКадровыеДанныеСотрудников + Символы.ПС)
				+ "КадровыеДанныеСотрудниковНовые." + ИмяКадровыхДанных + " КАК Новый" + ИмяКадровыхДанных + ",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстКадровыеДанныеСотрудников,", ТекстКадровыеДанныеСотрудников);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеДокументов", "ДанныеДокументов.*");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция КадровыеДанныеДляПечатиКадровыхПриказов() Экспорт
	
	Возврат "ФИОПолные,Пол,ТабельныйНомер,Организация,Подразделение,Должность,ДатаПриема,ДатаУвольнения";
	
КонецФункции

Функция ТаблицаНачисленийСотрудниковПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник, ИмяПоляДатаОкончания) Экспорт
	
	НачисленияСотрудников = Новый ТаблицаЗначений;
	НачисленияСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	НачисленияСотрудников.Колонки.Добавить("ТарифнаяСтавка", Новый ОписаниеТипов("Число"));
	НачисленияСотрудников.Колонки.Добавить("Надбавка", Новый ОписаниеТипов("Строка"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		
		ОписанияНачислений = КадровыйУчет.ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник, ИмяПоляДатаОкончания);
		
		Для каждого ОписаниеСотрудника Из ОписанияНачислений Цикл
			
			Для каждого ОписаниеПериода Из ОписаниеСотрудника.Значение Цикл
				
				НоваяСтрока = НачисленияСотрудников.Добавить();
				
				НоваяСтрока.Сотрудник = ОписаниеСотрудника.Ключ;
				НоваяСтрока.Период = ОписаниеПериода.Ключ;
				НоваяСтрока.ТарифнаяСтавка = ОписаниеПериода.Значение.ОкладТариф;
				НоваяСтрока.Надбавка = ОписаниеПериода.Значение.ОписаниеНадбавок;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НачисленияСотрудников;
	
КонецФункции

Функция ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник, ИмяПоляДатаОкончания) Экспорт
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц,
		ИмяВТСотрудникиПериоды,
		ИмяПоляСотрудник + "," + ИмяПоляПериод);
	
	ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТКадровыеДанныеСотрудников");;
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ТарифнаяСтавка");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Период КАК Период,
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.ТарифнаяСтавка КАК ТарифнаяСтавка
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|ИТОГИ ПО
		|	Сотрудник";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадровыеДанныеСотрудников", ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников);
	
	ОписанияНачисленийПоПериодам = Новый Соответствие;
	
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		
		ОписаниеНачисленийПоПериодам = Новый Соответствие;
		ВыборкаПоПериодам = ВыборкаПоСотрудникам.Выбрать();
		Пока ВыборкаПоПериодам.Следующий() Цикл
			
			ОписаниеСостава = ОписаниеСоставаНачислений();
			ОписаниеСостава.ПоказательОкладТариф = НСтр("ru='Оклад';uk='Оклад'");
			ОписаниеСостава.ОкладТариф = ВыборкаПоПериодам.ТарифнаяСтавка;
			ОписаниеСостава.ОписаниеОклада = ОписаниеСостава.ПоказательОкладТариф
				+ ?(ОписаниеСостава.ОкладТариф = 0, "", ": " + Формат(ОписаниеСостава.ОкладТариф, "ЧДЦ=0"));
			
			ОписаниеНачисленийПоПериодам.Вставить(ВыборкаПоПериодам.Период, ОписаниеСостава);
			
		КонецЦикла;
		
		ОписанияНачисленийПоПериодам.Вставить(ВыборкаПоСотрудникам.Сотрудник, ОписаниеНачисленийПоПериодам);
		
	КонецЦикла;
	
	Возврат ОписанияНачисленийПоПериодам;
	
КонецФункции

Функция ОписаниеСоставаНачислений() Экспорт
	
	ОписаниеСостава = Новый Структура("ПоказательТариф,Тариф,ОписаниеОклада,ОписаниеНадбавок");
	ОписаниеСостава.Вставить("ПоказательОкладТариф", "");
	ОписаниеСостава.Вставить("ОкладТариф", 0);
	ОписаниеСостава.Вставить("ОписаниеОклада", "");
	ОписаниеСостава.Вставить("ОписаниеНадбавок", "");

	Возврат ОписаниеСостава;
	
КонецФункции

Функция ПредставлениеОкладаИНадбавок(ОписанияСотрудника)
	
	Если ПустаяСтрока(ОписанияСотрудника.ОписаниеОклада) Тогда
		Возврат ОписанияСотрудника.ОписаниеНадбавок;
	ИначеЕсли ПустаяСтрока(ОписанияСотрудника.ОписаниеНадбавок) Тогда
		Возврат Формат(ОписанияСотрудника.ОкладТариф, "ЧДЦ=0");
	Иначе
		Возврат ОписанияСотрудника.ОписаниеОклада + ", " + ОписанияСотрудника.ОписаниеНадбавок;
	КонецЕсли;
	
КонецФункции

Функция ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц() Экспорт
		
	ПараметрыПолученияСотрудниковОрганизаций = ПараметрыПолученияСотрудниковОрганизаций();
	
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("СписокФизическихЛиц");
	
	Возврат ПараметрыПолученияСотрудниковОрганизаций;
	
КонецФункции

Функция ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице() Экспорт
		
	ПараметрыПолученияСотрудниковОрганизаций = ПараметрыПолученияСотрудниковОрганизаций();
	
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ИмяВТФизическиеЛица", "ВТФизическиеЛица");
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ИмяПоляФизическоеЛицо", "ФизическоеЛицо");

	Возврат ПараметрыПолученияСотрудниковОрганизаций;
	
КонецФункции

Функция ПараметрыПолученияСотрудниковОрганизаций()
		
	ПараметрыПолученияСотрудниковОрганизаций = Новый Структура("Организация,Подразделение");
	
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("КадровыеДанные", "");
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОтбиратьПоГоловнойОрганизации", Ложь);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("НачалоПериода", '00010101');
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОкончаниеПериода", '00010101');
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("Отборы");
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ИсключаемыйРегистратор");

	Возврат ПараметрыПолученияСотрудниковОрганизаций;
	
КонецФункции

Функция ПараметрыПолученияРабочихМестВОрганизацийПоСпискуФизическихЛиц() Экспорт
	
	Возврат КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
КонецФункции

Функция ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице() Экспорт
	
	Возврат КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	
КонецФункции

Процедура ОбновитьТекущиеКадровыеДанныеСотрудников(Запрос) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ТекущееПодразделение,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ТекущаяДолжность,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковПрием.Период, ВЫБОР
	|			КОГДА ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	|		КОНЕЦ) КАК ДатаПриема,
	|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковУвольнение.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольнения,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) КАК ТекущийВидЗанятости,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ГоловнаяОрганизацияПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизацияПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ТекущееПодразделениеПредыдущее,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ТекущаяДолжностьПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриемаПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольненияПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, ДАТАВРЕМЯ(1, 1, 1)) КАК ВидЗанятостиПредыдущий
	|ПОМЕСТИТЬ ВТНовыеКадровыеДанные
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|			И Сотрудники.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
	|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковПрием
	|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковПрием.Сотрудник
	|			И (КадроваяИсторияСотрудниковПрием.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковУвольнение
	|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковУвольнение.Сотрудник
	|			И (КадроваяИсторияСотрудниковУвольнение.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСотрудниковДляОбновления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеКадровыеДанные.Сотрудник,
	|	НовыеКадровыеДанные.ТекущаяОрганизация,
	|	НовыеКадровыеДанные.ТекущееПодразделение,
	|	НовыеКадровыеДанные.ТекущаяДолжность,
	|	НовыеКадровыеДанные.ДатаПриема,
	|	НовыеКадровыеДанные.ДатаУвольнения,
	|	НовыеКадровыеДанные.ТекущийВидЗанятости,
	|	НовыеКадровыеДанные.ФизическоеЛицо,
	|	НовыеКадровыеДанные.ГоловнаяОрганизация
	|ИЗ
	|	ВТНовыеКадровыеДанные КАК НовыеКадровыеДанные
	|ГДЕ
	|	(НовыеКадровыеДанные.ГоловнаяОрганизация <> НовыеКадровыеДанные.ГоловнаяОрганизацияПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ТекущаяОрганизация <> НовыеКадровыеДанные.ТекущаяОрганизацияПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ТекущееПодразделение <> НовыеКадровыеДанные.ТекущееПодразделениеПредыдущее
	|			ИЛИ НовыеКадровыеДанные.ТекущаяДолжность <> НовыеКадровыеДанные.ТекущаяДолжностьПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ДатаПриема <> НовыеКадровыеДанные.ДатаПриемаПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ДатаУвольнения <> НовыеКадровыеДанные.ДатаУвольненияПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ТекущийВидЗанятости <> НовыеКадровыеДанные.ВидЗанятостиПредыдущий)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина); 
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
	
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбновитьТекущиеТарифныеСтавки(МассивСотрудниковДляОбновления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСотрудниковДляОбновления", МассивСотрудниковДляОбновления);
	
	// Подготовим таблицу ИзмеренияДаты для получения среза последних.
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Сотрудник Из МассивСотрудниковДляОбновления Цикл
		СтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		СтрокаИзмеренияДаты.Сотрудник = Сотрудник;
	КонецЦикла;
	
	// Получим последние значения
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеАвансы",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
		|	СУММА(ПлановыеНачисленияСрезПоследних.Размер) КАК Размер
		|ПОМЕСТИТЬ ВТРазмерНачисленийСотрудников
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
		|ГДЕ
		|	ПлановыеНачисленияСрезПоследних.Размер <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисленияСрезПоследних.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЕСТЬNULL(РазмерНачисленийСотрудников.Размер, 0) КАК ТекущаяТарифнаяСтавка,
		|	ЕСТЬNULL(ПлановыеАвансы.СпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)) КАК ТекущийСпособРасчетаАванса,
		|	ЕСТЬNULL(ПлановыеАвансы.Аванс, 0) КАК ТекущийАванс,
		|	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0) КАК ТекущаяТарифнаяСтавкаПрежняя,
		|	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийСпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка)) КАК ТекущийСпособРасчетаАвансаПрежняя,
		|	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийАванс, 0) КАК ТекущийАвансПрежний,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация
		|ПОМЕСТИТЬ ВТНовыеКадровыеДанные
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
		|		ПО Сотрудники.Ссылка = ТекущаяТарифнаяСтавкаСотрудников.Сотрудник
		|			И Сотрудники.ФизическоеЛицо = ТекущаяТарифнаяСтавкаСотрудников.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|			И Сотрудники.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерНачисленийСотрудников КАК РазмерНачисленийСотрудников
		|		ПО Сотрудники.Ссылка = РазмерНачисленийСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансы
		|		ПО Сотрудники.Ссылка = ПлановыеАвансы.Сотрудник
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудниковДляОбновления)
		|	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеКадровыеДанные.Сотрудник,
		|	НовыеКадровыеДанные.ФизическоеЛицо,
		|	НовыеКадровыеДанные.ГоловнаяОрганизация,
		|	НовыеКадровыеДанные.ТекущаяОрганизация,
		|	НовыеКадровыеДанные.ТекущаяТарифнаяСтавка,
		|	НовыеКадровыеДанные.ТекущийСпособРасчетаАванса,
		|	НовыеКадровыеДанные.ТекущийАванс
		|ИЗ
		|	ВТНовыеКадровыеДанные КАК НовыеКадровыеДанные
		|ГДЕ
		|	(НовыеКадровыеДанные.ТекущаяТарифнаяСтавка <> НовыеКадровыеДанные.ТекущаяТарифнаяСтавкаПрежняя
		|			ИЛИ НовыеКадровыеДанные.ТекущийСпособРасчетаАванса <> НовыеКадровыеДанные.ТекущийСпособРасчетаАвансаПрежняя
		|			ИЛИ НовыеКадровыеДанные.ТекущийАванс <> НовыеКадровыеДанные.ТекущийАвансПрежний)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина); 
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросВТТарифныеСтавкиСотрудников(ТолькоРазрешенные, ИмяВТТарифныеСтавкиСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных) Экспорт

	Запрос = Новый Запрос;
	ИмяВТПлановыеНачисленияСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПлановыеНачисленияСрезПоследних");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ИмяВременнойТаблицыОтборовСотрудников, "Период,Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ПоляОтбораСотрудников.Период);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ПоляОтбораСотрудников.Сотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ПлановыеНачисления", ПоляОтбора);
	КонецЕсли;
	
	ПараметрыПостроения.Отборы = ПоляОтбора;
		 
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПлановыеНачисления",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТПлановыеНачисленияСрезПоследних);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистраСрез);
	
	ТекстЗапросаВТТарифнаяСтавкаСотрудников =
		"ВЫБРАТЬ
		|	ПлановыеНачисленияСрезПоследних.Период,
		|	ПлановыеНачисленияСрезПоследних.ПериодЗаписи КАК ПериодЗаписиНачислений,
		|	ПлановыеНачисленияСрезПоследних.Регистратор,
		|	ПлановыеНачисленияСрезПоследних.Сотрудник,
		|	СУММА(ПлановыеНачисленияСрезПоследних.Размер) КАК ТарифнаяСтавка,
		|	0 КАК Надбавка,
		|	СУММА(ПлановыеНачисленияСрезПоследних.Размер) КАК ФОТ
		|ПОМЕСТИТЬ ВТТарифныеСтавкиСотрудников
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисленияСрезПоследних.Период,
		|	ПлановыеНачисленияСрезПоследних.ПериодЗаписи,
		|	ПлановыеНачисленияСрезПоследних.Регистратор,
		|	ПлановыеНачисленияСрезПоследних.Сотрудник";
		
	ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТПлановыеНачисленияСрезПоследних", ИмяВТПлановыеНачисленияСрезПоследних);
	ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТТарифныеСтавкиСотрудников", ИмяВТТарифныеСтавкиСотрудников);
		
	ТекстЗапроса = 
		ЗапросВТИмяРегистраСрез.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапросаВТТарифнаяСтавкаСотрудников;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Процедура ПеренестиТекущиеКадровыеДанныеСотрудниковИзСправочникаВРегистры() Экспорт
	
	Запрос = Новый Запрос;
	
	// Проверка наличия записей
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	// Заполнение регистра, если записей нет.
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ФизическоеЛицо,
			|	Сотрудники.ГоловнаяОрганизация,
			|	Сотрудники.Ссылка,
			|	Сотрудники.УдалитьТекущаяОрганизация КАК ТекущаяОрганизация,
			|	Сотрудники.УдалитьТекущееПодразделение КАК ТекущееПодразделение,
			|	Сотрудники.УдалитьТекущаяДолжность КАК ТекущаяДолжность,
			|	Сотрудники.УдалитьТекущаяТарифнаяСтавка КАК ТекущаяТарифнаяСтавка,
			|	Сотрудники.УдалитьДатаПриема КАК ДатаПриема,
			|	Сотрудники.УдалитьДатаУвольнения КАК ДатаУвольнения,
			|	Сотрудники.УдалитьОсновноеРабочееМестоВОрганизации КАК ОсновноеРабочееМестоВОрганизации
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники";
			
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			ТекущиеКадровыеДанныеНаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			ТекущаяТарифнаяСтавкаНаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
			
			Пока Выборка.Следующий() Цикл
				
				Строка = ТекущиеКадровыеДанныеНаборЗаписей.Добавить();
				Строка.Сотрудник = Выборка.Ссылка; 
				Строка.ГоловнаяОрганизация = Выборка.ГоловнаяОрганизация; 
				Строка.ФизическоеЛицо = Выборка.ФизическоеЛицо; 
				Строка.ТекущаяОрганизация = Выборка.ТекущаяОрганизация; 
				Строка.ТекущееПодразделение = Выборка.ТекущееПодразделение; 
				Строка.ТекущаяДолжность = Выборка.ТекущаяДолжность; 
				Строка.ДатаПриема = Выборка.ДатаПриема; 
				Строка.ДатаУвольнения = Выборка.ДатаУвольнения;
				Строка.ОсновноеРабочееМестоВОрганизации = Выборка.ОсновноеРабочееМестоВОрганизации;
				
				Строка = ТекущаяТарифнаяСтавкаНаборЗаписей.Добавить();
				Строка.Сотрудник = Выборка.Ссылка; 
				Строка.ФизическоеЛицо = Выборка.ФизическоеЛицо; 
				Строка.ГоловнаяОрганизация = Выборка.ГоловнаяОрганизация; 
				Строка.ТекущаяОрганизация = Выборка.ТекущаяОрганизация; 
				Строка.ТекущаяТарифнаяСтавка = Выборка.ТекущаяТарифнаяСтавка; 
				
			КонецЦикла;	
			
			ТекущиеКадровыеДанныеНаборЗаписей.ОбменДанными.Загрузка = Истина;
			ТекущиеКадровыеДанныеНаборЗаписей.Записать();
			
			ТекущаяТарифнаяСтавкаНаборЗаписей.ОбменДанными.Загрузка = Истина;
			ТекущаяТарифнаяСтавкаНаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПеренестиТекущиеВидыЗанятостиСправочниковВРегистр() Экспорт
	
	Запрос = Новый Запрос;
	
	// Проверка наличия записей с незаполненным видом занятости.
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
		|			И ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|	И Сотрудники.УдалитьВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	// Заполнение вида занятости, если есть записи с незаполненным видом занятости.
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность,
			|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема,
			|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
			|	ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации,
			|	ВЫБОР
			|		КОГДА ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
			|			ТОГДА Сотрудники.УдалитьВидЗанятости
			|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости
			|	КОНЕЦ КАК ТекущийВидЗанятости
			|ИЗ
			|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
			|			И ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = Сотрудники.ФизическоеЛицо";
					   
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			Набор.Загрузить(РезультатЗапроса.Выгрузить());
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьСобытияУвольнений(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Регистраторы.Период КАК Период,
		|	Регистраторы.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.*
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО КадроваяИсторияСотрудников.Регистратор = Регистраторы.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.КадроваяИсторияСотрудников.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка, , "Период1,Регистратор1");
		
		Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
		
	КонецЦикла; 
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Регистраторы.Период КАК Период,
		|	Регистраторы.Регистратор КАК Регистратор,
		|	ПлановыеНачисления.*
		|ИЗ
		|	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
		|		ПО ПлановыеНачисления.Регистратор = Регистраторы.Регистратор
		|ИТОГИ ПО
		|	Регистратор";
	
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		Набор = РегистрыСведений.ПлановыеНачисления.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		
		Выборка = ВыборкаПоРегистраторам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка, , "Период1,Регистратор1");
		КонецЦикла;
		
		Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти


#Область КадровыеДанныеФизическихЛиц

Функция НеобходимыКадровыеДанныеФизическогоЛица(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ВозвращаемоеЗначение = Ложь;
	
	Возврат КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхФизическогоЛица(ИмяПоля)
		Или КадровыйУчет.НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОГражданстве(ИмяПоля)
		Или НеобходимыСведенияОбИнвалидности(ИмяПоля)
		Или НеобходимыСведенияОПенсионерах(ИмяПоля)
		Или НеобходимыСведенияДокументовУдостоверяющихЛичность(ИмяПоля)
		Или НеобходимыСведенияОФИОФизическихЛиц(ИмяПоля)
		Или НеобходимаКонтактнаяИнформацияФизическогоЛица(ИмяПоля);
		
КонецФункции
	
Функция НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчет.НеобходимыЗначенияРеквизитовСправочникаФизическиеЛица(ИмяПоля)
		Или КадровыйУчет.НеобходимаКонтактнаяИнформацияФизическогоЛица(ИмяПоля);
	
КонецФункции

Функция ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц) Экспорт
	
	ТекстОписанияПолей = "";
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли;
	
	ИмяКоллекцииОбработанныеПоля = "ОбработанныеПоляКадровыеДанныеФизическихЛиц";
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
	Если ФормироватьТаблицуРазличных Тогда
		
		ИмяВТОтборовРазличныхФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтборовРазличныхФизическихЛиц");
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц = ИмяВТОтборовРазличныхФизическихЛиц;
		
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		
	Иначе
		ОписательВТОтборов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписательВременнойТаблицыОтборов);
		ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц = ОписательВТОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц;
	КонецЕсли;
	
	Для каждого ИмяЗапрашиваемыхДанных Из ИменаКадровыхДанных Цикл
		
		ИмяКадровыхДанных = СокрЛП(ИмяЗапрашиваемыхДанных);
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхФизическогоЛица(ИмяКадровыхДанных) Тогда
			
			Продолжить;
			 
		ИначеЕсли КадровыйУчет.ЭтоОбработанноеПолеКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля) Тогда
			
			Продолжить;
			
		ИначеЕсли ДобавитьПолеПостоянныхКадровыхДанных(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОДокументахУдостоверяющихЛичность(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОбИнвалидности(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПенсионерах(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОГражданстве(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОФИОФизическихЛиц(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных, ОписательВТОтборов.ИмяПоляФизическоеЛицо)
			Тогда
				
			КадровыйУчет.ДобавитьВКоллекциюИмяОбработанныхКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля);
			Продолжить;
			
		Иначе
			
			ТекстСообщенияИсключения = НСтр("ru='Среди кадровых данных физических лиц нет данных с именем';uk='Серед кадрових даних фізичних осіб немає даних за іменем'") + " """ + ИмяКадровыхДанных + """";
			ВызватьИсключение ТекстСообщенияИсключения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОтборовФизическихЛиц.Период КАК Период,
		|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТКадровыеДанныеФизическихЛиц
		|ИЗ
		|	ВТОтборовРазличныхФизическихЛиц КАК ТаблицаОтборовФизическихЛиц";
	
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстОписанияПолей, "ПОМЕСТИТЬ ВТКадровыеДанныеФизическихЛиц");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	
	Если Не ФормироватьТаблицуРазличных Тогда
		
		КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст,
			"ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(Запрос.Текст,
			"ТаблицаОтборовФизическихЛиц.Период", "ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТКадровыеДанныеФизическихЛиц", ИмяВТКадровыеДанныеФизическихЛиц);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	ДобавитьТекстЗапросаВТПостоянныеКадровыеДанныеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТДокументыУдостоверяющиеЛичность(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОбИнвалидности(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОПенсионерах(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОГражданстве(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОФИОФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	УчетСтраховыхВзносовФизическиеЛица.ДобавитьТекстЗапросаВТСведенияОСтатусахЗастрахованныхЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	УчетНДФЛФизическиеЛица.ДобавитьТекстЗапросаВТСведенияОСтатусахНалогоплательщиков(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	
	Если ФормироватьТаблицуРазличных Тогда
		
		ТекстЗапросаПолученияРазличныхЗаписей =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТаблицаОтборовФизическихЛиц.Период КАК Период,
			|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТОтборовРазличныхФизическихЛиц
			|ИЗ
			|	ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц";
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовРазличныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаПолученияРазличныхЗаписей,
			"ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ТаблицаОтборовФизическихЛиц.Период", "ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
		
		Запрос.Текст =
			ТекстЗапросаПолученияРазличныхЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
			
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц) Экспорт
	
	ТекстОписанияПолей = "";
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли;
	
	ИмяКоллекцииОбработанныеПоля = "ОбработанныеПоляПостоянныеКадровыеДанныеФизическихЛиц";
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
	Если ФормироватьТаблицуРазличных Тогда
		
		ИмяВТОтборовРазличныхПостоянныхФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтборовРазличныхПостоянныхФизическихЛиц");
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц = ИмяВТОтборовРазличныхПостоянныхФизическихЛиц;
		
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц);
		
	Иначе
		ОписательВТОтборов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписательВременнойТаблицыОтборов);
		ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц = ОписательВТОтборов.ИмяВТОтборовРазличныхПостоянныхФизическихЛиц;
	КонецЕсли;
	
	Для каждого ИмяЗапрашиваемыхДанных Из ИменаКадровыхДанных Цикл
		
		ИмяКадровыхДанных = СокрЛП(ИмяЗапрашиваемыхДанных);
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхФизическогоЛица(ИмяКадровыхДанных) Тогда
			
			Продолжить;
			
		ИначеЕсли КадровыйУчет.ЭтоОбработанноеПолеКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля) Тогда
			
			Продолжить;
			
		ИначеЕсли ДобавитьПолеРеквизитаСправочникаФизическиеЛица(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеКонтактнойИнформацииФизическихЛиц(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных) Тогда
			
			КадровыйУчет.ДобавитьВКоллекциюИмяОбработанныхКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля);
			Продолжить;
			
		Иначе
			
			ТекстСообщенияИсключения = НСтр("ru='Среди кадровых данных физических лиц нет данных с именем';uk='Серед кадрових даних фізичних осіб немає даних за іменем'") + " """ + ИмяКадровыхДанных + """";
			ВызватьИсключение ТекстСообщенияИсключения;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТПостоянныеКадровыеДанныеФизическихЛиц
		|ИЗ
		|	ВТОтборовРазличныхПостоянныхФизическихЛиц КАК ТаблицаОтборовФизическихЛиц";
		
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстОписанияПолей, "ПОМЕСТИТЬ ВТПостоянныеКадровыеДанныеФизическихЛиц");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхПостоянныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	
	Если Не ФормироватьТаблицуРазличных Тогда
		
		КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст,
			"ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
		
	КонецЕсли; 
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПостоянныеКадровыеДанныеФизическихЛиц", ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	ДобавитьТекстЗапросаДанныхРеквизитовСправочникаФизическиеЛица(Запрос, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТКонтактнаяИнформация(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	Если ФормироватьТаблицуРазличных Тогда
		
		ТекстЗапросаПолученияРазличныхЗаписей =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТОтборовРазличныхПостоянныхФизическихЛиц
			|ИЗ
			|	ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц";
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовРазличныхПостоянныхФизическихЛиц", ОписательВТОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаПолученияРазличныхЗаписей,
			"ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
		
		Запрос.Текст =
			ТекстЗапросаПолученияРазличныхЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ДобавитьПолеПостоянныхКадровыхДанных(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	
	Если КадровыйУчет.НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ПостоянныеКадровыеДанныеФизическихЛиц", ИмяПоля);
		
		ПутьКДанным = "	ПостоянныеКадровыеДанные." + ИмяПоля;
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТПостоянныеКадровыеДанныеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	ПоляПостоянныхКадровыхДанных = ИсточникиДанных.Получить("ПостоянныеКадровыеДанныеФизическихЛиц");
	Если ПоляПостоянныхКадровыхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТПостоянныеКадровыеДанныеФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПостоянныеКадровыеДанныеФизическихЛиц");
	
	ЗапросВТ = КадровыйУчет.ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(
		ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляПостоянныхКадровыхДанных, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
		
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПостоянныеКадровыеДанныеФизическихЛиц + " КАК ПостоянныеКадровыеДанные
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ПостоянныеКадровыеДанные.ФизическоеЛицо}";
			
КонецПроцедуры

// Значения реквизитов справочника ФизическиеЛица.

Функция ДобавитьПолеРеквизитаСправочникаФизическиеЛица(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если КадровыйУчет.НеобходимыЗначенияРеквизитовСправочникаФизическиеЛица(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("РеквизитыСправочникаФизическиеЛица", Истина);
		
		ПутьКДанным = ПутьКДаннымЗначенийРеквизитовСправочникаФизическиеЛица(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаДанныхРеквизитовСправочникаФизическиеЛица(Запрос, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("РеквизитыСправочникаФизическиеЛица") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СправочникФизическиеЛица
		|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СправочникФизическиеЛица.Ссылка}";
		
КонецПроцедуры

Функция НеобходимыЗначенияРеквизитовСправочникаФизическиеЛица(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат Метаданные.Справочники.ФизическиеЛица.Реквизиты.Найти(ИмяПоля) <> Неопределено
		Или ИмяПоля = ВРег("Наименование") 
		Или ИмяПоля = ВРег("ФизическоеЛицоНаименование") 
		Или ИмяПоля = ВРег("Код") 
		Или ИмяПоля = ВРег("ФизическоеЛицоКод");
			
КонецФункции

Функция ДобавитьКритерийПоискаСправочникаФизическиеЛица(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	Если КадровыйУчет.НеобходимыЗначенияРеквизитовСправочникаФизическиеЛица(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("Возраст") Тогда
		
		Если ИмяПоля = ВРег("ФизическоеЛицоНаименование") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Наименование";
		ИначеЕсли ИмяПоля = ВРег("ФизическоеЛицоКод") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Код";
		ИначеЕсли ИмяПоля = ВРег("Возраст") Тогда
			
			ТекстЗапросаТекущаяДата = "ДАТАВРЕМЯ(" + Формат(ТекущаяДатаСеанса(), "ДФ='гггг, ММ, дд'; ДП=") + ")";
			УсловиеПоиска.ЛевоеЗначение = СтрЗаменить(
				"	ВЫБОР
				|		КОГДА Т.ДатаРождения > ДАТАВРЕМЯ(1, 1, 1)
				|			И Т.ДатаРождения < &Период
				|			ТОГДА РАЗНОСТЬДАТ(Т.ДатаРождения, &Период, ГОД) + ВЫБОР
				|				КОГДА МЕСЯЦ(Т.ДатаРождения) > МЕСЯЦ(&Период)
				|					ТОГДА -1
				|				КОГДА МЕСЯЦ(Т.ДатаРождения) = МЕСЯЦ(&Период)
				|						И ДЕНЬ(Т.ДатаРождения) > ДЕНЬ(&Период)
				|					ТОГДА -1
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|		ИНАЧЕ NULL
				|	КОНЕЦ", "&Период", ТекстЗапросаТекущаяДата);
				
			УсловиеПоиска.ОтносительныйПуть = Ложь;
				
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "Справочник.ФизическиеЛица", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымЗначенийРеквизитовСправочникаФизическиеЛица(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоляВВерхнемРегистре = ВРег("ФизическоеЛицоНаименование") Тогда
		ПутьКДанным = "	СправочникФизическиеЛица.Наименование";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ФизическоеЛицоКод") Тогда
		ПутьКДанным = "	СправочникФизическиеЛица.Код";
	Иначе
		ПутьКДанным = "	СправочникФизическиеЛица." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Контактная информация

Функция ДобавитьПолеКонтактнойИнформацииФизическихЛиц(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если КадровыйУчет.НеобходимаКонтактнаяИнформацияФизическогоЛица(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		
		ПозицияПредставление = СтрНайти(ВРег(ИмяПоля), ВРег("Представление"));
		Если ПозицияПредставление > 0 Тогда
			ИмяТаблицы = Лев(ИмяПоля, ПозицияПредставление - 1);
		Иначе
			ИмяТаблицы = ИмяПоля;
		КонецЕсли; 
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "КонтактнаяИнформацияФизическихЛиц", ИмяТаблицы);
		
		ПутьКДанным = ПутьКДаннымКонтактнойИнформацииФизическихЛиц(ИмяПоля, ИмяТаблицы);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТКонтактнаяИнформация(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	ИменаТаблицКонтактнойИнформации = ИсточникиДанных.Получить("КонтактнаяИнформацияФизическихЛиц");
	Если ИменаТаблицКонтактнойИнформации = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТКонтактнаяИнформация = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТКонтактнаяИнформация");
	ВидыКонтактнойИнформацииЗапроса = "";
	
	Для каждого ИмяТаблицы Из ИменаТаблицКонтактнойИнформации Цикл
		
		ПредставлениеВидаКонтактнойИнформации = "ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации." + ИмяТаблицы + "ФизическиеЛица)";
		ВидыКонтактнойИнформацииЗапроса = ?(ПустаяСтрока(ВидыКонтактнойИнформацииЗапроса), "", ВидыКонтактнойИнформацииЗапроса + ", ") + ПредставлениеВидаКонтактнойИнформации;
		
		Запрос.Текст = Запрос.Текст + Символы.ПС
			+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКонтактнаяИнформация + " КАК " + ИмяТаблицы + "ФизическиеЛица
				|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = " + ИмяТаблицы + "ФизическиеЛица.Объект
				|			И " + ИмяТаблицы + "ФизическиеЛица.Вид = " + ПредставлениеВидаКонтактнойИнформации + "}";
				
	КонецЦикла;
	
	// Подготовка запроса, создающего временную таблицу - отбор по видам контактной информации.
	ИмяВТОтборКонтактнойИнформации = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтборКонтактнойИнформации");
	
	ТекстЗапросаФильтраПоВидамКонтактнойИнформации = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВидыКонтактнойИнформации.Ссылка КАК Вид
		|ПОМЕСТИТЬ ВТОтборКонтактнойИнформации
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ПО (ВидыКонтактнойИнформации.Ссылка В (&СписокВидовКонтактнойИнформации))";
		
	ТекстЗапросаФильтраПоВидамКонтактнойИнформации = СтрЗаменить(
		ТекстЗапросаФильтраПоВидамКонтактнойИнформации,
		"ВТОтборовФизическихЛиц",
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
		
	ТекстЗапросаФильтраПоВидамКонтактнойИнформации = СтрЗаменить(
		ТекстЗапросаФильтраПоВидамКонтактнойИнформации,
		"ВТОтборКонтактнойИнформации",
		ИмяВТОтборКонтактнойИнформации);
		
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(
		ТекстЗапросаФильтраПоВидамКонтактнойИнформации, "ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);

	ТекстЗапросаФильтраПоВидамКонтактнойИнформации = СтрЗаменить(
		ТекстЗапросаФильтраПоВидамКонтактнойИнформации,
		"&СписокВидовКонтактнойИнформации",
		ВидыКонтактнойИнформацииЗапроса);
		
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаФильтраПоВидамКонтактнойИнформации, ТолькоРазрешенные);
	
	// Подготовка запроса, создающего временную таблицу с контактной информацией.
	ОписаниеТаблицыОтборов = ОписаниеВременнойТаблицыОтборовКонтактнойИнформации(
		ИмяВТОтборКонтактнойИнформации,
		"ФизическоеЛицо",
		"Вид");
		
	ЗапросВТКонтактнаяИнформация = ЗапросВТКонтактнаяИнформация(
		ТолькоРазрешенные, ИмяВТКонтактнаяИнформация, "Справочник.ФизическиеЛица", ОписаниеТаблицыОтборов);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТКонтактнаяИнформация);
		
	Запрос.Текст =
		ТекстЗапросаФильтраПоВидамКонтактнойИнформации
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ЗапросВТКонтактнаяИнформация.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
			
КонецПроцедуры

Функция НеобходимаКонтактнаяИнформацияФизическогоЛица(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("АдресДляИнформирования")
		Или ИмяПоля = ВРег("АдресДляИнформированияПредставление")
		Или ИмяПоля = ВРег("АдресМестаПроживания")
		Или ИмяПоля = ВРег("АдресМестаПроживанияПредставление")
		Или ИмяПоля = ВРег("АдресПоПрописке")
		Или ИмяПоля = ВРег("АдресПоПропискеПредставление")
		Или ИмяПоля = ВРег("ТелефонДомашний")
		Или ИмяПоля = ВРег("ТелефонДомашнийПредставление")
		Или ИмяПоля = ВРег("ТелефонРабочий")
		Или ИмяПоля = ВРег("ТелефонРабочийПредставление")
		Или ИмяПоля = ВРег("EMail")
		Или ИмяПоля = ВРег("EMailПредставление");

КонецФункции

Функция ДобавитьКритерийПоискаПоКонтактнойИнформацииФизическогоЛица(КритерииПоиска, УсловиеПоиска) Экспорт
	
	КритерийДобавлен = Ложь;
	Если НеобходимаКонтактнаяИнформацияФизическогоЛица(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяКритерия = "Справочник.ФизическиеЛица.КонтактнаяИнформация";
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("АдресДляИнформирования") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".АдресДляИнформирования";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("АдресДляИнформированияПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".АдресДляИнформирования";
			УсловиеПоиска.ЛевоеЗначение = "Представление";			
			
		ИначеЕсли ИмяПоля = ВРег("АдресМестаПроживания") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".АдресМестаПроживания";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("АдресМестаПроживанияПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".АдресМестаПроживанияПредставление";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		ИначеЕсли ИмяПоля = ВРег("АдресПоПрописке") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".АдресПоПрописке";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("АдресПоПропискеПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".АдресПоПропискеПредставление";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		ИначеЕсли ИмяПоля = ВРег("ТелефонДомашний") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".ТелефонДомашний";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("ТелефонДомашнийПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".ТелефонДомашнийПредставление";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		ИначеЕсли ИмяПоля = ВРег("ТелефонРабочий") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".ТелефонРабочий";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("ТелефонРабочийПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".ТелефонРабочийПредставление";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		ИначеЕсли ИмяПоля = ВРег("EMail") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".EMail";
			УсловиеПоиска.ЛевоеЗначение = "ЗначенияПолей";
			
		ИначеЕсли ИмяПоля = ВРег("EMailПредставление") Тогда
			
			ПравоеЗначение = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
			ИмяКритерия = ИмяКритерия + ".EMailПредставление";
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, УсловиеПоиска);
		
		ДополнительноеУсловие = Новый Структура;
		ДополнительноеУсловие.Вставить("ЛевоеЗначение", "Вид");
		ДополнительноеУсловие.Вставить("ВидСравнения", "=");
		ДополнительноеУсловие.Вставить("ПравоеЗначение", ПравоеЗначение);
		ДополнительноеУсловие.Вставить("ОтносительныйПуть", Ложь);
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, ДополнительноеУсловие);
		
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымКонтактнойИнформацииФизическихЛиц(Знач ИмяПоля, ИмяТаблицы)
	
	ПозицияПредставление = СтрНайти(ВРег(ИмяПоля), ВРег("Представление"));
	Если ПозицияПредставление > 0 Тогда
		ПутьКДанным = Символы.Таб + ИмяТаблицы + "ФизическиеЛица.Представление";
	Иначе
		ПутьКДанным = Символы.Таб + ИмяТаблицы + "ФизическиеЛица.ЗначенияПолей";
	КонецЕсли; 
	
	Возврат ПутьКДанным;
	
КонецФункции

// Документы, удостоверяющие личность.

Функция ДобавитьПолеСведенийОДокументахУдостоверяющихЛичность(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияДокументовУдостоверяющихЛичность(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("ДокументыУдостоверяющиеЛичность", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОДокументахУдостоверяющихЛичность(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТДокументыУдостоверяющиеЛичность(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("ДокументыУдостоверяющиеЛичность") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТДокументыУдостоверяющиеЛичность = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТДокументыУдостоверяющиеЛичность");
	
	ЗапросВТ = КадровыйУчет.ЗапросВТДокументыУдостоверяющиеЛичность(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТДокументыУдостоверяющиеЛичность);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТДокументыУдостоверяющиеЛичность + " КАК ДокументыУдостоверяющиеЛичность
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ДокументыУдостоверяющиеЛичность.ФизическоеЛицо
			|			И ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ДокументыУдостоверяющиеЛичность.Период}";
				
КонецПроцедуры

Функция НеобходимыСведенияДокументовУдостоверяющихЛичность(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ДокументПериодРегистрации")
		Или ИмяПоля = ВРег("ДокументВид")
		Или ИмяПоля = ВРег("ДокументСерия")
		Или ИмяПоля = ВРег("ДокументНомер")
		Или ИмяПоля = ВРег("ДокументДатаВыдачи")
		Или ИмяПоля = ВРег("ДокументСрокДействия")
		Или ИмяПоля = ВРег("ДокументКемВыдан")
		Или ИмяПоля = ВРег("ДокументПредставление");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоДокументамУдостоверяющимЛичность(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияДокументовУдостоверяющихЛичность(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ДокументПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументВид") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ВидДокумента";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументСерия") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Серия";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументНомер") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Номер";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументДатаВыдачи") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДатаВыдачи";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументСрокДействия") Тогда
			УсловиеПоиска.ЛевоеЗначение = "СрокДействия";
			
		ИначеЕсли ИмяПоля = ВРег("ДокументКемВыдан") Тогда
			УсловиеПоиска.ЛевоеЗначение = "КемВыдан";
			
			
		ИначеЕсли ИмяПоля = ВРег("ДокументПредставление") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Представление";
			
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ДокументыФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОДокументахУдостоверяющихЛичность(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоляВВерхнемРегистре = ВРег("ДокументПериодРегистрации") Тогда
		ПутьКДанным = "	ДокументыУдостоверяющиеЛичность.ПериодЗаписи";
	Иначе
		ПутьКДанным = "	ДокументыУдостоверяющиеЛичность." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;

КонецФункции

// Сведения об инвалидности

Функция ДобавитьПолеСведенийОбИнвалидности(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбИнвалидности(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбИнвалидности", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОбИнвалидности(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбИнвалидности(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОбИнвалидности") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТСведенияОбИнвалидности = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОбИнвалидности");
	
	ЗапросВТ = КадровыйУчет.ЗапросВТСведенияОбИнвалидности(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОбИнвалидности);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОбИнвалидности + " КАК СведенияОбИнвалидности
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СведенияОбИнвалидности.ФизическоеЛицо
			|			И ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОбИнвалидности.Период}";
				
КонецПроцедуры

Функция НеобходимыСведенияОбИнвалидности(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ИнвалидностьПериодРегистрации")
		Или ИмяПоля = ВРег("Инвалидность")
		Или ИмяПоля = ВРег("ИнвалидностьДатаВыдачи")
		Или ИмяПоля = ВРег("ИнвалидностьСрокДействияСправки")
		Или ИмяПоля = ВРег("ИнвалидностьГруппа");
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОбИнвалидности(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОбИнвалидности(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ИнвалидностьПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		ИначеЕсли ИмяПоля = ВРег("ИнвалидностьДатаВыдачи") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДатаВыдачи";
			
		ИначеЕсли ИмяПоля = ВРег("ИнвалидностьСрокДействияСправки") Тогда
			УсловиеПоиска.ЛевоеЗначение = "СрокДействияСправки";
		ИначеЕсли ИмяПоля = ВРег("ИнвалидностьГруппа") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Группа";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.СведенияОбИнвалидностиФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОбИнвалидности(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоляВВерхнемРегистре = ВРег("ИнвалидностьПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОбИнвалидности.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ИнвалидностьДатаВыдачи") Тогда
		ПутьКДанным = "	СведенияОбИнвалидности.ДатаВыдачи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ИнвалидностьСрокДействияСправки") Тогда
		ПутьКДанным = "	СведенияОбИнвалидности.СрокДействияСправки";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ИнвалидностьГруппа") Тогда
		ПутьКДанным = "	СведенияОбИнвалидности.Группа";
	Иначе
		ПутьКДанным = "	СведенияОбИнвалидности." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции
// Сведения  о пенсионерах
Функция ДобавитьПолеСведенийОПенсионерах(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПенсионерах(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПенсионерах", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОПенсионерах(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОПенсионерах(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОПенсионерах") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТСведенияОПенсионерах = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОПенсионерах");
	
	ЗапросВТ = КадровыйУчет.ЗапросВТСведенияОПенсионерах(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОПенсионерах);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОПенсионерах + " КАК СведенияОПенсионерах
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СведенияОПенсионерах.ФизическоеЛицо
			|			И ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОПенсионерах.Период}";
				
КонецПроцедуры

Функция НеобходимыСведенияОПенсионерах(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПенсионерПериодРегистрации")
		Или ИмяПоля = ВРег("Пенсионер");
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОПенсионерах(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОПенсионерах(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ПенсионерПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";

		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.СведенияОПенсионерах", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОПенсионерах(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоляВВерхнемРегистре = ВРег("ПенсионерПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОПенсионерах.ПериодЗаписи";
	Иначе
		ПутьКДанным = "	СведенияОПенсионерах." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения о гражданстве

Функция ДобавитьПолеСведенийОГражданстве(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОГражданстве(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОГражданстве", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОГражданстве(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОГражданстве(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОГражданстве") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТСведенияОГражданстве = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОГражданстве");
	
	ЗапросВТ = КадровыйУчет.ЗапросВТСведенияОГражданстве(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОГражданстве);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОГражданстве + " КАК ГражданствоФизическихЛиц
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ГражданствоФизическихЛиц.ФизическоеЛицо
			|			И ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ГражданствоФизическихЛиц.Период}";
				
КонецПроцедуры

Функция НеобходимыСведенияОГражданстве(Знач ИмяПоля)
	
	Возврат ВРег(ИмяПоля) = Врег("ГражданствоПериодРегистрации")
		Или ВРег(ИмяПоля) = Врег("Страна");
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОГражданстве(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОГражданстве(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ГражданствоПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ГражданствоФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОГражданстве(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоляВВерхнемРегистре = ВРег("ГражданствоПериодРегистрации") Тогда
		ПутьКДанным = "	ГражданствоФизическихЛиц.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Страна") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ГражданствоФизическихЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина))";
	КонецЕсли;
	
	Возврат ПутьКДанным;

КонецФункции

// Сведения о ФИО физических лиц.

Функция ДобавитьПолеСведенийОФИОФизическихЛиц(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных, ИмяПоляФизическоеЛицоТаблицыОтборов)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОФИОФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОФИОФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОФИОФизическихЛиц(ИмяПоля, ИмяПоляФизическоеЛицоТаблицыОтборов);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОФИОФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОФИОФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТСведенияОФИОФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОФИОФизическихЛиц");
	
	ЗапросВТ = КадровыйУчет.ЗапросВТСведенияОФИОФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОФИОФизическихЛиц);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОФИОФизическихЛиц + " КАК СведенияОФИОФизическихЛиц
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СведенияОФИОФизическихЛиц.ФизическоеЛицо
			|			И ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОФИОФизическихЛиц.Период}";
				
КонецПроцедуры

Функция НеобходимыСведенияОФИОФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ФИОПериодРегистрации")
		Или ИмяПоля = ВРег("Фамилия")
		Или ИмяПоля = ВРег("Имя")
		Или ИмяПоля = ВРег("Отчество")
		Или ИмяПоля = ВРег("ФамилияИО")
		Или ИмяПоля = ВРег("ИОФамилия")
		Или ИмяПоля = ВРег("ФИОПолные");

КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОФИОФизическихЛиц(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОФИОФизическихЛиц(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ФИОПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		ИначеЕсли ИмяПоля = ВРег("ФамилияИО")
			Или ИмяПоля = ВРег("ИОФамилия")
			Или ИмяПоля = ВРег("ФИОПолные") Тогда
			
			УсловиеПоиска.ЛевоеЗначение = ПутьКДаннымСведенийОФИОФизическихЛиц(ИмяПоля);
			УсловиеПоиска.ЛевоеЗначение = СтрЗаменить(УсловиеПоиска.ЛевоеЗначение, "СведенияОФИОФизическихЛиц", "Т");
			
			УсловиеПоиска.ОтносительныйПуть = Ложь;
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ФИОФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОФИОФизическихЛиц(Знач ИмяПоля, Знач ИмяПоляФизическоеЛицоТаблицыОтборов = Неопределено)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ФИОПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОФИОФизическихЛиц.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ФамилияИО") Тогда
		
		ПутьКДанным = 
			"	СведенияОФИОФизическихЛиц.Фамилия + "" "" + ВЫБОР
			|		КОГДА СведенияОФИОФизическихЛиц.Имя = """"
			|			ТОГДА """"
			|		ИНАЧЕ ПОДСТРОКА(СведенияОФИОФизическихЛиц.Имя, 1, 1) + ""."" + ВЫБОР
			|			КОГДА СведенияОФИОФизическихЛиц.Отчество = """"
			|				ТОГДА """"
			|			ИНАЧЕ ПОДСТРОКА(СведенияОФИОФизическихЛиц.Отчество, 1, 1) + "".""
			|		КОНЕЦ
			|	КОНЕЦ";
			
		Если ИмяПоляФизическоеЛицоТаблицыОтборов <> Неопределено Тогда
			
			ПутьКДанным =
				"	ВЫБОР КОГДА СведенияОФИОФизическихЛиц.Фамилия ЕСТЬ NULL
				|		ТОГДА " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ИмяПоляФизическоеЛицоТаблицыОтборов) + ".ФИО
				|		ИНАЧЕ " + ПутьКДанным + "
				|	КОНЕЦ";
				
		КонецЕсли;
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ИОФамилия") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА СведенияОФИОФизическихЛиц.Имя = """"
			|		ТОГДА """"
			|		ИНАЧЕ ПОДСТРОКА(СведенияОФИОФизическихЛиц.Имя, 1, 1) + ""."" + ВЫБОР
			|			КОГДА СведенияОФИОФизическихЛиц.Отчество = """"
			|				ТОГДА """"
			|			ИНАЧЕ ПОДСТРОКА(СведенияОФИОФизическихЛиц.Отчество, 1, 1) + "".""
			|		КОНЕЦ + "" ""
			|	КОНЕЦ + СведенияОФИОФизическихЛиц.Фамилия";
			
		Если ИмяПоляФизическоеЛицоТаблицыОтборов <> Неопределено Тогда
			
			ПутьКДанным =
				"	ВЫБОР КОГДА СведенияОФИОФизическихЛиц.Фамилия ЕСТЬ NULL
				|		ТОГДА " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ИмяПоляФизическоеЛицоТаблицыОтборов) + ".ФИО
				|		ИНАЧЕ " + ПутьКДанным + "
				|	КОНЕЦ";
				
		КонецЕсли;
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ФИОПолные") Тогда
		
		ПутьКДанным = "	СведенияОФИОФизическихЛиц.Фамилия + "" "" + СведенияОФИОФизическихЛиц.Имя + "" "" + СведенияОФИОФизическихЛиц.Отчество";
		Если ИмяПоляФизическоеЛицоТаблицыОтборов <> Неопределено Тогда
			
			ПутьКДанным =
				"	ВЫБОР КОГДА СведенияОФИОФизическихЛиц.Фамилия ЕСТЬ NULL
				|		ТОГДА " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборовФизическихЛиц", ИмяПоляФизическоеЛицоТаблицыОтборов) + ".ФИО
				|		ИНАЧЕ " + ПутьКДанным + "
				|	КОНЕЦ";
				
		КонецЕсли;
		
	Иначе
		ПутьКДанным = "	СведенияОФИОФизическихЛиц." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

#КонецОбласти


#Область КадровыеДанныеСотрудников

Функция ЗапросВТПостоянныеКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеСотрудников) Экспорт
	
	ТекстОписанияПолей = "";
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли; 
	
	ИмяКоллекцииОбработанныеПоля = "ОбработанныеПоляПостоянныеКадровыеДанныеСотрудников";
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
	Если ФормироватьТаблицуРазличных Тогда
		
		ИмяВТОтборовРазличныхПостоянныхСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтборовРазличныхПостоянныхСотрудников");
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников = ИмяВТОтборовРазличныхПостоянныхСотрудников;
		
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
		
	Иначе
		ОписательВТОтборов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписательВременнойТаблицыОтборов);
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников = ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников;
	КонецЕсли;
	
	Для каждого ИмяЗапрашиваемыхДанных Из ИменаКадровыхДанных Цикл
		
		ИмяКадровыхДанных = СокрЛП(ИмяЗапрашиваемыхДанных);
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхСотрудника(ИмяКадровыхДанных) Тогда
			
			Продолжить;
			
		ИначеЕсли КадровыйУчет.ЭтоОбработанноеПолеКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля) Тогда
			
			Продолжить;
			
		ИначеЕсли ДобавитьПолеРеквизитаСправочникаСотрудники(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийПостоянныхКадровыхДанныхФизическихЛиц(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийТекущихКадровыхДанныхСотрудников(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийТекущихТарифныхСтавокСотрудников(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийДанныхПриказаОПриемеОбУвольнении(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных) Тогда
			
			КадровыйУчет.ДобавитьВКоллекциюИмяОбработанныхКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля);
			Продолжить;
			
		Иначе
			
			ТекстСообщенияИсключения = НСтр("ru='Среди кадровых данных сотрудников нет данных с именем';uk='Серед кадрових даних співробітників немає даних за іменем'") + " """ + ИмяКадровыхДанных + """";
			ВызватьИсключение ТекстСообщенияИсключения;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборовСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаОтборовСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	ТаблицаОтборовСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТПостоянныеКадровыеДанныеСотрудников
		|ИЗ
		|	ВТОтборовРазличныхПостоянныхСотрудников КАК ТаблицаОтборовСотрудников";
		
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстОписанияПолей, "ПОМЕСТИТЬ ВТПостоянныеКадровыеДанныеСотрудников");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхПостоянныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	
	Если Не ФормироватьТаблицуРазличных Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ТаблицаОтборовСотрудников.Сотрудник = Сотрудники.Ссылка";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ТаблицаОтборовСотрудников.ГоловнойСотрудник", "Сотрудники.ГоловнойСотрудник");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ТаблицаОтборовСотрудников.ФизическоеЛицо", "Сотрудники.ФизическоеЛицо");
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ТаблицаОтборовСотрудников.Сотрудник", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПостоянныеКадровыеДанныеСотрудников", ИмяВТПостоянныеКадровыеДанныеСотрудников);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	ДобавитьТекстЗапросаДанныхРеквизитовСправочникаСотрудники(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаТекущихКадровыхДанныхСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаТекущихТарифныхСтавок(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаДанныхПриказовОПриемеОбУвольнении(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	// В конце добавляется запрос функциональных опций организаций.
	ДобавитьТекстЗапросаВТФункциональныеОпцииОрганизаций(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	Если ФормироватьТаблицуРазличных Тогда
		
		ТекстЗапросаПолученияРазличныхЗаписей =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТаблицаОтборовСотрудников.Сотрудник КАК Сотрудник,
			|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТОтборовРазличныхПостоянныхСотрудников
			|ИЗ
			|	ВТОтборовСотрудников КАК ТаблицаОтборовСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ТаблицаОтборовСотрудников.Сотрудник = Сотрудники.Ссылка";
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовРазличныхПостоянныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
			
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
			
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ТаблицаОтборовСотрудников.Сотрудник", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
		Запрос.Текст =
			ТекстЗапросаПолученияРазличныхЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных, ИмяВТКадровыеДанныеСотрудников) Экспорт
	
	ТекстОписанияПолей = "";
	Если ИсточникиДанных = Неопределено Тогда
		ИсточникиДанных = Новый Соответствие;
	КонецЕсли; 
	
	ИмяКоллекцииОбработанныеПоля = "ОбработанныеПоляКадровыеДанныеСотрудников";
	
	Если ТипЗнч(КадровыеДанные) = Тип("Массив") Тогда
		ИменаКадровыхДанных = КадровыеДанные;
	Иначе
		ИменаКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	КонецЕсли;
	
	ФормироватьТаблицуРазличных = ПустаяСтрока(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
	Если ФормироватьТаблицуРазличных Тогда
		
		ИмяВТОтборовРазличныхСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтборовРазличныхСотрудников");
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников = ИмяВТОтборовРазличныхСотрудников;
		
		ОписательВТОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников);
		
	Иначе
		ОписательВТОтборов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОписательВременнойТаблицыОтборов);
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников = ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников;
	КонецЕсли;
	
	Для каждого ИмяЗапрашиваемыхДанных Из ИменаКадровыхДанных Цикл
		
		ИмяКадровыхДанных = СокрЛП(ИмяЗапрашиваемыхДанных);
		
		Если КадровыйУчет.ЭтоОбязательноеПолеКадровыхДанныхСотрудника(ИмяКадровыхДанных) Тогда
			
			Продолжить;
		ИначеЕсли КадровыйУчет.ЭтоОбработанноеПолеКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля) Тогда
			
			Продолжить;
			
		ИначеЕсли ДобавитьПолеКадровыхДанныхФизическихЛиц(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеПостоянныхКадровыхДанныхСотрудников(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийКадровойИсторииСотрудников(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОПлановыхАвансах(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОбУчетеЗатрат(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОбОплатеТруда(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОКатегорииЕСВ(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных)
			Или ДобавитьПолеСведенийОЗарплатныхПроектах(ИмяКадровыхДанных, ТекстОписанияПолей, ИсточникиДанных) Тогда
			КадровыйУчет.ДобавитьВКоллекциюИмяОбработанныхКадровыхДанных(ИмяКадровыхДанных, ИсточникиДанных, ИмяКоллекцииОбработанныеПоля);
			Продолжить;
			
		Иначе
			
			ТекстСообщенияИсключения = НСтр("ru='Среди кадровых данных сотрудников нет данных с именем';uk='Серед кадрових даних співробітників немає даних за іменем'") + " """ + ИмяКадровыхДанных + """";
			ВызватьИсключение ТекстСообщенияИсключения;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборовСотрудников.Период КАК Период,
		|	ТаблицаОтборовСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаОтборовСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	ТаблицаОтборовСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников
		|ИЗ
		|	ВТОтборовРазличныхСотрудников КАК ТаблицаОтборовСотрудников";
		
	КадровыйУчет.ДобавитьВТекстЗапросаОписаниеПолей(Запрос.Текст, ТекстОписанияПолей, "ПОМЕСТИТЬ ВТКадровыеДанныеСотрудников");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовРазличныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	
	Если Не ФормироватьТаблицуРазличных Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ТаблицаОтборовСотрудников.Сотрудник = Сотрудники.Ссылка";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ТаблицаОтборовСотрудников.ГоловнойСотрудник", "Сотрудники.ГоловнойСотрудник");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ТаблицаОтборовСотрудников.ФизическоеЛицо", "Сотрудники.ФизическоеЛицо");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ТаблицаОтборовСотрудников.Сотрудник", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ТаблицаОтборовСотрудников.Период", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТКадровыеДанныеСотрудников", ИмяВТКадровыеДанныеСотрудников);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	ДобавитьТекстЗапросаВТПостоянныеКадровыеДанныеСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	ДобавитьТекстЗапросаВТКадровыеДанныеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	КадровыйУчет.ДобавитьТекстЗапросаВТСведенияКадроваяИсторияСотрудников(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенийОПлановыхАвансах(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОбУчетеЗатрат(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОбОплатеТруда(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОЗарплатныхПроектах(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
	ДобавитьТекстЗапросаВТСведенияОКатегорииЕСВ(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных);
		
	КадровыйУчет.ДобавитьТекстыЗапросовВТСведенийЗависящихОтФункциональныхОпцийОрганизаций(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	// В конце добавляется запрос функциональных опций организаций.
	ДобавитьТекстЗапросаВТФункциональныеОпцииОрганизаций(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
	Если ФормироватьТаблицуРазличных Тогда
		
		ТекстЗапросаПолученияРазличныхЗаписей =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТаблицаОтборовСотрудников.Период КАК Период,
			|	ТаблицаОтборовСотрудников.Сотрудник КАК Сотрудник,
			|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТОтборовРазличныхСотрудников
			|ИЗ
			|	ВТОтборовСотрудников КАК ТаблицаОтборовСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ТаблицаОтборовСотрудников.Сотрудник = Сотрудники.Ссылка";
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовРазличныхСотрудников", ОписательВТОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ВТОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ТаблицаОтборовСотрудников.Сотрудник", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
		ТекстЗапросаПолученияРазличныхЗаписей = СтрЗаменить(ТекстЗапросаПолученияРазличныхЗаписей,
			"ТаблицаОтборовСотрудников.Период", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
		
		Запрос.Текст =
			ТекстЗапросаПолученияРазличныхЗаписей
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ Запрос.Текст;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Данные реквизитов справочника сотрудников.

Функция ДобавитьПолеРеквизитаСправочникаСотрудники(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыЗначенияРеквизитовСправочникаСотрудники(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("РеквизитыСправочникаСотрудники", Истина);
		
		ПутьКДанным = ПутьКДаннымЗначенийРеквизитовСправочникаСотрудники(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыЗначенияРеквизитовСправочникаСотрудники(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат Метаданные.Справочники.Сотрудники.Реквизиты.Найти(ИмяПоля) <> Неопределено
		Или ИмяПоля = ВРег("ТабельныйНомер") 
		Или ИмяПоля = ВРег("Наименование") 
		Или ИмяПоля = ВРег("Код")
		Или ИмяПоля = ВРег("ПроцентСевернойНадбавки");
			
КонецФункции

Функция ДобавитьКритерийПоискаСправочникаСотрудники(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыЗначенияРеквизитовСправочникаСотрудники(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ТабельныйНомер") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Код";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "Справочник.Сотрудники", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымЗначенийРеквизитовСправочникаСотрудники(ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ИмяПоляВВерхнемРегистре = ВРег("Наименование") Тогда
		ПутьКДанным = "	СправочникСотрудники.Наименование";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Код") Или ИмяПоляВВерхнемРегистре = ВРег("ТабельныйНомер") Тогда
		ПутьКДанным = "	СправочникСотрудники.Код";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПроцентСевернойНадбавки") Тогда
		ПутьКДанным = "	СправочникСотрудники.ТекущийПроцентСевернойНадбавки";
	Иначе
		ПутьКДанным = "	СправочникСотрудники." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаДанныхРеквизитовСправочникаСотрудники(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("РеквизитыСправочникаСотрудники") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СправочникСотрудники
		|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СправочникСотрудники.Ссылка}";
		
КонецПроцедуры

// Постоянные кадровые данные физических лиц.

Функция ДобавитьПолеСведенийПостоянныхКадровыхДанныхФизическихЛиц(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если КадровыйУчет.НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ПостоянныеКадровыеДанныеФизическихЛиц", ИмяПоля);
		
		ПутьКДанным = "	ПостоянныеКадровыеДанныеФизическихЛиц." + ИмяПоля;
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	КадровыеДанные = ИсточникиДанных.Получить("ПостоянныеКадровыеДанныеФизическихЛиц");
	Если КадровыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТПостоянныеКадровыеДанныеФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПостоянныеКадровыеДанныеФизическихЛиц");
	ОписательТаблиц = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников,
		ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + ".ФизическоеЛицо");
	
	ЗапросВТПостоянныеКадровыеДанныеФЛ = КадровыйУчет.ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательТаблиц, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТПостоянныеКадровыеДанныеФЛ);
	
	Запрос.Текст = ЗапросВТПостоянныеКадровыеДанныеФЛ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст
		+ Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПостоянныеКадровыеДанныеФизическихЛиц + " КАК ПостоянныеКадровыеДанныеФизическихЛиц
			|		ПО ВЫРАЗИТЬ(ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " КАК Справочник.Сотрудники).ФизическоеЛицо = ПостоянныеКадровыеДанныеФизическихЛиц.ФизическоеЛицо}";
		
КонецПроцедуры

// Текущие кадровые данные сотрудников.

Функция ДобавитьПолеСведенийТекущихКадровыхДанныхСотрудников(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если КадровыйУчет.НеобходимыСведенияТекущихКадровыхДанныхСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("ТекущиеКадровыеДанныеСотрудников", Истина);
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			
			ИмяФО = КадровыйУчет.ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(ИмяПоля, ИсточникиДанных);
			Если Не ПустаяСтрока(ИмяФО) Тогда
				КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ФункциональныеОпцииОрганизаций", ИмяФО);
			КонецЕсли;
			
		КонецЕсли; 
		
		ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийТекущихКадровыхДанныхСотрудников(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияТекущихКадровыхДанныхСотрудников(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СведенияНеобходимы = 
		(ИмяПоля = ВРег("ДатаПриема") 
		Или ИмяПоля = ВРег("ДатаУвольнения") 
		Или ИмяПоля = ВРег("ТекущаяОрганизация") 
		Или ИмяПоля = ВРег("ТекущееПодразделение") 
		Или ИмяПоля = ВРег("ТекущаяДолжность") 
		Или ИмяПоля = ВРег("ТекущийВидЗанятости") 
		Или ИмяПоля = ВРег("ОсновноеРабочееМестоВОрганизации") 
		Или ИмяПоля = ВРег("ОформленПоТрудовомуДоговору"));
		
	Если Не СведенияНеобходимы И Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		СведенияНеобходимы = КадровыйУчет.НеобходимыСведенияКадровойИсторииСотрудников(ИмяПоля);
	КонецЕсли; 
	
	Возврат СведенияНеобходимы;
			
КонецФункции

Функция ДобавитьКритерийПоискаПоТекущимКадровымДаннымСотрудников(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если КадровыйУчет.НеобходимыСведенияТекущихКадровыхДанныхСотрудников(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ТекущиеКадровыеДанныеСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийТекущихКадровыхДанныхСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ОформленПоТрудовомуДоговору") Тогда
		
		Если ФОИспользоватьКадровыйУчет Тогда
		
			ПутьКДанным =
				"ВЫБОР
				|	КОГДА ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
				|		ТОГДА ЛОЖЬ
				|	ИНАЧЕ ИСТИНА
				|КОНЕЦ
				|";
				
		Иначе
			
			ПутьКДанным = 
				"ВЫБОР
				|	КОГДА ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
				|		ИЛИ ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|		ИЛИ ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
				|		ТОГДА ЛОЖЬ
				|	ИНАЧЕ ИСТИНА
				|КОНЕЦ
				|";
				
		КонецЕсли;

	ИначеЕсли Не ФОИспользоватьКадровыйУчет
		И НеобходимыСведенияЗависящиеОтФункциональныхОпцийОрганизации(ИмяПоляВВерхнемРегистре) Тогда
		
		ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийЗависящихОтФункциональныхОпцийОрганизаций(ИмяПоля);
		
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("РабочееМестоПериодРегистрации") Тогда
		ПутьКДанным = "	NULL";
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("РабочееМестоРегистратор") Тогда
		ПутьКДанным = "	NULL";
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("Организация") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|		ТОГДА NULL
			|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
			|	КОНЕЦ";
		
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("Подразделение") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
			|		ТОГДА NULL
			|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение
			|	КОНЕЦ";
		
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("Должность") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
			|		ТОГДА NULL
			|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность
			|	КОНЕЦ";
		
	ИначеЕсли Не ФОИспользоватьКадровыйУчет И ИмяПоляВВерхнемРегистре = ВРег("ВидЗанятости") Тогда
		
		ПутьКДанным =
			"	ВЫБОР КОГДА ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
			|		ТОГДА NULL
			|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("КоличествоСтавок") Тогда
		
		ПутьКДанным = "	1";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ДатаПриема") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1))";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ДатаУвольнения") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1))";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущаяОрганизация") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущееПодразделение") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущаяДолжность") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущийВидЗанятости") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ОсновноеРабочееМестоВОрганизации") Тогда
		
		ПутьКДанным = "	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации, ЛОЖЬ)";
			
	КонецЕсли;
		
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаТекущихКадровыхДанныхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("ТекущиеКадровыеДанныеСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ТекущиеКадровыеДанныеСотрудников.Сотрудник}";
		
КонецПроцедуры

// Текущие тарифные ставки

Функция ДобавитьПолеСведенийТекущихТарифныхСтавокСотрудников(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если КадровыйУчет.НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("ТекущаяТарифнаяСтавкаСотрудников", Истина);
		
		ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийТекущихТарифныхСтавокСотрудников(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СведенияНеобходимы = (ИмяПоля = ВРег("ТекущаяТарифнаяСтавка")
		Или ИмяПоля = ВРег("ТекущийСпособРасчетаАванса")
		Или ИмяПоля = ВРег("ТекущийАванс"));
		
	Если Не СведенияНеобходимы И Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		СведенияНеобходимы = КадровыйУчет.НеобходимыСведенияОбОплатеТруда(ИмяПоля);
		Если Не СведенияНеобходимы Тогда
			СведенияНеобходимы = НеобходимыСведенияОПлановыхАвансах(ИмяПоля);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СведенияНеобходимы;
	
КонецФункции

Функция ДобавитьКритерийПоискаПоТекущимТарифнымСтавкамСотрудников(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если КадровыйУчет.НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийТекущихТарифныхСтавокСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ТекущаяТарифнаяСтавка") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0)";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущийСпособРасчетаАванса") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийСпособРасчетаАванса, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.ПустаяСсылка))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ТекущийАванс") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийАванс, 0)";
	ИначеЕсли Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Если КадровыйУчет.НеобходимыСведенияОбОплатеТруда(ИмяПоляВВерхнемРегистре) Тогда
			
			Если ИмяПоляВВерхнемРегистре = ВРег("ОплатаТрудаПериодЗаписи") Тогда
				ПутьКДанным = "	NULL";
			ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ОплатаТрудаРегистратор") Тогда
				ПутьКДанным = "	NULL";
			ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Надбавка") Тогда
				ПутьКДанным = "	NULL";
			Иначе
				ПутьКДанным = "	ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка";
			КонецЕсли;
			
		ИначеЕсли НеобходимыСведенияОПлановыхАвансах(ИмяПоля) Тогда
			
			Если ИмяПоляВВерхнемРегистре = ВРег("АвансПериодЗаписи") Тогда
				ПутьКДанным = "	NULL";
			ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("АвансРегистратор") Тогда
				ПутьКДанным = "	NULL";
			ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СпособРасчетаАванса") Тогда
				ПутьКДанным = "	ТекущаяТарифнаяСтавкаСотрудников.ТекущийСпособРасчетаАванса";
			ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Аванс") Тогда
				ПутьКДанным = "	ТекущаяТарифнаяСтавкаСотрудников.ТекущийАванс";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаТекущихТарифныхСтавок(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных);
	
	Если ИсточникиДанных.Получить("ТекущаяТарифнаяСтавкаСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
		|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ТекущаяТарифнаяСтавкаСотрудников.Сотрудник}";
		
КонецПроцедуры

// Данные приказов о приеме об увольнении.

Функция ДобавитьПолеСведенийДанныхПриказаОПриемеОбУвольнении(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	
	НеобходимаДатаНачалаУчета = НеобходимыСведенияОДатеНачалаУчета(ИмяПоля);
	НеобходимыСведенияОПриеме = КадровыйУчет.НеобходимыСведенияПриказаОПриеме(ИмяПоля);
	Если НеобходимаДатаНачалаУчета
		Или НеобходимыСведенияОПриеме
		Или НеобходимыСведенияПриказаОбУвольнении(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		
		НеобходимыеСведения = ИсточникиДанных.Получить("ДанныеПриказаОПриемеОбУвольнении");
		Если НеобходимыеСведения = Неопределено Тогда
			НеобходимыеСведения = Новый Структура("НеобходимаДатаНачалаУчета,НеобходимыСведенияПриказаОПриеме,НеобходимыСведенияПриказаОбУвольнении", Ложь, Ложь, Ложь);
		КонецЕсли; 
		
		Если НеобходимаДатаНачалаУчета Тогда
			НеобходимыеСведения.НеобходимаДатаНачалаУчета = Истина;
		ИначеЕсли НеобходимыСведенияОПриеме Тогда
			НеобходимыеСведения.НеобходимыСведенияПриказаОПриеме = Истина;
		Иначе
			НеобходимыеСведения.НеобходимыСведенияПриказаОбУвольнении = Истина;
		КонецЕсли;
		ИсточникиДанных.Вставить("ДанныеПриказаОПриемеОбУвольнении", НеобходимыеСведения);
		
		ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийПриказаОПриемеОбУвольнении(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОДатеНачалаУчета(ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ДатаНачалаУчета");
	
КонецФункции

Функция НеобходимыСведенияПриказаОПриеме(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПриказОПриеме")
		Или ИмяПоля = ВРег("ПриказОПриемеДата")
		Или ИмяПоля = ВРег("ПриказОПриемеНомер");
	
КонецФункции

Функция НеобходимыСведенияПриказаОбУвольнении(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПриказОбУвольнении")
		Или ИмяПоля = ВРег("ПриказОбУвольненииДата")
		Или ИмяПоля = ВРег("ПриказОбУвольненииНомер")
		Или ИмяПоля = ВРег("ПриказОбУвольненииСтатьяЗакона")
		Или ИмяПоля = ВРег("ПриказОбУвольненииСтатьяКЗоТ");
	
КонецФункции

Функция ЗапросВТСведенийПриказовОПриеме(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОПриеме) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.Номер,
		|	ПриемНаРаботу.Дата,
		|	ПриемНаРаботу.Организация,
		|	ПриемНаРаботу.Подразделение,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.Должность,
		|	ПриемНаРаботу.ДатаПриема,
		|	ПриемНаРаботу.ВидЗанятости,
		|	ПриемНаРаботу.УсловияПриема,
		|	ПриемНаРаботу.СпособРасчетаАванса,
		|	ПриемНаРаботу.Аванс,
		|	ПриемНаРаботу.Руководитель,
		|	ПриемНаРаботу.ДолжностьРуководителя,
		|	ПриемНаРаботу.Проведен
		|ПОМЕСТИТЬ ВТСведенийПриказовОПриеме
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО ПриемНаРаботу.Сотрудник = КадроваяИстория.Сотрудник
		|			И ПриемНаРаботу.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадроваяИсторияСотрудников", ИмяВТКадроваяИсторияСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСведенийПриказовОПриеме", ИмяВТСведенийПриказовОПриеме);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСведенийПриказовОбУвольнении(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОбУвольнении) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Увольнение.Ссылка,
		|	Увольнение.Номер,
		|	Увольнение.Дата,
		|	Увольнение.Организация,
		|	Увольнение.ДатаУвольнения,
		|	Увольнение.Сотрудник,
		|	Увольнение.ФизическоеЛицо,
		|	Увольнение.СтатьяТКРФ,
		|	Увольнение.УдалитьСтатьяТКРФ,
		|	Увольнение.ОснованиеУвольнения,
		|	Увольнение.Руководитель,
		|	Увольнение.ДолжностьРуководителя,
		|	Увольнение.Проведен
		|ПОМЕСТИТЬ ВТСведенийПриказовОбУвольнении
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
		|		ПО Увольнение.Сотрудник = КадроваяИстория.Сотрудник
		|			И Увольнение.Ссылка = КадроваяИстория.Регистратор
		|			И (КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадроваяИсторияСотрудников", ИмяВТКадроваяИсторияСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСведенийПриказовОбУвольнении", ИмяВТСведенийПриказовОбУвольнении);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

Функция ПутьКДаннымСведенийПриказаОПриемеОбУвольнении(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Если ИмяПоляВВерхнемРегистре = ВРег("ДатаНачалаУчета") Тогда
			ПутьКДанным = "	ДатыНачалаУчета.ПериодЗаписи";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриеме") Тогда
			ПутьКДанным = "	ПриказыОПриеме.Ссылка";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеДата") Тогда
			ПутьКДанным = "	ПриказыОПриеме.Дата";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОПриемеНомер") Тогда
			ПутьКДанным = "	ПриказыОПриеме.Номер";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОбУвольнении") Тогда
			ПутьКДанным = "	ПриказыОбУвольнении.Ссылка";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОбУвольненииДата") Тогда
			ПутьКДанным = "	ПриказыОбУвольнении.Дата";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОбУвольненииНомер") Тогда
			ПутьКДанным = "	ПриказыОбУвольнении.Номер";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОбУвольненииСтатьяЗакона") Тогда
			ПутьКДанным = "	ПриказыОбУвольнении.СтатьяЗакона";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ПриказОбУвольненииСтатьяКЗОТ") Тогда
			ПутьКДанным = "	ПриказыОбУвольнении.СтатьяКЗОТ";
		КонецЕсли;
		
	Иначе
		ПутьКДанным = "	NULL";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаДанныхПриказовОПриемеОбУвольнении(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	НеобходимыеСведения = ИсточникиДанных.Получить("ДанныеПриказаОПриемеОбУвольнении");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТИзмеренияДатыДляТаблицыПриказов = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТИзмеренияДатыДляТаблицыПриказов");
	ИмяВТКадроваяИсторияСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТКадроваяИсторияСотрудников");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ИмяВТИзмеренияДатыДляТаблицыПриказов,
		"Сотрудник");
	
	КадровыеСобытия = "";
	Если НеобходимыеСведения.НеобходимаДатаНачалаУчета Тогда
		КадровыеСобытия = "ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)";
	ИначеЕсли НеобходимыеСведения.НеобходимыСведенияПриказаОПриеме Тогда
		КадровыеСобытия = "ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)";
	КонецЕсли;
	
	Если НеобходимыеСведения.НеобходимыСведенияПриказаОбУвольнении Тогда
		КадровыеСобытия = ?(ПустаяСтрока(КадровыеСобытия), "", КадровыеСобытия + ",") + "ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы,
		"ВидСобытия", "В", КадровыеСобытия);
			
	ЗапросВТИмяРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		ИмяВТКадроваяИсторияСотрудников);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистра);
	
	Если НеобходимыеСведения.НеобходимаДатаНачалаУчета Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадроваяИсторияСотрудников + " КАК ДатыНачалаУчета
			| 	ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ДатыНачалаУчета.Сотрудник
			|		И ДатыНачалаУчета.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))}";
		
	КонецЕсли; 
	
	Если НеобходимыеСведения.НеобходимыСведенияПриказаОПриеме Тогда
		
		ИмяВТСведенийПриказовОПриеме = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенийПриказовОПриеме");
		ЗапросСведенийПриказовОПриеме = КадровыйУчет.ЗапросВТСведенийПриказовОПриеме(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОПриеме);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ЗапросВТИмяРегистра.Текст, ЗапросСведенийПриказовОПриеме.Текст);
		
		Запрос.Текст = Запрос.Текст + "
			|{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенийПриказовОПриеме + " КАК ПриказыОПриеме
			| 	ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ПриказыОПриеме.Сотрудник}";
		
	КонецЕсли;
	
	Если НеобходимыеСведения.НеобходимыСведенияПриказаОбУвольнении Тогда
		
		ИмяВТСведенийПриказовОбУвольнении = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенийПриказовОбУвольнении");
		ЗапросСведенийПриказовОбУвольнении = КадровыйУчет.ЗапросВТСведенийПриказовОбУвольнении(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОбУвольнении);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ЗапросВТИмяРегистра.Текст, ЗапросСведенийПриказовОбУвольнении.Текст);
		
		Запрос.Текст = Запрос.Текст	+ "
			|{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенийПриказовОбУвольнении + " КАК ПриказыОбУвольнении
			| 	ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ПриказыОбУвольнении.Сотрудник}";
		
	КонецЕсли; 
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзмеренияДаты." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " КАК Сотрудник,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаОкончания
		|ПОМЕСТИТЬ " + ИмяВТИзмеренияДатыДляТаблицыПриказов + "
		|ИЗ
		|	" + ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников + " КАК ИзмеренияДаты"
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ЗапросВТИмяРегистра.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
	
КонецПроцедуры

// Постоянные кадровые данные

Функция ДобавитьПолеПостоянныхКадровыхДанныхСотрудников(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если КадровыйУчет.НеобходимыПостоянныеКадровыеДанныеСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ПостоянныеКадровыеДанныеСотрудников", ИмяПоля);
		
		ПутьКДанным = "	ПостоянныеКадровыеДанныеСотрудников." + ИмяПоля;
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыПостоянныеКадровыеДанныеСотрудников(ИмяПоля) Экспорт
	
	Возврат НеобходимыЗначенияРеквизитовСправочникаСотрудники(ИмяПоля)
		Или КадровыйУчет.НеобходимыСведенияТекущихКадровыхДанныхСотрудников(ИмяПоля)
		Или КадровыйУчет.НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(ИмяПоля)
		Или НеобходимыСведенияОДатеНачалаУчета(ИмяПоля)
		Или КадровыйУчет.НеобходимыСведенияПриказаОПриеме(ИмяПоля)
		Или НеобходимыСведенияПриказаОбУвольнении(ИмяПоля);
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТПостоянныеКадровыеДанныеСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных);
	
	КадровыеДанные = ИсточникиДанных.Получить("ПостоянныеКадровыеДанныеСотрудников");
	Если КадровыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТПостоянныеКадровыеДанныеСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПостоянныеКадровыеДанныеСотрудников");
	
	ЗапросВТПостоянныеКадровыеДанные = КадровыйУчет.ЗапросВТПостоянныеКадровыеДанныеСотрудников(ТолькоРазрешенные,ОписательВременнойТаблицыОтборов, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеСотрудников); 
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТПостоянныеКадровыеДанные);
	
	Запрос.Текст =
		ЗапросВТПостоянныеКадровыеДанные.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст
		+ Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПостоянныеКадровыеДанныеСотрудников + " КАК ПостоянныеКадровыеДанныеСотрудников
			|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ПостоянныеКадровыеДанныеСотрудников.Сотрудник}";
		
КонецПроцедуры

// Кадровые данные физических лиц.

Функция ДобавитьПолеКадровыхДанныхФизическихЛиц(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если КадровыйУчет.НеобходимыКадровыеДанныеФизическогоЛица(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "КадровыеДанныеФизическихЛиц", ИмяПоля);
		
		ПутьКДанным = "	КадровыеДанныеФизическихЛиц." + ИмяПоля;
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТКадровыеДанныеФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	КадровыеДанные = ИсточникиДанных.Получить("КадровыеДанныеФизическихЛиц");
	Если КадровыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТКадровыеДанныеФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТКадровыеДанныеФизическихЛиц");
	ИмяВТОтборовФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтборовФизическихЛиц");
	
	ТекстЗапросаОтборовФизическихЛиц =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаОтборовСотрудников.Период КАК Период,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТОтборовФизическихЛиц
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовСотрудников КАК ТаблицаОтборовСотрудников
		|		ПО Сотрудники.Ссылка = ТаблицаОтборовСотрудников.Сотрудник";
		
	ТекстЗапросаОтборовФизическихЛиц = СтрЗаменить(ТекстЗапросаОтборовФизическихЛиц,
		"ВТОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	ТекстЗапросаОтборовФизическихЛиц = СтрЗаменить(ТекстЗапросаОтборовФизическихЛиц,
		"ТаблицаОтборовСотрудников.Сотрудник", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	ТекстЗапросаОтборовФизическихЛиц = СтрЗаменить(ТекстЗапросаОтборовФизическихЛиц,
		"ТаблицаОтборовСотрудников.Период", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(
		ТекстЗапросаОтборовФизическихЛиц, "ВТОтборовФизическихЛиц", ИмяВТОтборовФизическихЛиц);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаОтборовФизическихЛиц, ТолькоРазрешенные);
	
	ОписательВременнойТаблицыОтборовФизическихЛиц = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(ИмяВТОтборовФизическихЛиц);
	ЗапросВТКадровыеДанныеФЛ = КадровыйУчет.ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборовФизическихЛиц, КадровыеДанные, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц); 
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТКадровыеДанныеФЛ);
	
	Запрос.Текст =
		ТекстЗапросаОтборовФизическихЛиц
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ЗапросВТКадровыеДанныеФЛ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст
		+ Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТОтборовФизическихЛиц + " КАК ТаблицаОтборовФизическихЛиц
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадровыеДанныеФизическихЛиц + " КАК КадровыеДанныеФизическихЛиц
			|			ПО ТаблицаОтборовФизическихЛиц.ФизическоеЛицо = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
			|				И ТаблицаОтборовФизическихЛиц.Период = КадровыеДанныеФизическихЛиц.Период
			|		ПО ТаблицаОтборовСотрудников." +  ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ТаблицаОтборовФизическихЛиц.Сотрудник
			|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = КадровыеДанныеФизическихЛиц.Период}";
		
КонецПроцедуры

// Значения зависящие от функциональных опций.

Функция НеобходимыСведенияЗависящиеОтФункциональныхОпцийОрганизации(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ЯвляетсяЧленомЛетногоЭкипажа")
		Или ИмяПоля = ВРег("ЯвляетсяШахтером")
		Или ИмяПоля = ВРег("ЯвляетсяФармацевтом")
		Или ИмяПоля = ВРег("ЯвляетсяПрокурором")
		Или ИмяПоля = ВРег("ЯвляетсяВоеннослужащим")
		Или ИмяПоля = ВРег("РаботаетВСтуденческомОтряде")
		Или ИмяПоля = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией")
		Или ИмяПоля = ВРег("ЯвляетсяЧленомЭкипажаСуднаПодФлагомРФ")
		Или ИмяПоля = ВРег("ПринятНаНовоеРабочееМесто")
		Или ИмяПоля = ВРег("ДатаСозданияРабочегоМеста");
		
	
КонецФункции

Функция ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(Знач ИмяПоля, ИсточникиДанных) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ИмяПоля = ВРег("ЯвляетсяЧленомЛетногоЭкипажа") Тогда
		
		Возврат "ИспользуетсяТрудЧленовЛетныхЭкипажей";
		
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяШахтером") Тогда
		
		Возврат "ИспользуетсяТрудШахтеров";
		
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяФармацевтом") Тогда
		
		Возврат "ИспользуетсяТрудФармацевтов";
		
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяЧленомЭкипажаСуднаПодФлагомРФ") Тогда
		
		Возврат "ИспользуетсяТрудЧленовЭкипажейМорскихСудов";
		
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией") Тогда
		
		Возврат "ИспользуютсяРаботыСДосрочнойПенсией";
		
	КонецЕсли; 
	
	Возврат "";
	
КонецФункции

Функция ПутьКДаннымСведенийЗависящихОтФункциональныхОпцийОрганизаций(Знач ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		ПутьКДолжности = "ВЫРАЗИТЬ(КадроваяИсторияСотрудников.Должность КАК Справочник.Должности)";
		ПутьКПодразделению = "ВЫРАЗИТЬ(КадроваяИсторияСотрудников.Подразделение КАК Справочник.ПодразделенияОрганизаций)";
	Иначе
		ПутьКДолжности = "ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК Справочник.Должности)";
		ПутьКПодразделению = "ВЫРАЗИТЬ(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение КАК Справочник.ПодразделенияОрганизаций)";
	КонецЕсли;
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяЧленомЛетногоЭкипажа") Тогда
		
		ПутьКДанным =
			"	ВЫБОР 
			|		КОГДА ФункциональныеОпции.ИспользуетсяТрудЧленовЛетныхЭкипажей 
			|			ТОГДА ЕСТЬNULL(" + ПутьКДолжности + ".ЯвляетсяДолжностьюЛетногоЭкипажа, ЛОЖЬ) 
			|		ИНАЧЕ ЛОЖЬ 
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяШахтером") Тогда
		
		ПутьКДанным =
			"	ВЫБОР 
			|		КОГДА ФункциональныеОпции.ИспользуетсяТрудШахтеров 
			|			ТОГДА ЕСТЬNULL(" + ПутьКДолжности + ".ЯвляетсяШахтерскойДолжностью, ЛОЖЬ) 
			|		ИНАЧЕ ЛОЖЬ 
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяФармацевтом") Тогда
		
		ПутьКДанным =
			"	ВЫБОР 
			|		КОГДА ФункциональныеОпции.ИспользуетсяТрудФармацевтов 
			|			ТОГДА ЕСТЬNULL(" + ПутьКДолжности + ".ЯвляетсяФармацевтическойДолжностью, ЛОЖЬ) 
			|		ИНАЧЕ ЛОЖЬ 
			|	КОНЕЦ";
	
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией") Тогда
		
		ПутьКДанным =
			"	ВЫБОР 
			|		КОГДА ФункциональныеОпции.ИспользуютсяРаботыСДосрочнойПенсией 
			|			ТОГДА ЕСТЬNULL(" + ПутьКДолжности + ".ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией, ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)) 
			|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка) 
			|	КОНЕЦ";
		
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяПрокурором")
		Или ИмяПоляВВерхнемРегистре = ВРег("ЯвляетсяВоеннослужащим") 
		Или ИмяПоляВВерхнемРегистре = ВРег("РаботаетВСтуденческомОтряде") Тогда
		
		ПутьКДанным = "	ЛОЖЬ";
	
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТФункциональныеОпцииОрганизаций(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных)
	
	СписокОпций = ИсточникиДанных.Получить("ФункциональныеОпцииОрганизаций");
	Если СписокОпций = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТФункциональныеОпцииОрганизаций = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТФункциональныеОпцииОрганизаций");
	
	ЗапросВТФункциональныеОпции = ЗапросВТФункциональныеОпцииОрганизаций(ТолькоРазрешенные, ИмяВТФункциональныеОпцииОрганизаций, СписокОпций);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		ПутьКПолюОрганизация = "КадроваяИсторияСотрудников.Организация";
	Иначе
		ПутьКПолюОрганизация = "ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация";
	КонецЕсли;
	
	Запрос.Текст = 
		ЗапросВТФункциональныеОпции.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст
		+ "
			|{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТФункциональныеОпцииОрганизаций + " КАК ФункциональныеОпции
			| 	ПО " + ПутьКПолюОрганизация + " = ФункциональныеОпции.Организация}";
			
	ИсточникиДанных.Удалить("ФункциональныеОпцииОрганизаций");
	
КонецПроцедуры

// Кадровая история сотрудников.

Функция ДобавитьПолеСведенийКадровойИсторииСотрудников(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") И КадровыйУчет.НеобходимыСведенияКадровойИсторииСотрудников(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "КадроваяИсторияСотрудников", ИмяПоля);
		
		ИмяФО = КадровыйУчет.ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(ИмяПоля, ИсточникиДанных);
		Если Не ПустаяСтрока(ИмяФО) Тогда
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ФункциональныеОпцииОрганизаций", ИмяФО);
		КонецЕсли; 
		
		ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийКадровойИсторииСотрудников(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияКадровойИсторииСотрудников(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("РабочееМестоПериодРегистрации")
		Или ИмяПоля = ВРег("РабочееМестоРегистратор")
		Или ИмяПоля = ВРег("Организация")
		Или ИмяПоля = ВРег("Подразделение")
		Или ИмяПоля = ВРег("Должность")
		Или ИмяПоля = ВРег("ВидЗанятости")
		Или ИмяПоля = ВРег("ВидСобытия")
		Или ИмяПоля = ВРег("КоличествоСтавок")
		Или НеобходимыСведенияЗависящиеОтФункциональныхОпцийОрганизации(ИмяПоля);
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямКадровойИсторииСотрудников(КритерииПоиска, УсловиеПоиска)
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	КритерийДобавлен = Ложь;
	Если КадровыйУчет.НеобходимыСведенияКадровойИсторииСотрудников(УсловиеПоиска.ЛевоеЗначение)
		Или ИмяПоля = ВРег("ДатаНачала")
		Или ИмяПоля = ВРег("ДатаОкончания") Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("РабочееМестоПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		ИначеЕсли ИмяПоля = ВРег("РабочееМестоРегистратор") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Регистратор";
			
		ИначеЕсли ИмяПоля = ВРег("ДатаОкончания") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДатаОкончания";
			УсловиеПоиска.ВидСравнения = "<=";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.КадроваяИсторияСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийКадровойИсторииСотрудников(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("РабочееМестоПериодРегистрации") Тогда
		ПутьКДанным = "	КадроваяИсторияСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РабочееМестоРегистратор") Тогда
		ПутьКДанным = "	КадроваяИсторияСотрудников.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("КоличествоСтавок") Тогда
		ПутьКДанным = "	1";
	ИначеЕсли НеобходимыСведенияЗависящиеОтФункциональныхОпцийОрганизации(ИмяПоляВВерхнемРегистре) Тогда
		ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийЗависящихОтФункциональныхОпцийОрганизаций(ИмяПоля);
	Иначе
		ПутьКДанным = "	КадроваяИсторияСотрудников." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенияКадровойИсторияСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияКадровойИсторияСотрудников = "ВТСведенияКадровойИсторияСотрудников") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("КадроваяИсторияСотрудников", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"КадроваяИсторияСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияКадровойИсторияСотрудников);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияКадроваяИсторияСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТСведенияКадровойИсторияСотрудников = Неопределено) Экспорт
	
	Если ИсточникиДанных.Получить("КадроваяИсторияСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяВТСведенияКадровойИсторияСотрудников = Неопределено Тогда
		ИмяВТСведенияКадровойИсторияСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияКадровойИсторияСотрудников");
	КонецЕсли; 
	
	ЗапросВТ = ЗапросВТСведенияКадровойИсторияСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияКадровойИсторияСотрудников);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияКадровойИсторияСотрудников + " КАК КадроваяИсторияСотрудников
			|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = КадроваяИсторияСотрудников.Сотрудник
			|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = КадроваяИсторияСотрудников.Период}";
				
КонецПроцедуры

// Сведения о категории ЕСВ

Функция ДобавитьПолеСведенийОКатегорииЕСВ(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОКатегорииЕСВ(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОКатегорииЕСВ", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОКатегорииЕСВ(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОКатегорииЕСВ(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("КатегорияЕСВ");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОКатегорииЕСВ(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОКатегорииЕСВ(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("КатегорияЕСВПериодЗаписи") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		ИначеЕсли ИмяПоля = ВРег("КатегорияЕСВРегистратор") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Регистратор";
			
		КонецЕсли;;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ЕСВСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОКатегорииЕСВ(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("КатегорияЕСВПериодЗаписи") Тогда
		ПутьКДанным = "	СведенияОКатегорииЕСВ.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("КатегорияЕСВРегистратор") Тогда
		ПутьКДанным = "	СведенияОКатегорииЕСВ.Регистратор";
	Иначе
		ПутьКДанным = "	СведенияОКатегорииЕСВ." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенияОКатегорииЕСВ(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОКатегорииЕСВ = "ВТСведенияОКатегорииЕСВ") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ЕСВСотрудников", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД = Ложь;
	
	ИмяВТЕСВСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТЕСВСотрудников");
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ЕСВСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТЕСВСотрудников);
		
	ИмяВТПоследниеПериодыВТСведенияОЕСВСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПоследниеПериодыВТСведенияОЕСВСотрудников");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСВСотрудников.Сотрудник,
		|	МАКСИМУМ(ЕСВСотрудников.ПериодЗаписи) КАК ПериодЗаписи
		|ПОМЕСТИТЬ ВТПоследниеПериодыВТСведенияОЕСВСотрудников
		|ИЗ
		|	ВТЕСВСотрудников КАК ЕСВСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСВСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСВСотрудников.Период,
		|	ЕСВСотрудников.ПериодЗаписи,
		|	ЕСВСотрудников.Сотрудник,
		|	ЕСВСотрудников.КатегорияЕСВ
		|ПОМЕСТИТЬ ВТСведенияОКатегорииЕСВ
		|ИЗ
		|	ВТПоследниеПериодыВТСведенияОЕСВСотрудников КАК ПоследниеПериодыВТСведенияОЕСВСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЕСВСотрудников КАК ЕСВСотрудников
		|		ПО ПоследниеПериодыВТСведенияОЕСВСотрудников.Сотрудник = ЕСВСотрудников.Сотрудник
		|			И ПоследниеПериодыВТСведенияОЕСВСотрудников.ПериодЗаписи = ЕСВСотрудников.ПериодЗаписи";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЕСВСотрудников", ИмяВТЕСВСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПоследниеПериодыВТСведенияОЕСВСотрудников", ИмяВТПоследниеПериодыВТСведенияОЕСВСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСведенияОКатегорииЕСВ", ИмяВТСведенияОКатегорииЕСВ);
	
	ЗапросВТИмяРегистраСрез.Текст = 
		ЗапросВТИмяРегистраСрез.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапроса;
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОКатегорииЕСВ(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОКатегорииЕСВ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТСведенияОКатегорииЕСВ = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОКатегорииЕСВ");
	
	ЗапросВТ = ЗапросВТСведенияОКатегорииЕСВ(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОКатегорииЕСВ);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОКатегорииЕСВ + " КАК СведенияОКатегорииЕСВ
			|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОКатегорииЕСВ.Сотрудник
			|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОКатегорииЕСВ.Период}";
				
КонецПроцедуры


// Сведения об учете затрат

Функция ДобавитьПолеСведенийОбУчетеЗатрат(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОбУчетеЗатрат(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбУчетеЗатрат", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОбУчетеЗатрат(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОбУчетеЗатрат(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("УчетЗатратПериодРегистрации")
		Или ИмяПоля = ВРег("СпособОтраженияЗарплатыВБухучете")
		Или ИмяПоля = ВРег("СтатьяФинансирования")
		Или ИмяПоля = ВРег("УчетЗатратДокументОснование");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОбУчетеЗатрат(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОбУчетеЗатрат(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("УчетЗатратПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		ИначеЕсли ИмяПоля = ВРег("УчетЗатратДокументОснование") Тогда
			УсловиеПоиска.ЛевоеЗначение = "ДокументОснование";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.БухучетЗарплатыСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОбУчетеЗатрат(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("УчетЗатратПериодРегистрации") Тогда
		ПутьКДанным = "	БухучетЗарплатыСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("УчетЗатратДокументОснование") Тогда
		ПутьКДанным = "	БухучетЗарплатыСотрудников.ДокументОснование";
	Иначе
		ПутьКДанным = "	БухучетЗарплатыСотрудников." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенияОбУчетеЗатрат(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОбУчетеЗатрат = "ВТСведенияОбУчетеЗатрат") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("БухучетЗарплатыСотрудников", ПоляОтбора);
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД = Ложь;
	
	ИмяВТБухучетЗарплатыСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТБухучетЗарплатыСотрудников");
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"БухучетЗарплатыСотрудников", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТБухучетЗарплатыСотрудников);
	
	ИмяВТПоследниеПериодыСведенияОбУчетеЗатрат = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПоследниеПериодыСведенияОбУчетеЗатрат");
	ИмяВТПоследниеДокументыСведенияОбУчетеЗатрат = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПоследниеДокументыСведенияОбУчетеЗатрат");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	БухучетЗарплатыСотрудников.Сотрудник,
		|	МАКСИМУМ(БухучетЗарплатыСотрудников.ПериодЗаписи) КАК ПериодЗаписи
		|ПОМЕСТИТЬ ВТПоследниеПериодыСведенияОбУчетеЗатрат
		|ИЗ
		|	ВТБухучетЗарплатыСотрудников КАК БухучетЗарплатыСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	БухучетЗарплатыСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БухучетЗарплатыСотрудников.Сотрудник,
		|	БухучетЗарплатыСотрудников.ПериодЗаписи,
		|	МАКСИМУМ(БухучетЗарплатыСотрудников.ДокументОснование) КАК ДокументОснование
		|ПОМЕСТИТЬ ВТПоследниеДокументыСведенияОбУчетеЗатрат
		|ИЗ
		|	ВТПоследниеПериодыСведенияОбУчетеЗатрат КАК ПоследниеПериодыСведенияОбУчетеЗатрат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетЗарплатыСотрудников КАК БухучетЗарплатыСотрудников
		|		ПО ПоследниеПериодыСведенияОбУчетеЗатрат.Сотрудник = БухучетЗарплатыСотрудников.Сотрудник
		|			И ПоследниеПериодыСведенияОбУчетеЗатрат.ПериодЗаписи = БухучетЗарплатыСотрудников.ПериодЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	БухучетЗарплатыСотрудников.Сотрудник,
		|	БухучетЗарплатыСотрудников.ПериодЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БухучетЗарплатыСотрудников.Период,
		|	БухучетЗарплатыСотрудников.ПериодЗаписи,
		|	БухучетЗарплатыСотрудников.Сотрудник,
		|	БухучетЗарплатыСотрудников.ДокументОснование,
		|	БухучетЗарплатыСотрудников.СпособОтраженияЗарплатыВБухучете,
		|	БухучетЗарплатыСотрудников.СтатьяФинансирования
		|ПОМЕСТИТЬ ВТСведенияОбУчетеЗатрат
		|ИЗ
		|	ВТПоследниеДокументыСведенияОбУчетеЗатрат КАК ПоследниеПериодыСведенияОбУчетеЗатрат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБухучетЗарплатыСотрудников КАК БухучетЗарплатыСотрудников
		|		ПО ПоследниеПериодыСведенияОбУчетеЗатрат.Сотрудник = БухучетЗарплатыСотрудников.Сотрудник
		|			И ПоследниеПериодыСведенияОбУчетеЗатрат.ПериодЗаписи = БухучетЗарплатыСотрудников.ПериодЗаписи
		|			И ПоследниеПериодыСведенияОбУчетеЗатрат.ДокументОснование = БухучетЗарплатыСотрудников.ДокументОснование";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТБухучетЗарплатыСотрудников", ИмяВТБухучетЗарплатыСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПоследниеПериодыСведенияОбУчетеЗатрат", ИмяВТПоследниеПериодыСведенияОбУчетеЗатрат);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПоследниеДокументыСведенияОбУчетеЗатрат", ИмяВТПоследниеДокументыСведенияОбУчетеЗатрат);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСведенияОбУчетеЗатрат", ИмяВТСведенияОбУчетеЗатрат);
	
	ЗапросВТИмяРегистраСрез.Текст = 
		ЗапросВТИмяРегистраСрез.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапроса;
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбУчетеЗатрат(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОбУчетеЗатрат") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТСведенияОбУчетеЗатрат = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОбУчетеЗатрат");
	
	ЗапросВТ = ЗапросВТСведенияОбУчетеЗатрат(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОбУчетеЗатрат);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОбУчетеЗатрат + " КАК БухучетЗарплатыСотрудников
			|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = БухучетЗарплатыСотрудников.Сотрудник
			|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = БухучетЗарплатыСотрудников.Период}";
				
КонецПроцедуры

// Сведения об оплате труда

Функция ДобавитьПолеСведенийОбОплатеТруда(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") И КадровыйУчет.НеобходимыСведенияОбОплатеТруда(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОбОплатеТруда", Истина);
		
		ПутьКДанным = КадровыйУчет.ПутьКДаннымСведенийОбОплатеТруда(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОбОплатеТруда(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ОплатаТрудаПериодЗаписи")
		Или ИмяПоля = ВРег("ОплатаТрудаРегистратор")
		Или ИмяПоля = ВРег("ТарифнаяСтавка")
		Или ИмяПоля = ВРег("ФОТ")
		Или ИмяПоля = ВРег("Надбавка");
		
КонецФункции

Функция ПутьКДаннымСведенийОбОплатеТруда(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("Надбавка") Тогда
		ПутьКДанным = "	0";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ОплатаТрудаПериодЗаписи") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников.ПериодЗаписиНачислений";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ОплатаТрудаРегистратор") Тогда
		ПутьКДанным = "	ТарифныеСтавкиСотрудников.Регистратор";
	Иначе
		ПутьКДанным = "	ТарифныеСтавкиСотрудников." + ИмяПоля;
	КонецЕсли;

	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбОплатеТруда(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОбОплатеТруда") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТСведенияОбОплатеТруда = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОбОплатеТруда");
		
	ЗапросВТТарифныеСтавкиСотрудников = КадровыйУчет.ЗапросВТТарифныеСтавкиСотрудников(
		ТолькоРазрешенные,
		ИмяВТСведенияОбОплатеТруда,
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников,
		КадровыйУчет.ПоляОтбораСотрудников(ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + "," + ОписательВременнойТаблицыОтборов.ИмяПоляПериод),
		ПоляОтбораПериодическихДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТТарифныеСтавкиСотрудников);
	
	Запрос.Текст = 
		ЗапросВТТарифныеСтавкиСотрудников.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст	
		+ "
			|		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОбОплатеТруда + " КАК ТарифныеСтавкиСотрудников
			| 		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = ТарифныеСтавкиСотрудников.Сотрудник
			| 			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ТарифныеСтавкиСотрудников.Период}";
		
КонецПроцедуры

// Сведения о плановых авансах.

Функция ДобавитьПолеСведенийОПлановыхАвансах(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") И НеобходимыСведенияОПлановыхАвансах(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПлановыхАвансах", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОПлановыхАвансах(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОПлановыхАвансах(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("АвансПериодЗаписи")
		Или ИмяПоля = ВРег("АвансРегистратор")
		Или ИмяПоля = ВРег("СпособРасчетаАванса")
		Или ИмяПоля = ВРег("Аванс");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОПлановыхАвансах(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОПлановыхАвансах(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("АвансПериодЗаписи") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		ИначеЕсли ИмяПоля = ВРег("АвансРегистратор") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Регистратор";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ПлановыеАвансы", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОПлановыхАвансах(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("АвансПериодЗаписи") Тогда
		ПутьКДанным = "	СведенияОПлановыхАвансах.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("АвансРегистратор") Тогда
		ПутьКДанным = "	СведенияОПлановыхАвансах.Регистратор";
	Иначе
		ПутьКДанным = "	СведенияОПлановыхАвансах." + ИмяПоля;
	КонецЕсли;

	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенияОПлановыхАвансах(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОПлановыхАвансах = "ВТСведенияОПлановыхАвансах") Экспорт
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ПлановыеАвансы", ПоляОтбора);
	КонецЕсли;
	 
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПлановыеАвансы", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОПлановыхАвансах);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОПлановыхАвансах(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОПлановыхАвансах") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТСведенияОПлановыхАвансах = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСведенияОПлановыхАвансах");
	
	ЗапросВТ = ЗапросВТСведенияОПлановыхАвансах(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОПлановыхАвансах);
			
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЗапросВТ.Текст = СтрЗаменить(ЗапросВТ.Текст, 
		"{ГДЕ
			|	РегистрСведений.Сотрудник.*}", "");
			
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСведенияОПлановыхАвансах + " КАК СведенияОПлановыхАвансах
			|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОПлановыхАвансах.Сотрудник
			|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОПлановыхАвансах.Период}";
				
КонецПроцедуры

// Сведения о зарплатных проектах

Функция ДобавитьПолеСведенийОЗарплатныхПроектах(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных)
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОЗарплатныхПроектах(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОЗарплатныхПроектах", Истина);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "КадроваяИсторияСотрудников", "Организация");
		Иначе
			КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ПостоянныеКадровыеДанныеСотрудников", "Организация");
		КонецЕсли;
		
		ПутьКДанным = ПутьКДаннымСведенийОЗарплатныхПроектах(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОЗарплатныхПроектах(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ЗарплатныйПроектПериодРегистрации")
		Или ИмяПоля = ВРег("ЗарплатныйПроектРегистратор")
		Или ИмяПоля = ВРег("ЗарплатныйПроект")
		Или ИмяПоля = ВРег("НомерЛицевогоСчета");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОЗарплатныхПроектах(КритерииПоиска, УсловиеПоиска)
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОЗарплатныхПроектах(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("ЗарплатныйПроектПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
			
		ИначеЕсли ИмяПоля = ВРег("ЗарплатныйПроектРегистратор") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Документ";
			
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОЗарплатныхПроектах(ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ЗарплатныйПроектПериодРегистрации") Тогда
		ПутьКДанным = "	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЗарплатныйПроектРегистратор") Тогда
		ПутьКДанным = "	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Документ";
	Иначе
		ПутьКДанным = "	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам." + ИмяПоля;
	КонецЕсли;

	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОЗарплатныхПроектах(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных)
	
	Если ИсточникиДанных.Получить("СведенияОЗарплатныхПроектах") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписательВременнойТаблицыОтборовЛицевыхСчетов = ОбменСБанкамиПоЗарплатнымПроектам.ОписаниеВременнойТаблицыДляСоздатьВТЛицевыеСчетаСотрудников(Неопределено,
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + ".ФизическоеЛицо",
		ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ИмяВТЛицевыеСчетаСотрудниковПоЗарплатнымПроектам = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТЛицевыеСчетаСотрудниковПоЗарплатнымПроектам");
	ТекстЗапросаУникальныхЗаписей = ОбменСБанкамиПоЗарплатнымПроектам.ТекстЗапросаВТЛицевыеСчетаСотрудников(
		Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборовЛицевыхСчетов, ПоляОтбораПериодическихДанных, ИмяВТЛицевыеСчетаСотрудниковПоЗарплатнымПроектам);
	
	ТаблицыЗапроса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Запрос.Текст, ";", , Истина);
	ТекстПоследнегоЗапроса = ТаблицыЗапроса[ТаблицыЗапроса.Количество() - 1];
	
	ТекстЗаменыПоследнегоЗапроса = 
		ТекстЗапросаУникальныхЗаписей
		+ Символы.ПС + ";" + Символы.ПС
		+ ТекстПоследнегоЗапроса;
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстПоследнегоЗапроса, ТекстЗаменыПоследнегоЗапроса);
	
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТЛицевыеСчетаСотрудниковПоЗарплатнымПроектам + " КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам
			|		ПО ВЫРАЗИТЬ(ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " КАК Справочник.Сотрудники).ФизическоеЛицо = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС
			+ "			И (ВЫБОР
			|					КОГДА КадроваяИсторияСотрудников.Организация ЕСТЬ NULL
			|							ТОГДА ВЫРАЗИТЬ(ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " КАК Справочник.Сотрудники).ГоловнаяОрганизация
			|					ИНАЧЕ КадроваяИсторияСотрудников.Организация
			|				КОНЕЦ = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Организация)";
	Иначе
		Запрос.Текст = Запрос.Текст + Символы.ПС
			+ "			И (ПостоянныеКадровыеДанныеСотрудников.Организация = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Организация)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период}";
	
КонецПроцедуры

#КонецОбласти


#Область СобытияРегистровСведений

Процедура КадроваяИсторияСотрудниковПередЗаписью(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчет.ЗапомнитьСотрудниковДляОбновленияКадровыхДанных(НаборЗаписей);
	
КонецПроцедуры

Процедура КадроваяИсторияСотрудниковПриЗаписи(НаборЗаписей, Отказ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		// Обновлять записи необходимо, только при записи набора, содержащего первичные данные.
		Если НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") 
			И НаборЗаписей.ДополнительныеСвойства.ЭтоВторичныйНабор Тогда
			Возврат;
		КонецЕсли;
		
		КадровыйУчет.ОбновитьВторичныеКадровыеДанныеСотрудников(НаборЗаписей);
		
		Если НаборЗаписей.ДополнительныеСвойства.Свойство("СотрудникиДляОбновленияКадровыхДанных") Тогда
			КадровыйУчет.ОбновитьЗначенияДоступаСотрудников(НаборЗаписей.ДополнительныеСвойства.СотрудникиДляОбновленияКадровыхДанных);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		УправлениеДоступом.ОбновитьНаборыЗначенийДоступа(СтрокаНабора.Сотрудник);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПлановыеНачисленияПередЗаписью(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчет.ЗапомнитьСотрудниковДляОбновленияДанныхОбОплатеТруда(НаборЗаписей);
	
КонецПроцедуры

Процедура ПлановыеНачисленияПриЗаписи(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчет.ОбновитьВторичныеКадровыеДанныеСотрудников(НаборЗаписей);
	
КонецПроцедуры

// Функция рассчитывает списочную численность работников, 
// списочную численность женщин, списочную численность инвалидов на указанную дату.
//
// Параметры:
//		Организация
//		ДатаАктуальности
//
// Возвращаемое значение - Структура с полями ЧисленностьРаботников, ЧисленностьЖенщин, ЧисленностьИнвалидов.
//	
Функция СписочнаяЧисленностьРаботающих(Организация, ДатаАктуальности) Экспорт 
	
	Возврат СреднесписочнаяЧисленностьРаботающих(Организация, НачалоДня(ДатаАктуальности), КонецДня(ДатаАктуальности))
	
КонецФункции

Процедура ОбновитьВторичныеКадровыеДанныеСотрудников(НаборЗаписей) Экспорт
	
	Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		
		Если НаборЗаписей.ДополнительныеСвойства.Свойство("СотрудникиДляОбновленияКадровыхДанных") Тогда
			
			СохранитьДатыПриема = НаборЗаписей.ДополнительныеСвойства.Свойство("СохранитьДатыПриема");
			
			ОбновляемыеСотрудники = НаборЗаписей.ДополнительныеСвойства.СотрудникиДляОбновленияКадровыхДанных;
			КадровыйУчет.ОбновитьТекущиеКадровыеДанныеСпискаСотрудников(ОбновляемыеСотрудники, СохранитьДатыПриема);
			
		КонецЕсли;
		
		Если НаборЗаписей.ДополнительныеСвойства.Свойство("СотрудникиДляОбновленияДанныхОбОплатеТруда") Тогда
			
			ОбновляемыеСотрудники = НаборЗаписей.ДополнительныеСвойства.СотрудникиДляОбновленияДанныхОбОплатеТруда;
			КадровыйУчет.ОбновитьТекущиеТарифныеСтавки(ОбновляемыеСотрудники);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти
