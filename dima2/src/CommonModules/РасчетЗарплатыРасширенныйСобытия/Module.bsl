
#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиПодписокНаСобытия

Процедура РасчетЗарплатыРасчетныеДокументыНачисленияПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	СуммаНачислено = 0;
	МетаданныеДокумента = Источник.Метаданные();
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("ОплатаТруда") <> Неопределено Тогда 
		СуммаНачислено = Источник.ОплатаТруда.Итог("Результат");
	ИначеЕсли МетаданныеДокумента.ТабличныеЧасти.Найти("Начисления") <> Неопределено Тогда
		СуммаНачислено = Источник.Начисления.Итог("Результат");
	КонецЕсли; 
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("НачисленияПерерасчет") <> Неопределено Тогда
		СуммаНачислено = СуммаНачислено + Источник.НачисленияПерерасчет.Итог("Результат");
	КонецЕсли; 
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("НачисленияПоДоговорам") <> Неопределено Тогда
		СуммаНачислено = СуммаНачислено + Источник.НачисленияПоДоговорам.Итог("Результат");
	КонецЕсли; 
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("Пособия") <> Неопределено Тогда
		СуммаНачислено = СуммаНачислено + Источник.Пособия.Итог("Результат");
	КонецЕсли;     
	Источник.Начислено = СуммаНачислено;
	
КонецПроцедуры

Процедура РасчетЗарплатыРасчетныеДокументыУдержанияПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	СуммаУдержано = 0;
	МетаданныеДокумента = Источник.Метаданные();
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("Удержания") <> Неопределено Тогда
		СуммаУдержано = Источник.Удержания.Итог("Результат");
	КонецЕсли; 
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("НДФЛ") <> Неопределено Тогда
		СуммаУдержано = СуммаУдержано + Источник.НДФЛ.Итог("Налог");
	КонецЕсли; 
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("ПогашениеЗаймов") <> Неопределено Тогда
		СуммаУдержано = СуммаУдержано + Источник.ПогашениеЗаймов.Итог("ПогашениеПроцентов");
		СуммаУдержано = СуммаУдержано + Источник.ПогашениеЗаймов.Итог("ПогашениеЗайма");
		СуммаУдержано = СуммаУдержано + Источник.ПогашениеЗаймов.Итог("НалогНаМатериальнуюВыгоду");
	КонецЕсли; 
	Источник.Удержано = СуммаУдержано;
	
КонецПроцедуры

Процедура ПроверитьФормулуРасчетаОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(Источник.СпособРасчета) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ФормулаРасчета");
	КонецЕсли;
	
КонецПроцедуры

Процедура ИспользоватьСтатьиФинансированияЗарплатаПриЗаписи(Источник, Отказ) Экспорт

	Константы.ИспользоватьРасчетЗарплатыИСтатьиФинансированияЗарплата.Установить(Константы.ИспользоватьНачислениеЗарплаты.Получить() И Источник.Значение);

КонецПроцедуры

Процедура ЗаполнитьНастройкиРасчетаЗарплатыПриЗаписи(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.ЗаполнитьНастройкиРасчетаЗарплаты();
	
КонецПроцедуры

Процедура ЗаполнитьОрганизацииНабораЗаписейПоПодразделениямПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацииПодразделений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Источник.ВыгрузитьКолонку("Подразделение"), "Владелец");
	
	Для Каждого СтрокаНабора Из Источник Цикл
		СтрокаНабора.Организация = ОрганизацииПодразделений.Получить(СтрокаНабора.Подразделение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьИспользованиеМногофункциональностиВДокументахПриЗаписи(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.УстановитьИспользованиеМногофункциональностиВДокументах();
	
КонецПроцедуры

Процедура ПроверитьФОТНачислений(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли; 
	
	// Запись набора в служебных целях.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		Возврат;
	КонецЕсли; 
	
	Если Источник.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблиц") Тогда
		Возврат;
	КонецЕсли; 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Подготовка данных для перезаполнения планового ФОТ
	Запрос.УстановитьПараметр("Регистратор", Источник.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ЗаписываемыйНабор", Источник.Выгрузить());
	Запрос.УстановитьПараметр("НачисленияВходящиеВСоставФОТ", РасчетЗарплатыРасширенный.НачисленияВходящиеВСоставФОТ());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущийНабор.Период,
		|	ТекущийНабор.Сотрудник,
		|	ТекущийНабор.Начисление
		|ПОМЕСТИТЬ ВТТекущийНаборПлановыхНачислений
		|ИЗ
		|	РегистрСведений.ПлановыеНачисления КАК ТекущийНабор
		|ГДЕ
		|	ТекущийНабор.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаписываемыйНабор.Период,
		|	ЗаписываемыйНабор.Сотрудник,
		|	ЗаписываемыйНабор.Начисление
		|ПОМЕСТИТЬ ВТЗаписываемыйНаборПлановыхНачислений
		|ИЗ
		|	&ЗаписываемыйНабор КАК ЗаписываемыйНабор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ЕСТЬNULL(ТекущийНабор.Период, ЗаписываемыйНабор.Период)) КАК Период,
		|	ЕСТЬNULL(ТекущийНабор.Сотрудник, ЗаписываемыйНабор.Сотрудник) КАК Сотрудник,
		|	ЕСТЬNULL(ТекущийНабор.Начисление, ЗаписываемыйНабор.Начисление) КАК Начисление,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ЗаписываемыйНабор.Начисление ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ДвижениеУдаляется
		|ПОМЕСТИТЬ ВТДатыИзмененияНачислений
		|ИЗ
		|	ВТТекущийНаборПлановыхНачислений КАК ТекущийНабор
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТЗаписываемыйНаборПлановыхНачислений КАК ЗаписываемыйНабор
		|		ПО ТекущийНабор.Период = ЗаписываемыйНабор.Период
		|			И ТекущийНабор.Сотрудник = ЗаписываемыйНабор.Сотрудник
		|			И ТекущийНабор.Начисление = ЗаписываемыйНабор.Начисление
		|ГДЕ
		|	ЕСТЬNULL(ТекущийНабор.Начисление, ЗаписываемыйНабор.Начисление) В (&НачисленияВходящиеВСоставФОТ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ТекущийНабор.Сотрудник, ЗаписываемыйНабор.Сотрудник),
		|	ЕСТЬNULL(ТекущийНабор.Начисление, ЗаписываемыйНабор.Начисление)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДатыИзмененияНачислений.Начисление
		|ИЗ
		|	ВТДатыИзмененияНачислений КАК ДатыИзмененияНачислений";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Источник.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьФОТНачислений(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли; 
	
	// Запись набора в служебных целях.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблиц") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ИспользоватьОтложеннуюРегистрациюПлановогоФОТ") Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Источник.ДополнительныеСвойства.МенеджерВременныхТаблиц;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МИНИМУМ(ДатыИзмененияНачислений.Период) КАК ДатаНачала,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
			|	ДатыИзмененияНачислений.Сотрудник,
			|	ДатыИзмененияНачислений.Начисление,
			|	ДатыИзмененияНачислений.ДвижениеУдаляется
			|ИЗ
			|	ВТДатыИзмененияНачислений КАК ДатыИзмененияНачислений
			|
			|СГРУППИРОВАТЬ ПО
			|	ДатыИзмененияНачислений.Сотрудник,
			|	ДатыИзмененияНачислений.Начисление,
			|	ДатыИзмененияНачислений.ДвижениеУдаляется";
			
		Источник.ДополнительныеСвойства.Вставить("НачисленияСотрудниковДляРасчетаФОТ",
			Запрос.Выполнить().Выгрузить());
		
	Иначе
		РасчетЗарплатыРасширенный.СформироватьДвиженияПлановогоФОТПоРегистратору(Источник);
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Удалить("МенеджерВременныхТаблиц");
	
КонецПроцедуры

Процедура ПроверитьФОТНачисленийПериодическихПоказателейРасчетаЗарплатыСотрудников(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли; 
	
	// Запись набора в служебных целях.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		Возврат;
	КонецЕсли; 
	
	Если Источник.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблиц") Тогда
		Возврат;
	КонецЕсли; 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Подготовка данных для перезаполнения планового ФОТ
	Запрос.УстановитьПараметр("Регистратор", Источник.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ЗаписываемыйНабор", Источник.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияПоказателей.Период,
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.Значение
		|ПОМЕСТИТЬ ВТТекущийНаборПоказателей
		|ИЗ
		|	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
		|ГДЕ
		|	ЗначенияПоказателей.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Период,
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.Значение
		|ПОМЕСТИТЬ ВТЗаписываемыйНаборПоказателей
		|ИЗ
		|	&ЗаписываемыйНабор КАК ЗначенияПоказателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МИНИМУМ(ЕСТЬNULL(ТекущийНаборПоказателей.Период, ЗаписываемыйНаборПоказателей.Период)) КАК Период,
		|	ЕСТЬNULL(ТекущийНаборПоказателей.Сотрудник, ЗаписываемыйНаборПоказателей.Сотрудник) КАК Сотрудник,
		|	ЕСТЬNULL(ТекущийНаборПоказателей.Показатель, ЗаписываемыйНаборПоказателей.Показатель) КАК Показатель,
		|	ЛОЖЬ КАК ДвижениеУдаляется
		|ПОМЕСТИТЬ ВТИзменяемыеПоказатели
		|ИЗ
		|	ВТТекущийНаборПоказателей КАК ТекущийНаборПоказателей
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТЗаписываемыйНаборПоказателей КАК ЗаписываемыйНаборПоказателей
		|		ПО ТекущийНаборПоказателей.Сотрудник = ЗаписываемыйНаборПоказателей.Сотрудник
		|			И ТекущийНаборПоказателей.Показатель = ЗаписываемыйНаборПоказателей.Показатель
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ТекущийНаборПоказателей.Сотрудник, ЗаписываемыйНаборПоказателей.Сотрудник),
		|	ЕСТЬNULL(ТекущийНаборПоказателей.Показатель, ЗаписываемыйНаборПоказателей.Показатель)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИзменяемыеПоказатели.Показатель
		|ИЗ
		|	ВТИзменяемыеПоказатели КАК ИзменяемыеПоказатели";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.УстановитьПараметр("НачисленияВходящиеВСоставФОТ", РасчетЗарплатыРасширенный.НачисленияВходящиеВСоставФОТ());
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИзменяемыеПоказатели.Период,
			|	ИзменяемыеПоказатели.Сотрудник,
			|	НачисленияПоказатели.Ссылка КАК Начисление,
			|	ИзменяемыеПоказатели.ДвижениеУдаляется
			|ПОМЕСТИТЬ ВТДатыИзмененияНачислений
			|ИЗ
			|	ВТИзменяемыеПоказатели КАК ИзменяемыеПоказатели
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
			|		ПО ИзменяемыеПоказатели.Показатель = НачисленияПоказатели.Показатель
			|			И (НачисленияПоказатели.Ссылка В (&НачисленияВходящиеВСоставФОТ))";
		
		Запрос.Выполнить();
		Источник.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВторичныеЗаписиНачисленийЗависящихОтСтажаПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтажиФизическихЛиц", Источник.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтажиФизическихЛиц.ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	СтажиФизическихЛиц.ДатаОтсчета,
		|	СтажиФизическихЛиц.РазмерМесяцев,
		|	СтажиФизическихЛиц.РазмерДней
		|ПОМЕСТИТЬ ВТЗаписываемыйНабор
		|ИЗ
		|	&СтажиФизическихЛиц КАК СтажиФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтажиФизическихЛиц.ФизическоеЛицо,
		|	СтажиФизическихЛиц.ВидСтажа,
		|	СтажиФизическихЛиц.ДатаОтсчета,
		|	СтажиФизическихЛиц.РазмерМесяцев,
		|	СтажиФизическихЛиц.РазмерДней
		|ПОМЕСТИТЬ ВТТекущийНабор
		|ИЗ
		|	РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
		|ГДЕ
		|	&ОтборЗаписываемогоНабора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ТекущийНабор.ФизическоеЛицо, ЗаписываемыйНабор.ФизическоеЛицо) КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ТекущийНабор.ВидСтажа, ЗаписываемыйНабор.ВидСтажа) КАК ВидСтажа
		|ИЗ
		|	ВТТекущийНабор КАК ТекущийНабор
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТЗаписываемыйНабор КАК ЗаписываемыйНабор
		|		ПО ТекущийНабор.ФизическоеЛицо = ЗаписываемыйНабор.ФизическоеЛицо
		|			И ТекущийНабор.ВидСтажа = ЗаписываемыйНабор.ВидСтажа
		|ГДЕ
		|	(ЕСТЬNULL(ЗаписываемыйНабор.ДатаОтсчета, ЕСТЬNULL(ТекущийНабор.ДатаОтсчета, 0)) <> ЕСТЬNULL(ТекущийНабор.ДатаОтсчета, 0)
		|			ИЛИ ЕСТЬNULL(ЗаписываемыйНабор.РазмерМесяцев, ЕСТЬNULL(ТекущийНабор.ДатаОтсчета, 0)) <> ЕСТЬNULL(ТекущийНабор.РазмерМесяцев, 0)
		|			ИЛИ ЕСТЬNULL(ЗаписываемыйНабор.РазмерДней, ЕСТЬNULL(ТекущийНабор.ДатаОтсчета, 0)) <> ЕСТЬNULL(ТекущийНабор.РазмерДней, 0))";
	
	ОтборЗаписываемогоНабора = "";
	Для каждого ЭлементОтбора Из Источник.Отбор Цикл
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли; 
		
		УсловиеОтбора = "СтажиФизическихЛиц." + ЭлементОтбора.Имя + " = &СтажиФизическихЛиц" + ЭлементОтбора.Имя;
		ОтборЗаписываемогоНабора = ?(ПустаяСтрока(ОтборЗаписываемогоНабора), "", ОтборЗаписываемогоНабора + Символы.ПС + "И ") + УсловиеОтбора;
		
		Запрос.УстановитьПараметр("СтажиФизическихЛиц" + ЭлементОтбора.Имя, ЭлементОтбора.Значение);
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЗаписываемогоНабора", "(" + ?(ПустаяСтрока(ОтборЗаписываемогоНабора), "ИСТИНА", ОтборЗаписываемогоНабора) + ")");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Источник.ДополнительныеСвойства.Вставить("ОбновляемыеВидыСтажей", РезультатЗапроса.Выгрузить());
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПерезаполнитьВторичныеЗаписиНачисленийЗависящихОтСтажаПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ОбновляемыеВидыСтажей") Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОбновляемыеВидыСтажей", Источник.ДополнительныеСвойства.ОбновляемыеВидыСтажей);
	Запрос.УстановитьПараметр("НачислениеСевернаяНадбавка", РасчетЗарплаты.НачислениеСевернаяНадбавка());
	Запрос.УстановитьПараметр("НачисленияВходящиеВСоставФОТ", РасчетЗарплатыРасширенный.НачисленияВходящиеВСоставФОТ());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбновляемыеВидыСтажей.ФизическоеЛицо,
		|	ОбновляемыеВидыСтажей.ВидСтажа
		|ПОМЕСТИТЬ ВТОбновляемыеВидыСтажей
		|ИЗ
		|	&ОбновляемыеВидыСтажей КАК ОбновляемыеВидыСтажей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбновляемыеВидыСтажей.ФизическоеЛицо,
		|	НачисленияПоказатели.Ссылка КАК Начисление
		|ПОМЕСТИТЬ ВТВсеНачисленияЗависящиеОтСтажа
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбновляемыеВидыСтажей КАК ОбновляемыеВидыСтажей
		|		ПО НачисленияПоказатели.Показатель.ВидСтажа = ОбновляемыеВидыСтажей.ВидСтажа
		|			И (НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
		|ГДЕ
		|	НачисленияПоказатели.Ссылка В(&НачисленияВходящиеВСоставФОТ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбновляемыеВидыСтажей.ФизическоеЛицо,
		|	&НачислениеСевернаяНадбавка
		|ИЗ
		|	ВТОбновляемыеВидыСтажей КАК ОбновляемыеВидыСтажей
		|ГДЕ
		|	ВЫРАЗИТЬ(ОбновляемыеВидыСтажей.ВидСтажа КАК Справочник.ВидыСтажа).КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.Северный)
		|	И &НачислениеСевернаяНадбавка В (&НачисленияВходящиеВСоставФОТ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МИНИМУМ(ПлановыеНачисления.Период) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ЛОЖЬ КАК ДвижениеУдаляется
		|ПОМЕСТИТЬ ВТСотрудникиПериодыКРасчету
		|ИЗ
		|	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеНачисленияЗависящиеОтСтажа КАК НачисленияЗависящиеОтСтажа
		|		ПО ПлановыеНачисления.ФизическоеЛицо = НачисленияЗависящиеОтСтажа.ФизическоеЛицо
		|			И ПлановыеНачисления.Начисление = НачисленияЗависящиеОтСтажа.Начисление
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиПериодыКРасчету.Сотрудник
		|ИЗ
		|	ВТСотрудникиПериодыКРасчету КАК СотрудникиПериодыКРасчету";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		РасчетЗарплатыРасширенный.СформироватьДвиженияПлановогоФОТ(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериодыКРасчету", "Сотрудник");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработчик подписки на событие "ПриЗаписи" констант ИспользоватьНачислениеЗарплаты и
// ИспользоватьНесколькоОрганизаций.
// Заполняет значение константы ИспользоватьНачислениеЗарплатыНесколькихОрганизаций.
//
Процедура УстановитьЗначениеКонстантыИспользоватьНачислениеЗарплатыНесколькихОрганизаций(Источник, Отказ) Экспорт
				
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьНачислениеЗарплатыВНесколькихОрганизациях.Установить(ЗарплатаКадрыРасширенный.ИспользоватьНачислениеЗарплатыНесколькихОрганизаций());
	
КонецПроцедуры

// Обработчик подписки на событие "ПриЗаписи" констант РаботаВХозрасчетнойОрганизации и
// ИспользоватьНесколькоОрганизаций.
// Заполняет значение константы ИспользоватьНачислениеЗарплатыНесколькихОрганизаций.
//
Процедура УстановитьЗначениеКонстантыРаботаВНесколькихХозрасчетныхОрганизациях(Источник, Отказ) Экспорт
										
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Константы.РаботаВНесколькихХозрасчетныхОрганизациях.Установить(ЗарплатаКадрыРасширенный.РаботаВНесколькихХозрасчетныхОрганизациях());
	
КонецПроцедуры

Процедура УстановитьИспользованиеРасчетаПервойПоловиныМесяца(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.УстановитьИспользованиеРасчетаПервойПоловиныМесяца();
	
КонецПроцедуры

Процедура ЗаполнитьНачисленияВнутреннихСовместителейИПодработок(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НаборЗаписейИсточник", Источник.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ВидЗанятости
		|ПОМЕСТИТЬ ВТНаборЗаписейИсточника
		|ИЗ
		|	&НаборЗаписейИсточник КАК КадроваяИсторияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НаборЗаписейИсточника.ФизическоеЛицо,
		|	НаборЗаписейИсточника.Период КАК Период,
		|	НаборЗаписейИсточника.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	ВТНаборЗаписейИсточника КАК НаборЗаписейИсточника
		|ГДЕ
		|	НаборЗаписейИсточника.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГоловнаяОрганизация,
		|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
			
			УничтожитьВТСотрудникиОрганизации = Ложь;
			Пока Выборка.СледующийПоЗначениюПоля("Период") Цикл
				
				ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
				ПараметрыПолучения.Организация = Выборка.ГоловнаяОрганизация;
				ПараметрыПолучения.ОтбиратьПоГоловнойОрганизации = Истина;
				ПараметрыПолучения.НачалоПериода = Выборка.Период;
				ПараметрыПолучения.ОкончаниеПериода = Выборка.Период;
				ПараметрыПолучения.КадровыеДанные = "ВидЗанятости";
				
				СписокФизическихЛиц = Новый Массив;
				Пока Выборка.Следующий() Цикл
					СписокФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);
				КонецЦикла; 
				ПараметрыПолучения.СписокФизическихЛиц = СписокФизическихЛиц;
				
				Если УничтожитьВТСотрудникиОрганизации Тогда
					Запрос.Текст = "Уничтожить ВТСотрудникиОрганизации";
					Запрос.Выполнить();
				Иначе
					УничтожитьВТСотрудникиОрганизации = Истина;
				КонецЕсли;
				
				КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолучения);
				
				Запрос.Текст =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	МИНИМУМ(СотрудникиОрганизации.Период) КАК Период,
					|	СотрудникиОрганизации.Сотрудник
					|ИЗ
					|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
					|ГДЕ
					|	СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
					|
					|СГРУППИРОВАТЬ ПО
					|	СотрудникиОрганизации.Сотрудник";
				
				РезультатЗапросаПоПериодам = Запрос.Выполнить();
				Если Не РезультатЗапросаПоПериодам.Пустой() Тогда
					
					ВыборкаПоПериодам = РезультатЗапросаПоПериодам.Выбрать();
					Пока ВыборкаПоПериодам.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(ТаблицаСотрудников.Добавить(), ВыборкаПоПериодам);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(ВТНаборЗаписейИсточника.Период) КАК Период,
		|	ВЫРАЗИТЬ(ВТНаборЗаписейИсточника.Сотрудник КАК Справочник.Сотрудники).ГоловнойСотрудник КАК Сотрудник
		|ИЗ
		|	ВТНаборЗаписейИсточника КАК ВТНаборЗаписейИсточника
		|ГДЕ
		|	ВТНаборЗаписейИсточника.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Подработка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫРАЗИТЬ(ВТНаборЗаписейИсточника.Сотрудник КАК Справочник.Сотрудники).ГоловнойСотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаСотрудников.Добавить(),  Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Период,
		|	ТаблицаСотрудников.Сотрудник
		|ПОМЕСТИТЬ ВТТаблицаСотрудников
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Регистратор
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО (НАЧАЛОПЕРИОДА(ТаблицаСотрудников.Период, МЕСЯЦ) <= Начисления.ПериодДействияНачало)
		|			И ТаблицаСотрудников.Сотрудник = Начисления.Сотрудник
		|ГДЕ
		|	(ВЫРАЗИТЬ(Начисления.ВидРасчета КАК ПланВидовРасчета.Начисления).ДублироватьДляВнутреннихСовместителейИПодработок
		|			ИЛИ ВЫРАЗИТЬ(Начисления.ВидРасчета КАК ПланВидовРасчета.Начисления).ДублироватьДляПодработок)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			Если РегистрыРасчета.Начисления.ДополнитьНаборЗаписейНачислениямиСовместителейИПодработок(НаборЗаписей) Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИзменениеГрафиковРаботыСотрудников(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли; 
	
	// Запись набора в служебных целях.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблиц") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Подготовка данных для перезаполнения планового ФОТ
	Запрос.УстановитьПараметр("Регистратор", Источник.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ЗаписываемыйНабор", Источник.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГрафикРаботыСотрудников.Период,
		|	ГрафикРаботыСотрудников.Сотрудник,
		|	ГрафикРаботыСотрудников.ГрафикРаботы,
		|	ГрафикРаботыСотрудников.ДействуетДо,
		|	ГрафикРаботыСотрудников.ГрафикРаботыПоОкончании
		|ПОМЕСТИТЬ ВТГрафикРаботыСотрудниковЗаписываемыйНабор
		|ИЗ
		|	&ЗаписываемыйНабор КАК ГрафикРаботыСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикРаботыСотрудников.Период,
		|	ГрафикРаботыСотрудников.Сотрудник,
		|	ГрафикРаботыСотрудников.ГрафикРаботы,
		|	ГрафикРаботыСотрудников.ДействуетДо,
		|	ГрафикРаботыСотрудников.ГрафикРаботыПоОкончании
		|ПОМЕСТИТЬ ВТГрафикРаботыСотрудниковТекущийНабор
		|ИЗ
		|	РегистрСведений.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
		|ГДЕ
		|	ГрафикРаботыСотрудников.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ТекущийНабор.Период, ЗаписываемыйНабор.Период) КАК Период,
		|	ЕСТЬNULL(ТекущийНабор.Сотрудник, ЗаписываемыйНабор.Сотрудник) КАК Сотрудник,
		|	ЛОЖЬ КАК ВозвратноеСобытие
		|ПОМЕСТИТЬ ВТСотрудникиСИзменениямиПредварительно
		|ИЗ
		|	ВТГрафикРаботыСотрудниковТекущийНабор КАК ТекущийНабор
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковЗаписываемыйНабор КАК ЗаписываемыйНабор
		|		ПО ТекущийНабор.Период = ЗаписываемыйНабор.Период
		|			И ТекущийНабор.Сотрудник = ЗаписываемыйНабор.Сотрудник
		|ГДЕ
		|	ЕСТЬNULL(ТекущийНабор.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)) <> ЕСТЬNULL(ЗаписываемыйНабор.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ТекущийНабор.ДействуетДо, ЗаписываемыйНабор.ДействуетДо),
		|	ЕСТЬNULL(ТекущийНабор.Сотрудник, ЗаписываемыйНабор.Сотрудник),
		|	ИСТИНА
		|ИЗ
		|	ВТГрафикРаботыСотрудниковТекущийНабор КАК ТекущийНабор
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковЗаписываемыйНабор КАК ЗаписываемыйНабор
		|		ПО ТекущийНабор.ДействуетДо = ЗаписываемыйНабор.ДействуетДо
		|			И ТекущийНабор.Сотрудник = ЗаписываемыйНабор.Сотрудник
		|ГДЕ
		|	ЕСТЬNULL(ТекущийНабор.ГрафикРаботыПоОкончании, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)) <> ЕСТЬNULL(ЗаписываемыйНабор.ГрафикРаботыПоОкончании, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(СотрудникиСИзменениямиПредварительно.Период) КАК Период,
		|	СотрудникиСИзменениямиПредварительно.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиСИзменениями
		|ИЗ
		|	ВТСотрудникиСИзменениямиПредварительно КАК СотрудникиСИзменениямиПредварительно
		|ГДЕ
		|	(СотрудникиСИзменениямиПредварительно.Период <> ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ НЕ СотрудникиСИзменениямиПредварительно.ВозвратноеСобытие)
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиСИзменениямиПредварительно.Сотрудник";
	
	Запрос.Выполнить();
	УстановитьДополнительноеСвойствоДляРасчетаФОТНачислений(Источник, МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ПроверитьИзменениеКадровыхДанныхСотрудников(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли; 
	
	// Запись набора в служебных целях.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблиц") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Подготовка данных для перезаполнения планового ФОТ
	Запрос.УстановитьПараметр("Регистратор", Источник.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ЗаписываемыйНабор", Источник.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	КадроваяИсторияСотрудников.КоличествоСтавок,
		|	КадроваяИсторияСотрудников.ДействуетДо,
		|	КадроваяИсторияСотрудников.КоличествоСтавокПоОкончании
		|ПОМЕСТИТЬ ВТКадроваяИсторияСотрудниковЗаписываемыйНабор
		|ИЗ
		|	&ЗаписываемыйНабор КАК КадроваяИсторияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	КадроваяИсторияСотрудников.КоличествоСтавок,
		|	КадроваяИсторияСотрудников.ДействуетДо,
		|	КадроваяИсторияСотрудников.КоличествоСтавокПоОкончании
		|ПОМЕСТИТЬ ВТКадроваяИсторияСотрудниковТекущийНабор
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ТекущийНабор.Период, ЗаписываемыйНабор.Период) КАК Период,
		|	ЕСТЬNULL(ТекущийНабор.Сотрудник, ЗаписываемыйНабор.Сотрудник) КАК Сотрудник,
		|	ЛОЖЬ КАК ВозвратноеСобытие
		|ПОМЕСТИТЬ ВТСотрудникиСИзменениямиПредварительно
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковТекущийНабор КАК ТекущийНабор
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковЗаписываемыйНабор КАК ЗаписываемыйНабор
		|		ПО ТекущийНабор.Период = ЗаписываемыйНабор.Период
		|			И ТекущийНабор.Сотрудник = ЗаписываемыйНабор.Сотрудник
		|ГДЕ
		|	ЕСТЬNULL(ТекущийНабор.КоличествоСтавок, НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(ЗаписываемыйНабор.КоличествоСтавок, НЕОПРЕДЕЛЕНО)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ТекущийНабор.ДействуетДо, ЗаписываемыйНабор.ДействуетДо),
		|	ЕСТЬNULL(ТекущийНабор.Сотрудник, ЗаписываемыйНабор.Сотрудник),
		|	ИСТИНА
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковТекущийНабор КАК ТекущийНабор
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковЗаписываемыйНабор КАК ЗаписываемыйНабор
		|		ПО ТекущийНабор.ДействуетДо = ЗаписываемыйНабор.ДействуетДо
		|			И ТекущийНабор.Сотрудник = ЗаписываемыйНабор.Сотрудник
		|ГДЕ
		|	ЕСТЬNULL(ТекущийНабор.КоличествоСтавокПоОкончании, НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(ЗаписываемыйНабор.КоличествоСтавокПоОкончании, НЕОПРЕДЕЛЕНО)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(СотрудникиСИзменениямиПредварительно.Период) КАК Период,
		|	СотрудникиСИзменениямиПредварительно.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиСИзменениями
		|ИЗ
		|	ВТСотрудникиСИзменениямиПредварительно КАК СотрудникиСИзменениямиПредварительно
		|ГДЕ
		|	(СотрудникиСИзменениямиПредварительно.Период <> ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ НЕ СотрудникиСИзменениямиПредварительно.ВозвратноеСобытие)
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиСИзменениямиПредварительно.Сотрудник";
	
	Запрос.Выполнить();
	УстановитьДополнительноеСвойствоДляРасчетаФОТНачислений(Источник, МенеджерВременныхТаблиц);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

Процедура РасчетФОТНачисленийЗависящихОтСтажа(ОбрабатываемыйМесяц = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если НЕ ЗначениеЗаполнено(ОбрабатываемыйМесяц) Тогда
		ОбрабатываемыйМесяц = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОбрабатываемыйМесяц", ОбрабатываемыйМесяц);
	
	РасчетЗарплатыРасширенный.СоздатьВТНачисленияЗависящиеОтСтажа(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.УстановитьПараметр("НачисленияВходящиеВСоставФОТ", РасчетЗарплатыРасширенный.НачисленияВходящиеВСоставФОТ());
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ОбрабатываемыйМесяц КАК Период,
		|	НачисленияЗависящиеОтСтажа.Начисление
		|ПОМЕСТИТЬ ВТИзмеренияДатыНачисленийЗависящихОтСтажа
		|ИЗ
		|	ВТНачисленияЗависящиеОтСтажа КАК НачисленияЗависящиеОтСтажа
		|ГДЕ
		|	НачисленияЗависящиеОтСтажа.Начисление В(&НачисленияВходящиеВСоставФОТ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИзмеренияДатыНачисленийЗависящихОтСтажа.Начисление
		|ИЗ
		|	ВТИзмеренияДатыНачисленийЗависящихОтСтажа КАК ИзмеренияДатыНачисленийЗависящихОтСтажа";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДатыНачисленийЗависящихОтСтажа",
			"Начисление"));
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДатыНачисленийЗависящихОтСтажа",
			"Начисление"));
			
	ИмяВТОтборНачислений = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтборНачислений");
	ИмяВТСотрудникиПериоды = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСотрудникиПериоды");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыйФОТ.Сотрудник,
		|	ПлановыйФОТ.Период,
		|	ПлановыйФОТ.Начисление
		|ПОМЕСТИТЬ ВТОтборНачислений
		|ИЗ
		|	ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ПО ПлановыйФОТ.Период = ПлановыеНачисления.Период
		|			И ПлановыйФОТ.Сотрудник = ПлановыеНачисления.Сотрудник
		|			И ПлановыйФОТ.Начисление = ПлановыеНачисления.Начисление
		|ГДЕ
		|	ПлановыеНачисления.Используется
		|	И НЕ ПлановыйФОТ.ПересчетНеТребуется
		|	И ПлановыйФОТ.ПериодЗаписи <> ПлановыйФОТ.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборНачислений.Сотрудник,
		|	ДОБАВИТЬКДАТЕ(ОтборНачислений.Период, МЕСЯЦ, -1) КАК Период,
		|	КОНЕЦПЕРИОДА(ОтборНачислений.Период, МЕСЯЦ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТОтборНачислений КАК ОтборНачислений";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборНачислений", ИмяВТОтборНачислений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
		
	Запрос.Выполнить();
	
	ИмяВТПериодыИзмененияСтажа = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПериодыИзмененияСтажа");
	КадровыйУчетРасширенный.СоздатьВТПериодыИзмененияСтажа(Запрос.МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяВТПериодыИзмененияСтажа);
	
	ОписательТаблиц = РасчетЗарплатыРасширенный.ОписательВременныхТаблицДляСоздатьВТПериодыИзмененияПоказателейЗависящихОтСтажа(
		Запрос.МенеджерВременныхТаблиц, ИмяВТОтборНачислений, ИмяВТПериодыИзмененияСтажа);
		
	РасчетЗарплатыРасширенный.СоздатьВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка(ОписательТаблиц);
	РасчетЗарплатыРасширенный.СоздатьВТПериодыИзмененияЗначенийСтажевыхПоказателей(ОписательТаблиц);

	ИмяВТСотрудниковКРасчетуПредварительно = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСотрудниковКРасчетуПредварительно");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборНачислений.Период,
		|	ОтборНачислений.Сотрудник,
		|	ОтборНачислений.Начисление
		|ПОМЕСТИТЬ ВТСотрудниковКРасчетуПредварительно
		|ИЗ
		|	ВТОтборНачислений КАК ОтборНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка КАК ПериодыИзмененияЗначенийПоказателя
		|		ПО ОтборНачислений.Сотрудник = ПериодыИзмененияЗначенийПоказателя.Сотрудник
		|			И ОтборНачислений.Начисление = ПериодыИзмененияЗначенийПоказателя.Начисление
		|			И ОтборНачислений.Период <= ПериодыИзмененияЗначенийПоказателя.Период
		|ГДЕ
		|	ПериодыИзмененияЗначенийПоказателя.КоэффициентПересчета <> 1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборНачислений.Период,
		|	ОтборНачислений.Сотрудник,
		|	ОтборНачислений.Начисление
		|ИЗ
		|	ВТОтборНачислений КАК ОтборНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИзмененияЗначенийСтажевыхПоказателей КАК ПериодыИзмененияЗначенийПоказателя
		|		ПО ОтборНачислений.Сотрудник = ПериодыИзмененияЗначенийПоказателя.Сотрудник
		|			И ОтборНачислений.Начисление = ПериодыИзмененияЗначенийПоказателя.Начисление
		|			И ОтборНачислений.Период <= ПериодыИзмененияЗначенийПоказателя.Период
		|ГДЕ
		|	ПериодыИзмененияЗначенийПоказателя.КоэффициентПересчета <> 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудниковКРасчетуПредварительно.Период КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(СотрудниковКРасчетуПредварительно.Период, МЕСЯЦ) КАК ДатаОкончания,
		|	СотрудниковКРасчетуПредварительно.Сотрудник,
		|	СотрудниковКРасчетуПредварительно.Начисление,
		|	ЛОЖЬ КАК ДвижениеУдаляется
		|ПОМЕСТИТЬ ВТСотрудниковКРасчету
		|ИЗ
		|	ВТСотрудниковКРасчетуПредварительно КАК СотрудниковКРасчетуПредварительно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПериодыИзмененияЗначенийСтажевыхПоказателей";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборНачислений", ИмяВТОтборНачислений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудниковКРасчетуПредварительно", ИмяВТСотрудниковКРасчетуПредварительно);
	
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	РасчетЗарплатыРасширенный.СформироватьДвиженияПлановогоФОТ(Запрос.МенеджерВременныхТаблиц, "ВТСотрудниковКРасчету", "Сотрудник", Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ИспользоватьСтатьиФинансированияЗарплатаПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

Процедура УстановитьДополнительноеСвойствоДляРасчетаФОТНачислений(Источник, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиСИзменениями.Сотрудник
		|ИЗ
		|	ВТСотрудникиСИзменениями КАК СотрудникиСИзменениями";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиСИзменениями", "Сотрудник");
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Начисление", "В", РасчетЗарплатыРасширенный.НачисленияВходящиеВСоставФОТ());
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Начисление.ВидВремени", "В", "ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы)");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеНачисления",
			МенеджерВременныхТаблиц,
			Ложь,
			ОписаниеФильтра,
			ПараметрыПостроения,
			"ВТДатыИзмененияНачисленийПредварительно");
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПлановыеНачисления.Сотрудник
			|ИЗ
			|	ВТДатыИзмененияНачисленийПредварительно КАК ПлановыеНачисления
			|ГДЕ
			|	ПлановыеНачисления.Используется";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ПлановыеНачисления.Период,
				|	ПлановыеНачисления.Сотрудник,
				|	ПлановыеНачисления.Начисление,
				|	ЛОЖЬ КАК ДвижениеУдаляется
				|ПОМЕСТИТЬ ВТДатыИзмененияНачислений
				|ИЗ
				|	ВТДатыИзмененияНачисленийПредварительно КАК ПлановыеНачисления
				|ГДЕ
				|	ПлановыеНачисления.Используется";
			
			Запрос.Выполнить();
			
			Источник.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
