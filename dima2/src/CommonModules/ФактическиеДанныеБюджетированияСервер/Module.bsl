
#Область СлужебныеПроцедурыИФункции

Функция НаборЗаписейОтраженияВБюджетировании(НомерЗадания, Регистратор)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКОтражениюВБюджетировании");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	
	НомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить();
	ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания",	НомерЗадания);
	ЭлементБлокировки.УстановитьЗначение("Документ",		Регистратор);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЗадания.Установить(НомерЗадания);
	НаборЗаписей.Отбор.Документ.Установить(Регистратор);
	
	Возврат НаборЗаписей;
	
КонецФункции

Процедура ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, ПериодЗаписи, ЕстьИзменения)
	
	Для Каждого Запись из НаборЗаписей Цикл
		Если Запись.ПериодЗаписи = ПериодЗаписи Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Запись = НаборЗаписей.Добавить();
	Запись.НомерЗадания = НомерЗадания;
	Запись.Документ = Регистратор;
	Запись.ПериодЗаписи = ПериодЗаписи;
	Запись.ИмяВидаДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Регистратор)).Имя;
	
	ЕстьИзменения = Истина;
	
КонецПроцедуры

Функция НужноСтавитьДокументВОчередьЗаданий(Источник)
	Перем КэшФОИспользоватьБюджетирование;
	
	Если Источник.ДополнительныеСвойства.Свойство("ИспользоватьБюджетирование", КэшФОИспользоватьБюджетирование) Тогда
		Если КэшФОИспользоватьБюджетирование = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование") Тогда
		Источник.ДополнительныеСвойства.Вставить("ИспользоватьБюджетирование", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Если Не ЗначениеЗаполнено(Источник.ОбменДанными.Отправитель) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ФактическиеДанныеБюджетирования") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ОборотыБюджетов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЭкземплярБюджета") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МетаданныеОбъекта = Источник.Метаданные();
	Если Метаданные.РегистрыНакопления.Содержит(МетаданныеОбъекта) Тогда
		Если Не Источник.Количество() Тогда
			Регистратор = Источник.Отбор.Регистратор.Значение;
			ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "ПометкаУдаления");
			Если ПометкаУдаления = Неопределено ИЛИ ПометкаУдаления = Истина Тогда
				Возврат Ложь;
			КонецЕсли;
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1 1 
			|ИЗ РегистрНакопления." + МетаданныеОбъекта.Имя + " 
			|ГДЕ Регистратор = &Регистратор";
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			Если Запрос.Выполнить().Пустой() Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПодпискиНаСобытия

Процедура ОтметитьДокументКОтражениюВБюджетированииПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НужноСтавитьДокументВОчередьЗаданий(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
		ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Для Каждого Движения из Источник.Движения Цикл
			Движения.ДополнительныеСвойства.Вставить("НеОтражатьВБюджетировании", Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьДокументКОтражениюВБюджетированииПриЗаписиНабораЗаписей(Источник, Отказ, РежимЗаписи) Экспорт
	Перем НомерЗадания;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НужноСтавитьДокументВОчередьЗаданий(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеОтражатьВБюджетировании") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	
	Регистратор = Источник.Отбор.Регистратор.Значение;
	НаборЗаписей = НаборЗаписейОтраженияВБюджетировании(НомерЗадания, Регистратор);
	НаборЗаписей.Прочитать();
	
	Периоды = Источник.Выгрузить(, "Период");
	Для Каждого СтрокаПериода из Периоды Цикл
		СтрокаПериода.Период = НачалоДня(СтрокаПериода.Период);
	КонецЦикла;
	Периоды.Свернуть("Период");
	
	Для Каждого СтрокаПериода из Периоды Цикл
		ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, СтрокаПериода.Период, ЕстьИзменения);
	КонецЦикла;
	
	Если Не Периоды.Количество() Тогда
		ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, Дата(1, 1, 1), ЕстьИзменения);
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьДокументКОтражениюВБюджетированииПриПроведении(Источник, Отказ, РежимЗаписи) Экспорт
	Перем НомерЗадания, ЕстьИзменения;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НужноСтавитьДокументВОчередьЗаданий(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	
	Регистратор = Источник.Ссылка;
	НаборЗаписей = НаборЗаписейОтраженияВБюджетировании(НомерЗадания, Регистратор);
	
	ВсеПериоды = Новый ТаблицаЗначений;
	ВсеПериоды.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Для Каждого Движения из Источник.Движения Цикл
		МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(Движения));
		Если ОбщегоНазначения.ЭтоРегистрБухгалтерии(МетаданныеРегистра) 
			ИЛИ ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
			Периоды = Движения.Выгрузить(, "Период");
			Периоды.Свернуть("Период");
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Периоды, ВсеПериоды);
		КонецЕсли;
	КонецЦикла;
	
	ВсеПериоды.Свернуть("Период");
	
	Для Каждого СтрокаПериода из ВсеПериоды Цикл
		ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, СтрокаПериода.Период, ЕстьИзменения);
	КонецЦикла;
	
	Если Не ВсеПериоды.Количество() Тогда
		ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, Дата(1, 1, 1), ЕстьИзменения);
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		НаборЗаписей.Записать();
		Если Константы.АктуализироватьФактБюджетированияПриПроведенииДокументов.Получить() Тогда
			ОтразитьДокументыФоновымЗаданием(,,Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьДокументКОтражениюВБюджетированииПриУдаленииПроведения(Источник, Отказ) Экспорт
	Перем НомерЗадания;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НужноСтавитьДокументВОчередьЗаданий(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	
	Регистратор = Источник.Ссылка;
	НаборЗаписей = НаборЗаписейОтраженияВБюджетировании(НомерЗадания, Регистратор);
	ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, Дата(1, 1, 1), ЕстьИзменения);
	
	Если ЕстьИзменения Тогда
		НаборЗаписей.Записать();
		Если Константы.АктуализироватьФактБюджетированияПриПроведенииДокументов.Получить() Тогда
			ОтразитьДокументыФоновымЗаданием(,,Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция СКДПравила(ОписаниеПравила)
	
	СКД = Неопределено;
	Если ОписаниеПравила.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		СКД = ОписаниеПравила.СхемаИсточникаДанных.Получить();
	Иначе
		СКД = Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.СхемаПолученияДанных(ОписаниеПравила);
	КонецЕсли;
	
	Возврат СКД;
	
КонецФункции

Функция ОпределитьИменаВидовДокументовПоСКД(ОписаниеПравила, КэшИменДокументов = Неопределено) Экспорт
	
	Если ТипЗнч(ОписаниеПравила) = Тип("СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КэшИменДокументовДляОбработкиПоПравилу.Правило,
		|	КэшИменДокументовДляОбработкиПоПравилу.ИмяВидаДокумента
		|ИЗ
		|	РегистрСведений.КэшИменДокументовДляОбработкиПоПравилу КАК КэшИменДокументовДляОбработкиПоПравилу
		|ГДЕ
		|	КэшИменДокументовДляОбработкиПоПравилу.Правило = &Правило";
		Запрос.УстановитьПараметр("Правило", ОписаниеПравила.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		ИменаВидовДокументов = РезультатЗапроса.Выгрузить();
		Правило = ОписаниеПравила.Ссылка;
	Иначе
		ИменаВидовДокументов = КэшИменДокументов.НайтиСтроки(Новый Структура("Правило", ОписаниеПравила.Правило));
		Правило = ОписаниеПравила.Правило;
	КонецЕсли;
	
	Если ИменаВидовДокументов.Количество() Тогда
		Возврат ИменаВидовДокументов;
	КонецЕсли;
		
	СКД = СКДПравила(ОписаниеПравила);
	Если СКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИменаВидовДокументов = Новый ТаблицаЗначений;
	ИменаВидовДокументов.Колонки.Добавить("Правило");
	ИменаВидовДокументов.Колонки.Добавить("ИмяВидаДокумента");
	
	Для Каждого Набор из СКД.НаборыДанных Цикл
		Если ТипЗнч(Набор) <> Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			НоваяСтрока = ИменаВидовДокументов.Добавить();
			НоваяСтрока.Правило = ОписаниеПравила.Правило;
			Прервать;
		Иначе
			СхемаЗапроса = Новый СхемаЗапроса;
			СхемаЗапроса.УстановитьТекстЗапроса(Набор.Запрос);
			Для Каждого ПакетЗапроса из СхемаЗапроса.ПакетЗапросов Цикл
				Для Каждого Колонка из ПакетЗапроса.Колонки Цикл
					Если НРег(Колонка.Псевдоним) <> НРег("Регистратор") Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Тип из Колонка.ТипЗначения.Типы() Цикл
						МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
						Если ОбщегоНазначения.ЭтоДокумент(МетаданныеТипа) Тогда
							НоваяСтрока = ИменаВидовДокументов.Добавить();
							НоваяСтрока.Правило = Правило;
							НоваяСтрока.ИмяВидаДокумента = МетаданныеТипа.Имя;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ИменаВидовДокументов.Количество() Тогда
		НоваяСтрока = ИменаВидовДокументов.Добавить();
		НоваяСтрока.Правило = Правило;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Правило.Установить(Правило);
	НаборЗаписей.Загрузить(ИменаВидовДокументов);
	НаборЗаписей.Записать();
	
	Возврат ИменаВидовДокументов;
	
КонецФункции

Процедура СформироватьДвиженияПоРегиструФактаБюджетирования(ДокументыКОбработке)
	
	СКДПравил = Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПолучитьМакет("ПравилаПолученияФакта");
	Настройки = СКДПравил.НастройкиПоУмолчанию;
	ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "ПромежуточноеКэшированиеРезультатовРаботыПравил", Истина);
	ТаблицаПравил = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКДПравил, Настройки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КэшИменДокументовДляОбработкиПоПравилу.Правило,
		|	КэшИменДокументовДляОбработкиПоПравилу.ИмяВидаДокумента
		|ИЗ
		|	РегистрСведений.КэшИменДокументовДляОбработкиПоПравилу КАК КэшИменДокументовДляОбработкиПоПравилу";
	
	РезультатЗапроса = Запрос.Выполнить();
	КэшИменДокументов = РезультатЗапроса.Выгрузить();
	
	СписокВсехДокументов = Новый СписокЗначений;
	СписокВсехДокументов.ЗагрузитьЗначения(ДокументыКОбработке.ВыгрузитьКолонку("Документ"));
	
	ДокументыКОбработке.Индексы.Добавить("ИмяВидаДокумента");
	
	ПараметрыПолученияФакта = ПараметрыПолученияФактаПоНастройкамОтчета();
	ТаблицаНаборовКЗаписи = БюджетированиеСервер.ТаблицаФактаПоСтатьямБюджетов(ПараметрыПолученияФакта);
	ТаблицаНаборовКЗаписи.Колонки.Добавить("Правило");
	
	Для Каждого ОписаниеПравила из ТаблицаПравил Цикл
		
		ИменаВидовДокументов = ОпределитьИменаВидовДокументовПоСКД(ОписаниеПравила, КэшИменДокументов);
		
		Если ИменаВидовДокументов = Неопределено Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru='Не выполнено правило бюджетирования';uk='Не виконано правило бюджетування'"),
									,,ОписаниеПравила.Правило,
									НСтр("ru='Не выполнено правило бюджетирования, т.к. не определена СКД получения данных';uk='Не виконано правило бюджетування, т. к. не визначена СКД отримання даних'"));
			Продолжить;
		КонецЕсли;
		
		Если ИменаВидовДокументов.Количество() = 1 И ИменаВидовДокументов[0].ИмяВидаДокумента = "" Тогда
			СписокДокументов = СписокВсехДокументов;
		Иначе
			СписокДокументов = Новый СписокЗначений;
			Для Каждого СтрокаИмениВидаДокумента из ИменаВидовДокументов Цикл
				СтруктураПоиска = Новый Структура("ИмяВидаДокумента", СтрокаИмениВидаДокумента.ИмяВидаДокумента);
				НайденныеСтроки = ДокументыКОбработке.НайтиСтроки(СтруктураПоиска);
				Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
					СписокДокументов.Добавить(НайденнаяСтрока.Документ);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если Не СписокДокументов.Количество() Тогда
			//Нет документов к обработке по правилу
			Продолжить;
		КонецЕсли;
		
		СКДПравила = СКДПравила(ОписаниеПравила);
		НастройкиКомпоновкиДанных = СКДПравила.НастройкиПоУмолчанию;
		ФинансоваяОтчетностьСервер.УстановитьОтбор(НастройкиКомпоновкиДанных.Отбор, "Регистратор", СписокДокументов, ВидСравненияКомпоновкиДанных.ВСписке);
		
		ПараметрыПолученияФакта = ПараметрыПолученияФактаПоНастройкамОтчета(ОписаниеПравила);
		ПараметрыПолученияФакта.ДополнительныйОтбор = НастройкиКомпоновкиДанных;
		
		// Подготовим таблицу факта
		ФактПоСтатьямБюджетов = БюджетированиеСервер.ТаблицаФактаПоСтатьямБюджетов(ПараметрыПолученияФакта);
	
		// Получим факт в соотвествии с правилами
		БюджетированиеСервер.ФактСтатьиБюджетовПоПравилу(ОписаниеПравила, ПараметрыПолученияФакта, ФактПоСтатьямБюджетов);
		
		ИсточникиСуммы = БюджетированиеСервер.ИсточникиСуммыПравила(СКДПравила, ОписаниеПравила);
		
		Если Не ИсточникиСуммы.Свойство("Упр") Тогда
			
			ФактПоСтатьямБюджетов.Колонки.Сумма.Имя = "СуммаХранения";
			ФактПоСтатьямБюджетов.Колонки.СуммаУпр.Имя = "Сумма";
			ПараметрыПолученияФакта.ВалютаОтчета = ПараметрыПолученияФакта.ВалютаУпр;
			
			БюджетированиеСервер.ПересчитатьТаблицуДанныхВВалюту(ФактПоСтатьямБюджетов, ПараметрыПолученияФакта, Истина);
			ФактПоСтатьямБюджетов.Колонки.Сумма.Имя = "СуммаУпр";
			ФактПоСтатьямБюджетов.Колонки.СуммаХранения.Имя = "Сумма";
			
		КонецЕсли;
		
		Если Не ИсточникиСуммы.Свойство("Регл") Тогда
			
			ФактПоСтатьямБюджетов.Колонки.Сумма.Имя = "СуммаХранения";
			ФактПоСтатьямБюджетов.Колонки.СуммаРегл.Имя = "Сумма";
			ПараметрыПолученияФакта.ВалютаОтчета = ПараметрыПолученияФакта.ВалютаРегл;
			
			БюджетированиеСервер.ПересчитатьТаблицуДанныхВВалюту(ФактПоСтатьямБюджетов, ПараметрыПолученияФакта, Истина);
			ФактПоСтатьямБюджетов.Колонки.Сумма.Имя = "СуммаРегл";
			ФактПоСтатьямБюджетов.Колонки.СуммаХранения.Имя = "Сумма";
			
		КонецЕсли;
		
		ФактПоСтатьямБюджетов.Колонки.Добавить("Правило");
		ФактПоСтатьямБюджетов.ЗаполнитьЗначения(ОписаниеПравила.Правило, "Правило");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ФактПоСтатьямБюджетов, ТаблицаНаборовКЗаписи);
		
	КонецЦикла;
	
	ТаблицаНаборовКЗаписи.Колонки.Добавить("Активность");
	ТаблицаНаборовКЗаписи.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаНаборовКЗаписи.Колонки.ВалютаХранения.Имя = "Валюта";
	ТаблицаНаборовКЗаписи.Колонки.Сумма.Имя = "СуммаВВалюте";
	ТаблицаНаборовКЗаписи.Индексы.Добавить("Регистратор");
	
	Для Каждого СтрокаДокумента из ДокументыКОбработке Цикл
		
		Если Не СтрокаДокумента.Документ.Метаданные().Движения.Содержит(
				Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.ФактическиеДанныеБюджетирования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтрокаДокумента.Документ);
		ДвиженияРегистратора = ТаблицаНаборовКЗаписи.НайтиСтроки(Новый Структура("Регистратор", СтрокаДокумента.Документ));
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДвиженияРегистратора, НаборЗаписей);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыПолученияФактаПоНастройкамОтчета(ОписаниеПравила = Неопределено)
	
	Параметры = БюджетированиеСервер.ПараметрыПолученияФакта();
	Если ОписаниеПравила <> Неопределено Тогда
		Параметры.Период = Новый СтандартныйПериод(ОписаниеПравила.Правило.ДействуетС, ОписаниеПравила.Правило.ДействуетПо);
	КонецЕсли;
	Параметры.ПоОрганизациям = Истина;
	Параметры.ПоПодразделениям = Истина;
	Параметры.РазворачиватьПоРегистратору = Истина;
	Параметры.ВозвращатьСуммуВВалюте = Ложь;
	Параметры.ВозвращатьУпрИРеглСуммы = Истина;
	
	Параметры.Периодичность = Перечисления.Периодичность.День;
	
	Возврат Параметры; 
	
КонецФункции

Процедура ОтразитьДокументыВБюджетировании(НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЧастичноеОтражениеДокументов = НачалоПериода <> Неопределено ИЛИ КонецПериода <> Неопределено;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКОтражениюВБюджетировании");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Блокировка.Заблокировать();
	ТекущийНомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
	
	Запрос = Новый Запрос;
	Если ЧастичноеОтражениеДокументов Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ПоместитьДокументыДляОтраженияВоВременнуюТаблицу(НачалоПериода, КонецПериода, МенеджерВременныхТаблиц);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ЗаданияКОтражениюВБюджетировании.НомерЗадания) КАК НомерЗадания
		|ПОМЕСТИТЬ ЗаданиеКОбработке
		|ИЗ
		|	РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК ЗаданияКОтражениюВБюджетировании
		|ГДЕ
		|	ЗаданияКОтражениюВБюджетировании.НомерЗадания <= &НомерЗадания
		|	//%ФильтрНаДокументы%
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерЗадания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10001
		|	ЗаданияКОтражениюВБюджетировании.Документ,
		|	ЗаданияКОтражениюВБюджетировании.НомерЗадания,
		|	ЗаданияКОтражениюВБюджетировании.ИмяВидаДокумента
		|ИЗ
		|	ЗаданиеКОбработке КАК ЗаданиеКОбработке
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК ЗаданияКОтражениюВБюджетировании
		|		ПО ЗаданиеКОбработке.НомерЗадания = ЗаданияКОтражениюВБюджетировании.НомерЗадания
		|ГДЕ
		|	НЕ ЗаданияКОтражениюВБюджетировании.НомерЗадания ЕСТЬ NULL 
		|	//%ФильтрНаДокументы%";
		
	Если ЧастичноеОтражениеДокументов Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%ФильтрНаДокументы%", " И Документ В (ВЫБРАТЬ Документ ИЗ ДокументыКОтражению)");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЗадания", ТекущийНомерЗадания);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ЗафиксироватьТранзакцию();
		Возврат;
	КонецЕсли;
	
	Константы.НомерЗаданияКОтражениюВБюджетировании.Установить(ТекущийНомерЗадания + 1);
	ЗафиксироватьТранзакцию();
	
	ЕстьЧтоОбрабатывать = Истина;
	
	Пока ЕстьЧтоОбрабатывать Цикл
		
		ДокументыКОбработке = РезультатЗапроса.Выгрузить();
		ОбрабатываетсяПорция = ДокументыКОбработке.Количество() = 10001;
		
		СформироватьДвиженияПоРегиструФактаБюджетирования(ДокументыКОбработке);
		
		НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
		Если ОбрабатываетсяПорция ИЛИ ЧастичноеОтражениеДокументов Тогда
			
			НачатьТранзакцию();
			
			Для Каждого СтрокаДокумента из ДокументыКОбработке Цикл
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
				ЭлементБлокировки.УстановитьЗначение("НомерЗадания",	СтрокаДокумента.НомерЗадания);
				ЭлементБлокировки.УстановитьЗначение("Документ",		СтрокаДокумента.Документ);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				НаборЗаписей.Отбор.НомерЗадания.Установить(СтрокаДокумента.НомерЗадания);
				НаборЗаписей.Отбор.Документ.Установить(СтрокаДокумента.Документ);
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Иначе
			
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить();
			ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
			ЭлементБлокировки.УстановитьЗначение("НомерЗадания", ДокументыКОбработке[0].НомерЗадания);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			НаборЗаписей.Отбор.НомерЗадания.Установить(ДокументыКОбработке[0].НомерЗадания);
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
		Если ЧастичноеОтражениеДокументов Тогда
			МенеджерВременныхТаблиц.Закрыть();
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ПоместитьДокументыДляОтраженияВоВременнуюТаблицу(НачалоПериода, КонецПериода, МенеджерВременныхТаблиц);
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьЧтоОбрабатывать = Не РезультатЗапроса.Пустой();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиАктуальностьОтраженияФактическихДанных(ДокументРезультат, ДопСвойства, ПроверятьАктивныеЗадания = Истина) Экспорт
	
	НужнаНадпись = ДопСвойства.Свойство("КоличествоДокументовКОтражениюВБюджетировании");
	
	Если ПроверятьАктивныеЗадания Тогда
		Ключ = "ОтражениеДокументовВБюджетировании";
		
		Отбор = Новый Структура();
		Отбор.Вставить("Ключ", Ключ);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		
		АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Если АктивныеЗадания.Количество() = 0 Тогда
			НужнаНадпись = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НужнаНадпись Тогда
		ТаблицаПредупреждение = Новый ТабличныйДокумент;
		ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
		ТекстПредупреждения = НСтр("ru='Отражения в бюджетировании ожидает %Количество документов 
                                    |Запущено задание по распределению расчетов с %НачалоПериода по %КонецПериода. 
                                    |После отражения Вам будет предложено переформировать отчет.'
                                    |;uk='Відображення в бюджетуванні очікує %Количество документів 
                                    |Запущене завдання розподілу розрахунків з %НачалоПериода по %КонецПериода. 
                                    |Після відображення Вам буде запропоновано переформувати звіт.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%Количество", ДопСвойства.КоличествоДокументовКОтражениюВБюджетировании);
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%НачалоПериода", Формат(ДопСвойства.НачалоПериода, "ДФ=dd.MM.yyyy; ДЛФ=D"));
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения,"%КонецПериода", Формат(ДопСвойства.КонецПериода, "ДФ=dd.MM.yyyy; ДЛФ=D"));
		ОбластьПредупреждение.Текст = ТекстПредупреждения;
		ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		ДокументРезультат.ВставитьОбласть(ТаблицаПредупреждение.Область(1,,1,), ДокументРезультат.Область(1,,1,), ТипСмещенияТабличногоДокумента.ПоВертикали);
	Иначе
		ДопСвойства.Удалить("КоличествоДокументовКОтражениюВБюджетировании");
		ДопСвойства.Удалить("НачалоПериода");
		ДопСвойства.Удалить("КонецПериода");
	КонецЕсли;
	
КонецПроцедуры

Функция ПоместитьДокументыДляОтраженияВоВременнуюТаблицу(Знач НачалоПериода, Знач КонецПериода, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	Задания.Документ КАК Документ
	                      |ПОМЕСТИТЬ ДокументыПериода
	                      |ИЗ
	                      |	РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК Задания
	                      |ГДЕ
	                      |	Задания.ПериодЗаписи МЕЖДУ &НачалоПериода И &КонецПериода
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ЗаданияКОтражениюВБюджетировании.Документ
	                      |ПОМЕСТИТЬ ДокументыСПустымПериодом
	                      |ИЗ
	                      |	РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК ЗаданияКОтражениюВБюджетировании
	                      |ГДЕ
	                      |	ЗаданияКОтражениюВБюджетировании.ПериодЗаписи = ДАТАВРЕМЯ(1, 1, 1)
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	ЗаданияКОтражениюВБюджетировании.Документ
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ДокументыСПустымПериодом.Документ КАК Документ
	                      |ПОМЕСТИТЬ ДокументыКОтражению
	                      |ИЗ
	                      |	ДокументыСПустымПериодом КАК ДокументыСПустымПериодом
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеДанныеБюджетирования КАК ФактическиеДанныеБюджетирования
	                      |		ПО ДокументыСПустымПериодом.Документ = ФактическиеДанныеБюджетирования.Регистратор
	                      |ГДЕ
	                      |	ФактическиеДанныеБюджетирования.Период МЕЖДУ &НачалоПериода И &КонецПериода
	                      |
	                      |ОБЪЕДИНИТЬ
	                      |
	                      |ВЫБРАТЬ
	                      |	ДокументыПериода.Документ
	                      |ИЗ
	                      |	ДокументыПериода КАК ДокументыПериода");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = Дата(3999, 12, 31, 23, 59, 59);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Запрос.Выполнить();
	
КонецФункции

Процедура ОтразитьДокументыФоновымЗаданием(НачалоПериода, КонецПериода, ОжидатьВыполнения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ключ = "ОтражениеДокументовВБюджетировании";
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru='Выполняется отражение документов в бюджетировании';uk='Виконується відображення документів в бюджетуванні'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(НачалоПериода);
	ПараметрыЭкспортнойПроцедуры.Добавить(КонецПериода);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("ФактическиеДанныеБюджетированияСервер.ОтразитьДокументыВБюджетировании");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
	Если ОжидатьВыполнения Тогда
		Попытка
			ФоновоеЗадание.ОжидатьЗавершения(1);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры
