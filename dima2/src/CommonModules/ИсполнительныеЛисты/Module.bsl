
#Область СлужебныйПрограммныйИнтерфейс

// Заполняет движения условиями удержания по исполнительному документу.
//
// Параметры:
//	Движения
//	ДатаДействия
//	ИсполнительныйДокумент
//	УсловияИсполнительногоЛиста - структура с полями
//		СпособРасчета
//		ВидБазы.
//		Процент
//		Сумма
//		Числитель
//		Знаменатель
//		ПрожиточныйМинимум
//		Предел
//		УчитыватьБольничныеЛисты
//		ПлатежныйАгент
//		ТарифПлатежногоАгента
//
Процедура ЗарегистрироватьУсловияИсполнительногоЛиста(Движения, ДатаДействия, ИсполнительныйДокумент, УсловияИсполнительногоЛиста) Экспорт
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсполнительныйДокумент, "ФизическоеЛицо,Организация");
	
	// Условия удержания
	НоваяСтрока = Движения.УсловияУдержанияПоИсполнительномуДокументу.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, УсловияИсполнительногоЛиста);
	НоваяСтрока.Период = ДатаДействия;
	НоваяСтрока.ИсполнительныйДокумент = ИсполнительныйДокумент;
	НоваяСтрока.ФизическоеЛицо = ДанныеДокумента.ФизическоеЛицо;
	НоваяСтрока.Организация = ДанныеДокумента.Организация;
	
	Движения.УсловияУдержанияПоИсполнительномуДокументу.Записывать = Истина;
	
КонецПроцедуры

// Выполняет расчет записей, если способ расчета - «Исполнительный лист».
//
Процедура РассчитатьУдержанияПоИсполнительнымЛистам(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка, ДополнительныеПараметры) Экспорт
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаУдержаний.ИсполнительныйЛист Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем таблицу значений с исходными данными.
	// По этим исходным данным получим:
	//	- дополнение к расчетной базе: начисления по договорам, мат помощь и др.
	//	- НДФЛ, который нужно вычесть из расчетной базы,
	//	- сумму уже удержанную по этому исполнительному документу в этом периоде.
	// Дополнение к расчетной базе распределяем пропорционально длительности периода в календарных днях (т.к. расчетная
	// база может отсутствовать).
	
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИсполнительныйДокумент", Новый ОписаниеТипов("ДокументСсылка.ИсполнительныйЛист"));
	ДанныеДляРасчета.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДанныеДляРасчета.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДляРасчета.Колонки.Добавить("РазностьДат", Новый ОписаниеТипов("Число"));
	ДанныеДляРасчета.Колонки.Добавить("РасчетнаяБаза", Новый ОписаниеТипов("Число"));
	ДанныеДляРасчета.Колонки.Добавить("Удержано", Новый ОписаниеТипов("Число"));
	ДанныеДляРасчета.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	
	// Создаем соответствие для поиска строк таблицы данных.
	СтрокиПоИдентификатору = Новый Соответствие;
	
	НачалоПериода = Неопределено;
	ОкончаниеПериода = Неопределено;
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		ЗаписьРасчета = СтрокаТаблицы.ЗаписьРасчета;
		Если ЗаписьРасчета.ФиксРасчет Тогда
			СтрокаТаблицы.ИсходныеДанные.Результат = ЗаписьРасчета.Результат;
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ДанныеДляРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаписьРасчета);
		НоваяСтрока.ИсполнительныйДокумент = ЗаписьРасчета.ДокументОснование;
		НоваяСтрока.Период = ЗаписьРасчета.БазовыйПериодНачало;
		НоваяСтрока.Месяц = НачалоМесяца(ЗаписьРасчета.БазовыйПериодНачало);
		НоваяСтрока.РазностьДат = ЗаписьРасчета.БазовыйПериодКонец - ЗаписьРасчета.БазовыйПериодНачало;
		НоваяСтрока.РасчетнаяБаза = СтрокаТаблицы.ИсходныеДанные.РасчетнаяБаза;
		Если НачалоПериода = Неопределено Тогда
			НачалоПериода = НачалоМесяца(ЗаписьРасчета.БазовыйПериодНачало);
		КонецЕсли;
		Если ОкончаниеПериода = Неопределено Тогда
			ОкончаниеПериода = КонецМесяца(ЗаписьРасчета.БазовыйПериодКонец);
		КонецЕсли;
		НачалоПериода = Мин(НачалоПериода, НачалоМесяца(ЗаписьРасчета.БазовыйПериодНачало));
		ОкончаниеПериода = Макс(ОкончаниеПериода, КонецМесяца(ЗаписьРасчета.БазовыйПериодКонец));
		СтрокиПоИдентификатору.Вставить(ЗаписьРасчета.ИдентификаторСтроки, НоваяСтрока);
	КонецЦикла;
	
	Если ДанныеДляРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Создаем временную таблицу по подготовленной таблице значений.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеДляРасчета.ИсполнительныйДокумент,
		|	ДанныеДляРасчета.Период,
		|	ДанныеДляРасчета.Месяц КАК Месяц,
		|	ДанныеДляРасчета.ФизическоеЛицо,
		|	ДанныеДляРасчета.Организация
		|ПОМЕСТИТЬ ВТДанныеДляРасчета
		|ИЗ
		|	&ДанныеДляРасчета КАК ДанныеДляРасчета";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДляРасчета", ДанныеДляРасчета);
	Запрос.Выполнить();
	
	// Получаем условия удержания (показатели) для каждой строки.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"УсловияУдержанияПоИсполнительномуДокументу",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТДанныеДляРасчета",
			"ИсполнительныйДокумент"));
	
	// Получаем признак учета больничных листов для корректировки расчетной базы.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УсловияУдержания.ИсполнительныйДокумент,
		|	УсловияУдержания.Период,
		|	УсловияУдержания.УчитыватьБольничныеЛисты
		|ИЗ
		|	ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних КАК УсловияУдержания";
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Используем категории оплаты больничного для получения расчетной базы в разрезе признак учета больничных.
	КатегорииОплатыБольничного = ПланыВидовРасчета.Начисления.КатегорииОплатыБольничного();
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		ЗаписьРасчета = СтрокаТаблицы.ЗаписьРасчета;
		// Позиционируемся в выборке по условиям удержания.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИсполнительныйДокумент", ЗаписьРасчета.ДокументОснование);
		СтруктураПоиска.Вставить("Период", ЗаписьРасчета.БазовыйПериодНачало);
		Выборка.Сбросить();
		Если Не Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			Продолжить;
		КонецЕсли;
		// Находим строку данных для расчета.
		СтрокаДанныхДляРасчета = СтрокиПоИдентификатору[ЗаписьРасчета.ИдентификаторСтроки];
		Если Выборка.УчитыватьБольничныеЛисты Тогда
			// Расчетная база и так учитывает все начисления, не требуется изымать из нее начисления оплаты больничных.
			Продолжить;
		КонецЕсли;
		// Нужно получить расчетную базу без учета больничных.
		СтрокаДанныхДляРасчета.РасчетнаяБаза = 0;
		РасшифровкаРасчетнойБазы = СтрокаТаблицы.ИсходныеДанные.РасшифровкаРасчетнойБазы;
		Если РасшифровкаРасчетнойБазы = Неопределено Тогда
			// Расчетная база не определена.
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаРасшифровки Из РасшифровкаРасчетнойБазы Цикл
			Если КатегорииОплатыБольничного.Найти(СтрокаРасшифровки.КатегорияБазовогоНачисления) = Неопределено Тогда
				// Добавляем только суммы по категориям, не являющимся оплатой больничных.
				СтрокаДанныхДляРасчета.РасчетнаяБаза = СтрокаДанныхДляРасчета.РасчетнаяБаза + СтрокаРасшифровки.Сумма;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Рассчитываем удержания по исполнительным листам.
	// К уже рассчитанной расчетной базе, включающей в себя начисления, 
	// нужно добавить: 
	//	- начисления по договорам,
	//	- материальную помощь
	// вычесть - НДФЛ
	
	// Получаем дополнение к расчетной базе и суммы уже удержанного.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляРасчета.ИсполнительныйДокумент,
		|	ДанныеДляРасчета.Месяц КАК Месяц,
		|	ДанныеДляРасчета.ФизическоеЛицо,
		|	ДанныеДляРасчета.Организация
		|ПОМЕСТИТЬ ВТИсполнительныеДокументы
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Удержания.ИсполнительныйДокумент,
		|	СУММА(Удержания.УдержаноВсего) КАК УдержаноВсего
		|ИЗ
		|	(ВЫБРАТЬ
		|		Удержания.ИсполнительныйДокумент КАК ИсполнительныйДокумент,
		|		Удержания.СуммаУдержанияОборот КАК УдержаноВсего
		|	ИЗ
		|		РегистрНакопления.УдержанияПоИсполнительнымДокументам.Обороты(
		|				,
		|				,
		|				,
		|				ИсполнительныйДокумент В
		|					(ВЫБРАТЬ
		|						ВТИсполнительныеДокументы.ИсполнительныйДокумент
		|					ИЗ
		|						ВТИсполнительныеДокументы)) КАК Удержания
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УдержанияПоРегистратору.ИсполнительныйДокумент,
		|		-УдержанияПоРегистратору.СуммаУдержания
		|	ИЗ
		|		РегистрНакопления.УдержанияПоИсполнительнымДокументам КАК УдержанияПоРегистратору
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсполнительныеДокументы КАК ИсполнительныеДокументы
		|			ПО (ИсполнительныеДокументы.ИсполнительныйДокумент = УдержанияПоРегистратору.ИсполнительныйДокумент)
		|				И (УдержанияПоРегистратору.Регистратор = &Регистратор)) КАК Удержания
		|
		|СГРУППИРОВАТЬ ПО
		|	Удержания.ИсполнительныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляРасчета.Месяц,
		|	ДанныеДляРасчета.ИсполнительныйДокумент,
		|	СУММА(ДанныеДляРасчета.ДополнениеРасчетнойБазы) КАК ДополнениеРасчетнойБазы,
		|	СУММА(ДанныеДляРасчета.Удержано) КАК Удержано
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИсполнительныеДокументы.Месяц КАК Месяц,
		|		ИсполнительныеДокументы.ИсполнительныйДокумент КАК ИсполнительныйДокумент,
		|		ВЫБОР
		|			КОГДА НачисленияУдержания.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
		|                 ИЛИ НачисленияУдержания.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ВоенныйСбор)
		|				ТОГДА -НачисленияУдержания.Сумма
		|			ИНАЧЕ НачисленияУдержания.Сумма
		|		КОНЕЦ КАК ДополнениеРасчетнойБазы,
		|		0 КАК Удержано
		|	ИЗ
		|		РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсполнительныеДокументы КАК ИсполнительныеДокументы
		|			ПО (НачисленияУдержания.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|				И (ИсполнительныеДокументы.Месяц = НАЧАЛОПЕРИОДА(НачисленияУдержания.Период, МЕСЯЦ))
		|				И (ИсполнительныеДокументы.ФизическоеЛицо = НачисленияУдержания.ФизическоеЛицо)
		|				И (ИсполнительныеДокументы.Организация = НачисленияУдержания.Организация.ГоловнаяОрганизация)
		|				И (НачисленияУдержания.НачислениеУдержание В (&ВидыДополненияРасчетнойБазы))
		|				И (НачисленияУдержания.Регистратор <> &Регистратор)
		|				И (НачисленияУдержания.Регистратор В (&РегистраторыНачислений))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИсполнительныеДокументы.Месяц,
		|		ИсполнительныеДокументы.ИсполнительныйДокумент,
		|		ВЫБОР
		|			КОГДА НачисленияУдержания.НачислениеУдержание В (&ВидыНДФЛ)
		|				ТОГДА -НачисленияУдержания.Сумма
		|			ИНАЧЕ НачисленияУдержания.Сумма
		|		КОНЕЦ,
		|		0
		|	ИЗ
		|		РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержания
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсполнительныеДокументы КАК ИсполнительныеДокументы
		|			ПО (НачисленияУдержания.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|				И (ИсполнительныеДокументы.Месяц = НАЧАЛОПЕРИОДА(НачисленияУдержания.Период, МЕСЯЦ))
		|				И (ИсполнительныеДокументы.ФизическоеЛицо = НачисленияУдержания.ФизическоеЛицо)
		|				И (ИсполнительныеДокументы.Организация = НачисленияУдержания.Организация.ГоловнаяОрганизация)
		|				И (НачисленияУдержания.Регистратор <> &Регистратор)
		|				И (НачисленияУдержания.Регистратор В (&РегистраторыНачислений))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(Удержания.Период, МЕСЯЦ),
		|		Удержания.ИсполнительныйДокумент,
		|		0,
		|		Удержания.СуммаУдержания
		|	ИЗ
		|		РегистрНакопления.УдержанияПоИсполнительнымДокументам КАК Удержания
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсполнительныеДокументы КАК ИсполнительныеДокументы
		|			ПО (ИсполнительныеДокументы.ИсполнительныйДокумент = Удержания.ИсполнительныйДокумент)
		|				И (НАЧАЛОПЕРИОДА(Удержания.Период, МЕСЯЦ) = ИсполнительныеДокументы.Месяц)
		|				И (Удержания.Регистратор <> &Регистратор)
		|				И (&УчитыватьРаннееУдержанныеСуммы)) КАК ДанныеДляРасчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляРасчета.Месяц,
		|	ДанныеДляРасчета.ИсполнительныйДокумент
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ДанныеДляРасчета.ДополнениеРасчетнойБазы) <> 0
		|		ИЛИ СУММА(ДанныеДляРасчета.Удержано) <> 0)";
		
	ВидыДополненияРасчетнойБазы = ВидыНачисленийДополненияРасчетнойБазыУдержанийПоИсполнительнымДокументам();
	ВидыДополненияРасчетнойБазы.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	ВидыДополненияРасчетнойБазы.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ВоенныйСбор);
		
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("РегистраторыНачислений", ДополнительныеПараметры.РегистраторыНачислений);
	Запрос.УстановитьПараметр("УчитыватьРаннееУдержанныеСуммы", ДополнительныеПараметры.РегистраторыНачислений = Неопределено);
	Запрос.УстановитьПараметр("ВидыДополненияРасчетнойБазы", ВидыДополненияРасчетнойБазы);
	Запрос.УстановитьПараметр("ВидыНДФЛ", ВидыНДФЛДополненияРасчетнойБазыУдержанийПоИсполнительнымДокументам());
	
	Если ДополнительныеПараметры.РегистраторыНачислений = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (НачисленияУдержания.Регистратор В (&РегистраторыНачислений))", "");
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Полученные дополнение к базе и суммы удержанного распределяем по исходной таблице.
	// Суммы всего удержанные по исполнительным документам откладываем в соответствие.
	
	ОтборСтрок = Новый Структура("ИсполнительныйДокумент, Месяц");
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		// Находим строки этого документа за этот месяц.
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
		НайденныеСтроки = ДанныеДляРасчета.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		// Распределяем суммы пропорционально разности дат.
		КоэффициентыРасчетнаяБаза = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "РасчетнаяБаза");
		КоэффициентыРазностьДат = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "РазностьДат");
		РаспределениеДополненияБазы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Выборка.ДополнениеРасчетнойБазы, КоэффициентыРасчетнаяБаза);
		Если РаспределениеДополненияБазы = Неопределено Тогда
			// Если не удалось распределить по расчетной базе (нет начислений), распределяем пропорционально разности дат.
			РаспределениеДополненияБазы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Выборка.ДополнениеРасчетнойБазы, КоэффициентыРазностьДат);
		КонецЕсли;
		РаспределениеУдержанного = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Выборка.Удержано, КоэффициентыРасчетнаяБаза);
		Если РаспределениеУдержанного = Неопределено Тогда
			РаспределениеУдержанного = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Выборка.Удержано, КоэффициентыРазностьДат);
		КонецЕсли;
		Для Индекс = 0 По НайденныеСтроки.ВГраница() Цикл
			// Пересчитываем расчетную базу только в случае, если она не корректировалась.
			Если Выборка.ДополнениеРасчетнойБазы <> 0 И РаспределениеДополненияБазы <> Неопределено Тогда
				НайденныеСтроки[Индекс].РасчетнаяБаза = Макс(НайденныеСтроки[Индекс].РасчетнаяБаза + РаспределениеДополненияБазы[Индекс], 0);
			КонецЕсли;
			Если Выборка.Удержано <> 0 И РаспределениеУдержанного <> Неопределено Тогда
				НайденныеСтроки[Индекс].Удержано = РаспределениеУдержанного[Индекс];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Собираем всего удержано по документам.
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	ВсегоУдержано = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ВсегоУдержано.Вставить(Выборка.ИсполнительныйДокумент, Выборка.УдержаноВсего);
	КонецЦикла;
	
	// Запрашиваем величину прожиточных минимумов.
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УсловияУдержания.ПрожиточныйМинимум КАК СоциальнаяГруппа,
		|	УсловияУдержания.ПрожиточныйМинимум,
		|	УсловияУдержания.Период
		|ПОМЕСТИТЬ ВТПрожиточныеМинимумы
		|ИЗ
		|	ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних КАК УсловияУдержания
		|ГДЕ
		|	УсловияУдержания.ПрожиточныйМинимум <> ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ПустаяСсылка)
		|";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПрожиточныеМинимумы",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТПрожиточныеМинимумы",
			"СоциальнаяГруппа"),,"ВТВеличинаПрожиточногоМинимумаСрезПоследних");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УсловияУдержания.ИсполнительныйДокумент,
		|	УсловияУдержания.Период,
		|	УсловияУдержания.СпособРасчета,
		|	УсловияУдержания.ВидБазы,
		|	УсловияУдержания.Процент,
		|	УсловияУдержания.Сумма,
		|	УсловияУдержания.Числитель,
		|	УсловияУдержания.Знаменатель,
		|	УсловияУдержания.Предел,
		|	УсловияУдержания.ПрожиточныйМинимум,
		|	УсловияУдержания.УчитыватьБольничныеЛисты,
		|	ВеличинаПрожиточногоМинимума.Размер КАК ВеличинаПрожиточногоМинимума
		|ИЗ
		|	ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних КАК УсловияУдержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВеличинаПрожиточногоМинимумаСрезПоследних КАК ВеличинаПрожиточногоМинимума
		|		ПО УсловияУдержания.ПрожиточныйМинимум = ВеличинаПрожиточногоМинимума.СоциальнаяГруппа
		|			И УсловияУдержания.Период = ВеличинаПрожиточногоМинимума.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// - Регистрируем их в учете удержанных сумм по исполнительным листам
	// - формируем запрос к полученным данным, собираем суммы в разрезе получателя алиментов, 
	// - рассчитываем вознаграждение агенту.
	
	УдержанияПоДокументам = ПустаяТаблицаУдержанияПоДокументам();
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		ЗаписьРасчета = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИсполнительныйДокумент", ЗаписьРасчета.ДокументОснование);
		СтруктураПоиска.Вставить("Период", ЗаписьРасчета.БазовыйПериодНачало);
		Выборка.Сбросить();
		Если Не Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			Продолжить;
		КонецЕсли;
		// Находим строку данных для расчета.
		СтрокаДанныхДляРасчета = СтрокиПоИдентификатору[ЗаписьРасчета.ИдентификаторСтроки];
		// Получаем расчетную базу с учетом дополнения и сумму уже удержанного.
		Удержано = СтрокаДанныхДляРасчета.Удержано;
		Если Не СтрокаДанныхДляРасчета.ФиксЗаполнение Тогда
			ИсходныеДанные.РасчетнаяБаза = СтрокаДанныхДляРасчета.РасчетнаяБаза;
			Если Выборка.ВидБазы = Перечисления.ВидыБазыУдержанияПоИсполнительномуДокументу.ПрожиточныйМинимум Тогда
				// Расчетная база по данным прожиточного минимума.
				ИсходныеДанные.РасчетнаяБаза = Выборка.ВеличинаПрожиточногоМинимума;
			КонецЕсли;
		КонецЕсли;
		Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой Тогда
			ИсходныеДанные.Результат = Выборка.Сумма;
		ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Процентом Тогда
			ИсходныеДанные.Результат = ИсходныеДанные.РасчетнаяБаза * Выборка.Процент / 100;
		ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Долей Тогда
			ИсходныеДанные.Результат = ИсходныеДанные.РасчетнаяБаза * Выборка.Числитель / Выборка.Знаменатель;
		КонецЕсли;
		// Уменьшаем результат на величину ранее удержанной суммы этого месяца.
		ИсходныеДанные.Результат = ИсходныеДанные.Результат - Удержано;
		// Если установлен предел удержания, то ограничиваем сумму.
		Если Выборка.Предел > 0 Тогда
			УдержаноВсегоПоДокументу = ВсегоУдержано[ЗаписьРасчета.ДокументОснование];
			Если УдержаноВсегоПоДокументу = Неопределено Тогда
				УдержаноВсегоПоДокументу = 0;
			КонецЕсли;
			ИсходныеДанные.Результат = Мин(Выборка.Предел - УдержаноВсегоПоДокументу, ИсходныеДанные.Результат);
			ВсегоУдержано.Вставить(ЗаписьРасчета.ДокументОснование, УдержаноВсегоПоДокументу + ИсходныеДанные.Результат);
		КонецЕсли;
		// Заполняем коллекцию для регистрации удержаний.
		НоваяСтрока = УдержанияПоДокументам.Добавить();
		НоваяСтрока.ИсполнительныйДокумент = ЗаписьРасчета.ДокументОснование;
		НоваяСтрока.Получатель = ЗаписьРасчета.Получатель;
		НоваяСтрока.ПлатежныйАгент = ЗаписьРасчета.ПлатежныйАгент;
		НоваяСтрока.МесяцУдержания = НачалоМесяца(ЗаписьРасчета.БазовыйПериодНачало);
		НоваяСтрока.СуммаУдержания = ИсходныеДанные.Результат;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет записей, если способ расчета - «Вознаграждение платежного агента».
//
Процедура РассчитатьВознагражденияПлатежныхАгентов(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка) Экспорт
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаУдержаний.ВознаграждениеПлатежногоАгента Тогда
		Возврат;
	КонецЕсли;
	
	// Обрабатываем записи регистра расчетов, выбираем исполнительные документы.
	
	УсловияОтбора = Новый ТаблицаЗначений;
	УсловияОтбора.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	УсловияОтбора.Колонки.Добавить("Получатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УсловияОтбора.Колонки.Добавить("ПлатежныйАгент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УсловияОтбора.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НачалоПериода = Неопределено;
	ОкончаниеПериода = Неопределено;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		ЗаписьРасчета = СтрокаТаблицы.ЗаписьРасчета;
		Если ЗаписьРасчета.ФиксРасчет Тогда
			СтрокаТаблицы.ИсходныеДанные.Результат = ЗаписьРасчета.Результат;
			Продолжить;
		КонецЕсли;
		НоваяСтрока = УсловияОтбора.Добавить();
		НоваяСтрока.ФизическоеЛицо = ЗаписьРасчета.ФизическоеЛицо;
		НоваяСтрока.Получатель = ЗаписьРасчета.Получатель;
		НоваяСтрока.ПлатежныйАгент = ЗаписьРасчета.ПлатежныйАгент;
		// Период используется для получения тарифа платежного агента,
		// так как изменение тарифа в течение месяца все равно никак не отрабатываем, 
		// получаем тариф на конец месяца.
		НоваяСтрока.Период = КонецМесяца(ЗаписьРасчета.ПериодДействия);
		Если НачалоПериода = Неопределено Тогда
			НачалоПериода = НачалоМесяца(ЗаписьРасчета.ПериодДействияНачало);
		КонецЕсли;
		Если ОкончаниеПериода = Неопределено Тогда
			ОкончаниеПериода = КонецМесяца(ЗаписьРасчета.ПериодДействияКонец);
		КонецЕсли;
		НачалоПериода = Мин(НачалоПериода, НачалоМесяца(ЗаписьРасчета.ПериодДействияНачало));
		ОкончаниеПериода = Макс(ОкончаниеПериода, КонецМесяца(ЗаписьРасчета.ПериодДействияКонец));
	КонецЦикла;
	
	Если УсловияОтбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"УсловияУдержанияПоИсполнительномуДокументу",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(УсловияОтбора));
		
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УсловияОтбора.ФизическоеЛицо,
		|	УсловияОтбора.Получатель,
		|	УсловияОтбора.ПлатежныйАгент
		|ПОМЕСТИТЬ ВТУсловияОтбора
		|ИЗ
		|	&УсловияОтбора КАК УсловияОтбора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрименяемыеТарифы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПрименяемыеТарифы.Получатель КАК Получатель,
		|	ПрименяемыеТарифы.ПлатежныйАгент КАК ПлатежныйАгент,
		|	ПрименяемыеТарифы.Период КАК Период,
		|	ШкалаТарифа.Ссылка КАК Тариф,
		|	ВЫБОР
		|		КОГДА ШкалаТарифа.Порог = 0
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПорога,
		|	ШкалаТарифа.Порог КАК Порог,
		|	ШкалаТарифа.Процент,
		|	ШкалаТарифа.Сумма,
		|	ШкалаТарифа.МинимальнаяСумма,
		|	ШкалаТарифа.МаксимальнаяСумма
		|ИЗ
		|	ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних КАК ПрименяемыеТарифы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТарифыПлатежныхАгентов.Шкала КАК ШкалаТарифа
		|		ПО ПрименяемыеТарифы.ТарифПлатежногоАгента = ШкалаТарифа.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Получатель,
		|	ПлатежныйАгент,
		|	Период,
		|	Тариф,
		|	ПриоритетПорога,
		|	Порог
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОНЕЦПЕРИОДА(УдержанияПоИсполнительнымДокументам.Период, МЕСЯЦ) КАК Период,
		|	УдержанияПоИсполнительнымДокументам.ФизическоеЛицо,
		|	УдержанияПоИсполнительнымДокументам.Получатель,
		|	УдержанияПоИсполнительнымДокументам.ПлатежныйАгент,
		|	СУММА(УдержанияПоИсполнительнымДокументам.СуммаУдержанияОборот) КАК СуммаУдержанияОборот,
		|	СУММА(УдержанияПоИсполнительнымДокументам.СуммаВознагражденияПлатежногоАгентаОборот) КАК СуммаВознагражденияПлатежногоАгентаОборот
		|ИЗ
		|	(ВЫБРАТЬ
		|		УдержанияОбороты.Период КАК Период,
		|		УдержанияОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|		УдержанияОбороты.Получатель КАК Получатель,
		|		УдержанияОбороты.ПлатежныйАгент КАК ПлатежныйАгент,
		|		УдержанияОбороты.СуммаУдержанияОборот КАК СуммаУдержанияОборот,
		|		УдержанияОбороты.СуммаВознагражденияПлатежногоАгентаОборот КАК СуммаВознагражденияПлатежногоАгентаОборот
		|	ИЗ
		|		РегистрНакопления.УдержанияПоИсполнительнымДокументам.Обороты(
		|				&НачалоПериода,
		|				&ОкончаниеПериода,
		|				Месяц,
		|				(ФизическоеЛицо, Получатель, ПлатежныйАгент) В
		|					(ВЫБРАТЬ
		|						Условия.ФизическоеЛицо,
		|						Условия.Получатель,
		|						Условия.ПлатежныйАгент
		|					ИЗ
		|						ВТУсловияОтбора КАК Условия)) КАК УдержанияОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УдержанияРегистратора.Период,
		|		УдержанияРегистратора.ФизическоеЛицо,
		|		УдержанияРегистратора.Получатель,
		|		УдержанияРегистратора.ПлатежныйАгент,
		|		-УдержанияРегистратора.СуммаУдержания,
		|		-УдержанияРегистратора.СуммаВознагражденияПлатежногоАгента
		|	ИЗ
		|		РегистрНакопления.УдержанияПоИсполнительнымДокументам КАК УдержанияРегистратора
		|	ГДЕ
		|		УдержанияРегистратора.Регистратор = &Регистратор) КАК УдержанияПоИсполнительнымДокументам
		|
		|СГРУППИРОВАТЬ ПО
		|	УдержанияПоИсполнительнымДокументам.ФизическоеЛицо,
		|	УдержанияПоИсполнительнымДокументам.Получатель,
		|	УдержанияПоИсполнительнымДокументам.ПлатежныйАгент,
		|	КОНЕЦПЕРИОДА(УдержанияПоИсполнительнымДокументам.Период, МЕСЯЦ)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("УсловияОтбора", УсловияОтбора);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	ВыборкаПоТарифам = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		ЗаписьРасчета = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ФизическоеЛицо", ЗаписьРасчета.ФизическоеЛицо);
		СтруктураПоиска.Вставить("Получатель", ЗаписьРасчета.Получатель);
		СтруктураПоиска.Вставить("ПлатежныйАгент", ЗаписьРасчета.ПлатежныйАгент);
		СтруктураПоиска.Вставить("Период", КонецМесяца(ЗаписьРасчета.ПериодДействия));
		
		Выборка.Сбросить();
		Если Не Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоТарифам.Сбросить();
		Тариф = Неопределено;
		Пока ВыборкаПоТарифам.НайтиСледующий(СтруктураПоиска) Цикл
			Тариф = Новый Структура("Процент, Сумма, МинимальнаяСумма, МаксимальнаяСумма");
			ЗаполнитьЗначенияСвойств(Тариф, ВыборкаПоТарифам);
			Если Выборка.СуммаУдержанияОборот <= ВыборкаПоТарифам.Порог Или ВыборкаПоТарифам.Порог = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Тариф = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИсходныеДанные.Результат = РазмерВознагражденияПлатежногоАгента(
			Выборка.СуммаУдержанияОборот, Тариф.Процент, Тариф.Сумма, Тариф.МинимальнаяСумма, Тариф.МаксимальнаяСумма);
			
		// Уменьшаем результат на сумму уже удержанного вознаграждения.
		ИсходныеДанные.Результат = ИсходныеДанные.Результат - Выборка.СуммаВознагражденияПлатежногоАгентаОборот;
	КонецЦикла;

КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Удержания - таблица значений с колонками
//			ИсполнительныйДокумент.
//			Получатель
//			ПлатежныйАгент
//			МесяцУдержания
//			СуммаУдержания
//			СуммаВознагражденияПлатежногоАгента.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемой таблице значений.
//
Процедура СформироватьУдержанияПоИсполнительнымДокументам(Движения, Удержания, ЗаписыватьДвижения = Ложь) Экспорт
	
	// Суммы в строках, где не заполнен исполнительный документ (это вознаграждения агента), 
	// распределяем пропорционально по получателю и платежному агенту.
	
	РаспределяемыеСуммы = Новый ТаблицаЗначений;
	РаспределяемыеСуммы.Колонки.Добавить("Получатель");
	РаспределяемыеСуммы.Колонки.Добавить("ПлатежныйАгент");
	РаспределяемыеСуммы.Колонки.Добавить("Сумма");
	
	ОтборСтрок = Новый Структура("Получатель, ПлатежныйАгент");
	
	// Переносим строки вознаграждения в таблицу распределяемых сумм.
	ИсполнительныеДокументы = Новый Массив;
	УдаляемыеСтроки = Новый Массив;
	Для Каждого Строка Из Удержания Цикл
		Если ЗначениеЗаполнено(Строка.ИсполнительныйДокумент) Тогда
			ИсполнительныеДокументы.Добавить(Строка.ИсполнительныйДокумент);
		Иначе
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Строка);
			НайденныеСтроки = Удержания.НайтиСтроки(ОтборСтрок);
			Если Строка.СуммаВознагражденияПлатежногоАгента <> 0 Тогда
				Суммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
					Строка.СуммаВознагражденияПлатежногоАгента,
					ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "СуммаУдержания"));
				Индекс = 0;	
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.СуммаВознагражденияПлатежногоАгента = НайденнаяСтрока.СуммаВознагражденияПлатежногоАгента + Суммы[Индекс];
					Индекс = Индекс + 1;	
				КонецЦикла;
			КонецЕсли;
			УдаляемыеСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем строки с не заполненным документом, эти суммы мы распределим по оставшимся строкам.
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		Удержания.Удалить(Строка);
	КонецЦикла;
	
	ДанныеДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ИсполнительныеДокументы, "ФизическоеЛицо, Организация");
	
	Для Каждого Строка Из Удержания Цикл
		ДанныеДокумента = ДанныеДокументов[Строка.ИсполнительныйДокумент];
		НоваяСтрока = Движения.УдержанияПоИсполнительнымДокументам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Период = Строка.МесяцУдержания;
		НоваяСтрока.ФизическоеЛицо = ДанныеДокумента.ФизическоеЛицо;
		НоваяСтрока.Организация = ДанныеДокумента.Организация;
	КонецЦикла;
	Движения.УдержанияПоИсполнительнымДокументам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		УстановитьПривилегированныйРежим(Истина);
		Движения.УдержанияПоИсполнительнымДокументам.Записать();
		Движения.УдержанияПоИсполнительнымДокументам.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Формирует и записывает движения по рассчитанным записям удержаний текущей очереди.
// Применяется для того, чтобы зарегистрировать исполнительные листы перед расчетом вознаграждения платежных агентов.
//
Процедура ЗарегистрироватьРезультатыРасчетаОчередности(НаборыЗаписей, КатегорияУдержания, ЗаписиРасчета, ИсходныеДанныеПоИдентификаторуСтроки) Экспорт
	
	Если КатегорияУдержания <> Перечисления.КатегорииУдержаний.ИсполнительныйЛист Тогда
		Возврат;	
	КонецЕсли;
	
	УдержанияПоДокументам = ИсполнительныеЛисты.ПустаяТаблицаУдержанияПоДокументам();
	
	Для Каждого СтрокаНабора Из ЗаписиРасчета Цикл
		ИсходныеДанные = ИсходныеДанныеПоИдентификаторуСтроки[СтрокаНабора.ИдентификаторСтроки];
		НоваяСтрока = УдержанияПоДокументам.Добавить();
		НоваяСтрока.ИсполнительныйДокумент = СтрокаНабора.ДокументОснование;
		НоваяСтрока.Получатель = СтрокаНабора.Получатель;
		НоваяСтрока.ПлатежныйАгент = СтрокаНабора.ПлатежныйАгент;
		НоваяСтрока.МесяцУдержания = НачалоМесяца(СтрокаНабора.БазовыйПериодНачало);
		НоваяСтрока.СуммаУдержания = ИсходныеДанные.Результат;
	КонецЦикла;
	
	// Формируем движения для расчета вознаграждения агенту.
	ИсполнительныеЛисты.СформироватьУдержанияПоИсполнительнымДокументам(НаборыЗаписей, УдержанияПоДокументам, Истина);

КонецПроцедуры

// Составляет временную таблицу с условиями удержаний по исполнительным листам
// ВТПоказателиУдержанийПоИсполнительнымДокументам.
//
Процедура СоздатьВТПоказателиУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, СозданныеВТ) Экспорт
	
	Если СозданныеВТ.Найти("ВТПоказателиУдержанийПоИсполнительнымДокументам") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдержанияЗаПериод.ДатаНачала КАК Период,
	|	УдержанияЗаПериод.ДокументОснование КАК ИсполнительныйДокумент
	|ПОМЕСТИТЬ ВТИзмеренияДаты
	|ИЗ
	|	ВТУдержанияЗаПериод КАК УдержанияЗаПериод";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"УсловияУдержанияПоИсполнительномуДокументу",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДаты",
			"ИсполнительныйДокумент"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияУдержания.ИсполнительныйДокумент,
	|	УсловияУдержания.Получатель КАК Получатель,
	|	УсловияУдержания.Период,
	|	УсловияУдержания.СпособРасчета,
	|	УсловияУдержания.ВидБазы,
	|	УсловияУдержания.Процент,
	|	УсловияУдержания.Сумма,
	|	УсловияУдержания.Числитель,
	|	УсловияУдержания.Знаменатель,
	|	УсловияУдержания.Предел,
	|	УсловияУдержания.ПрожиточныйМинимум,
	|	УсловияУдержания.ПлатежныйАгент,
	|	УсловияУдержания.ТарифПлатежногоАгента,
	|	УсловияУдержания.УчитыватьБольничныеЛисты
	|ПОМЕСТИТЬ ВТУсловияУдержанияПоИсполнительнымДокументам
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних КАК УсловияУдержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежныеАгенты.ИсполнительныйДокумент,
	|	МАКСИМУМ(ПлатежныеАгенты.Период) КАК Период
	|ПОМЕСТИТЬ ВТПлатежныеАгентыМаксимальныеПериоды
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительнымДокументам КАК ПлатежныеАгенты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежныеАгенты.ИсполнительныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежныеАгенты.ИсполнительныйДокумент,
	|	ПлатежныеАгенты.ПлатежныйАгент,
	|	ПлатежныеАгенты.ТарифПлатежногоАгента
	|ПОМЕСТИТЬ ВТПлатежныеАгенты
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительнымДокументам КАК ПлатежныеАгенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлатежныеАгентыМаксимальныеПериоды КАК МаксимальныеПериоды
	|		ПО (МаксимальныеПериоды.ИсполнительныйДокумент = ПлатежныеАгенты.ИсполнительныйДокумент)
	|			И (МаксимальныеПериоды.Период = ПлатежныеАгенты.Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияУдержания.ИсполнительныйДокумент,
	|	УсловияУдержания.ИсполнительныйДокумент КАК ДокументОснование,
	|	УсловияУдержания.Период,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист) КАК КатегорияУдержания,
	|	УсловияУдержания.Получатель КАК Получатель,
	|	ПлатежныеАгенты.ПлатежныйАгент,
	|	ПлатежныеАгенты.ТарифПлатежногоАгента,
	|	УсловияУдержания.СпособРасчета,
	|	УсловияУдержания.ВидБазы,
	|	УсловияУдержания.Процент,
	|	УсловияУдержания.Сумма,
	|	УсловияУдержания.Числитель,
	|	УсловияУдержания.Знаменатель,
	|	УсловияУдержания.Предел,
	|	УсловияУдержания.ПрожиточныйМинимум,
	|	УсловияУдержания.УчитыватьБольничныеЛисты
	|ПОМЕСТИТЬ ВТПоказателиУдержанийПоИсполнительнымДокументам
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительнымДокументам КАК УсловияУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлатежныеАгенты КАК ПлатежныеАгенты
	|		ПО (ПлатежныеАгенты.ИсполнительныйДокумент = УсловияУдержания.ИсполнительныйДокумент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияУдержания.ИсполнительныйДокумент,
	|	NULL,
	|	УсловияУдержания.Период,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента),
	|	УсловияУдержания.Получатель,
	|	ПлатежныеАгенты.ПлатежныйАгент,
	|	ПлатежныеАгенты.ТарифПлатежногоАгента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительнымДокументам КАК УсловияУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлатежныеАгенты КАК ПлатежныеАгенты
	|		ПО (ПлатежныеАгенты.ИсполнительныйДокумент = УсловияУдержания.ИсполнительныйДокумент)";
	
	Запрос.Выполнить();
	
	СозданныеВТ.Добавить("ВТПоказателиУдержанийПоИсполнительнымДокументам");
	
КонецПроцедуры

Процедура ОтобратьУдержанияВыполняемыеДоОкончательногоРасчета(МенеджерВременныхТаблиц, СозданныеВТ) Экспорт
	
	// Подключаем сведения об условиях удержаний.
	ИсполнительныеЛисты.СоздатьВТПоказателиУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, СозданныеВТ);
	
	// Исключаем удержания, выполняемые фиксированной суммой или определяемые в зависимости от прожиточного минимума.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТУдержанияЗаПериодБезОтбора
	|ИЗ
	|	ВТУдержанияЗаПериод КАК УдержанияЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТУдержанияЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержанияЗаПериод.*
	|ПОМЕСТИТЬ ВТУдержанияЗаПериод
	|ИЗ
	|	ВТУдержанияЗаПериодБезОтбора КАК УдержанияЗаПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиУдержанийПоИсполнительнымДокументам КАК ПоказателиУдержанийПоИсполнительнымДокументам
	|		ПО (УдержанияЗаПериод.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))
	|			И (ПоказателиУдержанийПоИсполнительнымДокументам.ИсполнительныйДокумент = УдержанияЗаПериод.ДокументОснование)
	|			И (ПоказателиУдержанийПоИсполнительнымДокументам.Период = УдержанияЗаПериод.ДатаНачала)
	|			И (ПоказателиУдержанийПоИсполнительнымДокументам.КатегорияУдержания = УдержанияЗаПериод.Удержание.КатегорияУдержания)
	|			И (ПоказателиУдержанийПоИсполнительнымДокументам.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой))
	|			И (ПоказателиУдержанийПоИсполнительнымДокументам.ВидБазы <> ЗНАЧЕНИЕ(Перечисление.ВидыБазыУдержанияПоИсполнительномуДокументу.ПрожиточныйМинимум))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТУдержанияЗаПериодБезОтбора КАК УдержанияЗаПериод
	|ГДЕ
	|	УдержанияЗаПериод.Удержание.КатегорияУдержания <> ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Заполнение сведений о показателях, используемых при расчете результата предопределенным способом.
//
// Параметры:
//	- ТаблицаПоказателей - таблица значений с колонками
//		СпособРасчета.
//		Показатель
//
Процедура ЗаполнитьПоказателиРасчетаИсполнительногоЛиста(ТаблицаПоказателей) Экспорт
	
	// Исполнительные листы
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ИсполнительныйЛист;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
КонецПроцедуры

// Конструирует таблицу значений для регистрации движений при помощи
//	метода СформироватьУдержанияПоИсполнительнымДокументам.
//
Функция ПустаяТаблицаУдержанияПоДокументам() Экспорт
	
	УдержанияПоДокументам = Новый ТаблицаЗначений;
	УдержанияПоДокументам.Колонки.Добавить("ИсполнительныйДокумент", Новый ОписаниеТипов("ДокументСсылка.ИсполнительныйЛист"));
	УдержанияПоДокументам.Колонки.Добавить("Получатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УдержанияПоДокументам.Колонки.Добавить("ПлатежныйАгент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УдержанияПоДокументам.Колонки.Добавить("МесяцУдержания", Новый ОписаниеТипов("Дата"));
	УдержанияПоДокументам.Колонки.Добавить("СуммаУдержания", Новый ОписаниеТипов("Число"));
	УдержанияПоДокументам.Колонки.Добавить("СуммаВознагражденияПлатежногоАгента", Новый ОписаниеТипов("Число"));
	
	Возврат УдержанияПоДокументам;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазмерВознагражденияПлатежногоАгента(СуммаПлатежа, Процент, Сумма, МинимальнаяСумма, МаксимальнаяСумма)
	
	Вознаграждение = 0;
	
	// Рассчитываем процентом
	Если Процент > 0 Тогда
		Вознаграждение = СуммаПлатежа * Процент / 100;
	КонецЕсли;
	
	// Если указана сумма, то она взимается в дополнение к проценту.
	Вознаграждение = Вознаграждение + Сумма;
	
	// Обрабатываем ограничения
	Если Вознаграждение < МинимальнаяСумма Тогда
		Вознаграждение = МинимальнаяСумма;
	КонецЕсли;
	
	Если Вознаграждение > МаксимальнаяСумма И МаксимальнаяСумма > 0 Тогда
		Вознаграждение = МаксимальнаяСумма;
	КонецЕсли;
	
	Возврат Вознаграждение;
	
КонецФункции

// Функция определяет состав видов особых начислений, 
//	включаемых в состав расчетной базы по исполнительным документам.
//
Функция ВидыНачисленийДополненияРасчетнойБазыУдержанийПоИсполнительнымДокументам() Экспорт
	
	ВидыНачислений = Новый Массив;
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов);
	
	Возврат ВидыНачислений;
	
КонецФункции

// Функция определяет состав видов удержания НДФЛ, 
//	исключаемых из состава расчетной базы по исполнительным документам.
//
Функция ВидыНДФЛДополненияРасчетнойБазыУдержанийПоИсполнительнымДокументам()
	
	ВидыНачислений = Новый Массив;
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛДоходыКонтрагентов);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛПрочиеРасчетыСПерсоналом);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НФДЛДивиденды);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НФДЛДивидендыСотрудникам);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛРасчетыСБывшимиСотрудниками);
	ВидыНачислений.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ВоенныйСбор);
	
	Возврат ВидыНачислений;
	
КонецФункции

#Область БлокФункцийПервоначальногоЗаполненияИОбновленияИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
		
КонецПроцедуры

Процедура ЗаполнитьПолучателяИТарифПлатежногоАгентаВУсловияхУдержания() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияУдержания.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержания
	|ГДЕ
	|	(УсловияУдержания.ПлатежныйАгент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И УсловияУдержания.ТарифПлатежногоАгента = ЗНАЧЕНИЕ(Справочник.ТарифыПлатежныхАгентов.ПустаяСсылка)
	|			ИЛИ УсловияУдержания.Получатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияУдержания.Период,
	|	УсловияУдержания.Регистратор,
	|	УсловияУдержания.НомерСтроки,
	|	УсловияУдержания.Активность,
	|	УсловияУдержания.ИсполнительныйДокумент,
	|	УсловияУдержания.СпособРасчета,
	|	УсловияУдержания.ВидБазы,
	|	УсловияУдержания.Процент,
	|	УсловияУдержания.Сумма,
	|	УсловияУдержания.Числитель,
	|	УсловияУдержания.Знаменатель,
	|	УсловияУдержания.ПрожиточныйМинимум,
	|	УсловияУдержания.Предел,
	|	УсловияУдержания.УчитыватьБольничныеЛисты,
	|	УсловияУдержания.ПлатежныйАгент,
	|	ИсполнительныйЛист.ТарифПлатежногоАгента,
	|	УсловияУдержания.ФизическоеЛицо,
	|	УсловияУдержания.Организация,
	|	ИсполнительныйЛист.Получатель
	|ИЗ
	|	РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
	|		ПО (ИсполнительныйЛист.Ссылка = УсловияУдержания.ИсполнительныйДокумент)
	|ГДЕ
	|	УсловияУдержания.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УсловияУдержания.Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.УсловияУдержанияПоИсполнительномуДокументу.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьИспользованиеПараметровНаборовСвойств() Экспорт
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИсполнительныйЛист", УправлениеСвойствами.СтруктураПараметровНабораСвойств());
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИзменениеУсловийИсполнительногоЛиста", УправлениеСвойствами.СтруктураПараметровНабораСвойств());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
