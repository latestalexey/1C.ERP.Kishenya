#Область СлужебныйПрограммныйИнтерфейс

// Осуществляет проверку могут ли возникнуть перерасчеты по сотрудникам и периодам
// документа, в случае если перерасчеты могут возникнуть запоминает предыдущие
// движения регистратора во временных таблицах с именами вида ВТПерерасчет<ИмяРегистра>,
// имена регистров из числа, движения по которым могут оказывать влияние на процесс
// начисления зарплаты (см. функцию ИменаРегистровИнициирующихПерерасчеты) регистратором
// которых может быть переданная в параметре Регистратор ссылка на документ.
//
// Параметры:
//		Регистратор							- ДокументСсылка
//		ДанныеДляРегистрацииПерерасчетов	- МенеджерВременныхТаблиц, должен содержать временную таблицу
//												ВТДанныеДокументов с полями:
//													* Организация
//													* Сотрудник
//													* ПериодДействия
//		Организация							- СправочникСсылка.Организации
//
// Возвращаемое значение:
//		Булево	- Истина, если перерасчеты могут возникнуть
//
Функция СборДанныхДляРегистрацииПерерасчетов(Регистратор, ДанныеДляРегистрацииПерерасчетов, Организация, СборДанныхДляРегистрации = Ложь, ИсключатьНеИзмененные = Ложь, РегистрацияНачалаУчета = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляРегистрацииПерерасчетов;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ПОМЕСТИТЬ ВТКонтролируемыеНачисления
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))";
		
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДанныеДокументов.Сотрудник
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|ГДЕ
		|	1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрРасчета.Начисления КАК Начисления
		|			ГДЕ
		|				Начисления.Организация = ДанныеДокументов.Организация
		|				И Начисления.Сотрудник = ДанныеДокументов.Сотрудник
		|				И Начисления.ПериодДействия >= ДанныеДокументов.ПериодДействия
		|				И Начисления.ВидРасчета В
		|					(ВЫБРАТЬ
		|						Начисления.Ссылка
		|					ИЗ
		|						ВТКонтролируемыеНачисления КАК Начисления))";
		
	Если РегистрацияНачалаУчета Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Начисления.Сотрудник = ДанныеДокументов.Сотрудник", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		СборДанныхДляРегистрации = Истина;
	КонецЕсли;
	
	ИменаРегистровИнициаторов = ИменаРегистровРегистратораИнициирующихПерерасчеты(Регистратор);
	Для каждого ИмяРегистра Из ИменаРегистровИнициаторов Цикл
			
		ИмяВТПерерасчет = "ВТПерерасчет" + ИмяРегистра;
		СоздатьВТДвиженияРегистратора(Регистратор, ДанныеДляРегистрацииПерерасчетов, ИмяРегистра, Организация, ИмяВТПерерасчет, ИсключатьНеИзмененные);
		Если Не СборДанныхДляРегистрации Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ТаблицаРегистра.Сотрудник
				|ИЗ
				|	" + ИмяВТПерерасчет + " КАК ТаблицаРегистра";
				
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Если РегистрацияНачалаУчета Тогда
					
					Запрос.Текст =
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	МИНИМУМ(ДанныеРегистра.Период) КАК Период,
						|	ДанныеРегистра.Организация
						|ПОМЕСТИТЬ ВТПерерасчетПериоды
						|ИЗ
						|	ВТПерерасчет КАК ДанныеРегистра
						|
						|СГРУППИРОВАТЬ ПО
						|	ДанныеРегистра.Организация
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ ПЕРВЫЕ 1
						|	ПерерасчетПериоды.Организация
						|ИЗ
						|	ВТПерерасчетПериоды КАК ПерерасчетПериоды
						|ГДЕ
						|	1 В
						|			(ВЫБРАТЬ ПЕРВЫЕ 1
						|				1
						|			ИЗ
						|				РегистрРасчета.Начисления КАК Начисления
						|			ГДЕ
						|				Начисления.Организация = ПерерасчетПериоды.Организация
						|				И Начисления.ПериодДействия >= ПерерасчетПериоды.Период
						|				И Начисления.ВидРасчета В
						|					(ВЫБРАТЬ
						|						Начисления.Ссылка
						|					ИЗ
						|						ВТКонтролируемыеНачисления КАК Начисления))";
					
				Иначе
						
					Запрос.Текст =
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	МИНИМУМ(ДанныеРегистра.Период) КАК Период,
						|	ДанныеРегистра.Сотрудник,
						|	ДанныеРегистра.Организация
						|ПОМЕСТИТЬ ВТПерерасчетПериоды
						|ИЗ
						|	ВТПерерасчет КАК ДанныеРегистра
						|
						|СГРУППИРОВАТЬ ПО
						|	ДанныеРегистра.Сотрудник,
						|	ДанныеРегистра.Организация
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ ПЕРВЫЕ 1
						|	ПерерасчетПериоды.Сотрудник
						|ИЗ
						|	ВТПерерасчетПериоды КАК ПерерасчетПериоды
						|ГДЕ
						|	1 В
						|			(ВЫБРАТЬ ПЕРВЫЕ 1
						|				1
						|			ИЗ
						|				РегистрРасчета.Начисления КАК Начисления
						|			ГДЕ
						|				Начисления.Сотрудник = ПерерасчетПериоды.Сотрудник
						|				И Начисления.Организация = ПерерасчетПериоды.Организация
						|				И Начисления.ПериодДействия >= ПерерасчетПериоды.Период
						|				И Начисления.ВидРасчета В
						|					(ВЫБРАТЬ
						|						Начисления.Ссылка
						|					ИЗ
						|						ВТКонтролируемыеНачисления КАК Начисления))";
					
				КонецЕсли; 	
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПерерасчет", ИмяВТПерерасчет);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если Не РезультатЗапроса.Пустой() Тогда
					СборДанныхДляРегистрации = Истина;
				КонецЕсли; 
				
			КонецЕсли; 
				
		КонецЕсли; 
		
	КонецЦикла;

	Возврат СборДанныхДляРегистрации;
		
КонецФункции

// Осуществляет регистрацию необходимости проведения перерасчета заработной платы в случае
// если найдены изменения в движениях регистратора, осуществленные "задним" числом относительно
// движений начисления зарплаты
//
// Параметры:
//		Регистратор							- ДокументСсылка
//		ДанныеДляРегистрацииПерерасчетов	- МенеджерВременныхТаблиц, должен содержать временную таблицы
//												с предыдущими движениями ключевых регистров, собранные
//												методом СборДанныхДляРегистрацииПерерасчетов
//		Организация							- СправочникСсылка.Организации
//
Процедура РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, Организация, ИсключатьНеИзмененные = Ложь, РегистрацияНачалаУчета = Ложь) Экспорт
	
	Регистратор = Движения[0].Отбор.Регистратор.Значение;
			
	РегистрыРегистратора = ИменаРегистровДвиженийРегистратораИнициирующихПерерасчеты(Движения);
	Если РегистрыРегистратора.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = ДанныеДляРегистрацииПерерасчетов;
		
		Запрос.УстановитьПараметр("Регистратор",  Регистратор);
		
		Запрос.Текст = "";
		ТекстПоместить = "ПОМЕСТИТЬ ВТСотрудникиПериоды";
		ДобавитьОбъединить = Ложь;
		
		Для каждого ИмяРегистра Из РегистрыРегистратора Цикл
			
			Если Движения[ИмяРегистра].Записывать Тогда
				Движения[ИмяРегистра].Записать();
				Движения[ИмяРегистра].Записывать = Ложь;
			КонецЕсли;
			
			ИмяВТПерерасчет = "ВТПерерасчет" + ИмяРегистра;
			ИмяВТТекущиеДвижения = "ВТТекущиеДвижения" + ИмяРегистра;
			СоздатьВТДвиженияРегистратора(Регистратор, ДанныеДляРегистрацииПерерасчетов, ИмяРегистра, Организация, ИмяВТТекущиеДвижения, ИсключатьНеИзмененные);
			
			ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
			ТекстУсловийОбъединения = "	ПО ТекущиеДвижения.Период = ПредыдущиеДвижения.Период
				|		И ТекущиеДвижения.Регистратор = ПредыдущиеДвижения.Регистратор";
			
			Для каждого ИмяПоля Из ОписаниеРегистра.Измерения Цикл
				ТекстУсловийОбъединения = ТекстУсловийОбъединения + Символы.ПС
					+ "	И ТекущиеДвижения." + ИмяПоля + " = ПредыдущиеДвижения." + ИмяПоля;
			КонецЦикла;
				
			Для каждого ИмяПоля Из ОписаниеРегистра.Ресурсы Цикл
				ТекстУсловийОбъединения = ТекстУсловийОбъединения + Символы.ПС
					+ "	И ТекущиеДвижения." + ИмяПоля + " = ПредыдущиеДвижения." + ИмяПоля;
			КонецЦикла;
			
			Если ОписаниеРегистра.ТипРегистра = "РегистрСведений" Тогда
				Для каждого ИмяПоля Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
					ТекстУсловийОбъединения = ТекстУсловийОбъединения + Символы.ПС
						+ "	И ТекущиеДвижения." + ИмяПоля + " = ПредыдущиеДвижения." + ИмяПоля;
				КонецЦикла;
			КонецЕсли;
				
			Для каждого ИмяПоля Из ОписаниеРегистра.Реквизиты Цикл
				ТекстУсловийОбъединения = ТекстУсловийОбъединения + Символы.ПС
					+ "	И ТекущиеДвижения." + ИмяПоля + " = ПредыдущиеДвижения." + ИмяПоля;
			КонецЦикла;
			
			Если ДобавитьОбъединить Тогда
				
				Запрос.Текст = Запрос.Текст
					+ Символы.ПС
					+ "ОБЪЕДИНИТЬ ВСЕ"
					+ Символы.ПС;
					
			КонецЕсли; 
			
			ТекстЗапросаПоРегистру =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НАЧАЛОПЕРИОДА(ЕстьNULL(ТекущиеДвижения.Период, ПредыдущиеДвижения.Период), МЕСЯЦ) КАК ПериодДействия,
				|	ЕстьNULL(ТекущиеДвижения.Организация, ПредыдущиеДвижения.Организация) КАК Организация,
				|	ЕстьNULL(ТекущиеДвижения.Сотрудник, ПредыдущиеДвижения.Сотрудник) КАК Сотрудник,
				|	ЕстьNULL(ТекущиеДвижения.Регистратор, ПредыдущиеДвижения.Регистратор) КАК ДокументОснование"
				+ Символы.ПС
				+ ТекстПоместить
				+ Символы.ПС
				+ "ИЗ " + ИмяВТТекущиеДвижения + " КАК ТекущиеДвижения
				|	ПОЛНОЕ СОЕДИНЕНИЕ " + ИмяВТПерерасчет + " КАК ПредыдущиеДвижения"
				+ Символы.ПС
				+ ТекстУсловийОбъединения
				+ Символы.ПС
				+ "ГДЕ
				|	(ТекущиеДвижения.Период ЕСТЬ NULL
				|		ИЛИ ПредыдущиеДвижения.Период ЕСТЬ NULL)";
				
			Запрос.Текст = Запрос.Текст + ТекстЗапросаПоРегистру;
				
			ТекстПоместить = "";
			ДобавитьОбъединить = Истина;
					
		КонецЦикла;
		
		Запрос.Выполнить();
		ЗарегистрироватьПерерасчетыСотрудников(ДанныеДляРегистрацииПерерасчетов, "ВТСотрудникиПериоды", , РегистрацияНачалаУчета);
		
	КонецЕсли; 

КонецПроцедуры

// Осуществляет регистрацию необходимости проведения перерасчета заработной платы в случае
// если отменяется проведение и удаляются движениях регистратора, осуществленные "задним" числом
// относительно движений начисления зарплаты
//
// Параметры:
//		Регистратор							- ДокументСсылка
//		ДанныеДляРегистрацииПерерасчетов	- МенеджерВременныхТаблиц, должен содержать временную таблицы
//												с предыдущими движениями ключевых регистров, собранные
//												методом СборДанныхДляРегистрацииПерерасчетов
//		Организация							- СправочникСсылка.Организации
//
Процедура РегистрацияПерерасчетовПриОтменеПроведения(Регистратор, ДанныеДляРегистрацииПерерасчетов, Организация) Экспорт
	
	РегистрыРегистратора = ИменаРегистровРегистратораИнициирующихПерерасчеты(Регистратор);
	Если РегистрыРегистратора.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = ДанныеДляРегистрацииПерерасчетов;
		
		Запрос.Текст = "";
		ТекстПоместить = "ПОМЕСТИТЬ ВТСотрудникиПериоды";
		ДобавитьОбъединить = Ложь;
		
		Для каждого ИмяРегистра Из РегистрыРегистратора Цикл
			
			ИмяВТРегистра = "ВТДвижения" + ИмяРегистра;
			СоздатьВТДвиженияРегистратора(Регистратор, ДанныеДляРегистрацииПерерасчетов, ИмяРегистра, Организация, ИмяВТРегистра);
			
			Если ДобавитьОбъединить Тогда
				
				Запрос.Текст = Запрос.Текст
					+ Символы.ПС
					+ "ОБЪЕДИНИТЬ ВСЕ"
					+ Символы.ПС;
					
			КонецЕсли; 
			
			ТекстЗапросаПоРегистру =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	НАЧАЛОПЕРИОДА(Движения.Период, МЕСЯЦ) КАК ПериодДействия,
				|	Движения.Организация КАК Организация,
				|	Движения.Сотрудник КАК Сотрудник,
				|	Движения.Регистратор КАК ДокументОснование"
				+ Символы.ПС
				+ ТекстПоместить
				+ Символы.ПС
				+ "ИЗ " + ИмяВТРегистра + " КАК Движения";
			
			Запрос.Текст = Запрос.Текст + ТекстЗапросаПоРегистру;
			
			ТекстПоместить = "";
			ДобавитьОбъединить = Истина;
			
		КонецЦикла;
		
		Запрос.Выполнить();
		ЗарегистрированныеПерерасчеты = ЗарегистрироватьПерерасчетыСотрудников(ДанныеДляРегистрацииПерерасчетов, "ВТСотрудникиПериоды");
		
		СтруктураПоиска = Новый Структура("Организация,Сотрудник,ПериодДействия,ДокументОснование,ДокументНачисления");
		Для каждого ПерерасчетРегистратора Из ЗарегистрированныеПерерасчеты Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПерерасчетРегистратора);
			Если ЗарегистрированныеПерерасчеты.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				
				НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.Организация.Установить(СтруктураПоиска.Организация);
				НаборЗаписей.Отбор.Сотрудник.Установить(СтруктураПоиска.Сотрудник);
				НаборЗаписей.Отбор.ПериодДействия.Установить(СтруктураПоиска.ПериодДействия);
				НаборЗаписей.Отбор.ДокументОснование.Установить(СтруктураПоиска.ДокументОснование);
				НаборЗаписей.Отбор.ДокументНачисления.Установить(СтруктураПоиска.ДокументНачисления);
				
				НаборЗаписей.Записать();
				
			КонецЕсли; 
			
		КонецЦикла;
		
	Иначе
		УдалениеПерерасчетаПоРегистратору(Регистратор);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет сведения о необходимости произвести перерасчет, по окончании проведения документа
// начисление зарплаты
//
// Параметры:
//		Регистратор							- ДокументСсылка.НачислениеЗарплаты
//		УдалитьПерерасчетыТекущегоПериода	- Булево, Истина если было произведено перезаполнение
//												формы документа и перерасчеты текущего месяца начисления
//												учтены в таблице начислений
//		ПериодыРасчетаСотрудников			- ТаблицаЗначений, с перерасчетами сотрудников проведенных до перепроведения документа,
//													если в ходе работы с документами были удалены записи перерасчетов, информация
//													о необходимости проведения перерасчетов будет восстановлена
//												* Организация
//												* Сотрудник
//												* ПериодДействия
//
Процедура УдалениеПерерасчетов(Регистратор, УдалитьПерерасчетыТекущегоПериода, ПериодыРасчетаСотрудников) Экспорт
	
	Запрос = ЗапросВТПериодыРасчетаСотрудников(Регистратор, УдалитьПерерасчетыТекущегоПериода);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ПериодыРасчетаСотрудников <> Неопределено Тогда
				
				СтрокиПерерасчетов = ПериодыРасчетаСотрудников.НайтиСтроки(Новый Структура("Организация,Сотрудник,ПериодДействия", Выборка.Организация, Выборка.Сотрудник, Выборка.ПериодДействия));
				Для каждого СтрокаРасчетов Из СтрокиПерерасчетов Цикл
					ПериодыРасчетаСотрудников.Удалить(СтрокаРасчетов);
				КонецЦикла;
				
			КонецЕсли; 
			
			НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
			
			НаборЗаписей.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если ПериодыРасчетаСотрудников <> Неопределено Тогда
		
		Для каждого СтрокаПериодовПерерасчета Из ПериодыРасчетаСотрудников Цикл
			
			НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(СтрокаПериодовПерерасчета.Организация);
			НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаПериодовПерерасчета.Сотрудник);
			НаборЗаписей.Отбор.ПериодДействия.Установить(СтрокаПериодовПерерасчета.ПериодДействия);
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаПериодовПерерасчета);
						
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

// Удаляет сведения о необходимости произвести перерасчет по конкретному документу, по окончании проведения документа
// начислятеля зарплаты не являющемся документом "Начисление зарплаты"
//
// Параметры:
//		Регистратор	- ДокументСсылка
//		Сотрудники	- Массив, ссылки на сотрудников, по которым нужно удалить сведения
//
Процедура УдалениеПерерасчетаПоРегистратору(Регистратор, Сотрудники = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Регистратор) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПерерасчетЗарплаты.Сотрудник,
			|	ПерерасчетЗарплаты.ДокументНачисления КАК ДокументНачисления
			|ИЗ
			|	РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
			|ГДЕ
			|	ПерерасчетЗарплаты.ДокументНачисления = &ДокументНачисления
			|	И ПерерасчетЗарплаты.Сотрудник В(&Сотрудники)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДокументНачисления";
		
		Запрос.УстановитьПараметр("ДокументНачисления", Регистратор);
		
		Если ЗначениеЗаполнено(Сотрудники) Тогда
			Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПерерасчетЗарплаты.Сотрудник,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПерерасчетЗарплаты.Сотрудник В(&Сотрудники)", "");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ДокументНачисления.Установить(Выборка.ДокументНачисления);
				
				Если ЗначениеЗаполнено(Сотрудники) Тогда
					НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
				КонецЕсли; 
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет сведения о необходимости произвести перерасчет по конкретному документу, в зависимости от значений
// параметров, переданных в ДополнительныеПараметры
//
// Параметры:
//		Регистратор				- ДокументСсылка
//		ДополнительныеПараметры	- Структура с ключами
//									* УдалитьПерерасчетыЗарплаты		- Булево
//									* СотрудникиПерерасчетаЗаработка	- Массив
//
Процедура УдалениеПерерасчетовПоДополнительнымПараметрам(Регистратор, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПерерасчетыЗарплаты = Неопределено;
	ДополнительныеПараметры.Свойство("УдалитьПерерасчетыЗарплаты", УдалитьПерерасчетыЗарплаты);
	Если УдалитьПерерасчетыЗарплаты <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудники = Неопределено;
	ДополнительныеПараметры.Свойство("СотрудникиПерерасчетаЗаработка", Сотрудники);
	УдалениеПерерасчетаПоРегистратору(Регистратор, Сотрудники);
	
КонецПроцедуры

// Собирает информацию о регистрируемых перерасчетах перед записью начисления зарплаты,
// результат работы (ТаблицаЗначений) помещается в состав дополнительных свойств регистратора
//
// Параметры:
//		РегистраторОбъект - ДокументОбъект.НачислениеЗарплаты
//
Функция ПериодыРасчетаСотрудников(РегистраторОбъект) Экспорт
	
	Запрос = ЗапросВТПериодыРасчетаСотрудников(РегистраторОбъект.Ссылка, Ложь);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		РегистраторОбъект.ДополнительныеСвойства.Вставить("ПериодыРасчетаСотрудников", РезультатЗапроса.Выгрузить());
		
	КонецЕсли; 
	
КонецФункции

// Восстанавливает записи о необходимости проведения перерасчета, при отмене проведения
// документа начисления зарплаты, с заполненной табличной частью начисления перерасчеты
//
// Параметры:
//		Регистратор							- ДокументСсылка.НачислениеЗарплаты
//
Процедура ВосстановлениеПерерасчетов(Регистратор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", Регистратор);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыНачисленияПерерасчет.Ссылка.Организация КАК Организация,
		|	НачислениеЗарплатыНачисленияПерерасчет.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(НачислениеЗарплатыНачисленияПерерасчет.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование
		|ПОМЕСТИТЬ ВТЗаписываемыйПерерасчетЗарплаты
		|ИЗ
		|	Документ.НачислениеЗарплаты.НачисленияПерерасчет КАК НачислениеЗарплатыНачисленияПерерасчет
		|ГДЕ
		|	НачислениеЗарплатыНачисленияПерерасчет.Ссылка = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаписываемыйПерерасчетЗарплаты.Сотрудник
		|ИЗ
		|	ВТЗаписываемыйПерерасчетЗарплаты КАК ЗаписываемыйПерерасчетЗарплаты";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ЗарегистрироватьПерерасчетыСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТЗаписываемыйПерерасчетЗарплаты", Регистратор);
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает признак того, требуется ли произвести перерасчет зарплаты по сотрудникам организации
// за указанный месяц
//
// Параметры:
//		Организация	- СправочникСсылка.Организации
//		Месяц		- Дата
//		Сотрудники	- СправочникСсылка.Сотрудники или массив ссылок
//
// Возвращаемое значение:
//		Число - Количество сотрудников, для которых требуется выполнить доначисление (перерасчет)
//
Функция ТребуетсяПерерасчетПериода(Организация, Месяц, Сотрудники = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Месяц", НачалоМесяца(Месяц));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПерерасчетЗарплаты.Сотрудник) КАК КоличествоСотрудников
		|ИЗ
		|	РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
		|ГДЕ
		|	ПерерасчетЗарплаты.Организация = &Организация
		|	И ПерерасчетЗарплаты.ПериодДействия = &Месяц";
		
	Если Сотрудники <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|	И ПерерасчетЗарплаты.Сотрудник В (&Сотрудники)";
		
		Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
			Запрос.УстановитьПараметр("Сотрудники", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники));
		Иначе
			Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		КонецЕсли;
		
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоСотрудников;
	
КонецФункции

// Возвращает массив сотрудников по которым необходимо выполнить доначисления (перерасчет)
// в указанной организации и за указанный месяц
//
// Параметры:
//		Организация	- СправочникСсылка.Организации
//		Месяц		- Дата
//		Сотрудники	- СправочникСсылка.Сотрудники или массив ссылок
//
// Возвращаемое значение:
//		Массив
//
Функция СотрудникиКПерерасчету(Организация, Месяц, Сотрудники= Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Месяц", НачалоМесяца(Месяц));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПерерасчетЗарплаты.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
		|ГДЕ
		|	ПерерасчетЗарплаты.Организация = &Организация
		|	И ПерерасчетЗарплаты.ПериодДействия = &Месяц";
		
	Если Сотрудники <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|	И ПерерасчетЗарплаты.Сотрудник В (&Сотрудники)";
		
		Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
			Запрос.УстановитьПараметр("Сотрудники", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники));
		Иначе
			Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

// Устанавливает отображение надписи о необходимости произвести перерасчет
// зарплаты в форме документа начисление зарплаты
//
// Параметры:
//		Форма			- УправляемаяФорма
//
Процедура УстановитьОтображениеСообщенияОНеобходимостиПерерасчетаВФормеДокумента(Форма) Экспорт
	
	Если Форма.Объект.РежимДоначисления Тогда
		ОтображениеСообщения = Ложь;
	Иначе
		ОтображениеСообщения = Не Форма.ЗаполнениеВыполнено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.Подразделение) Тогда
		СписокСотрудников = Форма.Объект.Начисления.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	Иначе
		СписокСотрудников = Неопределено;
	КонецЕсли; 
	
	УстановитьОтображениеСообщенияОНеобходимостиПерерасчета(
		Форма, Форма.Объект.Организация, Форма.Объект.МесяцНачисления, Не ОтображениеСообщения,СписокСотрудников);
	
КонецПроцедуры

// Устанавливает отображение надписи о необходимости произвести перерасчет
// зарплаты в указанном месяце
//
// Параметры:
//		Форма			- УправляемаяФорма
//		Организация		- СправочникСсылка.Организации
//		Месяц			- Дата
//		СкрытьСообщение - Булево
//
Процедура УстановитьОтображениеСообщенияОНеобходимостиПерерасчета(Форма, Организация, Месяц, СкрытьСообщение = Ложь, СписокСотрудников = Неопределено) Экспорт
	
	ТекстСообщения = "";
	ДоступноПерезаполнениеСотрудников = Ложь;
	
	Если Не СкрытьСообщение Тогда
		
		КоличествоСотрудниковКПерерасчету = ТребуетсяПерерасчетПериода(Организация, Месяц, СписокСотрудников);
		Если КоличествоСотрудниковКПерерасчету > 0 Тогда
			
			КоличествоСотрудниковПредставление = "";
			Если КоличествоСотрудниковКПерерасчету > 4 И КоличествоСотрудниковКПерерасчету < 20 Тогда
				КоличествоСотрудниковПредставление = Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + "-" + НСтр("ru='и';uk='і'") + " " + НСтр("ru='сотрудников';uk='співробітників'");
			Иначе
				
				Единицы = КоличествоСотрудниковКПерерасчету - Цел(КоличествоСотрудниковКПерерасчету / 10) * 10;
				Если Единицы = 1 Тогда
					КоличествоСотрудниковПредставление = Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + "-" + НСтр("ru='го';uk='го'") + " " + НСтр("ru='сотрудника';uk='співробітника'");
				ИначеЕсли Единицы > 1 И Единицы < 5 Тогда
					КоличествоСотрудниковПредставление = Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + "-" + НСтр("ru='х';uk='х'") + " " + НСтр("ru='сотрудников';uk='співробітників'");
				Иначе
					КоличествоСотрудниковПредставление = Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + "-" + НСтр("ru='и';uk='і'") + " " + НСтр("ru='сотрудников';uk='співробітників'");
				КонецЕсли; 
				
			КонецЕсли;
			
			ТекстСообщения = Новый ФорматированнаяСтрока(
				НСтр("ru='Требуется доначисление (перерасчет) для';uk='Потрібно донарахування (перерахунок) для'") + " " + КоличествоСотрудниковПредставление + " " + НСтр("ru='за';uk='за'") + " ",
				Формат(Месяц, "ДФ='ММММ гггг'") + " (",
				Новый ФорматированнаяСтрока(НСтр("ru='Подробнее';uk='Докладніше'") + "...", , , , "Подробнее"),
				"). ");
			
			Если Не ПериодНачисленияЗарплатыЗакрыт(Организация, Месяц) Тогда
				
				ДоступноПерезаполнениеСотрудников = Истина;
				Если КоличествоСотрудниковКПерерасчету = 1 Тогда
					ЗаголовокКоманды = НСтр("ru='Пересчитать';uk='Перерахувати'") + " " + НСтр("ru='сотрудника';uk='співробітника'");
				ИначеЕсли КоличествоСотрудниковКПерерасчету > 4 И КоличествоСотрудниковКПерерасчету < 20 Тогда
					ЗаголовокКоманды = НСтр("ru='Пересчитать';uk='Перерахувати'") + " " + Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + " " + НСтр("ru='сотрудников';uk='співробітників'");
				Иначе
					
					Единицы = КоличествоСотрудниковКПерерасчету - Цел(КоличествоСотрудниковКПерерасчету / 10) * 10;
					Если Единицы > 0 И Единицы < 5 Тогда
						ЗаголовокКоманды = НСтр("ru='Пересчитать';uk='Перерахувати'") + " " + Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + " " + НСтр("ru='сотрудника';uk='співробітника'");
					Иначе
						ЗаголовокКоманды = НСтр("ru='Пересчитать';uk='Перерахувати'") + " " + Формат(КоличествоСотрудниковКПерерасчету, "ЧДЦ=") + " " + НСтр("ru='сотрудников';uk='співробітників'");
					КонецЕсли;
					
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Форма.Элементы,
					"ПересчитатьСотрудников",
					"Заголовок",
					ЗаголовокКоманды);
				
			КонецЕсли;
				
		Иначе
			СкрытьСообщение = Истина;	
			ТекстСообщения = "";
		КонецЕсли;
		
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПересчитатьСотрудников",
		"Видимость",
		Не СкрытьСообщение И ДоступноПерезаполнениеСотрудников);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДоначислитьСейчас",
		"Видимость",
		Не СкрытьСообщение И Не ДоступноПерезаполнениеСотрудников);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СообщениеОНеобходимостиПерерасчетаКартинка",
		"Видимость",
		Не СкрытьСообщение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СообщениеОНеобходимостиПерерасчетаНадпись",
		"Заголовок",
		ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ЗапросВТПериодыРасчетаСотрудников(Регистратор, УдалитьПерерасчетыТекущегоПериода, ИмяВТПериодыРасчетаСотрудников = "")
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("УдалитьПерерасчетыТекущегоПериода", УдалитьПерерасчетыТекущегоПериода);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыНачисленияПерерасчет.Ссылка.Организация КАК Организация,
		|	НачислениеЗарплатыНачисленияПерерасчет.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(НачислениеЗарплатыНачисленияПерерасчет.ДатаНачала, МЕСЯЦ) КАК ПериодДействия
		|ПОМЕСТИТЬ ВТОчищаемыеСотрудникПериоды
		|ИЗ
		|	Документ.НачислениеЗарплаты.НачисленияПерерасчет КАК НачислениеЗарплатыНачисленияПерерасчет
		|ГДЕ
		|	НачислениеЗарплатыНачисленияПерерасчет.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыНачисления.Ссылка.Организация,
		|	НачислениеЗарплатыНачисления.Сотрудник,
		|	НАЧАЛОПЕРИОДА(НачислениеЗарплатыНачисления.ДатаНачала, МЕСЯЦ)
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
		|ГДЕ
		|	НачислениеЗарплатыНачисления.Ссылка = &Регистратор
		|	И НЕ НачислениеЗарплатыНачисления.Ссылка.РежимДоначисления
		|	И &УдалитьПерерасчетыТекущегоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОчищаемыеСотрудникПериоды.Организация,
		|	ОчищаемыеСотрудникПериоды.Сотрудник,
		|	ВЫРАЗИТЬ(ОчищаемыеСотрудникПериоды.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОчищаемыеСотрудникПериоды.ПериодДействия
		|ПОМЕСТИТЬ ВТПериодыРасчетаСотрудников
		|ИЗ
		|	ВТОчищаемыеСотрудникПериоды КАК ОчищаемыеСотрудникПериоды";
		
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПериодыРасчетаСотрудников", ИмяВТПериодыРасчетаСотрудников);
		
	Возврат Запрос;
	
КонецФункции

Функция ПериодНачисленияЗарплатыЗакрыт(Организация, МесяцНачисления)
	
	// Проверяется наличие выплаты в периоде.
	БылаВыплатаВПериоде = ИсправлениеДокументовЗарплатаКадры.ВыплатаПроизводилась(Организация, МесяцНачисления);
	// Проверим наличие документа отражение зарплаты в бухгалтерском учете.
	БылоОтражениеЗарплатыВБухучете = ИсправлениеДокументовЗарплатаКадры.ОтражениеВУчетеПроизводилось(Организация, МесяцНачисления);
	
	ПериодЗакрыт = (БылаВыплатаВПериоде ИЛИ БылоОтражениеЗарплатыВБухучете);
	
	Возврат ПериодЗакрыт;
	
КонецФункции

Функция ОткрытыйПериодНачисленияЗарплаты(Организация, МесяцНачисления) Экспорт
	
	ОткрытыйПериод = МесяцНачисления;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НачислениеЗарплаты.МесяцНачисления КАК МесяцНачисления
		|ИЗ
		|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Организация = &Организация
		|	И НачислениеЗарплаты.МесяцНачисления >= &МесяцНачисления
		|	И НЕ НачислениеЗарплаты.РежимДоначисления
		|	И НачислениеЗарплаты.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	МесяцНачисления УБЫВ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ОткрытыйПериод = КонецМесяца(Выборка.МесяцНачисления) + 1;
		
	КонецЕсли;
	
	Возврат ОткрытыйПериод;
	
КонецФункции

Функция СоздатьВТПерерасчитываемыеСотрудники(МенеджерВременныхТаблиц, Организация, МесяцНачисления, Сотрудники, СотрудникиПериодДействияПерерасчет, РежимДоначисления, ИмяВТПерерасчитываемыеСотрудники = "ВТПерерасчитываемыеСотрудники")
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ПериодДействия", МесяцНачисления);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Получение таблицы со всеми сочетаниями Сотрудник и ПериодДействия
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПерерасчетЗарплаты.Организация,
		|	ПерерасчетЗарплаты.Сотрудник,
		|	ПерерасчетЗарплаты.ПериодДействия
		|ПОМЕСТИТЬ ВТПерерасчитываемыеСотрудники
		|ИЗ
		|	РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПерерасчет КАК СотрудникиПерерасчет
		|		ПО ПерерасчетЗарплаты.Организация = СотрудникиПерерасчет.Организация
		|			И ПерерасчетЗарплаты.Сотрудник = СотрудникиПерерасчет.Сотрудник
		|			И ПерерасчетЗарплаты.ПериодДействия = СотрудникиПерерасчет.ПериодДействия
		|ГДЕ
		|	ПерерасчетЗарплаты.Организация = &Организация
		|	И ПерерасчетЗарплаты.ПериодДействия <= &ПериодДействия
		|	И ПерерасчетЗарплаты.Сотрудник В(&Сотрудники)
		|	И СотрудникиПерерасчет.Сотрудник ЕСТЬ NULL ";
		
	Если СотрудникиПериодДействияПерерасчет <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("СотрудникиПериодДействияПерерасчет", СотрудникиПериодДействияПерерасчет);
	
		Запрос.Текст =
			"ВЫБРАТЬ
			|	&Организация КАК Организация,
			|	СотрудникиПерерасчет.Сотрудник,
			|	НАЧАЛОПЕРИОДА(СотрудникиПерерасчет.ПериодДействия, МЕСЯЦ) КАК ПериодДействия
			|ПОМЕСТИТЬ ВТСотрудникиПерерасчет
			|ИЗ
			|	&СотрудникиПериодДействияПерерасчет КАК СотрудникиПерерасчет";
			
		Запрос.Выполнить();
		
		ТекстЗапроса = ТекстЗапроса
			+ "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|"
			+ "ВЫБРАТЬ
			|	СотрудникиПерерасчет.Организация,
			|	СотрудникиПерерасчет.Сотрудник,
			|	СотрудникиПерерасчет.ПериодДействия
			|ИЗ
			|	ВТСотрудникиПерерасчет КАК СотрудникиПерерасчет";
		
	КонецЕсли;
		
	// При перезаполнении документа в таблицу перерасчета добавляем только записи предыдущих периодов.
	Если Не РежимДоначисления Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ПерерасчетЗарплаты.ПериодДействия <= &ПериодДействия", "И ПерерасчетЗарплаты.ПериодДействия < &ПериодДействия");
	КонецЕсли; 
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТПерерасчитываемыеСотрудники", ИмяВТПерерасчитываемыеСотрудники);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура СоздатьВТСотрудникиОрганизацииКПерерасчету(МенеджерВременныхТаблиц, ПараметрыПолученияСотрудников, СотрудникиПериодДействияПерерасчет, ИмяВТСотрудникиОрганизацииКПерерасчету) Экспорт

	ИмяВТСотрудникиОрганизации = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСотрудникиОрганизации");
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников, ИмяВТСотрудникиОрганизации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизации.Сотрудник
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиОрганизации", ИмяВТСотрудникиОрганизации);
		
	Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	РезультатЗапросаПерерасчитываемыеСотрудники = СоздатьВТПерерасчитываемыеСотрудники(
		МенеджерВременныхТаблиц,
		ПараметрыПолученияСотрудников.Организация,
		НачалоМесяца(ПараметрыПолученияСотрудников.НачалоПериода),
		Сотрудники,
		СотрудникиПериодДействияПерерасчет,
		Истина,
		"");
		
	ПерерасчитываемыеСотрудники = РезультатЗапросаПерерасчитываемыеСотрудники.Выгрузить().ВыгрузитьКолонку("Сотрудник");
		
	Запрос.УстановитьПараметр("ПерерасчитываемыеСотрудники", ПерерасчитываемыеСотрудники);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиОрганизации.Период,
		|	СотрудникиОрганизации.ПериодЗаписи,
		|	СотрудникиОрганизации.Сотрудник,
		|	СотрудникиОрганизации.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииКПерерасчету
		|ИЗ
		|	ВТСотрудникиОрганизацииОсновнойТаблицы КАК СотрудникиОрганизации
		|ГДЕ
		|	СотрудникиОрганизации.Сотрудник В(&ПерерасчитываемыеСотрудники)";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиОрганизацииОсновнойТаблицы", ИмяВТСотрудникиОрганизации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиОрганизацииКПерерасчету", ИмяВТСотрудникиОрганизацииКПерерасчету);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ДанныеПерерасчетаНачисленияЗарплаты(Организация, МесяцНачисления, Сотрудники, ТекущийРегистратор, СотрудникиПериодДействияПерерасчет, РежимДоначисления) Экспорт
	
	КатегорииНачисленийПособий = УчетПособийСоциальногоСтрахованияРасширенный.КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", ТекущийРегистратор);
	Запрос.УстановитьПараметр("КатегорииНачисленийПособий", КатегорииНачисленийПособий);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТПерерасчитываемыеСотрудники(Запрос.МенеджерВременныхТаблиц, Организация, МесяцНачисления, Сотрудники, СотрудникиПериодДействияПерерасчет, РежимДоначисления);
	
	// Получение списка сторнируемых регистраторов
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПерерасчитываемыеСотрудники.Организация,
		|	ПерерасчитываемыеСотрудники.Сотрудник,
		|	ПерерасчитываемыеСотрудники.ПериодДействия,
		|	ЕСТЬNULL(Начисления.Сторно, ЛОЖЬ) КАК Сторно,
		|	ЕСТЬNULL(Начисления.ПериодРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодРегистрации,
		|	ЕСТЬNULL(Начисления.Регистратор, ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)) КАК Регистратор,
		|	ЕСТЬNULL(Начисления.ПериодДействияНачало, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодДействияНачало,
		|	ЕСТЬNULL(Начисления.ПериодДействияКонец, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТПерерасчитываемыеРегистраторыПредварительно
		|ИЗ
		|	ВТПерерасчитываемыеСотрудники КАК ПерерасчитываемыеСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО ПерерасчитываемыеСотрудники.Организация = Начисления.Организация
		|			И ПерерасчитываемыеСотрудники.Сотрудник = Начисления.Сотрудник
		|			И ПерерасчитываемыеСотрудники.ПериодДействия = Начисления.ПериодДействия
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЕСТЬNULL(Начисления.Регистратор, ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)) <> &Регистратор
		|				ТОГДА ИСТИНА
		|			КОГДА &Регистратор = ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ЕСТЬNULL(Начисления.ВидРасчета, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВЫРАЗИТЬ(Начисления.ВидРасчета КАК ПланВидовРасчета.Начисления).СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПерерасчитываемыеРегистраторы.Сотрудник,
		|	ПерерасчитываемыеРегистраторы.ПериодДействия,
		|	ПерерасчитываемыеРегистраторы.Регистратор
		|ПОМЕСТИТЬ ВТСторнируемыеРегистраторы
		|ИЗ
		|	ВТПерерасчитываемыеРегистраторыПредварительно КАК ПерерасчитываемыеРегистраторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПерерасчитываемыеРегистраторыПредварительно КАК ПерерасчитываемыеРегистраторыСторно
		|		ПО ПерерасчитываемыеРегистраторы.Организация = ПерерасчитываемыеРегистраторыСторно.Организация
		|			И ПерерасчитываемыеРегистраторы.Сотрудник = ПерерасчитываемыеРегистраторыСторно.Сотрудник
		|			И ПерерасчитываемыеРегистраторы.ПериодДействия = ПерерасчитываемыеРегистраторыСторно.ПериодДействия
		|			И ПерерасчитываемыеРегистраторы.ПериодДействияНачало = ПерерасчитываемыеРегистраторыСторно.ПериодДействияНачало
		|			И ПерерасчитываемыеРегистраторы.ПериодДействияКонец = ПерерасчитываемыеРегистраторыСторно.ПериодДействияКонец
		|			И ПерерасчитываемыеРегистраторы.ПериодРегистрации < ПерерасчитываемыеРегистраторыСторно.ПериодРегистрации
		|			И (ПерерасчитываемыеРегистраторыСторно.Регистратор ССЫЛКА Документ.НачислениеЗарплаты)
		|			И (ПерерасчитываемыеРегистраторыСторно.Сторно)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ПерерасчитываемыеРегистраторыСторно.Регистратор ССЫЛКА Документ.НачислениеЗарплаты
		|				ТОГДА НЕ ПерерасчитываемыеРегистраторы.Сторно
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ПерерасчитываемыеРегистраторыСторно.Сотрудник ЕСТЬ NULL ";
		
	Запрос.Выполнить();
	
	// Сбор сведений о сторнированных строках начислений
	ТекстЗапросаНачисленийПерерасчет =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияПерерасчет.Ссылка,
		|	НачисленияПерерасчет.НомерСтроки,
		|	НачисленияПерерасчет.Подразделение,
		|	НачисленияПерерасчет.ДатаНачала,
		|	НачисленияПерерасчет.ДатаОкончания,
		|	НачисленияПерерасчет.ПериодДействия,
		|	НачисленияПерерасчет.Начисление,
		|	НачисленияПерерасчет.Результат,
		|	НачисленияПерерасчет.ОтработаноДней,
		|	НачисленияПерерасчет.ОтработаноЧасов,
		|	НачисленияПерерасчет.НормаДней,
		|	НачисленияПерерасчет.НормаЧасов,
		|	НачисленияПерерасчет.Сотрудник,
		|	НачисленияПерерасчет.РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	НачисленияПерерасчет.ИдентификаторСтрокиВидаРасчета,
		|	НачисленияПерерасчет.ГрафикРаботы,
		|	НачисленияПерерасчет.ФиксСтрока,
		|	НачисленияПерерасчет.ФиксЗаполнение,
		|	НачисленияПерерасчет.ФиксРасчетВремени,
		|	НачисленияПерерасчет.ФиксРасчет,
		|	НачисленияПерерасчет.ГрафикРаботыНорма,
		|	НачисленияПерерасчет.ПериодРегистрацииВремени,
		|	НачисленияПерерасчет.ВремяВЧасах,
		|	НачисленияПерерасчет.ВидУчетаВремени,
		|	НачисленияПерерасчет.ОплаченоДней,
		|	НачисленияПерерасчет.ОплаченоЧасов,
		|	НачисленияПерерасчет.Сторно КАК Сторно,
		|	НачисленияПерерасчет.ФиксСторно КАК ФиксСторно,
		|	НачисленияПерерасчет.СторнируемыйДокумент КАК СторнируемыйДокумент
		|ПОМЕСТИТЬ ВТСторнируемыеНачисления
		|ИЗ
		|	Документ.НачислениеЗарплаты.НачисленияПерерасчет КАК НачисленияПерерасчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеРегистраторы КАК СторнируемыеРегистраторы
		|		ПО НачисленияПерерасчет.Ссылка = СторнируемыеРегистраторы.Регистратор
		|			И НачисленияПерерасчет.Сотрудник = СторнируемыеРегистраторы.Сотрудник
		|			И (ВЫРАЗИТЬ(НачисленияПерерасчет.Начисление КАК ПланВидовРасчета.Начисления).СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета))
		|			И (НЕ ВЫРАЗИТЬ(НачисленияПерерасчет.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийПособий))
		|			И НачисленияПерерасчет.ДатаНачала >= СторнируемыеРегистраторы.ПериодДействия
		|			И (НачисленияПерерасчет.ДатаНачала <= КОНЕЦПЕРИОДА(СторнируемыеРегистраторы.ПериодДействия, МЕСЯЦ))
		|			И (НЕ НачисленияПерерасчет.Сторно)";
	
	ТекстЗапросаНачислений =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка,
		|	Начисления.НомерСтроки,
		|	Начисления.Подразделение,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
		|			ТОГДА НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)
		|		ИНАЧЕ Начисления.ПериодДействия
		|	КОНЕЦ КАК ПериодДействия,
		|	Начисления.Начисление,
		|	Начисления.Результат,
		|	Начисления.ОтработаноДней,
		|	Начисления.ОтработаноЧасов,
		|	Начисления.НормаДней,
		|	Начисления.НормаЧасов,
		|	Начисления.Сотрудник,
		|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	Начисления.ИдентификаторСтрокиВидаРасчета,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ФиксСтрока,
		|	Начисления.ФиксЗаполнение,
		|	Начисления.ФиксРасчетВремени,
		|	Начисления.ФиксРасчет,
		|	Начисления.ГрафикРаботыНорма,
		|	Начисления.ПериодРегистрацииВремени,
		|	Начисления.ВремяВЧасах,
		|	Начисления.ВидУчетаВремени,
		|	Начисления.ОплаченоДней,
		|	Начисления.ОплаченоЧасов,
		|	ЛОЖЬ КАК Сторно,
		|	ЛОЖЬ КАК ФиксСторно,
		|	NULL КАК СторнируемыйДокумент
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеРегистраторы КАК СторнируемыеРегистраторы
		|		ПО Начисления.Ссылка = СторнируемыеРегистраторы.Регистратор
		|			И Начисления.Сотрудник = СторнируемыеРегистраторы.Сотрудник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|			И (ВидыРасчета.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета))
		|			И (НЕ ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийПособий))";
	
	// Сбор сведений о сторнированных строках пособий
	ТекстЗапросаПособияПерерасчет =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПособияПерерасчет.Ссылка,
		|	ПособияПерерасчет.НомерСтроки,
		|	ПособияПерерасчет.Сотрудник,
		|	ПособияПерерасчет.Подразделение,
		|	ПособияПерерасчет.ВидЗанятости,
		|	ВЫБОР
		|		КОГДА ПособияПерерасчет.Начисление.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
		|			ТОГДА НАЧАЛОПЕРИОДА(ПособияПерерасчет.ДатаНачала, МЕСЯЦ)
		|		ИНАЧЕ ПособияПерерасчет.ПериодДействия
		|	КОНЕЦ КАК ПериодДействия,
		|	ПособияПерерасчет.ДатаНачала,
		|	ПособияПерерасчет.ДатаОкончания,
		|	ПособияПерерасчет.Начисление,
		|	ПособияПерерасчет.Результат,
		|	ПособияПерерасчет.РезультатВТомЧислеЗаСчетФБ,
		|	ПособияПерерасчет.ФиксСтрока,
		|	ПособияПерерасчет.ФиксЗаполнение,
		|	ПособияПерерасчет.ФиксРасчетВремени,
		|	ПособияПерерасчет.ФиксРасчет,
		|	ПособияПерерасчет.РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	ПособияПерерасчет.ИдентификаторСтрокиВидаРасчета,
		|	ПособияПерерасчет.ОплаченоДней,
		|	ПособияПерерасчет.ОплаченоЧасов,
		|	ПособияПерерасчет.СуммаВсегоПоУходуЗаПервымРебенком,
		|	ПособияПерерасчет.СуммаСверхНормПоУходуЗаПервымРебенком,
		|	ПособияПерерасчет.СуммаВсегоПоУходуЗаВторымРебенком,
		|	ПособияПерерасчет.СуммаСверхНормПоУходуЗаВторымРебенком,
		|	ПособияПерерасчет.ЛьготаПоПособию,
		|	ПособияПерерасчет.СтраховойСлучай,
		|	ПособияПерерасчет.КоличествоДетей,
		|	ПособияПерерасчет.КоличествоПервыхДетей,
		|	ПособияПерерасчет.ФиксСторно,
		|	ПособияПерерасчет.Сторно,
		|	ПособияПерерасчет.СторнируемыйДокумент
		|ПОМЕСТИТЬ ВТСторнируемыеПособия
		|ИЗ
		|	Документ.НачислениеЗарплаты.ПособияПерерасчет КАК ПособияПерерасчет
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеРегистраторы КАК СторнируемыеРегистраторы
		|		ПО ПособияПерерасчет.Ссылка = СторнируемыеРегистраторы.Регистратор
		|			И ПособияПерерасчет.Сотрудник = СторнируемыеРегистраторы.Сотрудник
		|			И (ВЫРАЗИТЬ(ПособияПерерасчет.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийПособий))
		|			И ПособияПерерасчет.ДатаНачала >= СторнируемыеРегистраторы.ПериодДействия
		|			И (ПособияПерерасчет.ДатаНачала <= КОНЕЦПЕРИОДА(СторнируемыеРегистраторы.ПериодДействия, МЕСЯЦ))
		|			И (НЕ ПособияПерерасчет.Сторно)";
	
	ТекстЗапросаПособия =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пособия.Ссылка,
		|	Пособия.НомерСтроки,
		|	Пособия.Сотрудник,
		|	Пособия.Подразделение,
		|	Пособия.ВидЗанятости,
		|	ВЫБОР
		|		КОГДА Пособия.Начисление.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
		|			ТОГДА НАЧАЛОПЕРИОДА(Пособия.ДатаНачала, МЕСЯЦ)
		|		ИНАЧЕ Пособия.ПериодДействия
		|	КОНЕЦ КАК ПериодДействия,
		|	Пособия.ДатаНачала,
		|	Пособия.ДатаОкончания,
		|	Пособия.Начисление,
		|	Пособия.Результат,
		|	Пособия.РезультатВТомЧислеЗаСчетФБ,
		|	Пособия.ФиксСтрока,
		|	Пособия.ФиксЗаполнение,
		|	Пособия.ФиксРасчетВремени,
		|	Пособия.ФиксРасчет,
		|	Пособия.РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	Пособия.ИдентификаторСтрокиВидаРасчета,
		|	Пособия.ОплаченоДней,
		|	Пособия.ОплаченоЧасов,
		|	Пособия.СуммаВсегоПоУходуЗаПервымРебенком,
		|	Пособия.СуммаСверхНормПоУходуЗаПервымРебенком,
		|	Пособия.СуммаВсегоПоУходуЗаВторымРебенком,
		|	Пособия.СуммаСверхНормПоУходуЗаВторымРебенком,
		|	Пособия.ЛьготаПоПособию,
		|	Пособия.СтраховойСлучай,
		|	Пособия.КоличествоДетей,
		|	Пособия.КоличествоПервыхДетей,
		|	ЛОЖЬ КАК ФиксСторно,
		|	ЛОЖЬ КАК Сторно,
		|	ЛОЖЬ КАК СторнируемыйДокумент
		|ИЗ
		|	Документ.НачислениеЗарплаты.Пособия КАК Пособия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеРегистраторы КАК СторнируемыеРегистраторы
		|		ПО Пособия.Ссылка = СторнируемыеРегистраторы.Регистратор
		|			И Пособия.Сотрудник = СторнируемыеРегистраторы.Сотрудник
		|			И (ВЫРАЗИТЬ(Пособия.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийПособий))
		|			И (НАЧАЛОПЕРИОДА(Пособия.ДатаНачала, МЕСЯЦ) >= СторнируемыеРегистраторы.ПериодДействия)
		|			И (Пособия.ДатаНачала <= КОНЕЦПЕРИОДА(СторнируемыеРегистраторы.ПериодДействия, МЕСЯЦ))";
	
	
	// Сбор сведений о распределениях
	ТекстЗапросаРаспределениеРезультатовНачислений =
		"ВЫБРАТЬ
		|	РаспределениеРезультатовНачислений.Ссылка,
		|	РаспределениеРезультатовНачислений.НомерСтроки,
		|	РаспределениеРезультатовНачислений.ИдентификаторСтроки,
		|	РаспределениеРезультатовНачислений.СтатьяФинансирования,
		|	РаспределениеРезультатовНачислений.СтатьяРасходов,
		|	РаспределениеРезультатовНачислений.СпособОтраженияЗарплатыВБухучете,
		|	РаспределениеРезультатовНачислений.Результат
		|ИЗ
		|	Документ.НачислениеЗарплаты.РаспределениеРезультатовНачислений КАК РаспределениеРезультатовНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеНачисления КАК СторнируемыеНачисления
		|		ПО РаспределениеРезультатовНачислений.Ссылка = СторнируемыеНачисления.Ссылка
		|			И РаспределениеРезультатовНачислений.ИдентификаторСтроки = СторнируемыеНачисления.ИдентификаторСтрокиВидаРасчета";
		
	ТекстЗапросаНачисленийДокументов = "";
	ТекстЗапросаПособийДокументов = "";
	ТекстЗапросаРаспределениеРезультатовНачисленийДокументов = "";
	
	МетаданныеРегистрыРасчетаНачисления = Метаданные.РегистрыРасчета.Начисления;
	Для каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		Если Не МетаданныеДокумента.Движения.Содержит(МетаданныеРегистрыРасчетаНачисления) Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("НачисленияПерерасчет") <> Неопределено Тогда
			
			ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийПерерасчет, "Документ.НачислениеЗарплаты.", "Документ." + МетаданныеДокумента.Имя + ".");
			
			Если МетаданныеДокумента.ТабличныеЧасти["НачисленияПерерасчет"].Реквизиты.Найти("ПериодДействия") = Неопределено Тогда
				ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "НачисленияПерерасчет.ПериодДействия", "НачисленияПерерасчет.ДатаНачала КАК ПериодДействия");
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекстЗапросаНачисленийДокументов) Тогда
				ТекстЗапросаНачисленийДокументов = ТекстЗапросаНачисленийДокументов + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
				ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "ПОМЕСТИТЬ ВТСторнируемыеНачисления", "");
			КонецЕсли; 
			
			Если МетаданныеДокумента.Имя <> "НачислениеЗарплаты" Тогда
				ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "И (НЕ НачисленияПерерасчет.Сторно)", "");
			КонецЕсли; 
			
			ТекстЗапросаНачисленийДокументов = ТекстЗапросаНачисленийДокументов + ТекстЗапросаНачисленийДокумента;
			
			Если МетаданныеДокумента.ТабличныеЧасти.Найти("Начисления") <> Неопределено
				И МетаданныеДокумента.ТабличныеЧасти.Начисления.Реквизиты.Найти("Начисление") <> Неопределено Тогда
				
				ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачислений, "Документ.НачислениеЗарплаты.", "Документ." + МетаданныеДокумента.Имя + ".");
				
				Если МетаданныеДокумента.Реквизиты.Найти("МесяцНачисления") = Неопределено Тогда
					ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "Ссылка.МесяцНачисления", "Ссылка.ПериодРегистрации");
				КонецЕсли;
					
				ТекстЗапросаНачисленийДокументов = ТекстЗапросаНачисленийДокументов + Символы.ПС
					+ "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС
					+ ТекстЗапросаНачисленийДокумента;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("РаспределениеРезультатовНачислений") <> Неопределено Тогда
		
			ТекстЗапросаРаспределениеРезультатовНачисленийДокумента = СтрЗаменить(ТекстЗапросаРаспределениеРезультатовНачислений, "Документ.НачислениеЗарплаты.", "Документ." + МетаданныеДокумента.Имя + ".");
			
			Если Не ПустаяСтрока(ТекстЗапросаРаспределениеРезультатовНачисленийДокументов) Тогда
				ТекстЗапросаРаспределениеРезультатовНачисленийДокументов = ТекстЗапросаРаспределениеРезультатовНачисленийДокументов + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
			КонецЕсли; 
			
			ТекстЗапросаРаспределениеРезультатовНачисленийДокументов = ТекстЗапросаРаспределениеРезультатовНачисленийДокументов
				+ ТекстЗапросаРаспределениеРезультатовНачисленийДокумента;
			
		КонецЕсли; 
		
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("ПособияПерерасчет") <> Неопределено Тогда
			
			ТекстЗапросаПособийДокумента = СтрЗаменить(ТекстЗапросаПособияПерерасчет, "Документ.НачислениеЗарплаты.", "Документ." + МетаданныеДокумента.Имя + ".");
			
			Если Не ПустаяСтрока(ТекстЗапросаПособийДокументов) Тогда
				ТекстЗапросаПособийДокументов = ТекстЗапросаПособийДокументов + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
				ТекстЗапросаПособийДокумента = СтрЗаменить(ТекстЗапросаПособийДокумента, "ПОМЕСТИТЬ ВТСторнируемыеПособия", "");
			КонецЕсли; 
			
			Если МетаданныеДокумента.Имя <> "НачислениеЗарплаты" Тогда
				ТекстЗапросаПособийДокумента = СтрЗаменить(ТекстЗапросаПособийДокумента, "И (НЕ НачисленияПерерасчет.Сторно)", "");
			КонецЕсли; 
			
			ТекстЗапросаПособийДокументов = ТекстЗапросаПособийДокументов + ТекстЗапросаПособийДокумента;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("Пособия") <> Неопределено Тогда
			
			ТекстЗапросаПособийДокумента = СтрЗаменить(ТекстЗапросаПособия, "Документ.НачислениеЗарплаты.", "Документ." + МетаданныеДокумента.Имя + ".");
			
			Если Не ПустаяСтрока(ТекстЗапросаПособийДокументов) Тогда
				ТекстЗапросаПособийДокументов = ТекстЗапросаПособийДокументов + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
				ТекстЗапросаПособийДокумента = СтрЗаменить(ТекстЗапросаПособийДокумента, "ПОМЕСТИТЬ ВТСторнируемыеПособия", "");
			КонецЕсли; 
			
			Если МетаданныеДокумента.Имя <> "НачислениеЗарплаты" Тогда
				ТекстЗапросаПособийДокумента = СтрЗаменить(ТекстЗапросаПособийДокумента, "И (НЕ НачисленияПерерасчет.Сторно)", "");
			КонецЕсли; 
			
			ТекстЗапросаПособийДокументов = ТекстЗапросаПособийДокументов + ТекстЗапросаПособийДокумента;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийПерерасчет, "Документ.НачислениеЗарплаты.НачисленияПерерасчет", "Документ.СторнированиеНачислений.Сторнировано");
	ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "ПОМЕСТИТЬ ВТСторнируемыеНачисления", "");
	ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "НачисленияПерерасчет.СторнируемыйДокумент", "НачисленияПерерасчет.ДокументОснование");
	ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "И (НЕ НачисленияПерерасчет.Сторно)", "");
	
	ТекстЗапросаНачисленийДокументов = ТекстЗапросаНачисленийДокументов + Символы.ПС
		+ "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС
		+ ТекстЗапросаНачисленийДокумента;
	
	ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачислений, "Документ.НачислениеЗарплаты.Начисления", "Документ.СторнированиеНачислений.ДоначисленияИПерерасчеты");
	ТекстЗапросаНачисленийДокумента = СтрЗаменить(ТекстЗапросаНачисленийДокумента, "Ссылка.МесяцНачисления", "Ссылка.ПериодРегистрации");
	ТекстЗапросаНачисленийДокумента = ТекстЗапросаНачисленийДокумента + "
		|			И Начисления.ДатаНачала >= СторнируемыеРегистраторы.ПериодДействия
		|			И (Начисления.ДатаНачала <= КОНЕЦПЕРИОДА(СторнируемыеРегистраторы.ПериодДействия, МЕСЯЦ))";
		
	ТекстЗапросаНачисленийДокументов = ТекстЗапросаНачисленийДокументов + Символы.ПС
		+ "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС
		+ ТекстЗапросаНачисленийДокумента;
	
	Запрос.Текст = ТекстЗапросаНачисленийДокументов;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = ТекстЗапросаПособийДокументов;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	НачисленияПерерасчет = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	ПособияПерерасчет = РасчетЗарплатыРасширенный.ПустаяТаблицаПособия(Истина);
	
	ПерерасчитываемыеПериоды = Новый ТаблицаЗначений;
	ПерерасчитываемыеПериоды.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ПерерасчитываемыеПериоды.Колонки.Добавить("Сотрудники", Новый ОписаниеТипов("Массив"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СторнируемыеНачисления.*
		|ИЗ ВТСторнируемыеНачисления КАК СторнируемыеНачисления
		|
		|УПОРЯДОЧИТЬ ПО
		|	НАЧАЛОПЕРИОДА(СторнируемыеНачисления.ДатаНачала, МЕСЯЦ),
		|	СторнируемыеНачисления.Сотрудник,
		|	СторнируемыеНачисления.Начисление,
		|	СторнируемыеНачисления.Ссылка,
		|	СторнируемыеНачисления.НомерСтроки";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапросаПоНачислениям = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СторнируемыеПособия.*
		|ИЗ ВТСторнируемыеПособия КАК СторнируемыеПособия
		|
		|УПОРЯДОЧИТЬ ПО
		|	НАЧАЛОПЕРИОДА(СторнируемыеПособия.ДатаНачала, МЕСЯЦ),
		|	СторнируемыеПособия.Сотрудник,
		|	СторнируемыеПособия.Начисление,
		|	СторнируемыеПособия.Ссылка,
		|	СторнируемыеПособия.НомерСтроки";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапросаПоПособиям = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапросаПоНачислениям.Пустой() Или Не РезультатЗапросаПоПособиям.Пустой() Тогда
		
		// Сбор сведений о распределении начислений
		ТекстЗапросаРаспределениеРезультатовНачисленийДокумента = 
			СтрЗаменить(ТекстЗапросаРаспределениеРезультатовНачислений, "Документ.НачислениеЗарплаты.", "Документ.СторнированиеНачислений.");
			
		ТекстЗапросаРаспределениеРезультатовНачисленийДокументов = ТекстЗапросаРаспределениеРезультатовНачисленийДокументов	+ Символы.ПС
			+ "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС
			+ ТекстЗапросаРаспределениеРезультатовНачисленийДокумента;
		
		Запрос.Текст = ТекстЗапросаРаспределениеРезультатовНачисленийДокументов;
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаРаспределенияНачислений = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
	
		// Сбор сведений о распределении по территориям и условиям труда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СторнируемыеНачисления.Ссылка,
			|	РаспределениеПоТерриториямУсловиямТруда.*
			|ИЗ
			|	РегистрСведений.РаспределениеПоТерриториямУсловиямТруда КАК РаспределениеПоТерриториямУсловиямТруда
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеНачисления КАК СторнируемыеНачисления
			|		ПО РаспределениеПоТерриториямУсловиямТруда.РегистраторИзмерение = СторнируемыеНачисления.Ссылка
			|			И РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки = СторнируемыеНачисления.ИдентификаторСтрокиВидаРасчета";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		// Сбор сведений о показателях
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СторнируемыеНачисления.Ссылка,
			|	ЗначенияПоказателейНачислений.*
			|ИЗ
			|	РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСторнируемыеНачисления КАК СторнируемыеНачисления
			|		ПО ЗначенияПоказателейНачислений.РегистраторИзмерение = СторнируемыеНачисления.Ссылка
			|			И ЗначенияПоказателейНачислений.ИдентификаторСтроки = СторнируемыеНачисления.ИдентификаторСтрокиВидаРасчета";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если НачисленияПерерасчет.Колонки.Найти("РезультатРаспределения") = Неопределено Тогда
			НачисленияПерерасчет.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
		КонецЕсли;
		
		Выборка = РезультатЗапросаПоНачислениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПериодДействия = Выборка.ПериодДействия;
			СтрокаПериодаДействия = ПерерасчитываемыеПериоды.Найти(ПериодДействия, "ПериодДействия");
			Если СтрокаПериодаДействия = Неопределено Тогда
				СтрокаПериодаДействия = ПерерасчитываемыеПериоды.Добавить();
				СтрокаПериодаДействия.ПериодДействия = ПериодДействия;
			КонецЕсли;
			
			Если СтрокаПериодаДействия.Сотрудники.Найти(Выборка.Сотрудник) = Неопределено Тогда
				СтрокаПериодаДействия.Сотрудники.Добавить(Выборка.Сотрудник);
			КонецЕсли; 
			
			НоваСтрокаСторноНачисленийПерерасчет = НачисленияПерерасчет.Добавить();
			ЗаполнитьЗначенияСвойств(НоваСтрокаСторноНачисленийПерерасчет, Выборка, , "ИдентификаторСтрокиВидаРасчета");
			
			НоваСтрокаСторноНачисленийПерерасчет.Результат = - НоваСтрокаСторноНачисленийПерерасчет.Результат;
			НоваСтрокаСторноНачисленийПерерасчет.ОтработаноДней = - НоваСтрокаСторноНачисленийПерерасчет.ОтработаноДней;
			НоваСтрокаСторноНачисленийПерерасчет.ОтработаноЧасов = - НоваСтрокаСторноНачисленийПерерасчет.ОтработаноЧасов;
			НоваСтрокаСторноНачисленийПерерасчет.ОплаченоДней = - НоваСтрокаСторноНачисленийПерерасчет.ОплаченоДней;
			НоваСтрокаСторноНачисленийПерерасчет.ОплаченоЧасов = - НоваСтрокаСторноНачисленийПерерасчет.ОплаченоЧасов;
			
			НоваСтрокаСторноНачисленийПерерасчет.Сторно = Ложь;
			НоваСтрокаСторноНачисленийПерерасчет.ФиксСторно = Истина;
			НоваСтрокаСторноНачисленийПерерасчет.СторнируемыйДокумент = Выборка.Ссылка;
			
			ЗаполнитьРезультатРаспределения(НоваСтрокаСторноНачисленийПерерасчет, ТаблицаРаспределенияНачислений, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
			ЗаполнитьРезультатРаспределенияПоТерриториям(НоваСтрокаСторноНачисленийПерерасчет, ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда, ТаблицаПоказателей, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
			ЗаполнитьПоказатели(НоваСтрокаСторноНачисленийПерерасчет, ТаблицаПоказателей, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
			
		КонецЦикла; 
		
		Выборка = РезультатЗапросаПоПособиям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПериодДействия = Выборка.ПериодДействия;
			СтрокаПериодаДействия = ПерерасчитываемыеПериоды.Найти(ПериодДействия, "ПериодДействия");
			Если СтрокаПериодаДействия = Неопределено Тогда
				СтрокаПериодаДействия = ПерерасчитываемыеПериоды.Добавить();
				СтрокаПериодаДействия.ПериодДействия = ПериодДействия;
			КонецЕсли;
			Если СтрокаПериодаДействия.Сотрудники.Найти(Выборка.Сотрудник) = Неопределено Тогда
				СтрокаПериодаДействия.Сотрудники.Добавить(Выборка.Сотрудник);
			КонецЕсли; 
			
			НоваСтрокаСторноПособийПерерасчет = ПособияПерерасчет.Добавить();
			ЗаполнитьЗначенияСвойств(НоваСтрокаСторноПособийПерерасчет, Выборка, , "ИдентификаторСтрокиВидаРасчета");
			
			НоваСтрокаСторноПособийПерерасчет.Результат = - НоваСтрокаСторноПособийПерерасчет.Результат;
			НоваСтрокаСторноПособийПерерасчет.РезультатВТомЧислеЗаСчетФБ = - НоваСтрокаСторноПособийПерерасчет.РезультатВТомЧислеЗаСчетФБ;
			НоваСтрокаСторноПособийПерерасчет.СуммаВсегоПоУходуЗаПервымРебенком = - НоваСтрокаСторноПособийПерерасчет.СуммаВсегоПоУходуЗаПервымРебенком;
			НоваСтрокаСторноПособийПерерасчет.СуммаСверхНормПоУходуЗаПервымРебенком = - НоваСтрокаСторноПособийПерерасчет.СуммаСверхНормПоУходуЗаПервымРебенком;
			НоваСтрокаСторноПособийПерерасчет.СуммаВсегоПоУходуЗаВторымРебенком = - НоваСтрокаСторноПособийПерерасчет.СуммаВсегоПоУходуЗаВторымРебенком;
			НоваСтрокаСторноПособийПерерасчет.СуммаСверхНормПоУходуЗаВторымРебенком = - НоваСтрокаСторноПособийПерерасчет.СуммаСверхНормПоУходуЗаВторымРебенком;
			
			НоваСтрокаСторноПособийПерерасчет.ОплаченоДней = - НоваСтрокаСторноПособийПерерасчет.ОплаченоДней;
			НоваСтрокаСторноПособийПерерасчет.ОплаченоЧасов = - НоваСтрокаСторноПособийПерерасчет.ОплаченоЧасов;
			
			НоваСтрокаСторноПособийПерерасчет.ФиксРасчет = Ложь;
			НоваСтрокаСторноПособийПерерасчет.ФиксСтрока = Ложь;
			НоваСтрокаСторноПособийПерерасчет.ФиксЗаполнение = Ложь;
			
			НоваСтрокаСторноПособийПерерасчет.Сторно = Истина;
			НоваСтрокаСторноПособийПерерасчет.ФиксСторно = Истина;
			НоваСтрокаСторноПособийПерерасчет.СторнируемыйДокумент = Выборка.Ссылка;
			
			ЗаполнитьРезультатРаспределения(НоваСтрокаСторноПособийПерерасчет, ТаблицаРаспределенияНачислений, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
			ЗаполнитьРезультатРаспределенияПоТерриториям(НоваСтрокаСторноПособийПерерасчет, ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда, ТаблицаПоказателей, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
			ЗаполнитьПоказатели(НоваСтрокаСторноПособийПерерасчет, ТаблицаПоказателей, Выборка.Ссылка, Выборка.ИдентификаторСтрокиВидаРасчета);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	СвернутьНачисленияПерерасчет(НачисленияПерерасчет);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СторнируемыеРегистраторы.Сотрудник КАК Сотрудник,
		|	СторнируемыеРегистраторы.ПериодДействия КАК ПериодДействия
		|ИЗ
		|	ВТСторнируемыеРегистраторы КАК СторнируемыеРегистраторы
		|ГДЕ
		|	ЕСТЬNULL(СторнируемыеРегистраторы.Регистратор, ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодДействия,
		|	Сотрудник";
		
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ПериодДействия") Цикл
			
			ПериодДействия = НачалоМесяца(Выборка.ПериодДействия);
			СтрокаПериодаДействия = ПерерасчитываемыеПериоды.Найти(ПериодДействия, "ПериодДействия");
			Если СтрокаПериодаДействия = Неопределено Тогда
				СтрокаПериодаДействия = ПерерасчитываемыеПериоды.Добавить();
				СтрокаПериодаДействия.ПериодДействия = ПериодДействия;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Если СтрокаПериодаДействия.Сотрудники.Найти(Выборка.Сотрудник) = Неопределено Тогда
					СтрокаПериодаДействия.Сотрудники.Добавить(Выборка.Сотрудник);
				КонецЕсли;
				
			КонецЦикла; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если ПерерасчитываемыеПериоды.Количество() > 0 Тогда
		
		ПерерасчитываемыеПериоды.Сортировать("ПериодДействия");
		
		// Собираем последовательные периоды действия с одинаковым составом сотрудников
		НепрерывныеПериоды = Новый ТаблицаЗначений;
		НепрерывныеПериоды.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
		НепрерывныеПериоды.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата"));
		НепрерывныеПериоды.Колонки.Добавить("Сотрудники", Новый ОписаниеТипов("Массив"));
		
		НепрерывныйПериод = Неопределено;
		Для каждого СтрокаПериода Из ПерерасчитываемыеПериоды Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаПериода.ПериодДействия) Тогда
				Продолжить;
			КонецЕсли;
			
			ПериодПерерасчета = НачалоМесяца(СтрокаПериода.ПериодДействия);
			
			Если НепрерывныйПериод = Неопределено
				ИЛИ НепрерывныйПериод.Окончание + 1 <> ПериодПерерасчета
				ИЛИ Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(НепрерывныйПериод.Сотрудники, СтрокаПериода.Сотрудники) Тогда
				
				НепрерывныйПериод = НепрерывныеПериоды.Добавить();
				НепрерывныйПериод.Начало = ПериодПерерасчета;
				НепрерывныйПериод.Сотрудники = СтрокаПериода.Сотрудники;
				
			КонецЕсли;
			
			НепрерывныйПериод.Окончание = КонецМесяца(ПериодПерерасчета);
			
		КонецЦикла;
		
		Для каждого НепрерывныйПериод Из НепрерывныеПериоды Цикл
			
			ПерерасчитанныеНачисления = РасчетЗарплатыРасширенный.ДанныеДляНачисленияЗарплаты(
				Организация,
				НепрерывныйПериод.Начало,
				НепрерывныйПериод.Окончание,
				МесяцНачисления,
				,
				НепрерывныйПериод.Сотрудники,
				,
				,
				Ложь,
				,
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПерерасчитанныеНачисления, НачисленияПерерасчет);
			
			ПерерасчитанныеПособия = РасчетЗарплатыРасширенный.ДанныеДляНачисленияПособий(
				Организация,
				НепрерывныйПериод.Начало,
				НепрерывныйПериод.Окончание,
				МесяцНачисления,
				,
				НепрерывныйПериод.Сотрудники,
				,
				,
				Истина);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПерерасчитанныеПособия, ПособияПерерасчет);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый Структура("НачисленияПерерасчет,ПособияПерерасчет", НачисленияПерерасчет, ПособияПерерасчет);
	
КонецФункции

Процедура ЗаполнитьРезультатРаспределения(СтрокаСторноПерерасчет, ТаблицаРаспределения, Ссылка, ИдентификаторСтрокиВидаРасчета)

	СтруктураПоиска = Новый Структура("Ссылка,ИдентификаторСтроки", Ссылка, ИдентификаторСтрокиВидаРасчета);
	СтрокиРаспределения = ТаблицаРаспределения.НайтиСтроки(СтруктураПоиска);
	Если СтрокиРаспределения.Количество() > 0 Тогда
		
		ОписаниеТаблицы = Новый Структура("ПутьКДаннымРаспределениеРезультатов", "РаспределениеРезультатовНачислений");
		ИменаКолонокТаблицыРаспределенияНачислений = ЗарплатаКадрыРасширенныйКлиентСервер.ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицы);
		
		РезультатРаспределения = Новый Массив;
		Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			
			СтруктураРаспределения = Новый Структура(ИменаКолонокТаблицыРаспределенияНачислений);
			
			ЗаполнитьЗначенияСвойств(СтруктураРаспределения, СтрокаРаспределения);
			СтруктураРаспределения.Результат = - СтруктураРаспределения.Результат;
			
			РезультатРаспределения.Добавить(СтруктураРаспределения);
			
		КонецЦикла;
		
		СтрокаСторноПерерасчет.РезультатРаспределения = Новый ФиксированныйМассив(РезультатРаспределения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатРаспределенияПоТерриториям(СтрокаСторноПерерасчет, ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда, ТаблицаПоказателей, Ссылка, ИдентификаторСтрокиВидаРасчета);
	
	СтруктураПоиска = Новый Структура("Ссылка,ИдентификаторСтроки", Ссылка, ИдентификаторСтрокиВидаРасчета);
	СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда = ТаблицаРаспределенияНачисленийПоТерриториямИУсловиямТруда.НайтиСтроки(СтруктураПоиска);
	Если СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда.Количество() > 0 Тогда
		
		СтрокиРаспределения = Новый Массив;
		Для каждого СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда Из СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда Цикл
			
			ОписаниеСтрок = РасчетЗарплатыРасширенныйФормы.ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
			ЗаполнитьЗначенияСвойств(ОписаниеСтрок, СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда);
			
			Если ЗначениеЗаполнено(СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда.ИдентификаторСтрокиПоказателей) Тогда
				
				НомерПоказателя = 1;
				Показатели = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда();
				Для ИндексПоказателя = 1 По Показатели.Количество() - 1 Цикл
					
					СтруктураПоиска = Новый Структура("Ссылка,ИдентификаторСтроки,Показатель",
						Ссылка, СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда.ИдентификаторСтрокиПоказателей,
						Показатели[ИндексПоказателя]);
						
					СтрокиПоказателей = ТаблицаПоказателей.НайтиСтроки(СтруктураПоиска);
					Если СтрокиПоказателей.Количество() > 0  Тогда
					
						ОписаниеСтрок["Показатель" + НомерПоказателя] = СтрокиПоказателей[0].Показатель;
						ОписаниеСтрок["Значение" + НомерПоказателя] = СтрокиПоказателей[0].Значение;
						НомерПоказателя = НомерПоказателя + 1;
						
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЕсли; 
			
			СтрокиРаспределения.Добавить(Новый ФиксированнаяСтруктура(ОписаниеСтрок));
			
		КонецЦикла;
		
		СтрокаСторноПерерасчет.РаспределениеПоТерриториямУсловиямТруда = Новый ФиксированныйМассив(СтрокиРаспределения);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПоказатели(СтрокаСторноПерерасчет, ТаблицаПоказателей, Ссылка, ИдентификаторСтрокиВидаРасчета);

	НомерПоказателя = 1;
	ИнформацияОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаСторноПерерасчет.Начисление);
	Для каждого ОписаниеПоказателя Из ИнформацияОНачислении.Показатели Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка,ИдентификаторСтроки,Показатель", Ссылка, ИдентификаторСтрокиВидаРасчета, ОписаниеПоказателя.Показатель);
		СтрокиПоказателей = ТаблицаПоказателей.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПоказателей.Количество() > 0  Тогда
			
			СтрокаСторноПерерасчет["Показатель" + НомерПоказателя] = ОписаниеПоказателя.Показатель;
			СтрокаСторноПерерасчет["Значение" + НомерПоказателя] = СтрокиПоказателей[0].Значение;
			
		КонецЕсли; 
		
		НомерПоказателя = НомерПоказателя + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИменаРегистровИнициирующихПерерасчеты()
	
	ИменаРегистров = Новый Массив;
	
	ИменаРегистров.Добавить("ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников");
	ИменаРегистров.Добавить("ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников");
	ИменаРегистров.Добавить("ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников");
	ИменаРегистров.Добавить("ПлановыеНачисления");	
	ИменаРегистров.Добавить("ВытесняемоеПлановоеВремяСотрудников");
	ИменаРегистров.Добавить("ДанныеИндивидуальныхГрафиковСотрудников");
	ИменаРегистров.Добавить("ДанныеОперативногоУчетаРабочегоВремениСотрудников");
	ИменаРегистров.Добавить("ДанныеТабельногоУчетаРабочегоВремениСотрудников");
	ИменаРегистров.Добавить("ДанныеСводногоУчетаРабочегоВремениСотрудников");
	ИменаРегистров.Добавить("ВыполненныеРаботыСотрудников");
	
	Возврат ИменаРегистров;
	
КонецФункции

Функция ИменаРегистровРегистратораИнициирующихПерерасчеты(Регистратор)
	
	РегистрыРегистратора = Новый Массив;
	
	ИменаРегистровИнициаторов = ИменаРегистровИнициирующихПерерасчеты();
	МетаданныеРегистратора = Регистратор.Метаданные();
	Для каждого ИмяРегистра Из ИменаРегистровИнициаторов Цикл
		
		МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(ИмяРегистра);
		Если МетаданныеРегистра = Неопределено Тогда
			МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
		КонецЕсли;
		
		Если МетаданныеРегистратора.Движения.Содержит(МетаданныеРегистра) Тогда
			РегистрыРегистратора.Добавить(ИмяРегистра);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РегистрыРегистратора;
	
КонецФункции

Функция ИменаРегистровДвиженийРегистратораИнициирующихПерерасчеты(Движения)
	
	РегистрыРегистратора = Новый Массив;
	
	ИменаРегистровИнициаторов = ИменаРегистровИнициирующихПерерасчеты();
	Для каждого ИмяРегистра Из ИменаРегистровИнициаторов Цикл
		Если ТипЗнч(Движения) = Тип("Структура") Тогда
			Если Движения.Свойство(ИмяРегистра) Тогда
				РегистрыРегистратора.Добавить(ИмяРегистра);
			КонецЕсли;
		Иначе
			Если Движения.Найти(ИмяРегистра) <> Неопределено Тогда
				РегистрыРегистратора.Добавить(ИмяРегистра);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РегистрыРегистратора;
	
КонецФункции

Процедура СоздатьВТДвиженияРегистратора(Регистратор, ДанныеДляРегистрацииПерерасчетов, ИмяРегистра, Организация, ИмяВТДвиженияРегистратора = Неопределено, ИсключатьНеИзмененные = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляРегистрацииПерерасчетов;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
	ЕстьПолеОрганизация = Ложь;
	
	Если ИсключатьНеИзмененные
		И (ИмяРегистра = "ПлановыеНачисления"
			ИЛИ ИмяРегистра = "ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников") Тогда
			
		ИсключатьНеИзмененныеЗаписи = Истина;
		
	Иначе
		ИсключатьНеИзмененныеЗаписи = Ложь;
	КонецЕсли;
	
	Если ОписаниеРегистра.ТипРегистра = "РегистрСведений"
		И ОписаниеРегистра.Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистр.ПериодДействия КАК Период,
			|	Регистр.Регистратор КАК Регистратор";
			
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистр.Период КАК Период,
			|	Регистр.Регистратор КАК Регистратор";
			
	КонецЕсли;
	
	Для каждого ИмяПоля Из ОписаниеРегистра.Измерения Цикл
			
		Запрос.Текст = Запрос.Текст + ",
			|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
			
		Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
			ЕстьПолеОрганизация = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
	Для каждого ИмяПоля Из ОписаниеРегистра.Ресурсы Цикл
		
		Запрос.Текст = Запрос.Текст + ",
			|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
			
		Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
			ЕстьПолеОрганизация = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ОписаниеРегистра.ТипРегистра = "РегистрСведений" Тогда
		
		Для каждого ИмяПоля Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
			
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
				
			Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
				ЕстьПолеОрганизация = Истина;
			КонецЕсли; 
			
		КонецЦикла;
			
	КонецЕсли;
		
	Для каждого ИмяПоля Из ОписаниеРегистра.Реквизиты Цикл
		
		Запрос.Текст = Запрос.Текст + ",
			|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
			
		Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
			ЕстьПолеОрганизация = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если Не ЕстьПолеОрганизация Тогда
		
		Запрос.Текст = Запрос.Текст + ",
			|	&Организация КАК Организация";
		
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ВТПерерасчет" + ИмяРегистра + "
		|	ИЗ " + ОписаниеРегистра.ТипРегистра + "." + ИмяРегистра + " КАК Регистр
		|ГДЕ
		|	Регистр.Регистратор = &Регистратор";
		
	Если ОписаниеРегистра.ТипРегистра = "РегистрСведений"
		И ОписаниеРегистра.ВозвратныеРесурсы.Количество() > 0 Тогда
			
		Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
		    |
			|ВЫБРАТЬ
			|	Регистр.ДействуетДо КАК Период,
			|	Регистр.Регистратор КАК Регистратор";


		Для каждого ИмяПоля Из ОписаниеРегистра.Измерения Цикл
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
		КонецЦикла;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.Ресурсы Цикл
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
		КонецЦикла;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + "ПоОкончании КАК " + ИмяПоля;
		КонецЦикла;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.Реквизиты Цикл
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
		КонецЦикла;
		
		Если Не ЕстьПолеОрганизация Тогда
			
			Запрос.Текст = Запрос.Текст + ",
				|	&Организация КАК Организация";
			
		КонецЕсли; 
	
		Запрос.Текст = Запрос.Текст + "
			|	ИЗ " + ОписаниеРегистра.ТипРегистра + "." + ИмяРегистра + " КАК Регистр
			|ГДЕ
			|	Регистр.Регистратор = &Регистратор
			|	И Регистр.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)";
		
	КонецЕсли;
	
	Если ИмяВТДвиженияРегистратора <> Неопределено Тогда
		ИмяВременнойТаблицы = ИмяВТДвиженияРегистратора;
	Иначе
		ИмяВременнойТаблицы = "ВТПерерасчет" + ИмяРегистра;
	КонецЕсли; 
	
	Если ИсключатьНеИзмененныеЗаписи Тогда
		ИмяВТДвиженийРегистратора = ИмяВременнойТаблицы + "Предварительно";
	Иначе
		ИмяВТДвиженийРегистратора = ИмяВременнойТаблицы;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПерерасчет" + ИмяРегистра, ИмяВТДвиженийРегистратора);
	Запрос.Выполнить();
	
	Если ИсключатьНеИзмененныеЗаписи Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистр.Период КАК Период";
			
		ИзмеренияФильтра = "";
		ДобавитьЗапятую = Ложь;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.Измерения Цикл
				
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
				
			Если ДобавитьЗапятую Тогда
				ИзмеренияФильтра = ИзмеренияФильтра + ","
			Иначе
				ДобавитьЗапятую = Истина;
			КонецЕсли;
			
			ИзмеренияФильтра = ИзмеренияФильтра + ИмяПоля;
				
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
			|ПОМЕСТИТЬ ВТИзмеренияДаты" + ИмяВТДвиженийРегистратора + "
			|ИЗ " + ИмяВТДвиженийРегистратора + " КАК Регистр";
				
		Запрос.Выполнить();
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИзмеренияДаты" + ИмяВТДвиженийРегистратора, ИзмеренияФильтра);
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			ИмяРегистра,
			ДанныеДляРегистрацииПерерасчетов,
			Истина,
			ОписаниеФильтра,
			ПараметрыПостроения,
			ИмяВТДвиженийРегистратора + "СрезПоследних");
		
		УсловияСоединения = "";
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистр.Период КАК Период,
			|	Регистр.Регистратор КАК Регистратор";
			
		Для каждого ИмяПоля Из ОписаниеРегистра.Измерения Цикл
				
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
				
			Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
				ЕстьПолеОрганизация = Истина;
			КонецЕсли; 
			
			УсловияСоединения = УсловияСоединения + Символы.ПС + "
				|	И Регистр." + ИмяПоля + " = СрезПоследних." + ИмяПоля;
			
		КонецЦикла;
		
		Для каждого ИмяПоля Из ОписаниеРегистра.Ресурсы Цикл
			
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
				
			Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
				ЕстьПолеОрганизация = Истина;
			КонецЕсли; 
			
			УсловияСоединения = УсловияСоединения + Символы.ПС + "
				|	И Регистр." + ИмяПоля + " = СрезПоследних." + ИмяПоля;
			
		КонецЦикла;
		
		Если ОписаниеРегистра.ТипРегистра = "РегистрСведений" Тогда
			
			Для каждого ИмяПоля Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
				
				Запрос.Текст = Запрос.Текст + ",
					|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
					
				Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
					ЕстьПолеОрганизация = Истина;
				КонецЕсли; 
				
				УсловияСоединения = УсловияСоединения + Символы.ПС + "
					|	И Регистр." + ИмяПоля + " = СрезПоследних." + ИмяПоля;
				
			КонецЦикла;
				
		КонецЕсли;
			
		Для каждого ИмяПоля Из ОписаниеРегистра.Реквизиты Цикл
			
			Запрос.Текст = Запрос.Текст + ",
				|	Регистр." + ИмяПоля + " КАК " + ИмяПоля;
				
			Если Не ЕстьПолеОрганизация И ИмяПоля = "Организация" Тогда
				ЕстьПолеОрганизация = Истина;
			КонецЕсли; 
			
			УсловияСоединения = УсловияСоединения + Символы.ПС + "
				|	И Регистр." + ИмяПоля + " = СрезПоследних." + ИмяПоля;
			
		КонецЦикла;
		
		Если Не ЕстьПолеОрганизация Тогда
			
			Запрос.Текст = Запрос.Текст + ",
				|	&Организация КАК Организация";
			
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + "
			|ПОМЕСТИТЬ ВТПерерасчет" + ИмяРегистра + "
			|	ИЗ " + ИмяВТДвиженийРегистратора + " КАК Регистр
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТДвиженийРегистратора + "СрезПоследних КАК СрезПоследних
			|		ПО Регистр.Период = СрезПоследних.Период"
			+ УсловияСоединения
			+ "
			|ГДЕ
			|	СрезПоследних.Регистратор ЕСТЬ NULL";
			
			
		Если ИмяВТДвиженияРегистратора <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПерерасчет" + ИмяРегистра, ИмяВТДвиженияРегистратора);
		КонецЕсли; 
	
		Запрос.Выполнить();
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ЗарегистрироватьПерерасчетыСотрудников(ДанныеДляРегистрацииПерерасчетов, ИмяВТСотрудникиПериоды, ИсключаемыйРегистратор = Неопределено, РегистрацияНачалаУчета = Ложь)
	
	ЗарегистрированныеПерерасчеты = Новый ТаблицаЗначений;
	ЗарегистрированныеПерерасчеты.Колонки.Добавить("Организация");
	ЗарегистрированныеПерерасчеты.Колонки.Добавить("Сотрудник");
	ЗарегистрированныеПерерасчеты.Колонки.Добавить("ПериодДействия");
	ЗарегистрированныеПерерасчеты.Колонки.Добавить("ДокументОснование");
	ЗарегистрированныеПерерасчеты.Колонки.Добавить("ДокументНачисления");
	
	КатегорииНачисленийПособий = УчетПособийСоциальногоСтрахованияРасширенный.КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляРегистрацииПерерасчетов;
	
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("КатегорииНачисленийПособий", КатегорииНачисленийПособий);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК Начисление
		|ПОМЕСТИТЬ ВТОтобранныеНачисления
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))";
	
	Запрос.Выполнить();
	
	Если РегистрацияНачалаУчета Тогда
		
		ТаблицаПоследнихПериодов = Новый ТаблицаЗначений;
		ТаблицаПоследнихПериодов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаПоследнихПериодов.Колонки.Добавить("ПоследнийПериодДействия", Новый ОписаниеТипов("Дата"));
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериоды.Организация
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запрос.УстановитьПараметр("Организация", Выборка.Организация);
			
			Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Начисления.Организация,
				|	Начисления.ПериодДействия КАК ПоследнийПериодДействия
				|ИЗ
				|	РегистрРасчета.Начисления КАК Начисления
				|ГДЕ
				|	Начисления.Организация = &Организация
				|	И Начисления.Регистратор ССЫЛКА Документ.НачислениеЗарплаты
				|	И Начисления.Регистратор <> &ИсключаемыйРегистратор
				|	И Начисления.ВидРасчета В
				|			(ВЫБРАТЬ
				|				ОтобранныеНачисления.Начисление
				|			ИЗ
				|				ВТОтобранныеНачисления КАК ОтобранныеНачисления)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПоследнийПериодДействия УБЫВ";
			
			ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать();
			Если ВыборкаПоОрганизации.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаПоследнихПериодов.Добавить(), ВыборкаПоОрганизации);
			КонецЕсли; 
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ТаблицаПоследнихПериодов", ТаблицаПоследнихПериодов);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаПоследнихПериодов.Организация,
			|	ТаблицаПоследнихПериодов.ПоследнийПериодДействия
			|ПОМЕСТИТЬ ВТПоследниеПериодыНачислений
			|ИЗ
			|	&ТаблицаПоследнихПериодов КАК ТаблицаПоследнихПериодов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериоды.Организация,
			|	СотрудникиПериоды.Сотрудник,
			|	СотрудникиПериоды.ПериодДействия,
			|	СотрудникиПериоды.ДокументОснование
			|ПОМЕСТИТЬ ВТСотрудникиСПоследнимиПериодами
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеПериодыНачислений КАК ПоследниеПериодыНачислений
			|		ПО СотрудникиПериоды.Организация = ПоследниеПериодыНачислений.Организация
			|ГДЕ
			|	СотрудникиПериоды.ПериодДействия <= ПоследниеПериодыНачислений.ПоследнийПериодДействия
			|	И РАЗНОСТЬДАТ(СотрудникиПериоды.ПериодДействия, ПоследниеПериодыНачислений.ПоследнийПериодДействия, МЕСЯЦ) < 2
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериоды.Организация КАК Организация,
			|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
			|	Начисления.ПериодРегистрации КАК ПериодДействия,
			|	СотрудникиПериоды.ДокументОснование КАК ДокументОснование,
			|	МАКСИМУМ(Начисления.Регистратор) КАК ДокументНачисления
			|ПОМЕСТИТЬ ВТНеобходимыеПерерасчеты
			|ИЗ
			|	ВТСотрудникиСПоследнимиПериодами КАК СотрудникиПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
			|		ПО СотрудникиПериоды.Организация = Начисления.Организация
			|			И СотрудникиПериоды.ПериодДействия <= Начисления.ПериодДействия
			|			И (Начисления.Регистратор ССЫЛКА Документ.НачислениеЗарплаты)
			|			И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
			|			И (Начисления.ВидРасчета В
			|				(ВЫБРАТЬ
			|					ОтобранныеНачисления.Начисление
			|				ИЗ
			|					ВТОтобранныеНачисления КАК ОтобранныеНачисления))
			|
			|СГРУППИРОВАТЬ ПО
			|	СотрудникиПериоды.Организация,
			|	СотрудникиПериоды.Сотрудник,
			|	СотрудникиПериоды.ДокументОснование,
			|	Начисления.ПериодРегистрации";
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПериоды.Организация КАК Организация,
			|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
			|	Начисления.ПериодРегистрации КАК ПериодДействия,
			|	СотрудникиПериоды.ДокументОснование КАК ДокументОснование,
			|	Начисления.Регистратор КАК ДокументНачисления
			|ПОМЕСТИТЬ ВТНеобходимыеПерерасчеты
			|ИЗ
			|	ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
			|		ПО СотрудникиПериоды.Организация = Начисления.Организация
			|			И СотрудникиПериоды.Сотрудник = Начисления.Сотрудник
			|			И СотрудникиПериоды.ПериодДействия <= Начисления.ПериодДействия
			|			И (НЕ Начисления.Регистратор ССЫЛКА Документ.ПереносДанных)
			|			И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
			|			И (Начисления.ВидРасчета В
			|				(ВЫБРАТЬ
			|					ОтобранныеНачисления.Начисление
			|				ИЗ
			|					ВТОтобранныеНачисления КАК ОтобранныеНачисления))";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НеобходимыеПерерасчеты.Организация,
		|	НеобходимыеПерерасчеты.Сотрудник,
		|	ВЫРАЗИТЬ(НеобходимыеПерерасчеты.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	НеобходимыеПерерасчеты.ПериодДействия,
		|	НеобходимыеПерерасчеты.ДокументОснование,
		|	НеобходимыеПерерасчеты.ДокументНачисления,
		|	ВЫБОР
		|		КОГДА ПерерасчетЗарплаты.Организация ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СуществующаяЗапись
		|ИЗ
		|	ВТНеобходимыеПерерасчеты КАК НеобходимыеПерерасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
		|		ПО НеобходимыеПерерасчеты.Организация = ПерерасчетЗарплаты.Организация
		|			И НеобходимыеПерерасчеты.Сотрудник = ПерерасчетЗарплаты.Сотрудник
		|			И НеобходимыеПерерасчеты.ПериодДействия = ПерерасчетЗарплаты.ПериодДействия
		|			И НеобходимыеПерерасчеты.ДокументОснование = ПерерасчетЗарплаты.ДокументОснование
		|			И НеобходимыеПерерасчеты.ДокументНачисления = ПерерасчетЗарплаты.ДокументНачисления
		|ГДЕ
		|	НеобходимыеПерерасчеты.ДокументОснование <> НеобходимыеПерерасчеты.ДокументНачисления";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(ЗарегистрированныеПерерасчеты.Добавить(), Выборка);
			Если Не Выборка.СуществующаяЗапись Тогда
				
				НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
				НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
				НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
				НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
				НаборЗаписей.Отбор.ДокументНачисления.Установить(Выборка.ДокументНачисления);
				
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				
				НаборЗаписей.Записать();
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ЗарегистрированныеПерерасчеты;
	
КонецФункции

Процедура СвернутьНачисленияПерерасчет(НачисленияПерерасчет)
	
	СтрокиКУдалению = Новый Массив;
	КлючТекущейЗаписи = Новый Структура("Сотрудник,Начисление,ПериодДействия");
	Для Каждого Колонка Из НачисленияПерерасчет.Колонки Цикл
		Если Прав(Колонка.Имя, 8) = "Значение" Тогда 
			КлючТекущейЗаписи.Вставить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из НачисленияПерерасчет Цикл
		Если КлючСтрокиИзменился(КлючТекущейЗаписи, Строка) Тогда
			ТекущаяЗапись = Строка;
			ЗаполнитьЗначенияСвойств(КлючТекущейЗаписи, Строка);
		Иначе
			ТекущаяЗапись.Результат = ТекущаяЗапись.Результат + Строка.Результат;
			ТекущаяЗапись.ОтработаноДней = ТекущаяЗапись.ОтработаноДней + Строка.ОтработаноДней;
			ТекущаяЗапись.ОтработаноЧасов = ТекущаяЗапись.ОтработаноЧасов + Строка.ОтработаноЧасов;
			ТекущаяЗапись.ОплаченоДней = ТекущаяЗапись.ОплаченоДней + Строка.ОплаченоДней;
			ТекущаяЗапись.ОплаченоЧасов = ТекущаяЗапись.ОплаченоЧасов + Строка.ОплаченоЧасов;
			ТекущаяЗапись.ДатаНачала = Мин(ТекущаяЗапись.ДатаНачала, Строка.ДатаНачала);
			ТекущаяЗапись.ДатаОкончания = Макс(ТекущаяЗапись.ДатаОкончания, Строка.ДатаОкончания);
			СтрокиКУдалению.Добавить(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из НачисленияПерерасчет Цикл
		
		Если СтрокиКУдалению.Найти(Строка) = Неопределено Тогда
			
			Если Строка.Результат = 0
				И Строка.ОтработаноДней = 0
				И Строка.ОтработаноЧасов = 0
				И Строка.ОплаченоДней = 0
				И Строка.ОплаченоЧасов = 0
				Тогда
				
				СтрокиКУдалению.Добавить(Строка);
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		НачисленияПерерасчет.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Функция КлючСтрокиИзменился(ЭталонныйКлюч, Строка)
	Для Каждого ЭлементСтруктуры Из ЭталонныйКлюч Цикл
		Если ЭлементСтруктуры.Значение <> Строка[ЭлементСтруктуры.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

#Область ОбновленияИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	
КонецПроцедуры

Процедура ПеренестиПериодДействияПерерасчетовНаНачалоМесяца() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПерерасчетЗарплаты.Организация,
		|	ПерерасчетЗарплаты.Сотрудник,
		|	ВЫРАЗИТЬ(ПерерасчетЗарплаты.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПерерасчетЗарплаты.ПериодДействия,
		|	ПерерасчетЗарплаты.ДокументОснование
		|ИЗ
		|	РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ПерерасчетЗарплаты.ПериодДействия, МЕСЯЦ) < ПерерасчетЗарплаты.ПериодДействия";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
			НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
			
			НаборЗаписей.Записать();
			
			НаборЗаписей.Отбор.ПериодДействия.Установить(НачалоМесяца(Выборка.ПериодДействия));
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.ПериодДействия = НачалоМесяца(Выборка.ПериодДействия);
			
			НаборЗаписей.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьДокументыНачисленияПерерасчетовЗарплаты() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПерерасчетЗарплаты.Организация,
		|	ПерерасчетЗарплаты.Сотрудник,
		|	ВЫРАЗИТЬ(ПерерасчетЗарплаты.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПерерасчетЗарплаты.ПериодДействия,
		|	ПерерасчетЗарплаты.ДокументОснование,
		|	НачисленияУдержанияПоСотрудникам.Регистратор КАК ДокументНачисления
		|ИЗ
		|	РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ПО ПерерасчетЗарплаты.Организация = НачисленияУдержанияПоСотрудникам.Организация
		|			И ПерерасчетЗарплаты.Сотрудник = НачисленияУдержанияПоСотрудникам.Сотрудник
		|			И (ПерерасчетЗарплаты.ПериодДействия = НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ))
		|			И (НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.НачислениеЗарплаты)
		|			И (ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете)))
		|ГДЕ
		|	ПерерасчетЗарплаты.ДокументНачисления = НЕОПРЕДЕЛЕНО";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
			НаборЗаписей.Отбор.ДокументНачисления.Установить(Неопределено);
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
			НаборЗаписей.Отбор.ДокументНачисления.Установить(Выборка.ДокументНачисления);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Организация = Выборка.Организация;
			Запись.Сотрудник = Выборка.Сотрудник;
			Запись.ФизическоеЛицо = Выборка.ФизическоеЛицо;
			Запись.ПериодДействия = Выборка.ПериодДействия;
			Запись.ДокументНачисления = Выборка.ДокументНачисления;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьФизическоеЛицоВРегистреПерерасчетЗарплаты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПерерасчетЗарплаты.Организация,
		|	ПерерасчетЗарплаты.Сотрудник,
		|	ВЫРАЗИТЬ(ПерерасчетЗарплаты.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПерерасчетЗарплаты.ПериодДействия,
		|	ПерерасчетЗарплаты.ДокументОснование,
		|	ПерерасчетЗарплаты.ДокументНачисления
		|ИЗ
		|	РегистрСведений.ПерерасчетЗарплаты КАК ПерерасчетЗарплаты
		|ГДЕ
		|	ПерерасчетЗарплаты.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.ПериодДействия.Установить(Выборка.ПериодДействия);
			НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
			НаборЗаписей.Отбор.ДокументНачисления.Установить(Выборка.ДокументНачисления);
			
			НаборЗаписей.Прочитать();
			Для каждого Запись Из НаборЗаписей Цикл
				Запись.ФизическоеЛицо = Выборка.ФизическоеЛицо;
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
