
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ФизическоеЛицо", ФизическоеЛицо);
	Параметры.Свойство("ВидыСтажа", ВидыСтажа);
	Параметры.Свойство("ДатаСведений", ДатаСведений);
	Параметры.Свойство("Записывать", Записывать);
	Параметры.Свойство("НеобязательныеВидыСтажа", НеобязательныеВидыСтажа);
	
	Если НеобязательныеВидыСтажа = Неопределено Тогда 
		НеобязательныеВидыСтажа = Новый ФиксированноеСоответствие(Новый Соответствие);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда 
		Параметры.Свойство("Сотрудник", Сотрудник);
		Если Не ЗначениеЗаполнено(Сотрудник) Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаСведений) Тогда 
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Заголовок = Строка(ФизическоеЛицо);
	
	ДополнитьФорму();
	ЗаполнитьДанныеОСтаже(Параметры.ДанныеСтажей);
	УстановитьДоступностьВводаДанныхСтажа(ЭтотОбъект);
	
	Если НЕ Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадрыРасширенная") Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_ИзменитьСтажПриИзменении(Элемент)
	
	УстановитьДоступностьВводаДанныхСтажа(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпособИсчисленияСтажаПриИзменении(Элемент)
	
	УстановитьДоступностьВводаДанныхСтажа(ЭтотОбъект);	
	УстановитьПредставлениеСтажа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеСтажаПриИзменении(Элемент)
	
	УстановитьПредставлениеСтажа(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Отказ = Ложь;
	ПроверитьЗаполнениеФормы(Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеСтажей = Новый Соответствие;
	
	Сч = 1;
	Для Каждого ВидСтажа Из ВидыСтажа Цикл
		
		Если НеобязательныеВидыСтажа.Получить(ВидСтажа) <> Неопределено И Не ЭтотОбъект["ИзменитьСтаж" + Сч] Тогда
			Продолжить; 
		КонецЕсли;
		
		ДанныеСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.СведенияОСтаже();
		
		ДанныеСтажа.ИсчисляетсяСДатыПриема = ИсчисляетсяСДатыПриема(ЭтотОбъект, Сч);
		ДанныеСтажа.ПериодРегистрации = ?(ДанныеСтажа.ИсчисляетсяСДатыПриема, ЭтотОбъект["ДатаПриема" + Сч], ЭтотОбъект["ДатаОтсчета" + Сч]);
		
		Если Не ДанныеСтажа.ИсчисляетсяСДатыПриема Тогда 
			ДанныеСтажа.РазмерМесяцев = ЭтотОбъект["Лет" + Сч] * 12 + ЭтотОбъект["Месяцев" + Сч];
			ДанныеСтажа.РазмерДней = ЭтотОбъект["Дней" + Сч];
		КонецЕсли;
		
		ДанныеСтажей.Вставить(ВидСтажа, ДанныеСтажа);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Если Записывать И Модифицированность Тогда 
		СохранитьДанныеНаСервере(ДанныеСтажей);
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Сотрудник", Сотрудник);
	ПараметрыОповещения.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	ПараметрыОповещения.Вставить("ДанныеСтажей", ДанныеСтажей);
	
	Оповестить("ИзмененСтажФизическогоЛица", ПараметрыОповещения, ЭтотОбъект);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДополнитьФорму()
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	КвалификаторыЧисла = Новый КвалификаторыЧисла(2, 0);
	ТипЧисло = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	
	КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ТипДата = Новый ОписаниеТипов("Дата", , , КвалификаторыДаты);
	
	Сч = 1;
	Для Каждого ВидСтажа Из ВидыСтажа Цикл 
		                                                 
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДатаПриема" + Сч, ТипДата, , , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДатаОтсчета" + Сч, ТипДата, , , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Лет" + Сч, ТипЧисло, , , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Месяцев" + Сч, ТипЧисло, , , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Дней" + Сч, ТипЧисло, , , Истина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СпособИсчисленияСтажа" + Сч, ТипЧисло, , НСтр("ru='Исчисляется';uk='Обчислюється'"), Истина));
		
		Если НеобязательныеВидыСтажа.Получить(ВидСтажа) <> Неопределено Тогда 
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИзменитьСтаж" + Сч, Новый ОписаниеТипов("Булево"), , , Истина));
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтотОбъект, МассивИменРеквизитовФормы);
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(ЭтотОбъект, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	Сч = 1;
	Для Каждого ВидСтажа Из ВидыСтажа Цикл 
		
		ГруппаВидСтажа = Элементы.Добавить("ГруппаВидСтажа" + Сч, Тип("ГруппаФормы"), Элементы.ВидыСтажа);
		ГруппаВидСтажа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаВидСтажа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаВидСтажа.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		ГруппаВидСтажа.Заголовок = Строка(ВидСтажа);
		
		ГруппаИспользованиеСтажа = Элементы.Добавить("ГруппаИспользованиеСтажа" + Сч, Тип("ГруппаФормы"), ГруппаВидСтажа);
		ГруппаИспользованиеСтажа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаИспользованиеСтажа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаИспользованиеСтажа.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаИспользованиеСтажа.ОтображатьЗаголовок = Ложь;
		ГруппаИспользованиеСтажа.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСверху;
		
		ЗаголовокПоляИспользоватьСтаж = НеобязательныеВидыСтажа.Получить(ВидСтажа);
		Если ЗаголовокПоляИспользоватьСтаж <> Неопределено Тогда 
			ПолеИзменитьСтаж = Элементы.Добавить("ИзменитьСтаж" + Сч, Тип("ПолеФормы"), ГруппаИспользованиеСтажа);
			ПолеИзменитьСтаж.Заголовок = ЗаголовокПоляИспользоватьСтаж;
			ПолеИзменитьСтаж.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ПолеИзменитьСтаж.Вид = ВидПоляФормы.ПолеФлажка;
			ПолеИзменитьСтаж.ПутьКДанным = "ИзменитьСтаж" + Сч;
			ПолеИзменитьСтаж.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменитьСтажПриИзменении");
		КонецЕсли;
		
		ГруппаДанныеСтажа = Элементы.Добавить("ГруппаДанныеСтажа" + Сч, Тип("ГруппаФормы"), ГруппаИспользованиеСтажа);
		ГруппаДанныеСтажа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаДанныеСтажа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаДанныеСтажа.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаДанныеСтажа.ОтображатьЗаголовок = Ложь;
		
		ГруппаЛеваяКолонка = Элементы.Добавить("ГруппаЛеваяКолонка" + Сч, Тип("ГруппаФормы"), ГруппаДанныеСтажа);
		ГруппаЛеваяКолонка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЛеваяКолонка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаЛеваяКолонка.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаЛеваяКолонка.ОтображатьЗаголовок = Ложь;
		
		ПолеСпособИсчисленияСтажа = Элементы.Добавить("СпособИсчисленияСтажа" + Сч, Тип("ПолеФормы"), ГруппаЛеваяКолонка);
		ПолеСпособИсчисленияСтажа.Вид = ВидПоляФормы.ПолеПереключателя;
		ПолеСпособИсчисленияСтажа.КоличествоКолонок = 1;
		ПолеСпособИсчисленияСтажа.СписокВыбора.Добавить(0, НСтр("ru='по трудовой книжке на';uk='за трудовою книжкою на'"));
		ПолеСпособИсчисленияСтажа.СписокВыбора.Добавить(1, НСтр("ru='с момента приема на работу';uk='з моменту прийому на роботу'"));
		ПолеСпособИсчисленияСтажа.ПутьКДанным = "СпособИсчисленияСтажа" + Сч;
		ПолеСпособИсчисленияСтажа.УстановитьДействие("ПриИзменении", "Подключаемый_СпособИсчисленияСтажаПриИзменении");
		
		ГруппаПраваяКолонка = Элементы.Добавить("ГруппаПраваяКолонка" + Сч, Тип("ГруппаФормы"), ГруппаДанныеСтажа);
		ГруппаПраваяКолонка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаПраваяКолонка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаПраваяКолонка.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаПраваяКолонка.ОтображатьЗаголовок = Ложь;
		
		ПолеПустаяСтрока = Элементы.Добавить("ПустаяСтрока" + Сч, Тип("ДекорацияФормы"), ГруппаПраваяКолонка);
		ПолеПустаяСтрока.Вид = ВидДекорацииФормы.Надпись;
		
		ГруппаСтажПоТрудовойКнижке = Элементы.Добавить("ГруппаСтажПоТрудовойКнижке" + Сч, Тип("ГруппаФормы"), ГруппаПраваяКолонка);
		ГруппаСтажПоТрудовойКнижке.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСтажПоТрудовойКнижке.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаСтажПоТрудовойКнижке.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаСтажПоТрудовойКнижке.ОтображатьЗаголовок = Ложь;
		
		ПолеДатаОтсчета = Элементы.Добавить("ДатаОтсчета" + Сч, Тип("ПолеФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеДатаОтсчета.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеДатаОтсчета.Вид = ВидПоляФормы.ПолеВвода;
		ПолеДатаОтсчета.АвтоОтметкаНезаполненного = Истина;
		ПолеДатаОтсчета.Ширина = 10;
		ПолеДатаОтсчета.РастягиватьПоГоризонтали = Ложь;
		ПолеДатаОтсчета.ПутьКДанным = "ДатаОтсчета" + Сч;
		ПолеДатаОтсчета.УстановитьДействие("ПриИзменении", "Подключаемый_ДанныеСтажаПриИзменении");
		
		ПолеРазмерСтажаНадпись = Элементы.Добавить("РазмерСтажа" + Сч, Тип("ДекорацияФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеРазмерСтажаНадпись.Вид = ВидДекорацииФормы.Надпись;
		ПолеРазмерСтажаНадпись.Заголовок = НСтр("ru='составил';uk='склав'");
		ПолеРазмерСтажаНадпись.РастягиватьПоГоризонтали = Ложь;
		
		ПолеКоличествоЛет = Элементы.Добавить("Лет" + Сч, Тип("ПолеФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеКоличествоЛет.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеКоличествоЛет.Вид = ВидПоляФормы.ПолеВвода;
		ПолеКоличествоЛет.Ширина = 2;
		ПолеКоличествоЛет.РастягиватьПоГоризонтали = Ложь;
		ПолеКоличествоЛет.ПутьКДанным = "Лет" + Сч;
		ПолеКоличествоЛет.УстановитьДействие("ПриИзменении", "Подключаемый_ДанныеСтажаПриИзменении");
		
		ПолеКоличествоЛетНадпись = Элементы.Добавить("ЛетНадпись" + Сч, Тип("ДекорацияФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеКоличествоЛетНадпись.Вид = ВидДекорацииФормы.Надпись;
		ПолеКоличествоЛетНадпись.Заголовок = НСтр("ru='лет';uk='років'");
		ПолеКоличествоЛетНадпись.РастягиватьПоГоризонтали = Ложь;
		
		ПолеКоличествоМесяцев = Элементы.Добавить("Месяцев" + Сч, Тип("ПолеФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеКоличествоМесяцев.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеКоличествоМесяцев.Вид = ВидПоляФормы.ПолеВвода;
		ПолеКоличествоМесяцев.Ширина = 2;
		ПолеКоличествоМесяцев.РастягиватьПоГоризонтали = Ложь;
		ПолеКоличествоМесяцев.ПутьКДанным = "Месяцев" + Сч;
		ПолеКоличествоМесяцев.УстановитьДействие("ПриИзменении", "Подключаемый_ДанныеСтажаПриИзменении");
		
		ПолеКоличествоМесяцевНадпись = Элементы.Добавить("МесяцевНадпись" + Сч, Тип("ДекорацияФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеКоличествоМесяцевНадпись.Вид = ВидДекорацииФормы.Надпись;
		ПолеКоличествоМесяцевНадпись.Заголовок = НСтр("ru='месяцев';uk='місяців'");
		ПолеКоличествоМесяцевНадпись.РастягиватьПоГоризонтали = Ложь;
		
		ПолеКоличествоДней = Элементы.Добавить("Дней" + Сч, Тип("ПолеФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеКоличествоДней.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеКоличествоДней.Вид = ВидПоляФормы.ПолеВвода;
		ПолеКоличествоДней.Ширина = 2;
		ПолеКоличествоДней.РастягиватьПоГоризонтали = Ложь;
		ПолеКоличествоДней.ПутьКДанным = "Дней" + Сч;
		ПолеКоличествоДней.УстановитьДействие("ПриИзменении", "Подключаемый_ДанныеСтажаПриИзменении");
		
		ПолеКоличествоДнейНадпись = Элементы.Добавить("ДнейНадпись" + Сч, Тип("ДекорацияФормы"), ГруппаСтажПоТрудовойКнижке);
		ПолеКоличествоДнейНадпись.Вид = ВидДекорацииФормы.Надпись;
		ПолеКоличествоДнейНадпись.Заголовок = НСтр("ru='дней';uk='днів'");
		ПолеКоличествоДнейНадпись.РастягиватьПоГоризонтали = Ложь;
		
		ГруппаСтажСМоментаПриема = Элементы.Добавить("ГруппаСтажСМоментаПриема" + Сч, Тип("ГруппаФормы"), ГруппаПраваяКолонка);
		ГруппаСтажСМоментаПриема.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСтажСМоментаПриема.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаСтажСМоментаПриема.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаСтажСМоментаПриема.ОтображатьЗаголовок = Ложь;
		
		ПолеДатаПриема = Элементы.Добавить("ДатаПриема" + Сч, Тип("ПолеФормы"), ГруппаСтажСМоментаПриема);
		ПолеДатаПриема.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеДатаПриема.Вид = ВидПоляФормы.ПолеВвода;
		ПолеДатаПриема.АвтоОтметкаНезаполненного = Истина;
		ПолеДатаПриема.Ширина = 10;
		ПолеДатаПриема.РастягиватьПоГоризонтали = Ложь;
		ПолеДатаПриема.ПутьКДанным = "ДатаПриема" + Сч;
		ПолеДатаПриема.УстановитьДействие("ПриИзменении", "Подключаемый_ДанныеСтажаПриИзменении");
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОСтаже(ДанныеСтажей)
	
	Если ДанныеСтажей = Неопределено Тогда 
		
		ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
		ТаблицаФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаФизическихЛиц.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		
		СтрокаТаблицы = ТаблицаФизическихЛиц.Добавить();
		СтрокаТаблицы.ФизическоеЛицо = ФизическоеЛицо;
		СтрокаТаблицы.Период = ТекущаяДатаСеанса();
		
		СведенияОСтажах = КадровыйУчетРасширенный.СведенияОСтажахФизическихЛиц(ТаблицаФизическихЛиц, Истина);
		ДанныеСтажей = СведенияОСтажах[ФизическоеЛицо];
		
	КонецЕсли;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ПараметрыПолученияСотрудников.НачалоПериода = ДатаСведений;	
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ДатаСведений;
	ПараметрыПолученияСотрудников.КадровыеДанные = "ДатаПриема";
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
	ДатаПриема = Неопределено;
	Для Каждого ДанныеСотрудника Из СотрудникиОрганизации Цикл
		Если ЗначениеЗаполнено(ДанныеСотрудника.ДатаПриема) Тогда 
			Если ДатаПриема = Неопределено Тогда 
				ДатаПриема = ДанныеСотрудника.ДатаПриема;
			Иначе 
				ДатаПриема = Мин(ДатаПриема, ДанныеСотрудника.ДатаПриема);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДатаПриема) Тогда 
		ДатаПриема = ДатаСведений;
	КонецЕсли;
	
	Сч = 1;
	Для Каждого ВидСтажа Из ВидыСтажа Цикл 
		
		ДанныеСтажа = ДанныеСтажей[ВидСтажа];
		Если ДанныеСтажа = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не ДанныеСтажа.ИсчисляетсяСДатыПриема Тогда
			ЭтотОбъект["ДатаОтсчета" + Сч] = ДанныеСтажа.ПериодРегистрации;
			ЭтотОбъект["Лет" + Сч] = Цел(ДанныеСтажа.РазмерМесяцев / 12);
			ЭтотОбъект["Месяцев" + Сч] = ДанныеСтажа.РазмерМесяцев - ЭтотОбъект["Лет" + Сч] * 12;
			ЭтотОбъект["Дней" + Сч] = ДанныеСтажа.РазмерДней;
		КонецЕсли;
		
		ЭтотОбъект["СпособИсчисленияСтажа" + Сч] = ?(ДанныеСтажа.ИсчисляетсяСДатыПриема, 1, 0);
		ЭтотОбъект["ДатаПриема" + Сч] = ?(ДанныеСтажа.ИсчисляетсяСДатыПриема, ДанныеСтажа.ПериодРегистрации, ДатаПриема);
		
		Если НеобязательныеВидыСтажа.Получить(ВидСтажа) <> Неопределено И ЗначениеЗаполнено(ДанныеСтажа.ПериодРегистрации) Тогда 
			ЭтотОбъект["ИзменитьСтаж" + Сч] = Истина;
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	УстановитьПредставлениеСтажа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьВводаДанныхСтажа(Форма)
	
	Сч = 1;
	Для Каждого ВидСтажа Из Форма.ВидыСтажа Цикл
		
		Если Форма.НеобязательныеВидыСтажа.Получить(ВидСтажа) <> Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы( 
				Форма.Элементы, "ГруппаДанныеСтажа" + Сч, "Доступность", Форма["ИзменитьСтаж" + Сч]);
		КонецЕсли;
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
			"ГруппаСтажПоТрудовойКнижке" + Сч, "Доступность", Не ИсчисляетсяСДатыПриема(Форма, Сч));
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
			"ГруппаСтажСМоментаПриема" + Сч, "Доступность", ИсчисляетсяСДатыПриема(Форма, Сч));
			
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеСтажа(Форма)
	
	Сч = 1;
	Для Каждого ВидСтажа Из Форма.ВидыСтажа Цикл 
		
		Если ИсчисляетсяСДатыПриема(Форма, Сч) И Не ЗначениеЗаполнено(Форма["ДатаПриема" + Сч])
			Или Не ИсчисляетсяСДатыПриема(Форма, Сч) И Не ЗначениеЗаполнено(Форма["ДатаОтсчета" + Сч]) Тогда
			ГруппаИспользованиеСтажа = Форма.Элементы["ГруппаИспользованиеСтажа" + Сч];
			ГруппаИспользованиеСтажа.Подсказка = НСтр("ru='Не задан';uk='Не заданий'");
			Продолжить;
		КонецЕсли;
		
		ДатаОтсчета = ?(ИсчисляетсяСДатыПриема(Форма, Сч), Форма["ДатаПриема" + Сч],
			ЗарплатаКадрыРасширенныйКлиентСервер.ДатаОтсчетаСтажа(Форма["ДатаОтсчета" + Сч], Форма["Лет" + Сч], Форма["Месяцев" + Сч], Форма["Дней" + Сч]));
		
		ПродолжительностьСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.ПродолжительностьСтажа(ДатаОтсчета, Форма.ДатаСведений);
		ПредставлениеСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставлениеСтажа(
			ПродолжительностьСтажа.Лет, ПродолжительностьСтажа.Месяцев, ПродолжительностьСтажа.Дней);
			
		ГруппаИспользованиеСтажа = Форма.Элементы["ГруппаИспользованиеСтажа" + Сч];
		ГруппаИспользованиеСтажа.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='На %1 составил %2';uk='На %1 склав %2'"), Формат(Форма.ДатаСведений, "ДЛФ=Д"), ПредставлениеСтажа);
			
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИсчисляетсяСДатыПриема(Форма, НомерВидаСтажа)
	
	Возврат Форма["СпособИсчисленияСтажа" + НомерВидаСтажа] = 1;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеФормы(Отказ)
	
	Сч = 1;
	Для Каждого ВидСтажа Из ВидыСтажа Цикл
		
		Если НеобязательныеВидыСтажа.Получить(ВидСтажа) <> Неопределено И Не ЭтотОбъект["ИзменитьСтаж" + Сч] Тогда
			Продолжить; 
		КонецЕсли;
		
		Если ИсчисляетсяСДатыПриема(ЭтотОбъект, Сч) И Не ЗначениеЗаполнено(ЭтотОбъект["ДатаПриема" + Сч]) Тогда 
			ТекстСообщения = НСтр("ru='Не указана дата сведений о стаже.';uk='Не вказана дата відомостей про стаж.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаПриема" + Сч, , Отказ);
		КонецЕсли;
		
		Если Не ИсчисляетсяСДатыПриема(ЭтотОбъект, Сч) И Не ЗначениеЗаполнено(ЭтотОбъект["ДатаОтсчета" + Сч]) Тогда 
			ТекстСообщения = НСтр("ru='Не указана дата сведений о стаже.';uk='Не вказана дата відомостей про стаж.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаОтсчета" + Сч, , Отказ);
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеНаСервере(ДанныеСтажей)
	
	Для Каждого КлючИЗначение Из ДанныеСтажей Цикл 
		
		ВидСтажа = КлючИЗначение.Ключ;
		ДанныеСтажа = КлючИЗначение.Значение;
		
		НаборЗаписей = РегистрыСведений.СтажиФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		НаборЗаписей.Отбор.ВидСтажа.Установить(ВидСтажа);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
		НоваяЗапись.ВидСтажа = ВидСтажа;
		НоваяЗапись.ДатаОтсчета = ДанныеСтажа.ПериодРегистрации;
		НоваяЗапись.РазмерМесяцев = ДанныеСтажа.РазмерМесяцев;
		НоваяЗапись.РазмерДней = ДанныеСтажа.РазмерДней;
		НоваяЗапись.ИсчисляетсяСДатыПриема = ДанныеСтажа.ИсчисляетсяСДатыПриема;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти
