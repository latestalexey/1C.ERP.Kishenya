
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.ТолькоПросмотр Тогда
		Элементы.ФормаСохранитьНастройку.Доступность = Ложь;
	КонецЕсли; 
	
	Номенклатура = Параметры.Номенклатура;
	АлгоритмРасчетаКоличества = Параметры.АлгоритмРасчетаКоличества;
	
	ВидИзделийИлиНоменклатура = Параметры.ВидИзделийИлиНоменклатура;
	Если ТипЗнч(ВидИзделийИлиНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВидИзделий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидИзделийИлиНоменклатура, "ВидНоменклатуры");
	Иначе
		ВидИзделий = ВидИзделийИлиНоменклатура;
	КонецЕсли;
	
	// Свойства продукции
	СписокВсехДоступныхСвойств = УправлениеДаннымиОбИзделиях.ПолучитьСвойстваДляАвтоподбора(ВидИзделий);
	Для каждого ДанныеСвойства Из СписокВсехДоступныхСвойств Цикл
		Если НЕ ДанныеСвойства.ПометкаУдаления Тогда
			СписокДоступныхСвойствПродукции.Добавить(ДанныеСвойства.Свойство, ДанныеСвойства.Представление);
		КонецЕсли;                                                                  
	КонецЦикла;
	
	// Свойства материала
	ВидМатериала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	СписокВсехДоступныхСвойств = УправлениеДаннымиОбИзделиях.ПолучитьСвойстваДляАвтоподбора(ВидМатериала);
	Для каждого ДанныеСвойства Из СписокВсехДоступныхСвойств Цикл
		Если НЕ ДанныеСвойства.ПометкаУдаления Тогда
			СписокДоступныхСвойствМатериала.Добавить(ДанныеСвойства.Свойство, ДанныеСвойства.Представление);
		КонецЕсли;
	КонецЦикла;
	
	ОтборСвойство         = Параметры.ОтборСвойство;
	ОтборЗначениеСвойства = Параметры.ОтборЗначениеСвойства;
	
	Если НЕ ОтборСвойство.Пустая() Тогда
		ДанныеСвойства = СписокДоступныхСвойствПродукции.НайтиПоЗначению(ОтборСвойство);
		Если ДанныеСвойства <> Неопределено Тогда
			ОтборСвойствоПредставление = ДанныеСвойства.Представление;
		Иначе
			ОтборСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
			ОтборСвойствоПредставление = "";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОтборСвойство.Пустая() Тогда
		СпособПотребленияМатериала = 1;
	КонецЕсли; 
	
	СформироватьТаблицуОперандов();
	
	ПостроитьДеревоОператоров();
	
	УстановитьНаборСвойствХарактеристик();
	
	УправлениеДоступностью(ЭтаФорма);
	
	ПриИзмененииОтборСвойство();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособПотребленияМатериалаПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСвойствоПредставлениеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ОтборСвойствоПредставление) Тогда
		ОтборСвойство = Неопределено;
	КонецЕсли;
	
	ПриИзмененииОтборСвойство();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСвойствоПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокДоступныхСвойствПродукции.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтборСвойствоПредставлениеНачалоВыбораЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДоступныхСвойствПродукции, Элемент);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	ЗаписатьИЗакрытьНаКлиенте(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиФормулу(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыФормыРедактированияФормулы(АлгоритмРасчетаКоличества, Номенклатура);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВводаФормулы", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.КонструкторФормул", 
					ПараметрыФормы,,,,,
					ОписаниеОповещения, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборСвойствоПредставление.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборЗначениеСвойства.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СпособПотребленияМатериала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)

	Форма.Элементы.ОтборСвойствоПредставление.ТолькоПросмотр = (Форма.СпособПотребленияМатериала = 0);
	Форма.Элементы.ОтборЗначениеСвойства.ТолькоПросмотр      = (Форма.СпособПотребленияМатериала = 0);

КонецПроцедуры
 
&НаСервере
Процедура ПостроитьДеревоОператоров()
	
	Дерево = РаботаСФормулами.ПолучитьПустоеДеревоОператоров();
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Разделители';uk='Роздільники'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "(", " + "" ("" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ")", " + "") "" + ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Операторы';uk='Оператори'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Логические операторы и константы';uk='Логічні оператори і константи'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='И';uk='И'"),      " " + НСтр("ru='И';uk='И'") + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИЛИ';uk='АБО'"),    " " + НСтр("ru='ИЛИ';uk='АБО'") + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='НЕ';uk='НЕ'"),     " " + НСтр("ru='НЕ';uk='НЕ'") + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИСТИНА';uk='ІСТИНА'"), " " + НСтр("ru='ИСТИНА';uk='ІСТИНА'") + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ЛОЖЬ';uk='ХИБНІСТЬ'"),   " " + НСтр("ru='ЛОЖЬ';uk='ХИБНІСТЬ'") + " ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Числовые функции';uk='Числові функції'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Максимум';uk='Максимум'"),    НСтр("ru='Макс(,)';uk='Макс(,)'"), 2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Минимум';uk='Мінімум'"),     НСтр("ru='Мин(,)';uk='Мин(,)'"), 2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Округление';uk='Округлення'"),  НСтр("ru='Окр(,)';uk='Окр(,)'"), 2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Целая часть';uk='Ціла частина'"), НСтр("ru='Цел()';uk='Цел()'"), 1);
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Прочие функции';uk='Інші функції'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Условие';uk='Умова'"), "?(,,)", 3);
	
	АдресХранилищаДереваОператоров = ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНаборСвойствХарактеристик()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.ВидНоменклатуры.НаборСвойствХарактеристик КАК НаборСвойствХарактеристик
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		 
		НаборСвойствХарактеристик = Выборка.НаборСвойствХарактеристик;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыФормыРедактированияФормулы(Формула, Номенклатура)
	
	НаборСвойств = Новый Структура("НаборСвойствНоменклатуры, Набор");
	НаборСвойств.НаборСвойствНоменклатуры = Истина;
	НаборСвойств.Набор = НаборСвойствХарактеристик;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Формула", Формула);
	ПараметрыФормы.Вставить("ОперандыЗаголовок", НСтр("ru='Доступные реквизиты';uk='Доступні реквізити'"));
	ПараметрыФормы.Вставить("Операторы", АдресХранилищаДереваОператоров);
	ПараметрыФормы.Вставить("Операнды",  АдресОперандов);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура СформироватьТаблицуОперандов()

	НовыйОперанд = Операнды.Добавить();
	НовыйОперанд.Идентификатор = "#Продукция.Количество#";
	
	// Свойства продукции
	Для каждого ДанныеСвойства Из СписокДоступныхСвойствПродукции Цикл
		Если ДанныеСвойства.Значение.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			НовыйОперанд = Операнды.Добавить();
			НовыйОперанд.Идентификатор = НСтр("ru='Продукция';uk='Продукція'") + "." + ДанныеСвойства.Представление;
		КонецЕсли;
	КонецЦикла; 
	
	// Свойства материала
	Для каждого ДанныеСвойства Из СписокДоступныхСвойствМатериала Цикл
		Если ДанныеСвойства.Значение.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			НовыйОперанд = Операнды.Добавить();
			НовыйОперанд.Идентификатор = НСтр("ru='Материал';uk='Матеріал'") + "." + ДанныеСвойства.Представление;
		КонецЕсли;
	КонецЦикла; 

	АдресОперандов = ПоместитьВоВременноеХранилище(Операнды.Выгрузить(), УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаФормулы(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		АлгоритмРасчетаКоличества = РезультатЗакрытия;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСвойствоПредставлениеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт

	Если ВыбранныйЭлемент <> Неопределено Тогда
		ОтборСвойство = ВыбранныйЭлемент.Значение;
		ОтборСвойствоПредставление = ВыбранныйЭлемент.Представление;
		ПриИзмененииОтборСвойство();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтборСвойство()

	Если НЕ ОтборСвойство.Пустая() Тогда
		НовоеОписаниеТипа = Новый ОписаниеТипов(ОтборСвойство.ТипЗначения);
		Элементы.ОтборЗначениеСвойства.ОграничениеТипа = НовоеОписаниеТипа;
		ОтборЗначениеСвойства = НовоеОписаниеТипа.ПривестиЗначение(ОтборЗначениеСвойства);
	Иначе
		Элементы.ОтборЗначениеСвойства.ОграничениеТипа = Новый ОписаниеТипов();
		ОтборЗначениеСвойства = Неопределено;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	
	ОчиститьСообщения();
	
	Если СпособПотребленияМатериала = 1 Тогда
		ЕстьОшибки = Ложь;
		Если НЕ ЗначениеЗаполнено(ОтборСвойство) Тогда
			ТекстСообщения = НСтр("ru='Поле ""Свойство"" не заполнено';uk='Поле ""Властивість"" не заповнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОтборСвойство",, ЕстьОшибки);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(ОтборЗначениеСвойства) Тогда
			ТекстСообщения = НСтр("ru='Поле ""Значение"" не заполнено';uk='Поле ""Значення"" не заповнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ОтборЗначениеСвойства",, ЕстьОшибки);
		КонецЕсли;
		Если ЕстьОшибки Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АлгоритмРасчетаКоличества", АлгоритмРасчетаКоличества);
	
	Если СпособПотребленияМатериала = 1 Тогда
		ПараметрыФормы.Вставить("ОтборСвойство",         ОтборСвойство);
		ПараметрыФормы.Вставить("ОтборЗначениеСвойства", ОтборЗначениеСвойства);
	Иначе
		ПараметрыФормы.Вставить("ОтборСвойство",         Неопределено);
		ПараметрыФормы.Вставить("ОтборЗначениеСвойства", Неопределено);
	КонецЕсли; 
	
	Модифицированность = Ложь;
	
	ОповеститьОВыборе(ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти
