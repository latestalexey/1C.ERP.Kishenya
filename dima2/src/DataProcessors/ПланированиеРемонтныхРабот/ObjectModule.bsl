#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем МаксимальныйКодРемонта; // Счетчик номеров ремонтных работ, используемых как уникальные идентификаторы ремонтов в рамках одной процедуры планирования

#Область ПрограммныйИнтерфейс

// Рассчитывает план ремонтных работ - формирует табличные части "ЗаказыНаРемонт" и "Ремонты"
// 		по данным табличной части "ОбъектыРемонтаКПланированию"
//
Процедура РассчитатьПланРемонтныхРабот() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаказыНаРемонт.Очистить();
	Ремонты.Очистить();
	МатериалыИРаботы.Очистить();
	Трудозатраты.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектовДляРемонта", ОбъектыРемонтаКПланированию.ВыгрузитьКолонку("ОбъектЭксплуатации"));
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ОбщиеВидыРемонтов", ОбщиеВидыРемонтовКПланированию.ВыгрузитьКолонку("ОбщийВидРемонта"));
	Запрос.УстановитьПараметр("ЧастотыПланирования", ЧастотыКПланированию.ВыгрузитьКолонку("ЧастотаПланирования"));
	
	СтруктураПакета = Новый Структура;
	СформироватьТекстЗапросаРасчетаПланаРемонтныхРабот(Запрос.Текст, СтруктураПакета);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	Если ПакетЗапросов[СтруктураПакета.ОбъектыПланирования].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КэшированныеЗначения = Новый Структура;
	// Получение выборок пакета запросов.
	// 		Данные по объектам планирования, предыдущим ремонтам вне циклов, наработкам, правилам ремонтных циклов и прочих ремонтов
	КэшированныеЗначения.Вставить("Выборки", Новый Структура);
	Для Каждого КлючИЗначение Из СтруктураПакета Цикл
		КэшированныеЗначения.Выборки.Вставить(КлючИЗначение.Ключ, ПакетЗапросов[КлючИЗначение.Значение].Выбрать());
	КонецЦикла;
	
	МаксимальныйКодРемонта = 1;
	
	ВыборкаОбъектовПланирования = КэшированныеЗначения.Выборки.ОбъектыПланирования;
	Пока ВыборкаОбъектовПланирования.Следующий() Цикл
		
		ЗаполнитьРемонтыПоЦиклу(ВыборкаОбъектовПланирования, КэшированныеЗначения);
		ЗаполнитьПрочиеРемонты(ВыборкаОбъектовПланирования, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает и заполняет документы заказы на ремонт
// 		по данным табличных частей "ЗаказыНаРемонт", "Ремонты", "МатериалыИРаботы", "Трудозатраты", "РабочиеЦентры"
//
// Параметры:
// 		УдаляемыеЗаказы - Массив - Массив ссылок на помеченные на удаление заказы, которые можно использовать при заполнении новых заказов
//
// Возвращаемое значение:
// 		Структура - Структура с полями:
// 			"МассивЗаказовНаРемонт" - Массив созданных заказов
// 			"ПереопределенныеСообщения" - Соответствие массивов ошибок по ссылкам на созданные документы
//
Функция СформироватьЗаказыНаРемонт(УдаляемыеЗаказы) Экспорт
	
	СтруктураВозвращаемыхЗначений = Новый Структура();
	
	СтруктураВозвращаемыхЗначений.Вставить("МассивЗаказовНаРемонт", Новый Массив);
	СтруктураВозвращаемыхЗначений.Вставить("ПереопределенныеСообщения", Новый Соответствие);
	
	НачатьТранзакцию();
	
	СтруктураЗначенийРеквизитовДокумента = Новый Структура;
	СтруктураЗначенийРеквизитовДокумента.Вставить("Дата", ТекущаяДата());
	СтруктураЗначенийРеквизитовДокумента.Вставить("Статус", Перечисления.СтатусыЗаказовНаРемонт.Создан);
	
	Для Каждого ЗаказНаРемонт Из ЗаказыНаРемонт Цикл
		
		Если Ремонты.НайтиСтроки(Новый Структура("КодЗаказаНаРемонт", ЗаказНаРемонт.КодЗаказаНаРемонт)).Количество() = 0 Тогда
			// Если отсутствуют запланированные ремонты по этому заказу
			Продолжить;
		КонецЕсли;
		
		ПроводитьДокумент = Истина;
		ПроведениеВыполнено = Истина;
		
		Если УдаляемыеЗаказы.Количество() = 0 Тогда
			ОбъектДокумента = Документы.ЗаказНаРемонт.СоздатьДокумент();
		Иначе
			ОбъектДокумента = УдаляемыеЗаказы[0].ПолучитьОбъект();
			ОбъектДокумента.ПометкаУдаления = Ложь;
			УдаляемыеЗаказы.Удалить(0);
		КонецЕсли;
		ОбъектДокумента.Ремонты.Очистить();
		ОбъектДокумента.МатериалыИРаботы.Очистить();
		ОбъектДокумента.Трудозатраты.Очистить();
		ОбъектДокумента.РабочиеЦентры.Очистить();
		ОбъектДокумента.УстраняемыеДефекты.Очистить();
		ОбъектДокумента.Заполнить(СтруктураЗначенийРеквизитовДокумента);
		
		ЗаполнитьЗначенияСвойств(ОбъектДокумента, ЗаказНаРемонт, "ОбъектЭксплуатации, ДатаНачала, Подразделение, РемонтноеМероприятие");
		ОбъектДокумента.ДатаЗавершения = ОбъектДокумента.ДатаНачала + ЗаказНаРемонт.Длительность * 86400-1;
		
		ЗаполнитьТабличныеЧастиОбъектаДокумента(ОбъектДокумента, ЗаказНаРемонт.КодЗаказаНаРемонт);
		Документы.ЗаказНаРемонт.ЗаполнитьСкладПоНастройкамПередачиМатериалов(ОбъектДокумента);
		
		ПроводитьДокумент = ОбъектДокумента.ПроверитьЗаполнение();
		
		Если ПроводитьДокумент Тогда
			Попытка
				ОбъектДокумента.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ПроведениеВыполнено = Ложь;
			КонецПопытки;
		Иначе
			ПроведениеВыполнено = Ложь;
		КонецЕсли;
		
		Если Не ПроведениеВыполнено Тогда
			Попытка
				ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ОтменитьТранзакцию();
				СтруктураВозвращаемыхЗначений.МассивЗаказовНаРемонт.Очистить();
				ВызватьИсключение НСтр("ru='Ошибка при попытке создания документа заказа на ремонт:';uk='Помилка при спробі створення документа замовлення на ремонт:'") + " " + ИнформацияОбОшибке().Описание;
			КонецПопытки;
		КонецЕсли;
		
		СтруктураВозвращаемыхЗначений.МассивЗаказовНаРемонт.Добавить(ОбъектДокумента.Ссылка);
		
		МассивОшибок = Новый Массив;
		СтруктураВозвращаемыхЗначений.ПереопределенныеСообщения.Вставить(ОбъектДокумента.Ссылка, МассивОшибок);
		ОшибкиФормированияДокументов = ПолучитьСообщенияПользователю(Истина);
		Для Каждого ОшибкаФормированияДокумента Из ОшибкиФормированияДокументов Цикл
			ОшибкаФормированияДокумента.КлючДанных = ОбъектДокумента.Ссылка;
			МассивОшибок.Добавить(ОшибкаФормированияДокумента);
		КонецЦикла;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат СтруктураВозвращаемыхЗначений;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует текст запроса планирования и структуру пакета выполнения запроса
//
// Параметры:
// 		ТекстЗапроса - Строка - Возвращаемая строка текста запроса
// 		СтруктураПакета - Структура - Возвращаемая структура с полями наименований выборок в виде ключей и индексов соответствующих запросов в значениях
//
Процедура СформироватьТекстЗапросаРасчетаПланаРемонтныхРабот(ТекстЗапроса, СтруктураПакета)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбъектыРемонта.Ссылка КАК ОбъектЭксплуатации,
	|	ВЫБОР
	|		КОГДА ОбъектыРемонта.Класс.ИспользуютсяПодклассы
	|			ТОГДА ОбъектыРемонта.Подкласс
	|		ИНАЧЕ ОбъектыРемонта.Класс
	|	КОНЕЦ КАК ХранилищеППР,
	|	ОбъектыРемонта.ДатаВыпуска КАК ДатаВводаВЭксплуатацию
	|ПОМЕСТИТЬ ОбъектыПланирования
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыРемонта
	|ГДЕ
	|	ОбъектыРемонта.Ссылка В(&МассивОбъектовДляРемонта)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъектыРемонта.Ссылка,
	|	ВЫБОР
	|		КОГДА ОбъектыРемонта.Класс.ИспользуютсяПодклассы
	|			ТОГДА ОбъектыРемонта.Подкласс
	|		ИНАЧЕ ОбъектыРемонта.Класс
	|	КОНЕЦ,
	|	ОбъектыРемонта.Владелец.ДатаВыпуска
	|ИЗ
	|	Справочник.УзлыОбъектовЭксплуатации КАК ОбъектыРемонта
	|ГДЕ
	|	ОбъектыРемонта.Ссылка В(&МассивОбъектовДляРемонта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыРемонтов.Ссылка КАК ВидРемонта,
	|	ДОБАВИТЬКДАТЕ(ВЫРАЗИТЬ(&ТекущаяДата КАК ДАТА), ДЕНЬ, ВидыРемонтов.Упреждение) КАК МаксимальнаяДатаРемонта,
	|	ВидыРемонтов.Длительность
	|ПОМЕСТИТЬ РазрешенныеВидыРемонтов
	|ИЗ
	|	Справочник.ВидыРемонтов КАК ВидыРемонтов
	|ГДЕ
	|	ВидыРемонтов.ОбщийВидРемонта В(&ОбщиеВидыРемонтов)
	|	И ВидыРемонтов.ЧастотаПланирования В(&ЧастотыПланирования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассыРемонтныйЦикл.Ссылка КАК ХранилищеППР,
	|	КлассыРемонтныйЦикл.НомерСтроки,
	|	КлассыРемонтныйЦикл.ВидРемонта,
	|	КлассыРемонтныйЦикл.Ссылка.РемонтныйЦиклПоИнтервалуНаработки,
	|	КлассыРемонтныйЦикл.ИнтервалВремени,
	|	КлассыРемонтныйЦикл.ЕдиницаВремени,
	|	КлассыРемонтныйЦикл.ИнтервалНаработки,
	|	КлассыРемонтныйЦикл.ПоказательНаработки,
	|	ВЫБОР
	|		КОГДА РазрешенныеВидыРемонтов.ВидРемонта ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Разрешен,
	|	ЕСТЬNULL(РазрешенныеВидыРемонтов.МаксимальнаяДатаРемонта, НЕОПРЕДЕЛЕНО) КАК МаксимальнаяДатаРемонта,
	|	ЕСТЬNULL(РазрешенныеВидыРемонтов.Длительность, 0) КАК Длительность
	|ПОМЕСТИТЬ РемонтныеЦиклы
	|ИЗ
	|	Справочник.КлассыОбъектовЭксплуатации.РемонтныйЦикл КАК КлассыРемонтныйЦикл
	|		ЛЕВОЕ СОЕДИНЕНИЕ РазрешенныеВидыРемонтов КАК РазрешенныеВидыРемонтов
	|		ПО КлассыРемонтныйЦикл.ВидРемонта = РазрешенныеВидыРемонтов.ВидРемонта
	|ГДЕ
	|	КлассыРемонтныйЦикл.Ссылка В
	|			(ВЫБРАТЬ
	|				ОбъектыПланирования.ХранилищеППР
	|			ИЗ
	|				ОбъектыПланирования КАК ОбъектыПланирования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодклассыРемонтныйЦикл.Ссылка,
	|	ПодклассыРемонтныйЦикл.НомерСтроки,
	|	ПодклассыРемонтныйЦикл.ВидРемонта,
	|	ПодклассыРемонтныйЦикл.Ссылка.РемонтныйЦиклПоИнтервалуНаработки,
	|	ПодклассыРемонтныйЦикл.ИнтервалВремени,
	|	ПодклассыРемонтныйЦикл.ЕдиницаВремени,
	|	ПодклассыРемонтныйЦикл.ИнтервалНаработки,
	|	ПодклассыРемонтныйЦикл.ПоказательНаработки,
	|	ВЫБОР
	|		КОГДА РазрешенныеВидыРемонтов.ВидРемонта ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ЕСТЬNULL(РазрешенныеВидыРемонтов.МаксимальнаяДатаРемонта, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(РазрешенныеВидыРемонтов.Длительность, 0)
	|ИЗ
	|	Справочник.ПодклассыОбъектовЭксплуатации.РемонтныйЦикл КАК ПодклассыРемонтныйЦикл
	|		ЛЕВОЕ СОЕДИНЕНИЕ РазрешенныеВидыРемонтов КАК РазрешенныеВидыРемонтов
	|		ПО ПодклассыРемонтныйЦикл.ВидРемонта = РазрешенныеВидыРемонтов.ВидРемонта
	|ГДЕ
	|	ПодклассыРемонтныйЦикл.Ссылка В
	|			(ВЫБРАТЬ
	|				ОбъектыПланирования.ХранилищеППР
	|			ИЗ
	|				ОбъектыПланирования КАК ОбъектыПланирования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассыПрочиеРемонты.Ссылка КАК ХранилищеППР,
	|	КлассыПрочиеРемонты.НомерСтроки,
	|	КлассыПрочиеРемонты.ВидРемонта,
	|	КлассыПрочиеРемонты.ПоИнтервалуНаработки,
	|	КлассыПрочиеРемонты.ИнтервалВремени,
	|	КлассыПрочиеРемонты.ЕдиницаВремени,
	|	КлассыПрочиеРемонты.ИнтервалНаработки,
	|	КлассыПрочиеРемонты.ПоказательНаработки,
	|	РазрешенныеВидыРемонтов.МаксимальнаяДатаРемонта,
	|	РазрешенныеВидыРемонтов.Длительность
	|ПОМЕСТИТЬ ПрочиеРемонты
	|ИЗ
	|	Справочник.КлассыОбъектовЭксплуатации.ПрочиеРемонты КАК КлассыПрочиеРемонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазрешенныеВидыРемонтов КАК РазрешенныеВидыРемонтов
	|		ПО КлассыПрочиеРемонты.ВидРемонта = РазрешенныеВидыРемонтов.ВидРемонта
	|ГДЕ
	|	КлассыПрочиеРемонты.Ссылка В
	|			(ВЫБРАТЬ
	|				ОбъектыПланирования.ХранилищеППР
	|			ИЗ
	|				ОбъектыПланирования КАК ОбъектыПланирования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодклассыПрочиеРемонты.Ссылка,
	|	ПодклассыПрочиеРемонты.НомерСтроки,
	|	ПодклассыПрочиеРемонты.ВидРемонта,
	|	ПодклассыПрочиеРемонты.ПоИнтервалуНаработки,
	|	ПодклассыПрочиеРемонты.ИнтервалВремени,
	|	ПодклассыПрочиеРемонты.ЕдиницаВремени,
	|	ПодклассыПрочиеРемонты.ИнтервалНаработки,
	|	ПодклассыПрочиеРемонты.ПоказательНаработки,
	|	РазрешенныеВидыРемонтов.МаксимальнаяДатаРемонта,
	|	РазрешенныеВидыРемонтов.Длительность
	|ИЗ
	|	Справочник.ПодклассыОбъектовЭксплуатации.ПрочиеРемонты КАК ПодклассыПрочиеРемонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазрешенныеВидыРемонтов КАК РазрешенныеВидыРемонтов
	|		ПО ПодклассыПрочиеРемонты.ВидРемонта = РазрешенныеВидыРемонтов.ВидРемонта
	|ГДЕ
	|	ПодклассыПрочиеРемонты.Ссылка В
	|			(ВЫБРАТЬ
	|				ОбъектыПланирования.ХранилищеППР
	|			ИЗ
	|				ОбъектыПланирования КАК ОбъектыПланирования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланРемонтов.ОбъектЭксплуатации КАК ОбъектЭксплуатации,
	|	ПланРемонтов.ВидРемонта КАК ВидРемонта,
	|	ПланРемонтов.РемонтныйЦикл КАК РемонтныйЦикл,
	|	ПланРемонтов.Период КАК ДатаРемонта
	|ПОМЕСТИТЬ ПоследниеРемонты
	|ИЗ
	|	РегистрСведений.ПланРемонтов КАК ПланРемонтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ПланРемонтов.Период) КАК Период,
	|			ПланРемонтов.ОбъектЭксплуатации КАК ОбъектЭксплуатации
	|		ИЗ
	|			РегистрСведений.ПланРемонтов КАК ПланРемонтов
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыПланирования КАК ОбъектыПланирования
	|				ПО ПланРемонтов.ОбъектЭксплуатации = ОбъектыПланирования.ОбъектЭксплуатации
	|		ГДЕ
	|			ПланРемонтов.РемонтныйЦикл
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ПланРемонтов.ОбъектЭксплуатации) КАК Последние
	|		ПО ПланРемонтов.Период = Последние.Период
	|			И ПланРемонтов.ОбъектЭксплуатации = Последние.ОбъектЭксплуатации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланРемонтовСрезПоследних.ОбъектЭксплуатации,
	|	ПланРемонтовСрезПоследних.ВидРемонта,
	|	ПланРемонтовСрезПоследних.РемонтныйЦикл,
	|	ПланРемонтовСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.ПланРемонтов.СрезПоследних(
	|			,
	|			НЕ РемонтныйЦикл
	|				И ОбъектЭксплуатации В
	|					(ВЫБРАТЬ
	|						ОбъектыПланирования.ОбъектЭксплуатации
	|					ИЗ
	|						ОбъектыПланирования КАК ОбъектыПланирования)) КАК ПланРемонтовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследниеРемонты.ОбъектЭксплуатации КАК ОбъектЭксплуатации,
	|	ПоследниеРемонты.ВидРемонта КАК ВидРемонта,
	|	ПоследниеРемонты.ДатаРемонта КАК Период
	|ИЗ
	|	ПоследниеРемонты КАК ПоследниеРемонты
	|ГДЕ
	|	НЕ ПоследниеРемонты.РемонтныйЦикл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаработкиСрезПоследних.ОбъектЭксплуатации КАК ОбъектЭксплуатации,
	|	НаработкиСрезПоследних.ПоказательНаработки КАК ПоказательНаработки,
	|	НаработкиСрезПоследних.Период КАК Период,
	|	НаработкиСрезПоследних.Значение КАК Значение,
	|	НаработкиСрезПоследних.СреднесуточноеЗначение КАК СреднесуточноеЗначение
	|ИЗ
	|	РегистрСведений.НаработкиОбъектовЭксплуатации.СрезПоследних(
	|			&ТекущаяДата,
	|			(ОбъектЭксплуатации, ПоказательНаработки) В
	|				(ВЫБРАТЬ
	|					ОбъектыПланирования.ОбъектЭксплуатации КАК ОбъектЭксплуатации,
	|					РемонтныеЦиклы.ПоказательНаработки
	|				ИЗ
	|					ОбъектыПланирования КАК ОбъектыПланирования
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РемонтныеЦиклы КАК РемонтныеЦиклы
	|						ПО
	|							ОбъектыПланирования.ХранилищеППР = РемонтныеЦиклы.ХранилищеППР
	|				ГДЕ
	|					РемонтныеЦиклы.РемонтныйЦиклПоИнтервалуНаработки
	|			
	|				ОБЪЕДИНИТЬ ВСЕ
	|			
	|				ВЫБРАТЬ
	|					ОбъектыПланирования.ОбъектЭксплуатации КАК ОбъектЭксплуатации,
	|					ПрочиеРемонты.ПоказательНаработки
	|				ИЗ
	|					ОбъектыПланирования КАК ОбъектыПланирования
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрочиеРемонты КАК ПрочиеРемонты
	|						ПО
	|							ОбъектыПланирования.ХранилищеППР = ПрочиеРемонты.ХранилищеППР
	|				ГДЕ
	|					ПрочиеРемонты.ПоИнтервалуНаработки)) КАК НаработкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СправочникОбъектов.Ссылка, СправочникУзлов.Владелец) КАК ОбъектЭксплуатации,
	|	ЕСТЬNULL(СправочникУзлов.Ссылка, ЗНАЧЕНИЕ(Справочник.УзлыОбъектовЭксплуатации.ПустаяСсылка)) КАК Узел,
	|	ЕСТЬNULL(СправочникОбъектов.РемонтирующееПодразделение, СправочникУзлов.РемонтирующееПодразделение) КАК Подразделение,
	|	ОбъектыПланирования.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	ОбъектыПланирования.ХранилищеППР КАК ХранилищеППР,
	|	ЕСТЬNULL(ПоследниеРемонты.ВидРемонта, ЗНАЧЕНИЕ(Справочник.ВидыРемонтов.ПустаяСсылка)) КАК ПредыдущийРемонтПоЦиклу,
	|	ЕСТЬNULL(ПоследниеРемонты.ДатаРемонта, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПредыдущегоРемонтаПоЦиклу
	|ИЗ
	|	ОбъектыПланирования КАК ОбъектыПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК СправочникОбъектов
	|		ПО ОбъектыПланирования.ОбъектЭксплуатации = СправочникОбъектов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УзлыОбъектовЭксплуатации КАК СправочникУзлов
	|		ПО ОбъектыПланирования.ОбъектЭксплуатации = СправочникУзлов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеРемонты КАК ПоследниеРемонты
	|		ПО ОбъектыПланирования.ОбъектЭксплуатации = ПоследниеРемонты.ОбъектЭксплуатации
	|			И (ПоследниеРемонты.РемонтныйЦикл)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РемонтныеЦиклы.ХранилищеППР КАК ХранилищеППР,
	|	РемонтныеЦиклы.НомерСтроки КАК НомерСтроки,
	|	РемонтныеЦиклы.ВидРемонта,
	|	РемонтныеЦиклы.РемонтныйЦиклПоИнтервалуНаработки КАК ПоИнтервалуНаработки,
	|	РемонтныеЦиклы.ИнтервалВремени,
	|	РемонтныеЦиклы.ЕдиницаВремени,
	|	РемонтныеЦиклы.ИнтервалНаработки,
	|	РемонтныеЦиклы.ПоказательНаработки,
	|	РемонтныеЦиклы.Разрешен,
	|	РемонтныеЦиклы.МаксимальнаяДатаРемонта,
	|	РемонтныеЦиклы.Длительность,
	|	РемонтныеЦиклы.ВидРемонта.Упреждение КАК УпреждениеРемонта
	|ИЗ
	|	РемонтныеЦиклы КАК РемонтныеЦиклы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХранилищеППР,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРемонты.ХранилищеППР КАК ХранилищеППР,
	|	ПрочиеРемонты.НомерСтроки КАК НомерСтроки,
	|	ПрочиеРемонты.ВидРемонта,
	|	ПрочиеРемонты.ПоИнтервалуНаработки,
	|	ПрочиеРемонты.ИнтервалВремени,
	|	ПрочиеРемонты.ЕдиницаВремени,
	|	ПрочиеРемонты.ИнтервалНаработки,
	|	ПрочиеРемонты.ПоказательНаработки,
	|	ПрочиеРемонты.МаксимальнаяДатаРемонта,
	|	ПрочиеРемонты.Длительность,
	|	ЛОЖЬ КАК ПравилоРемонтногоЦикла,
	|	ПрочиеРемонты.ВидРемонта.Упреждение КАК УпреждениеРемонта
	|ИЗ
	|	ПрочиеРемонты КАК ПрочиеРемонты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХранилищеППР,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаработкиПоследнихРемонтов.ОбъектЭксплуатации,
	|	НаработкиПоследнихРемонтов.ВидРемонта,
	|	НаработкиПоследнихРемонтов.РемонтныйЦикл,
	|	НаработкиПоследнихРемонтов.ПоказательНаработки,
	|	ПоследниеНаработки.Значение - Наработки.Значение КАК Значение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоследниеРемонты.ОбъектЭксплуатации КАК ОбъектЭксплуатации,
	|		ПоследниеРемонты.ВидРемонта КАК ВидРемонта,
	|		ПоследниеРемонты.РемонтныйЦикл КАК РемонтныйЦикл,
	|		Наработки.ПоказательНаработки КАК ПоказательНаработки,
	|		МАКСИМУМ(Наработки.Период) КАК Период
	|	ИЗ
	|		ПоследниеРемонты КАК ПоследниеРемонты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаработкиОбъектовЭксплуатации КАК Наработки
	|			ПО ПоследниеРемонты.ОбъектЭксплуатации = Наработки.ОбъектЭксплуатации
	|				И ПоследниеРемонты.ДатаРемонта > Наработки.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоследниеРемонты.ОбъектЭксплуатации,
	|		ПоследниеРемонты.ВидРемонта,
	|		ПоследниеРемонты.РемонтныйЦикл,
	|		Наработки.ПоказательНаработки) КАК НаработкиПоследнихРемонтов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаработкиОбъектовЭксплуатации КАК Наработки
	|		ПО НаработкиПоследнихРемонтов.ОбъектЭксплуатации = Наработки.ОбъектЭксплуатации
	|			И НаработкиПоследнихРемонтов.ПоказательНаработки = Наработки.ПоказательНаработки
	|			И НаработкиПоследнихРемонтов.Период = Наработки.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаработкиОбъектовЭксплуатации.СрезПоследних(&ТекущаяДата, ) КАК ПоследниеНаработки
	|		ПО НаработкиПоследнихРемонтов.ОбъектЭксплуатации = ПоследниеНаработки.ОбъектЭксплуатации
	|			И НаработкиПоследнихРемонтов.ПоказательНаработки = ПоследниеНаработки.ПоказательНаработки";
	
	Если СтруктураПакета = Неопределено Тогда
		СтруктураПакета = Новый Структура;
	КонецЕсли;
	
	СтруктураПакета.Вставить("ПредыдущиеРемонты", 5);
	СтруктураПакета.Вставить("Наработки", 6);
	СтруктураПакета.Вставить("ОбъектыПланирования", 7);
	СтруктураПакета.Вставить("РемонтныеЦиклы", 8);
	СтруктураПакета.Вставить("ПрочиеРемонты", 9);
	СтруктураПакета.Вставить("НаработкиПослеРемонтов", 10);
	
КонецПроцедуры

// Возвращает дату предыдущего ремонта объекта
//
// Параметры:
// 		ОбъектЭксплуатации - СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.УзлыОбъектовЭксплуатации - Ссылка на объект эксплуатации, по которому необходимо найти дату последнего ремонта
// 		ВидРемонта - СправочникСсылка.ВидыРемонтов - Вид ремонта, по которому необходимо найти дату
// 		Выборки - Структура - Структура с кэшированными выборками
//
// Возвращаемое значение:
// 		Дата - Дата предыдущего ремонта
//
Функция ПолучитьДатуПредыдущегоРемонта(ОбъектЭксплуатации, ВидРемонта, Выборки)
	
	ПредыдущиеРемонты = Выборки.ПредыдущиеРемонты;
	
	ПредыдущиеРемонты.Сбросить();
	Если ПредыдущиеРемонты.НайтиСледующий(Новый Структура("ОбъектЭксплуатации, ВидРемонта", ОбъектЭксплуатации, ВидРемонта)) Тогда
		
		Возврат ПредыдущиеРемонты.Период;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает величину показателя наработки с даты указанного ремонта
//
// Параметры:
// 		ОбъектЭксплуатации - СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.УзлыОбъектовЭксплуатации - Ссылка на объект эксплуатации, по которому необходимо получить наработку
// 		ВидРемонта - СправочникСсылка.ВидыРемонтов - Вид ремонта, по которому необходимо получить наработку
// 		РемонтныйЦикл - Булево - Признак необходимости получения наработки на дату последнего ремонта по циклу
// 		ПоказательНаработки - СправочникСсылка.ПоказателиНаработки - Ссылка на показатель наработки, значения которого необходимо получить
// 		Выборки - Структура - Структура с кэшированными выборками
//
// Возвращаемое значение:
// 		Число - Разность значений наработки от среза последних на дату указанного ремонта и от среза последних на текущую дату
//
Функция ПолучитьНаработкуСДатыПоследнегоРемонта(ОбъектЭксплуатации, ВидРемонта, РемонтныйЦикл, ПоказательНаработки, Выборки)
	
	НаработкиПослеРемонтов = Выборки.НаработкиПослеРемонтов;
	СтруктураПоиска = Новый Структура(
		"ОбъектЭксплуатации, ВидРемонта",
		ОбъектЭксплуатации,
		ПоказательНаработки);
	
	Если РемонтныйЦикл Тогда
		СтруктураПоиска.Вставить("РемонтныйЦикл", Истина);
	Иначе
		СтруктураПоиска.Вставить("ВидРемонта", ВидРемонта);
	КонецЕсли;
	
	НаработкиПослеРемонтов.Сбросить();
	Если НаработкиПослеРемонтов.НайтиСледующий(СтруктураПоиска) Тогда
		Возврат Макс(НаработкиПослеРемонтов.Значение, 0);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает структуру значений наработки объекта ремонта
//
// Параметры:
// 		ОбъектЭксплуатации - СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.УзлыОбъектовЭксплуатации - Ссылка на объект эксплуатации, по которому необходимо получить наработку
// 		ПоказательНаработки - СправочникСсылка.ПоказателиНаработки - Ссылка на показатель наработки, значения которого необходимо получить
// 		Выборки - Структура - Структура с кэшированными выборками
//
// Возвращаемое значение:
// 		Стурктура - Структура значений наработки
//
Функция ПолучитьНаработку(ОбъектЭксплуатации, ПоказательНаработки, Выборки)
	
	Наработки = Выборки.Наработки;
	
	СтруктураВозврата = Новый Структура(
		"ОбъектЭксплуатации, ПоказательНаработки, Период, Значение, СреднесуточноеЗначение",
		ОбъектЭксплуатации,
		ПоказательНаработки,
		Дата(1, 1, 1, 0, 0, 0),
		0,
		0);
	
	Наработки.Сбросить();
	Если Наработки.НайтиСледующий(Новый Структура("ОбъектЭксплуатации, ПоказательНаработки", ОбъектЭксплуатации, ПоказательНаработки)) Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Наработки);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает таблицу значений ремонтного цикла
//
// Параметры:
// 		ХранилищеППР - СправочникСсылка.КлассыОбъектовЭксплуатации, СправочникСсылка.ПодклассыОбъектовЭксплуатации - Ссылка на объект с правилами ремонтного цикла
// 		Выборки - Структура - Структура с кэшированными выборками
//
// Возвращаемое значение:
// 		ТаблицаЗначений - Таблица ремонтного цикла
//
Функция ПолучитьРемонтныйЦикл(ХранилищеППР, Выборки)
	
	РемонтныйЦикл = Новый ТаблицаЗначений;
	РемонтныйЦикл.Колонки.Добавить("НомерСтроки");
	РемонтныйЦикл.Колонки.Добавить("ПредыдущийВидРемонта");
	РемонтныйЦикл.Колонки.Добавить("ВидРемонта");
	РемонтныйЦикл.Колонки.Добавить("ПоИнтервалуНаработки");
	РемонтныйЦикл.Колонки.Добавить("ИнтервалВремени");
	РемонтныйЦикл.Колонки.Добавить("ЕдиницаВремени");
	РемонтныйЦикл.Колонки.Добавить("ИнтервалНаработки");
	РемонтныйЦикл.Колонки.Добавить("ПоказательНаработки");
	РемонтныйЦикл.Колонки.Добавить("Разрешен");
	РемонтныйЦикл.Колонки.Добавить("МаксимальнаяДатаРемонта");
	РемонтныйЦикл.Колонки.Добавить("Длительность");
	РемонтныйЦикл.Колонки.Добавить("УпреждениеРемонта");
	РемонтныйЦикл.Колонки.Добавить("ПравилоРемонтногоЦикла");
	
	ПредыдущийВидРемонта = Справочники.ВидыРемонтов.ПустаяСсылка();
	
	РемонтныеЦиклы = Выборки.РемонтныеЦиклы;
	РемонтныеЦиклы.Сбросить();
	СтруктураПоиска = Новый Структура("ХранилищеППР", ХранилищеППР);
	Пока РемонтныеЦиклы.НайтиСледующий(СтруктураПоиска) Цикл
		
		ПравилоРемонтногоЦикла = РемонтныйЦикл.Добавить();
		ПравилоРемонтногоЦикла.ПредыдущийВидРемонта = ПредыдущийВидРемонта;
		ЗаполнитьЗначенияСвойств(ПравилоРемонтногоЦикла, РемонтныеЦиклы);
		
		ПредыдущийВидРемонта = РемонтныеЦиклы.ВидРемонта;
		
	КонецЦикла;
	
	Если РемонтныйЦикл.Количество() <> 0 Тогда
		РемонтныйЦикл[0].ПредыдущийВидРемонта = ПредыдущийВидРемонта;
	КонецЕсли;
	
	РемонтныйЦикл.ЗаполнитьЗначения(Истина, "ПравилоРемонтногоЦикла");
	
	Возврат РемонтныйЦикл;
	
КонецФункции

// Заполняет таблицу "Ремонты" по данным текущего объекта эксплуатации по правилам ремонтного цикла
//
// Параметры:
// 		СтурктураДанных - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по планируемым объектам
// 		Выборки - Структура - Структура с кэшированными выборками
//
Процедура ЗаполнитьРемонтыПоЦиклу(СтруктураДанных, КэшированныеЗначения)
	
	Выборки = КэшированныеЗначения.Выборки;
	ПредыдущийРемонтПоЦиклу = СтруктураДанных.ПредыдущийРемонтПоЦиклу;
	ДатаПредыдущегоРемонтаПоЦиклу = СтруктураДанных.ДатаПредыдущегоРемонтаПоЦиклу;
	
	РемонтныйЦикл = ПолучитьРемонтныйЦикл(СтруктураДанных.ХранилищеППР, Выборки);
	
	Если РемонтныйЦикл.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПредыдущегоРемонтаПоЦиклу) Тогда
		ДатаПредыдущегоРемонтаПоЦиклу = СтруктураДанных.ДатаВводаВЭксплуатацию;
	КонецЕсли;
	
	ИндексОбходаЦикла = 0;
	Если ПредыдущийРемонтПоЦиклу <> Справочники.ВидыРемонтов.ПустаяСсылка() Тогда
		НайденныеСтроки = РемонтныйЦикл.НайтиСтроки(Новый Структура("ПредыдущийВидРемонта", ПредыдущийРемонтПоЦиклу));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			ИндексОбходаЦикла = НайденныеСтроки[0].НомерСтроки - 1;
		КонецЕсли;
	КонецЕсли;
	
	РемонтируемыйОбъект = ?(ЗначениеЗаполнено(СтруктураДанных.Узел), СтруктураДанных.Узел, СтруктураДанных.ОбъектЭксплуатации);
	
	ПрерватьРемонтныйЦикл = Ложь;
	Пока Не ПрерватьРемонтныйЦикл Цикл
		
		Правило = РемонтныйЦикл[ИндексОбходаЦикла];
		Если Правило.Разрешен Тогда
			
			СледующийРемонт = СледующийРемонтПоПравилу(РемонтируемыйОбъект, Правило, ДатаПредыдущегоРемонтаПоЦиклу, Выборки);
			Если СледующийРемонт.Отказ Тогда
				ПрерватьРемонтныйЦикл = Истина;
			Иначе
				
				НовыйРемонт = Ремонты.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйРемонт, СтруктураДанных, "ОбъектЭксплуатации, Узел, Подразделение");
				ЗаполнитьЗначенияСвойств(НовыйРемонт, СледующийРемонт, "ВидРемонта, ДатаНачала, Длительность");
				НовыйРемонт.РемонтныйЦикл = Истина;
				НовыйРемонт.КодРемонта = МаксимальныйКодРемонта;
				МаксимальныйКодРемонта = МаксимальныйКодРемонта + 1;
				
				ПолучитьЗаказНаРемонт(НовыйРемонт);
				
				ПредыдущийРемонтПоЦиклу = СледующийРемонт.ВидРемонта;
				ДатаПредыдущегоРемонтаПоЦиклу = СледующийРемонт.ДатаНачала + СледующийРемонт.Длительность*86400;
				
			КонецЕсли;
			
		Иначе
			ПрерватьРемонтныйЦикл = Истина;
		КонецЕсли;
		
		ИндексОбходаЦикла = ИндексОбходаЦикла + 1;
		Если ИндексОбходаЦикла = РемонтныйЦикл.Количество() Тогда
			ИндексОбходаЦикла = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу "Ремонты" по данным текущего объекта ремонта по правилам прочих ремонтов
//
// Параметры:
// 		СтурктураДанных - ВыборкаИзРезультатаЗапроса - Текущая строка выборки из результата запроса по планируемым объектам
// 		Выборки - Структура - Структура с кэшированными выборками
//
Процедура ЗаполнитьПрочиеРемонты(СтруктураДанных, КэшированныеЗначения)
	
	Выборки = КэшированныеЗначения.Выборки;
	ВыборкаПрочихРемонтов = Выборки.ПрочиеРемонты;
	ВыборкаПрочихРемонтов.Сбросить();
	СтруктураОтбора = Новый Структура("ХранилищеППР", СтруктураДанных.ХранилищеППР);
	
	РемонтируемыйОбъект = ?(ЗначениеЗаполнено(СтруктураДанных.Узел), СтруктураДанных.Узел, СтруктураДанных.ОбъектЭксплуатации);
	
	Пока ВыборкаПрочихРемонтов.НайтиСледующий(СтруктураОтбора) Цикл
		
		Правило = ВыборкаПрочихРемонтов;
		ВидРемонта = Правило.ВидРемонта;
		ДатаПредыдущегоРемонта = ПолучитьДатуПредыдущегоРемонта(РемонтируемыйОбъект, ВидРемонта, Выборки);
		Если Не ЗначениеЗаполнено(ДатаПредыдущегоРемонта) Тогда
			ДатаПредыдущегоРемонта = СтруктураДанных.ДатаВводаВЭксплуатацию;
		КонецЕсли;
		
		ПродолжитьПланирование = Истина;
		
		Пока ПродолжитьПланирование Цикл
			СледующийРемонт = СледующийРемонтПоПравилу(РемонтируемыйОбъект, Правило, ДатаПредыдущегоРемонта, Выборки);
			Если СледующийРемонт.Отказ Тогда
				ПродолжитьПланирование = Ложь;
			Иначе
				
				НовыйРемонт = Ремонты.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйРемонт, СтруктураДанных, "ОбъектЭксплуатации, Узел, Подразделение");
				ЗаполнитьЗначенияСвойств(НовыйРемонт, СледующийРемонт, "ВидРемонта, ДатаНачала, Длительность");
				НовыйРемонт.РемонтныйЦикл = Ложь;
				НовыйРемонт.КодРемонта = МаксимальныйКодРемонта;
				МаксимальныйКодРемонта = МаксимальныйКодРемонта + 1;
				
				ПолучитьЗаказНаРемонт(НовыйРемонт);
				
				ДатаПредыдущегоРемонта = СледующийРемонт.ДатаНачала + СледующийРемонт.Длительность*86400;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит "КодЗаказаНаРемонт" в переданной строке табличной части "Ремонты"
//
Процедура ПолучитьЗаказНаРемонт(СтрокаРемонта)
	
	СоздатьНовыйЗаказ = Истина;
	
	СтруктураПоискаРемонтов = Новый Структура("КодЗаказаНаРемонт, ОбъектЭксплуатации, Узел, ВидРемонта");
	ЗаполнитьЗначенияСвойств(СтруктураПоискаРемонтов, СтрокаРемонта);
	
	СтруктураПоиска = Новый Структура("ОбъектЭксплуатации, Подразделение");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРемонта);
	НайденныеСтроки = ЗаказыНаРемонт.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() <> 0 Тогда
		
		Для Каждого ЗаказНаРемонт Из НайденныеСтроки Цикл
			
			СтруктураПоискаРемонтов.КодЗаказаНаРемонт = ЗаказНаРемонт.КодЗаказаНаРемонт;
			Если Ремонты.НайтиСтроки(СтруктураПоискаРемонтов).Количество() <> 0 Тогда
				Продолжить; // Если в заказе уже есть ремонт данного вида для этого ремонтируемого объекта
			КонецЕсли;
			
			Если ЗаказНаРемонт.ДатаНачала <= СтрокаРемонта.ДатаНачала Тогда
				ДатаЗавершенияЗаказа = ЗаказНаРемонт.ДатаНачала + ЗаказНаРемонт.Длительность * 86400;
				Если ДатаЗавершенияЗаказа >= СтрокаРемонта.ДатаНачала Тогда
					СтрокаРемонта.КодЗаказаНаРемонт = ЗаказНаРемонт.КодЗаказаНаРемонт;
					ЗаказНаРемонт.Длительность = Макс(ЗаказНаРемонт.Длительность, СтрокаРемонта.Длительность);
					СоздатьНовыйЗаказ = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли СтрокаРемонта.ДатаНачала <= ЗаказНаРемонт.ДатаНачала Тогда
				ДатаЗавершенияРемонта = СтрокаРемонта.ДатаНачала + СтрокаРемонта.Длительность * 86400;
				Если ДатаЗавершенияРемонта >= ЗаказНаРемонт.ДатаНачала Тогда
					СтрокаРемонта.КодЗаказаНаРемонт = ЗаказНаРемонт.КодЗаказаНаРемонт;
					ЗаказНаРемонт.Длительность = Макс(ЗаказНаРемонт.Длительность, СтрокаРемонта.Длительность);
					ЗаказНаРемонт.ДатаНачала = СтрокаРемонта.ДатаНачала;
					СоздатьНовыйЗаказ = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СоздатьНовыйЗаказ Тогда
		
		КодЗаказаНаРемонт = ЗаказыНаРемонт.Количество() + 2;
		ЗаказНаРемонт = ЗаказыНаРемонт.Добавить();
		ЗаказНаРемонт.КодЗаказаНаРемонт = КодЗаказаНаРемонт;
		ЗаполнитьЗначенияСвойств(ЗаказНаРемонт, СтрокаРемонта, "ОбъектЭксплуатации, ДатаНачала, Подразделение, Длительность");
		
		СтрокаРемонта.КодЗаказаНаРемонт = КодЗаказаНаРемонт;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру следующего ремонта по правилу планирования
//
// Параметры:
// 		РемонтируемыйОбъект - СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.УзлыОбъектовЭксплуатации - Ссылка на ремонтируемый объект
// 		Правило - СтрокаТаблицыЗначений, ВыборкаИзРезультатаЗапроса - Строка описания правила планирования
// 		ДатаПредыдущего - Дата - Дата предыдущего ремонта по ремонтному циклу или по текущему правилу для прочих ремонтов
//
// Возвращаемое значение:
// 		Структура - Структура описания следующего ремонта
//
Функция СледующийРемонтПоПравилу(РемонтируемыйОбъект, Правило, ДатаПредыдущего, Выборки)
	
	СтруктураРемонта = Новый Структура("ВидРемонта, ДатаНачала, Длительность, Отказ");
	СтруктураРемонта.ВидРемонта = Правило.ВидРемонта;
	СтруктураРемонта.Длительность = Правило.Длительность;
	СтруктураРемонта.Отказ = Ложь;
	
	Если Правило.ПоИнтервалуНаработки Тогда
		
		СтруктураНаработки = ПолучитьНаработку(РемонтируемыйОбъект, Правило.ПоказательНаработки, Выборки);
		НаработкаСПоследнегоРемонта = 0;
		
		Если ДатаПредыдущего < ТекущаяДата() Тогда
			
			НаработкаСПоследнегоРемонта = ПолучитьНаработкуСДатыПоследнегоРемонта(
				РемонтируемыйОбъект,
				СтруктураРемонта.ВидРемонта,
				Правило.ПравилоРемонтногоЦикла,
				Правило.ПоказательНаработки,
				Выборки);
			
			Если НаработкаСПоследнегоРемонта = Неопределено Тогда
				
				НаработкаСПоследнегоРемонта = СтруктураНаработки.Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НаработкаСПоследнегоРемонта >= Правило.ИнтервалНаработки Тогда
			СтруктураРемонта.ДатаНачала = НачалоДня(ТекущаяДата());
		Иначе
			Если СтруктураНаработки.СреднесуточноеЗначение = 0 Тогда
				СтруктураРемонта.Отказ = Истина;
			Иначе
				ОтДаты = ?(
					НаработкаСПоследнегоРемонта=0,
					НачалоДня(ДатаПредыдущего),
					НачалоДня(СтруктураНаработки.Период));
				
				СтруктураРемонта.ДатаНачала = ОтДаты + ((Правило.ИнтервалНаработки-НаработкаСПоследнегоРемонта)/СтруктураНаработки.СреднесуточноеЗначение) * 86400;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		СтруктураРемонта.ДатаНачала = НачалоДня(ДатаПредыдущего) + Правило.ИнтервалВремени * 86400;
	КонецЕсли;
	
	Если СтруктураРемонта.Отказ Тогда
		Возврат СтруктураРемонта;
	КонецЕсли;
	
	// Проверка вхождения в интервал планирования
	Если СтруктураРемонта.ДатаНачала < ТекущаяДата() Тогда
		СтруктураРемонта.ДатаНачала = НачалоДня(КонецДня(ТекущаяДата())+1);
	ИначеЕсли СтруктураРемонта.ДатаНачала > Правило.МаксимальнаяДатаРемонта Тогда
		СтруктураРемонта.Отказ = Истина;
	КонецЕсли;
	
	Возврат СтруктураРемонта;
	
КонецФункции

// Заполняет табличные части документа "ЗаказНаРемонт" по данным табличных частей обработки
//
// Параметры:
// 		ОбъектДокумента - ДокументОбъект.ЗаказНаРемонт - Объект документа заказа
// 		КодЗаказаНаРемонт - Число - Код заказа, который необходимо перенести в документ
//
Процедура ЗаполнитьТабличныеЧастиОбъектаДокумента(ОбъектДокумента, КодЗаказаНаРемонт)
	
	СтруктураОтбораПоЗаказу = Новый Структура("КодЗаказаНаРемонт", КодЗаказаНаРемонт);
	
	Для Каждого Ремонт Из Ремонты.НайтиСтроки(СтруктураОтбораПоЗаказу) Цикл
		
		РемонтИзДокумента = ОбъектДокумента.Ремонты.Добавить();
		ЗаполнитьЗначенияСвойств(РемонтИзДокумента, Ремонт, "Узел, ВидРемонта, РемонтныйЦикл");
		ОбъектДокумента.МаксимальныйКодРемонта = ОбъектДокумента.МаксимальныйКодРемонта + 1;
		РемонтИзДокумента.КодРемонта = ОбъектДокумента.МаксимальныйКодРемонта;
		
		СтруктураОтбораПоРемонту = Новый Структура("КодРемонта", Ремонт.КодРемонта);
		
		НайденныеСтроки = МатериалыИРаботы.НайтиСтроки(СтруктураОтбораПоРемонту);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ЗаполнитьМатериалыРаботыПоРемонту(ОбъектДокумента, РемонтИзДокумента);
		Иначе
			Для Каждого СтрокаМатериаловИРабот Из НайденныеСтроки Цикл
				НоваяСтрока = ОбъектДокумента.МатериалыИРаботы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериаловИРабот);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, РемонтИзДокумента, "КодРемонта");
			КонецЦикла;
		КонецЕсли;
		НайденныеСтроки = Трудозатраты.НайтиСтроки(СтруктураОтбораПоРемонту);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ЗаполнитьТрудозатратыПоРемонту(ОбъектДокумента, РемонтИзДокумента);
		Иначе
			Для Каждого СтрокаТрудозатрат Из НайденныеСтроки Цикл
				НоваяСтрока = ОбъектДокумента.Трудозатраты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТрудозатрат);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, РемонтИзДокумента, "КодРемонта");
			КонецЦикла;
		КонецЕсли;
		НайденныеСтроки = РабочиеЦентры.НайтиСтроки(СтруктураОтбораПоРемонту);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ЗаполнитьРабочиеЦентрыПоРемонту(ОбъектДокумента, РемонтИзДокумента);
		Иначе
			Для Каждого СтрокаРабочихЦентров Из НайденныеСтроки Цикл
				Если ОбъектДокумента.РабочиеЦентры.НайтиСтроки(Новый Структура("РабочийЦентр", СтрокаРабочихЦентров.РабочийЦентр)).Количество()=0 Тогда
					НоваяСтрока = ОбъектДокумента.РабочиеЦентры.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРабочихЦентров);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектДокумента, "ДатаНачала, ДатаЗавершения");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСтатьиРасходов(ОбъектДокумента);
	
	Документы.ЗаказНаРемонт.ЗаполнитьСкладПоНастройкамПередачиМатериалов(ОбъектДокумента);
	
КонецПроцедуры

// Заполняет табличую часть материалов/работ по строке ремонта
//
// Параметры:
// 		ОбъектДокумента - ДокументОбъект.ЗаказНаРемонт - Объект документа заказа на ремонт
// 		Ремонт - ТабличнаяЧастьСтрока - Строка таблицы ремонтов
//
Процедура ЗаполнитьМатериалыРаботыПоРемонту(ОбъектДокумента, Ремонт)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыРемонтовМатериалыИРаботы.Номенклатура,
		|	ВидыРемонтовМатериалыИРаботы.Характеристика,
		|	ВидыРемонтовМатериалыИРаботы.Упаковка,
		|	ВидыРемонтовМатериалыИРаботы.КоличествоУпаковок,
		|	ВидыРемонтовМатериалыИРаботы.Количество
		|ИЗ
		|	Справочник.ВидыРемонтов.МатериалыИРаботы КАК ВидыРемонтовМатериалыИРаботы
		|ГДЕ
		|	ВидыРемонтовМатериалыИРаботы.Ссылка = &ВидРемонта");
	
	Запрос.УстановитьПараметр("ВидРемонта", Ремонт.ВидРемонта);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура("КодРемонта");
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Ремонт);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОбъектДокумента.МатериалыИРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличую часть трудозатрат по строке ремонта
//
// Параметры:
// 		ОбъектДокумента - ДокументОбъект.ЗаказНаРемонт - Объект документа заказа на ремонт
// 		Ремонт - ТабличнаяЧастьСтрока - Строка таблицы ремонтов
//
Процедура ЗаполнитьТрудозатратыПоРемонту(ОбъектДокумента, Ремонт)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыРемонтовТрудозатраты.ВидРабот,
		|	ВидыРемонтовТрудозатраты.Количество
		|ИЗ
		|	Справочник.ВидыРемонтов.Трудозатраты КАК ВидыРемонтовТрудозатраты
		|ГДЕ
		|	ВидыРемонтовТрудозатраты.Ссылка = &ВидРемонта");
	
	Запрос.УстановитьПараметр("ВидРемонта", Ремонт.ВидРемонта);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура("КодРемонта");
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Ремонт);
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОбъектДокумента.Трудозатраты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличую часть рабочих центров по строке ремонта
//
//
// Параметры:
// 		ОбъектДокумента - ДокументОбъект.ЗаказНаРемонт - Объект документа заказа на ремонт
// 		Ремонт - ТабличнаяЧастьСтрока - Строка таблицы ремонтов
//
Процедура ЗаполнитьРабочиеЦентрыПоРемонту(ОбъектДокумента, Ремонт)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РабочиеЦентры.РабочийЦентр
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации.РабочиеЦентры КАК РабочиеЦентры
		|ГДЕ
		|	РабочиеЦентры.Ссылка = &ОбъектЭксплуатации
		|	И (&ЭтоРемонтОбъекта
		|			ИЛИ ВЫРАЗИТЬ(&Узел КАК Справочник.УзлыОбъектовЭксплуатации).ВлияетНаДоступностьРЦ)
		|	И НЕ РабочиеЦентры.РабочийЦентр В (&РабочиеЦентры)");
	
	Запрос.УстановитьПараметр("ЭтоРемонтОбъекта", Не ЗначениеЗаполнено(Ремонт.Узел));
	Запрос.УстановитьПараметр("ОбъектЭксплуатации", ОбъектДокумента.ОбъектЭксплуатации);
	Запрос.УстановитьПараметр("Узел", Ремонт.Узел);
	Запрос.УстановитьПараметр("РабочиеЦентры", ОбъектДокумента.РабочиеЦентры.Выгрузить(,"РабочийЦентр"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ОбъектДокумента.РабочиеЦентры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектДокумента, "ДатаНачала, ДатаЗавершения");
	КонецЦикла;
	
КонецПроцедуры

// Заполняет статьи расходов по настройкам отражения расходов
//
Процедура ЗаполнитьСтатьиРасходов(ОбъектДокумента)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
		|	ВЫРАЗИТЬ(&ОбъектЭксплуатации КАК Справочник.ОбъектыЭксплуатации) КАК ОбъектЭксплуатации,
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.Узел КАК Справочник.УзлыОбъектовЭксплуатации) КАК Узел,
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.ВидРемонта КАК Справочник.ВидыРемонтов) КАК ВидРемонта
		|ПОМЕСТИТЬ ДанныеЗаполнения
		|ИЗ
		|	&ДанныеЗаполнения КАК ДанныеЗаполнения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЗаполнения.НомерСтроки - 1 КАК ИндексСтроки,
		|	ЕСТЬNULL(ОбщиеВидыРемонтов.СтатьяРасходов, ЕСТЬNULL(Узлы.СтатьяРасходов, ДанныеЗаполнения.ОбъектЭксплуатации.СтатьяРасходов)) КАК СтатьяРасходов
		|ИЗ
		|	ДанныеЗаполнения КАК ДанныеЗаполнения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбщиеВидыРемонтов КАК ОбщиеВидыРемонтов
		|		ПО ДанныеЗаполнения.ВидРемонта.ОбщийВидРемонта = ОбщиеВидыРемонтов.Ссылка
		|			И (ОбщиеВидыРемонтов.ЗаданаСтатьяРасходов)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УзлыОбъектовЭксплуатации КАК Узлы
		|		ПО ДанныеЗаполнения.Узел = Узлы.Ссылка
		|			И (Узлы.СтатьяРасходов <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка))");
	Запрос.УстановитьПараметр("ДанныеЗаполнения", ОбъектДокумента.Ремонты.Выгрузить());
	Запрос.УстановитьПараметр("ОбъектЭксплуатации", ОбъектДокумента.ОбъектЭксплуатации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОбъектДокумента.Ремонты[Выборка.ИндексСтроки], Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
