&НаКлиенте
Перем ФормаРасшифровкаПоДокументамОткрыта;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	Если Параметры.Свойство("ДатаОкончанияПериода") Тогда
		ДатаОкончанияПериода.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
		ДатаОкончанияПериода.Дата = Параметры.ДатаОкончанияПериода;
	КонецЕсли;
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета();
	
	ПолучитьСостояниеРегламентногоЗадания();
	
	ДополнительныеПараметры = Новый Структура;
	ИнтеграцияССППР.ДобавитьРазмещениеКомандСППРВДополнительныеПараметры(Элементы.ГруппаСППР, ДополнительныеПараметры);
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	
	УправлениеЭлементамиФормыПриИзмененииАвтоматическогоОтраженияВУчете();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ФормаРасшифровкаПоДокументамОткрыта = Ложь;
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ВнешниеСобытия = Новый Массив;
	ВнешниеСобытия.Добавить("Запись_ОтражениеДокументовВРегламентированномУчете");
	ВнешниеСобытия.Добавить("Запись_СтатусПроверкиДокумента");
	ВнешниеСобытия.Добавить("ИзмененыНастройкиОтраженияВУчете");
	ВнешниеСобытия.Добавить("ЗакрытаФормаСпискаДокументов");
	
	Если ВнешниеСобытия.Найти(ИмяСобытия) <> Неопределено Тогда
		ОбработкаОповещенияСервер(ИмяСобытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Организация = Настройки.Получить("Организация");
	ДатаОкончанияПериода.Вариант = Настройки.Получить("ДатаОкончанияПериода.Вариант");
	Если ДатаОкончанияПериода.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата Тогда
		ДатаОкончанияПериода.Дата = Настройки.Получить("ДатаОкончанияПериода.Дата");
	КонецЕсли;
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	Если Параметры.Свойство("ДатаОкончанияПериода") Тогда
		ДатаОкончанияПериода.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
		ДатаОкончанияПериода.Дата = Параметры.ДатаОкончанияПериода;
	КонецЕсли;
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	
	ДатаОкончанияПериода.Дата = КонецДня(ДатаОкончанияПериода);
	ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусКОтражениюВУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете");
	ПараметрыФормы.Отбор.Вставить("СтатусОтражения", Статус);
	ПараметрыФормы.Вставить("ЭтоДокументКорректировки", Ложь);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтсутствуютПравилаОтраженияВУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета");
	ПараметрыФормы.Отбор.Вставить("СтатусОтражения", Статус);
	ПараметрыФормы.Вставить("ЭтоДокументКорректировки", Ложь);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСчетовУчетаНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.НастройкаОтраженияДокументовВРеглУчете.ФормаНастройкиОтраженияДокументовВРеглУчете.Элемент.НастройкаСчетовУчета.Нажатие");
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериода);
	ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ФормаНастройки", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтраженоВУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете");
	ПараметрыФормы.Отбор.Вставить("СтатусОтражения", Статус);
	ПараметрыФормы.Вставить("ЭтоДокументКорректировки", Ложь);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусКОтражениюВУчетеВручнуюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную");
	ПараметрыФормы.Отбор.Вставить("СтатусОтражения", Статус);
	ПараметрыФормы.Вставить("ЭтоДокументКорректировки", Ложь);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтраженоВУчетеВручнуюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную");
	ПараметрыФормы.Отбор.Вставить("СтатусОтражения", Статус);
	ПараметрыФормы.Вставить("ЭтоДокументКорректировки", Ложь);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусДополнительныеОперацииКОтражениюВУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную");
	ПараметрыФормы.Отбор.Вставить("СтатусОтражения", Статус);
	ПараметрыФормы.Вставить("ЭтоДокументКорректировки", Истина);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусДополнительныеОперацииОтраженоВУчетеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную");
	ПараметрыФормы.Отбор.Вставить("СтатусОтражения", Статус);
	ПараметрыФормы.Вставить("ЭтоДокументКорректировки", Истина);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеОтражениеВУчетеПриИзменении(Элемент)
	
	СохранитьРеквизитыРегламентногоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРасписанияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактированиеРасписанияРегламентногоЗадания();
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПроверенныхДокументовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	СтатусПроверки = ПредопределенноеЗначение("Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен");
	ПараметрыФормы.Отбор.Вставить("СтатусПроверки", СтатусПроверки);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНеПроверенныхДокументовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	СтатусПроверки = ПредопределенноеЗначение("Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен");
	ПараметрыФормы.Отбор.Вставить("СтатусПроверки", СтатусПроверки);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусДокументовКПроверкеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = ИнициализироватьПараметрыФормыСпискаДокументов(Элемент.Имя);
	СтатусПроверки = ПредопределенноеЗначение("Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке");
	ПараметрыФормы.Отбор.Вставить("СтатусПроверки", СтатусПроверки);
	
	ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура СостояниеОффлайновыхОперацийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыЗакрытияМесяца = Новый Структура("ПериодРегистрации, Организация", НачалоМесяца(ДатаОкончанияПериода), Организация);
	
	ОткрытьФорму("Обработка.ОперацииЗакрытияМесяца.Форма", ПараметрыЗакрытияМесяца, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСостояние(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.НастройкаОтраженияДокументовВРеглУчете.ФормаНастройкиОтраженияДокументовВРеглУчете.Команда.ОбновитьСостояние");
	
	ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДокументыВРегламентированномУчете(Команда)
	
	КоличествоОтраженныхВРеглУчете = 0;
	КоличествоНеУказаныСчетаУчета = 0;
	КоличествоОшибкиПриОтражении = 0;
	
	ОтразитьДокументыВРегламентированномУчетеСервер(КоличествоОтраженныхВРеглУчете, КоличествоНеУказаныСчетаУчета, КоличествоОшибкиПриОтражении);
	
	Оповестить("Отражение документов в регламентированном учете", Неопределено, ЭтотОбъект);
	ОповеститьПользователяОбОтраженииДокументовВРеглУчете(КоличествоОтраженныхВРеглУчете, КоличествоНеУказаныСчетаУчета, КоличествоОшибкиПриОтражении);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
 
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Общие

&НаСервере
Процедура ОтразитьДокументыВРегламентированномУчетеСервер(КоличествоОтраженных, КоличествоНеУказаныСчетаУчета, КоличествоОшибкиПриОтражении)
	
	ПериодРасчета = ?(ЗначениеЗаполнено(ДатаОкончанияПериода.Дата), ДатаОкончанияПериода.Дата, ДАТА(2099,1,1));
	
	РеглУчетПроведениеСервер.ОтразитьВсе(
		КонецДня(ПериодРасчета), 
		Организация, 
		КоличествоОтраженных, 
		КоличествоНеУказаныСчетаУчета,
		КоличествоОшибкиПриОтражении);
		
	ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеОтраженияДокументов(МассивОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтражениеДокументов.ДатаОтражения КАК Период,
	|	ОтражениеДокументов.Регистратор КАК Регистратор,
	|	ОтражениеДокументов.Статус КАК Статус
	|ПОМЕСТИТЬ ОтражениеДокументов
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Организация В(&МассивОрганизаций)
	|	И ОтражениеДокументов.ДатаОтражения <= &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтражениеДокументов.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную)
	|	И НЕ ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную)
	|	И НЕ ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтражениеДокументов.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	(ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете)
	|			ИЛИ НЕ &ДокументыОтражаютсяВручную
	|				И НЕ ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|				И (ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную)
	|					ИЛИ ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную)))
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтражениеДокументов.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную)
	|	И ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную)
	|	И ОтражениеДокументов.Регистратор ССЫЛКА Документ.ОперацияБух
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета)
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) > 0";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуДокументовПоРегламентированномуУчету") Тогда
		Запрос.Текст = Запрос.Текст + ";
		|		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ОтражениеДокументов.Период, ЕСТЬNULL(ОтражениеДокументовВРеглУчетеПоДокументам.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК Период,
		|	ЕСТЬNULL(ОтражениеДокументов.Регистратор, СтатусыПроверкиДокументов.Документ) КАК Регистратор,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА &ЕстьБлокировка
		|				ТОГДА ВЫБОР
		|						КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
		|							ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)
		|						ИНАЧЕ СтатусыПроверкиДокументов.СтатусПроверки
		|					КОНЕЦ
		|			ИНАЧЕ СтатусыПроверкиДокументов.СтатусПроверки
		|		КОНЕЦ, ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ЕСТЬNULL(ОтражениеДокументов.Регистратор, СтатусыПроверкиДокументов.Документ)) В (&СписокПроверяемыхТипов)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.ПустаяСсылка)
		|		КОНЕЦ) КАК СтатусПроверки
		|ПОМЕСТИТЬ ПроверкаДокументов
		|ИЗ
		|	ОтражениеДокументов КАК ОтражениеДокументов
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПроверкиДокументов КАК СтатусыПроверкиДокументов
		|		ПО ОтражениеДокументов.Регистратор = СтатусыПроверкиДокументов.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументовВРеглУчетеПоДокументам
		|		ПО СтатусыПроверкиДокументов.Документ = ОтражениеДокументовВРеглУчетеПоДокументам.Регистратор
		|
		|ГДЕ
		|	(СтатусыПроверкиДокументов.Организация Есть NULL ИЛИ СтатусыПроверкиДокументов.Организация В (&МассивОрганизаций))
		|	И (Не ОтражениеДокументов.Регистратор Есть NULL ИЛИ НЕ ОтражениеДокументовВРеглУчетеПоДокументам.Регистратор Есть NULL)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ПроверкаДокументов.Период) КАК ДатаНачала,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПроверкаДокументов.Регистратор) КАК Количество
		|ИЗ
		|	ПроверкаДокументов КАК ПроверкаДокументов
		|ГДЕ
		|	ПроверкаДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПроверкаДокументов.Регистратор) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ПроверкаДокументов.Период) КАК ДатаНачала,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПроверкаДокументов.Регистратор) КАК Количество
		|ИЗ
		|	ПроверкаДокументов КАК ПроверкаДокументов
		|ГДЕ
		|	ПроверкаДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПроверкаДокументов.Регистратор) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ПроверкаДокументов.Период) КАК ДатаНачала,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПроверкаДокументов.Регистратор) КАК Количество
		|ИЗ
		|	ПроверкаДокументов КАК ПроверкаДокументов
		|ГДЕ
		|	ПроверкаДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПроверкаДокументов.Регистратор) > 0";
		
		СписокПроверяемыхТипов = Новый СписокЗначений;
		СписокПроверяемыхТипов.ЗагрузитьЗначения(Метаданные.РегистрыСведений.СтатусыПроверкиДокументов.Измерения.Документ.Тип.Типы());
		ЕстьБлокировка = Не ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеДокументыПоРеглУчету");
		
		Запрос.УстановитьПараметр("СписокПроверяемыхТипов", СписокПроверяемыхТипов);
		Запрос.УстановитьПараметр("ЕстьБлокировка", ЕстьБлокировка);
		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончанияПериода.Дата), ДатаОкончанияПериода.Дата, Дата(2399, 1, 1)));
	// Если снята галка ручного отражения, но ранее документы были отражены вручную они не будут попадать ни в один из списков:
	Запрос.УстановитьПараметр("ДокументыОтражаютсяВручную", ПолучитьФункциональнуюОпцию("ИспользоватьРучнуюКорректировкуПроводокПоРеглУчету"));
		
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	#Область РучноеОтражениеДокументов
	
	Выборка = МассивРезультатов[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru='Документы, скорректированные вручную (%Количество%), по %Дата%';uk='Документи, що скориговані вручну (%Количество%), з %Дата%'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
		СтатусОтраженоВУчетеВручную = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
		Элементы.СтатусОтраженоВУчетеВручную.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
		Элементы.СтатусОтраженоВУчетеВручную.Гиперссылка = Истина;
	Иначе
		СтатусОтраженоВУчетеВручную = НСтр("ru='Нет скорректированных вручную документов.';uk='Немає скоригованих вручну документів.'");
		Элементы.СтатусОтраженоВУчетеВручную.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Элементы.СтатусОтраженоВУчетеВручную.Гиперссылка = Ложь;
	КонецЕсли;
	
	Выборка = МассивРезультатов[2].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru='Документы, требующие ручной корректировки и подтверждения (%Количество%), с %Дата%';uk='Документи, що потребують ручного коригування та підтвердження (%Количество%), з %Дата%'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
		СтатусКОтражениюВУчетеВручную = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
		Элементы.СтатусКОтражениюВУчетеВручную.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
		Элементы.СтатусКОтражениюВУчетеВручную.Гиперссылка = Истина;
	Иначе
		СтатусКОтражениюВУчетеВручную = НСтр("ru='Нет документов, требующих ручной корректировки и подтверждения.';uk='Немає документів, що потребують ручного коригування і підтвердження.'");
		Элементы.СтатусКОтражениюВУчетеВручную.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Элементы.СтатусКОтражениюВУчетеВручную.Гиперссылка = Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область АвтоматическоеОтражениеДокументов
	
	Выборка = МассивРезультатов[3].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru='Отраженные документы (%Количество%), по %Дата%';uk='Відображені документи (%Количество%), по %Дата%'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
		СтатусОтраженоВУчете = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
		Элементы.СтатусОтраженоВУчете.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
		Элементы.СтатусОтраженоВУчете.Гиперссылка = Истина;
	Иначе
		СтатусОтраженоВУчете = НСтр("ru='Нет отраженных документов.';uk='Немає відображених документів.'");
		Элементы.СтатусОтраженоВУчете.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Элементы.СтатусОтраженоВУчете.Гиперссылка = Ложь;
	КонецЕсли;
	
	Выборка = МассивРезультатов[4].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru='Документы, ожидающие автоматического отражения (%Количество%), с %Дата%';uk='Документи, які очікують автоматичного відображення (%Количество%), з %Дата%'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
		СтатусКОтражениюВУчете = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
		Элементы.СтатусКОтражениюВУчете.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
		Элементы.СтатусКОтражениюВУчете.Гиперссылка = Истина;
	Иначе
		СтатусКОтражениюВУчете = НСтр("ru='Нет документов, ожидающих автоматического отражения.';uk='Немає документів, які очікують автоматичного відображення.'");
		Элементы.СтатусКОтражениюВУчете.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Элементы.СтатусКОтражениюВУчете.Гиперссылка = Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтражениеДокументовПутемКорректировок
	
	Выборка = МассивРезультатов[5].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru='Ручные операции регл. учета (%Количество%), по %Дата%';uk='Ручні операції регл. обліку (%Количество%), по %Дата%'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
		СтатусДополнительныеОперацииОтраженоВУчете = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
		Элементы.СтатусДополнительныеОперацииОтраженоВУчете.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
		Элементы.СтатусДополнительныеОперацииОтраженоВУчете.Гиперссылка = Истина;
	Иначе
		СтатусДополнительныеОперацииОтраженоВУчете = НСтр("ru='Нет ручных операций регл. учета.';uk='Немає ручних операцій регл. обліку.'");
		Элементы.СтатусДополнительныеОперацииОтраженоВУчете.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Элементы.СтатусДополнительныеОперацииОтраженоВУчете.Гиперссылка = Ложь;
	КонецЕсли;
	
	Выборка = МассивРезультатов[6].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru='Ручные операции регл. учета, требующие корректировки и подтверждения (%Количество%), с %Дата%';uk='Ручні операції регл. обліку, потребують коригування та підтвердження (%Количество%), з %Дата%'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
		СтатусДополнительныеОперацииКОтражениюВУчете = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
		Элементы.СтатусДополнительныеОперацииКОтражениюВУчете.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
		Элементы.СтатусДополнительныеОперацииКОтражениюВУчете.Гиперссылка = Истина;
	Иначе
		СтатусДополнительныеОперацииКОтражениюВУчете = НСтр("ru='Нет ручных операций регл. учета, требующих корректировки и подтверждения.';uk='Немає ручних операцій регл. обліку, які потребують коригування і підтвердження.'");
		Элементы.СтатусДополнительныеОперацииКОтражениюВУчете.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Элементы.СтатусДополнительныеОперацииКОтражениюВУчете.Гиперссылка = Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НеНастроенныеСчетаУчета
	
	Выборка = МассивРезультатов[7].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстСтатуса = НСтр("ru='Документы, не отраженные в учете из-за ненастроенных счетов учета (%Количество%), с %Дата%';uk='Документи, які не відображені в обліку через не настроєні рахунки обліку (%Количество%), з %Дата%'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
		СтатусОтсутствуютПравилаОтраженияВУчете = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
		Элементы.СтатусОтсутствуютПравилаОтраженияВУчете.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
		Элементы.СтатусОтсутствуютПравилаОтраженияВУчете.Гиперссылка = Истина;
	Иначе
		СтатусОтсутствуютПравилаОтраженияВУчете = НСтр("ru='Нет документов, не отраженных в учете.';uk='Немає документів, не відображених в обліку.'");
		Элементы.СтатусОтсутствуютПравилаОтраженияВУчете.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		Элементы.СтатусОтсутствуютПравилаОтраженияВУчете.Гиперссылка = Ложь;
	КонецЕсли;

	#КонецОбласти
	
	#Область ПроверкаДокументов
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуДокументовПоРегламентированномуУчету") Тогда
	
		Выборка = МассивРезультатов[9].Выбрать();
		Если Выборка.Следующий() Тогда
			ТекстСтатуса = НСтр("ru='Проверенные документы (%Количество%), по %Дата%';uk='Перевірені документи (%Количество%), по %Дата%'");
			ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
			СтатусПроверенныхДокументов = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
			Элементы.СтатусПроверенныхДокументов.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
			Элементы.СтатусПроверенныхДокументов.Гиперссылка = Истина;
		Иначе
			СтатусПроверенныхДокументов = НСтр("ru='Нет проверенных документов.';uk='Немає перевірених документів.'");
			Элементы.СтатусПроверенныхДокументов.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
			Элементы.СтатусПроверенныхДокументов.Гиперссылка = Ложь;
		КонецЕсли;
		
		Выборка = МассивРезультатов[10].Выбрать();
		Если Выборка.Следующий() Тогда
			ТекстСтатуса = НСтр("ru='Документы, требующие повторной проверки (%Количество%), с %Дата%';uk='Документи, що потребують повторної перевірки (%Количество%), з %Дата%'");
			ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
			СтатусДокументовКПроверке = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
			Элементы.СтатусДокументовКПроверке.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
			Элементы.СтатусДокументовКПроверке.Гиперссылка = Истина;
		Иначе
			СтатусДокументовКПроверке = НСтр("ru='Нет документов, требующих повторной проверки.';uk='Немає документів, що потребують повторної перевірки.'");
			Элементы.СтатусДокументовКПроверке.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
			Элементы.СтатусДокументовКПроверке.Гиперссылка = Ложь;
		КонецЕсли;
		Элементы.СтатусДокументовКПроверке.Видимость = Не ЕстьБлокировка;
		
		Выборка = МассивРезультатов[11].Выбрать();
		Если Выборка.Следующий() Тогда
			ТекстСтатуса = НСтр("ru='Документы, требующие проверки (%Количество%), с %Дата%';uk='Документи, що потребують перевірки (%Количество%), з %Дата%'");
			ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", Выборка.Количество);
			СтатусНеПроверенныхДокументов = СтрЗаменить(ТекстСтатуса, "%Дата%", Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
			Элементы.СтатусНеПроверенныхДокументов.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
			Элементы.СтатусНеПроверенныхДокументов.Гиперссылка = Истина;
		Иначе
			СтатусНеПроверенныхДокументов = НСтр("ru='Нет документов, требующих проверки.';uk='Немає документів, що потребують перевірки.'");
			Элементы.СтатусНеПроверенныхДокументов.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
			Элементы.СтатусНеПроверенныхДокументов.Гиперссылка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеОффлайновыхРасчетов(МассивОрганизаций)
	
	СостояниеОффлайновыхОпераций = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработкаЗакрытияМесяца = Обработки.ОперацииЗакрытияМесяца.Создать();
	
	СписокЭтапов = Новый СписокЗначений;
	СписокЭтапов.Добавить("РасчетыСПартнерами");
	СписокЭтапов.Добавить("ПартииТоваров");
	СписокЭтапов.Добавить("Себестоимость");
	
	СостоянияЭтапов = Новый Структура;
	НеВыполненныеОперации = Новый Массив;
	
	Период = ?(ЗначениеЗаполнено(ДатаОкончанияПериода), ДатаОкончанияПериода.Дата, ТекущаяДатаСеанса());
	ПараметрыРасчета = Новый Структура("СписокОрганизаций, СписокПодразделений, Период", МассивОрганизаций, СписокПодразделений(), Период);
	Для Каждого Этап Из СписокЭтапов Цикл
		
		СостояниеЭтапа = ОбработкаЗакрытияМесяца.СостояниеЭтапа(СостоянияЭтапов, ПараметрыРасчета, Этап.Значение);
		СостоянияЭтапов.Вставить(Этап.Значение, СостояниеЭтапа);
		
		Если СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками
			ИЛИ СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
			ИЛИ СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.Неопределено
			ИЛИ СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций Тогда
			
			Если Этап.Значение = "РасчетыСПартнерами" Тогда
				НеВыполненныеОперации.Добавить(НСтр("ru='восстановления последовательности расчетов с контрагентами';uk='відновлення послідовності розрахунків з контрагентами'"));
			ИначеЕсли Этап.Значение = "Себестоимость" Тогда
				НеВыполненныеОперации.Добавить(НСтр("ru='расчета себестоимости';uk='розрахунку собівартості'"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НеВыполненныеОперации.Количество() Тогда
		
		ТекстПредупреждения = НСтр("ru='До закрытия месяца отражение документов в бухгалтерском учете носит предварительный характер и может измениться
                                    |по результатам %1.'
                                    |;uk='До закриття місяця відображення документів в бухгалтерському обліку носить попередній характер і може змінитися
                                    |за результатами %1.'") + Символы.ПС; 
			
		ТекстНеВыполненныеОперации = СтрСоединить(НеВыполненныеОперации, " "+НСтр("ru='и';uk='і'")+" ");
		
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, ТекстНеВыполненныеОперации);
		
		СостояниеОффлайновыхОпераций = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(ТекстПредупреждения,, ЦветаСтиля.РезультатПроблемаЦвет),
			Новый ФорматированнаяСтрока(НСтр("ru='Регламентные операции по закрытию месяца';uk='Регламентні операції з закриття місяця'"),,,, "ОткрытьФормуЗакрытияМесяца"));
		
	КонецЕсли;
		
	Элементы.ГруппаПредупреждение.Видимость = НеВыполненныеОперации.Количество();
	
КонецПроцедуры

&НаСервере
Функция СписокПодразделений()
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета()
	
	МассивОрганизаций = МассивДоступныхОрганизаций();
	
	ПолучитьСостояниеОффлайновыхРасчетов(МассивОрганизаций);
	
	ПолучитьСостояниеОтраженияДокументов(МассивОрганизаций);
	
	УстановитьСостояниеСчетовУчета(МассивОрганизаций);
	
	ПолучитьСостояниеРегламентногоЗадания();
	
КонецПроцедуры

&НаКлиенте
Функция ИнициализироватьПараметрыФормыСпискаДокументов(ИмяЭлемента)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаОкончанияПериода", ?(ЗначениеЗаполнено(ДатаОкончанияПериода), ДатаОкончанияПериода.Дата, '39991231'));
	ПараметрыФормы.Вставить("Заголовок", ЭтотОбъект[ИмяЭлемента]);
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыФормы.Отбор.Вставить("Организация", Организация);
	КонецЕсли;
		
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияСервер(ИмяСобытия)

	Если ИмяСобытия = "Запись_ОтражениеДокументовВРегламентированномУчете"
		ИЛИ ИмяСобытия = "Запись_СтатусПроверкиДокумента" Тогда
		ПолучитьСостояниеОтраженияДокументов(МассивДоступныхОрганизаций());
	ИначеЕсли ИмяСобытия = "ИзмененыНастройкиОтраженияВУчете"
		ИЛИ ИмяСобытия = "ЗакрытаФормаСпискаДокументов" Тогда
		ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОбОтраженииДокументовВРеглУчете(КоличествоОтраженныхВРеглУчете, КоличествоНеУказаныСчетаУчета, КоличествоОшибкиПриОтражении)
	
	
	МассивСообщений = Новый Массив; 
	
	ТекстЗаголовок = СтрШаблон(НСтр("ru='Обработано %1';uk='Опрацьовано %1'"), ЧислоДокументовПрописью(КоличествоОтраженныхВРеглУчете + КоличествоНеУказаныСчетаУчета ));
	
	Если КоличествоОтраженныхВРеглУчете > 0 Тогда
		МассивСообщений.Добавить(СтрШаблон(НСтр("ru='Отражено в регл. учете %1';uk='Відображено у регл. обліку %1'"), ЧислоДокументовПрописью(КоличествоОтраженныхВРеглУчете)));
	КонецЕсли;
	Если КоличествоНеУказаныСчетаУчета > 0 Тогда
		МассивСообщений.Добавить(СтрШаблон(НСтр("ru='Не отражены из-за ненастроенных счетов учета %1';uk='Не відображені через ще не настроєні рахунки обліку %1'"), ЧислоДокументовПрописью(КоличествоНеУказаныСчетаУчета)));
	КонецЕсли;
	
	ТекстСообщение = СтрСоединить(МассивСообщений, Символы.ПС);
	ПоказатьОповещениеПользователя(ТекстЗаголовок, , ТекстСообщение, БиблиотекаКартинок.Информация32);
	
	Если КоличествоОшибкиПриОтражении > 0 Тогда
		ВызватьИсключение НСтр("ru='При отражении документов в регл. учете возники ошибки (подробности см. в журнале регистрации).';uk='При відображенні документів в регл. обліку возники помилки (подробиці див. у журналі реєстрації).'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МассивДоступныхОрганизаций()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСправочника.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &Организация
	|	ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И НЕ ДанныеСправочника.Предопределенный");
	Запрос.УстановитьПараметр("Организация", Организация);
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат МассивОрганизаций;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоДокументовПрописью(КоличествоДокументов)
	
	КоличествоПрописью = ЧислоПрописью(
		КоличествоДокументов,
		"Л = ru_RU; НП = Истина; НД = Ложь; ДП = Ложь;",
		НСтр("ru='документ,документа,документов,м,,,,,0';uk='документ,документа,документів,м,,,,,0'"));
	Поз = СтрНайти(КоличествоПрописью, "документ");
	Если Поз <> 0 Тогда
		КоличествоПрописью = Сред(КоличествоПрописью, Поз);
	КонецЕсли;
	КоличествоПрописью = Строка(КоличествоДокументов) + " " + НРег(КоличествоПрописью);
	
	Возврат КоличествоПрописью;
	
КонецФункции

#КонецОбласти

#Область АвтоматическоеОтражениеВУчете

&НаКлиенте
Процедура ОбновитьПредставлениеРасписания()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		ПредставлениеРасписания = НСтр("ru='Расписание не задано';uk='Розклад не заданий'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеРегламентногоЗадания()

	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ОтражениеДокументовВРеглУчете);
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И ЗначениеЗаполнено(Задание.Шаблон) Тогда
		РасписаниеРегламентногоЗадания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание.Шаблон, "Расписание").Получить();
	Иначе
		РасписаниеРегламентногоЗадания	= Задание.Расписание;
	КонецЕсли;
	ИспользоватьАвтоматическоеОтражениеВУчете = Задание.Использование;
	
	СвойстваПоследнегоФоновогоЗадания = ОбщегоНазначенияУТ.ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание);
	Если СвойстваПоследнегоФоновогоЗадания = Неопределено Тогда
		СостояниеАвтоматическогоОтраженияВУчете = НСтр("ru='Не выполнялось';uk='Не виконувалось'");
	Иначе
		СостояниеАвтоматическогоОтраженияВУчете = Строка(СвойстваПоследнегоФоновогоЗадания.Состояние) + ": "
			+ Строка(СвойстваПоследнегоФоновогоЗадания.Конец);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗадания()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьРасписаниеРегламентногоЗадания", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасписаниеРегламентногоЗадания(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		РасписаниеРегламентногоЗадания = Расписание;
		СохранитьРеквизитыРегламентногоЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРеквизитыРегламентногоЗадания()

	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ОтражениеДокументовВРеглУчете);
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", ИспользоватьАвтоматическоеОтражениеВУчете);
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	УправлениеЭлементамиФормыПриИзмененииАвтоматическогоОтраженияВУчете();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	ОбновитьДанныеОСостоянииДокументовИНастройкахСчетовУчета();

КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПриИзмененииАвтоматическогоОтраженияВУчете()

	Элементы.ПредставлениеРасписания.Доступность = ИспользоватьАвтоматическоеОтражениеВУчете 
		И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено();
	Элементы.СостояниеАвтоматическогоОтраженияВУчете.Доступность = ИспользоватьАвтоматическоеОтражениеВУчете;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУниверсальнуюФормуРасшифровкиПоДокументам(ПараметрыФормыРасшифровки)
	
	Если ФормаРасшифровкаПоДокументамОткрыта Тогда
		Оповестить("РасшифровкаПоДокументам_ИзмененийУсловийОтбора", ПараметрыФормыРасшифровки, ЭтотОбъект);
	Иначе
		ОповещениеОЗакрытииФормы = Новый ОписаниеОповещения("ПриЗакрытииФормыРасшифровкаПоДокументам", ЭтотОбъект);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументам", ПараметрыФормыРасшифровки, ЭтотОбъект,,,, ОповещениеОЗакрытииФормы);
		ФормаРасшифровкаПоДокументамОткрыта = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыРасшифровкаПоДокументам(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ФормаРасшифровкаПоДокументамОткрыта = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаСчетовУчета

&НаСервере
Процедура УстановитьСостояниеСчетовУчета(МассивОрганизаций)
	
	МассивТребуетсяЗаполнитьСчетаУчета = Новый Массив;
	НеТребуетЗаполнения = Ложь;
	
	Период = Обработки.НастройкаОтраженияДокументовВРеглУчете.ПериодКОтражениюВРеглУчете(МассивОрганизаций, ДатаОкончанияПериода);
	
	ПолучитьСостояниеСчетовУчетаНоменклатуры(МассивОрганизаций, Период, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения);
	ПолучитьСостояниеСчетовУчетаНоменклатурыПереданнойНаКомиссию(МассивОрганизаций, Период, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения);
	ПолучитьСостояниеСчетовУчетаРасчетов(МассивОрганизаций, Период, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения);
	ПолучитьСостояниеСчетовУчетаДоходов(МассивОрганизаций, Период, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения);
	ПолучитьСостояниеСчетовУчетаРасходов(МассивОрганизаций, Период, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения);
	ПолучитьСостояниеСчетовУчетаПрочихОпераций(МассивОрганизаций, Период, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения);
	ПолучитьСостояниеСчетовУчетаДенежныхСредств(МассивОрганизаций, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения);
	
	Если МассивТребуетсяЗаполнитьСчетаУчета.Количество() > 0 Тогда
		
		СостояниеСчетовУчета = НСтр("ru='Требуется заполнить:';uk='Потрібно заповнити:'");
		Для Каждого ЭлементМассива Из МассивТребуетсяЗаполнитьСчетаУчета Цикл
			СостояниеСчетовУчета = СостояниеСчетовУчета + " " + ЭлементМассива + ",";
		КонецЦикла;
		СостояниеСчетовУчета = Лев(СостояниеСчетовУчета, СтрДлина(СостояниеСчетовУчета) - 1);
		Элементы.СостояниеСчетовУчета.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
		
		ТекстСтатуса = НСтр("ru='Заполнить счета учета (%Количество%)';uk='Заповнити рахунки обліку (%Количество%)'");
		ТекстСтатуса = СтрЗаменить(ТекстСтатуса, "%Количество%", МассивТребуетсяЗаполнитьСчетаУчета.Количество());
		
	ИначеЕсли НеТребуетЗаполнения Тогда
		
		СостояниеСчетовУчета = НСтр("ru='Счета учета не требуют заполнения';uk='Рахунки обліку не потребують заповнення'");
		Элементы.СостояниеСчетовУчета.ЦветТекста = ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента;
		
	Иначе
		
		СостояниеСчетовУчета = НСтр("ru='Счета учета заполнены';uk='Рахунки обліку заповнені'");
		Элементы.СостояниеСчетовУчета.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеСчетовУчетаНоменклатуры(МассивОрганизаций, Период, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения)
	
	РезультатЗапроса = РегистрыСведений.ПорядокОтраженияНоменклатуры.РезультатЗапросаПоНастройкамОтраженияВУчете(
		МассивОрганизаций,
		Период);
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	Если Не НеТребуетЗаполнения Тогда
		НеТребуетЗаполнения = РезультатЗапроса.Пустой();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЕстьСобственныеТовары Тогда
			Если Не ЗначениеЗаполнено(Выборка.СчетУчетаНаСкладе) Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьПродажаСобственныхТоваров Тогда
			Если Не ЗначениеЗаполнено(Выборка.СчетУчетаСебестоимостиПродаж) Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьПродажаСобственныхТоваров ИЛИ Выборка.ЕстьПродажаУслуг Тогда
			Если Не ЗначениеЗаполнено(Выборка.СчетУчетаВыручкиОтПродаж) Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ТребуетсяЗаполнитьСчетаУчета Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетсяЗаполнитьСчетаУчета Тогда
		МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru='счета учета номенклатуры на складе';uk='рахунки обліку номенклатури на складі'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеСчетовУчетаНоменклатурыПереданнойНаКомиссию(МассивОрганизаций, Период, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения)
	
	РезультатЗапроса = РегистрыСведений.ПорядокОтраженияНоменклатурыПереданнойНаКомиссию.РезультатЗапросаПоНастройкамОтраженияВУчете(
		МассивОрганизаций,
		Период);
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	Если Не НеТребуетЗаполнения Тогда
		НеТребуетЗаполнения = РезультатЗапроса.Пустой();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.СчетУчетаПередачиНаКомиссию) Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
		
		Если Выборка.ЕстьПродажаСобственныхТоваров Тогда
			Если Не ЗначениеЗаполнено(Выборка.СчетУчетаСебестоимостиПродаж) Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Выборка.СчетУчетаВыручкиОтПродаж) Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
		КонецЕсли;

		Если ТребуетсяЗаполнитьСчетаУчета Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетсяЗаполнитьСчетаУчета Тогда
		МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru='счета учета номенклатуры, переданной на комиссию';uk='рахунки обліку номенклатури, переданої на комісію'"));
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервере
Процедура ПолучитьСостояниеСчетовУчетаРасчетов(МассивОрганизаций, Период, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения)
	
	РезультатЗапроса = РегистрыСведений.ПорядокОтраженияРасчетовСПартнерами.РезультатЗапросаПоНастройкамОтраженияВУчете(
		МассивОрганизаций,
		Период);
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	Если Не НеТребуетЗаполнения Тогда
		НеТребуетЗаполнения = РезультатЗапроса.Пустой();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЕстьРасчетыСКлиентами Тогда
	
			Если Не ЗначениеЗаполнено(Выборка.СчетУчетаРасчетовСКлиентами) Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Выборка.СчетУчетаАвансовПолученных) И НЕ Выборка.ЕстьРасчетыПоДепозитам Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.ЕстьРасчетыСПоставщиками Тогда
	
			Если Не ЗначениеЗаполнено(Выборка.СчетУчетаРасчетовСПоставщиками) Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Выборка.СчетУчетаАвансовВыданных) Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.ЕстьРасчетыСКлиентамиТара Тогда
			
			Если Не ЗначениеЗаполнено(Выборка.СчетУчетаРасчетовСКлиентамиТара) Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.ЕстьРасчетыСПоставщикамиТара Тогда
			
			Если Не ЗначениеЗаполнено(Выборка.СчетУчетаРасчетовСПоставщикамиТара) Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
			Конецесли;
			
		КонецЕсли;
		
		Если Выборка.ЕстьРасчетыПоКомиссии Тогда
			
			Если Не ЗначениеЗаполнено(Выборка.СчетУчетаРасчетовПоВознаграждению) Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
			
		КонецЕсли;
			
		Если ТребуетсяЗаполнитьСчетаУчета Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетсяЗаполнитьСчетаУчета Тогда
		МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru='счета учета расчетов';uk='рахунки обліку взаєморозрахунків'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеСчетовУчетаДоходов(МассивОрганизаций, Период, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения)
	
	РезультатЗапроса = РегистрыСведений.ПорядокОтраженияДоходов.РезультатЗапросаПоНастройкамОтраженияВУчете(
		МассивОрганизаций,
		Период);
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	Если Не НеТребуетЗаполнения Тогда
		НеТребуетЗаполнения = РезультатЗапроса.Пустой();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЕстьДоходы Тогда
			Если Не ЗначениеЗаполнено(Выборка.СчетУчета) Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
		КонецЕсли;
			
		Если ТребуетсяЗаполнитьСчетаУчета Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетсяЗаполнитьСчетаУчета Тогда
		МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru='счета учета доходов';uk='рахунки обліку доходів'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеСчетовУчетаРасходов(МассивОрганизаций, Период, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения)
	
	РезультатЗапроса = РегистрыСведений.ПорядокОтраженияРасходов.РезультатЗапросаПоНастройкамОтраженияВУчете(
		МассивОрганизаций,
		Период);
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	Если Не НеТребуетЗаполнения Тогда
		НеТребуетЗаполнения = РезультатЗапроса.Пустой();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЕстьРасходы Тогда
		
			Если Не ЗначениеЗаполнено(Выборка.СчетУчета) Тогда
				ТребуетсяЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяЗаполнитьСчетаУчета Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетсяЗаполнитьСчетаУчета Тогда
		МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru='счета учета расходов';uk='рахунки обліку витрат'"));
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеСчетовУчетаПрочихОпераций(МассивОрганизаций, Период, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения)
	
	РезультатЗапроса = РегистрыСведений.ПорядокОтраженияПрочихОпераций.РезультатЗапросаПоНастройкамОтраженияВУчете(
		МассивОрганизаций,
		Период);
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	Если Не НеТребуетЗаполнения Тогда
		НеТребуетЗаполнения = РезультатЗапроса.Пустой();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.СчетУчета) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
		
		Если ТребуетсяЗаполнитьСчетаУчета Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетсяЗаполнитьСчетаУчета Тогда
		МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru='счета учета прочих операций';uk='рахунки обліку інших операцій'"));
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеСчетовУчетаДенежныхСредств(МассивОрганизаций, МассивТребуетсяЗаполнитьСчетаУчета, НеТребуетЗаполнения)
	
	ТребуетсяЗаполнитьСчетаУчета = 
		Обработки.НастройкаОтраженияДокументовВРеглУчете.ТребуетсяНастройкаСчетовУчетаДенежныхСредств(МассивОрганизаций);
	
	Если ТребуетсяЗаполнитьСчетаУчета Тогда
		МассивТребуетсяЗаполнитьСчетаУчета.Добавить(НСтр("ru='счета учета денежных средств';uk='рахунки обліку грошових коштів'"));
	КонецЕсли;
		
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти
