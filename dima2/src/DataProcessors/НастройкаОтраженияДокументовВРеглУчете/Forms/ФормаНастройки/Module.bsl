&НаКлиенте
Перем ВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Организация = Параметры.Организация;
	ДатаОкончанияПериода = Параметры.ДатаОкончанияПериода;
	
	ЗаполнитьПраваЧтенияИзменения();
	
	Если Параметры.Свойство("МассивВидовСчетовРеглУчета") Тогда
		ПрименитьОтборПоВидамСчетовРеглУчета(Параметры.МассивВидовСчетовРеглУчета);
	КонецЕсли;
	
	Если Параметры.Свойство("МассивСкрываемыхЭлементов") Тогда
		СкрытьСФормыЭлементы(Параметры.МассивСкрываемыхЭлементов);
	КонецЕсли;
	
	ОрганизацииДляНастройки = Новый Массив; // Пусто - все организации
	Если Параметры.Свойство("ОрганизацииДляНастройки") Тогда
		ОрганизацииДляНастройки = Параметры.ОрганизацииДляНастройки;
	КонецЕсли;
	ЗаполнитьСписокВыбораОрганизации(ОрганизацииДляНастройки);
	
	ЗаполнитьТаблицуНастройки();
	
	ДоступныеСчетаУчетаНоменклатуры();
	ДоступныеСчетаУчетаРасчетов();
	ДоступныеСчетаУчетаПрочихДоходов();
	ДоступныеСчетаУчетаРасходов();
	ДоступныеСчетаУчетаТМЦ();
	
	Если Параметры.Свойство("ТекущаяСтраница") Тогда
		ЭлементСтраница = Элементы.Найти(Параметры.ТекущаяСтраница);
		Если ЭлементСтраница <> Неопределено Тогда
			Элементы.Страницы.ТекущаяСтраница = ЭлементСтраница;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СохранитьНастройку.Доступность = Ложь;
	Элементы.ПрименитьНастройку.Доступность = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне") Тогда
		Элементы.СчетаУчетаРасходовПодразделение.Заголовок = НСтр("ru='Подразделение / Переработчик';uk='Підрозділ / Переробник'");
	КонецЕсли;
	
	Элементы.СтраницаСчетаУчетаПодарочныхСертификатов.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты");
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ВыполняетсяЗакрытие и Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru='Настройки счетов были изменены. Сохранить изменения?';uk='Настройки рахунків були змінені. Зберегти зміни?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        СохранитьНастройкиОтраженияВУчете();
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ВыполняетсяЗакрытие = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ИзмененыНастройкиОтраженияВУчете Тогда
		Оповестить("ИзмененыНастройкиОтраженияВУчете");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПорядокОтраженияНоменклатуры" Тогда
		ЗаполнитьТаблицуСчетовУчетаНоменклатуры();
		
	ИначеЕсли ИмяСобытия = "Запись_ПорядокОтраженияРасчетовСПартнерами" Тогда
		ЗаполнитьТаблицуСчетовУчетаРасчетов();
		
	ИначеЕсли ИмяСобытия = "Запись_ПорядокОтраженияДоходов" Тогда
		ЗаполнитьТаблицуСчетовУчетаДоходов();
		
	ИначеЕсли ИмяСобытия = "Запись_ПорядокОтраженияРасходов" Тогда
		ЗаполнитьТаблицуСчетовУчетаРасходов();
		
	ИначеЕсли ИмяСобытия = "Запись_ПорядокОтраженияПрочихОпераций" Тогда
		ПолучитьСостояниеСчетовУчетаПрочихОпераций();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПоказыватьТолькоТребующиеЗаполненияПрочиеОперации = Настройки.Получить("ПоказыватьТолькоТребующиеЗаполненияПрочиеОперации");
	Если ПоказыватьТолькоТребующиеЗаполненияПрочиеОперации Тогда
		Элементы.СчетаУчетаПрочихОперацийПоказыватьТолькоТребующиеЗаполнения.Пометка = ПоказыватьТолькоТребующиеЗаполненияПрочиеОперации;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СчетаУчетаПрочихОпераций, "СчетУчета", , ВидСравненияКомпоновкиДанных.НеЗаполнено,,ПоказыватьТолькоТребующиеЗаполненияПрочиеОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьТаблицуНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	
	ЗаполнитьТаблицуНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаНоменклатуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	Если Поле = Элементы.СчетаУчетаНоменклатурыОрганизация Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Организация);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаНоменклатурыСклад Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Склад);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаНоменклатурыГруппаФинансовогоУчета Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.ГруппаФинансовогоУчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	СтрокаТаблицы.ДанныеИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаНоменклатурыПереданнойНаКомиссию

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПереданнойНаКомиссиюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	Если Поле = Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюОрганизация Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Организация);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюГруппаФинансовогоУчета Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.ГруппаФинансовогоУчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПереданнойНаКомиссиюПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	СтрокаТаблицы.ДанныеИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаНоменклатурыПереданнойНаКомиссиюПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаРасчетов

&НаКлиенте
Процедура СчетаУчетаРасчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	Если Поле = Элементы.СчетаУчетаРасчетовОрганизация Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Организация);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаРасчетовГруппаФинансовогоУчета Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.ГруппаФинансовогоУчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	СтрокаТаблицы.ДанныеИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасчетовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаДоходов

&НаКлиенте
Процедура СчетаУчетаДоходовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	Если Поле = Элементы.СчетаУчетаДоходовОрганизация Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Организация);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаДоходовПодразделение Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Подразделение);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаДоходовСтатьяДоходов Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.СтатьяДоходов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаДоходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	СтрокаТаблицы.ДанныеИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаДоходовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаРасходов

&НаКлиенте
Процедура СчетаУчетаРасходовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	Если Поле = Элементы.СчетаУчетаРасходовОрганизация Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Организация);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаРасходовПодразделение Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Подразделение);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаРасходовСтатьяРасходов Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.СтатьяРасходов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	СтрокаТаблицы.ДанныеИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "СчетаУчетаРасходовСчетУчета" Тогда
		СтрокаТаблицы = Элементы.СчетаУчетаРасходов.ТекущиеДанные;
		Если СтрокаТаблицы <> Неопределено Тогда
			УстановитьПараметрыВыбораСчетовРасходов(СтрокаТаблицы.ВидЦенности, СтрокаТаблицы.СебестоимостьРеализации, СтрокаТаблицы.РасходыНаРемонтОС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаРасходовСчетУчетаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.СчетаУчетаРасходов.ТекущиеДанные;
	СчетУчетаПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаТМЦВЭксплуатации

&НаКлиенте
Процедура СчетаУчетаТМЦВЭксплуатацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	
	Если Поле = Элементы.СчетаУчетаТМЦВЭксплуатацииОрганизация Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Организация);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаТМЦВЭксплуатацииКатегорияЭксплуатации Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.КатегорияЭксплуатации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаТМЦВЭксплуатацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	СтрокаТаблицы.ДанныеИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаТМЦВЭксплуатацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаДенежныхСредств

&НаКлиенте
Процедура СчетаУчетаДенежныхСредствВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаУчетаСертификатов

&НаКлиенте
Процедура СчетаУчетаПодарочныхСертификатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	Если Поле = Элементы.СчетаУчетаПодарочныхСертификатовОрганизация Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.Организация);
		
	ИначеЕсли Поле = Элементы.СчетаУчетаПодарочныхСертификатовВидСертификата Тогда
		ПоказатьЗначение(Неопределено, СтрокаТаблицы.ВидСертификата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаПодарочныхСертификатовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	СтрокаТаблицы.ДанныеИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаПодарочныхСертификатовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаУчетаПодарочныхСертификатовСчетУчетаПриИзменении(Элемент)
	
	СчетУчетаПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	СохранитьНастройкиОтраженияВУчете();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройку(Команда)
	
	ЗаполнитьТаблицуКПрименениюНастроки();
	
	КоличествоДокументов = ТаблицаДокументов.Количество();
	Если КоличествоДокументов > 0 Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Новая настройка будет применена для %1. Продолжить?';uk='Нова настройка буде застосована для %1. Продовжити?'"),
			ЧислоДокументовПрописью(КоличествоДокументов));
	    КодОтвета = Неопределено;

	    ПоказатьВопрос(Новый ОписаниеОповещения("ПрименитьНастройкуЗавершение", ЭтотОбъект, Новый Структура("КоличествоДокументов", КоличествоДокументов)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
	Иначе
		СохранитьНастройкиОтраженияВУчете();
	КонецЕсли;
	
	ПрименитьНастройкуФрагмент(КоличествоДокументов);
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КоличествоДокументов = ДополнительныеПараметры.КоличествоДокументов;
    
    
    КодОтвета = РезультатВопроса;
    Если КодОтвета = КодВозвратаДиалога.Да Тогда
        ПрименитьНастройкуОтраженияВУчете();
        УправлениеЭлементамиФормы();
    КонецЕсли;
    
    ПрименитьНастройкуФрагмент(КоличествоДокументов);

КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкуФрагмент(Знач КоличествоДокументов)
    
    ОповеститьПользователяОПримененииНастройки(КоличествоДокументов);

КонецПроцедуры

#Область ПроцедурыОбработчикиКомандОбновленияТаблицНастроек

&НаКлиенте
Процедура ОповеститьПользователяОПримененииНастройки(КоличествоДокументов)
	
	ТекстСообщения = "";
	
	Если КоличествоДокументов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Настройка применена для %1';uk='Настройка застосована для %1'"),
			ЧислоДокументовПрописью(КоличествоДокументов));
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Отработано %1';uk='Відпрацьовано %1'"),
			ЧислоДокументовПрописью(КоличествоДокументов));
	Иначе
		ТекстСообщения = НСтр("ru='Отсутствуют документы, требующие применения настройки';uk='Відсутні документи, що потребують застосування настройки'");
		ТекстЗаголовка = НСтр("ru='Отсутствуют документы для настройки';uk='Відсутні документи для настройки'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетаУчетаДенежныхСредств(Команда)
	
	ЗаполнитьТаблицуСчетовУчетаДенежныхСредств();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетаУчетаНоменклатуры(Команда)
	
	ЗаполнитьТаблицуСчетовУчетаНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетаУчетаНоменклатурыПереданнойНаКомиссию(Команда)
	
	ЗаполнитьТаблицуСчетовУчетаНоменклатурыПереданнойНаКомиссию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетаУчетаРасчетов(Команда)
	
	ЗаполнитьТаблицуСчетовУчетаРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетаУчетаДоходов(Команда)
	
	ЗаполнитьТаблицуСчетовУчетаДоходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетаУчетаРасходов(Команда)
	
	ЗаполнитьТаблицуСчетовУчетаРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетаУчетаТМЦ(Команда)
	
	ЗаполнитьТаблицуСчетовУчетаТМЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетаУчетаСертификатов(Команда)
	
	ЗаполнитьТаблицуСчетовУчетаСертификатов();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиКомандЗаполненияСчетовУчета

&НаКлиенте
Процедура УказатьСчетаУчетаНоменклатуры(Команда)
	
	ТребуетсяНастройкаСчетовУчета = Ложь; 
	Для каждого Строка Из СчетаУчетаНоменклатуры Цикл 
		Если Не ТребуетсяНастройкаСчетовУчета Тогда 
			ТребуетсяНастройкаСчетовУчета = ТребуетсяЗаполнениеСчетовУчетаДляНоменклатуры(Строка); 
		КонецЕсли; 
	КонецЦикла; 
	
	Если Не ТребуетсяНастройкаСчетовУчета Тогда 
		ПоказатьПредупреждение(,НСтр("ru='Все необходимые счета указаны.';uk='Всі необхідні рахунки вказані.'")); 
		Возврат; 
	КонецЕсли;
	
	СтруктураСчетов = Новый Структура("СчетУчетаНаСкладе, 
		|СчетУчетаВыручкиОтПродаж, 
		|СчетУчетаВычетовИзДоходов, 
		|СчетУчетаСебестоимостиПродаж");
	
	СтруктураПараметры = Новый Структура("СтруктураСчетов", СтруктураСчетов);
	ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ФормаГрупповойНастройкиСчетов", 
		СтруктураПараметры,,,,, Новый ОписаниеОповещения("УказатьСчетаУчетаНоменклатурыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСчетаУчетаНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураСчетов = Результат;
    
    Если СтруктураСчетов <> Неопределено Тогда
        ЗаполнитьСчетаУчетаНоменклатуры(СтруктураСчетов);
        УправлениеЭлементамиФормы();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УказатьСчетУчетаНоменклатурыПереданнойНаКомиссию(Команда)
	
	ТребуетсяНастройкаСчетовУчета = Ложь; 
	Для каждого Строка Из СчетаУчетаНоменклатурыПереданнойНаКомиссию Цикл 
		Если Не ТребуетсяНастройкаСчетовУчета Тогда 
			ТребуетсяНастройкаСчетовУчета = ТребуетсяЗаполнениеСчетовУчетаДляНоменклатурыПереданнойНаКомиссию(Строка); 
		КонецЕсли; 
	КонецЦикла; 
	
	Если Не ТребуетсяНастройкаСчетовУчета Тогда 
		ПоказатьПредупреждение(,НСтр("ru='Все необходимые счета указаны.';uk='Всі необхідні рахунки вказані.'")); 
		Возврат; 
	КонецЕсли;
	
	СтруктураСчетов = Новый Структура("СчетУчетаПередачиНаКомиссию, СчетУчетаВыручкиОтПродаж, СчетУчетаВычетовИзДоходов, СчетУчетаСебестоимостиПродаж");
	
	СтруктураПараметры = Новый Структура("СтруктураСчетов", СтруктураСчетов);
	ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ФормаГрупповойНастройкиСчетов", СтруктураПараметры,,,,, Новый ОписаниеОповещения("УказатьСчетУчетаНоменклатурыПереданнойНаКомиссиюЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСчетУчетаНоменклатурыПереданнойНаКомиссиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураСчетов = Результат;
    
    Если СтруктураСчетов <> Неопределено Тогда
        ЗаполнитьСчетаУчетаНоменклатурыПереданнойНаКомиссию(СтруктураСчетов);
        УправлениеЭлементамиФормы();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УказатьСчетУчетаРасчетов(Команда)
	
	ТребуетсяНастройкаСчетовУчета = Ложь; 
	Для каждого Строка Из СчетаУчетаРасчетов Цикл 
		Если Не ТребуетсяНастройкаСчетовУчета Тогда 
			ТребуетсяНастройкаСчетовУчета = ТребуетсяЗаполнениеСчетовУчетаРасчетов(Строка); 
		КонецЕсли; 
	КонецЦикла; 
	
	Если Не ТребуетсяНастройкаСчетовУчета Тогда 
		ПоказатьПредупреждение(,НСтр("ru='Все необходимые счета указаны.';uk='Всі необхідні рахунки вказані.'")); 
		Возврат; 
	КонецЕсли;

	СтруктураСчетов = Новый Структура;
	СтруктураСчетов.Вставить("СчетУчетаРасчетовСКлиентами");
	СтруктураСчетов.Вставить("СчетУчетаАвансовПолученных");
	СтруктураСчетов.Вставить("СчетУчетаРасчетовСКлиентамиТара");
	СтруктураСчетов.Вставить("СчетУчетаРасчетовПоВознаграждению");
	СтруктураСчетов.Вставить("СчетУчетаРасчетовСПоставщиками");
	СтруктураСчетов.Вставить("СчетУчетаАвансовВыданных");
	СтруктураСчетов.Вставить("СчетУчетаРасчетовСПоставщикамиТара");
	
	СтруктураПараметры = Новый Структура("СтруктураСчетов", СтруктураСчетов);
	ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ФормаГрупповойНастройкиСчетов", СтруктураПараметры,,,,, Новый ОписаниеОповещения("УказатьСчетУчетаРасчетовЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура УказатьСчетУчетаРасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураСчетов = Результат;
    
    Если СтруктураСчетов <> Неопределено Тогда
        ЗаполнитьСчетаУчетаРасчетов(СтруктураСчетов);
        УправлениеЭлементамиФормы();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УказатьСчетУчетаДоходов(Команда)
	
	ТребуетсяНастройкаСчетовУчета = Ложь; 
	Для каждого Строка Из СчетаУчетаДоходов Цикл 
		Если Не ТребуетсяНастройкаСчетовУчета Тогда 
			ТребуетсяНастройкаСчетовУчета = ТребуетсяЗаполнениеСчетовУчетаДоходов(Строка); 
		КонецЕсли; 
	КонецЦикла; 
	
	Если Не ТребуетсяНастройкаСчетовУчета Тогда 
		ПоказатьПредупреждение(,НСтр("ru='Все необходимые счета указаны.';uk='Всі необхідні рахунки вказані.'")); 
		Возврат; 
	КонецЕсли;
	
	СтруктураСчетов = Новый Структура("СчетУчетаДоходов");
	
	СтруктураПараметры = Новый Структура("СтруктураСчетов", СтруктураСчетов);
	ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ФормаГрупповойНастройкиСчетов", СтруктураПараметры,,,,, Новый ОписаниеОповещения("УказатьСчетУчетаДоходовЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСчетУчетаДоходовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураСчетов = Результат;
    
    Если СтруктураСчетов <> Неопределено Тогда
        ЗаполнитьСчетаУчетаДоходов(СтруктураСчетов);
        УправлениеЭлементамиФормы();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УказатьСчетУчетаРасходов(Команда)
	
	ТребуетсяНастройкаСчетовУчета = Ложь; 
	Для каждого Строка Из СчетаУчетаРасходов Цикл 
		Если Не ТребуетсяНастройкаСчетовУчета Тогда 
			ТребуетсяНастройкаСчетовУчета = ТребуетсяЗаполнениеСчетовУчетаРасходов(Строка); 
		КонецЕсли; 
	КонецЦикла; 
	
	Если Не ТребуетсяНастройкаСчетовУчета Тогда 
		ПоказатьПредупреждение(,НСтр("ru='Все необходимые счета указаны.';uk='Всі необхідні рахунки вказані.'")); 
		Возврат; 
	КонецЕсли;
	
	СтруктураСчетов = Новый Структура("СчетУчетаРасходов");
	
	СтруктураПараметры = Новый Структура("СтруктураСчетов", СтруктураСчетов);
	ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ФормаГрупповойНастройкиСчетов", СтруктураПараметры,,,,, Новый ОписаниеОповещения("УказатьСчетУчетаРасходовЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСчетУчетаРасходовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураСчетов = Результат;
    
    Если СтруктураСчетов <> Неопределено Тогда
        ЗаполнитьСчетаУчетаРасходов(СтруктураСчетов);
        УправлениеЭлементамиФормы();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УказатьСчетаУчетаТМЦВЭксплуатации(Команда)
	
	ТребуетсяНастройкаСчетовУчета = Ложь; 
	Для каждого Строка Из СчетаУчетаТМЦВЭксплуатации Цикл 
		Если Не ТребуетсяНастройкаСчетовУчета Тогда 
			ТребуетсяНастройкаСчетовУчета = ТребуетсяЗаполнениеСчетовУчетаТМЦ(Строка); 
		КонецЕсли; 
	КонецЦикла; 
	
	Если Не ТребуетсяНастройкаСчетовУчета Тогда 
		ПоказатьПредупреждение(,НСтр("ru='Все необходимые счета указаны.';uk='Всі необхідні рахунки вказані.'")); 
		Возврат; 
	КонецЕсли;
	
	СтруктураСчетов = Новый Структура(
		"СчетУчета,
		|СчетАмортизации");
	
	ОткрытьФорму(
		"Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ФормаГрупповойНастройкиСчетов",
		Новый Структура("СтруктураСчетов", СтруктураСчетов),,,,, Новый ОписаниеОповещения("УказатьСчетаУчетаТМЦВЭксплуатацииЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСчетаУчетаТМЦВЭксплуатацииЗавершение(Результат, ДополнительныеПараметры) Экспорт

    СтруктураСчетов = Результат;
    
    Если СтруктураСчетов <> Неопределено Тогда
        ЗаполнитьСчетаУчетаТМЦВЭксплуатации(СтруктураСчетов);
        УправлениеЭлементамиФормы();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УказатьСчетУчетаСертификата(Команда)
	
	ТребуетсяНастройкаСчетовУчета = Ложь; 
	Для каждого Строка Из СчетаУчетаПодарочныхСертификатов Цикл 
		Если НЕ ТребуетсяНастройкаСчетовУчета Тогда 
			ТребуетсяНастройкаСчетовУчета = ТребуетсяЗаполнениеСчетовУчетаСертификатов(Строка); 
		КонецЕсли; 
	КонецЦикла; 
	
	Если Не ТребуетсяНастройкаСчетовУчета Тогда 
		ПоказатьПредупреждение(,НСтр("ru='Все необходимые счета указаны.';uk='Всі необхідні рахунки вказані.'")); 
		Возврат; 
	КонецЕсли;
	
	СтруктураСчетов = Новый Структура("СчетУчетаПодарочныхСертификатов");
	
	ОткрытьФорму(
		"Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ФормаГрупповойНастройкиСчетов",
		Новый Структура("СтруктураСчетов", СтруктураСчетов),,,,, Новый ОписаниеОповещения("УказатьСчетУчетаСертификатаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСчетУчетаСертификатаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураСчетов = Результат;
	Если СтруктураСчетов <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаПодарочныхСертификатов) Тогда
			Возврат;
		КонецЕсли;
		
		ВыделенныеСтроки = Элементы.СчетаУчетаПодарочныхСертификатов.ВыделенныеСтроки;
		Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
			
			СтрокаТаблицы = СчетаУчетаПодарочныхСертификатов.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
				И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаПодарочныхСертификатов) Тогда
				СтрокаТаблицы.СчетУчета = СтруктураСчетов.СчетУчетаПодарочныхСертификатов;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
		КонецЦикла;
		Модифицированность = Истина;
		УправлениеЭлементамиФормы();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиКомандОткрытияФормРасшифровокДанных

&НаКлиенте
Функция СтруктураОтбораДанных()
	
	СтрокаТаблицы = Элементы.СчетаУчетаНоменклатуры.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("Организация, Склад, ГруппаФинансовогоУчета",
			СтрокаТаблицы.Организация,
			СтрокаТаблицы.Склад,
			СтрокаТаблицы.ГруппаФинансовогоУчета);
	Иначе
		СтруктураОтбор = Неопределено;
	КонецЕсли;
	
	Возврат СтруктураОтбор;
	
КонецФункции

&НаКлиенте
Процедура ПоказыватьТолькоТребующиеЗаполненияПрочиеОперации(Команда)
	
	ПоказыватьТолькоТребующиеЗаполненияПрочиеОперации = Не ПоказыватьТолькоТребующиеЗаполненияПрочиеОперации;
	Элементы.СчетаУчетаПрочихОперацийПоказыватьТолькоТребующиеЗаполнения.Пометка = ПоказыватьТолькоТребующиеЗаполненияПрочиеОперации;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СчетаУчетаПрочихОпераций, "СчетУчета", , ВидСравненияКомпоновкиДанных.НеЗаполнено,,ПоказыватьТолькоТребующиеЗаполненияПрочиеОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеЕслиНеВыбранаСтрока()
	
	ПоказатьПредупреждение(, НСтр("ru='Выберите строку для расшифровки';uk='Виберіть рядок для розшифровки'"), 10);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоНоменклатуре(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаНоменклатуры.ТекущиеДанные;
	
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("ГруппаФинансовогоУчета", СтрокаТаблицы.ГруппаФинансовогоУчета);
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Справочник.Номенклатура.ФормаСписка", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоДокументамПродажи(Команда)
	
	СтруктураОтбор = СтруктураОтбораДанных();
	Если СтруктураОтбор <> Неопределено Тогда
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументамПродаж", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоДокументамПоступления(Команда)
	
	СтруктураОтбор = СтруктураОтбораДанных();
	Если СтруктураОтбор <> Неопределено Тогда
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументамПоступления", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоСоглашениямСКлиентами(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаРасчетов.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("ГруппаФинансовогоУчета", СтрокаТаблицы.ГруппаФинансовогоУчета);
		СтруктураПараметры = Новый Структура("Отбор, СтруктураБыстрогоОтбора",
			СтруктураОтбор,
			Новый Структура("Менеджер"));
		ОткрытьФорму("Справочник.СоглашенияСКлиентами.ФормаСписка", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоСоглашениямСПоставщиками(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаРасчетов.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("ГруппаФинансовогоУчета", СтрокаТаблицы.ГруппаФинансовогоУчета);
		СтруктураПараметры = Новый Структура("Отбор, СтруктураБыстрогоОтбора",
			СтруктураОтбор,
			Новый Структура("Менеджер"));
		ОткрытьФорму("Справочник.СоглашенияСПоставщиками.ФормаСписка", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоДокументамРасчетовСКлиентами(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаРасчетов.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("Организация, ГруппаФинансовогоУчета", СтрокаТаблицы.Организация, СтрокаТаблицы.ГруппаФинансовогоУчета);
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументамРасчетовСКлиентами", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоДокументамРасчетовСПоставщиками(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаРасчетов.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("Организация, ГруппаФинансовогоУчета", СтрокаТаблицы.Организация, СтрокаТаблицы.ГруппаФинансовогоУчета);
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументамРасчетовСПоставщиками", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоДокументамДоходы(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаДоходов.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("Организация, Подразделение, СтатьяДоходов",
			СтрокаТаблицы.Организация,
			СтрокаТаблицы.Подразделение,
			СтрокаТаблицы.СтатьяДоходов);
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументамОтраженияДоходов", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоДокументамРасходы(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаРасходов.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("Организация, Подразделение, СтатьяРасходов",
			СтрокаТаблицы.Организация,
			СтрокаТаблицы.Подразделение,
			СтрокаТаблицы.СтатьяРасходов);
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументамОтраженияРасходов", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоДокументамРасчетыПоСертификатам(Команда)
	
	СтрокаТаблицы = Элементы.СчетаУчетаПодарочныхСертификатов.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураОтбор = Новый Структура("Организация, ВидСертификата",
			СтрокаТаблицы.Организация,
			СтрокаТаблицы.ВидСертификата);
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.РасшифровкаПоДокументамОтраженияСертификатов", СтруктураПараметры, ЭтаФорма);
	Иначе
		ПоказатьПредупреждениеЕслиНеВыбранаСтрока();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиКомандСозданияНовыхНастроекСчетовУчета

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаНоменклатуры(Команда)
	
	СтруктураПараметры = Новый Структура("ЗначенияЗаполнения", Новый Структура("Организация", Организация));
	ОткрытьФорму("РегистрСведений.ПорядокОтраженияНоменклатуры.ФормаЗаписи", СтруктураПараметры, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СоздатьНастройкуСчетовУчетаНоменклатуры()

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаНоменклатурыПереданнойНаКомиссию(Команда)
	
	СтруктураПараметры = Новый Структура("ЗначенияЗаполнения", Новый Структура("Организация", Организация));
	ОткрытьФорму("РегистрСведений.ПорядокОтраженияНоменклатурыПереданнойНаКомиссию.ФормаЗаписи", СтруктураПараметры, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаРасчетов(Команда)
	
	СтруктураПараметры = Новый Структура("ЗначенияЗаполнения", Новый Структура("Организация", Организация));
	ОткрытьФорму("РегистрСведений.ПорядокОтраженияРасчетовСПартнерами.ФормаЗаписи", СтруктураПараметры, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СоздатьНастройкуСчетовУчетаРасчетов()

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаДоходов(Команда)
	
	СтруктураПараметры = Новый Структура("ЗначенияЗаполнения", Новый Структура("Организация", Организация));
	ОткрытьФорму("РегистрСведений.ПорядокОтраженияДоходов.ФормаЗаписи", СтруктураПараметры, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СоздатьНастройкуСчетовУчетаДоходов()

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаРасходов(Команда)
	
	СтруктураПараметры = Новый Структура("ЗначенияЗаполнения", Новый Структура("Организация", Организация));
	ОткрытьФорму("РегистрСведений.ПорядокОтраженияРасходов.ФормаЗаписи", СтруктураПараметры, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // СоздатьНастройкуСчетовУчетаРасходов()

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаТМЦ(Команда)
	
	СтруктураПараметры = Новый Структура("ЗначенияЗаполнения", Новый Структура("Организация", Организация));
	ОткрытьФорму("РегистрСведений.ПорядокОтраженияТМЦВЭксплуатации.ФормаЗаписи", СтруктураПараметры, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуСчетовУчетаСертификатов(Команда)
	
	СтруктураПараметры = Новый Структура("ЗначенияЗаполнения", Новый Структура("Организация", Организация));
	ОткрытьФорму("РегистрСведений.ПорядокОтраженияПодарочныхСертификатов.ФормаЗаписи", СтруктураПараметры, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область ТМЦВЭксплуатации
	
	//Отметка незаполненного счета учета
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаТМЦВЭксплуатацииСчетУчета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаТМЦВЭксплуатации.ЕстьПередачи");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаТМЦВЭксплуатации.СчетУчета");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	#КонецОбласти
	
	#Область Номенклатура
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыГруппаФинансовогоУчета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.ГруппаФинансовогоУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не указана';uk='Не зазначена'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не указана';uk='Не зазначена'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыСчетУчетаНаСкладе.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.ЕстьСобственныеТовары");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.СчетУчетаНаСкладе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыСчетУчетаВыручкиОтПродаж.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.ЕстьПродажаСобственныхТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.ЕстьПродажаУслуг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.СчетУчетаВыручкиОтПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыСчетУчетаВычетовИзДоходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.ЕстьПродажаСобственныхТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.СчетУчетаВычетовИзДоходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыСчетУчетаСебестоимостиПродаж.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.СчетУчетаСебестоимостиПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.ЕстьПродажаСобственныхТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыСчетУчетаНаСкладе.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.ЕстьСобственныеТовары");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.СчетУчетаНаСкладе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыСчетУчетаВыручкиОтПродаж.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.ЕстьПродажаСобственныхТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.ЕстьПродажаУслуг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.СчетУчетаВыручкиОтПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыСчетУчетаВычетовИзДоходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.ЕстьПродажаСобственныхТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.СчетУчетаВычетовИзДоходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыСчетУчетаСебестоимостиПродаж.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.ЕстьПродажаСобственныхТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатуры.СчетУчетаСебестоимостиПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	#КонецОбласти
	
	#Область НоменклатураПереданнаяНаКомиссию
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюГруппаФинансовогоУчета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатурыПереданнойНаКомиссию.ГруппаФинансовогоУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не указана';uk='Не зазначена'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаВыручкиОтПродаж.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатурыПереданнойНаКомиссию.ЕстьПродажаСобственныхТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатурыПереданнойНаКомиссию.СчетУчетаВыручкиОтПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаСебестоимостиПродаж.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатурыПереданнойНаКомиссию.СчетУчетаСебестоимостиПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатурыПереданнойНаКомиссию.ЕстьПродажаСобственныхТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаВыручкиОтПродаж.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатурыПереданнойНаКомиссию.ЕстьПродажаСобственныхТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатурыПереданнойНаКомиссию.СчетУчетаВыручкиОтПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаПередачиНаКомиссию.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатурыПереданнойНаКомиссию.СчетУчетаПередачиНаКомиссию");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаСебестоимостиПродаж.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатурыПереданнойНаКомиссию.ЕстьПродажаСобственныхТоваров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаНоменклатурыПереданнойНаКомиссию.СчетУчетаСебестоимостиПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	
	//
	
	
	//
	
	
	#КонецОбласти
	
	#Область РасчетыСПартнерами
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовГруппаФинансовогоУчета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ГруппаФинансовогоУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не указана';uk='Не зазначена'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовПоВознаграждению.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыПоКомиссии");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.СчетУчетаРасчетовПоВознаграждению");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСПоставщиками.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыСПоставщиками");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.СчетУчетаРасчетовСПоставщиками");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовСчетУчетаАвансовВыданных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыСПоставщиками");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.СчетУчетаАвансовВыданных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСКлиентами.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыСКлиентами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.СчетУчетаРасчетовСКлиентами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовСчетУчетаАвансовПолученных.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыСКлиентами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыПоДепозитам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.СчетУчетаАвансовПолученных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовПоВознаграждению.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыПоКомиссии");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.СчетУчетаРасчетовПоВознаграждению");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСПоставщиками.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыСПоставщиками");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.СчетУчетаРасчетовСПоставщиками");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовСчетУчетаАвансовВыданных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыСПоставщиками");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.СчетУчетаАвансовВыданных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСКлиентами.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыСКлиентами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.СчетУчетаРасчетовСКлиентами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовСчетУчетаАвансовПолученных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыСКлиентами");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыПоДепозитам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.СчетУчетаАвансовПолученных");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСПоставщикамиТара.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыСПоставщикамиТара");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.СчетУчетаРасчетовСПоставщикамиТара");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСКлиентамиТара.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыСКлиентамиТара");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.СчетУчетаРасчетовСКлиентамиТара");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСПоставщикамиТара.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыСПоставщикамиТара");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.СчетУчетаРасчетовСПоставщикамиТара");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСКлиентамиТара.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.ЕстьРасчетыСКлиентамиТара");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасчетов.СчетУчетаРасчетовСКлиентамиТара");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	#КонецОбласти
	
	#Область Доходы
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаДоходовСчетУчета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаДоходов.ЕстьДоходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаДоходов.СчетУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаДоходовСчетУчета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаДоходов.ЕстьДоходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаДоходов.СчетУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	#КонецОбласти
	
	#Область Расходы
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасходовСчетУчета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасходов.ЕстьРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасходов.СчетУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Не требуется';uk='Не потрібно'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаУчетаРасходовСчетУчета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасходов.ЕстьРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаУчетаРасходов.СчетУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	#КонецОбласти
	
	#Область ОформлениеСчетовПоУмолчанию
	
	ТаблицыФормы = Новый Структура;
	
	СчетаДоходов = Новый Массив;
	СчетаДоходов.Добавить("СчетУчета");
	ТаблицыФормы.Вставить("СчетаУчетаДоходов", СчетаДоходов);
	
	СчетаНоменклатуры = Новый Массив;
	СчетаНоменклатуры.Добавить("СчетУчетаНаСкладе");
	СчетаНоменклатуры.Добавить("СчетУчетаВыручкиОтПродаж");
	СчетаНоменклатуры.Добавить("СчетУчетаВычетовИзДоходов");
	СчетаНоменклатуры.Добавить("СчетУчетаСебестоимостиПродаж");
	СчетаНоменклатуры.Добавить("СтатьяДоходовРегл");
	СчетаНоменклатуры.Добавить("СтатьяЗатратРегл");
	ТаблицыФормы.Вставить("СчетаУчетаНоменклатуры", СчетаНоменклатуры);
	
	СчетаНоменклатурыПереданнойНаКомиссию = Новый Массив;
	СчетаНоменклатурыПереданнойНаКомиссию.Добавить("СчетУчетаПередачиНаКомиссию");
	СчетаНоменклатурыПереданнойНаКомиссию.Добавить("СчетУчетаВыручкиОтПродаж");
	СчетаНоменклатурыПереданнойНаКомиссию.Добавить("СчетУчетаВычетовИзДоходов");	
	СчетаНоменклатурыПереданнойНаКомиссию.Добавить("СчетУчетаСебестоимостиПродаж");
	СчетаНоменклатурыПереданнойНаКомиссию.Добавить("СтатьяДоходовРегл");
	СчетаНоменклатурыПереданнойНаКомиссию.Добавить("СтатьяЗатратРегл");
	ТаблицыФормы.Вставить("СчетаУчетаНоменклатурыПереданнойНаКомиссию", СчетаНоменклатурыПереданнойНаКомиссию);
	
	СчетаРасходов = Новый Массив;
	СчетаРасходов.Добавить("СчетУчета");
	ТаблицыФормы.Вставить("СчетаУчетаРасходов", СчетаРасходов);
	
	СчетаРасчетов = Новый Массив;
	СчетаРасчетов.Добавить("СчетУчетаРасчетовСКлиентами");
	СчетаРасчетов.Добавить("СчетУчетаАвансовПолученных");
	СчетаРасчетов.Добавить("СчетУчетаРасчетовПоВознаграждению");
	СчетаРасчетов.Добавить("СчетУчетаРасчетовСПоставщиками");
	СчетаРасчетов.Добавить("СчетУчетаАвансовВыданных");
	СчетаРасчетов.Добавить("СчетУчетаРасчетовСКлиентамиТара");
	СчетаРасчетов.Добавить("СчетУчетаРасчетовСПоставщикамиТара");
	ТаблицыФормы.Вставить("СчетаУчетаРасчетов", СчетаРасчетов);
	
	СчетаТМЦВЭксплуатации = Новый Массив;
	СчетаТМЦВЭксплуатации.Добавить("СчетУчета");
	СчетаТМЦВЭксплуатации.Добавить("СчетАмортизации");
	ТаблицыФормы.Вставить("СчетаУчетаТМЦВЭксплуатации", СчетаТМЦВЭксплуатации);
	
	СчетаСертификатов = Новый Массив;
	СчетаСертификатов.Добавить("СчетУчета");
	ТаблицыФормы.Вставить("СчетаУчетаПодарочныхСертификатов", СчетаСертификатов);
	
	Для каждого ТаблицаФормы Из ТаблицыФормы Цикл
		ИмяТаблицы = ТаблицаФормы.Ключ;
		Для каждого СчетУчета Из ТаблицаФормы.Значение Цикл
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТаблицы + СчетУчета].Имя);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + СчетУчета + "ПоУмолчанию");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстИнформационнойНадписи);
		КонецЦикла;
	КонецЦикла;
	
	#КонецОбласти
	
КонецПроцедуры

#Область ЗаполнениеДоступныхСчетов

&НаСервере
Процедура ДоступныеСчетаУчетаНоменклатуры()
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаНоменклатуры();
	
	// Счета учета товаров на складе.
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаУчетаНаСкладе)));
	Элементы.СчетаУчетаНоменклатурыСчетУчетаНаСкладе.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета товаров в пути и передачи на комиссию.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаУчетаПередачиНаКомиссию)));
	Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаПередачиНаКомиссию.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета выручки от продаж.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаУчетаВыручкиОтПродаж)));
	Элементы.СчетаУчетаНоменклатурыСчетУчетаВыручкиОтПродаж.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаВыручкиОтПродаж.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаУчетаВычетовИзДоходов)));
	Элементы.СчетаУчетаНоменклатурыСчетУчетаВычетовИзДоходов.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаВычетовИзДоходов.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета себестоимости от продаж.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаУчетаСебестоимостиПродаж)));
	Элементы.СчетаУчетаНоменклатурыСчетУчетаСебестоимостиПродаж.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаСебестоимостиПродаж.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Статьи расходов только те, у которых стаят галочки "Себестоимости реализации"
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.СебестоимостьРеализации", Истина));
	Элементы.СчетаУчетаНоменклатурыСтатьяЗатратРегл.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСтатьяЗатратРегл.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	
КонецПроцедуры

&НаСервере
Процедура ДоступныеСчетаУчетаРасчетов()
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаРасчетов();
	
	// Счета учета расчетов с поставщиками.
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСПоставщиками)));
	Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСПоставщиками.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСПоставщикамиТара.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по авансам выданным.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовПоАвансаВыданным)));
	Элементы.СчетаУчетаРасчетовСчетУчетаАвансовВыданных.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов с клиентами.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовСКлиентами)));
	Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСКлиентами.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСКлиентамиТара.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по авансам полученным.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовПоАвансаПолученным)));
	Элементы.СчетаУчетаРасчетовСчетУчетаАвансовПолученных.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по комиссионному вознаграждению.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовПоКомиссии)));
	Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовПоВознаграждению.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Счета учета расчетов по подарочным сертификатам.
	МассивПараметров.Очистить();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасчетовПоАвансаПолученным)));
	Элементы.СчетаУчетаПодарочныхСертификатовСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

&НаСервере
Процедура ДоступныеСчетаУчетаПрочихДоходов()
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаПрочихДоходов();
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаПрочихДоходов)));
	Элементы.СчетаУчетаДоходовСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ДоступныеСчетаУчетаРасходов()
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаРасходов();
	
	ДоступныеСчетаУчетаРасходов = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРасходов);
	ДоступныеСчетаУчетаПрочихРасходов = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаПрочихРасходов);
	ДоступныеСчетаУчетаОС = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаОС);
	ДоступныеСчетаУчетаРемонтовОС = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаРемонтаОС);
	ДоступныеСчетаУчетаНМА = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаНМА);
	ДоступныеСчетаСчетаСебестоимостиРеализации = Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаСебестоимостиРеализации);
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеСчетаУчетаРасходов));
	Элементы.СчетаУчетаРасходовСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ДоступныеСчетаУчетаТМЦ()
	
	СтруктураСчетовУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаТМЦВЭксплуатации();
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаУчета)));
	Элементы.СчетаУчетаТМЦВЭксплуатацииСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(СтруктураСчетовУчета.СчетаАмортизации)));
	Элементы.СчетаУчетаТМЦВЭксплуатацииСчетАмортизации.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораСчетовРасходов(ВидЦенности = Неопределено, СебестоимостьРеализации = Ложь, РасходыНаРемонтОС = Ложь)
	
	ОС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОС");
	ОбС = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.ОбъектыНезавершенногоСтроительства");
	НМА = ПредопределенноеЗначение("Перечисление.ВидыЦенностей.НМА");
	
	ПараметрыВыбора = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ВидЦенности) Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеСчетаУчетаРасходов));
	ИначеЕсли ВидЦенности = ОС Или ВидЦенности = ОбС Тогда
		Если РасходыНаРемонтОС Тогда
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеСчетаУчетаРемонтовОС));	
		Иначе
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеСчетаУчетаОС));	
		КонецЕсли; 
	ИначеЕсли ВидЦенности = НМА Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеСчетаУчетаНМА));
	Иначе
		Если СебестоимостьРеализации Тогда
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеСчетаСчетаСебестоимостиРеализации));
		Иначе 
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеСчетаУчетаПрочихРасходов));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СчетаУчетаРасходовСчетУчета.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ЗаполнитьСчетаУчетаНоменклатуры(СтруктураСчетов)
	
	ВыделенныеСтроки = Элементы.СчетаУчетаНоменклатуры.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
				
		СтрокаТаблицы = СчетаУчетаНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтроки);
	
		Если СтрокаТаблицы.ЕстьСобственныеТовары
		 И Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНаСкладе)
		 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаНаСкладе) Тогда
			СтрокаТаблицы.СчетУчетаНаСкладе = СтруктураСчетов.СчетУчетаНаСкладе;
			СтрокаТаблицы.ДанныеИзменены = Истина;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЕстьПродажаСобственныхТоваров ИЛИ СтрокаТаблицы.ЕстьПродажаУслуг Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаВыручкиОтПродаж)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаВыручкиОтПродаж) Тогда
				СтрокаТаблицы.СчетУчетаВыручкиОтПродаж = СтруктураСчетов.СчетУчетаВыручкиОтПродаж;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаВычетовИзДоходов)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаВычетовИзДоходов) Тогда
				СтрокаТаблицы.СчетУчетаВычетовИзДоходов = СтруктураСчетов.СчетУчетаВычетовИзДоходов;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаСебестоимостиПродаж)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаСебестоимостиПродаж) Тогда
				СтрокаТаблицы.СчетУчетаСебестоимостиПродаж = СтруктураСчетов.СчетУчетаСебестоимостиПродаж;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаНоменклатурыПереданнойНаКомиссию(СтруктураСчетов)
	
	ВыделенныеСтроки = Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссию.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
				
		СтрокаТаблицы = СчетаУчетаНоменклатурыПереданнойНаКомиссию.НайтиПоИдентификатору(ИдентификаторСтроки);
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаПередачиНаКомиссию)
		 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаПередачиНаКомиссию) Тогда
			СтрокаТаблицы.СчетУчетаПередачиНаКомиссию = СтруктураСчетов.СчетУчетаПередачиНаКомиссию;
			СтрокаТаблицы.ДанныеИзменены = Истина;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЕстьПродажаСобственныхТоваров Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаВыручкиОтПродаж)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаВыручкиОтПродаж) Тогда
				СтрокаТаблицы.СчетУчетаВыручкиОтПродаж = СтруктураСчетов.СчетУчетаВыручкиОтПродаж;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаВычетовИзДоходов)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаВычетовИзДоходов) Тогда
				СтрокаТаблицы.СчетУчетаВычетовИзДоходов = СтруктураСчетов.СчетУчетаВычетовИзДоходов;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаСебестоимостиПродаж)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаСебестоимостиПродаж) Тогда
				СтрокаТаблицы.СчетУчетаСебестоимостиПродаж = СтруктураСчетов.СчетУчетаСебестоимостиПродаж;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаРасчетов(СтруктураСчетов)
	
	ВыделенныеСтроки = Элементы.СчетаУчетаРасчетов.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
				
		СтрокаТаблицы = СчетаУчетаРасчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
		Если СтрокаТаблицы.ЕстьРасчетыСКлиентами Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовСКлиентами)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаРасчетовСКлиентами) Тогда
				СтрокаТаблицы.СчетУчетаРасчетовСКлиентами = СтруктураСчетов.СчетУчетаРасчетовСКлиентами;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаАвансовПолученных)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаАвансовПолученных) Тогда
				СтрокаТаблицы.СчетУчетаАвансовПолученных = СтруктураСчетов.СчетУчетаАвансовПолученных;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.ЕстьРасчетыСКлиентамиТара Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовСКлиентамиТара)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаРасчетовСКлиентамиТара) Тогда
				СтрокаТаблицы.СчетУчетаРасчетовСКлиентамиТара = СтруктураСчетов.СчетУчетаРасчетовСКлиентамиТара;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.ЕстьРасчетыСПоставщиками Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовСПоставщиками)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаРасчетовСПоставщиками) Тогда
				СтрокаТаблицы.СчетУчетаРасчетовСПоставщиками = СтруктураСчетов.СчетУчетаРасчетовСПоставщиками;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаАвансовВыданных)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаАвансовВыданных) Тогда
				СтрокаТаблицы.СчетУчетаАвансовВыданных = СтруктураСчетов.СчетУчетаАвансовВыданных;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.ЕстьРасчетыСПоставщикамиТара Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовСПоставщикамиТара)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаРасчетовСПоставщикамиТара) Тогда
				СтрокаТаблицы.СчетУчетаРасчетовСПоставщикамиТара = СтруктураСчетов.СчетУчетаРасчетовСПоставщикамиТара;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.ЕстьРасчетыПоКомиссии Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовПоВознаграждению)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаРасчетовПоВознаграждению) Тогда
				СтрокаТаблицы.СчетУчетаРасчетовПоВознаграждению = СтруктураСчетов.СчетУчетаРасчетовПоВознаграждению;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаДоходов(СтруктураСчетов)
	
	ВыделенныеСтроки = Элементы.СчетаУчетаДоходов.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
				
		СтрокаТаблицы = СчетаУчетаДоходов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
		Если СтрокаТаблицы.ЕстьДоходы Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаДоходов) Тогда
				СтрокаТаблицы.СчетУчета = СтруктураСчетов.СчетУчетаДоходов;
				СтрокаТаблицы.ДанныеИзменены = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаРасходов(СтруктураСчетов)
	
	ВыделенныеСтроки = Элементы.СчетаУчетаРасходов.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = СчетаУчетаРасходов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
		Если СтрокаТаблицы.ЕстьРасходы Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
			 И ЗначениеЗаполнено(СтруктураСчетов.СчетУчетаРасходов) Тогда
				УстановитьДоступныйСчет(СтрокаТаблицы, СтруктураСчетов.СчетУчетаРасходов);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаТМЦВЭксплуатации(СтруктураСчетов)
	
	Если Не ЗначениеЗаполнено(СтруктураСчетов.СчетУчета)
		И Не ЗначениеЗаполнено(СтруктураСчетов.СчетАмортизации) Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.СчетаУчетаТМЦВЭксплуатации.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = СчетаУчетаТМЦВЭксплуатации.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета)
			И ЗначениеЗаполнено(СтруктураСчетов.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СтруктураСчетов.СчетУчета;
			СтрокаТаблицы.ДанныеИзменены = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетАмортизации)
			И ЗначениеЗаполнено(СтруктураСчетов.СчетАмортизации) Тогда
			СтрокаТаблицы.СчетАмортизации = СтруктураСчетов.СчетАмортизации;
			СтрокаТаблицы.ДанныеИзменены = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступныйСчет(СтрокаТаблицы, НовыйСчет)
	
	ОС = Перечисления.ВидыЦенностей.ОС;
	ОбС = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства;
	НМА = Перечисления.ВидыЦенностей.НМА;
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидЦенности) Тогда
		МассивДоступныхСчетов = ДоступныеСчетаУчетаРасходов;
		
	ИначеЕсли СтрокаТаблицы.ВидЦенности = ОС Или СтрокаТаблицы.ВидЦенности = ОбС Тогда
		МассивДоступныхСчетов = ДоступныеСчетаУчетаОС;
		
	ИначеЕсли СтрокаТаблицы.ВидЦенности = НМА Тогда
		МассивДоступныхСчетов = ДоступныеСчетаУчетаНМА;
		
	Иначе
		МассивДоступныхСчетов = ДоступныеСчетаУчетаПрочихРасходов;
	КонецЕсли;
	
	Если Не МассивДоступныхСчетов.Найти(НовыйСчет) = Неопределено Тогда
		СтрокаТаблицы.СчетУчета = НовыйСчет;
		СтрокаТаблицы.ДанныеИзменены = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьПраваЧтенияИзменения()
	
	Регистры = Новый Массив;
	Регистры.Добавить("ПорядокОтраженияДоходов");
	Регистры.Добавить("ПорядокОтраженияНоменклатуры");
	Регистры.Добавить("ПорядокОтраженияНоменклатурыПереданнойНаКомиссию");
	Регистры.Добавить("ПорядокОтраженияПодарочныхСертификатов");
	Регистры.Добавить("ПорядокОтраженияПрочихОпераций");
	Регистры.Добавить("ПорядокОтраженияРасходов");
	Регистры.Добавить("ПорядокОтраженияРасчетовСПартнерами");
	Регистры.Добавить("ПорядокОтраженияТМЦВЭксплуатации");
	
	ПравоЧтение = Новый Структура;
	ПравоИзменение = Новый Структура;
	
	Для Каждого Регистр Из Регистры Цикл
		Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений[Регистр]) Тогда
			ПравоЧтение.Вставить(Регистр, Истина);
			Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений[Регистр]) Тогда
				ПравоИзменение.Вставить(Регистр, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.БанковскиеСчетаОрганизаций)
		И ПравоДоступа("Чтение", Метаданные.Справочники.Кассы) Тогда
		
		ПравоЧтение.Вставить("ПорядокОтраженияДенежныхСредств", Истина);
		
		Если ПравоДоступа("Изменение", Метаданные.Справочники.БанковскиеСчетаОрганизаций)
			И ПравоДоступа("Изменение", Метаданные.Справочники.Кассы) Тогда
		
			ПравоИзменение.Вставить("ПорядокОтраженияДенежныхСредств", Истина);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЧитаемыхРегистров = Новый ФиксированнаяСтруктура(ПравоЧтение);
	СтруктураИзменяемыхРегистров = Новый ФиксированнаяСтруктура(ПравоИзменение);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	
	Элементы.СтраницаСчетаУчетаНоменклатуры.Видимость = СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияНоменклатуры");
	Элементы.СтраницаСчетаУчетаНоменклатурыПереданнойНаКомиссию.Видимость = СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияНоменклатурыПереданнойНаКомиссию");
	Элементы.СтраницаТМЦВЭксплуатации.Видимость = СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияТМЦВЭксплуатации");
	Элементы.СтраницаСчетаУчетаДенежныхСредств.Видимость = СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияДенежныхСредств");
	Элементы.СтраницаСчетаУчетаПодарочныхСертификатов.Видимость = СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияПодарочныхСертификатов");
	Элементы.СтраницаСчетаУчетаРасчетов.Видимость = СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияРасчетовСПартнерами");
	Элементы.СтраницаСчетаУчетаДоходов.Видимость = СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияДоходов");
	Элементы.СтраницаСчетаУчетаРасходов.Видимость = СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияРасходов");
	Элементы.СтраницаСчетаУчетаПрочихОпераций.Видимость = СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияПрочихОпераций");
	
	Элементы.СтраницаСчетаУчетаНоменклатуры.ТолькоПросмотр = Не СтруктураИзменяемыхРегистров.Свойство("ПорядокОтраженияНоменклатуры");
	Элементы.СтраницаСчетаУчетаНоменклатурыПереданнойНаКомиссию.ТолькоПросмотр = Не СтруктураИзменяемыхРегистров.Свойство("ПорядокОтраженияНоменклатурыПереданнойНаКомиссию");
	Элементы.СтраницаТМЦВЭксплуатации.ТолькоПросмотр = Не СтруктураИзменяемыхРегистров.Свойство("ПорядокОтраженияТМЦВЭксплуатации");
	Элементы.СтраницаСчетаУчетаДенежныхСредств.ТолькоПросмотр = Не СтруктураИзменяемыхРегистров.Свойство("ПорядокОтраженияДенежныхСредств");
	Элементы.СтраницаСчетаУчетаПодарочныхСертификатов.ТолькоПросмотр = Не СтруктураИзменяемыхРегистров.Свойство("ПорядокОтраженияПодарочныхСертификатов");
	Элементы.СтраницаСчетаУчетаРасчетов.ТолькоПросмотр = Не СтруктураИзменяемыхРегистров.Свойство("ПорядокОтраженияРасчетовСПартнерами");
	Элементы.СтраницаСчетаУчетаДоходов.ТолькоПросмотр = Не СтруктураИзменяемыхРегистров.Свойство("ПорядокОтраженияДоходов");
	Элементы.СтраницаСчетаУчетаРасходов.ТолькоПросмотр = Не СтруктураИзменяемыхРегистров.Свойство("ПорядокОтраженияРасходов");
	Элементы.СтраницаСчетаУчетаПрочихОпераций.ТолькоПросмотр = Не СтруктураИзменяемыхРегистров.Свойство("ПорядокОтраженияПрочихОпераций");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	СчетУчетаПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

&НаСервере
Функция ОрганизацииДляНастройки()
	
	МассивОрганизаций = Новый Массив;
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивОрганизаций.Добавить(Организация);
	Иначе
		МассивОрганизаций = Элементы.Организация.СписокВыбора.ВыгрузитьЗначения();
	КонецЕсли;
	
	Возврат МассивОрганизаций;
	
КонецФункции

Процедура ЗаполнитьСписокВыбораОрганизации(Ограничение)
	
	СписокВыбора = Элементы.Организация.СписокВыбора;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСправочника.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеСправочника.Ссылка) КАК Представление
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|ГДЕ
	|	(&ВсеОрганизации ИЛИ ДанныеСправочника.Ссылка В (&СписокОрганизаций))
	|	И ДанныеСправочника.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|";
	
	Запрос.УстановитьПараметр("ВсеОрганизации",    НЕ ЗначениеЗаполнено(Ограничение));
	Запрос.УстановитьПараметр("СписокОрганизаций", Ограничение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПериодКОтражениюВРеглУчете(МассивОрганизаций, Период)
	
	Период = Обработки.НастройкаОтраженияДокументовВРеглУчете.ПериодКОтражениюВРеглУчете(МассивОрганизаций, ДатаОкончанияПериода);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеСчетовУчета(ТребуетсяЗаполнитьСчетаУчета, ЗаголовокСчетаУчета)
	
	Если ТребуетсяЗаполнитьСчетаУчета Тогда
		ЗаголовокСчетаУчета = НСтр("ru='Требуется заполнить';uk='Потрібно заповнити'");
	Иначе
		ЗаголовокСчетаУчета = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСчетовУчетаНоменклатуры(МассивОрганизаций = Неопределено, Период = Неопределено)
	
	Если Не СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивОрганизаций = Неопределено Тогда
		МассивОрганизаций = ОрганизацииДляНастройки();
	КонецЕсли;
	Если Период = Неопределено Тогда
		ПериодКОтражениюВРеглУчете(МассивОрганизаций, Период);
	КонецЕсли;
	
	СчетаУчетаНоменклатуры.Очистить();
	
	РезультатЗапроса = РегистрыСведений.ПорядокОтраженияНоменклатуры.РезультатЗапросаПоНастройкамОтраженияВУчете(
		МассивОрганизаций,
		Период);
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СчетаУчетаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Не ТребуетсяЗаполнитьСчетаУчета Тогда
		
			ТребуетсяЗаполнитьСчетаУчета = ТребуетсяЗаполнениеСчетовУчетаДляНоменклатуры(НоваяСтрока)
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСостояниеСчетовУчета(
		ТребуетсяЗаполнитьСчетаУчета,
		ЗаголовокСчетаУчетаНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСчетовУчетаНоменклатурыПереданнойНаКомиссию(МассивОрганизаций = Неопределено, Период = Неопределено)
	
	Если Не СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияНоменклатурыПереданнойНаКомиссию") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивОрганизаций = Неопределено Тогда
		МассивОрганизаций = ОрганизацииДляНастройки();
	КонецЕсли;
	Если Период = Неопределено Тогда
		ПериодКОтражениюВРеглУчете(МассивОрганизаций, Период);
	КонецЕсли;
	
	СчетаУчетаНоменклатурыПереданнойНаКомиссию.Очистить();
	
	РезультатЗапроса = РегистрыСведений.ПорядокОтраженияНоменклатурыПереданнойНаКомиссию.РезультатЗапросаПоНастройкамОтраженияВУчете(
		МассивОрганизаций,
		Период);
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СчетаУчетаНоменклатурыПереданнойНаКомиссию.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Не ТребуетсяЗаполнитьСчетаУчета Тогда
			
			ТребуетсяЗаполнитьСчетаУчета = ТребуетсяЗаполнениеСчетовУчетаДляНоменклатурыПереданнойНаКомиссию(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСостояниеСчетовУчета(
		ТребуетсяЗаполнитьСчетаУчета,
		ЗаголовокСчетаУчетаНоменклатурыПереданнойНаКомиссию);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСчетовУчетаРасчетов(МассивОрганизаций = Неопределено, Период = Неопределено)
	
	Если Не СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияРасчетовСПартнерами") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивОрганизаций = Неопределено Тогда
		МассивОрганизаций = ОрганизацииДляНастройки();
	КонецЕсли;
	Если Период = Неопределено Тогда
		ПериодКОтражениюВРеглУчете(МассивОрганизаций, Период);
	КонецЕсли;
	
	СчетаУчетаРасчетов.Очистить();
	
	РезультатЗапроса = РегистрыСведений.ПорядокОтраженияРасчетовСПартнерами.РезультатЗапросаПоНастройкамОтраженияВУчете(
		МассивОрганизаций,
		Период);
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СчетаУчетаРасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Не ТребуетсяЗаполнитьСчетаУчета Тогда
			ТребуетсяЗаполнитьСчетаУчета = ТребуетсяЗаполнениеСчетовУчетаРасчетов(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСостояниеСчетовУчета(
		ТребуетсяЗаполнитьСчетаУчета,
		ЗаголовокСчетаУчетаРасчетов);
	
КонецПроцедуры // ЗаполнитьТаблицуСчетовУчетаРасчетов()

&НаСервере
Процедура ЗаполнитьТаблицуСчетовУчетаДоходов(МассивОрганизаций = Неопределено, Период = Неопределено)
	
	Если Не СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияДоходов") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивОрганизаций = Неопределено Тогда
		МассивОрганизаций = ОрганизацииДляНастройки();
	КонецЕсли;
	Если Период = Неопределено Тогда
		ПериодКОтражениюВРеглУчете(МассивОрганизаций, Период);
	КонецЕсли;
	
	СчетаУчетаДоходов.Очистить();
	
	РезультатЗапроса = РегистрыСведений.ПорядокОтраженияДоходов.РезультатЗапросаПоНастройкамОтраженияВУчете(
		МассивОрганизаций,
		Период);
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СчетаУчетаДоходов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Не ТребуетсяЗаполнитьСчетаУчета Тогда
			
			ТребуетсяЗаполнитьСчетаУчета = ТребуетсяЗаполнениеСчетовУчетаДоходов(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСостояниеСчетовУчета(
		ТребуетсяЗаполнитьСчетаУчета,
		ЗаголовокСчетаУчетаДоходов);
	
КонецПроцедуры // ЗаполнитьТаблицуСчетовУчетаДоходов()

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоДокументовПрописью(КоличествоДокументов)
	
	КоличествоПрописью = ЧислоПрописью(
		КоличествоДокументов,
		"Л = ru_RU; НП = Истина; НД = Ложь; ДП = Ложь;",
		НСтр("ru='документ,документа,документов,м,,,,,0';uk='документ,документа,документів,м,,,,,0'"));
	Поз = СтрНайти(КоличествоПрописью, "документ");
	Если Поз <> 0 Тогда
		КоличествоПрописью = Сред(КоличествоПрописью, Поз);
	КонецЕсли;
	КоличествоПрописью = Строка(КоличествоДокументов) + " " + НРег(КоличествоПрописью);
	
	Возврат КоличествоПрописью;
	
КонецФункции // ЧислоДокументовПрописью()

&НаСервере
Процедура ЗаполнитьТаблицуСчетовУчетаРасходов(МассивОрганизаций = Неопределено, Период = Неопределено)
	
	Если Не СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияРасходов") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивОрганизаций = Неопределено Тогда
		МассивОрганизаций = ОрганизацииДляНастройки();
	КонецЕсли;
	Если Период = Неопределено Тогда
		ПериодКОтражениюВРеглУчете(МассивОрганизаций, Период);
	КонецЕсли;
	
	СчетаУчетаРасходов.Очистить();
	
	РезультатЗапроса = РегистрыСведений.ПорядокОтраженияРасходов.РезультатЗапросаПоНастройкамОтраженияВУчете(
		МассивОрганизаций,
		Период);
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СчетаУчетаРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Не ТребуетсяЗаполнитьСчетаУчета Тогда 
			ТребуетсяЗаполнитьСчетаУчета = ТребуетсяЗаполнениеСчетовУчетаРасходов(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСостояниеСчетовУчета(
		ТребуетсяЗаполнитьСчетаУчета,
		ЗаголовокСчетаУчетаРасходов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСчетовУчетаТМЦ(МассивОрганизаций = Неопределено, Период = Неопределено)
	
	Если Не СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияТМЦВЭксплуатации") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивОрганизаций = Неопределено Тогда
		МассивОрганизаций = ОрганизацииДляНастройки();
	КонецЕсли;
	Если Период = Неопределено Тогда
		ПериодКОтражениюВРеглУчете(МассивОрганизаций, Период);
	КонецЕсли;
	
	СчетаУчетаТМЦВЭксплуатации.Очистить();
	
	РезультатЗапроса = РегистрыСведений.ПорядокОтраженияТМЦВЭксплуатации.РезультатЗапросаПоНастройкамОтраженияВУчете(
		МассивОрганизаций,
		Период);
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СчетаУчетаТМЦВЭксплуатации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Не ТребуетсяЗаполнитьСчетаУчета Тогда
			ТребуетсяЗаполнитьСчетаУчета = ТребуетсяЗаполнениеСчетовУчетаТМЦ(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСостояниеСчетовУчета(
		ТребуетсяЗаполнитьСчетаУчета,
		ЗаголовокСчетаУчетаТМЦ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСчетовУчетаДенежныхСредств(МассивОрганизаций = Неопределено, Период = Неопределено)
	
	Если Не СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияДенежныхСредств") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивОрганизаций = Неопределено Тогда
		МассивОрганизаций = ОрганизацииДляНастройки();
	КонецЕсли;
	
	ТребуетсяЗаполнитьСчетаУчета = 
		Обработки.НастройкаОтраженияДокументовВРеглУчете.ТребуетсяНастройкаСчетовУчетаДенежныхСредств(МассивОрганизаций);
	
	УстановитьСостояниеСчетовУчета(
		ТребуетсяЗаполнитьСчетаУчета,
		ЗаголовокСчетаУчетаДенежныхСредств);
	
	УстановитьОтборДинамическогоСпискаПоОрганизации(СчетаУчетаДенежныхСредств);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСчетовУчетаСертификатов(МассивОрганизаций = Неопределено, Период = Неопределено)
	
	Если Не СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияПодарочныхСертификатов") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивОрганизаций = Неопределено Тогда
		МассивОрганизаций = ОрганизацииДляНастройки();
	КонецЕсли;
	Если Период = Неопределено Тогда
		ПериодКОтражениюВРеглУчете(МассивОрганизаций, Период);
	КонецЕсли;
	
	СчетаУчетаПодарочныхСертификатов.Очистить();
	
	РезультатЗапроса = РегистрыСведений.ПорядокОтраженияПодарочныхСертификатов.РезультатЗапросаПоНастройкамОтраженияВУчете(
		МассивОрганизаций,
		Период);
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СчетаУчетаПодарочныхСертификатов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Не ТребуетсяЗаполнитьСчетаУчета Тогда
			ТребуетсяЗаполнитьСчетаУчета = ТребуетсяЗаполнениеСчетовУчетаСертификатов(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСостояниеСчетовУчета(
		ТребуетсяЗаполнитьСчетаУчета,
		ЗаголовокСчетаУчетаСертификата);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеСчетовУчетаПрочихОпераций(МассивОрганизаций = Неопределено, Период = Неопределено)
	
	Если Не СтруктураЧитаемыхРегистров.Свойство("ПорядокОтраженияПрочихОпераций") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивОрганизаций = Неопределено Тогда
		МассивОрганизаций = ОрганизацииДляНастройки();
	КонецЕсли;
	Если Период = Неопределено Тогда
		ПериодКОтражениюВРеглУчете(МассивОрганизаций, Период);
	КонецЕсли;
	
	РезультатЗапроса = РегистрыСведений.ПорядокОтраженияПрочихОпераций.РезультатЗапросаПоНастройкамОтраженияВУчете(
		МассивОрганизаций,
		Период);
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.СчетУчета) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
		
		Если ТребуетсяЗаполнитьСчетаУчета Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСостояниеСчетовУчета(
		ТребуетсяЗаполнитьСчетаУчета,
		ЗаголовокСчетаУчетаПрочихОпераций);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СчетаУчетаПрочихОпераций, "Дата", ДатаОкончанияПериода.Дата, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,,ЗначениеЗаполнено(ДатаОкончанияПериода.Дата));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СчетаУчетаПрочихОпераций, "СчетУчета", , ВидСравненияКомпоновкиДанных.НеЗаполнено,,ПоказыватьТолькоТребующиеЗаполненияПрочиеОперации);
	УстановитьОтборДинамическогоСпискаПоОрганизации(СчетаУчетаПрочихОпераций);
	
	Элементы.СчетаУчетаПрочихОпераций.Видимость = ТребуетсяЗаполнитьСчетаУчета;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическогоСпискаПоОрганизации(Список)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "Организация", Элементы.Организация.СписокВыбора, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНастройки()
	
	МассивОрганизаций = Неопределено;
	Период = Неопределено;
	
	ЗаполнитьТаблицуСчетовУчетаНоменклатуры(МассивОрганизаций, Период);
	ЗаполнитьТаблицуСчетовУчетаНоменклатурыПереданнойНаКомиссию(МассивОрганизаций, Период);
	ЗаполнитьТаблицуСчетовУчетаРасчетов(МассивОрганизаций, Период);
	ЗаполнитьТаблицуСчетовУчетаДоходов(МассивОрганизаций, Период);
	ЗаполнитьТаблицуСчетовУчетаРасходов(МассивОрганизаций, Период);
	ЗаполнитьТаблицуСчетовУчетаТМЦ(МассивОрганизаций, Период);
	ЗаполнитьТаблицуСчетовУчетаДенежныхСредств(МассивОрганизаций, Период);
	ЗаполнитьТаблицуСчетовУчетаСертификатов(МассивОрганизаций, Период);
	
	ПолучитьСостояниеСчетовУчетаПрочихОпераций(МассивОрганизаций, Период);
	
КонецПроцедуры // ЗаполнитьТаблицуНастройки()

&НаКлиенте
Процедура УправлениеЭлементамиФормы()
	
	Элементы.СохранитьНастройку.Доступность = Модифицированность;
	Элементы.ПрименитьНастройку.Доступность = Модифицированность;
	
КонецПроцедуры // УправлениеЭлементамиФормы()

#КонецОбласти

#Область ПроцедурыУстановкиНеобходимостиПереформированияПроводок

&НаСервере
Процедура ЗаполнитьТаблицуКПрименениюНастроки()
	
	ТаблицаДокументов.Очистить();
	
	РегистрыСведений.ПорядокОтраженияНоменклатуры.НайтиДокументыСоответствующиеНастройкам(
		СчетаУчетаНоменклатуры,
		ДатаОкончанияПериода.Дата,
		ТаблицаДокументов);
	РегистрыСведений.ПорядокОтраженияНоменклатурыПереданнойНаКомиссию.НайтиДокументыСоответствующиеНастройкам(
		СчетаУчетаНоменклатурыПереданнойНаКомиссию,
		ДатаОкончанияПериода.Дата,
		ТаблицаДокументов);
	РегистрыСведений.ПорядокОтраженияРасчетовСПартнерами.НайтиДокументыСоответствующиеНастройкам(
		СчетаУчетаРасчетов,
		ДатаОкончанияПериода.Дата,
		ТаблицаДокументов);
	РегистрыСведений.ПорядокОтраженияДоходов.НайтиДокументыСоответствующиеНастройкам(
		СчетаУчетаДоходов,
		ДатаОкончанияПериода.Дата,
		ТаблицаДокументов);
	РегистрыСведений.ПорядокОтраженияРасходов.НайтиДокументыСоответствующиеНастройкам(
		СчетаУчетаРасходов,
		ДатаОкончанияПериода.Дата,
		ТаблицаДокументов);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСчетаУчетаНоменклатуры()
	
	МассивСтрок = СчетаУчетаНоменклатуры.НайтиСтроки(Новый Структура("ДанныеИзменены", Истина));
	
	СчетаУчета = Новый Структура;
	СчетаУчета.Вставить("СчетУчетаНаСкладе");
	СчетаУчета.Вставить("СчетУчетаВыручкиОтПродаж");
	СчетаУчета.Вставить("СчетУчетаВычетовИзДоходов");	
	СчетаУчета.Вставить("СчетУчетаСебестоимостиПродаж");
	СчетаУчета.Вставить("СтатьяДоходовРегл");
	СчетаУчета.Вставить("СтатьяЗатратРегл");
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		СтрокаТаблицы.ДанныеИзменены = Ложь;
		
		МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияНоменклатуры.СоздатьМенеджерЗаписи();
		ИсключаемыеСвойства = СчетаУчетаПоУмолчанию(СтрокаТаблицы, СчетаУчета);
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы, , ИсключаемыеСвойства);
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСчетаУчетаНоменклатурыПереданнойНаКомиссию()
	
	МассивСтрок = СчетаУчетаНоменклатурыПереданнойНаКомиссию.НайтиСтроки(Новый Структура("ДанныеИзменены", Истина));
	
	СчетаУчета = Новый Структура;
	СчетаУчета.Вставить("СчетУчетаПередачиНаКомиссию");
	СчетаУчета.Вставить("СчетУчетаВыручкиОтПродаж");
	СчетаУчета.Вставить("СчетУчетаВычетовИзДоходов");	
	СчетаУчета.Вставить("СчетУчетаСебестоимостиПродаж");
	СчетаУчета.Вставить("СтатьяДоходовРегл");
	СчетаУчета.Вставить("СтатьяЗатратРегл");
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		СтрокаТаблицы.ДанныеИзменены = Ложь;
		
		МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияНоменклатурыПереданнойНаКомиссию.СоздатьМенеджерЗаписи();
		ИсключаемыеСвойства = СчетаУчетаПоУмолчанию(СтрокаТаблицы, СчетаУчета);
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы, , ИсключаемыеСвойства);
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСчетаУчетаРасчетов()
	
	МассивСтрок = СчетаУчетаРасчетов.НайтиСтроки(Новый Структура("ДанныеИзменены", Истина));
	
	СчетаУчета = Новый Структура;
	СчетаУчета.Вставить("СчетУчетаРасчетовСКлиентами");
	СчетаУчета.Вставить("СчетУчетаАвансовПолученных");
	СчетаУчета.Вставить("СчетУчетаРасчетовПоВознаграждению");
	СчетаУчета.Вставить("СчетУчетаРасчетовСПоставщиками");
	СчетаУчета.Вставить("СчетУчетаАвансовВыданных");
	СчетаУчета.Вставить("СчетУчетаРасчетовСКлиентамиТара");
	СчетаУчета.Вставить("СчетУчетаРасчетовСПоставщикамиТара");
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		СтрокаТаблицы.ДанныеИзменены = Ложь;
		
		МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияРасчетовСПартнерами.СоздатьМенеджерЗаписи();
		ИсключаемыеСвойства = СчетаУчетаПоУмолчанию(СтрокаТаблицы, СчетаУчета);
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы, , ИсключаемыеСвойства);
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСчетаУчетаДоходов()
	
	МассивСтрок = СчетаУчетаДоходов.НайтиСтроки(Новый Структура("ДанныеИзменены", Истина));
	
	СчетаУчета = Новый Структура;
	СчетаУчета.Вставить("СчетУчета");
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		СтрокаТаблицы.ДанныеИзменены = Ложь;
		
		МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияДоходов.СоздатьМенеджерЗаписи();
		ИсключаемыеСвойства = СчетаУчетаПоУмолчанию(СтрокаТаблицы, СчетаУчета);
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы, , ИсключаемыеСвойства);
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСчетаУчетаРасходов()
	
	МассивСтрок = СчетаУчетаРасходов.НайтиСтроки(Новый Структура("ДанныеИзменены", Истина));
	
	СчетаУчета = Новый Структура;
	СчетаУчета.Вставить("СчетУчета");
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		СтрокаТаблицы.ДанныеИзменены = Ложь;
		
		МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияРасходов.СоздатьМенеджерЗаписи();
		ИсключаемыеСвойства = СчетаУчетаПоУмолчанию(СтрокаТаблицы, СчетаУчета);
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы, , ИсключаемыеСвойства);
		МенеджерЗаписи.Документ = Неопределено;
		
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСчетаУчетаТМЦ()
	
	МассивСтрок = СчетаУчетаТМЦВЭксплуатации.НайтиСтроки(Новый Структура("ДанныеИзменены", Истина));
	
	СчетаУчета = Новый Структура;
	СчетаУчета.Вставить("СчетУчета");
	СчетаУчета.Вставить("СчетАмортизации");
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		СтрокаТаблицы.ДанныеИзменены = Ложь;
		
		МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияТМЦВЭксплуатации.СоздатьМенеджерЗаписи();
		ИсключаемыеСвойства = СчетаУчетаПоУмолчанию(СтрокаТаблицы, СчетаУчета);
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы, , ИсключаемыеСвойства);
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСчетаУчетаСертификатов()
	
	МассивСтрок = СчетаУчетаПодарочныхСертификатов.НайтиСтроки(Новый Структура("ДанныеИзменены", Истина));
	
	СчетаУчета = Новый Структура;
	СчетаУчета.Вставить("СчетУчета");
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		СтрокаТаблицы.ДанныеИзменены = Ложь;
		
		МенеджерЗаписи = РегистрыСведений.ПорядокОтраженияПодарочныхСертификатов.СоздатьМенеджерЗаписи();
		ИсключаемыеСвойства = СчетаУчетаПоУмолчанию(СтрокаТаблицы, СчетаУчета);
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы, , ИсключаемыеСвойства);
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтраженияВУчете()
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	СохранитьСчетаУчетаНоменклатуры();
	СохранитьСчетаУчетаНоменклатурыПереданнойНаКомиссию();
	СохранитьСчетаУчетаРасчетов();
	СохранитьСчетаУчетаДоходов();
	СохранитьСчетаУчетаРасходов();
	СохранитьСчетаУчетаТМЦ();
	СохранитьСчетаУчетаСертификатов();
	ЗафиксироватьТранзакцию();
	
	Модифицированность = Ложь;
	ИзмененыНастройкиОтраженияВУчете = Истина;
	
	ЗаполнитьТаблицуНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкуОтраженияВУчете()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеглУчетПроведениеСервер.ВернутьДокументыКОтражению(ТаблицаДокументов.Выгрузить());
	СохранитьНастройкиОтраженияВУчете();
	
КонецПроцедуры

&НаСервере
Функция СчетаУчетаПоУмолчанию(СтрокаТаблицы, СчетаУчета)
	
	СчетаПоУмолчанию = Новый Массив;
	
	Для каждого СчетУчета Из СчетаУчета Цикл
		Если СтрокаТаблицы[СчетУчета.Ключ + "ПоУмолчанию"] Тогда
			СчетаПоУмолчанию.Добавить(СчетУчета.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(СчетаПоУмолчанию, ",");
	
КонецФункции

&НаСервере
Процедура СчетУчетаПриИзмененииСервер(ИмяЭлемента)
	
	ПутьКДанным = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элементы[ИмяЭлемента].ПутьКДанным, ".");
	
	ИмяТаблицы = ПутьКДанным[0];
	ИмяПоля    = ПутьКДанным[1] + "ПоУмолчанию";
	
	Идентификатор = Элементы[ИмяТаблицы].ТекущаяСтрока;
	ТекущаяСтрока = ЭтаФорма[ИмяТаблицы].НайтиПоИдентификатору(Идентификатор);
	ТекущаяСтрока[ИмяПоля] = Ложь;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаполнениеСчетовУчетаДляНоменклатуры(Строка)
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Если Строка.ЕстьСобственныеТовары Тогда
		Если Не ЗначениеЗаполнено(Строка.СчетУчетаНаСкладе) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.ЕстьПродажаСобственныхТоваров Тогда
		Если Не ЗначениеЗаполнено(Строка.СчетУчетаСебестоимостиПродаж) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.ЕстьПродажаСобственныхТоваров ИЛИ Строка.ЕстьПродажаУслуг Тогда
		Если Не ЗначениеЗаполнено(Строка.СчетУчетаВыручкиОтПродаж) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Строка.СчетУчетаВычетовИзДоходов) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТребуетсяЗаполнитьСчетаУчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаполнениеСчетовУчетаДляНоменклатурыПереданнойНаКомиссию(Строка)
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Если Не ЗначениеЗаполнено(Строка.СчетУчетаПередачиНаКомиссию) Тогда
		ТребуетсяЗаполнитьСчетаУчета = Истина;
	КонецЕсли;
	
	Если Строка.ЕстьПродажаСобственныхТоваров Тогда
		Если Не ЗначениеЗаполнено(Строка.СчетУчетаСебестоимостиПродаж) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Строка.СчетУчетаВыручкиОтПродаж) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Строка.СчетУчетаВычетовИзДоходов) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат ТребуетсяЗаполнитьСчетаУчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаполнениеСчетовУчетаРасчетов(Строка)
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Если Строка.ЕстьРасчетыСКлиентами Тогда
		
		Если Не ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКлиентами) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Строка.СчетУчетаАвансовПолученных) И НЕ Строка.ЕстьРасчетыПоДепозитам Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Строка.ЕстьРасчетыСКлиентамиТара Тогда
		
		Если Не ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКлиентамиТара) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Строка.ЕстьРасчетыСПоставщиками Тогда
		
		Если Не ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСПоставщиками) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Строка.СчетУчетаАвансовВыданных) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
		
	КонецЕсли;     
	
	Если Строка.ЕстьРасчетыСПоставщикамиТара Тогда
		
		Если Не ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСПоставщикамиТара) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Строка.ЕстьРасчетыПоКомиссии Тогда
		
		Если Не ЗначениеЗаполнено(Строка.СчетУчетаРасчетовПоВознаграждению) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТребуетсяЗаполнитьСчетаУчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаполнениеСчетовУчетаРасходов(Строка)
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Если Строка.ЕстьРасходы Тогда
		Если Не ЗначениеЗаполнено(Строка.СчетУчета) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТребуетсяЗаполнитьСчетаУчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаполнениеСчетовУчетаДоходов(Строка)
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Если Строка.ЕстьДоходы Тогда
		Если Не ЗначениеЗаполнено(Строка.СчетУчета) Тогда
			ТребуетсяЗаполнитьСчетаУчета = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТребуетсяЗаполнитьСчетаУчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаполнениеСчетовУчетаТМЦ(Строка)
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Если Строка.ЕстьПередачи И Не ЗначениеЗаполнено(Строка.СчетУчета) Тогда
		ТребуетсяЗаполнитьСчетаУчета = Истина;
	КонецЕсли;
		
	Если Строка.ЕстьПередачи И Не ЗначениеЗаполнено(Строка.СчетАмортизации) Тогда
		ТребуетсяЗаполнитьСчетаУчета = Истина;
	КонецЕсли;
	
	Возврат ТребуетсяЗаполнитьСчетаУчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаполнениеСчетовУчетаСертификатов(Строка)
	
	ТребуетсяЗаполнитьСчетаУчета = Ложь;
	
	Если Строка.ЕстьРасчеты И НЕ ЗначениеЗаполнено(Строка.СчетУчета) Тогда
		ТребуетсяЗаполнитьСчетаУчета = Истина;
	КонецЕсли;
	
	Возврат ТребуетсяЗаполнитьСчетаУчета;
	
КонецФункции

&НаСервере
Процедура ПрименитьОтборПоВидамСчетовРеглУчета(ВидыСчетовРеглУчета)
	
	#Область СоответствиеВидовИЧитаемыхРегистров
	СоответствиеВидовИЧитаемыхРегистров = Новый Соответствие;
		
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.НаСкладе, "ПорядокОтраженияНоменклатуры");
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.ВыручкаОтПродаж, "ПорядокОтраженияНоменклатуры");
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.ВычетыИзДоходов, "ПорядокОтраженияНоменклатуры");
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.СебестоимостьПродаж, "ПорядокОтраженияНоменклатуры");
	
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.ПередачаНаКомиссию, "ПорядокОтраженияНоменклатурыПереданнойНаКомиссию");
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.ВыручкаОтПродажКомиссионера, "ПорядокОтраженияНоменклатурыПереданнойНаКомиссию");
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.ВычетыИзДоходовКомиссионера, "ПорядокОтраженияНоменклатурыПереданнойНаКомиссию");
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.СебестоимостьПродажКомиссионера, "ПорядокОтраженияНоменклатурыПереданнойНаКомиссию");
	
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.ТМЦВЭксплуатации, "ПорядокОтраженияТМЦВЭксплуатации");
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.ТМЦВЭксплуатацииАмортизация, "ПорядокОтраженияТМЦВЭксплуатации");
	
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыПоПодарочнымСертификатам, "ПорядокОтраженияПодарочныхСертификатов");
	
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.АвансыВыданные, "ПорядокОтраженияРасчетовСПартнерами");
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.АвансыПолученные, "ПорядокОтраженияРасчетовСПартнерами");
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентами, "ПорядокОтраженияРасчетовСПартнерами");
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентамиТара, "ПорядокОтраженияРасчетовСПартнерами");
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщиками, "ПорядокОтраженияРасчетовСПартнерами");
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщикамиТара, "ПорядокОтраженияРасчетовСПартнерами");
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыПоВознаграждению, "ПорядокОтраженияРасчетовСПартнерами");
	
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.Доходы, "ПорядокОтраженияДоходов");
	
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.Расходы, "ПорядокОтраженияРасходов");
	
	СоответствиеВидовИЧитаемыхРегистров.Вставить(Перечисления.ВидыСчетовРеглУчета.ПрочиеОперации, "ПорядокОтраженияПрочихОпераций");
	#КонецОбласти
	
	#Область СоответствиеВидовИПолей
	СоответствиеВидовИПолей = Новый Соответствие;
		
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.НаСкладе, Элементы.СчетаУчетаНоменклатурыСчетУчетаНаСкладе);
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.ВыручкаОтПродаж, Элементы.СчетаУчетаНоменклатурыСчетУчетаВыручкиОтПродаж);
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.ВычетыИзДоходов, Элементы.СчетаУчетаНоменклатурыСчетУчетаВычетовИзДоходов);
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.СебестоимостьПродаж, Элементы.СчетаУчетаНоменклатурыСчетУчетаСебестоимостиПродаж);
	
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.ПередачаНаКомиссию, Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаПередачиНаКомиссию);
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.ВыручкаОтПродажКомиссионера, Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаВыручкиОтПродаж);
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.ВычетыИзДоходовКомиссионера, Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаВычетовИзДоходов);
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.СебестоимостьПродажКомиссионера, Элементы.СчетаУчетаНоменклатурыПереданнойНаКомиссиюСчетУчетаСебестоимостиПродаж);
	
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.ТМЦВЭксплуатации, Элементы.СчетаУчетаТМЦВЭксплуатацииСчетУчета);
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.ТМЦВЭксплуатацииАмортизация, Элементы.СчетаУчетаТМЦВЭксплуатацииСчетАмортизации);
	
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыПоПодарочнымСертификатам, Элементы.СчетаУчетаПодарочныхСертификатовСчетУчета);
	
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.АвансыВыданные, Элементы.СчетаУчетаРасчетовСчетУчетаАвансовВыданных);
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.АвансыПолученные, Элементы.СчетаУчетаРасчетовСчетУчетаАвансовПолученных);
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентами, Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСКлиентами);
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентамиТара, Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСКлиентамиТара);
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщиками, Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСПоставщиками);
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщикамиТара, Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовСПоставщикамиТара);
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыПоВознаграждению, Элементы.СчетаУчетаРасчетовСчетУчетаРасчетовПоВознаграждению);
	
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.Доходы, Элементы.СчетаУчетаДоходовСчетУчета);
	
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.Расходы, Элементы.СчетаУчетаРасходовСчетУчета);
	
	СоответствиеВидовИПолей.Вставить(Перечисления.ВидыСчетовРеглУчета.ПрочиеОперации, Элементы.СчетаУчетаПрочихОперацийСчетУчета);
	#КонецОбласти
	
	НоваяСтруктураЧитаемыхРегистров = Новый Структура;
	
	Для каждого ПрименяемыйВидСчетаУчета из ВидыСчетовРеглУчета Цикл
		
		ЧитаемыйРегистр = СоответствиеВидовИЧитаемыхРегистров.Получить(ПрименяемыйВидСчетаУчета);
		Если СтруктураЧитаемыхРегистров.Свойство(ЧитаемыйРегистр) Тогда
			НоваяСтруктураЧитаемыхРегистров.Вставить(ЧитаемыйРегистр, Истина);
		КонецЕсли;		
		
	КонецЦикла;
	
	СтруктураЧитаемыхРегистров = Новый ФиксированнаяСтруктура(НоваяСтруктураЧитаемыхРегистров);
	
	Для каждого СоответствиеВидаИПоля из СоответствиеВидовИПолей Цикл
		СоответствиеВидаИПоля.Значение.Видимость = Не ВидыСчетовРеглУчета.Найти(СоответствиеВидаИПоля.Ключ) = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьСФормыЭлементы(МассивСкрываемыхЭлементов)
	
	Для каждого ИмяСкрываемогоЭлемента из МассивСкрываемыхЭлементов Цикл
		СкрываемыйЭлемент = Элементы.Найти(ИмяСкрываемогоЭлемента);
		Если Не СкрываемыйЭлемент = Неопределено Тогда
			СкрываемыйЭлемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

ВыполняетсяЗакрытие = Ложь;