
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ПустойКлючСвязи = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	МассивСтрокЭтапы            = Новый Массив;
	МассивСтрокМатериалыИУслуги = Новый Массив;
	МассивСтрокВыходныеИзделия  = Новый Массив;
	МассивСтрокВозвратныеОтходы = Новый Массив;
	МассивСтрокВидыРЦ           = Новый Массив;
	Для каждого ЭлКоллекции Из Параметры.ДанныеЗаказа Цикл
		
		// Ищем этапы которые входят в спецификацию
		СтруктураПоискаЭтапы = Новый Структура("КлючСвязиПродукция", ЭлКоллекции.Значение.КлючСвязиПродукция);
		
		СтрокиЭтапы = Параметры.Этапы.НайтиСтроки(СтруктураПоискаЭтапы);
		Для каждого НайденнаяСтрока Из СтрокиЭтапы Цикл
			МассивСтрокЭтапы.Добавить(НайденнаяСтрока);
			
			СтруктураПоискаДанныеЭтапа = Новый Структура("КлючСвязиЭтапы", НайденнаяСтрока.КлючСвязи);
			
			СтрокиМатериалыИУслуги = Параметры.МатериалыИУслуги.НайтиСтроки(СтруктураПоискаДанныеЭтапа);
			Для каждого НайденнаяСтрока Из СтрокиМатериалыИУслуги Цикл
				МассивСтрокМатериалыИУслуги.Добавить(НайденнаяСтрока);
			КонецЦикла;
			
			СтрокиВыходныеИзделия = Параметры.ВыходныеИзделия.НайтиСтроки(СтруктураПоискаДанныеЭтапа);
			Для каждого НайденнаяСтрока Из СтрокиВыходныеИзделия Цикл
				МассивСтрокВыходныеИзделия.Добавить(НайденнаяСтрока);
			КонецЦикла;
			
			СтрокиВозвратныеОтходы = Параметры.ВозвратныеОтходы.НайтиСтроки(СтруктураПоискаДанныеЭтапа);
			Для каждого НайденнаяСтрока Из СтрокиВозвратныеОтходы Цикл
				МассивСтрокВозвратныеОтходы.Добавить(НайденнаяСтрока);
			КонецЦикла;
			
			СтрокиВидыРЦ = Параметры.ВидыРабочихЦентров.НайтиСтроки(СтруктураПоискаДанныеЭтапа);
			Для каждого НайденнаяСтрока Из СтрокиВидыРЦ Цикл
				МассивСтрокВидыРЦ.Добавить(НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
		
	// Этапы
	
	//
	// Ключ этапа это строка формата ИдентификаторЭтапа_КодСпецификации
	//
	
	Этапы = Параметры.Этапы.Выгрузить(МассивСтрокЭтапы);
	Этапы.Колонки.Добавить("КлючЭтапа",                      Новый ОписаниеТипов("Строка"));
	Этапы.Колонки.Добавить("СпецификацияПредставление",      Новый ОписаниеТипов("Строка"));
	Этапы.Колонки.Добавить("МаршрутнаяКартаПредставление",   Новый ОписаниеТипов("Строка"));
	Этапы.Колонки.Добавить("ПодразделениеПредставление",     Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Этапы.Этап КАК Этап
	|ПОМЕСТИТЬ ВТЭтапы
	|ИЗ
	|	&Этапы КАК Этапы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТЭтапы.Этап КАК Этап,
	|	ВТЭтапы.Этап.Владелец.Представление КАК СпецификацияПредставление,
	|	ВТЭтапы.Этап.Владелец.Код КАК КодСпецификации
	|ИЗ
	|	ВТЭтапы КАК ВТЭтапы");
	
	Запрос.УстановитьПараметр("Этапы", Этапы);
	ДанныеЭтапов = Запрос.Выполнить().Выбрать();
	СтруктураОтбора = Новый Структура("Этап");
	
	Для каждого ЭлКоллекции Из Этапы Цикл
		
		СтруктураОтбора.Этап = ЭлКоллекции.Этап;
		ДанныеЭтапов.НайтиСледующий(СтруктураОтбора);
		
		ЭлКоллекции.КлючЭтапа                    = Строка(ЭлКоллекции.Этап.УникальныйИдентификатор()) + "_" + ДанныеЭтапов.КодСпецификации;
		ЭлКоллекции.СпецификацияПредставление    = ДанныеЭтапов.СпецификацияПредставление;
		ЭлКоллекции.МаршрутнаяКартаПредставление = Строка(ЭлКоллекции.МаршрутнаяКарта);
		ЭлКоллекции.ПодразделениеПредставление   = Строка(ЭлКоллекции.Подразделение);
		
		ДанныеЭтапов.Сбросить();
		
	КонецЦикла;
	
	// МатериалыИУслуги
	МатериалыИУслуги = Параметры.МатериалыИУслуги.Выгрузить(МассивСтрокМатериалыИУслуги);
	МатериалыИУслуги.Колонки.Добавить("НоменклатураПредставление",   Новый ОписаниеТипов("Строка"));
	МатериалыИУслуги.Колонки.Добавить("ХарактеристикаПредставление", Новый ОписаниеТипов("Строка"));
	МатериалыИУслуги.Колонки.Добавить("ЕдИзм",                       Новый ОписаниеТипов("Строка"));
	Для каждого ЭлКоллекции Из МатериалыИУслуги Цикл
		ЭлКоллекции.НоменклатураПредставление   = Строка(ЭлКоллекции.Номенклатура);
		ЭлКоллекции.ХарактеристикаПредставление = Строка(ЭлКоллекции.Характеристика);
		Если ЗначениеЗаполнено(ЭлКоллекции.Упаковка) Тогда
			ЭлКоллекции.ЕдИзм = ЭлКоллекции.Упаковка;
		Иначе
			ЭлКоллекции.ЕдИзм = ЭлКоллекции.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли; 
	КонецЦикла; 
	
	// ВыходныеИзделия
	ВыходныеИзделия = Параметры.ВыходныеИзделия.Выгрузить(МассивСтрокВыходныеИзделия);
	ВыходныеИзделия.Колонки.Добавить("НоменклатураПредставление",   Новый ОписаниеТипов("Строка"));
	ВыходныеИзделия.Колонки.Добавить("ХарактеристикаПредставление", Новый ОписаниеТипов("Строка"));
	ВыходныеИзделия.Колонки.Добавить("ЕдИзм",                       Новый ОписаниеТипов("Строка"));
	Для каждого ЭлКоллекции Из ВыходныеИзделия Цикл
		ЭлКоллекции.НоменклатураПредставление   = Строка(ЭлКоллекции.Номенклатура);
		ЭлКоллекции.ХарактеристикаПредставление = Строка(ЭлКоллекции.Характеристика);
		Если ЗначениеЗаполнено(ЭлКоллекции.Упаковка) Тогда
			ЭлКоллекции.ЕдИзм = ЭлКоллекции.Упаковка;
		Иначе
			ЭлКоллекции.ЕдИзм = ЭлКоллекции.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
	
	// ВозвратныеОтходы
	ВозвратныеОтходы = Параметры.ВозвратныеОтходы.Выгрузить(МассивСтрокВозвратныеОтходы);
	ВозвратныеОтходы.Колонки.Добавить("НоменклатураПредставление",   Новый ОписаниеТипов("Строка"));
	ВозвратныеОтходы.Колонки.Добавить("ХарактеристикаПредставление", Новый ОписаниеТипов("Строка"));
	ВозвратныеОтходы.Колонки.Добавить("ЕдИзм",                       Новый ОписаниеТипов("Строка"));
	Для каждого ЭлКоллекции Из ВозвратныеОтходы Цикл
		ЭлКоллекции.НоменклатураПредставление   = Строка(ЭлКоллекции.Номенклатура);
		ЭлКоллекции.ХарактеристикаПредставление = Строка(ЭлКоллекции.Характеристика);
		Если ЗначениеЗаполнено(ЭлКоллекции.Упаковка) Тогда
			ЭлКоллекции.ЕдИзм = ЭлКоллекции.Упаковка;
		Иначе
			ЭлКоллекции.ЕдИзм = ЭлКоллекции.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
	
	// ВидыРабочихЦентров
	ВидыРабочихЦентров = Параметры.ВидыРабочихЦентров.Выгрузить(МассивСтрокВидыРЦ);
	ВидыРабочихЦентров.Колонки.Добавить("ВидРабочегоЦентраПредставление", Новый ОписаниеТипов("Строка"));
	Для каждого ЭлКоллекции Из ВидыРабочихЦентров Цикл
		ЭлКоллекции.ВидРабочегоЦентраПредставление = Строка(ЭлКоллекции.ВидРабочегоЦентра);
	КонецЦикла; 
	
	// Получим строки заказа в нужном порядке
	СписокСтрокЗаказа = Новый СписокЗначений;
	Для каждого ЭлКоллекции Из Параметры.ДанныеЗаказа Цикл
		СписокСтрокЗаказа.Добавить(ЭлКоллекции.Значение.НомерСтроки);
	КонецЦикла;
	СписокСтрокЗаказа.СортироватьПоЗначению();
	
	ЕстьОтличия = Ложь;
	
	// Для каждой строки заказа выведем отчет о сравнении
	ЗаголовокОтчета = НСтр("ru='Сравнение заказа со спецификациями';uk='Порівняння замовлення зі специфікаціями'");
	Для каждого ЭлКоллекции Из СписокСтрокЗаказа Цикл
		ДанныеЗаказа = Параметры.ДанныеЗаказа.Получить(ЭлКоллекции.Значение);
		
		СписокСпецификаций = Новый СписокЗначений;
		СписокСпецификаций.Добавить(ДанныеЗаказа.Спецификация, НСтр("ru='По спецификации';uk='По специфікації'"));
		СписокСпецификаций.Добавить("По заказу",               НСтр("ru='По заказу';uk='По замовленню'"));
		
		ДанныеСравнения = Обработки.СравнениеСпецификаций.ВыполнитьСравнениеЗаказаСоСпецификациями(	
																ДанныеЗаказа, 
																Этапы,
																МатериалыИУслуги,
																ВыходныеИзделия,
																ВозвратныеОтходы,
																ВидыРабочихЦентров);
																
		СтрокаЗаказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Строка №%1';uk='Рядок №%1'"),
							ДанныеЗаказа.НомерСтроки);
							
		ЕстьОтличияПоСтрокеЗаказа = Обработки.СравнениеСпецификаций.ВывестиОтчет(
									РезультатСравнения, 
									СписокСпецификаций, 
									Истина, 
									ДанныеСравнения, 
									ЗаголовокОтчета, 
									СтрокаЗаказа);
									
		ЕстьОтличия = ЕстьОтличия ИЛИ ЕстьОтличияПоСтрокеЗаказа;
		
		ЗаголовокОтчета = Неопределено;
	КонецЦикла;
	
	Обработки.СравнениеСпецификаций.ЗавершитьВыводОтчета(РезультатСравнения, ЕстьОтличия);
	
КонецПроцедуры

#КонецОбласти
