&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		Элементы.ПолуфабрикатыИМатериалыПроизводитсяВПроцессе.Видимость = Ложь;
		Элементы.ПолуфабрикатыИМатериалыГруппаСпецификация.Заголовок = НСтр("ru='Спецификация';uk='Специфікація'");
	КонецЕсли;
	
	Если Не Параметры.Свойство("Заказ", Заказ) Тогда
		ВызватьИсключение НСтр("ru='Обработка не предназначена для непосредственного использования.';uk='Обробка не призначена для безпосереднього використання.'");
	КонецЕсли;
	
	Если Не Заказ.Проведен Тогда
		ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.';uk='Документ %Документ% не проведено. Введення на підставі непроведенного документа заборонене.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Заказ);
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	
	Заголовок = Заказ;
	ИмяТекущейСтраницы = "СтраницаПродукция";
	УстановитьВидимостьИДоступность(ИмяТекущейСтраницы);
	УчитыватьСуществующиеЗаказы = Истина;
	
	ЗаполнитьТаблицуПродукцииНаСервере();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументов,
		"Ссылка",
		СформированныеДокументы,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
		
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаМатериалы" Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	Результат = ПриСменеСтраницыНаСервере(ИмяТекущейСтраницы, ТекущаяСтраница.Имя);
	
	Если Результат <> Неопределено Тогда
		ПоказатьОповещениеПользователя(Результат.ТекстОповещения, , Результат.ПояснениеОповещения);
	КонецЕсли;
	
	ИмяТекущейСтраницы = ТекущаяСтраница.Имя
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьПрошлыеЗаказыПриИзменении(Элемент)
	
	УчитыватьПрошлыеЗаказыПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолуфабрикатыИМатериалы

&НаКлиенте
Процедура ПолуфабрикатыИМатериалыПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекущиеДанные = ПолуфабрикатыИМатериалы.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Спецификация) И Не ТекущиеДанные.Разузлован Тогда
		
		Отказ = Истина;
		
		ПостроитьДеревоПродукции(ТекущиеДанные.ПолучитьИдентификатор());
		
		Элементы.ПолуфабрикатыИМатериалы.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолуфабрикатыИМатериалыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолуфабрикатыИМатериалы.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущиеДанные.ТипСтроки = 1 Тогда
		ТекущиеДанные.Выбран = Ложь;
		ПостроитьДеревоПродукции(ТекущиеДанные.ПолучитьИдентификатор());
		ТекущиеДанные.Разузлован = Истина;
		УчитыватьСуществующиеЗаказы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолуфабрикатыИМатериалыПроизводитсяВПроцессеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолуфабрикатыИМатериалы.ТекущиеДанные;
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе Тогда
		ТекущиеДанные.НомерКартинки = 6;
	Иначе
		ТекущиеДанные.Спецификация = ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
		ТекущиеДанные.НомерКартинки = 0;
		ТекущиеДанные.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолуфабрикатыИМатериалыСпецификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолуфабрикатыИМатериалы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Спецификация) Тогда
		
		Если ТекущиеДанные.Выбран > 0 Тогда
			ТекущиеДанные.Выбран = 1;
		КонецЕсли;
		
		ПостроитьДеревоПродукции(ТекущиеДанные.ПолучитьИдентификатор());
		ТекущиеДанные.Разузлован = Истина;
		
		Элементы.ПолуфабрикатыИМатериалы.Развернуть(ТекущиеДанные.ПолучитьИдентификатор(), Истина);
		
	Иначе
		ТекущиеДанные.ПроизводитсяВПроцессе = Ложь;
		ТекущиеДанные.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолуфабрикатыИМатериалыВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПолуфабрикатыИМатериалы.ТекущиеДанные;
	
	Если ТекущиеДанные.Выбран = 2 Тогда
		ТекущиеДанные.Выбран = 0;
	КонецЕсли;
	
	ВыбранПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ПолуфабрикатыИМатериалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "ПолуфабрикатыИМатериалыНоменклатура" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПолуфабрикатыИМатериалы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.НомерКартинки <> 6 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Спецификация) И Не ТекущиеДанные.Разузлован Тогда
		
		ПостроитьДеревоПродукции(ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолуфабрикатыИМатериалыПриИзменении(Элемент)
	
	ОбновитьМатериалы = Истина;
	ОбновитьЗаказы = Истина;
	
	Если ЗаказыСформированы Тогда
		УдалитьСформированныеДокументы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "МатериалыНоменклатура" Тогда
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
	ИначеЕсли Поле.Имя = "МатериалыЗаказ" Тогда
		ПоказатьЗначение(, ТекущиеДанные.Заказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриИзменении(Элемент)
	
	ОбновитьЗаказы = Истина;
	Если ЗаказыСформированы Тогда
		УдалитьСформированныеДокументы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекущиеДанные.Выбран Тогда
		ТекущиеДанные.КоличествоУпаковокЗаказать = ТекущиеДанные.КоличествоУпаковок - ТекущиеДанные.КоличествоУпаковокЗаказано;
		ТекущиеДанные.КоличествоЗаказать = ТекущиеДанные.Количество - ТекущиеДанные.КоличествоЗаказано;
	Иначе
		ТекущиеДанные.КоличествоУпаковокЗаказать = 0;
		ТекущиеДанные.КоличествоЗаказать = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоУпаковокЗаказатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Заказать");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущиеДанные.КоличествоУпаковокЗаказать = 0 Тогда
		ТекущиеДанные.Выбран = Ложь;
	Иначе
		ТекущиеДанные.Выбран = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыДатаОтгрузкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекущиеДанные.ДатаОтгрузки < НачалоТекущегоДня Тогда
		ТекущиеДанные.ДатаОтгрузки = НачалоТекущегоДня;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьСтроки(Команда)
	
	Строки = ПолуфабрикатыИМатериалы.ПолучитьЭлементы();
	Если Строки.Количество() > 0 Тогда
		ОбновитьМатериалы = Истина;
		ВыбратьИсключитьВыделенныеСтроки(1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСтроки(Команда)
	
	Строки = ПолуфабрикатыИМатериалы.ПолучитьЭлементы();
	Если Строки.Количество() > 0 Тогда
		ОбновитьМатериалы = Истина;
		ВыбратьИсключитьВыделенныеСтроки(0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ОчиститьСообщения();
	
	Если ИмяТекущейСтраницы = "СтраницаПродукция" Тогда
		НоваяСтраница = Элементы.СтраницаМатериалы;
	Иначе
		НоваяСтраница = Элементы.СтраницаДокументы;
	КонецЕсли;
	
	Элементы.Закладки.ТекущаяСтраница = НоваяСтраница;
	
	Результат = ПриСменеСтраницыНаСервере(ИмяТекущейСтраницы, НоваяСтраница.Имя);
	
	Если Результат <> Неопределено Тогда
		ПоказатьОповещениеПользователя(Результат.ТекстОповещения, , Результат.ПояснениеОповещения);
	КонецЕсли;

	ИмяТекущейСтраницы = НоваяСтраница.Имя
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если ИмяТекущейСтраницы = "СтраницаДокументы" Тогда
		НоваяСтраница = Элементы.СтраницаМатериалы;
	Иначе
		НоваяСтраница = Элементы.СтраницаПродукция;
	КонецЕсли;
	
	Элементы.Закладки.ТекущаяСтраница = НоваяСтраница;
	
	Результат = ПриСменеСтраницыНаСервере(ИмяТекущейСтраницы, НоваяСтраница.Имя);
	
	Если Результат <> Неопределено Тогда
		ПоказатьОповещениеПользователя(Результат.ТекстОповещения, , Результат.ПояснениеОповещения);
	КонецЕсли;

	ИмяТекущейСтраницы = НоваяСтраница.Имя
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЕще(Команда)
	
	НоваяСтраница = Элементы.СтраницаПродукция;
	
	Элементы.Закладки.ТекущаяСтраница = НоваяСтраница;
	
	СформированныеДокументы.Очистить();
	
	ОбновитьМатериалы = Истина;
	ОбновитьЗаказы = Истина;
	ЗаказыСформированы = Ложь;
	
	ПриСменеСтраницыНаСервере(ИмяТекущейСтраницы, НоваяСтраница.Имя);
	
	ИмяТекущейСтраницы = НоваяСтраница.Имя
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОтметитьКЗаказу(Команда)
	
	ВыделенныеСтроки = Элементы.Материалы.ВыделенныеСтроки;
	ОтметитьМатериалыКЗаказу(Истина, ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСнятьОтметкуКЗаказу(Команда)
	
	ВыделенныеСтроки = Элементы.Материалы.ВыделенныеСтроки;
	ОтметитьМатериалыКЗаказу(Ложь, ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМатериалы(Команда)
	
	ЗаполнитьМатериалыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументы(Команда)
	УдалитьДокументыНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Отключение видимости служебной строки.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыВыбран.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыНомерКартинки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыНоменклатура.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыХарактеристика.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыКоличествоУпаковок.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыУпаковка.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыНоменклатураЕдиницаИзмерения.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыПодразделение.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыПроизводитсяВПроцессе.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыСпецификация.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыГруппаНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыГруппаУпаковкаЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = -1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
	"ПолуфабрикатыИМатериалыНоменклатураЕдиницаИзмерения", 
	"ПолуфабрикатыИМатериалы.Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
	"МатериалыНоменклатураЕдиницаИзмерения", 
	"Объект.Материалы.Упаковка");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
	"ПолуфабрикатыИМатериалыХарактеристика",
	"ПолуфабрикатыИМатериалы.ХарактеристикиИспользуются");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
	"МатериалыХарактеристика",
	"Объект.Материалы.ХарактеристикиИспользуются");
	
	// Подразделение не обязательно для заполнения если продукция или полуфабрикат.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// Признак производства в процессе только для просмотра, если продукция.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыПроизводитсяВПроцессе.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// Картинка не отображается, если не полуфабрикат.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыНомерКартинки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.НомерКартинки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 6;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Спецификация для полуфабрикатов.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыСпецификация.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Для полуфабрикатов склад не требуется.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не требуется>';uk='<не потрібно>'"));

	// Если не учитываем прошлые заказы, то колонки не отображаем.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыКоличествоУпаковок.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыКоличествоУпаковокЗаказано.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчитыватьСуществующиеЗаказы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Заказ на передачу отображается как гиперссылка.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыЗаказ.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	
	// Пояснение для заказа на передачу, если не созан или создан ранее.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыЗаказ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыСформированы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.Заказ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<еще не создан или создан ранее>';uk='<ще не створено або створений раніше>'"));
	
	// Если заказы не сформированы, то колонку с заказом не отображаем.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыЗаказ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаказыСформированы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Склад для работ не требуется.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для товаров>';uk='<для товарів>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Для не выбранных строк склад не обязателен
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолуфабрикатыИМатериалыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПолуфабрикатыИМатериалы.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПриСменеСтраницыНаСервере(СтараяСтраница, НоваяСтраница)
	
	Результат = Неопределено;
	
	Если НоваяСтраница = "СтраницаМатериалы" И ОбновитьМатериалы Тогда
		
		ЗаполнитьМатериалыНаСервере();
		
		Если Объект.Материалы.Количество() > 0 Тогда
			ТекстОповещения = НСтр("ru='Материалы заполнены';uk='Матеріали заповнені'");
			ПояснениеОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Всего к заказу позиций: %1';uk='Всього до замовлення позицій: %1'"),
				Объект.Материалы.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество());
			
			Результат = Новый Структура("ТекстОповещения, ПояснениеОповещения", ТекстОповещения, ПояснениеОповещения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоваяСтраница = "СтраницаДокументы" И ОбновитьЗаказы Тогда
		
		СформироватьЗаказыНаСервере();
		
		Если СформированныеДокументы.Количество() > 0 Тогда
			
			ТекстОповещения = НСтр("ru='Заказы созданы';uk='Замовлення створені'");
			ПояснениеОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Всего сформировано заказов: %1';uk='Всього сформовано замовлень: %1'"),
				СформированныеДокументы.Количество());
			
			Результат = Новый Структура("ТекстОповещения, ПояснениеОповещения", ТекстОповещения, ПояснениеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступность(НоваяСтраница);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьИДоступность(НоваяСтраница)
	
	Если НоваяСтраница = "СтраницаПродукция" Тогда
		Элементы.СтраницыНазад.ТекущаяСтраница = Элементы.НазадСкрытие;
	Иначе
		Элементы.СтраницыНазад.ТекущаяСтраница = Элементы.НазадВидимость;
	КонецЕсли;
	
	Если НоваяСтраница = "СтраницаДокументы" Тогда
		Элементы.СтраницыДалее.ТекущаяСтраница = Элементы.ДалееГотово;
		Элементы.Готово.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.СтраницыДалее.ТекущаяСтраница = Элементы.ДалееДалее;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область ПостроениеИОбслуживаниеДерева

&НаСервере
Процедура ЗаполнитьТаблицуПродукцииНаСервере()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика,
	|	ЗаказКлиентаТовары.Упаковка,
	|	ЗаказКлиентаТовары.КоличествоУпаковок,
	|	ЗаказКлиентаТовары.Количество,
	|	ЗаказКлиентаТовары.Склад,
	|	ЗаказКлиентаТовары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказКлиентаТовары.Ссылка.Назначение,
	|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка) КАК Спецификация,
	|	ЗаказКлиентаТовары.ВариантОбеспечения
	|ПОМЕСТИТЬ ВТНоменклатураЗаказа
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Заказ
	|	И НЕ ЗаказКлиентаТовары.Отменено
	|
	//++ НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказДавальцаПродукция.Номенклатура,
	|	ЗаказДавальцаПродукция.Характеристика,
	|	ЗаказДавальцаПродукция.Упаковка,
	|	ЗаказДавальцаПродукция.КоличествоУпаковок,
	|	ЗаказДавальцаПродукция.Количество,
	|	ЗаказДавальцаПродукция.Склад,
	|	ЗаказДавальцаПродукция.ДатаОтгрузки,
	|	ЗаказДавальцаПродукция.Ссылка.Назначение,
	|	ЗаказДавальцаПродукция.Спецификация,
	|	ЗаказДавальцаПродукция.ВариантОбеспечения
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ЗаказДавальцаПродукция
	|ГДЕ
	|	ЗаказДавальцаПродукция.Ссылка = &Заказ
	|	И НЕ ЗаказДавальцаПродукция.Отменено
	|
	//-- НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказМатериаловВПроизводствоТовары.Номенклатура,
	|	ЗаказМатериаловВПроизводствоТовары.Характеристика,
	|	ЗаказМатериаловВПроизводствоТовары.Упаковка,
	|	ЗаказМатериаловВПроизводствоТовары.КоличествоУпаковок,
	|	ЗаказМатериаловВПроизводствоТовары.Количество,
	|	ЗаказМатериаловВПроизводствоТовары.Ссылка.Склад,
	|	ЗаказМатериаловВПроизводствоТовары.ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА ЗаказМатериаловВПроизводствоТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|			ТОГДА
	|				ВЫБОР 
	|					КОГДА ЗаказМатериаловВПроизводствоТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|						ТОГДА ЗаказМатериаловВПроизводствоТовары.Ссылка.Назначение
	|					ИНАЧЕ ЗаказМатериаловВПроизводствоТовары.Назначение
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка),
	|	ЗаказМатериаловВПроизводствоТовары.ВариантОбеспечения
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК ЗаказМатериаловВПроизводствоТовары
	|ГДЕ
	|	ЗаказМатериаловВПроизводствоТовары.Ссылка = &Заказ
	|	И НЕ ЗаказМатериаловВПроизводствоТовары.Отменено
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаВнутреннееПотреблениеТовары.Номенклатура,
	|	ЗаказНаВнутреннееПотреблениеТовары.Характеристика,
	|	ЗаказНаВнутреннееПотреблениеТовары.Упаковка,
	|	ЗаказНаВнутреннееПотреблениеТовары.КоличествоУпаковок,
	|	ЗаказНаВнутреннееПотреблениеТовары.Количество,
	|	ЗаказНаВнутреннееПотреблениеТовары.Ссылка.Склад,
	|	ЗаказНаВнутреннееПотреблениеТовары.ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА ЗаказНаВнутреннееПотреблениеТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|			ТОГДА ЗаказНаВнутреннееПотреблениеТовары.Ссылка.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка),
	|	ЗаказНаВнутреннееПотреблениеТовары.ВариантОбеспечения
	|ИЗ
	|	Документ.ЗаказНаВнутреннееПотребление.Товары КАК ЗаказНаВнутреннееПотреблениеТовары
	|ГДЕ
	|	ЗаказНаВнутреннееПотреблениеТовары.Ссылка = &Заказ
	|	И НЕ ЗаказНаВнутреннееПотреблениеТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПеремещениеТовары.Номенклатура,
	|	ЗаказНаПеремещениеТовары.Характеристика,
	|	ЗаказНаПеремещениеТовары.Упаковка,
	|	ЗаказНаПеремещениеТовары.КоличествоУпаковок,
	|	ЗаказНаПеремещениеТовары.Количество,
	|	ЗаказНаПеремещениеТовары.Ссылка.СкладОтправитель,
	|	ЗаказНаПеремещениеТовары.НачалоОтгрузки,
	|	ВЫБОР
	|		КОГДА ЗаказНаПеремещениеТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|			ТОГДА ЗаказНаПеремещениеТовары.Ссылка.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка),
	|	ЗаказНаПеремещениеТовары.ВариантОбеспечения
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	|ГДЕ
	|	ЗаказНаПеремещениеТовары.Ссылка = &Заказ
	|	И НЕ ЗаказНаПеремещениеТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаСборкуТовары.Номенклатура,
	|	ЗаказНаСборкуТовары.Характеристика,
	|	ЗаказНаСборкуТовары.Упаковка,
	|	ЗаказНаСборкуТовары.КоличествоУпаковок,
	|	ЗаказНаСборкуТовары.Количество,
	|	ЗаказНаСборкуТовары.Ссылка.Склад,
	|	ЗаказНаСборкуТовары.Ссылка.НачалоСборкиРазборки,
	|	ЗаказНаСборкуТовары.Назначение,
	|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка),
	|	ЗаказНаСборкуТовары.ВариантОбеспечения
	|ИЗ
	|	Документ.ЗаказНаСборку.Товары КАК ЗаказНаСборкуТовары
	|ГДЕ
	|	ЗаказНаСборкуТовары.Ссылка = &Заказ
	|	И ЗаказНаСборкуТовары.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
	|	И НЕ ЗаказНаСборкуТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаСборку.Номенклатура,
	|	ЗаказНаСборку.Характеристика,
	|	ЗаказНаСборку.Упаковка,
	|	ЗаказНаСборку.КоличествоУпаковок,
	|	ЗаказНаСборку.Количество,
	|	ЗаказНаСборку.Склад,
	|	ЗаказНаСборку.НачалоСборкиРазборки,
	|	ЗаказНаСборку.Назначение,
	|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка),
	|	ЗаказНаСборку.ВариантОбеспечения
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ЗаказНаСборку
	|ГДЕ
	|	ЗаказНаСборку.Ссылка = &Заказ
	|	И ЗаказНаСборку.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
	|
	//++ НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаРемонтМатериалыИРаботы.Номенклатура,
	|	ЗаказНаРемонтМатериалыИРаботы.Характеристика,
	|	ЗаказНаРемонтМатериалыИРаботы.Упаковка,
	|	ЗаказНаРемонтМатериалыИРаботы.КоличествоУпаковок,
	|	ЗаказНаРемонтМатериалыИРаботы.Количество,
	|	ЗаказНаРемонтМатериалыИРаботы.Склад,
	|	ЗаказНаРемонтМатериалыИРаботы.Ссылка.ДатаНачала,
	|	ВЫБОР
	|		КОГДА ЗаказНаРемонтМатериалыИРаботы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|			ТОГДА ЗаказНаРемонтМатериалыИРаботы.Ссылка.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка),
	|	ЗаказНаРемонтМатериалыИРаботы.ВариантОбеспечения
	|ИЗ
	|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ЗаказНаРемонтМатериалыИРаботы
	|ГДЕ
	|	ЗаказНаРемонтМатериалыИРаботы.Ссылка = &Заказ
	|	И НЕ ЗаказНаРемонтМатериалыИРаботы.Отменено
	//-- НЕ УТКА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Склад          КАК Склад
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	ВТНоменклатураЗаказа КАК Таблица
	|;
	|
	|/////////////////////////////////////
	|" + РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ")
	+ "ВЫБРАТЬ
	|	ВТНоменклатураЗаказа.Номенклатура,
	|	ВТНоменклатураЗаказа.Характеристика,
	|	ВТНоменклатураЗаказа.Количество,
	|	ВТНоменклатураЗаказа.КоличествоУпаковок,
	|	ВТНоменклатураЗаказа.Упаковка,
	|	ВТНоменклатураЗаказа.Склад,
	|	ВЫБОР
	|		КОГДА ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
	|			ТОГДА ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	ВТНоменклатураЗаказа.Назначение,
	|	ВТНоменклатураЗаказа.Спецификация,
	|	ВТНоменклатураЗаказа.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры
	|ИЗ
	|	ВТНоменклатураЗаказа КАК ВТНоменклатураЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК ВариантыОбеспеченияТоварами
	|		ПО ВариантыОбеспеченияТоварами.Номенклатура   = ВТНоменклатураЗаказа.Номенклатура
	|		 И ВариантыОбеспеченияТоварами.Характеристика = ВТНоменклатураЗаказа.Характеристика
	|		 И ВариантыОбеспеченияТоварами.Склад          = ВТНоменклатураЗаказа.Склад
	|ГДЕ
	|	ВТНоменклатураЗаказа.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))");
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ВызватьИсключение НСтр("ru='Отсутствует товар, для которого возможно формирование заказов на передачу материалов в производство.';uk='Відсутній товар, для якого можливе формування замовлень на передачу матеріалів у виробництво.'");
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	ТекущиеЭлементы = ПолуфабрикатыИМатериалы.ПолучитьЭлементы();
	
	МассивДанныхПоНоменклатуре = Новый Массив;
	
	НачалоПроизводства = НачалоДня(ТекущаяДатаСеанса());
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТекущиеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ДанныеПоНоменклатуре = Новый Структура;
		ДанныеПоНоменклатуре.Вставить("Номенклатура",		Выборка.Номенклатура);
		ДанныеПоНоменклатуре.Вставить("Характеристика",		Выборка.Характеристика);
		ДанныеПоНоменклатуре.Вставить("Количество",			Выборка.Количество);
		ДанныеПоНоменклатуре.Вставить("Упаковка",			Выборка.Упаковка);
		ДанныеПоНоменклатуре.Вставить("НачалоПроизводства",	НачалоПроизводства);
		ДанныеПоНоменклатуре.Вставить("Подразделение",		Выборка.Подразделение);
		
		МассивДанныхПоНоменклатуре.Добавить(ДанныеПоНоменклатуре);
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(ТекущиеЭлементы, МассивДанныхПоНоменклатуре, Истина);
	
	Для Каждого Строка Из ТекущиеЭлементы Цикл
		Если ЗначениеЗаполнено(Строка.Спецификация) Тогда
			ПостроитьДеревоПродукции(Строка);
			Строка.Разузлован = Истина;
		КонецЕсли;
		Строка.ПроизводитсяВПроцессе = Истина;
		Строка.ТипСтроки = 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоПродукции(Знач Родитель)
	
	Если Не ТипЗнч(Родитель) = Тип("ДанныеФормыЭлементДерева") Тогда
		Родитель = ПолуфабрикатыИМатериалы.НайтиПоИдентификатору(Родитель);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Родитель.Спецификация) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРазузлования = Новый Структура("Спецификация, Номенклатура, Характеристика, Количество, ДатаПотребности, Назначение");
	ЗаполнитьЗначенияСвойств(ПараметрыРазузлования, Родитель);
	
	ТаблицаМатериалов = МатериалыСпецификации(ПараметрыРазузлования);
	
	ТекущиеЭлементы = Родитель.ПолучитьЭлементы();
	ТекущиеЭлементы.Очистить();
	
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		
		ПроизводитсяПоСпецификации = Строка.ПроизводитсяВПроцессе
			И Строка.СпособПолученияПолуфабриката = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации;
		
		Если Не Строка.ЗаказатьНаСклад И Не ПроизводитсяПоСпецификации
				Или Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТекущиеЭлементы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Выбран = Родитель.Выбран;
		
		Если НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно 
			Или ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) Тогда
			НоваяСтрока.Назначение = Родитель.Назначение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) Тогда
			НоваяСтрока.Спецификация = Строка.ИсточникПолученияПолуфабриката;
			НоваяСтрока.НомерКартинки = 6;
			ПустаяСтрока = НоваяСтрока.ПолучитьЭлементы().Добавить();
			ПустаяСтрока.ТипСтроки = -1;
		КонецЕсли;
		
	КонецЦикла;
	
	Родитель.Разузлован = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВыбранПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = ПолуфабрикатыИМатериалы.НайтиПоИдентификатору(Идентификатор);
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	ВыбратьИсключитьСтроки(ТекущиеДанные.Выбран, ТекущиеДанные.ПолучитьИдентификатор());
	
	Если Родитель <> Неопределено Тогда
		ОбновитьВыборРодительскихСтрок(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьИсключитьСтроки(Выбрать, Идентификатор = Неопределено)
	
	Если Идентификатор = Неопределено Тогда
		ТекущиеЭлементы = ПолуфабрикатыИМатериалы.ПолучитьЭлементы();
	Иначе
		
		ТекущаяСтрока = ПолуфабрикатыИМатериалы.НайтиПоИдентификатору(Идентификатор);
		
		Если ТекущаяСтрока.ПроизводитсяВПроцессе И ЗначениеЗаполнено(ТекущаяСтрока.Спецификация) И Не ТекущаяСтрока.Разузлован Тогда
			ПостроитьДеревоПродукции(ТекущаяСтрока);
		КонецЕсли;
		
		ТекущиеЭлементы = ТекущаяСтрока.ПолучитьЭлементы();
		
	КонецЕсли;
	
	Для Каждого Строка Из ТекущиеЭлементы Цикл
		Строка.Выбран = Выбрать;
		ВыбратьИсключитьСтроки(Выбрать, Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВыборРодительскихСтрок(Идентификатор)
	
	ТекущиеДанные = ПолуфабрикатыИМатериалы.НайтиПоИдентификатору(Идентификатор);
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеЭлементы = Родитель.ПолучитьЭлементы();
	
	ВыбраноСтрок = 0;
	ЕстьЧастичноВыбранныеСтроки = Ложь;
	Для Каждого Строка Из ТекущиеЭлементы Цикл
		Если Строка.Выбран = 1 Тогда
			ВыбраноСтрок = ВыбраноСтрок + 1;
		ИначеЕсли Строка.Выбран = 2 Тогда
			ЕстьЧастичноВыбранныеСтроки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбраноСтрок = ТекущиеЭлементы.Количество() Тогда
		Родитель.Выбран = 1;
	ИначеЕсли ВыбраноСтрок = 0 И Не ЕстьЧастичноВыбранныеСтроки Тогда
		Родитель.Выбран = 0;
	Иначе
		Родитель.Выбран = 2;
	КонецЕсли;
	
	ОбновитьВыборРодительскихСтрок(Родитель.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Функция МатериалыСпецификации(Параметры) Экспорт
	
	ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеОсновногоИзделияСпецификации(
		Параметры.Спецификация,
		Параметры.Номенклатура,
		Параметры.Характеристика);
		
	ДанныеПоНоменклатуре.Количество = Параметры.Количество;
	ДанныеПоНоменклатуре.Вставить("ДатаПотребности", Параметры.ДатаПотребности);
	ДанныеПоНоменклатуре.Вставить("Назначение", Параметры.Назначение);
	
	ПереченьДанных = Новый Массив;
	ПереченьДанных.Добавить("МатериалыИУслуги");
	
	ТабличныеЧасти = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(ДанныеПоНоменклатуре, , , ПереченьДанных);
	
	Возврат ТабличныеЧасти.МатериалыИУслуги;
	
КонецФункции

&НаСервере
Процедура ВыбратьИсключитьВыделенныеСтроки(Выбран)
	
	Строки = ПолуфабрикатыИМатериалы.ПолучитьЭлементы();
	Для Каждого Строка Из Строки Цикл
		
		Строка.Выбран = Выбран;
		
		ВыбратьИсключитьСтроки(Выбран, Строка.ПолучитьИдентификатор());
		ОбновитьВыборРодительскихСтрок(Строка.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	ОбновитьЗаказы = Истина;
	Если ЗаказыСформированы Тогда
		УдалитьСформированныеДокументы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСпискаМатериалов

&НаСервере
Процедура ЗаполнитьМатериалыНаСервере()
	
	Объект.Материалы.Очистить();
	ТаблицаМатериалов = Объект.Материалы.Выгрузить();
	
	Отказ = Ложь;
	ДобавитьМатериалыУровня(ПолуфабрикатыИМатериалы, ТаблицаМатериалов, Отказ);
	
	Если Отказ Тогда
		Объект.Материалы.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбновитьМатериалы = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаМатериалов.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалов.Характеристика КАК Характеристика,
	|	ТаблицаМатериалов.Упаковка КАК Упаковка,
	|	ТаблицаМатериалов.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаМатериалов.Количество КАК Количество,
	|	ТаблицаМатериалов.Подразделение КАК Подразделение,
	|	ТаблицаМатериалов.ДнейДоОкончания КАК ДнейДоОкончания,
	|	ТаблицаМатериалов.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ТаблицаМатериалов.Склад КАК Склад,
	|	ТаблицаМатериалов.ДатаПотребности КАК ДатаПотребности,
	|	ТаблицаМатериалов.Назначение КАК Назначение
	|ПОМЕСТИТЬ ВТМатериалы
	|ИЗ
	|	&ТаблицаМатериалов КАК ТаблицаМатериалов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТМатериалы.Номенклатура КАК Номенклатура,
	|	ВТМатериалы.Характеристика,
	|	ВТМатериалы.Упаковка,
	|	СУММА(ВТМатериалы.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ВТМатериалы.Количество) КАК Количество,
	|	ВТМатериалы.Подразделение,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВТМатериалы.ДатаПотребности, ДЕНЬ, -ВТМатериалы.ДнейДоОкончания), ДЕНЬ) > &НачалоТекущегоДня
	|				ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВТМатериалы.ДатаПотребности, ДЕНЬ, -ВТМатериалы.ДнейДоОкончания), ДЕНЬ)
	|			ИНАЧЕ &НачалоТекущегоДня
	|		КОНЕЦ) КАК ДатаОтгрузки,
	|	ВТМатериалы.Склад,
	|	ВТМатериалы.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ВЫБОР
	|		КОГДА ВТМатериалы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|			ТОГДА ВТМатериалы.Назначение
	|	КОНЕЦ КАК Назначение
	|ПОМЕСТИТЬ МатериалыКЗаказу
	|ИЗ
	|	ВТМатериалы КАК ВТМатериалы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТМатериалы.Номенклатура,
	|	ВТМатериалы.Характеристика,
	|	ВТМатериалы.Упаковка,
	|	ВТМатериалы.Подразделение,
	|	ВТМатериалы.Склад,
	|	ВТМатериалы.ВариантОбеспечения,
	|	ВЫБОР
	|		КОГДА ВТМатериалы.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|			ТОГДА ВТМатериалы.Назначение
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказМатериаловВПроизводствоТовары.Номенклатура,
	|	ЗаказМатериаловВПроизводствоТовары.Характеристика,
	|	ЗаказМатериаловВПроизводствоТовары.Ссылка.Склад,
	|	ЗаказМатериаловВПроизводствоТовары.Ссылка.Подразделение,
	|	СУММА(ЗаказМатериаловВПроизводствоТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ЗаказМатериаловВПроизводствоТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТЗаказы
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК ЗаказМатериаловВПроизводствоТовары
	|ГДЕ
	|	ЗаказМатериаловВПроизводствоТовары.Ссылка.ДокументОснование = &Заказ
	|	И НЕ ЗаказМатериаловВПроизводствоТовары.Ссылка В (&СписокЗаказов)
	|	И ЗаказМатериаловВПроизводствоТовары.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказМатериаловВПроизводствоТовары.Номенклатура,
	|	ЗаказМатериаловВПроизводствоТовары.Характеристика,
	|	ЗаказМатериаловВПроизводствоТовары.Ссылка.Склад,
	|	ЗаказМатериаловВПроизводствоТовары.Ссылка.Подразделение
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыКЗаказу.Номенклатура КАК Номенклатура,
	|	МатериалыКЗаказу.Характеристика,
	|	МатериалыКЗаказу.Упаковка,
	|	МатериалыКЗаказу.КоличествоУпаковок,
	|	МатериалыКЗаказу.Количество,
	|	МатериалыКЗаказу.Подразделение,
	|	МатериалыКЗаказу.ДатаОтгрузки,
	|	МатериалыКЗаказу.Склад,
	|	МатериалыКЗаказу.ВариантОбеспечения КАК ВариантОбеспечения,
	|	МатериалыКЗаказу.Назначение,
	|	ЕСТЬNULL(ВТЗаказы.КоличествоУпаковок, 0) КАК КоличествоУпаковокЗаказано,
	|	ЕСТЬNULL(ВТЗаказы.Количество, 0) КАК КоличествоЗаказано,
	|	МатериалыКЗаказу.КоличествоУпаковок - ЕСТЬNULL(ВТЗаказы.КоличествоУпаковок, 0) КАК КоличествоУпаковокЗаказать,
	|	МатериалыКЗаказу.Количество - ЕСТЬNULL(ВТЗаказы.Количество, 0) КАК КоличествоЗаказать,
	|	ВЫБОР
	|		КОГДА МатериалыКЗаказу.КоличествоУпаковок - ЕСТЬNULL(ВТЗаказы.КоличествоУпаковок, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выбран
	|ИЗ
	|	МатериалыКЗаказу КАК МатериалыКЗаказу
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаказы КАК ВТЗаказы
	|		ПО МатериалыКЗаказу.Номенклатура = ВТЗаказы.Номенклатура
	|			И МатериалыКЗаказу.Характеристика = ВТЗаказы.Характеристика
	|			И МатериалыКЗаказу.Склад = ВТЗаказы.Склад
	|			И МатериалыКЗаказу.Подразделение = ВТЗаказы.Подразделение
	|			И (&УчитыватьСуществующиеЗаказы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ТаблицаМатериалов",             ТаблицаМатериалов);
	Запрос.УстановитьПараметр("Заказ",                         Заказ);
	Запрос.УстановитьПараметр("СписокЗаказов",                 СформированныеДокументы.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("УчитыватьСуществующиеЗаказы",   УчитыватьСуществующиеЗаказы);
	Запрос.УстановитьПараметр("НачалоТекущегоДня",             НачалоТекущегоДня);
	
	Результат = Запрос.Выполнить();
	
	Объект.Материалы.Загрузить(Результат.Выгрузить());
	
	Действия = Новый Структура();
	Действия.Вставить(
		"ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		
	Действия.Вставить(
		"ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Материалы,
		Действия);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьМатериалыУровня(СтрокаДерева, ТаблицаМатериалов, Отказ = Ложь)
	
	ТекущиеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого Строка Из ТекущиеСтроки Цикл
		
		Если Строка.Выбран > 0 Тогда
			
			Если Строка.ПроизводитсяВПроцессе И Не ЗначениеЗаполнено(Строка.Спецификация) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Поле Спецификация не заполнено';uk='Поле Специфікація не заповнено'"),
					,
					"ПолуфабрикатыИМатериалы",
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не Строка.ПроизводитсяВПроцессе Тогда
				
				Если Не ЗначениеЗаполнено(Строка.Склад) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru='Поле Склад не заполнено';uk='Поле Склад не заповнено'"),
						,
						"ПолуфабрикатыИМатериалы",
						,
						Отказ);
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Строка.Подразделение) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Поле Подразделение не заполнено';uk='Поле Підрозділ не заповнено'"),
					,
					"ПолуфабрикатыИМатериалы",
					,
					Отказ);
					
				КонецЕсли;
			
				НоваяСтрока = ТаблицаМатериалов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьМатериалыУровня(Строка, ТаблицаМатериалов, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьМатериалыКЗаказу(Отметить, МассивСтрок)
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		ДанныеСтроки = Объект.Материалы.НайтиПоИдентификатору(Строка);
		ДанныеСтроки.Выбран = Отметить;
		
		Если ДанныеСтроки.Выбран Тогда
			ДанныеСтроки.КоличествоУпаковокЗаказать = ДанныеСтроки.КоличествоУпаковок - ДанныеСтроки.КоличествоУпаковокЗаказано;
			ДанныеСтроки.КоличествоЗаказать = ДанныеСтроки.Количество - ДанныеСтроки.КоличествоЗаказано;
		Иначе
			ДанныеСтроки.КоличествоУпаковокЗаказать = 0;
			ДанныеСтроки.КоличествоЗаказать = 0;
		КонецЕсли;

		
	КонецЦикла;
	
	ОбновитьЗаказы = Истина;
	
	Если ЗаказыСформированы Тогда
		УдалитьСформированныеДокументы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьПрошлыеЗаказыПриИзмененииНаСервере()
	
	УдалитьСформированныеДокументы();
	
	Если УчитыватьСуществующиеЗаказы Тогда
		ЗаполнитьМатериалыНаСервере();
	Иначе
		
		Для Каждого Строка Из Объект.Материалы Цикл
			
			Строка.КоличествоУпаковокЗаказано = 0;
			Строка.КоличествоЗаказано = 0;
			
			Строка.КоличествоУпаковокЗаказать = Строка.КоличествоУпаковок;
			Строка.КоличествоЗаказать = Строка.Количество;
			
			Строка.Выбран = Строка.КоличествоУпаковокЗаказать > 0;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДокументов

&НаСервере
Процедура СформироватьЗаказыНаСервере()
	
	Перем ТекСклад, ТекПодразделение, ДокОбъект, ЖелаемаяДатаОтгрузки, ДатаОтгрузки, НеОтгружатьЧастями;
	
	УдалитьСформированныеДокументы();
	
	ТаблицаМатериалов = Объект.Материалы.Выгрузить(Новый Структура("Выбран", Истина));
	ТаблицаМатериалов.Сортировать("Склад, Подразделение");
	
	РеквизитыШапки = Новый Структура("Дата, ЖелаемаяДатаОтгрузки, Организация, Подразделение,
		|Склад, ХозяйственнаяОперация, ДатаОтгрузки, ДокументОснование, НеОтгружатьЧастями, НеЗаполнятьВариантОбеспеченияПоУмолчанию");
	
	ТаблицаТовары = ТаблицаМатериалов.СкопироватьКолонки("Номенклатура, Характеристика, Назначение, 
		|Упаковка, КоличествоУпаковок, Количество, ДатаОтгрузки, ВариантОбеспечения");
	
	СообщенияОбОшибках = Новый Массив;
	СоответствиеЗаказов = Новый Соответствие;
	
	ДатаНовыхДокументов = ТекущаяДатаСеанса();
	
	Для Каждого Строка Из ТаблицаМатериалов Цикл
		
		Если ТекСклад <> Строка.Склад Или ТекПодразделение <> Строка.Подразделение Тогда
			
			Если ДокОбъект <> Неопределено Тогда
				
				РеквизитыШапки.ЖелаемаяДатаОтгрузки = ЖелаемаяДатаОтгрузки;
				РеквизитыШапки.ДатаОтгрузки         = ДатаОтгрузки;
				РеквизитыШапки.НеОтгружатьЧастями   = НеОтгружатьЧастями;
				
				ТаблицаТовары.Сортировать("Номенклатура, ДатаОтгрузки");
				ДанныеЗаполнения = Новый Структура("РеквизитыШапки, Товары", РеквизитыШапки, ТаблицаТовары);
				ДокОбъект.Заполнить(ДанныеЗаполнения);
				ЗаписатьДокумент(ДокОбъект, СообщенияОбОшибках);
				
				СформированныеДокументы.Добавить(ДокОбъект.Ссылка);
				
			КонецЕсли;
			
			ЖелаемаяДатаОтгрузки = Неопределено;
			ДатаОтгрузки = Неопределено;
			НеОтгружатьЧастями = Истина;
			
			ТаблицаТовары.Очистить();
			
			ДокОбъект = Документы.ЗаказМатериаловВПроизводство.СоздатьДокумент();
			ДокОбъект.УстановитьСсылкуНового(Документы.ЗаказМатериаловВПроизводство.ПолучитьСсылку(Новый УникальныйИдентификатор));
			
			ЗаполнитьЗначенияСвойств(РеквизитыШапки, Заказ, "Организация");
			ЗаполнитьЗначенияСвойств(РеквизитыШапки, Строка, "Подразделение, Склад");
			РеквизитыШапки.Дата                  = ДатаНовыхДокументов;
			РеквизитыШапки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство;
			РеквизитыШапки.ДокументОснование     = Заказ;
			
			ТекСклад         = Строка.Склад;
			ТекПодразделение = Строка.Подразделение;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Количество = Строка.КоличествоЗаказать;
		НоваяСтрока.КоличествоУпаковок = Строка.КоличествоУпаковокЗаказать;
		
		Если ЖелаемаяДатаОтгрузки = Неопределено Тогда
			ЖелаемаяДатаОтгрузки = Строка.ДатаОтгрузки;
		Иначе
			ЖелаемаяДатаОтгрузки = Мин(ЖелаемаяДатаОтгрузки, Строка.ДатаОтгрузки);
		КонецЕсли;
		
		Если ДатаОтгрузки = Неопределено Тогда
			ДатаОтгрузки = Строка.ДатаОтгрузки;
		КонецЕсли;
		
		Если ДатаОтгрузки <> Строка.ДатаОтгрузки Тогда
			НеОтгружатьЧастями = Ложь;
		КонецЕсли;
		
		СоответствиеЗаказов.Вставить(Строка.НомерСтроки, ДокОбъект.ПолучитьСсылкуНового());
		
	КонецЦикла;
	
	Если ДокОбъект <> Неопределено Тогда
		
		РеквизитыШапки.ЖелаемаяДатаОтгрузки = ЖелаемаяДатаОтгрузки;
		РеквизитыШапки.ДатаОтгрузки         = ДатаОтгрузки;
		РеквизитыШапки.НеОтгружатьЧастями   = НеОтгружатьЧастями;
		
		ТаблицаТовары.Сортировать("Номенклатура, ДатаОтгрузки");
		ДанныеЗаполнения = Новый Структура("РеквизитыШапки, Товары", РеквизитыШапки, ТаблицаТовары);
		ДокОбъект.Заполнить(ДанныеЗаполнения);
		ЗаписатьДокумент(ДокОбъект, СообщенияОбОшибках);
		
		СформированныеДокументы.Добавить(ДокОбъект.Ссылка);
		
	КонецЕсли;
	
	Если СформированныеДокументы.Количество() > 0 Тогда
		ЗаказыСформированы = Истина;
		ОбновитьЗаказы = Ложь;
	КонецЕсли;
	
	Для Каждого Сообщение Из СообщенияОбОшибках Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Материалы Цикл
		
		Строка.Заказ = СоответствиеЗаказов[Строка.НомерСтроки];
		
		Строка.КоличествоУпаковокЗаказано = Строка.КоличествоУпаковокЗаказано + Строка.КоличествоУпаковокЗаказать;
		Строка.КоличествоЗаказано = Строка.КоличествоЗаказано + Строка.КоличествоЗаказать;
		
		Строка.КоличествоУпаковокЗаказать = 0;
		Строка.КоличествоЗаказать = 0;
		
		Строка.Выбран = Ложь;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументов,
		"Ссылка",
		СформированныеДокументы,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДокумент(ДокОбъект, СообщенияОбОшибках)
	
	Если ДокОбъект.ПроверитьЗаполнение() Тогда
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЗаписьЖурналаРегистрации(НСтр("ru='Создание заказов на передачу в производство';uk='Створення замовлень на передачу у виробництво'"),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Ошибки = ПолучитьСообщенияПользователю(Истина);
	
	Для Каждого Ошибка Из Ошибки Цикл
		
		Ошибка.КлючДанных = ДокОбъект.Ссылка;
		СообщенияОбОшибках.Добавить(Ошибка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСформированныеДокументы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивОбъектов = СформированныеДокументы.ВыгрузитьЗначения();
	СформированныеДокументы.Очистить();
	
	ТабСсылок = НайтиПоСсылкам(МассивОбъектов);
	
	ТипСтрокой = "";
	//++ НЕ УТКА
	ТипСтрокой = "РегистрСведенийКлючЗаписи.ЗаданияКОтражениюВБюджетировании";
	//-- НЕ УТКА
	
	Сообщение = Новый СообщениеПользователю();
	ТекстСообщения = НСтр("ru='Имеются ссылки на объект %1 %2. Документ не удален';uk='Є посилання на об''єкт %1 %2. Документ не вилучено'");
	Для Каждого Ссылка из ТабСсылок Цикл
		
		Если Ссылка[0] <> Ссылка[1] Тогда
			
			// записи регистра ЗаданияКОтражениюВБюджетировании не учитываются
			Если ЗначениеЗаполнено(ТипСтрокой) И ТипЗнч(Ссылка[1]) = Тип(ТипСтрокой) Тогда
				
				Продолжить;
				
			// удаление назначения
			ИначеЕсли ТипЗнч(Ссылка[1]) = Тип("СправочникСсылка.Назначения") Тогда
				
				МассивНазачений = Новый Массив;
				МассивНазачений.Добавить(Ссылка[1]);
				ТабСсылокНазначения = НайтиПоСсылкам(МассивНазачений);
				ЕстьСсылкиНаНазначения = Ложь;
				
				Для Каждого СсылкаНазначения из ТабСсылок Цикл
					
					Если СсылкаНазначения[0] <> СсылкаНазначения[1] И 
						СсылкаНазначения[0] <> Ссылка[0] И
						ЗначениеЗаполнено(ТипСтрокой) И
						ТипЗнч(СсылкаНазначения[1]) <> Тип(ТипСтрокой) Тогда
						
						ЕстьСсылкиНаНазначения = Истина;
						
						Прервать;
					КонецЕсли
					
				КонецЦикла;
				
				Если Не ЕстьСсылкиНаНазначения Тогда
					МассивОбъектов.Добавить(Ссылка[1]);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					СокрЛП(Ссылка[0]),
					СокрЛП(Ссылка[1]));
			
			Сообщение.Сообщить();
			
			Индекс = МассивОбъектов.Найти(Ссылка[0]);
			Если Индекс <> Неопределено Тогда
				МассивОбъектов.Удалить(Индекс);
				СформированныеДокументы.Добавить(Ссылка[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьОбъекты(МассивОбъектов, Ложь);
	
	ЗаказыСформированы = Ложь;
	ОбновитьЗаказы = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументыНаСервере()
	УдалитьСформированныеДокументы();
	ЗаполнитьМатериалыНаСервере();
	Элементы.СписокДокументов.Обновить();
КонецПроцедуры

#КонецОбласти

#КонецОбласти
