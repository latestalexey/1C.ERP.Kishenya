#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ЗаполнитьВариантОбеспечения(Объект, Товары, Форма, Операция, ДанныеЗаполнения, ПараметрыУказанияСерий = Неопределено) Экспорт

	Документы.ЗаказНаПроизводство.УдалитьНедопустимыеДанныеЗаполнения(
		Операция, Товары, Ложь, ДанныеЗаполнения);
	
	Если Операция = "Заказ" Тогда
		ТаблицаОбеспеченияДругихСтрокПродукции = ДанныеЗаполнения.СкопироватьКолонки();
	КонецЕсли;

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы("КоличествоУпаковок");

	ДатаПоУмолчанию = Макс(НачалоДня(ТекущаяДата()), Объект.НачатьНеРанее);

	ТекСтрокаТовары = Неопределено;
	Идентификатор   = Неопределено;
	СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
	НовыеЗначения  = ОбеспечениеКлиентСервер.КлючОбеспечения();
	Счетчик = 0;
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл

		Если Операция = "Заказ" И СтрокаОбеспечения.Скрывать Тогда

			ЗаполнитьЗначенияСвойств(ТаблицаОбеспеченияДругихСтрокПродукции.Добавить(), СтрокаОбеспечения);
			Продолжить;

		КонецЕсли;

		//Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда
			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
				СтрокаТовары = Товары.НайтиПоИдентификатору(Идентификатор);
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;
			ОбработатьНовуюСтроку = Ложь;
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);
		Иначе
			ТекСтрокаТовары = Товары.Вставить(Товары.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ТекСтрокаТовары.КодСтроки = 0;
			ТекСтрокаТовары.КлючСвязи = Новый УникальныйИдентификатор;
			ОбработатьНовуюСтроку = Истина;
		КонецЕсли;
		
		//Заполнение полей обеспечения.
		ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);
		ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения, Склад");
		
		Если ТекСтрокаТовары.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа 
			И ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно;
		ИначеЕсли ТекСтрокаТовары.ПроизводствоНаСтороне
			И ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
		ИначеЕсли ТекСтрокаТовары.ПроизводствоНаСтороне
			И ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно;
		КонецЕсли;
		
		Если ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется 
			И ТекСтрокаТовары.ЗаказатьНаСклад Тогда
			ТекСтрокаТовары.ЗаказатьНаСклад = Ложь;
		ИначеЕсли ТекСтрокаТовары.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.НеТребуется 
			И НЕ ТекСтрокаТовары.ЗаказатьНаСклад 
			И ТекСтрокаТовары.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
			ТекСтрокаТовары.ЗаказатьНаСклад = Истина;
		КонецЕсли; 
		
		Если НЕ ТекСтрокаТовары.ЗаказатьНаСклад Тогда
			ТекСтрокаТовары.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
		Если ПланированиеПроизводстваКлиентСервер.НеобходимоОбновитьНазначениеВСтрокеТЧМатериалыИУслуги(
				ТекСтрокаТовары, СтарыеЗначения) Тогда
				
			ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслуги(
				ТекСтрокаТовары, Форма.ДанныеПродукции);
				
		КонецЕсли;
		
		Если СтрокаОбеспечения.Отгружено = 0 Тогда
			ТекСтрокаТовары.ДатаПотребности = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
		ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

	КонецЦикла;
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаПроизводство));
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;

	Если Операция = "Заказ" Тогда
		ИзмененныеСтроки = ЗаполнитьВариантОбеспеченияТаблицыФормы(
			Форма.ТаблицаДокументаДляОбеспечения, ТаблицаОбеспеченияДругихСтрокПродукции);

		ЗаполнитьСлужебныеРеквизиты(ИзмененныеСтроки);

	КонецЕсли;

	Возврат ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(Счетчик);

КонецФункции

// Возвращает текст запроса для получениях доступных назначений
//	Параметры:
//		ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаДоступныхНазначений(ПараметрыФормированияЗапроса) Экспорт
	
	Возврат Справочники.Назначения.ТекстЗапросаНазначенийРасширенный();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьВариантОбеспеченияТаблицыФормы(ТаблицаПриемник, ТаблицаИсточник)

	Идентификатор = Неопределено;
	ИзмененныеСтроки = Новый Массив();

	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл

		Если Идентификатор <> СтрокаИсточник.Идентификатор Тогда

			Идентификатор  = СтрокаИсточник.Идентификатор;
			СтрокаПриемник = ТаблицаПриемник.НайтиПоИдентификатору(Идентификатор);

		Иначе

			НоваяСтрока = ТаблицаПриемник.Вставить(ТаблицаПриемник.Индекс(СтрокаПриемник) + 1);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПриемник);
			СтрокаПриемник = НоваяСтрока;

		КонецЕсли;

		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник, "Количество, ВариантОбеспечения, Склад, ДатаОтгрузки");

		ИзмененныеСтроки.Добавить(СтрокаПриемник);

	КонецЦикла;

	Возврат ИзмененныеСтроки;

КонецФункции

Процедура УдалитьДанныеПолуфабрикатаИзСпецификации(КлючСвязи, Объект) Экспорт
	
	СтруктураОтбора = Новый Структура("КлючСвязиПолуфабрикат, ЭтапВыполнен", КлючСвязи, Ложь);
	
	НайденныеСтроки = Объект.Этапы.НайтиСтроки(СтруктураОтбора);
	
	МассивКлючейДляУдаления = Новый Массив;
	МассивКлючейДляПроверки = Новый Массив;
	
	// Этапы полуфабриката
	Для Каждого СтрокаЭтап из НайденныеСтроки Цикл
		МассивКлючейДляУдаления.Добавить(СтрокаЭтап.КлючСвязи);
		МассивКлючейДляПроверки.Добавить(СтрокаЭтап.КлючСвязи);
	КонецЦикла;
	
	СтруктураОтбора.Очистить();
	
	Пока МассивКлючейДляПроверки.Количество() > 0 Цикл
		
		СтруктураОтбора.Вставить("КлючСвязиЭтапы", МассивКлючейДляПроверки[0]);
		СтруктураОтбора.Вставить("ЭтапВыполнен", Ложь);
		
		НайденныеСтроки = Объект.Этапы.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаЭтап из НайденныеСтроки Цикл
			МассивКлючейДляУдаления.Добавить(СтрокаЭтап.КлючСвязи);
			МассивКлючейДляПроверки.Добавить(СтрокаЭтап.КлючСвязи);
		КонецЦикла;
		
		МассивКлючейДляПроверки.Удалить(0);
		
	КонецЦикла;
	
	СтруктураОтбора.Очистить();
	Для Каждого Ключ Из МассивКлючейДляУдаления Цикл
		
		СтруктураОтбора.Очистить();
		СтруктураОтбора.Вставить("КлючСвязи", Ключ);
		
		НайденныеСтроки = Объект.Этапы.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка из НайденныеСтроки Цикл
			Объект.Этапы.Удалить(Строка);
		КонецЦикла;
		
		СтруктураОтбора.Очистить();
		СтруктураОтбора.Вставить("КлючСвязиЭтапы", Ключ);
		
		НайденныеСтроки = Объект.ВидыРабочихЦентров.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка из НайденныеСтроки Цикл
			Объект.ВидыРабочихЦентров.Удалить(Строка);
		КонецЦикла;
		
		НайденныеСтроки = Объект.МатериалыИУслуги.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка из НайденныеСтроки Цикл
			Объект.МатериалыИУслуги.Удалить(Строка);
		КонецЦикла;
		
		НайденныеСтроки = Объект.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка из НайденныеСтроки Цикл
			Объект.ВыходныеИзделия.Удалить(Строка);
		КонецЦикла;
		
		НайденныеСтроки = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка из НайденныеСтроки Цикл
			Объект.ВозвратныеОтходы.Удалить(Строка);
		КонецЦикла;
		
		НайденныеСтроки = Объект.Трудозатраты.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка из НайденныеСтроки Цикл
			Объект.Трудозатраты.Удалить(Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	ПланированиеПроизводства.ПостроитьСтруктуруЭтапов(Объект.Этапы);
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизиты(МассивСтрок)

	Для Каждого Строка Из МассивСтрок Цикл

		Строка.Модифицирована = Истина;
		Если Не ЗначениеЗаполнено(Строка.КлючСвязи) Тогда
			Строка.КлючСвязи = Новый УникальныйИдентификатор();
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецЕсли