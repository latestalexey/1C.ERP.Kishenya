
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Обработка = РеквизитФормыВЗначение("Объект");
	
	ИнициализироватьКомпоновщикНастроек(Обработка);
	ВосстановитьНастройки();
	Параметры.ИспользуемыеЗначенияРеквизитов = Новый Структура("Сценарий, Подразделение");
	ЗаполнитьЗначенияСвойств(Параметры.ИспользуемыеЗначенияРеквизитов, Объект);
	ОтборПодразделения = ЗначениеЗаполнено(Объект.Подразделение);
	Элементы.Подразделение.Доступность = ОтборПодразделения = 1;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройки()

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаказНаПроизводство" Тогда
		
		ОбновитьНаСервере();
		
	ИначеЕсли ИмяСобытия = "УстановленОтбор_ФормированиеЗаказовНаПроизводствоПоПлану" Тогда
		
		ОбновитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ОтборПодразделения = 1 И НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Подразделение"" не заполнено';uk='Полі ""Підрозділ"" не заповнено'"),
			,
			"Объект.Подразделение",
			, 
			Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОкончаниеПериода) И Объект.ОкончаниеПериода < Объект.НачалоПериода Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Окончание периода должно быть больше начала периода.';uk='Закінчення періоду має бути більше початку періоду.'"),
			,
			"Объект.ОкончаниеПериода",
			, 
			Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	ЗаполнитьЗначенияСвойств(ОБъект, ГраницыПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	ЗаполнитьЗначенияСвойств(ОБъект, ГраницыПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	ЗаполнитьЗначенияСвойств(Объект, ГраницыПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделенияПриИзменении(Элемент)
	
	Элементы.Подразделение.Доступность = ОтборПодразделения = 1;
	Если ОтборПодразделения = 0 Тогда
		Объект.Подразделение = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормированиеЗаказов

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	КлючСтроки = Новый Структура();
	КлючСтроки.Вставить("Номенклатура", 	ТекСтрока.Номенклатура);
	КлючСтроки.Вставить("Характеристика", 	ТекСтрока.Характеристика);
	КлючСтроки.Вставить("Спецификация", 	ТекСтрока.Спецификация);
	КлючСтроки.Вставить("НачалоПериода", 	ТекСтрока.НачалоПериодаВыпуска);
	КлючСтроки.Вставить("ОкончаниеПериода", КонецДня(ТекСтрока.ДатаВыпуска));
	
	КлючСтроки.Вставить("Подразделение", 	Параметры.ИспользуемыеЗначенияРеквизитов.Подразделение);
	КлючСтроки.Вставить("Сценарий", 		Параметры.ИспользуемыеЗначенияРеквизитов.Сценарий);
	
	СписокДокументов = ПолучитьСписокПлановПоСтроке(КлючСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаПланаИзСписка", ЭтотОбъект);
	СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите документ';uk='Виберіть документ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	КлючСтроки = Новый Структура();
	КлючСтроки.Вставить("Номенклатура", 	ТекСтрока.Номенклатура);
	КлючСтроки.Вставить("Характеристика", 	ТекСтрока.Характеристика);
	КлючСтроки.Вставить("Спецификация", 	ТекСтрока.Спецификация);
	КлючСтроки.Вставить("НачалоПериодаВыпуска", ТекСтрока.НачалоПериодаВыпуска);
	КлючСтроки.Вставить("ДатаВыпуска", КонецДня(ТекСтрока.ДатаВыпуска));
	
	КлючСтроки.Вставить("Подразделение", 	Параметры.ИспользуемыеЗначенияРеквизитов.Подразделение);
	
	СписокДокументов = ПолучитьСписокЗаказовПоСтроке(КлючСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаЗаказаИзСписка", ЭтотОбъект);
	СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите документ';uk='Виберіть документ'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура СоздатьЗаказ(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ФормированиеЗаказовНаПроизводствоПоПлану.Форма.Команда.СоздатьЗаказ");
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ФормированиеЗаказов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В таблице нет ни одной строки. Необходимо заполнить таблицу.';uk='У таблиці немає жодного рядка. Необхідно заповнити таблицю.'"));
		Возврат;
	КонецЕсли;
	
	РеквизитыШапки = Новый Структура("Подразделение", Объект.Подразделение);
	РеквизитыШапки.Вставить("Комментарий", 
		НСтр("ru='Сформирован автоматически обработкой ""Формирование заказов на производство по плану"".';uk='Сформований автоматично обробкою ""Формування замовлень на виробництво за планом"".'"));
	АдресПродукция = ПоместитьПродукциюВоВременноеХранилище();
	Если АдресПродукция = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В таблице нет ни одной отмеченной строки. Отметьте строки с ненулевым количеством для включения в заказ.';uk='У таблиці немає жодного відміченого рядка. Позначте рядки з ненульовою кількістю для включення до замовлення.'"));
		Возврат;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура("Основание", Новый Структура("АдресПродукция, РеквизитыШапки", АдресПродукция, РеквизитыШапки));
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьНоменклатуру(Команда)
	
	ПараметрыФормы = Новый Структура("КомпоновщикНастроек", КомпоновщикНастроек);
	ОткрытьФорму("Обработка.ФормированиеЗаказовНаПроизводствоПоПлану.Форма.ФормаОтбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ФормированиеЗаказовНаПроизводствоПоПлану.Форма.Команда.Заполнить");
	
	Если ПроверитьЗаполнение() Тогда
		
		Если Объект.ФормированиеЗаказов.Количество() > 0 Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Неопределено;

			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), НСтр("ru='В таблице имеются строки. При заполнении строки будут очищены. Продолжить?';uk='В таблиці є рядки. При заповненні рядка будуть очищені. Продовжити?'"), Режим, 0);
            Возврат;
		КонецЕсли;
		ЗаполнитьФрагмент();

		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФрагмент()
    
    Перем ТекстОшибки;
    
    Объект.ФормированиеЗаказов.Очистить();
    ОбновитьНаСервере();
    Если Объект.ФормированиеЗаказов.Количество() = 0 Тогда
        ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
        НСтр("ru='В периоде (%1 - %2) нет утвержденного плана для сценария %3, соответствующего установленным отборам.';uk='У періоді (%1 - %2) немає затвердженого плану для сценарію %3, що відповідає встановленому відбору.'"),
        Формат(Объект.НачалоПериода,"ДЛФ=D"),
        Формат(Объект.ОкончаниеПериода,"ДЛФ=D"),
        Объект.Сценарий);
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
    КонецЕсли;
    ЗаполнитьЗначенияСвойств(Параметры.ИспользуемыеЗначенияРеквизитов, Объект);

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ПереключитьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ПереключитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьИнтервалЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоПериода", "ОкончаниеПериода"),
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ФормированиеЗаказовХарактеристика",
																		     "Объект.ФормированиеЗаказов.ХарактеристикиИспользуются");

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(Период, ДополнительныеПараметры) Экспорт 
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	ЗаполнитьЗначенияСвойств(Объект, ГраницыПериода);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьНачалоОкончаниеПериодаПлана(Знач Сценарий, Знач ДатаНачала, Знач ДатаОкончания)

	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "Периодичность");
	
	НоваяДатаНачала = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуНачалаПериода(ДатаНачала, Периодичность);
	НоваяДатаОкончания = ПланированиеКлиентСерверПовтИсп.РассчитатьДатуОкончанияПериода(ДатаОкончания, Периодичность);
	
	ГраницыПериода = Новый Структура();
	ГраницыПериода.Вставить("ДатаНачала", ?(ЗначениеЗаполнено(ДатаНачала), НоваяДатаНачала, ДатаНачала));
	ГраницыПериода.Вставить("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания), НоваяДатаОкончания, ДатаОкончания));
	
	Возврат ГраницыПериода;
	
КонецФункции

#Область ПроцедурыРаботыСНастройкамиПользователя

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек(Обработка)
	
	СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("МакетКомпоновки");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	
КонецПроцедуры //ИнициализироватьКомпоновщикНастроек()

&НаСервере
Функция ПолучитьЗапросСОтборамиКомпоновкиДанных()
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , , Ложь, );
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	Для каждого ПараметрКомпоновки из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		
		Запрос.УстановитьПараметр(ПараметрКомпоновки.Имя, ПараметрКомпоновки.Значение);
		
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции 

&НаСервере
Процедура СохранитьНастройки()
	
	Настройки = Новый Структура("ПользовательскиеНастройки, Сценарий, НачалоПериода, ОкончаниеПериода, Подразделение", КомпоновщикНастроек.ПользовательскиеНастройки, Объект.Сценарий, Объект.НачалоПериода, Объект.ОкончаниеПериода, Объект.Подразделение);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ФормированиеЗаказовНаПроизводствоПоПлану", "Настройки", Настройки);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ФормированиеЗаказовНаПроизводствоПоПлану", "Настройки");
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда

		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ЗначениеНастроек.ПользовательскиеНастройки);
		ЗначениеНастроек.Свойство("Сценарий", 			Объект.Сценарий);
		ЗначениеНастроек.Свойство("НачалоПериода", 		Объект.НачалоПериода);
		ЗначениеНастроек.Свойство("ОкончаниеПериода", 	Объект.ОкончаниеПериода);
		ЗначениеНастроек.Свойство("Подразделение", 		Объект.Подразделение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаСервере
Функция ПоместитьПродукциюВоВременноеХранилище()
	
	ТаблицаФормированиеЗаказов = Объект.ФормированиеЗаказов.Выгрузить();
	
	ТаблицаТоваров = ТаблицаФормированиеЗаказов.СкопироватьКолонки();
	
	Для Каждого СтрокаЗаказа Из ТаблицаФормированиеЗаказов Цикл
		
		Если Не СтрокаЗаказа.ОтметитьКЗаказу ИЛИ СтрокаЗаказа.КоличествоУпаковок = 0 Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрокаПродукция = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПродукция, СтрокаЗаказа);
	КонецЦикла;
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	// Изменим имена колонок на нужные названия табличной части "Продукция"
	ТаблицаТоваров.Колонки.НачалоПериодаВыпуска.Имя = "НачатьНеРанее";
	ТаблицаТоваров.Колонки.ДатаВыпуска.Имя          = "ДатаПотребности";
	
	// Все заказы должна создаваться текущей датой, чтобы учесть длительность производства
	// из параметров обеспечения потребностей.
	ТаблицаТоваров.ЗаполнитьЗначения(ТекущаяДатаСеанса(), "НачатьНеРанее");
	
	АдресПродукция = ПоместитьВоВременноеХранилище(ТаблицаТоваров, УникальныйИдентификатор);
	
	Возврат АдресПродукция; 
	
КонецФункции

&НаСервере 
Процедура ПереключитьФлажки(Устанавливать)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если Устанавливать И НЕ СтрокаТаблицы.ОтметитьКЗаказу И СтрокаТаблицы.КоличествоУпаковок > 0 Тогда
			
			СтрокаТаблицы.ОтметитьКЗаказу = Истина;
			
		ИначеЕсли Не Устанавливать И СтрокаТаблицы.ОтметитьКЗаказу Тогда
			
			СтрокаТаблицы.ОтметитьКЗаказу = Ложь;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных();
	Запрос.УстановитьПараметр("НачалоПериода", 		Объект.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", 	Объект.ОкончаниеПериода);
	Запрос.УстановитьПараметр("Сценарий", 			Объект.Сценарий);
	Запрос.УстановитьПараметр("Подразделение", 		Объект.Подразделение);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Объект.ФормированиеЗаказов.Загрузить(Результат.Выгрузить());
		
		Для Каждого СтрокаЗаказа ИЗ Объект.ФормированиеЗаказов Цикл
			СтрокаЗаказа.Период.ДатаНачала    = СтрокаЗаказа.НачалоПериодаВыпуска;
			СтрокаЗаказа.Период.ДатаОкончания = СтрокаЗаказа.ДатаВыпуска;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПлановПоСтроке(КлючСтроки)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланыПроизводстваОбороты.КоличествоОборот КАК Количество,
	|	ПланыПроизводстваОбороты.Регистратор КАК Документ,
	|	ПланыПроизводстваОбороты.ПланПроизводства.МоментВремени КАК МоментВремени,
	|	ПланыПроизводстваОбороты.ПланПроизводства.Дата КАК ДатаДокумента,
	|	ПланыПроизводстваОбороты.ПланПроизводства.Номер КАК НомерДокумента
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства.Обороты(
	|			&НачалоПериода,
	|			&ОкончаниеПериода,
	|			Регистратор,
	|			Сценарий = &Сценарий
	|				И Подразделение = &Подразделение
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И Спецификация = &Спецификация) КАК ПланыПроизводстваОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПроизводства КАК ДокПланПроизводства
	|		ПО ПланыПроизводстваОбороты.Регистратор = ДокПланПроизводства.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени";
	
	Для Каждого Свойство Из КлючСтроки Цикл
		
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (№ %2 от %3)';uk='%1 (№ %2 від %3)'"), 
				Формат(Выборка.Количество, "ЧДЦ=3"), Выборка.НомерДокумента, 
				Формат(Выборка.ДатаДокумента, "ДЛФ=D"));
		СписокДокументов.Добавить(Выборка.Документ, ДокументПредставление);
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокЗаказовПоСтроке(КлючСтроки)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка КАК Документ,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Дата КАК ДатаДокумента,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Номер КАК НомерДокумента,
	|	СУММА(ЗаказНаПроизводствоПродукция.Количество) КАК Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка.Проведен
	|	И ВЫБОР
	|			КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаПроизводствоПродукция.Ссылка.Подразделение = &Подразделение
	|		КОНЕЦ
	|	И ЗаказНаПроизводствоПродукция.ДатаПотребности МЕЖДУ &НачалоПериодаВыпуска И &ДатаВыпуска
	|	И ЗаказНаПроизводствоПродукция.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан)
	|	И ЗаказНаПроизводствоПродукция.Номенклатура = &Номенклатура
	|	И ЗаказНаПроизводствоПродукция.Характеристика = &Характеристика
	|	И ЗаказНаПроизводствоПродукция.Количество <> 0
	|	И ВЫБОР
	|			КОГДА &Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЗаказНаПроизводствоПродукция.Спецификация = &Спецификация
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказНаПроизводствоПродукция.Ссылка,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Дата,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Номер";
	
	Для Каждого Свойство Из КлючСтроки Цикл
		
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (№ %2 от %3)';uk='%1 (№ %2 від %3)'"), 
				Формат(Выборка.Количество, "ЧДЦ=3"), Выборка.НомерДокумента, 
				Формат(Выборка.ДатаДокумента, "ДЛФ=D"));
		СписокДокументов.Добавить(Выборка.Документ, ДокументПредставление);
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаКлиенте
Процедура ВыборДокументаПланаИзСписка(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если Не РезультатВыбора = Неопределено Тогда 
		
		Документ = РезультатВыбора.Значение;
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		ОткрытьФорму("Документ.ПланПроизводства.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаЗаказаИзСписка(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если Не РезультатВыбора = Неопределено Тогда 
		
		Документ = РезультатВыбора.Значение;
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		ОткрытьФорму("Документ.ЗаказнаПроизводство.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#КонецОбласти
