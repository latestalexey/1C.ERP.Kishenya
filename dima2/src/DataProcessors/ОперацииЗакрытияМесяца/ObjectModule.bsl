#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Метод возвращает массив этапов к расчету,
// упорядоченных по приоритету выполнения (номеру индекса).
// Элементы с большим индексом зависят от элементов с меньшим индексом.
// Для добавления нового этапа необходимо добавить новый элемент в массив
// и прописать вызов соответствующего метода в методе ВыполнитьЭтапыРасчета()
Функция ЭтапыКРасчету() Экспорт
	КРасчету = Новый Массив();
	
	
	
	
#Область ЭтапыЗапускаютсяВручную	
	КРасчету.Добавить("ИсправлениеОтрицательныхОстатков");
	КРасчету.Добавить("РаспределениеРБП");
	
	//++ НЕ УТ
	КРасчету.Добавить("СписаниеЗатратНаВыпуск");
	КРасчету.Добавить("РаспределениеМатериаловРаботНаПродукцию");
	КРасчету.Добавить("НастройкаПоказателейРаспределенияРасходов");
	//-- НЕ УТ
	
	КРасчету.Добавить("ПередачаТоваров");
	КРасчету.Добавить("ОтчетыПоКомиссииИнтеркампани");
	КРасчету.Добавить("ОтчетыКомитентамОСписании");
#КонецОбласти //ЭтапыЗапускаютсяВручную

	КРасчету.Добавить("РасчетыСПартнерами");
	КРасчету.Добавить("ПереоценкаДенежныхСредств");
	КРасчету.Добавить("НачисленияПоКредитамДепозитам");
	КРасчету.Добавить("АннулированиеПодарочныхСертификатов");
	КРасчету.Добавить("ОтражениеЗарплаты");
	КРасчету.Добавить("АмортизацияОСиНМА");
	//++ НЕ УТКА
	КРасчету.Добавить("АмортизацияОСиНМАМеждународный");
	//-- НЕ УТКА
	
	//++ НЕ УТ
	КРасчету.Добавить("РаспределениеРасходов");
	//-- НЕ УТ
	
	КРасчету.Добавить("ПартииТоваров");
	
	КРасчету.Добавить("РасходыНаПродукцию");
	
	КРасчету.Добавить("Себестоимость");
	
//++ НЕ УТ	
	КРасчету.Добавить("КорректировкаНалоговогоНазначенияКапитальныхИнвестиций");
//-- НЕ УТ
	
	КРасчету.Добавить("УсловныеПродажи");

//++ НЕ УТ	    
    КРасчету.Добавить("ПерерасчетПропорциональногоНДС");
    КРасчету.Добавить("КорректировкаУсловныхПродажПоПропорциональномуНДС");
//-- НЕ УТ    
	
	КРасчету.Добавить("РаспределениеДоходовРасходов");
	
//++ НЕ УТ	
	КРасчету.Добавить("РеглУчет");
	КРасчету.Добавить("РасчетКурсовыхРазницРегл");
	КРасчету.Добавить("ФинансовыйРезультат");
	//++ НЕ УТКА
	КРасчету.Добавить("МеждународныйУчет");
	//-- НЕ УТКА
//-- НЕ УТ
	Возврат КРасчету;
	
КонецФункции

// Метод возвращает массив этапов, исключаемых из расчета.
Функция ОтключенныеЭтапы(Критерии = Неопределено) Экспорт
	
	
	Если Критерии = Неопределено Тогда
		 Критерии = ПолучитьКритерии();
	КонецЕсли;
	ОтключенныеЭтапы = Новый Массив();
	
	//++ НЕ УТ
	//-- НЕ УТ
	ОтключенныеЭтапы.Добавить("ПомощникПоУчетуНДС");
	ОтключенныеЭтапы.Добавить("НачислениеОО");
	//++ НЕ УТКА
	Если НЕ Критерии.ИспользоватьМеждународныйУчет Тогда
		ОтключенныеЭтапы.Добавить("АмортизацияОСиНМАМеждународный");
	КонецЕсли;
	//-- НЕ УТКА
	ОтключенныеЭтапы.Добавить("ПогашениеСтоимостиТМЦ");
	ОтключенныеЭтапы.Добавить("НалогНаИмущество");
	ОтключенныеЭтапы.Добавить("ТранспортныйНалог");
	ОтключенныеЭтапы.Добавить("ЗемельныйНалог");
	ОтключенныеЭтапы.Добавить("ТорговыйСбор");
	//-- НЕ УТ
	//++ НЕ УТ
	ОтключенныеЭтапы.Добавить("ДолиСписанияКосвенныхРасходов");
	//-- НЕ УТ
	//  ОтключенныеЭтапы.Добавить("Себестоимость");
	Если НЕ Критерии.ФормироватьФинансовыйРезультат Тогда
		ОтключенныеЭтапы.Добавить("РаспределениеДоходовРасходов");
	КонецЕсли;
	//++ НЕ УТ
	ОтключенныеЭтапы.Добавить("СписаниеКосвенныхРасходов");
	ОтключенныеЭтапы.Добавить("РезервыПоДолгам");
	ОтключенныеЭтапы.Добавить("ФормированиеКУДиР");
	//-- НЕ УТ
    
	//++ НЕ УТКА
	Если НЕ Критерии.ИспользоватьМеждународныйУчет Тогда
		ОтключенныеЭтапы.Добавить("МеждународныйУчет");
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат ОтключенныеЭтапы;
	
КонецФункции

// Возвращает для указанного этапа его состояние.
Функция СостояниеЭтапа(ПредыдущиеЭтапы, ПараметрыРасчета, ИмяЭтапаРасчета) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если ИмяЭтапаРасчета = "ИсправлениеОтрицательныхОстатков" Тогда
		Состояние = СостояниеИсправлениеОтрицательныхОстатков(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПередачаТоваров" Тогда
		Состояние = СостояниеПередачаВозвратТоваров(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ОтчетыПоКомиссииИнтеркампани" Тогда
		Состояние = СостояниеОтчетыПоКомиссииИнтеркампани(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ОтчетыКомитентамОСписании" Тогда
		Состояние = СостояниеОтчетыКомитентамОСписании(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПомощникПоУчетуНДС" Тогда
		Состояние = СостояниеОперацииПоУчетуНДС(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РасчетыСПартнерами" Тогда
		Состояние = СостояниеРасчетыСПартнерами(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеРБП" Тогда
		Состояние = СостояниеРаспределениеРБП(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "НачисленияПоКредитамДепозитам" Тогда
		Состояние = СостояниеНачисленияПоКредитамДепозитам(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "АннулированиеПодарочныхСертификатов" Тогда
		Состояние = СостояниеАннулированиеПодарочныхСертификатов(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "ПартииТоваров" Тогда
		Состояние = СостояниеРасчетПартийТоваров(ПараметрыРасчета, ПредыдущиеЭтапы);
	//++ НЕ УТ
	ИначеЕсли ИмяЭтапаРасчета = "КорректировкаНалоговогоНазначенияКапитальныхИнвестиций" Тогда
		Состояние = СостояниеКорректировкаНалоговогоНазначенияКапитальныхИнвестиций(ПараметрыРасчета, ПредыдущиеЭтапы);
	//-- НЕ УТ	
	ИначеЕсли ИмяЭтапаРасчета = "Себестоимость" Тогда
		Состояние = СостояниеРасчетСебестоимости(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "ПереоценкаДенежныхСредств" Тогда
		Состояние = СостояниеПереоценкаДенежныхСредств(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеДоходовРасходов" Тогда
		Состояние = СостояниеРаспределениеДоходовРасходовПоНаправлениям(ПараметрыРасчета, ПредыдущиеЭтапы);
	//++ НЕ УТ
	ИначеЕсли ИмяЭтапаРасчета = "АмортизацияОСиНМА" Тогда
		Состояние = СостояниеАмортизацияОСиНМА(ПараметрыРасчета);
	//++ НЕ УТКА
	ИначеЕсли ИмяЭтапаРасчета = "АмортизацияОСиНМАМеждународный" Тогда
		Состояние = СостояниеАмортизацияОСиНМАМеждународный(ПараметрыРасчета);
	//-- НЕ УТКА
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеРасходов" Тогда
		Состояние = СостояниеНастройкаРаспределенияРасходов(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "НастройкаПоказателейРаспределенияРасходов" Тогда
		Состояние = СостояниеНастройкаПоказателейРаспределенияРасходов(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "СписаниеЗатратНаВыпуск" Тогда
		Состояние = СостояниеСписаниеЗатратНаВыпуск(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РаспределениеМатериаловРаботНаПродукцию" Тогда
		Состояние = СостояниеРаспределениеМатериаловИРаботНаПродукцию(ПараметрыРасчета);
	ИначеЕсли ИмяЭтапаРасчета = "РасходыНаПродукцию" Тогда
		Состояние = СостояниеРаспределениеРасходовНаПродукцию(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "РеглУчет" Тогда
		Состояние = СостояниеРеглУчет(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "РезервыПоДолгам" Тогда
		Состояние = СостояниеРезервыПоДолгам(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "РасчетКурсовыхРазницРегл" Тогда
		Состояние = СостояниеРасчетКурсовыхРазницРегл(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "ФинансовыйРезультат" Тогда
		Состояние = СостояниеФормированиеФинансовогоРезультата(ПараметрыРасчета, ПредыдущиеЭтапы);
	//++ НЕ УТКА
	ИначеЕсли ИмяЭтапаРасчета = "МеждународныйУчет" Тогда
		Состояние = СостояниеМеждународныйУчет(ПараметрыРасчета, ПредыдущиеЭтапы);
	//-- НЕ УТКА
	ИначеЕсли ИмяЭтапаРасчета = "НачислениеОО" Тогда
		Состояние = СостояниеНачислениеОО(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "ОтражениеЗарплаты" Тогда
		Состояние = СостояниеОтражениеЗарплаты(ПараметрыРасчета, ПредыдущиеЭтапы);
	//-- НЕ УТ
	ИначеЕсли ИмяЭтапаРасчета = "УсловныеПродажи" Тогда
		Состояние = СостояниеУсловныеПродажи(ПараметрыРасчета, ПредыдущиеЭтапы);
    //++ НЕ УТ
	ИначеЕсли ИмяЭтапаРасчета = "ПерерасчетПропорциональногоНДС" Тогда
		Состояние = СостояниеПерерасчетПропорциональногоНДС(ПараметрыРасчета, ПредыдущиеЭтапы);
	ИначеЕсли ИмяЭтапаРасчета = "КорректировкаУсловныхПродажПоПропорциональномуНДС" Тогда
		Состояние = СостояниеКорректировкаУсловныхПродажПоПропорциональномуНДС(ПараметрыРасчета, ПредыдущиеЭтапы);
    //-- НЕ УТ    
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Состояние;
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКритерии()
	Критерии = Новый Структура();
	Критерии.Вставить("УчитыватьПрочиеДоходыИРасходы", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	Критерии.Вставить("ФормироватьФинансовыйРезультат", ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат"));
	Критерии.Вставить("БазоваяВерсия", ПолучитьФункциональнуюОпцию("БазоваяВерсия"));
	Критерии.Вставить("ИспользоватьНесколькоВалют", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют"));
	Критерии.Вставить("ИспользоватьПодарочныеСертификаты", ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты"));
	Критерии.Вставить("ИспользоватьПартнеровКакКонтрагентов", ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов"));
	Критерии.Вставить("ИспользоватьКредитыДепозитыЗаймы", ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов"));
	//++ НЕ УТ
	//++ НЕ УТКА
	Критерии.Вставить("ИспользоватьМеждународныйУчет", ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет"));
	//-- НЕ УТКА
	Критерии.Вставить("ИспользоватьНачислениеЗарплаты", ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ"));
	Критерии.Вставить("ИспользоватьТорговыйСбор", ПолучитьФункциональнуюОпцию("УплачиваетсяТорговыйСбор"));
	//-- НЕ УТ
	Возврат Критерии;
КонецФункции
//++ НЕ УТ
Функция СписокПодразделений()
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия");
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

Функция РезультатТребуетсяРаспределениеРасходов(Период, СписокОрганизаций)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = Документы.РаспределениеПрочихЗатрат.ТекстЗапросаДанныеДляРаспределения() + "
	|ВЫБРАТЬ
	|	Таблица.СтатьяРасходов
	|ИЗ
	|	ВТДанныеДляРаспределения КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.СтатьяРасходов
	|ИЗ
	|	ВТДанныеДляРаспределения КАК Таблица
	|ГДЕ
	|	Таблица.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияРасходов.ТребуетсяНастройкаРаспределения)
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Период));
	Запрос.УстановитьПараметр("ГраницаДатаОкончания", Новый Граница(КонецМесяца(Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СписокОрганизаций",СписокОрганизаций);
	Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений());
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Ложь);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Ложь);
	Запрос.УстановитьПараметр("ФильтрПоСостоянию", Перечисления.СостоянияРаспределенияРасходов.ПустаяСсылка());
	
	Возврат Запрос.ВыполнитьПакет();	
КонецФункции
//-- НЕ УТ

#Область СостоянияЭтапов

Функция СостояниеИсправлениеОтрицательныхОстатков(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Остатки.Организация,
	|	Остатки.АналитикаУчетаНоменклатуры,
	|	Остатки.ВидЗапасов,
	|	Остатки.НомерГТД,
	|	Остатки.КоличествоОстаток
	|ПОМЕСТИТЬ
	|	НачОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&НачДата, Организация В (&МассивОрганизаций)) КАК Остатки
	|ГДЕ
	|	Остатки.КоличествоОстаток < 0
	|;
	|ВЫБРАТЬ
	|	Остатки.Организация,
	|	Остатки.АналитикаУчетаНоменклатуры,
	|	Остатки.ВидЗапасов,
	|	Остатки.НомерГТД
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&Граница, Организация В (&МассивОрганизаций)) КАК Остатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ НачОстатки КАК НачОстатки
	|		ПО НачОстатки.Организация = Остатки.Организация
	|		И НачОстатки.АналитикаУчетаНоменклатуры = Остатки.АналитикаУчетаНоменклатуры
	|		И НачОстатки.ВидЗапасов = Остатки.ВидЗапасов
	|		И НачОстатки.НомерГТД = Остатки.НомерГТД
	|ГДЕ
	|	Остатки.КоличествоОстаток < 0
	|	И Остатки.КоличествоОстаток <> ЕСТЬNULL(НачОстатки.КоличествоОстаток, 0)
	|");
	Запрос.УстановитьПараметр("НачДата", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("Граница", Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеПередачаВозвратТоваров(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КПередачеВозврату.АналитикаУчетаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&Граница) КАК КПередачеВозврату
	|ГДЕ
	|	(КПередачеВозврату.ОрганизацияВладелец В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И (КПередачеВозврату.КоличествоОстаток > 0
	|		ИЛИ КПередачеВозврату.ВозвращеноОстаток > 0)
	|");
	Запрос.УстановитьПараметр("Граница", Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеОтчетыПоКомиссииИнтеркампани(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОформлению.АналитикаУчетаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(&Граница) КАК КОформлению
	|ГДЕ
	|	КОформлению.АналитикаУчетаНоменклатуры.Склад В (&МассивОрганизаций)
	|		ИЛИ (&ПоВсемОрганизациям
	|				И КОформлению.АналитикаУчетаНоменклатуры.Склад ССЫЛКА Справочник.Организации)
	|	И (КОформлению.КоличествоОстаток > 0
	|		ИЛИ КОформлению.КоличествоСписаноОстаток > 0)
	|");
	Запрос.УстановитьПараметр("Граница", Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеОтчетыКомитентамОСписании(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОформлению.АналитикаУчетаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(&Граница) КАК КОформлению
	|ГДЕ
	|	(КОформлению.ВидЗапасов.Организация В (&МассивОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И НЕ (КОформлению.АналитикаУчетаНоменклатуры.Склад ССЫЛКА Справочник.Организации)
	|	И КОформлению.КоличествоСписаноОстаток > 0
	|");
	Запрос.УстановитьПараметр("Граница", Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРасчетыСПартнерами(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Расчеты.АналитикаУчетаПоПартнерам В(&МассивКлючейАналитики)
	|	И Расчеты.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расчеты.АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Расчеты.АналитикаУчетаПоПартнерам В (&МассивКлючейАналитики)
	|	И Расчеты.Активность");
	
	ПоляОтбора = Новый Структура("Организация, Партнер, Контрагент, Договор");
	ПоляОтбора.Организация = ПараметрыРасчета.СписокОрганизаций;
	АналитикиРасчета = РаспределениеВзаиморасчетов.АналитикиКРасчету(ПоляОтбора);
		
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("МассивКлючейАналитики", АналитикиРасчета);
	
	НачалоРасчета = РаспределениеВзаиморасчетов.НачалоРасчетов(КонецМесяца(ПараметрыРасчета.Период), АналитикиРасчета);
	Результат = Запрос.Выполнить();
	ТребуетсяПереоценка = Документы.ПереоценкаВалютныхСредств.ТребуетсяПереоценкаВзаиморасчетов(
							ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период, АналитикиРасчета);

	Если Результат.Пустой() И (НЕ ЗначениеЗаполнено(НачалоРасчета) ИЛИ НачалоРасчета > ПараметрыРасчета.Период) И НЕ ТребуетсяПереоценка Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Если НЕ ЗначениеЗаполнено(НачалоРасчета) ИЛИ НачалоРасчета > ПараметрыРасчета.Период И НЕ ТребуетсяПереоценка Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРаспределениеРБП(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Приходы.Организация,
		|	Приходы.НалоговоеНазначение,
		|	Приходы.Подразделение,
		|	Приходы.СтатьяРасходов,
		|	Приходы.АналитикаРасходов,
		|	СУММА(Приходы.Сумма) КАК Сумма,
		|	СУММА(Приходы.СуммаРегл) КАК СуммаРегл,
		|	СУММА(Приходы.СуммаРеглБезНДС) КАК СуммаРеглБезНДС,
		|	СУММА(Приходы.НДСРегл) КАК НДСРегл,
		|	СУММА(Приходы.ПостояннаяРазница) КАК ПостояннаяРазница,
		|	СУММА(Приходы.ВременнаяРазница) КАК ВременнаяРазница
		|ПОМЕСТИТЬ Приходы
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы КАК Приходы
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
		|	ПО Статьи.Ссылка = Приходы.СтатьяРасходов
		|		И Статьи.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|ГДЕ
		|	Приходы.Период <= &ДатаОкончания
		|	И Приходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И Приходы.Организация В (&СписокОрганизаций)
		|СГРУППИРОВАТЬ ПО
		|	Приходы.Организация,
		|	Приходы.НалоговоеНазначение,
		|	Приходы.Подразделение,
		|	Приходы.СтатьяРасходов,
		|	Приходы.АналитикаРасходов
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расходы.Организация,
		|	Расходы.НалоговоеНазначение,
		|	Расходы.Подразделение,
		|	Расходы.СтатьяРасходов,
		|	Расходы.АналитикаРасходов,
		|	СУММА(Расходы.Сумма) КАК Сумма,
		|	СУММА(Расходы.СуммаРегл) КАК СуммаРегл,
		|	СУММА(Расходы.СуммаРеглБезНДС) КАК СуммаРеглБезНДС,
		|	СУММА(Расходы.НДСРегл) КАК НДСРегл,
		|	СУММА(Расходы.ПостояннаяРазница) КАК ПостояннаяРазница,
		|	СУММА(Расходы.ВременнаяРазница) КАК ВременнаяРазница
		|ПОМЕСТИТЬ Расходы
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы КАК Расходы
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
		|	ПО Статьи.Ссылка = Расходы.СтатьяРасходов
		|		И Статьи.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|ГДЕ
		|	Расходы.Регистратор.Дата <= &ДатаОкончания
		|	И Расходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Расходы.Организация В (&СписокОрганизаций)
		|СГРУППИРОВАТЬ ПО
		|	Расходы.Организация,
		|	Расходы.НалоговоеНазначение,
		|	Расходы.Подразделение,
		|	Расходы.СтатьяРасходов,
		|	Расходы.АналитикаРасходов
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Приходы.Организация,
		|	Приходы.НалоговоеНазначение,
		|	Приходы.Подразделение,
		|	Приходы.СтатьяРасходов,
		|	Приходы.АналитикаРасходов,
		|	Приходы.Сумма - ЕСТЬNULL(Расходы.Сумма ,0) КАК Сумма,
		|	Приходы.СуммаРегл - ЕСТЬNULL(Расходы.СуммаРегл, 0) КАК СуммаРегл,
		|	Приходы.СуммаРеглБезНДС - ЕСТЬNULL(Расходы.СуммаРеглБезНДС, 0) КАК СуммаРеглБезНДС,
		|	Приходы.НДСРегл - ЕСТЬNULL(Расходы.НДСРегл, 0) КАК НДСРегл,
		|	Приходы.ПостояннаяРазница - ЕСТЬNULL(Расходы.ПостояннаяРазница, 0) КАК ПостояннаяРазница,
		|	Приходы.ВременнаяРазница - ЕСТЬNULL(Расходы.ВременнаяРазница, 0) КАК ВременнаяРазница
		|ИЗ
		|	Приходы КАК Приходы
		|	ЛЕВОЕ СОЕДИНЕНИЕ Расходы КАК Расходы
		|	ПО Расходы.Организация = Приходы.Организация
		|		И Расходы.НалоговоеНазначение = Приходы.НалоговоеНазначение
		|		И Расходы.Подразделение = Приходы.Подразделение
		|		И Расходы.СтатьяРасходов = Приходы.СтатьяРасходов
		|		И Расходы.АналитикаРасходов = Приходы.АналитикаРасходов
		|ГДЕ
		|	(Приходы.Сумма - ЕСТЬNULL(Расходы.Сумма, 0)) <> 0
		|	ИЛИ (Приходы.СуммаРегл - ЕСТЬNULL(Расходы.СуммаРегл, 0)) <> 0
		|	ИЛИ (Приходы.СуммаРеглБезНДС - ЕСТЬNULL(Расходы.СуммаРеглБезНДС, 0)) <> 0
		|	ИЛИ (Приходы.НДСРегл - ЕСТЬNULL(Расходы.НДСРегл, 0)) <> 0
		|	ИЛИ (Приходы.ПостояннаяРазница - ЕСТЬNULL(Расходы.ПостояннаяРазница ,0)) <> 0
		|	ИЛИ (Приходы.ВременнаяРазница - ЕСТЬNULL(Расходы.ВременнаяРазница, 0)) <> 0
		|");
		
		Граница = Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
		УстановитьПривилегированныйРежим(Истина);
		Если Запрос.Выполнить().Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
		
	Возврат Состояние;
	
КонецФункции

Функция СостояниеНачисленияПоКредитамДепозитам(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	График.ВариантГрафика КАК ВариантГрафика 
	|ИЗ
	|	РегистрСведений.ГрафикНачисленийКредитовИДепозитов КАК График
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И График.ВариантГрафика.Используется
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	График.ВариантГрафика КАК ВариантГрафика
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК График
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И График.ВариантГрафика.Используется
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	Договор.Организация В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Договор.Ссылка КАК Договор,
	|	График.Проценты КАК ПроцентНачисленияПлан,
	|	График.Комиссия КАК КомиссияНачисленияПлан,
	|	0 КАК ПроцентНачисленияФакт,
	|	0 КАК КомиссияНачисленияФакт
	|ПОМЕСТИТЬ втПланФактРазвернуто
	|ИЗ
	|	РегистрСведений.ГрафикНачисленийКредитовИДепозитов КАК График
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договор
	|	ПО График.ВариантГрафика.Владелец = Договор.Ссылка
	|		И Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И График.ВариантГрафика.Используется
	|		И График.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.Договор КАК Договор,
	|	0 КАК ПроцентНачисленияПлан,
	|	0 КАК КомиссияНачисленияПлан,
	|	ВЫБОР КОГДА Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|		ТОГДА Расчеты.СуммаВВалюте
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентНачисленияФакт,
	|	ВЫБОР КОГДА Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|		ТОГДА Расчеты.СуммаВВалюте
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КомиссияНачисленияФакт
	|ИЗ
	|	РегистрНакопления.РасчетыПоДоговорамКредитовИДепозитов КАК Расчеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК Договоры
	|	ПО Расчеты.Договор = Договоры.Ссылка
	|		И Договоры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|		И Расчеты.ТипГрафика = ЗНАЧЕНИЕ(Перечисление.ТипыГрафикаКредитовИДепозитов.Начисления)
	|		И Расчеты.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПланФакт.Договор КАК Договор,
	|	СУММА(втПланФакт.ПроцентНачисленияПлан) КАК ПроцентНачисленияПлан,
	|	СУММА(втПланФакт.КомиссияНачисленияПлан) КАК КомиссияНачисленияПлан,
	|	СУММА(втПланФакт.ПроцентНачисленияФакт) КАК ПроцентНачисленияФакт,
	|	СУММА(втПланФакт.КомиссияНачисленияФакт) КАК КомиссияНачисленияФакт
	|ПОМЕСТИТЬ втПланФакт
	|ИЗ
	|	втПланФактРазвернуто КАК втПланФакт
	|СГРУППИРОВАТЬ ПО
	|	втПланФакт.Договор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПланФакт.Договор КАК Договор,
	|	втПланФакт.ПроцентНачисленияПлан - втПланФакт.ПроцентНачисленияФакт КАК ОтклонениеПроцентаНачисления,
	|	втПланФакт.КомиссияНачисленияПлан - втПланФакт.КомиссияНачисленияФакт КАК ОтклонениеКомиссииНачисления
	|ИЗ
	|	втПланФакт КАК втПланФакт
	|ГДЕ
	|	втПланФакт.Договор.Организация В (&СписокОрганизаций)
	|	И (втПланФакт.ПроцентНачисленияПлан - втПланФакт.ПроцентНачисленияФакт > 0
	|		ИЛИ втПланФакт.КомиссияНачисленияПлан - втПланФакт.КомиссияНачисленияФакт > 0)
	|");
	
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СтатусДоговора", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли РезультатЗапроса[3].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеАннулированиеПодарочныхСертификатов(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЗакрытияМесяца.НеВыполнено) КАК СостояниеАннулирования
	|
	|ИЗ
	|	РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(&КонецПериода) КАК ИсторияСертификатов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ИсторияПодарочныхСертификатов КАК АктивацияСертификатов
	|	ПО
	|		ИсторияСертификатов.ПодарочныйСертификат = АктивацияСертификатов.ПодарочныйСертификат
	|		И АктивацияСертификатов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Активирован)
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ПодарочныеСертификаты КАК СправочникСертификаты
	|	ПО
	|		ИсторияСертификатов.ПодарочныйСертификат = СправочникСертификаты.Ссылка
	|ГДЕ
	|	АктивацияСертификатов.Регистратор.Организация В (&СписокОрганизаций)
	|	И ИсторияСертификатов.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПодарочныхСертификатов.Аннулирован)
	|	И ВЫБОР АктивацияСертификатов.ПодарочныйСертификат.Владелец.ПериодДействия
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ДЕНЬ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, НЕДЕЛЯ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, МЕСЯЦ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, КВАРТАЛ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ГОД, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ДЕКАДА, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА ДОБАВИТЬКДАТЕ(АктивацияСертификатов.Период, ПОЛУГОДИЕ, СправочникСертификаты.Владелец.КоличествоПериодовДействия)
	|			ИНАЧЕ АктивацияСертификатов.Период
	|		КОНЕЦ < &КонецПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно)
	|
	|ИЗ
	|	Документ.АннулированиеПодарочныхСертификатов КАК Аннулирование
	|
	|ГДЕ
	|	Аннулирование.Организация В (&СписокОрганизаций)
	|	И Аннулирование.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Аннулирование.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОперацийЗакрытияМесяца.НеТребуется)
	|");
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыРасчета.Период));
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СостояниеАннулирования;
КонецФункции

Функция СостояниеРасчетПартийТоваров(ПараметрыРасчета, ПредыдущиеЭтапы)
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьПартионныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет");
	Если ПредыдущиеЭтапы.РасчетыСПартнерами = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		ПараметрыДанных = Новый Структура("ПериодРасчета", КонецМесяца(ПараметрыРасчета.Период));
		ПараметрыДанных.Вставить("Организация", ПараметрыРасчета.СписокОрганизаций);
		ПараметрыДанных.Вставить("ПоВсемОрганизациям", Не ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
		СвязиОрганизаций = ПартионныйУчет.СвязиОрганизацийПоСхемеИнтеркампани(ПараметрыРасчета.Период, ПараметрыРасчета.СписокОрганизаций);
		ПартииАктуальны = ПартионныйУчет.НачалоПериодаРасчета(ПараметрыРасчета.Период, СвязиОрганизаций) > ПараметрыРасчета.Период;
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров КАК Таб
		|ГДЕ
		|	Таб.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрНакопления.ПартииПрочихРасходов КАК Таб
		|ГДЕ
		|	Таб.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрНакопления.ПартииПрочихРасходов КАК Расходы
		|ГДЕ
		|	Расходы.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|");
		
		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПараметрыРасчета.Период));
		Результат = Запрос.ВыполнитьПакет();
		НетЗаписейВПоследовательностяхВПериодеРегистрации = Результат[0].Пустой();
		НетПартийПрочихРасходов = Результат[1].Пустой();
		
		НеТребуетсяКорректировкаНДС = Истина;
		ВыполненаКорректировкаНДС = Истина;
		Если ПартииАктуальны
			И НетПартийПрочихРасходов  И НеТребуетсяКорректировкаНДС
			И НетЗаписейВПоследовательностяхВПериодеРегистрации
		Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		Иначе
			Если ПартииАктуальны
				И (НеТребуетсяКорректировкаНДС ИЛИ ВыполненаКорректировкаНДС)
			Тогда
				Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
				АктуализировалиПартииТоваров = Ложь;
			Иначе
				Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

//++ НЕ УТ
Функция СостояниеКорректировкаНалоговогоНазначенияКапитальныхИнвестиций(ПараметрыРасчета, ПредыдущиеЭтапы)	

	Если ПредыдущиеЭтапы.Себестоимость = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.Себестоимость = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций
	Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		Состояние = ЗакрытиеМесяцаУТВызовСервера.СостояниеКорректировкаНалоговогоНазначенияКапитальныхИнвестиций(ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период);
	КонецЕсли;
	Возврат Состояние;
КонецФункции
//-- НЕ УТ

Функция СостояниеРасчетСебестоимости(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Если ПредыдущиеЭтапы.ПартииТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		Состояние = ЗакрытиеМесяцаУТВызовСервера.СостояниеРасчетаСебестоимости(ПараметрыРасчета.СписокОрганизаций, ПараметрыРасчета.Период);
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеПереоценкаДенежныхСредств(ПараметрыРасчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|ГДЕ
	|	Задания.Месяц <= &КонецМесяца
	|	И Задания.Операция = &ОперацияПереоценки
	|	И (Задания.Организация В (&СписокОрганизаций)
	|		ИЛИ &ПоВсемОрганизациям)
	|");
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ОперацияПереоценки", Перечисления.ОперацииЗакрытияМесяца.ПереоценкаВалютныхСредств);
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Не ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	
	ЗаданияКРасчету = Запрос.Выполнить();
	Если НЕ ЗаданияКРасчету.Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		ХозОперации = Новый Массив;
		ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПереоценкаДенежныхСредств);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
			ХозОперации.Добавить(Перечисления.ХозяйственныеОперации.ПереоценкаКредитовИДепозитов);
		КонецЕсли;
		
		ЕстьВалютныеОстатки = Документы.ПереоценкаВалютныхСредств.ЕстьВалютныеОстатки(
			ПараметрыРасчета.СписокОрганизаций,
			КонецМесяца(ПараметрыРасчета.Период),
			ХозОперации);
		ТребуетсяПереоценка = Документы.ПереоценкаВалютныхСредств.ТребуетсяПереоценка(
			ПараметрыРасчета.СписокОрганизаций,
			КонецМесяца(ПараметрыРасчета.Период),
			ХозОперации);
			
		Если ЕстьВалютныеОстатки И НЕ ТребуетсяПереоценка Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРаспределениеДоходовРасходовПоНаправлениям(ПараметрыРасчета, ПредыдущиеЭтапы)
    Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") И (ПредыдущиеЭтапы.Свойство("УсловныеПродажи") И ПредыдущиеЭтапы.УсловныеПродажи = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено) Тогда
        Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
    ИначеЕсли ПредыдущиеЭтапы.Свойство("КорректировкаУсловныхПродажПоПропорциональномуНДС") И ПредыдущиеЭтапы.КорректировкаУсловныхПродажПоПропорциональномуНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Расходы.Организация КАК Организация
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы.Обороты(
		|		&ДатаНачала,
		|		&ГраницаДатаОкончания,
		|		,
		|		Организация В (&СписокОрганизаций)
		|	) КАК Расходы
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
		|	ПО Расходы.СтатьяРасходов = Статьи.Ссылка
		|		И (Статьи.ВариантРаспределенияРасходов = 
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности))
		|ГДЕ
		|	Расходы.СуммаПриход <> 0
		|	ИЛИ Расходы.СуммаРасход <> 0
		|	ИЛИ Расходы.СуммаРеглПриход <> 0
		|	ИЛИ Расходы.СуммаРеглРасход <> 0
		|	ИЛИ Расходы.СуммаРеглБезНДСПриход <> 0
		|	ИЛИ Расходы.СуммаРеглБезНДСРасход <> 0
		|	ИЛИ Расходы.НДСРеглПриход <> 0
		|	ИЛИ Расходы.НДСРеглРасход <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Доходы.Организация
		|ИЗ
		|	РегистрНакопления.ПрочиеДоходы.Обороты(
		|		&ДатаНачала,
		|		&ГраницаДатаОкончания,
		|		,
		|		Организация В (&СписокОрганизаций)
		|	) КАК Доходы
		|ГДЕ
		|	Доходы.СуммаПриход <> 0
		|	ИЛИ Доходы.СуммаРасход <> 0
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расходы.Организация
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы.Остатки(
		|		&ГраницаДатаОкончания,
		|		Организация В (&СписокОрганизаций)
		|	) КАК Расходы
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
		|	ПО Расходы.СтатьяРасходов = Статьи.Ссылка
		|		И (Статьи.ВариантРаспределенияРасходов = 
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности))
		|ГДЕ
		|	Расходы.СуммаОстаток <> 0
		|	ИЛИ Расходы.СуммаРеглОстаток <> 0
		|	ИЛИ Расходы.СуммаРеглБезНДСОстаток <> 0
		|	ИЛИ Расходы.НДСРеглОстаток <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Доходы.Организация
		|ИЗ
		|	РегистрНакопления.ПрочиеДоходы.Остатки(
		|		&ГраницаДатаОкончания,
		|		Организация В (&СписокОрганизаций)
		|	) КАК Доходы
		|ГДЕ
		|	Доходы.СуммаОстаток <> 0
		|");
		
		Граница = Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("ГраницаДатаОкончания", Граница);
		Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
		Результат = Запрос.ВыполнитьПакет();
		
		Если Результат[0].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		ИначеЕсли Результат[1].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		ИначеЕсли НЕ Результат[1].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеОперацииПоУчетуНДС(ПараметрыРасчета)
	
	Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	
	Возврат Состояние;
	
КонецФункции

//++ НЕ УТ
#Область НЕ_УТ

Функция СостояниеАмортизацияОСиНМА(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеАмортизации.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		&НачалоПериода,
	|		Организация В (&СписокОрганизаций)
	|	) КАК НачислениеАмортизации
	|ГДЕ
	|	НачислениеАмортизации.НачислятьАмортизацию
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СведенияНМА.НематериальныйАктив
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|		&НачалоПериода,
	|		Организация В (&СписокОрганизаций)
	|	) КАК СведенияНМА
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних КАК СостоянияНМА
	|	ПО СведенияНМА.НематериальныйАктив = СостоянияНМА.НематериальныйАктив
	|		И (СведенияНМА.НачислятьАмортизацию)
	|		И (СостоянияНМА.Состояние = &Состояние)
	|ГДЕ
	|	СведенияНМА.НачислятьАмортизацию
	|	И СостоянияНМА.Состояние = &Состояние
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АмортизацияОС.Ссылка
	|ИЗ
	|	Документ.АмортизацияОС КАК АмортизацияОС
	|ГДЕ
	|	АмортизацияОС.Проведен
	|	И АмортизацияОС.Организация В(&СписокОрганизаций)
	|	И АмортизацияОС.Дата >= &НачалоПериода
	|	И АмортизацияОС.Дата <= &КонецПериода
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АмортизацияНМА.Ссылка
	|ИЗ
	|	Документ.АмортизацияНМА КАК АмортизацияНМА
	|ГДЕ
	|	АмортизацияНМА.Проведен
	|	И АмортизацияНМА.Организация В(&СписокОрганизаций)
	|	И АмортизацияНМА.Дата >= &НачалоПериода
	|	И АмортизацияНМА.Дата <= &КонецПериода");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("Состояние", Перечисления.ВидыСостоянийНМА.ПринятКУчету);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
    Если РезультатЗапроса[0].Пустой() И РезультатЗапроса[1].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли (НЕ РезультатЗапроса[2].Пустой() Или РезультатЗапроса[0].Пустой())
		И (НЕ РезультатЗапроса[3].Пустой() Или РезультатЗапроса[1].Пустой())
	Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
    Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции
//++ НЕ УТКА
#Область НЕ_УТКА
Функция СостояниеАмортизацияОСиНМАМеждународный(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновныеСредства.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ОсновныеСредстваМеждународныйУчет.СрезПоследних(
	|		&КонецПериода,
	|		Организация В (&СписокОрганизаций)
	|	) КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Состояние = &Состояние
	|	И ОсновныеСредства.ПорядокУчета = &ПорядокУчета
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НематериальныеАктивы.НематериальныйАктив
	|ИЗ
	|	РегистрСведений.НематериальныеАктивыМеждународныйУчет.СрезПоследних(
	|		&КонецПериода,
	|		Организация В (&СписокОрганизаций)
	|	) КАК НематериальныеАктивы
	|ГДЕ
	|	НематериальныеАктивы.Состояние = &Состояние
	|	И НематериальныеАктивы.ПорядокУчета = &ПорядокУчета
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АмортизацияОС.Ссылка
	|ИЗ
	|	Документ.АмортизацияОСМеждународныйУчет КАК АмортизацияОС
	|ГДЕ
	|	АмортизацияОС.Проведен
	|	И АмортизацияОС.Организация В(&СписокОрганизаций)
	|	И АмортизацияОС.Дата >= &НачалоПериода
	|	И АмортизацияОС.Дата <= &КонецПериода
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АмортизацияНМА.Ссылка
	|ИЗ
	|	Документ.АмортизацияНМАМеждународныйУчет КАК АмортизацияНМА
	|ГДЕ
	|	АмортизацияНМА.Проведен
	|	И АмортизацияНМА.Организация В(&СписокОрганизаций)
	|	И АмортизацияНМА.Дата >= &НачалоПериода
	|	И АмортизацияНМА.Дата <= &КонецПериода");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("ПорядокУчета", Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	АмортизацияОСНачислена = НЕ РезультатЗапроса[2].Пустой() ИЛИ РезультатЗапроса[0].Пустой();// есть документы амортизации ОС или НЕ требуется
	АмортизацияНМАНачислена = НЕ РезультатЗапроса[3].Пустой() ИЛИ РезультатЗапроса[1].Пустой();// есть документы амортизации НМА или НЕ требуется
	
	// если нет документов принятия к учету 
	Если РезультатЗапроса[0].Пустой() И РезультатЗапроса[1].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли АмортизацияОСНачислена И АмортизацияНМАНачислена Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции
#КонецОбласти //НЕ_УТКА
//-- НЕ УТКА

Функция СостояниеНастройкаРаспределенияРасходов(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Результат = РезультатТребуетсяРаспределениеРасходов(ПараметрыРасчета.Период, ПараметрыРасчета.СписокОрганизаций);
	Если Результат[7].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли Результат[8].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
	
КонецФункции

Функция СостояниеНастройкаПоказателейРаспределенияРасходов(ПараметрыРасчета, ПредыдущиеЭтапы)
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатТребуетсяРаспределениеРасходов(ПараметрыРасчета.Период, ПараметрыРасчета.СписокОрганизаций);
	Если Результат[6].Пустой() Тогда
		Статус = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Показатели.Ссылка КАК Показатель
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов КАК Показатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейДляРаспределенияРасходов КАК ЗначенияЕжемесячно
		|		ПО Показатели.Ссылка = ЗначенияЕжемесячно.Показатель
		|			И (НАЧАЛОПЕРИОДА(ЗначенияЕжемесячно.Период, МЕСЯЦ) = &НачалоМесяца)
		|ГДЕ
		|	НЕ Показатели.ПометкаУдаления
		|	И ЗначенияЕжемесячно.Показатель ЕСТЬ NULL 
		|	И Показатели.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ВводитсяЕжемесячно)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Показатели.Ссылка
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов КАК Показатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейДляРаспределенияРасходов.СрезПоследних(&КонецМесяца, ) КАК ЗначенияПриИзменении
		|		ПО Показатели.Ссылка = ЗначенияПриИзменении.Показатель
		|ГДЕ
		|	НЕ Показатели.ПометкаУдаления
		|	И ЗначенияПриИзменении.Показатель ЕСТЬ NULL 
		|	И Показатели.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ВводитсяПриИзменении)
		|");
		Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ПараметрыРасчета.Период));
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеСписаниеЗатратНаВыпуск(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Распоряжения.КоличествоКонечныйОстаток, 0) КАК Остаток,
	|	ЕСТЬNULL(Распоряжения.КоличествоПриход, 0) КАК Оборот
	|ИЗ
	|	РегистрНакопления.РаспоряженияНаСписаниеПоНормативам.ОстаткиИОбороты(
	|		&НачалоПериода,
	|		&ОкончаниеПериода,
	|		Авто,
	|		,
	|		Организация В (&Организация)
	|		ИЛИ &ПоВсемОрганизациям
	|	) КАК Распоряжения
	|");

	Запрос.УстановитьПараметр("Организация",        ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ОкончаниеПериода",   КонецМесяца(ПараметрыРасчета.Период));
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Остаток > 0 Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли Выборка.Оборот > 0 Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРаспределениеМатериаловИРаботНаПродукцию(ПараметрыРасчета)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = Документы.РаспределениеПроизводственныхЗатрат.ТекстЗапросаЗаполнитьПроизводственныеЗатраты() + "
	|ВЫБРАТЬ
	|	ВТОстаткиОбороты.Номенклатура
	|ИЗ
	|	ВТОстаткиОбороты КАК ВТОстаткиОбороты
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ГраницаОкончаниеПериода", Новый Граница(КонецМесяца(ПериодРегистрации), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ВсеПодразделения", Истина);
	Запрос.УстановитьПараметр("Подразделение", СписокПодразделений());
	Запрос.УстановитьПараметр("Организация", ПараметрыРасчета.СписокОрганизаций);
	Результат = Запрос.ВыполнитьПакет();
	НеТребуется = Истина;
	ВсеРаспределено = Истина;
	Если НЕ Результат[7].Пустой() Тогда
		НеТребуется = Ложь;
		ТаблицаЗатрат = Результат[6].Выгрузить();
		Для Каждого Строка Из ТаблицаЗатрат Цикл
			Если НЕ Строка.Состояние Тогда
				ВсеРаспределено = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НеТребуется Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Иначе
		Если ВсеРаспределено Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРаспределениеРасходовНаПродукцию(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Если ПредыдущиеЭтапы.РаспределениеРасходов = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
	Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = Документы.РаспределениеПрочихЗатрат.ТекстЗапросаДанныеДляРаспределения() + "
		|ВЫБРАТЬ
		|	Данные.СтатьяРасходов
		|ИЗ
		|	ВТДанныеДляРаспределения КАК Данные
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.СтатьяРасходов КАК СтатьяРасходов
		|ИЗ
		|	ВТДанныеДляРаспределения КАК Данные
		|ГДЕ
		|	Данные.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияРасходов.ОшибкаРаспределения)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.СтатьяРасходов КАК СтатьяРасходов
		|ИЗ
		|	ВТДанныеДляРаспределения КАК Данные
		|ГДЕ
		|	Данные.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияРаспределенияРасходов.Распределено)
		|";
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("ГраницаДатаОкончания", Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СписокПодразделений",СписокПодразделений());
		Запрос.УстановитьПараметр("СписокОрганизаций",ПараметрыРасчета.СписокОрганизаций);
		Запрос.УстановитьПараметр("ПоВсемОрганизациям", Ложь);
		Запрос.УстановитьПараметр("ПоВсемПодразделениям", Ложь);
		Запрос.УстановитьПараметр("ФильтрПоСостоянию", Перечисления.СостоянияРаспределенияРасходов.ПустаяСсылка());
		
		Результат = Запрос.ВыполнитьПакет();
		Если Результат[7].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		ИначеЕсли НЕ Результат[8].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
		ИначеЕсли Результат[9].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРеглУчет(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Запрос = Новый Запрос(ЗакрытиеМесяцаУТВызовСервера.ТекстЗапросаСостояниеОтраженияДокументов(Истина));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("МассивОрганизаций",ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ЕстьОтраженныеВУчете   = НЕ МассивРезультатов[0].Пустой();
	ЕстьОжидающиеОтражения = НЕ МассивРезультатов[1].Пустой();
	ЕстьНеОтраженныеВУчете = НЕ МассивРезультатов[2].Пустой();
	Если ЕстьНеОтраженныеВУчете Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
	ИначеЕсли ЕстьОжидающиеОтражения Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли ЕстьОтраженныеВУчете Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеРезервыПоДолгам(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	Возврат Состояние;
КонецФункции

Функция СостояниеФормированиеФинансовогоРезультата(ПараметрыРасчета, ПредыдущиеЭтапы)
	НеВыполнено = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Если ПредыдущиеЭтапы.РеглУчет = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
	Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		
		// Составим соответствие счетов доходов (расходов) субсчетам финансовых результатов.
		СоответствиеСчетов = Документы.РегламентнаяОперация.ПолучитьСоответствиеСчетовДоходовИРасходовУКР();

		// Определим остатки на счетах доходов и расходов
		Запрос = Новый Запрос;
		Запрос.Текст = "
		
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХозрасчетныйОбороты.Счет КАК Счет,
        |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
        |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоМесяца, &КонецМесяца, , Счет В (&МассивСчетов), , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОбороты
		|	ГДЕ
        |		СуммаОборотДт <> 0 ИЛИ СуммаОборотКт <> 0
		|;
		|////////////////////////////////////////////////////////////////////////////////		
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
		|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
		|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяца, Счет В (&МассивСчетов), , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстатки
		|
		|	ГДЕ
		|		(СуммаОстаток <> 0)";
					   
		Период = КонецМесяца(ПараметрыРасчета.Период);
		Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыРасчета.Период));
		Запрос.УстановитьПараметр("КонецМесяца", Новый Граница(Период, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);

		МассивСчетов = Новый Массив;
		Для каждого Элемент Из СоответствиеСчетов Цикл
			МассивСчетов.Добавить(Элемент.Ключ);
		КонецЦикла; 
		Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);

		Результат = Запрос.ВыполнитьПакет();
		Если Результат[0].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		ИначеЕсли Результат[1].Пустой() Тогда
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
		Иначе
			Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		КонецЕсли;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

//++ НЕ УТКА
Функция СостояниеМеждународныйУчет(ПараметрыРасчета, ПредыдущиеЭтапы)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = новый Запрос("
	|ВЫБРАТЬ
	|	ОтражениеДокументов.Период КАК Период,
	|	ОтражениеДокументов.Регистратор КАК Регистратор,
	|	ОтражениеДокументов.Статус КАК Статус
	|ПОМЕСТИТЬ ОтражениеДокументов
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|ГДЕ
	|	(ОтражениеДокументов.Организация В (&Организация) ИЛИ &ПоВсемОрганизациям)
	|	И ОтражениеДокументов.Период <= &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВРучную)
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.Период) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете)
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗакрытиеСчетов.Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперацияМеждународныйУчет КАК ЗакрытиеСчетов
	|ГДЕ
	|	ЗакрытиеСчетов.Проведен
	|	И ЗакрытиеСчетов.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОперацийМеждународныйУчет.ЗакрытиеСчетовДоходовРасходов)
	|	И (ЗакрытиеСчетов.Организация В(&Организация) ИЛИ &ПоВсемОрганизациям)
	|	И ЗакрытиеСчетов.Дата МЕЖДУ &НачалоПериода И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперацияМеждународныйУчет КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &НачалоПериода И &ДатаОкончания
	|	И ДанныеДокумента.Проведен
	|	И (ДанныеДокумента.Организация В(&Организация) ИЛИ &ПоВсемОрганизациям)
	|	И ДанныеДокумента.ТипОперации = &ТипОперации
	|;");
	
	ДатаОкончания = ?(ЗначениеЗаполнено(ПараметрыРасчета.Период), КонецМесяца(ПараметрыРасчета.Период), Дата(3999, 1, 1));
	Запрос.УстановитьПараметр("Организация", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	Запрос.УстановитьПараметр("НачалоПериода", ?(ЗначениеЗаполнено(ПараметрыРасчета.Период), ПараметрыРасчета.Период, Дата(1980, 1, 1)));
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ТипОперации", Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницВалютаПредставления);
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат[1].Пустой() И Результат[2].Пустой() И НЕ Результат[3].Пустой() И НЕ Результат[4].Пустой() Тогда
		Состояние =  Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции
//-- НЕ УТКА

Функция СостояниеРасчетКурсовыхРазницРегл(ПараметрыРасчета, ПредыдущиеЭтапы)

	СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца;
	Если ПредыдущиеЭтапы.РеглУчет = СостояниеЭтапа.НеВыполнено
	Тогда
		Возврат СостояниеЭтапа.НеВыполнено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Период,
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ втКурсы
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НаДату, ) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Счета учета расчетов с поставщиками
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втСчетаАвтоматизированногоУчета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка В ИЕРАРХИИ (
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСДругимиКредиторами),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСДругимиДебиторами),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоВыданнымАвансам),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным)
	|		)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И ПланСчетов.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|	И Не ПланСчетов.Забалансовый
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|
	|	
	| ОБЪЕДИНИТЬ ВСЕ 
	|/////////////////////////////////////////////////////////////////////////////
	|// Другие автоматизированные счета
	|ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВИностраннойВалюте),
	|		 ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредитыБанковВИностраннойВалюте),
	|		 ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредитыБанковВИностраннойВалюте),
    |		 ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТекущаяЗадолженностьПоДолгосрочнымОбязательствамВИностраннойВалюте)
	|		 )
	|	И Не ПланСчетов.ЗапретитьИспользоватьВПроводках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Валюта,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК ОстатокВалюты,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК ОстатокРегл
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		&ГраницаОстатков,
	|		Счет.Валютный И НЕ Счет.ИсключитьИзПереоценкиПоПлануСчетов
	|		И Счет НЕ В (ВЫБРАТЬ Ссылка ИЗ втСчетаАвтоматизированногоУчета),
	|		,
	|		Организация В (&СписокОрганизаций)
	|	) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Счет,
	|	Остатки.Организация,
	|	Остатки.Подразделение,
	|	Остатки.НаправлениеДеятельности,
	|	Остатки.Счет.ВидыСубконто КАК ВидыСубконтоСчета,
	|	Остатки.Счет.Валютный КАК СчетВалютный,
	|	Остатки.Счет.НалоговыйУчет КАК НалоговыйУчет,
	|	Остатки.Субконто1,
	|	Остатки.Субконто2,
	|	Остатки.Субконто3,
	|	Остатки.Валюта,
	|	Остатки.ВалютнаяСуммаОстаток КАК ОстатокВалюты,
	|	Остатки.СуммаОстаток КАК ОстатокРегл,
	|	Остатки.ВалютнаяСуммаОстаток * втКурсы.Курс / втКурсы.Кратность КАК ОстатокПоКурсу,
	|	Остатки.ВалютнаяСуммаОстаток * втКурсы.Курс / втКурсы.Кратность - Остатки.СуммаОстаток КАК АбсолютнаяРазница,
	|	ВЫРАЗИТЬ(Остатки.ВалютнаяСуммаОстаток * втКурсы.Курс / втКурсы.Кратность КАК ЧИСЛО(15,2)) - Остатки.СуммаОстаток КАК КурсоваяРазница,
	|	ВЫБОР
	|		КОГДА Остатки.ВалютнаяСуммаОстаток * втКурсы.Курс / втКурсы.Кратность = Остатки.СуммаОстаток
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Переоценен
	|
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет.Валютный И НЕ Счет.ИсключитьИзПереоценкиПоПлануСчетов
	|			И Счет НЕ В (ВЫБРАТЬ Ссылка ИЗ втСчетаАвтоматизированногоУчета),
	|			,
	|			Организация В (&СписокОрганизаций)) КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКурсы КАК втКурсы
	|		ПО Остатки.Валюта = втКурсы.Валюта
	|ГДЕ
	|	ВЫРАЗИТЬ(Остатки.ВалютнаяСуммаОстаток * втКурсы.Курс / втКурсы.Кратность КАК ЧИСЛО(15,2)) <> Остатки.СуммаОстаток
	|	
	|УПОРЯДОЧИТЬ ПО
	|	АбсолютнаяРазница УБЫВ
	|");
	МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.УстановитьПараметр("СписокОрганизаций",ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("НаДату", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецМесяца(ПараметрыРасчета.Период),ВидГраницы.Включая));
	НеПереоценныйСчет = Запрос.Выполнить().Выбрать();
	ЕстьНеПреоцененныеСчета = НеПереоценныйСчет.Следующий();
	Если ЕстьНеПреоцененныеСчета Тогда // 0.005
		ЕстьНеПреоцененныеСчета = Макс(НеПереоценныйСчет.АбсолютнаяРазница, -НеПереоценныйСчет.АбсолютнаяРазница) >= 0.01;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	втОстатки.Счет
	|ИЗ
	|	втОстатки КАК втОстатки
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	ЕстьВалютныеОстатки = Запрос.Выполнить().Выбрать().Следующий();
	
	Если НЕ ЕстьВалютныеОстатки Тогда
		Состояние = СостояниеЭтапа.НеТребуется;
	ИначеЕсли ЕстьНеПреоцененныеСчета Тогда
		Состояние = СостояниеЭтапа.НеВыполнено;
	Иначе
		Состояние = СостояниеЭтапа.ВыполненоУспешно;
	КонецЕсли;
	Возврат Состояние;
	
КонецФункции

Функция СостояниеНачислениеОО(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Начисления.СуммаОборот
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(
	|		&ДатаНачала, 
	|		&ГраницаДатаОкончания,
	|		,
	|		Организация В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям
	|	) КАК Начисления
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних(
	|		&ДатаНачала,
	|		Организация В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям
	|	) КАК НастройкиРасчета
	|	ПО Начисления.Организация = НастройкиРасчета.Организация
	|ГДЕ
	|	НастройкиРасчета.ФормироватьРезервОтпусковБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеОценочныхОбязательствПоОтпускам КАК ДокументНачисленияОО
	|		ПО ДокументНачисленияОО.Организация = Организации.Ссылка
	|			И ДокументНачисленияОО.ПериодРегистрации = &ДатаНачала
	|			И ДокументНачисленияОО.Проведен
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(
	|		&ДатаНачала,
	|		&ГраницаДатаОкончания,
	|		,
	|		Организация В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям
	|	) КАК Начисления
	|	ПО Начисления.Организация = Организации.Ссылка
	|ГДЕ
	|	(Организации.Ссылка В (&СписокОрганизаций) ИЛИ &ПоВсемОрганизациям)
	|	И ДокументНачисленияОО.Ссылка ЕСТЬ NULL
	|	И НЕ Начисления.Организация ЕСТЬ NULL ");
	
	Граница = Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ГраницаДатаОкончания", Граница);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли РезультатЗапроса[1].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции

Функция СостояниеОтражениеЗарплаты(ПараметрыРасчета, ПредыдущиеЭтапы)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Начисления.СуммаОборот
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(&ДатаНачала, &ГраницаДатаОкончания, , Организация В (&СписокОрганизаций)) КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтражениеЗарплатыВФинансовомУчете КАК ОтражениеЗарплатыВФинансовомУчете
	|		ПО (ОтражениеЗарплатыВФинансовомУчете.Организация = Организации.Ссылка)
	|			И (ОтражениеЗарплатыВФинансовомУчете.Проведен
	|				И ОтражениеЗарплатыВФинансовомУчете.ПериодРегистрации = &ДатаНачала)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(&ДатаНачала, &ГраницаДатаОкончания, , Организация В (&СписокОрганизаций)) КАК Начисления
	|			ПО (Начисления.Организация = Организации.Ссылка)
	|
	|ГДЕ
	|	Организации.Ссылка В(&СписокОрганизаций)
	|	И ОтражениеЗарплатыВФинансовомУчете.Ссылка ЕСТЬ NULL
	|	И НЕ Начисления.Организация ЕСТЬ NULL ");
	
	Граница = Новый Граница(КонецМесяца(ПараметрыРасчета.Период), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ГраницаДатаОкончания", Граница);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрыРасчета.СписокОрганизаций);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли РезультатЗапроса[1].Пустой()
		И ((ПредыдущиеЭтапы.Свойство("НачислениеОО") И ПредыдущиеЭтапы.НачислениеОО <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено) Или Не ПредыдущиеЭтапы.Свойство("НачислениеОО")) Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	КонецЕсли;
	Возврат Состояние;
КонецФункции


Функция СостояниеПерерасчетПропорциональногоНДС(ПараметрыРасчета, ПредыдущиеЭтапы)
    
	НеобходимПерерасчетПропорциональногоНДС = Месяц(ПараметрыРасчета.Период) = 12;
	Если Не НеобходимПерерасчетПропорциональногоНДС Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
    КонецЕсли;
    
	Если ПредыдущиеЭтапы.УсловныеПродажи = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.УсловныеПродажи = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций
	Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций;
    КонецЕсли;
    
    УстановитьПривилегированныйРежим(Истина);
    Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Ссылка В (&СписокОрганизаций)
	|;
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	1
    |ИЗ
    |	РегистрСведений.КоэффициентыПропорциональногоОтнесенияНДСНаКредит КАК КоэффициентыПропорциональногоОтнесенияНДСНаКредит
    |ГДЕ
    |	КоэффициентыПропорциональногоОтнесенияНДСНаКредит.Коэффициент > 0
    |	И КоэффициентыПропорциональногоОтнесенияНДСНаКредит.Период МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД) И &ОкончаниеПериода
    |	И КоэффициентыПропорциональногоОтнесенияНДСНаКредит.Организация В
    |		(ВЫБРАТЬ
    |			Организации.Ссылка
    |		ИЗ
    |			Организации)
    |;
    |ВЫБРАТЬ ПЕРВЫЕ 1
    |	1
    |ИЗ
    |	Организации КАК Организации
    |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПерерасчетПропорциональногоНДСпоТоварамИОС КАК ПерерасчетПропорциональногоНДСпоТоварамИОС
    |	ПО ПерерасчетПропорциональногоНДСпоТоварамИОС.Организация = Организации.Ссылка
    |		И ПерерасчетПропорциональногоНДСпоТоварамИОС.Проведен
    |		И ПерерасчетПропорциональногоНДСпоТоварамИОС.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
    |ГДЕ
    |	ПерерасчетПропорциональногоНДСпоТоварамИОС.Ссылка ЕСТЬ NULL
    |");    
    
    Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыРасчета.Период));
    Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(ПараметрыРасчета.Период));
    Запрос.УстановитьПараметр("СписокОрганизаций",ПараметрыРасчета.СписокОрганизаций);
    РезультатыЗапросов = Запрос.ВыполнитьПакет();
    
    Если РезультатыЗапросов[2].Пустой() Тогда
        Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
    ИначеЕсли РезультатыЗапросов[1].Пустой() Тогда
        Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
    Иначе
        Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
    КонецЕсли;
    
    Возврат Состояние;
	
КонецФункции

Функция СостояниеКорректировкаУсловныхПродажПоПропорциональномуНДС(ПараметрыРасчета, ПредыдущиеЭтапы)
    
	НеобходимаКорректировкаУсловныхПродажПоПропорциональномуНДС = Месяц(ПараметрыРасчета.Период) = 12;
	Если Не НеобходимаКорректировкаУсловныхПродажПоПропорциональномуНДС Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
    КонецЕсли;
    
	Если ПредыдущиеЭтапы.ПерерасчетПропорциональногоНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.ПерерасчетПропорциональногоНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций
	Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций;
    КонецЕсли;
    
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(НДСИсходящийСервер.ТекстЗапросаСуммыКорректировокПропорциональногоНДС(Истина) + Символы.ПС +
	"
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|" +
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.СтатусРасхождения
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ВТКорректировкиУсловныхПродаж.ПредполагаемаяСуммаКорректировкиНДС <> 0
	|						И ВТКорректировкиУсловныхПродаж.СуммаКорректировкиНДС = 0
	|					ТОГДА 3
	|				КОГДА ВТКорректировкиУсловныхПродаж.ПредполагаемаяСуммаКорректировкиНДС <> 0
	|						И ВТКорректировкиУсловныхПродаж.СуммаКорректировкиНДС <> 0
	|						И ВТКорректировкиУсловныхПродаж.ПредполагаемаяСуммаКорректировкиНДС <> ВТКорректировкиУсловныхПродаж.СуммаКорректировкиНДС
	|					ТОГДА 2
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК СтатусРасхождения
	|	ИЗ
	|		ВТКорректировкиУсловныхПродаж КАК ВТКорректировкиУсловныхПродаж) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ ВложенныйЗапрос.СтатусРасхождения ЕСТЬ NULL
	|");

	Запрос.УстановитьПараметр("Организация",        ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	Запрос.УстановитьПараметр("НачалоГода",       	НачалоГода(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецГода",    		КонецГода (ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", 			-1);
	Запрос.УстановитьПараметр("ПоВсемСпецРежимамНалогообложения", 	Истина);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[1].Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
	    Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли Выборка.СтатусРасхождения = 3 Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли Выборка.СтатусРасхождения = 2 Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	КонецЕсли;
	
    Возврат Состояние;
	
КонецФункции



#КонецОбласти // НЕ_УТ
//-- НЕ УТ

Функция СостояниеУсловныеПродажи(ПараметрыРасчета, ПредыдущиеЭтапы)
	
//++ НЕ УТ
	Если ПредыдущиеЭтапы.КорректировкаНалоговогоНазначенияКапитальныхИнвестиций = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.КорректировкаНалоговогоНазначенияКапитальныхИнвестиций = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций
	Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций;
	КонецЕсли;
//-- НЕ УТ
	Если ПредыдущиеЭтапы.Себестоимость = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
		ИЛИ ПредыдущиеЭтапы.Себестоимость = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций
	Тогда
		Возврат Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(НДСИсходящийСервер.ПолучитьТекстЗапросаАнализаУсловныхПродаж() + Символы.ПС +
	"
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|" +
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.СтатусРасхождения
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(УсловнаяПродажа.СтатусРасхождения) КАК СтатусРасхождения
	|	ИЗ
	|		АнализУсловныхПродаж КАК УсловнаяПродажа) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ ВложенныйЗапрос.СтатусРасхождения ЕСТЬ NULL
	|");

	Запрос.УстановитьПараметр("Организация",        ПараметрыРасчета.СписокОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.СписокОрганизаций));
	Запрос.УстановитьПараметр("ПериодНачало",       НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("ПериодОкончание",    КонецМесяца(ПараметрыРасчета.Период));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[1].Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
	    Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли Выборка.СтатусРасхождения = 4 Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
	ИначеЕсли Выборка.СтатусРасхождения = 3 Тогда
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками;
	Иначе
		Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

#КонецОбласти // Состояния этапов

#КонецОбласти

#КонецЕсли