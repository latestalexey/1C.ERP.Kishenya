&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	СоставНабораКонстантФормы    = ОбщегоНазначенияУТ.ПолучитьСтруктуруНабораКонстант(НаборКонстант);
	ВнешниеРодительскиеКонстанты = ОбщегоНазначенияУТПовтИсп.ПолучитьСтруктуруРодительскихКонстант(СоставНабораКонстантФормы);
	РежимРаботы 				 = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	
	РежимРаботы.Вставить("СоставНабораКонстантФормы",    Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты", Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	// Настройки видимости при запуске
	УправлениеПредприятием = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	
	Элементы.ГруппаУчетПроизводства.Видимость     = УправлениеПредприятием;
	Элементы.ГруппаПлановаяСтоимость.Видимость    = УправлениеПредприятием;
	Элементы.ГруппаМежцеховоеУправление.Видимость = УправлениеПредприятием;
	Элементы.ГруппаНастройкиРемонты.Видимость     = УправлениеПредприятием;
	
	// Обновление состояния элементов
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
// Обработчик оповещения формы.
//
// Параметры:
//	ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//	Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//	Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // такие событие не обрабатываются
	КонецЕсли;
	
	// Если это изменена константа, расположенная в другой форме и влияющая на значения констант этой формы,
	// то прочитаем значения констант и обновим элементы этой формы.
	Если РежимРаботы.ВнешниеРодительскиеКонстанты.Свойство(Источник)
	 ИЛИ (ТипЗнч(Параметр) = Тип("Структура")
	 		И ОбщегоНазначенияУТКлиентСервер.ПолучитьОбщиеКлючиСтруктур(
	 			Параметр, РежимРаботы.ВнешниеРодительскиеКонстанты).Количество() > 0) Тогда
		
		ЭтаФорма.Прочитать();
		УстановитьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьПроизводствоПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АналитическийУчетПоГруппамПродукцииПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантИспользоватьВыпускПоНесколькимРаспоряжениямПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НеЗакрыватьЗаказыНаПроизводствоБезПолнойОтработкиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаРасценокВидовРаботПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПлановыеКалькуляцииПриВыпускеПродукцииПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПлановойСебестоимостиВыпускаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПлановойСтоимостиЗатратПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКорректировкиЗаказаМатериаловВПроизводствоПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИнтервалПланированияЧасПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроизводствоНаСторонеПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУправлениеРемонтамиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУзлыОбъектовЭксплуатацииПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСтатусыЗаказовПереработчикамПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НеЗакрыватьЗаказыПереработчикамБезПолнойОтработкиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НеЗакрыватьЗаказыПереработчикамБезПолнойОплатыПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		Если ОбщегоНазначенияУТПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение) Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонстантаИмя
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.ВалютаРасценокВидовРабот" ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ВалютаРасценокВидовРабот, ЗначениеЗаполнено(НаборКонстант.ВалютаРасценокВидовРабот));
	КонецЕсли;
	
	//++ НЕ УТКА
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьКорректировкиЗаказаМатериаловВПроизводство" ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ИспользоватьКорректировкиЗаказаМатериаловВПроизводство, НаборКонстант.ИспользоватьКорректировкиЗаказаМатериаловВПроизводство);
	КонецЕсли;
	//-- НЕ УТКА
	
	Если РеквизитПутьКДанным = "НаборКонстант.ВалютаПлановойСебестоимостиПродукции" ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ВалютаПлановойСебестоимостиВыпуска, ЗначениеЗаполнено(НаборКонстант.ВалютаПлановойСебестоимостиПродукции));
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводствоНаСтороне"
	 ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ИспользоватьКонстанты	= Константы.ИспользоватьПроизводствоНаСтороне.Получить();
		
		Элементы.ИспользоватьСтатусыЗаказовПереработчикам.Доступность			= ИспользоватьКонстанты;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводствоНаСтороне"
	 ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСтатусыЗаказовПереработчикам"
	 ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ИспользоватьПереработку	= Константы.ИспользоватьПроизводствоНаСтороне.Получить();
		ИспользоватьКонстанты	= ИспользоватьПереработку И Константы.ИспользоватьСтатусыЗаказовПереработчикам.Получить();
		
		Элементы.НеЗакрыватьЗаказыПереработчикамБезПолнойОтработки.Доступность			= ИспользоватьКонстанты;
		Элементы.НеЗакрыватьЗаказыПереработчикамБезПолнойОплаты.Доступность				= ИспользоватьКонстанты;
		Элементы.ГруппаКомментарийКонтролироватьЗакрытиеЗаказовПереработчикам.Видимость	= ИспользоватьПереработку И НЕ ИспользоватьКонстанты;
		
	КонецЕсли;
	
	//++ НЕ УТКА
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьУправлениеРемонтами" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ИспользоватьУзлыОбъектовЭксплуатации.Доступность = НаборКонстант.ИспользоватьУправлениеРемонтами;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПлановыеКалькуляцииПриВыпускеПродукции" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ЗначениеКонстанты = НаборКонстант.ИспользоватьПлановыеКалькуляцииПриВыпускеПродукции;
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.ИспользоватьПлановыеКалькуляцииПриВыпускеПродукции, ЗначениеКонстанты);
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводство" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ЗначениеКонстанты = НаборКонстант.ИспользоватьПроизводство;
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.ИспользоватьПроизводство, ЗначениеКонстанты);
		
		Элементы.ГруппаУчетЗатрат.Доступность = ЗначениеКонстанты;
		//++ НЕ УТКА
		Элементы.ГруппаУчетПроизводства.Доступность = ЗначениеКонстанты;
		Элементы.ГруппаМежцеховоеУправление.Доступность = ЗначениеКонстанты;
		//-- НЕ УТКА
	КонецЕсли;

	Если РеквизитПутьКДанным = "НаборКонстант.АналитическийУчетПоГруппамПродукции"
	 ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПроизводство"
	 ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ЗначениеКонстанты = НаборКонстант.АналитическийУчетПоГруппамПродукции;
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.АналитическийУчетПоГруппамПродукции, ЗначениеКонстанты);
		Элементы.ГруппаКомментарийВидыПродукции.Видимость = НЕ (НаборКонстант.ИспользоватьПроизводство И Константы.УчитыватьСебестоимостьТоваровПоВидамЗапасов.Получить());
		Элементы.ГруппаАналитическийУчетПоГруппамПродукции.Доступность = НаборКонстант.ИспользоватьПроизводство И Константы.УчитыватьСебестоимостьТоваровПоВидамЗапасов.Получить();
		
	КонецЕсли;
	
	ОтображениеПредупрежденияПриРедактировании(РеквизитПутьКДанным);
	
КонецПроцедуры

Процедура ОтображениеПредупрежденияПриРедактировании(РеквизитПутьКДанным)
	
	СтруктураКонстант = Новый Структура(
		"ИспользоватьСтатусыЗаказовПереработчикам,
		|ИспользоватьУзлыОбъектовЭксплуатации,
		|ИспользоватьУправлениеРемонтами,
		|АналитическийУчетПоГруппамПродукции");
	
	Для Каждого КлючИЗначение Из СтруктураКонстант Цикл
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы[КлючИЗначение.Ключ],
			НаборКонстант[КлючИЗначение.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
