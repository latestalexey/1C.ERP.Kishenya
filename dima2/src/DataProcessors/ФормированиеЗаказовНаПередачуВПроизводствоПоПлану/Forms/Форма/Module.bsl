
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Обработка = РеквизитФормыВЗначение("Объект");
	
	ИнициализироватьКомпоновщикНастроек(Обработка);
	ВосстановитьНастройки();
	Параметры.ИспользуемыеЗначенияРеквизитов = Новый Структура("Сценарий, ПодразделениеИсполнитель");
	ЗаполнитьЗначенияСвойств(Параметры.ИспользуемыеЗначенияРеквизитов, Объект);
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройки()

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаказМатериаловВПроизводство" Тогда
		
		ОбновитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(Объект.ПериодЗаказаОкончание) И Объект.ПериодЗаказаОкончание < Объект.ПериодЗаказаНачало Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Окончание периода заказа должно быть больше начала периода.';uk='Закінчення періоду замовлення повинно бути більше початку періоду.'"),
			,
			"Объект.ПериодЗаказаОкончание",
			, 
			Отказ);
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ПериодПоступленияОкончание) И Объект.ПериодПоступленияОкончание < Объект.ПериодПоступленияНачало Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Окончание периода поступления должно быть больше начала периода.';uk='Закінчення періоду надходження повинно бути більше початку періоду.'"),
			,
			"Объект.ПериодПоступленияОкончание",
			, 
			Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступленияНачало, Объект.ПериодПоступленияОкончание);
	Объект.ПериодПоступленияНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодПоступленияОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПоступленияНачалоПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступленияНачало, Объект.ПериодПоступленияОкончание);
	Объект.ПериодПоступленияНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодПоступленияОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПоступленияОкончаниеПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступленияНачало, Объект.ПериодПоступленияОкончание);
	Объект.ПериодПоступленияНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодПоступленияОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗаказаНачалоПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодЗаказаНачало, Объект.ПериодЗаказаОкончание);
	Объект.ПериодЗаказаНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодЗаказаОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗаказаОкончаниеПриИзменении(Элемент)
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодЗаказаНачало, Объект.ПериодЗаказаОкончание);
	Объект.ПериодЗаказаНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодЗаказаОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФормированиеЗаказов

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВПланахОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	КлючСтроки = Новый Структура();
	КлючСтроки.Вставить("Номенклатура", 	ТекСтрока.Номенклатура);
	КлючСтроки.Вставить("Характеристика", 	ТекСтрока.Характеристика);
	КлючСтроки.Вставить("НачалоПериода", 	ТекСтрока.НачалоПериодаПотребности);
	КлючСтроки.Вставить("ОкончаниеПериода", КонецДня(ТекСтрока.ОкончаниеПериодаПотребности));
	
	КлючСтроки.Вставить("Склад", 	        ТекСтрока.Склад);
	КлючСтроки.Вставить("ПодразделениеИсполнитель", Параметры.ИспользуемыеЗначенияРеквизитов.ПодразделениеИсполнитель);
	КлючСтроки.Вставить("Сценарий", 		Параметры.ИспользуемыеЗначенияРеквизитов.Сценарий);
	
	СписокДокументов = ПолучитьСписокПлановПоСтроке(КлючСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаПланаИзСписка", ЭтотОбъект);
	СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите документ';uk='Виберіть документ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаказовКоличествоВЗаказахОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ФормированиеЗаказов.ТекущиеДанные;
	
	КлючСтроки = Новый Структура();
	КлючСтроки.Вставить("Номенклатура", 	ТекСтрока.Номенклатура);
	КлючСтроки.Вставить("Характеристика", 	ТекСтрока.Характеристика);
	КлючСтроки.Вставить("НачалоПериода", 	ТекСтрока.НачалоПериодаПотребности);
	КлючСтроки.Вставить("ОкончаниеПериода", КонецДня(ТекСтрока.ОкончаниеПериодаПотребности));
	
	КлючСтроки.Вставить("Склад", 	            ТекСтрока.Склад);
	КлючСтроки.Вставить("ПодразделениеИсполнитель", Параметры.ИспользуемыеЗначенияРеквизитов.ПодразделениеИсполнитель);
	
	СписокДокументов = ПолучитьСписокЗаказовПоСтроке(КлючСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДокументаЗаказаИзСписка", ЭтотОбъект);
	СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выберите документ';uk='Виберіть документ'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Далее(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ФормированиеЗаказовНаПередачуВПроизводствоПоПлану.Форма.Команда.Далее");
	
	Если Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
		
		ОчиститьСообщения();
		
		СтруктураПоиска = Новый Структура("ОтметитьКЗаказу", Истина);
	 	КорзинаЗаказов = Объект.ФормированиеЗаказов.НайтиСтроки(СтруктураПоиска);
		
		Если КорзинаЗаказов.Количество() = 0 Тогда
			
			ТекстОшибки = НСтр("ru='Нет заказов к оформлению. Отметьте флажком количество в колонке <К заказу>.';uk='Немає замовлень до оформлення. Позначте прапорцем кількість в колонці <До замовлення>.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
			Возврат;
			
		КонецЕсли;
		
		СоздатьЗаказыНаСервере();
		
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Список).Элементы.Очистить();
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"Ссылка",
			СформированныеЗаказы,
			ВидСравненияКомпоновкиДанных.ВСписке,
			НСтр("ru='Сформированные заказы';uk='Сформовані замовлення'"),
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		Если СформированныеЗаказы.Количество() > 0 Тогда
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Удалить заказы';uk='Вилучити замовлення'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("НазадЗавершение", ЭтотОбъект), 
				НСтр("ru='Список созданных заказов не пуст. Созданные заказы будут удалены. Удалить заказы и продолжить?';uk='Список створених замовлень не порожній. Створені замовлення будуть видалені. Видалити замовлення та продовжити?'"),
				Кнопки);
			Возврат;
		КонецЕсли;
		
		ОчиститьСообщения();
		Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура НазадЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЗаказыНаСервере(СформированныеЗаказы.ВыгрузитьЗначения());
	СформированныеЗаказы.Очистить();
	
	ОчиститьСообщения();
	Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1;
	
	УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);

КонецПроцедуры

&НаКлиенте
Процедура ОтобратьНоменклатуру(Команда)
	
	ПараметрыФормы = Новый Структура("КомпоновщикНастроек", КомпоновщикНастроек);
	ОткрытьФорму("Обработка.ФормированиеЗаказовНаПередачуВПроизводствоПоПлану.Форма.ФормаОтбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ФормированиеЗаказовНаПередачуВПроизводствоПоПлану.Форма.Команда.Заполнить");
	
	Объект.РежимЗаполненияДанных = Истина;
	Если НЕ ПроверитьЗаполнение() Тогда
		Объект.РежимЗаполненияДанных = Ложь;
		Возврат
	КонецЕсли;
	Объект.РежимЗаполненияДанных = Ложь;
	
	Если Объект.ФормированиеЗаказов.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект), НСтр("ru='В таблице имеются строки. При заполнении строки будут очищены. Продолжить?';uk='В таблиці є рядки. При заповненні рядка будуть очищені. Продовжити?'"), Режим, 0);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФрагмент()
    
    Перем ТекстОшибки;
    
    Объект.ФормированиеЗаказов.Очистить();
    ОбновитьНаСервере();
    Если Объект.ФормированиеЗаказов.Количество() = 0 Тогда
        
        ТекстОшибки = НСтр("ru='По сценарию %1 у подразделения исполнителя %2 за установленный период потребность в материалах отсутствует.';uk='За сценарієм %1 у підрозділу виконавця %2 за встановлений період потреба в матеріалах відсутня.'");
        ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
        Объект.Сценарий,
        Объект.ПодразделениеИсполнитель);
        
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
    КонецЕсли;
    ЗаполнитьЗначенияСвойств(Параметры.ИспользуемыеЗначенияРеквизитов, Объект);

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ПереключитьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ПереключитьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗаказов(Команда)
	
	ОткрытьФорму("Документ.ЗаказМатериаловВПроизводство.ФормаСписка"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьФормированиеЗаказов(Команда)
	
	Объект.ФормированиеЗаказов.Очистить();
	СформированныеЗаказы.Очистить();
	
	Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаШаг1;
	УстановитьЗаголовокФормы(ЭтаФорма);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалПериодаЗаказа(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьИнтервалПериодаЗаказаЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ПериодЗаказаНачало", "ПериодЗаказаОкончание"),
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалПериодаОтгрузки(Команда)
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьИнтервалПериодаСборкиЗавершение",
		ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "ПериодПоступленияНачало", "ПериодПоступленияОкончание"),
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДанными

&НаСервере
Процедура ОбновитьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных();
	Запрос.УстановитьПараметр("Сценарий", Объект.Сценарий);
	Запрос.УстановитьПараметр("ПодразделениеИсполнитель", Объект.ПодразделениеИсполнитель);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Объект.ФормированиеЗаказов.Загрузить(Результат.Выгрузить());
		
		Для Каждого СтрокаЗаказа ИЗ Объект.ФормированиеЗаказов Цикл
			СтрокаЗаказа.Период.ДатаНачала    = СтрокаЗаказа.НачалоПериодаПотребности;
			СтрокаЗаказа.Период.ДатаОкончания = СтрокаЗаказа.ОкончаниеПериодаПотребности;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗапросСОтборамиКомпоновкиДанных()
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода",       Объект.ПериодПоступленияНачало);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ОкончаниеПериода",    Объект.ПериодПоступленияОкончание);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДатаНачалаЗаказа",    Объект.ПериодЗаказаНачало);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДатаОкончанияЗаказа", Объект.ПериодЗаказаОкончание);
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , , Ложь, );
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос);
	
	Для каждого ПараметрКомпоновки из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		
		Запрос.УстановитьПараметр(ПараметрКомпоновки.Имя, ПараметрКомпоновки.Значение);
		
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции 

#КонецОбласти

#Область РаботаСЗаказами

&НаСервере
Процедура СоздатьЗаказыНаСервере()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстОшибкиЗаписи = НСтр("ru='%1 невозможно записать документ по причине:
                                |%2'
                                |;uk='%1 неможливо записати документ з причини:
                                |%2'");
	ТекстОшибкиЗаполнения = НСтр("ru='%1 невозможно провести по причине некорректного заполнения.';uk='%1 неможливо провести через некоректне заповнення.'");
	
	СкладыМатериалов = Объект.ФормированиеЗаказов.Выгрузить(Новый Структура("ОтметитьКЗаказу", ИСтина), "Склад");
	СкладыМатериалов.Свернуть("Склад");
	
	СпособыОбеспечения = Новый Соответствие;
	
	Для каждого Строка Из СкладыМатериалов Цикл
		
		ОтобранныеСтроки = Объект.ФормированиеЗаказов.Выгрузить(Новый Структура("ОтметитьКЗаказу, Склад", Истина, Строка.Склад));
		
		Если ОтобранныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ДокументОбъект = Документы.ЗаказМатериаловВПроизводство.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		
		ДокументОбъект.Комментарий = НСтр("ru='Сформирован автоматически обработкой ""Формирование заказов на передачу в производство по планам"".';uk='Сформований автоматично обробкою ""Формування замовлень на передачу у виробництво за планами"".'");
		
		Если ЗначениеЗаполнено(ОтобранныеСтроки[0].СпособОбеспечения) Тогда
		
			ПараметрыСпособа = СпособыОбеспечения.Получить(ОтобранныеСтроки[0].СпособОбеспечения);
			Если ПараметрыСпособа = Неопределено Тогда
			
				ПараметрыСпособа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтобранныеСтроки[0].СпособОбеспечения, "Организация, Подразделение");
				СпособыОбеспечения.Вставить(ОтобранныеСтроки[0].СпособОбеспечения, ПараметрыСпособа);
				
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(ДокументОбъект, ПараметрыСпособа, "Организация, Подразделение");
		КонецЕсли; 
		
		ДокументОбъект.Заполнить(Неопределено);
		
		ДокументОбъект.Подразделение = Объект.ПодразделениеИсполнитель;
		
		Если ЗначениеЗаполнено(Строка.Склад) Тогда
			ДокументОбъект.Склад = Строка.Склад;
		КонецЕсли;  
		
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовМатериаловВПроизводство.КВыполнению;
		
		Для каждого СтрокаДанныеЗаказа Из ОтобранныеСтроки Цикл
			Если СтрокаДанныеЗаказа.КоличествоУпаковок = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаДанныеЗаказа.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаДанныеЗаказа.Характеристика;
			НоваяСтрока.Упаковка = СтрокаДанныеЗаказа.Упаковка;
			НоваяСтрока.Количество = СтрокаДанныеЗаказа.Количество;
			НоваяСтрока.КоличествоУпаковок = СтрокаДанныеЗаказа.КоличествоУпаковок;
			НоваяСтрока.ДатаОтгрузки = СтрокаДанныеЗаказа.НачалоПериодаПотребности;
			
		КонецЦикла;
		
		ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(ДокументОбъект.Товары);
		
		Если ДокументОбъект.Товары.Количество() > 0 Тогда
			
			Попытка
				
				Если ДокументОбъект.ПроверитьЗаполнение() Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					Сообщения = ПолучитьСообщенияПользователю(Истина);
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиЗаполнения, Строка(ДокументОбъект.Ссылка)), 
					ДокументОбъект);
				КонецЕсли;
				
				СформированныеЗаказы.Добавить(ДокументОбъект.Ссылка);
				
			Исключение
				
				ЗаписьЖурналаРегистрации(НСтр("ru='Формирование заказов материалов в производство по планам';uk='Формування замовлень матеріалів у виробництво за планами'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ТекстОшибки = ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиЗаписи, Строка(ДокументОбъект.Ссылка), ТекстОшибки),
				ДокументОбъект);
				
			КонецПопытки; 
			
		
		КонецЕсли;
		
	КонецЦикла; 
	
	ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Список).Элементы.Очистить();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Ссылка",
		СформированныеЗаказы,
		ВидСравненияКомпоновкиДанных.ВСписке,
		НСтр("ru='Сформированные заказы';uk='Сформовані замовлення'"),
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

//Удаляет заказы на сервере с контролем ссылочной целостности.
&НаСервереБезКонтекста
Функция УдалитьЗаказыНаСервере(СсылкиНаУдаление)
	
	ТабСсылок = НайтиПоСсылкам(СсылкиНаУдаление);
	
	Сообщение = Новый СообщениеПользователю();
	ТекстСообщения = "ru = ""Имеются ссылки на объект %1  %2. Документ не удален""";
	Для Каждого Ссылка из ТабСсылок Цикл
		
		Если Ссылка[0] <> Ссылка[1] Тогда
			
			Сообщение.Текст = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1])); 
			Сообщение.Сообщить();
			
			Индекс = СсылкиНаУдаление.Найти(Ссылка[0]);
			Если Индекс <> Неопределено Тогда
			
				СсылкиНаУдаление.Удалить(Индекс);
			
			КонецЕсли;
		
	КонецЕсли;
		
	КонецЦикла;

	УстановитьПривилегированныйРежим(Истина);
	
	УдалитьОбъекты(СсылкиНаУдаление, Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыРаботыСНастройкамиПользователя

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек(Обработка)
	
	СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("МакетКомпоновки");
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ПользовательскиеНастройки",  КомпоновщикНастроек.ПользовательскиеНастройки);
	Настройки.Вставить("Сценарий",                   Объект.Сценарий);
	Настройки.Вставить("ПодразделениеИсполнитель",   Объект.ПодразделениеИсполнитель);
	Настройки.Вставить("ПериодПоступленияНачало",    Объект.ПериодПоступленияНачало);
	Настройки.Вставить("ПериодПоступленияОкончание", Объект.ПериодПоступленияОкончание);
	Настройки.Вставить("ПериодПоступленияНачало",    Объект.ПериодЗаказаНачало);
	Настройки.Вставить("ПериодПоступленияОкончание", Объект.ПериодЗаказаОкончание);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ФормированиеЗаказовНаПередачуВПроизводствоПоПлану", "Настройки", Настройки);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ФормированиеЗаказовНаПередачуВПроизводствоПоПлану", "Настройки");
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда

		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ЗначениеНастроек.ПользовательскиеНастройки);
		ЗначениеНастроек.Свойство("Сценарий", 			        Объект.Сценарий);
		ЗначениеНастроек.Свойство("ПодразделениеИсполнитель",   Объект.ПодразделениеИсполнитель);
		ЗначениеНастроек.Свойство("ПериодПоступленияНачало", 	Объект.ПериодПоступленияНачало);
		ЗначениеНастроек.Свойство("ПериодПоступленияОкончание", Объект.ПериодПоступленияОкончание);
		ЗначениеНастроек.Свойство("ПериодЗаказаНачало", 	    Объект.ПериодЗаказаНачало);
		ЗначениеНастроек.Свойство("ПериодЗаказаОкончание",      Объект.ПериодЗаказаОкончание);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПошаговогоМастера

&НаКлиенте
Процедура УстановитьВидимостьКнопокКоманднойПанели(ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
				
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг1;
		Элементы.ДалееШаг1.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг2;
		Элементы.ЗавершитьФормированиеЗаказовШаг2.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	
	Страница = Форма.Элементы.СтраницыОсновнаяПанель.ТекущаяСтраница;
	
	Если Страница = Форма.Элементы.СтраницаШаг1 Тогда		
		
		Форма.Элементы.ПодЗаголовок.Заголовок = НСтр("ru='Шаг 1 из 2. Определение заказов';uk='Крок 1 з 2. Визначення замовлень'");
		
	ИначеЕсли Страница = Форма.Элементы.СтраницаШаг2 Тогда		
		
		Форма.Элементы.ПодЗаголовок.Заголовок = НСтр("ru='Шаг 2 из 2. Уточнение сформированных заказов';uk='Крок 2 із 2. Уточнення сформованих замовлень'");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура УстановитьИнтервалПериодаЗаказаЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодЗаказаНачало, Объект.ПериодЗаказаОкончание);
	Объект.ПериодЗаказаНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодЗаказаОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалПериодаСборкиЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ГраницыПериода = УстановитьНачалоОкончаниеПериодаПлана(Объект.Сценарий, Объект.ПериодПоступленияНачало, Объект.ПериодПоступленияОкончание);
	Объект.ПериодПоступленияНачало    = ГраницыПериода.НачалоПериода;
	Объект.ПериодПоступленияОкончание = ГраницыПериода.ОкончаниеПериода;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ФормированиеЗаказовХарактеристика",
																		     "Объект.ФормированиеЗаказов.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФормированиеЗаказовСклад.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормированиеЗаказов.ОтметитьКЗаказу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ФормированиеЗаказов.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере 
Процедура ПереключитьФлажки(Устанавливать)
	
	Если Элементы.ФормированиеЗаказов.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ФормированиеЗаказов.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ФормированиеЗаказов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если Устанавливать И НЕ СтрокаТаблицы.ОтметитьКЗаказу И СтрокаТаблицы.КоличествоУпаковок > 0 Тогда
			
			СтрокаТаблицы.ОтметитьКЗаказу = Истина;
			
		ИначеЕсли Не Устанавливать И СтрокаТаблицы.ОтметитьКЗаказу Тогда
			
			СтрокаТаблицы.ОтметитьКЗаказу = Ложь;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПлановПоСтроке(КлючСтроки)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ПланыПотребленияМатериаловОбороты.КоличествоОборот) КАК Количество,
	|	ПланыПотребленияМатериаловОбороты.Регистратор КАК Документ,
	|	ДокПланПроизводства.Дата КАК ДатаДокумента,
	|	ДокПланПроизводства.Номер КАК НомерДокумента
	|ИЗ
	|	РегистрНакопления.ПланыПотребленияМатериалов.Обороты(
	|			&НачалоПериода,
	|			&ОкончаниеПериода,
	|			Регистратор,
	|			Сценарий = &Сценарий
	|				И Склад = &Склад
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И ПодразделениеИсполнитель = &ПодразделениеИсполнитель) КАК ПланыПотребленияМатериаловОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПроизводства КАК ДокПланПроизводства
	|		ПО ПланыПотребленияМатериаловОбороты.Регистратор = ДокПланПроизводства.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыПотребленияМатериаловОбороты.Регистратор,
	|	ДокПланПроизводства.МоментВремени,
	|	ДокПланПроизводства.Дата,
	|	ДокПланПроизводства.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокПланПроизводства.МоментВремени";
	
	Для Каждого Свойство Из КлючСтроки Цикл
		
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (№ %2 от %3)';uk='%1 (№ %2 від %3)'"), 
				Формат(Выборка.Количество, "ЧДЦ=3"), Выборка.НомерДокумента, 
				Формат(Выборка.ДатаДокумента, "ДЛФ=D"));
		СписокДокументов.Добавить(Выборка.Документ, ДокументПредставление);
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокЗаказовПоСтроке(КлючСтроки)

	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(Заказы.Количество) КАК Количество,
	|	РеквизитыЗаказа.Ссылка КАК Документ,
	|	РеквизитыЗаказа.Дата КАК ДатаДокумента,
	|	РеквизитыЗаказа.Номер КАК НомерДокумента
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК Заказы
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказМатериаловВПроизводство КАК РеквизитыЗаказа
	|		ПО Заказы.Ссылка = РеквизитыЗаказа.Ссылка
	|ГДЕ
	|	РеквизитыЗаказа.Проведен
	|	И НЕ Заказы.Отменено
	|	И Заказы.Номенклатура = &Номенклатура
	|	И Заказы.Характеристика = &Характеристика
	|	И Заказы.ДатаОтгрузки МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И РеквизитыЗаказа.Склад = &Склад
	|	И РеквизитыЗаказа.Подразделение = &ПодразделениеИсполнитель
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыЗаказа.Ссылка,
	|	РеквизитыЗаказа.Дата,
	|	РеквизитыЗаказа.Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитыЗаказа.МоментВремени";
	
	Для Каждого Свойство Из КлючСтроки Цикл
		
		Запрос.УстановитьПараметр(Свойство.Ключ, Свойство.Значение);
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокДокументов = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (№ %2 от %3)';uk='%1 (№ %2 від %3)'"), 
				Формат(Выборка.Количество, "ЧДЦ=3"), Выборка.НомерДокумента, 
				Формат(Выборка.ДатаДокумента, "ДЛФ=D"));
		СписокДокументов.Добавить(Выборка.Документ, ДокументПредставление);
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьНачалоОкончаниеПериодаПлана(Сценарий, НачалоПериода, ОкончаниеПериода)

	Запрос = новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, ПОЛУГОДИЕ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, КВАРТАЛ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕКАДА)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	               |			ТОГДА НАЧАЛОПЕРИОДА(&НачалоПериода, НЕДЕЛЯ)
	               |		ИНАЧЕ &НачалоПериода
	               |	КОНЕЦ КАК НачалоПериода,
	               |	ВЫБОР
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, ГОД)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, ПОЛУГОДИЕ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, КВАРТАЛ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, МЕСЯЦ)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, ДЕКАДА)
	               |		КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	               |			ТОГДА КОНЕЦПЕРИОДА(&ОкончаниеПериода, НЕДЕЛЯ)
	               |		ИНАЧЕ &ОкончаниеПериода
	               |	КОНЕЦ КАК ОкончаниеПериода";
				   
	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "Периодичность");
	Запрос.УстановитьПараметр("Периодичность", 		Периодичность);				   
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоПериода);				   
	Запрос.УстановитьПараметр("ОкончаниеПериода", 	КонецДня(ОкончаниеПериода));				   
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ГраницыПериода = Новый Структура();
	ГраницыПериода.Вставить("НачалоПериода", 	?(ЗначениеЗаполнено(НачалоПериода), 	Выборка.НачалоПериода, 		НачалоПериода));
	ГраницыПериода.Вставить("ОкончаниеПериода", ?(ЗначениеЗаполнено(ОкончаниеПериода), 	Выборка.ОкончаниеПериода, 	ОкончаниеПериода));
	
	Возврат ГраницыПериода;
	
КонецФункции

&НаКлиенте
Процедура ВыборДокументаПланаИзСписка(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если Не РезультатВыбора = Неопределено Тогда 
		
		Документ = РезультатВыбора.Значение;
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		ОткрытьФорму("Документ.ПланПроизводства.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ВыборДокументаЗаказаИзСписка(РезультатВыбора, ДополнительныеПараметры) Экспорт 

	Если Не РезультатВыбора = Неопределено Тогда 
		
		Документ = РезультатВыбора.Значение;
		ПараметрыФормы = Новый Структура("Ключ", Документ);
		ОткрытьФорму("Документ.ЗаказМатериаловВПроизводство.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#КонецОбласти
