#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПравоНаВводДоступностиВидовРЦДляФормированияГрафикаПроизводства = ПраваПользователяПовтИсп.ПравоНаВводДоступностиВидовРЦ();
											
	ПравоНаВводГрафиковРаботыРЦДляФормированияРасписанияРаботыРЦ = ПраваПользователяПовтИсп.ПравоНаВводГрафиковРаботыРЦ();
	
	РежимРедактированияДоступности = Параметры.РежимРедактированияДоступности;
	
	АдресДанныхГрафикиРаботыРЦ = Параметры.АдресДанныхГрафикиРаботыРЦ;
	
	ДатаПериода = Параметры.ДатаПериода;
	ВидРабочегоЦентра = Параметры.ВидРабочегоЦентра;
	ИнтервалПланирования = Параметры.ИнтервалПланирования;
	
	НачалоПериодаВРабочемМесте = Параметры.НачалоПериода;
	ОкончаниеПериодаВРабочемМесте = Параметры.ОкончаниеПериода;
	
	НачалоПериода = ДатаПериода;
	ОкончаниеПериода = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(НачалоПериода, ИнтервалПланирования);
	
	// Заполним данные о доступности введенные в рабочем месте
	СведенияОДоступности = Параметры.СведенияОДоступности;
	Для каждого ДоступностьПериода Из СведенияОДоступности.ДоступностьЗаПериод Цикл
		ВладелецДоступность = ВладелецСведенияОДоступности.Добавить();
		ВладелецДоступность.ВидРабочегоЦентра = ВидРабочегоЦентра;
		ВладелецДоступность.ДатаИнтервала = ДоступностьПериода.ДатаПериода;
		
		Если СведенияОДоступности.ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ Тогда
			ДоступностьПоВидуРЦОборот = ДоступностьПериода.Доступность1;
		ИначеЕсли СведенияОДоступности.ОтображениеДоступности2 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ Тогда
			ДоступностьПоВидуРЦОборот = ДоступностьПериода.Доступность2;
		ИначеЕсли СведенияОДоступности.ОтображениеДоступности3 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ Тогда
			ДоступностьПоВидуРЦОборот = ДоступностьПериода.Доступность3;
		Иначе
			ДоступностьПоВидуРЦОборот = 0;
		КонецЕсли;
		Если СведенияОДоступности.ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ Тогда
			ДоступностьПоРЦОборот = ДоступностьПериода.Доступность1;
		ИначеЕсли СведенияОДоступности.ОтображениеДоступности2 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ Тогда
			ДоступностьПоРЦОборот = ДоступностьПериода.Доступность2;
		ИначеЕсли СведенияОДоступности.ОтображениеДоступности3 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ Тогда
			ДоступностьПоРЦОборот = ДоступностьПериода.Доступность3;
		Иначе
			ДоступностьПоРЦОборот = 0;
		КонецЕсли;
		Если СведенияОДоступности.ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуПроизводства Тогда
			ЗанятоОборот = ДоступностьПериода.Доступность1;
		ИначеЕсли СведенияОДоступности.ОтображениеДоступности2 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуПроизводства Тогда
			ЗанятоОборот = ДоступностьПериода.Доступность2;
		ИначеЕсли СведенияОДоступности.ОтображениеДоступности3 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуПроизводства Тогда
			ЗанятоОборот = ДоступностьПериода.Доступность3;
		Иначе
			ЗанятоОборот = 0;
		КонецЕсли;
		
		ВладелецДоступность.ДоступностьПоВидуРЦОборот = ДоступностьПоВидуРЦОборот;
		ВладелецДоступность.ДоступностьПоРЦОборот = ДоступностьПоРЦОборот;
		ВладелецДоступность.ЗанятоОборот = ЗанятоОборот;
		ВладелецДоступность.ДефицитДоступности = ЗанятоОборот - ДоступностьПоРЦОборот;
	КонецЦикла;
	
	// Создадим копию графиков работы
	НовоеРасписаниеГрафиковРаботыРЦ = Обработки.ДоступностьВидовРабочихЦентров.СоздатьТаблицуРасписаниеГрафиковРаботыРЦ();
	РасписаниеГрафиковРаботыРЦ = ПолучитьИзВременногоХранилища(АдресДанныхГрафикиРаботыРЦ);
	СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", ВидРабочегоЦентра);
	СписокСтрок = РасписаниеГрафиковРаботыРЦ.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаРасписание Из СписокСтрок Цикл
		ЗаполнитьЗначенияСвойств(НовоеРасписаниеГрафиковРаботыРЦ.Добавить(), СтрокаРасписание);
	КонецЦикла;
	АдресНовыхДанныхГрафикиРаботыРЦ = ПоместитьВоВременноеХранилище(НовоеРасписаниеГрафиковРаботыРЦ, УникальныйИдентификатор);
	
	ИтогиВыводятсяВПодвалеТаблицы = (ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День 
										ИЛИ ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час);
	
	НастроитьФормуПоПараметрамВидаРЦ();
	
	Если ИтогиВыводятсяВПодвалеТаблицы Тогда
		
		Элементы.ИтогоДоступно1.Видимость = Ложь;
		Элементы.ИтогоДоступно2.Видимость = Ложь;
		Элементы.ИтогоДоступно3.Видимость = Ложь;
		Элементы.ИтогоДоступно4.Видимость = Ложь;
		
		ИтогоДоступностьВидаРЦ.Загрузить(ВладелецСведенияОДоступности.Выгрузить());
		
	Иначе
		
		Элементы.НачалоПериода.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.НачалоПериода.Шрифт = Новый Шрифт(Элементы.НачалоПериода.Шрифт,,, Истина);
		
		Элементы.ОкончаниеПериода.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.ОкончаниеПериода.Шрифт = Новый Шрифт(Элементы.ОкончаниеПериода.Шрифт,,, Истина);
		
		Для каждого ВладелецДоступность Из ВладелецСведенияОДоступности Цикл
			Если ВладелецДоступность.ДатаИнтервала >= НачалоПериода
				И ВладелецДоступность.ДатаИнтервала <= ОкончаниеПериода Тогда
				ЗаполнитьЗначенияСвойств(ИтогоДоступностьВидаРЦ.Добавить(), ВладелецДоступность);
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 
	
	ЗаполнитьДанные();
	
	НастроитьФормуНаОснованииПравДоступа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru='Графики работы были изменены. Сохранить изменения?';uk='Графіки роботи були змінені. Зберегти зміни?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если НачалоПериода < НачалоПериодаВРабочемМесте Тогда
		НачалоПериода = НачалоПериодаВРабочемМесте;
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Дата начала не может быть раньше даты %1';uk='Дата початку не може бути раніше дати %1'"),
									Формат(НачалоПериодаВРабочемМесте, "ДЛФ=D"));
									
		ОписаниеОповещения = Новый ОписаниеОповещения("НачалоПериодаПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения);
		Возврат;
		
	ИначеЕсли НачалоПериода > ОкончаниеПериодаВРабочемМесте Тогда
		НачалоПериода = ОкончаниеПериодаВРабочемМесте;
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Дата начала не может быть позже даты %1';uk='Дата початку не може бути пізніше дати %1'"),
									Формат(ОкончаниеПериодаВРабочемМесте, "ДЛФ=D"));
									
		ОписаниеОповещения = Новый ОписаниеОповещения("НачалоПериодаПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	НачалоПериодаПриИзмененииЗавершение(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаПриИзменении(Элемент)
	
	Если ОкончаниеПериода > ОкончаниеПериодаВРабочемМесте Тогда
		ОкончаниеПериода = ОкончаниеПериодаВРабочемМесте;
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Дата окончания не может быть позже даты %1';uk='Дата закінчення не може бути пізніше дати %1'"),
									Формат(ОкончаниеПериодаВРабочемМесте, "ДЛФ=D"));
									
		ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеПериодаПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения);
		Возврат;
		
	ИначеЕсли ОкончаниеПериода < НачалоПериодаВРабочемМесте Тогда
		ОкончаниеПериода = НачалоПериодаВРабочемМесте;
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Дата окончания не может быть раньше даты %1';uk='Дата закінчення не може бути раніше дати %1'"),
									Формат(НачалоПериодаВРабочемМесте, "ДЛФ=D"));
									
		ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеПериодаПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ОкончаниеПериодаПриИзмененииЗавершение(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрафикиРаботыРЦ

&НаКлиенте
Процедура ДоступностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ГрафикиРаботыРЦ.ТекущиеДанные;
	
	ТекРабочийЦентр = ТекущиеДанные.РабочийЦентр;
	
	ДатаГрафика = ДатаСвязаннаяСКолонкой(Элемент.Имя);
	ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаГрафика);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаГрафика",                ДатаГрафика);
	ПараметрыФормы.Вставить("ВидРабочегоЦентра",          ВидРабочегоЦентра);
	ПараметрыФормы.Вставить("РабочийЦентр",               ТекущиеДанные.РабочийЦентр);
	ПараметрыФормы.Вставить("ГрафикРаботыРабочегоЦентра", ТекущиеДанные.ГрафикРаботы);
	ПараметрыФормы.Вставить("АдресДанныхГрафикиРаботыРЦ", АдресНовыхДанныхГрафикиРаботыРЦ);
	ПараметрыФормы.Вставить("ВнесеныРучныеИзменения",     ТекущиеДанные[ИмяКолонкиПериода + "ВнесеныРучныеИзменения"]);
	ПараметрыФормы.Вставить("ДанныеИзменены",             ТекущиеДанные[ИмяКолонкиПериода + "ДанныеИзменены"]);
	ПараметрыФормы.Вставить("ТолькоПросмотрГрафика",      ТолькоПросмотрГрафика);
	
	ПараметрыРедактируемогоПериода = Новый Структура("ДатаГрафика,Идентификатор", ДатаГрафика, ТекущиеДанные.ПолучитьИдентификатор());
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьРасписаниеЗавершение", ЭтотОбъект, ПараметрыРедактируемогоПериода);
	ОткрытьФорму("Обработка.ДоступностьВидовРабочихЦентров.Форма.РасписаниеРаботы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗавершитьРедактирование(Команда)
	
	ЗавершитьРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасписаниеПоГрафикуРабочегоЦентра(Команда)
	
	ДанныеПоРЦ = ПолучитьДанныеПоРЦ();
	
	Если ДанныеПоРЦ <> Неопределено И ДанныеПоРЦ.Количество() > 0 Тогда
		ЗаполнитьРасписаниеПоГрафикуРабочегоЦентраНаСервере(ДанныеПоРЦ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДанных

&НаСервере
Процедура ЗаполнитьДанные()

	ГрафикиРаботыРЦ.Очистить();
	
	ОбновитьСоставКолонокДоступности();
	УстановитьУсловноеОформлениеТаблицы();
	ЗаполнитьДоступность();
	ОтразитьНаложенияСРемонтами();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставКолонокДоступности()

	ДатыВыбранногоПериода = ДатыВыбранногоПериода(НачалоПериода, ОкончаниеПериода);
	
	СписокНовыхДат = Новый Массив;
	
	// Колонки нужно добавлять в порядке расположения их на форме
	СписокКолонок = Новый Массив;
	ДобавитьОписаниеКолонки("ВнесеныРучныеИзменения", 
							Новый ОписаниеТипов("Булево"), 
							Ложь,
							СписокКолонок);
							
	ДобавитьОписаниеКолонки("Доступность", 
							Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)), 
							Истина,
							СписокКолонок);
							
	ДобавитьОписаниеКолонки("ДоступностьСекунд", 
							Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)), 
							Ложь,
							СписокКолонок);
							
	// Служебное поле, используется при получении расписания
	ДобавитьОписаниеКолонки("ДанныеИзменены", 
							Новый ОписаниеТипов("Булево"), 
							Ложь,
							СписокКолонок);
							
	ДобавитьОписаниеКолонки("ЗапланированРемонт", 
							Новый ОписаниеТипов("Булево"), 
							Ложь,
							СписокКолонок);
							
	// Заполняем массив добавляемых реквизитов только новыми колонками.
	МассивДобавляемыхРеквизитов = Новый Массив;
	Для Каждого ДатаПериода из ДатыВыбранногоПериода Цикл
		
		Если СписокОтображаемыхДат.НайтиПоЗначению(ДатаПериода) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
		
		СписокНовыхДат.Добавить(ДатаПериода);
		
		Для каждого ОписаниеКолонки Из СписокКолонок Цикл
			ИмяКолонки = ИмяКолонкиПериода + ОписаниеКолонки.Имя;
			НоваяКолонка = Новый РеквизитФормы(ИмяКолонки, ОписаниеКолонки.Тип, "ГрафикиРаботыРЦ");
			МассивДобавляемыхРеквизитов.Добавить(НоваяКолонка);
		КонецЦикла; 
		
	КонецЦикла;
	
	// Удалим ненужные даты
	МассивУдаляемыхРеквизитов = Новый Массив;
	СписокНенужныхДат = Новый Массив;
	Для каждого ЭлДата Из СписокОтображаемыхДат Цикл
		ДатаПериода = ЭлДата.Значение;
		
		Если ДатыВыбранногоПериода.Найти(ДатаПериода) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
		
		Для каждого ОписаниеКолонки Из СписокКолонок Цикл
			ИмяКолонки = ИмяКолонкиПериода + ОписаниеКолонки.Имя;
			МассивУдаляемыхРеквизитов.Добавить("ГрафикиРаботыРЦ." + ИмяКолонки);
			Если ОписаниеКолонки.ЕстьНаФорме Тогда
				Элементы.Удалить(Элементы.Найти(ИмяКолонки));
			КонецЕсли; 
		КонецЦикла; 
		Элементы.Удалить(Элементы.Найти(ИмяКолонкиПериода + "ГруппаДоступность"));
		
		Элементы.Удалить(Элементы.Найти(ИмяКолонкиПериода + "ГруппаПериод"));
		
		СписокНенужныхДат.Добавить(ЭлДата);
	КонецЦикла;
	
	Для каждого ЭлДата Из СписокНенужныхДат Цикл
		СписокОтображаемыхДат.Удалить(ЭлДата);
	КонецЦикла; 
	
	// Удаляем и добавляем реквизиты формы.
	Если МассивДобавляемыхРеквизитов.Количество() > 0 ИЛИ МассивУдаляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	КонецЕсли;
	
	// Добавляем элементы формы, если таких еще нет.
	Для Каждого НоваяДата из СписокНовыхДат Цикл
		
		СписокОтображаемыхДат.Добавить(НоваяДата);
		
		ИмяКолонкиПериода = ИмяКолонкиПериода(НоваяДата);
		ТекущаяКолонкаЗаголовок = ЗаголовокКолонкиПериода(НоваяДата);
		
		// Найдем колонку перед которой нужно добавить новую
		ЭлементСледующийПериод = Элементы.ГрафикиРаботыРЦПоследняяПустаяКолонка;
		Для Каждого СуществующаяКолонка из Элементы.ГрафикиРаботыРЦ.ПодчиненныеЭлементы Цикл
			
			Если СтрНайти(СуществующаяКолонка.Имя, "ГруппаПериод") = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуществующаяКолонкаДата = ДатаСвязаннаяСКолонкой(СуществующаяКолонка.Имя);
			Если СуществующаяКолонкаДата > НоваяДата Тогда
				
				ЭлементСледующийПериод = СуществующаяКолонка;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавим группу в которой будут размещены новые элементы
		ГруппаПериода = Элементы.Вставить(ИмяКолонкиПериода + "ГруппаПериод", 
											Тип("ГруппаФормы"), 
											Элементы.ГрафикиРаботыРЦ, 
											ЭлементСледующийПериод);
											
		ГруппаПериода.Заголовок = ТекущаяКолонкаЗаголовок;
		ГруппаПериода.Группировка = ГруппировкаКолонок.Вертикальная;
		ГруппаПериода.ОтображатьВШапке = Истина;
		ГруппаПериода.ОтображатьЗаголовок = Истина;
		
		// Добавим элементы
		ИмяНовогоЭлемента = ИмяКолонкиПериода + "ГруппаДоступность";
		ГруппаДоступности = Элементы.Добавить(ИмяНовогоЭлемента, Тип("ГруппаФормы"), ГруппаПериода);
		ГруппаДоступности.Группировка = ГруппировкаКолонок.ВЯчейке;
		
		Для каждого ОписаниеКолонки Из СписокКолонок Цикл
			
			ИмяНовогоЭлемента = ИмяКолонкиПериода + ОписаниеКолонки.Имя;
			
			НовыйЭлемент = Неопределено;
			Если ОписаниеКолонки.Имя = "Доступность" Тогда
				НовыйЭлемент = Элементы.Добавить(ИмяНовогоЭлемента, Тип("ПолеФормы"), ГруппаДоступности);
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.Ширина = 3;
				
				НовыйЭлемент.УстановитьДействие("НачалоВыбора", "ДоступностьНачалоВыбора");
				НовыйЭлемент.УстановитьДействие("Очистка", "ДоступностьОчистка");
				НовыйЭлемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.Выбрать;
				НовыйЭлемент.РедактированиеТекста = Ложь;
				НовыйЭлемент.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
			КонецЕсли; 
			
			// Одинаковые свойства для всех добавляемых элементов
			Если НовыйЭлемент <> Неопределено Тогда
				НовыйЭлемент.ПутьКДанным = "ГрафикиРаботыРЦ." + ИмяКолонкиПериода + ОписаниеКолонки.Имя;
				НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
				НовыйЭлемент.ОтображатьВШапке = Ложь;
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступность()

	Если НачалоПериода = '000101010000' 
		ИЛИ ОкончаниеПериода = '000101010000' Тогда
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РабочиеЦентры.Ссылка КАК РабочийЦентр,
	|	РабочиеЦентры.КоэффициентВремениРаботы,
	|	ВЫБОР
	|		КОГДА РабочиеЦентры.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА РабочиеЦентры.Календарь
	|		КОГДА РабочиеЦентры.ВидРабочегоЦентра.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА РабочиеЦентры.ВидРабочегоЦентра.Календарь
	|		КОГДА РабочиеЦентры.ВидРабочегоЦентра.Подразделение.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА РабочиеЦентры.ВидРабочегоЦентра.Подразделение.ГрафикРаботы
	|		ИНАЧЕ ОсновнойКалендарьПредприятия.Значение
	|	КОНЕЦ КАК ГрафикРаботы
	|ИЗ
	|	Справочник.РабочиеЦентры КАК РабочиеЦентры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
	|		ПО (ИСТИНА)
	|ГДЕ
	|	РабочиеЦентры.ВидРабочегоЦентра = &ВидРабочегоЦентра
	|	И НЕ РабочиеЦентры.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	РабочиеЦентры.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступностьРабочихЦентровДоступность.РабочийЦентр,
	|	ДоступностьРабочихЦентровДоступность.Ссылка.ДатаГрафика КАК ДатаГрафика,
	|	ДоступностьРабочихЦентровДоступность.Количество КАК Количество,
	|	ДоступностьРабочихЦентровДоступность.ВнесеныРучныеИзменения КАК ВнесеныРучныеИзменения
	|ИЗ
	|	Документ.ДоступностьРабочихЦентров.Доступность КАК ДоступностьРабочихЦентровДоступность
	|ГДЕ
	|	ДоступностьРабочихЦентровДоступность.Ссылка.ВидРабочегоЦентра = &ВидРабочегоЦентра
	|	И ДоступностьРабочихЦентровДоступность.Ссылка.Проведен
	|	И ДоступностьРабочихЦентровДоступность.Ссылка.ДатаГрафика МЕЖДУ &НачалоПериода И &ОкончаниеПериода";
	
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", ВидРабочегоЦентра);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаРЦ = Результат[0].Выбрать();
	
	ДоступностьРЦ = Результат[1].Выгрузить();
	ДоступностьРЦ.Индексы.Добавить("РабочийЦентр");
	
	РасписаниеГрафиковРаботыРЦ = ПолучитьИзВременногоХранилища(АдресНовыхДанныхГрафикиРаботыРЦ);
	НоваяДоступностьРЦ = РасписаниеГрафиковРаботыРЦ.Скопировать();
	НоваяДоступностьРЦ.Свернуть("РабочийЦентр,ДатаГрафика,ВнесеныРучныеИзменения", "Количество");
	
	Пока ВыборкаРЦ.Следующий() Цикл
		
		СтрокаДоступность = ГрафикиРаботыРЦ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДоступность, ВыборкаРЦ);
		
		// Сначала возьмем новые данные
		СтруктураПоиска = Новый Структура("РабочийЦентр", СтрокаДоступность.РабочийЦентр);
  		СписокСтрок = НоваяДоступностьРЦ.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеОДоступности Из СписокСтрок Цикл
			Если ДанныеОДоступности.ДатаГрафика < НачалоПериода
				ИЛИ ДанныеОДоступности.ДатаГрафика > ОкончаниеПериода Тогда
				// Это другой период
				Продолжить;
			КонецЕсли; 
			
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДанныеОДоступности.ДатаГрафика);
			СтрокаДоступность[ИмяКолонкиПериода + "Доступность"] = ДанныеОДоступности.Количество / 3600;
			СтрокаДоступность[ИмяКолонкиПериода + "ДоступностьСекунд"] = ДанныеОДоступности.Количество;
			СтрокаДоступность[ИмяКолонкиПериода + "ВнесеныРучныеИзменения"] = ДанныеОДоступности.ВнесеныРучныеИзменения;
			СтрокаДоступность[ИмяКолонкиПериода + "ДанныеИзменены"] = Истина;
		КонецЦикла; 
		
		// Теперь возьмем данные из базы
		СтруктураПоиска = Новый Структура("РабочийЦентр", СтрокаДоступность.РабочийЦентр);
  		СписокСтрок = ДоступностьРЦ.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеОДоступности Из СписокСтрок Цикл
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДанныеОДоступности.ДатаГрафика);
			Если СтрокаДоступность[ИмяКолонкиПериода + "ДанныеИзменены"] Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДоступность[ИмяКолонкиПериода + "Доступность"] = ДанныеОДоступности.Количество / 3600;
			СтрокаДоступность[ИмяКолонкиПериода + "ДоступностьСекунд"] = ДанныеОДоступности.Количество;
			СтрокаДоступность[ИмяКолонкиПериода + "ВнесеныРучныеИзменения"] = ДанныеОДоступности.ВнесеныРучныеИзменения;
		КонецЦикла; 
		
	КонецЦикла;
	
	ЗаполнитьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИтоги()

	// Обновление итого по РЦ и дефицита
	ДатыВыбранногоПериода = ДатыВыбранногоПериода(НачалоПериода, ОкончаниеПериода);
	Для каждого ДатаПериода Из ДатыВыбранногоПериода Цикл
		ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
		ДоступностьСекунд = 0;
		Для каждого СтрокаДоступность Из ГрафикиРаботыРЦ Цикл
			ДоступностьСекунд = ДоступностьСекунд 
									+ СтрокаДоступность[ИмяКолонкиПериода + "ДоступностьСекунд"] 
									/ СтрокаДоступность.КоэффициентВремениРаботы;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура("ДатаИнтервала", ДатаПериода);
	 	СписокСтрок = ИтогоДоступностьВидаРЦ.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			СтрокаИтого = ИтогоДоступностьВидаРЦ.Добавить();
			СтрокаИтого.ДатаИнтервала = ДатаПериода;
			СтрокаИтого.ВидРабочегоЦентра = ВидРабочегоЦентра;
		Иначе
			СтрокаИтого = СписокСтрок[0];
		КонецЕсли; 
		СтрокаИтого.ДоступностьПоРЦОборот = ДоступностьСекунд / 3600;
		СтрокаИтого.ДефицитДоступности = СтрокаИтого.ЗанятоОборот - СтрокаИтого.ДоступностьПоРЦОборот;
	КонецЦикла; 
	
	// Вывод итогов
	Если ИтогиВыводятсяВПодвалеТаблицы Тогда
		
		Для каждого ДанныеОДоступностиВидаРЦ Из ИтогоДоступностьВидаРЦ Цикл
			Если ДанныеОДоступностиВидаРЦ.ДатаИнтервала < НачалоПериода
				ИЛИ ДанныеОДоступностиВидаРЦ.ДатаИнтервала > ОкончаниеПериода Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДанныеОДоступностиВидаРЦ.ДатаИнтервала);
			
			ТекстПодвала = "";
			Если НЕ ОтображениеДоступности1.Пустая() Тогда
				ТекстПодвала = Строка(ЗначениеДоступности(ОтображениеДоступности1, ДанныеОДоступностиВидаРЦ));
			КонецЕсли; 
			Если НЕ ОтображениеДоступности2.Пустая() Тогда
				ТекстПодвала = ТекстПодвала + ?(ТекстПодвала <> "", Символы.ПС, "") + Строка(ЗначениеДоступности(ОтображениеДоступности2, ДанныеОДоступностиВидаРЦ));
			КонецЕсли; 
			Если НЕ ОтображениеДоступности3.Пустая() Тогда
				ТекстПодвала = ТекстПодвала + ?(ТекстПодвала <> "", Символы.ПС, "") + Строка(ЗначениеДоступности(ОтображениеДоступности3, ДанныеОДоступностиВидаРЦ));
			КонецЕсли; 
			Если НЕ ОтображениеДоступности4.Пустая() Тогда
				ТекстПодвала = ТекстПодвала + ?(ТекстПодвала <> "", Символы.ПС, "") + Строка(ЗначениеДоступности(ОтображениеДоступности4, ДанныеОДоступностиВидаРЦ));
			КонецЕсли; 
			
			Элементы[ИмяКолонкиПериода + "Доступность"].ТекстПодвала = ТекстПодвала;
		КонецЦикла;
		
	Иначе
		
		ИтогоДоступностьВидаРЦВсего = ИтогоДоступностьВидаРЦ.Выгрузить();
		ИтогоДоступностьВидаРЦВсего.Свернуть("ВидРабочегоЦентра", "ЗанятоОборот,ДоступностьПоВидуРЦОборот,ДоступностьПоРЦОборот,ДефицитДоступности");
		
		Если ИтогоДоступностьВидаРЦВсего.Количество() <> 0 Тогда
			ДанныеОДоступностиВидаРЦ = ИтогоДоступностьВидаРЦВсего[0];
			ИтогоДоступно1 = ЗначениеДоступности(ОтображениеДоступности1, ДанныеОДоступностиВидаРЦ);
			ИтогоДоступно2 = ЗначениеДоступности(ОтображениеДоступности2, ДанныеОДоступностиВидаРЦ);
			ИтогоДоступно3 = ЗначениеДоступности(ОтображениеДоступности3, ДанныеОДоступностиВидаРЦ);
			ИтогоДоступно4 = ЗначениеДоступности(ОтображениеДоступности4, ДанныеОДоступностиВидаРЦ);
		Иначе
			ИтогоДоступно1 = 0;
			ИтогоДоступно2 = 0;
			ИтогоДоступно3 = 0;
			ИтогоДоступно4 = 0;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоПараметрамВидаРЦ()

	СписокРеквизитов = "ПланироватьРаботу,ПланироватьРаботуРабочихЦентров,ВводитьДоступностьДляВидаРЦ,РезервДоступности";
	РеквизитыВидаРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидРабочегоЦентра, СписокРеквизитов);
	
	РезервДоступности = РеквизитыВидаРЦ.РезервДоступности;
	Если РезервДоступности = 0 Тогда
		Элементы.РезервДоступности.Видимость = Ложь;
		Элементы.ДекорацияРезервДоступности.Видимость = Ложь;
	КонецЕсли; 
	
	// Определим какую нужно показать доступность
	Если РеквизитыВидаРЦ.ПланироватьРаботу 
		И РеквизитыВидаРЦ.ПланироватьРаботуРабочихЦентров
		И РеквизитыВидаРЦ.ВводитьДоступностьДляВидаРЦ Тогда
		
		ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ;
		ОтображениеДоступности2 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуПроизводства;
		ОтображениеДоступности3 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ;
		ОтображениеДоступности4 = Перечисления.ВариантыОтображенияДоступности.ДефицитДоступности;
		
		Если ИтогиВыводятсяВПодвалеТаблицы Тогда
			
			// Итоги доступности отображаются в подвале таблицы
			Элементы.ГрафикиРаботыРЦ.ВысотаПодвала = 4;
			ТекстПодвала = Строка(Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ)
							+ Символы.ПС + Строка(Перечисления.ВариантыОтображенияДоступности.ПоГрафикуПроизводства)
							+ Символы.ПС + Строка(Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ)
							+ Символы.ПС + Строка(Перечисления.ВариантыОтображенияДоступности.ДефицитДоступности);
			Элементы.ГрафикиРаботыРЦРабочийЦентр.ТекстПодвала = ТекстПодвала;
		КонецЕсли; 
	
	ИначеЕсли РеквизитыВидаРЦ.ПланироватьРаботу
		И НЕ РеквизитыВидаРЦ.ВводитьДоступностьДляВидаРЦ Тогда

		ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ;
		ОтображениеДоступности2 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуПроизводства;
		ОтображениеДоступности3 = Перечисления.ВариантыОтображенияДоступности.ДефицитДоступности;
		
		Если ИтогиВыводятсяВПодвалеТаблицы Тогда
			
			Элементы.ГрафикиРаботыРЦ.ВысотаПодвала = 3;
			ТекстПодвала = Строка(Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ)
							+ Символы.ПС + Строка(Перечисления.ВариантыОтображенияДоступности.ПоГрафикуПроизводства)
							+ Символы.ПС + Строка(Перечисления.ВариантыОтображенияДоступности.ДефицитДоступности);
			Элементы.ГрафикиРаботыРЦРабочийЦентр.ТекстПодвала = ТекстПодвала;
		КонецЕсли;
															
	Иначе
		
		ОтображениеДоступности1 = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ;
		
		Если ИтогиВыводятсяВПодвалеТаблицы Тогда
			Элементы.ГрафикиРаботыРЦ.ВысотаПодвала = 1;
			ТекстПодвала = Строка(Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ);
			Элементы.ГрафикиРаботыРЦРабочийЦентр.ТекстПодвала = ТекстПодвала;
		КонецЕсли; 
		
	КонецЕсли; 

	Если НЕ ИтогиВыводятсяВПодвалеТаблицы Тогда
		
		// Скроем итоги под таблицей или установим нужные заголовки
		Если НЕ ОтображениеДоступности1.Пустая() Тогда
			Элементы.ИтогоДоступно1.Заголовок = ОтображениеДоступности1;
		Иначе
			Элементы.ИтогоДоступно1.Видимость = Ложь;
		КонецЕсли; 
		Если НЕ ОтображениеДоступности2.Пустая() Тогда
			Элементы.ИтогоДоступно2.Заголовок = ОтображениеДоступности2;
		Иначе
			Элементы.ИтогоДоступно2.Видимость = Ложь;
		КонецЕсли; 
		Если НЕ ОтображениеДоступности3.Пустая() Тогда
			Элементы.ИтогоДоступно3.Заголовок = ОтображениеДоступности3;
		Иначе
			Элементы.ИтогоДоступно3.Видимость = Ложь;
		КонецЕсли; 
		Если НЕ ОтображениеДоступности4.Пустая() Тогда
			Элементы.ИтогоДоступно4.Заголовок = ОтображениеДоступности4;
		Иначе
			Элементы.ИтогоДоступно4.Видимость = Ложь;
		КонецЕсли; 
		
		// Итоги доступности отображаются под таблицей
		Элементы.ГрафикиРаботыРЦ.ВысотаПодвала = 1;
		Элементы.ГрафикиРаботыРЦРабочийЦентр.ТекстПодвала = НСтр("ru='Итого:';uk='Всього:'");
		
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Функция ДатыВыбранногоПериода(НачалоПериода, ОкончаниеПериода)
	
	ДатыВыбранногоПериода = Новый Массив;
	
	Если НачалоПериода = '000101010000' ИЛИ ОкончаниеПериода = '000101010000' Тогда
		Возврат ДатыВыбранногоПериода;
	КонецЕсли;
	
	ДатаПериода = НачалоПериода;
	Пока ДатаПериода <= ОкончаниеПериода Цикл
		
		ДатыВыбранногоПериода.Добавить(ДатаПериода);
		ДатаПериода = КонецДня(ДатаПериода) + 1;
		
	КонецЦикла;
	
	Возврат ДатыВыбранногоПериода;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатаСвязаннаяСКолонкой(ИмяКолонки)

	Возврат Дата(Сред(ИмяКолонки,3,8));

КонецФункции

&НаСервере
Процедура ДобавитьОписаниеКолонки(ИмяКолонки, ОписаниеТипа, ЕстьНаФорме, СписокДополнительныхКолонок)

	ОписаниеКолонки = Новый Структура("Имя,Тип,ЕстьНаФорме", ИмяКолонки, ОписаниеТипа, ЕстьНаФорме);
	СписокДополнительныхКолонок.Добавить(ОписаниеКолонки);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиПериода(ТекущийПериод)

	Возврат "_К" + Формат(ТекущийПериод, "ДФ=yyyyMMdd");

КонецФункции

&НаСервере
Функция ЗаголовокКолонкиПериода(ДатаПериода)
	
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		Возврат ОперативныйУчетПроизводства.ИнтервалПланированияСтрокой(ДатаПериода, Перечисления.ТочностьГрафикаПроизводства.День);
	Иначе
		Возврат ОперативныйУчетПроизводства.ИнтервалПланированияСтрокой(ДатаПериода, ИнтервалПланирования);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗначениеДоступности(ОтображениеДоступности, ДанныеОДоступностиВидаРЦ)

	ДоступностьВСтроке = 0;
	
	Если ОтображениеДоступности = Перечисления.ВариантыОтображенияДоступности.ПоВидуРЦ Тогда
		ДоступностьВСтроке = ДанныеОДоступностиВидаРЦ.ДоступностьПоВидуРЦОборот;
	ИначеЕсли ОтображениеДоступности = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуРаботыРЦ Тогда
		ДоступностьВСтроке = ДанныеОДоступностиВидаРЦ.ДоступностьПоРЦОборот;
	ИначеЕсли ОтображениеДоступности = Перечисления.ВариантыОтображенияДоступности.ПоГрафикуПроизводства Тогда
		ДоступностьВСтроке = ДанныеОДоступностиВидаРЦ.ЗанятоОборот;
	ИначеЕсли ОтображениеДоступности = Перечисления.ВариантыОтображенияДоступности.ДефицитДоступности Тогда
		ДоступностьВСтроке = ДанныеОДоступностиВидаРЦ.ДефицитДоступности;
	КонецЕсли;

	Возврат ДоступностьВСтроке;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеТаблицы()

	УсловноеОформление.Элементы.Очистить();
	
	// Выделение жирным ручных изменений
	#Область ВнесеныРучныеИзменения
	Для каждого ЭлДата Из СписокОтображаемыхДат Цикл
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ДатаПериода = ЭлДата.Значение;
		
		ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
		ИмяПоляДоступность = ИмяКолонкиПериода + "Доступность";
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДоступность);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикиРаботыРЦ." + ИмяКолонкиПериода + "ВнесеныРучныеИзменения");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
		
	КонецЦикла;	
	#КонецОбласти
	
	// Выделение красным ремонтов
	#Область Ремонты
	Для каждого ЭлДата Из СписокОтображаемыхДат Цикл
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ДатаПериода = ЭлДата.Значение;
		
		ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
		ИмяПоляДоступность = ИмяКолонкиПериода + "Доступность";
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляДоступность);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГрафикиРаботыРЦ." + ИмяКолонкиПериода + "ЗапланированРемонт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
		
	КонецЦикла;	
	#КонецОбласти
	
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьНаложенияСРемонтами(ПоТабличнойЧасти = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РемонтыРабочихЦентров.РабочийЦентр,
	|	РемонтыРабочихЦентров.ДатаНачала,
	|	РемонтыРабочихЦентров.ДатаЗавершения
	|ИЗ
	|	РегистрСведений.РемонтыРабочихЦентров КАК РемонтыРабочихЦентров
	|ГДЕ
	|	РемонтыРабочихЦентров.РабочийЦентр В(&СписокРабочихЦентров)
	|	И РемонтыРабочихЦентров.ДатаНачала <= &ОкончаниеПериода
	|	И РемонтыРабочихЦентров.ДатаЗавершения >= &НачалоПериода";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ОкончаниеПериода));
	
	СписокРабочихЦентров = ГрафикиРаботыРЦ.Выгрузить().ВыгрузитьКолонку("РабочийЦентр");
	Запрос.УстановитьПараметр("СписокРабочихЦентров", СписокРабочихЦентров);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("РабочийЦентр", Выборка.РабочийЦентр);
  		СписокСтрок = ГрафикиРаботыРЦ.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Определим даты периода на который запланирован ремонт
		ДатыВыбранногоПериода = ДатыВыбранногоПериода(
									Макс(НачалоДня(Выборка.ДатаНачала), НачалоПериода), 
									Мин(НачалоДня(Выборка.ДатаЗавершения), ОкончаниеПериода));
									
		Для каждого ДатаГрафика Из ДатыВыбранногоПериода Цикл
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаГрафика);
			Для каждого ДанныеСтроки Из СписокСтрок Цикл
				ДанныеСтроки[ИмяКолонкиПериода + "ЗапланированРемонт"] = Истина;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеРасписанияРаботы

&НаКлиенте
Процедура УстановитьРасписаниеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если НЕ ТолькоПросмотрГрафика И РезультатЗакрытия <> Неопределено Тогда
		УстановитьРасписаниеЗавершениеНаСервере(РезультатЗакрытия, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеЗавершениеНаСервере(РезультатЗакрытия, ДополнительныеПараметры)

	СтрокаДоступностьРЦ = ГрафикиРаботыРЦ.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор);
	Если СтрокаДоступностьРЦ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонкиПериода = ИмяКолонкиПериода(ДополнительныеПараметры.ДатаГрафика);
	
	РасписаниеГрафиковРаботыРЦ = ПолучитьИзВременногоХранилища(АдресНовыхДанныхГрафикиРаботыРЦ);
	
	// Удалим старые данные
	СтруктураПоиска = Новый Структура("РабочийЦентр,ДатаГрафика", СтрокаДоступностьРЦ.РабочийЦентр, ДополнительныеПараметры.ДатаГрафика);
 	СтарыеДанныеПоРЦ = РасписаниеГрафиковРаботыРЦ.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаРасписание Из СтарыеДанныеПоРЦ Цикл
		РасписаниеГрафиковРаботыРЦ.Удалить(СтрокаРасписание);
	КонецЦикла; 
	
	// Добавим новые данные
	ДоступностьСекунд = 0;
	Для каждого ДанныеИнтервала Из РезультатЗакрытия.РасписаниеДня Цикл
		СтрокаРасписание = РасписаниеГрафиковРаботыРЦ.Добавить();
		СтрокаРасписание.ВидРабочегоЦентра = ВидРабочегоЦентра;
		СтрокаРасписание.РабочийЦентр = СтрокаДоступностьРЦ.РабочийЦентр;
		СтрокаРасписание.ДатаГрафика = ДополнительныеПараметры.ДатаГрафика;
		СтрокаРасписание.ВремяНачала = ДанныеИнтервала.ВремяНачала;
		СтрокаРасписание.ВремяОкончания = ДанныеИнтервала.ВремяОкончания;
		СтрокаРасписание.Количество = ДанныеИнтервала.Длительность;
		СтрокаРасписание.ВнесеныРучныеИзменения = РезультатЗакрытия.ВнесеныРучныеИзменения;
		
		ДоступностьСекунд = ДоступностьСекунд + СтрокаРасписание.Количество;
	КонецЦикла; 
	
	// Обновим данные на форме
	СтрокаДоступностьРЦ[ИмяКолонкиПериода + "ДоступностьСекунд"] = ДоступностьСекунд;
	СтрокаДоступностьРЦ[ИмяКолонкиПериода + "Доступность"] = ДоступностьСекунд / 3600;
	СтрокаДоступностьРЦ[ИмяКолонкиПериода + "ВнесеныРучныеИзменения"] = РезультатЗакрытия.ВнесеныРучныеИзменения;
	СтрокаДоступностьРЦ[ИмяКолонкиПериода + "ДанныеИзменены"] = Истина;
	
	ПоместитьВоВременноеХранилище(РасписаниеГрафиковРаботыРЦ, АдресНовыхДанныхГрафикиРаботыРЦ);
	
	ЗаполнитьИтоги();
	
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРасписанияПоГрафику

&НаКлиенте
Функция ПолучитьДанныеПоРЦ()

	ВыделенныеСтроки = Элементы.ГрафикиРаботыРЦ.ВыделенныеСтроки;
	
	ОчиститьСообщения();
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru='Необходимо выбрать рабочие центры.';uk='Необхідно вибрати робочі центри.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ГрафикиРаботыРЦ");
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПоРЦ = Новый Массив;
	
	ШаблонОшибки = НСтр("ru='В строке %НомерСтроки% не указан';uk='У рядку %НомерСтроки% не вказано'");
	
	Для Каждого Строка из ВыделенныеСтроки Цикл
		
		ВыделеннаяСтрока = ГрафикиРаботыРЦ.НайтиПоИдентификатору(Строка);
		
		Если ВыделеннаяСтрока <> Неопределено Тогда
			
			Отказ = Ложь;
			
			НомерСтроки = ГрафикиРаботыРЦ.Индекс(ВыделеннаяСтрока) + 1;
			
			Если Не ЗначениеЗаполнено(ВыделеннаяСтрока.ГрафикРаботы) Тогда
				
				ТекстОшибки = СтрЗаменить(ШаблонОшибки,"%НомерСтроки%", НомерСтроки) + НСтр("ru=' график работы.';uk=' графік роботи.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ГрафикиРаботыРЦ", НомерСтроки, "ГрафикРаботы"));
				Отказ = Истина;
				
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ВыделеннаяСтрока.РабочийЦентр) Тогда
				
				ТекстОшибки = СтрЗаменить(ШаблонОшибки,"%НомерСтроки%", НомерСтроки) + НСтр("ru=' рабочий центр.';uk=' робочий центр.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ГрафикиРаботыРЦ", НомерСтроки, "РабочийЦентр"));
				Отказ = Истина;
				
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				ДанныеПоРЦ.Добавить(Новый Структура("РабочийЦентр,ГрафикРаботы,КоэффициентВремениРаботы", 
													ВыделеннаяСтрока.РабочийЦентр, ВыделеннаяСтрока.ГрафикРаботы, ВыделеннаяСтрока.КоэффициентВремениРаботы));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат ДанныеПоРЦ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРасписаниеПоГрафикуРабочегоЦентраНаСервере(ДанныеПоРЦ)
	
	РасписаниеГрафиковРаботыРЦ = ПолучитьИзВременногоХранилища(АдресНовыхДанныхГрафикиРаботыРЦ);
	
	СведенияОНовойДоступностиТаблица = Обработки.ДоступностьВидовРабочихЦентров.ЗаполнитьГрафикиРаботыРЦ(
										ВидРабочегоЦентра, 
										ДанныеПоРЦ, 
										НачалоПериода, 
										ОкончаниеПериода, 
										РасписаниеГрафиковРаботыРЦ);
										
	СведенияОНовойДоступностиТаблица.Свернуть("РабочийЦентр,ДатаГрафика", "Количество");									
	
	// Обновим данные на форме
	Для каждого СтрокаРЦ Из ДанныеПоРЦ Цикл
		
		СтруктураПоиска = Новый Структура("РабочийЦентр", СтрокаРЦ.РабочийЦентр);
  		СписокСтрок = ГрафикиРаботыРЦ.НайтиСтроки(СтруктураПоиска);
		СтрокаДоступностьРЦ = СписокСтрок[0];
		
		СтруктураПоиска = Новый Структура("РабочийЦентр", СтрокаРЦ.РабочийЦентр);
  		СписокСтрок = СведенияОНовойДоступностиТаблица.НайтиСтроки(СтруктураПоиска);
		Для каждого НоваяДоступность Из СписокСтрок Цикл
			ИмяКолонкиПериода = ИмяКолонкиПериода(НоваяДоступность.ДатаГрафика);
			СтрокаДоступностьРЦ[ИмяКолонкиПериода + "ДоступностьСекунд"] = НоваяДоступность.Количество;
			СтрокаДоступностьРЦ[ИмяКолонкиПериода + "Доступность"] = НоваяДоступность.Количество / 3600;
			СтрокаДоступностьРЦ[ИмяКолонкиПериода + "ДанныеИзменены"] = Истина;
			СтрокаДоступностьРЦ[ИмяКолонкиПериода + "ВнесеныРучныеИзменения"] = Ложь;
		КонецЦикла;
		
	КонецЦикла; 
	
	ПоместитьВоВременноеХранилище(РасписаниеГрафиковРаботыРЦ, АдресНовыхДанныхГрафикиРаботыРЦ);
	
	ЗаполнитьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗавершитьРедактирование();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	Если ОкончаниеПериода < НачалоПериода Тогда
		НачалоПериода = НачалоИнтервалаПланирования(ОкончаниеПериода, ИнтервалПланирования);
	КонецЕсли; 
	
	ЗаполнитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	Если НачалоПериода > ОкончаниеПериода Тогда
		ОкончаниеПериода = ОкончаниеИнтервалаПланирования(НачалоПериода, ИнтервалПланирования);
	КонецЕсли; 
	
	ЗаполнитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование()

	Модифицированность = Ложь;
	
	СохранитьРасписаниеГрафиковРаботыРЦ();
	
	Закрыть(СведенияОНовойДоступности);

КонецПроцедуры

&НаСервере
Процедура СохранитьРасписаниеГрафиковРаботыРЦ()

	ДатыВыбранногоПериода = ДатыВыбранногоПериода(НачалоПериода, ОкончаниеПериода);
	
	РасписаниеГрафиковРаботыРЦ = ПолучитьИзВременногоХранилища(АдресДанныхГрафикиРаботыРЦ);
	НовоеРасписаниеГрафиковРаботыРЦ = ПолучитьИзВременногоХранилища(АдресНовыхДанныхГрафикиРаботыРЦ);
	
	Для каждого СтрокаДоступность Из ГрафикиРаботыРЦ Цикл
		Для каждого ДатаПериода Из ДатыВыбранногоПериода Цикл
			ИмяКолонкиПериода = ИмяКолонкиПериода(ДатаПериода);
			
			// Сформируем сведения о новой доступности, которые передадим в рабочее место
			НоваяДоступность = СведенияОНовойДоступности.Добавить();
			НоваяДоступность.ДатаГрафика = ДатаПериода;
			НоваяДоступность.Количество = СтрокаДоступность[ИмяКолонкиПериода + "ДоступностьСекунд"] / СтрокаДоступность.КоэффициентВремениРаботы;
			НоваяДоступность.ВнесеныРучныеИзменения = СтрокаДоступность[ИмяКолонкиПериода + "ВнесеныРучныеИзменения"];
			
			Если НЕ СтрокаДоступность[ИмяКолонкиПериода + "ДанныеИзменены"] Тогда
				Продолжить;
			КонецЕсли;
			
			// Удалим старые данные 
			СтруктураПоиска = Новый Структура("РабочийЦентр,ДатаГрафика", СтрокаДоступность.РабочийЦентр, ДатаПериода);
   			СтарыеДанныеПоРЦ = РасписаниеГрафиковРаботыРЦ.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаРасписание Из СтарыеДанныеПоРЦ Цикл
				РасписаниеГрафиковРаботыРЦ.Удалить(СтрокаРасписание);
			КонецЦикла; 
			
			// Добавим новые
			СтруктураПоиска = Новый Структура("РабочийЦентр,ДатаГрафика", СтрокаДоступность.РабочийЦентр, ДатаПериода);
   			НовыеДанныеПоРЦ = НовоеРасписаниеГрафиковРаботыРЦ.НайтиСтроки(СтруктураПоиска);
			Если НовыеДанныеПоРЦ.Количество() <> 0 Тогда
				Для каждого СтрокаРасписание Из НовыеДанныеПоРЦ Цикл
					НовоеРасписание = РасписаниеГрафиковРаботыРЦ.Добавить();
					ЗаполнитьЗначенияСвойств(НовоеРасписание, СтрокаРасписание);
					НовоеРасписание.ВнесеныРучныеИзменения = СтрокаДоступность[ИмяКолонкиПериода + "ВнесеныРучныеИзменения"];
				КонецЦикла; 
			Иначе
				НовоеРасписание = РасписаниеГрафиковРаботыРЦ.Добавить();
				НовоеРасписание.ВидРабочегоЦентра = ВидРабочегоЦентра;
				НовоеРасписание.РабочийЦентр = СтрокаДоступность.РабочийЦентр;
				НовоеРасписание.ДатаГрафика = ДатаПериода;
				НовоеРасписание.ВнесеныРучныеИзменения = СтрокаДоступность[ИмяКолонкиПериода + "ВнесеныРучныеИзменения"];
				НовоеРасписание.Количество = 0;
			КонецЕсли; 
			
		КонецЦикла;
	КонецЦикла;

	ПоместитьВоВременноеХранилище(РасписаниеГрафиковРаботыРЦ, АдресДанныхГрафикиРаботыРЦ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачалоИнтервалаПланирования(ДатаПериода, ИнтервалПланирования)

	Если ДатаПериода <> '000101010000' Тогда
		Возврат НачалоДня(ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ДатаПериода, ИнтервалПланирования));
	Иначе
		Возврат '000101010000';
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОкончаниеИнтервалаПланирования(ДатаПериода, ИнтервалПланирования)

	Если ДатаПериода <> '000101010000' Тогда
		Возврат КонецДня(ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ДатаПериода, ИнтервалПланирования));
	Иначе
		Возврат '000101010000';
	КонецЕсли;

КонецФункции

&НаСервере
Процедура НастроитьФормуНаОснованииПравДоступа()

	ТолькоПросмотрГрафика = РежимРедактированияДоступности = Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводДоступностиДляФормированияГрафикаПроизводства 
								И НЕ ПравоНаВводДоступностиВидовРЦДляФормированияГрафикаПроизводства 
							ИЛИ РежимРедактированияДоступности = Перечисления.РежимыРедактированияДоступностиВидовРЦ.ВводГрафикаРаботыРЦДляФормированияРасписанияРаботыРЦ 
								И НЕ ПравоНаВводГрафиковРаботыРЦДляФормированияРасписанияРаботыРЦ 
							ИЛИ РежимРедактированияДоступности = Перечисления.РежимыРедактированияДоступностиВидовРЦ.ТолькоПросмотр;
		
	Если ТолькоПросмотрГрафика Тогда
		Элементы.ЗавершитьРедактирование.Видимость = Ложь;
		Элементы.ЗаполнитьРасписаниеПоГрафикуРабочегоЦентра.Видимость = Ложь;
		Элементы.ГрафикиРаботыРЦ.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
