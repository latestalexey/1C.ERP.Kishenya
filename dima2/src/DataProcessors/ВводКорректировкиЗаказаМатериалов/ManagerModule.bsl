#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ДобавитьКомандуСоздатьНаОснованииОтгрузкаПоМаршрутнымЛистам(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ВводКорректировкиЗаказаМатериалов) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "ВводНаОснованииУТКлиент.ОтгрузкаПоМаршрутнымЛистам";
		КомандаСоздатьНаОсновании.Идентификатор = "ОтгрузкаПоМаршрутнымЛистам";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru='Отгрузка материалов со склада';uk='Відвантаження матеріалів зі складу'");
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДобавитьКомандуСоздатьНаОснованииКорректировкаЗаказаМатериалов(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ВводКорректировкиЗаказаМатериалов) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "ВводНаОснованииУТКлиент.КорректировкаЗаказаМатериалов";
		КомандаСоздатьНаОсновании.Идентификатор = "КорректировкаЗаказаМатериалов";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru='Корректировка заказа материалов';uk='Коригування замовлення матеріалів'");
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Вызывается при заполнении варианта обеспечения обоими способами (команда Заполнить обеспечение и выбор действия в строке)
//
Функция ЗаполнитьВариантОбеспечения(Объект, Форма, Операция, ДанныеЗаполнения, ПараметрыУказанияСерий = Неопределено) Экспорт

	Если Операция = "Заказ" Тогда
		ТаблицаОбеспеченияДругихСтрокПродукции = ДанныеЗаполнения.СкопироватьКолонки();
	КонецЕсли;
	
	Товары = Объект.МатериалыИУслуги;
	
	ИспользоватьКорректировки = ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиЗаказаМатериаловВПроизводство");
	Документы.ЗаказНаПроизводство.УдалитьНедопустимыеДанныеЗаполнения(
			Операция, Товары, ИспользоватьКорректировки, ДанныеЗаполнения);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы("КоличествоУпаковок");
	
	ДатаПоУмолчанию = НачалоДня(ТекущаяДатаСеанса());

	ТекСтрокаТовары = Неопределено;
	Идентификатор   = Неопределено;
	СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
	НовыеЗначения  = ОбеспечениеКлиентСервер.КлючОбеспечения();
	Счетчик = 0;
	
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл

		Если Операция = "Заказ" И СтрокаОбеспечения.Скрывать Тогда

			ЗаполнитьЗначенияСвойств(ТаблицаОбеспеченияДругихСтрокПродукции.Добавить(), СтрокаОбеспечения);
			Продолжить;

		КонецЕсли;

		//Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда

			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
				СтрокаТовары = Товары.НайтиПоИдентификатору(Идентификатор);
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;
			ОбработатьНовуюСтроку = Ложь;
			
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);
			
		Иначе
			ТекСтрокаТовары = Товары.Вставить(Товары.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ОбработатьНовуюСтроку = Истина;
		КонецЕсли;

		//Заполнение полей обеспечения.
		ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);
		
		ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения, Склад");

		Если СтрокаОбеспечения.Отгружено = 0 Тогда
			ТекСтрокаТовары.ДатаПотребности = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
		КонецЕсли;

		// Строки сверх заказа нельзя обеспечивать обособленно
		Если ТекСтрокаТовары.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа 
			И ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно;
		ИначеЕсли ТекСтрокаТовары.КодСтрокиРаспоряжения = 0
			И ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно Тогда
			ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется;
		ИначеЕсли ТекСтрокаТовары.КодСтрокиРаспоряжения = 0
			И ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		КонецЕсли;
		
		Если ТекСтрокаТовары.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется
			ИЛИ ТекСтрокаТовары.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			ТекСтрокаТовары.ЗаказатьНаСклад = Ложь;
		Иначе
			ТекСтрокаТовары.ЗаказатьНаСклад = Истина;
		КонецЕсли; 
		
		Если НЕ ТекСтрокаТовары.ЗаказатьНаСклад Тогда
			ТекСтрокаТовары.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
		// Нужно заполнить назначение
		Если ПланированиеПроизводстваКлиентСервер.НеобходимоОбновитьНазначениеВСтрокеТЧМатериалыИУслуги(
				ТекСтрокаТовары, СтарыеЗначения) Тогда
				
			ДанныеЗаполнения = Новый Структура;
			
			ДанныеЗаполнения.Вставить("КлючСвязи",        ТекСтрокаТовары.КлючСвязи);
			ДанныеЗаполнения.Вставить("Номенклатура",     ТекСтрокаТовары.Номенклатура);
			ДанныеЗаполнения.Вставить("Характеристика",   ТекСтрокаТовары.Характеристика);
			ДанныеЗаполнения.Вставить("Подразделение",    ТекСтрокаТовары.Подразделение);
			ДанныеЗаполнения.Вставить("Склад",            ТекСтрокаТовары.Склад);
			ДанныеЗаполнения.Вставить("Назначение",       ТекСтрокаТовары.НазначениеПродукции);
			ДанныеЗаполнения.Вставить("НазначениеЗаказа", ТекСтрокаТовары.НазначениеЗаказа);
			ДанныеЗаполнения.Вставить("ПоЗаказуДавальца", ТекСтрокаТовары.ПроизводствоПоЗаказу);
			
			ДанныеПродукции = ПланированиеПроизводстваКлиентСервер.СтруктураДанныхПродукции(ДанныеЗаполнения);
				
			ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслуги(
				ТекСтрокаТовары, ДанныеПродукции);
				
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
		ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);

		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

		Если ОбработатьНовуюСтроку Тогда
			Если СтрокаТовары.КоличествоОтгружено > СтрокаТовары.Количество Тогда
				// В новой строке нужно сохранить старый код строки, чтобы отгрузка была корректной
				ТекСтрокаТовары.КоличествоОтгружено = СтрокаТовары.КоличествоОтгружено - СтрокаТовары.Количество;
				СтрокаТовары.КоличествоОтгружено = СтрокаТовары.Количество;
			Иначе
				ТекСтрокаТовары.КодСтроки = 0;
				ТекСтрокаТовары.КоличествоОтгружено = 0;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);

	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ВводКорректировкиЗаказаМатериалов));
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;

	Если Операция = "Заказ" Тогда
		ИзмененныеСтроки = ЗаполнитьВариантОбеспеченияТаблицыФормы(
			Форма.ТаблицаДокументаДляОбеспечения, ТаблицаОбеспеченияДругихСтрокПродукции);

	КонецЕсли;

	Возврат ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(Счетчик);

КонецФункции

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры
//			Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//	Возвращаемое значение
//			Тип Структура
//				Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Обработка.ВводКорректировкиЗаказаМатериалов";
	ПараметрыУказанияСерий.ИмяТЧТовары = "МатериалыИУслуги";
	ПараметрыУказанияСерий.ИмяТЧСерии = "МатериалыИУслуги";
	
	ПараметрыУказанияСерий.ИмяПоляСклад = Неопределено;
	ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ТекущиеДанные";
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("ПроизводитсяВПроцессе");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("ЗаказатьНаСклад");
	
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура());
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура());
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПередачаВПроизводствоОтгрузка);
		
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Подразделение");
	
	ПараметрыУказанияСерий.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	ПараметрыУказанияСерий.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийОтправитель");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПолучатель");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Подразделение,
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийОтправитель,
	|	Товары.СтатусУказанияСерийПолучатель,
	|	Товары.НомерСтроки,
	|	Товары.ВариантОбеспечения,
	|	Товары.ЗаказатьНаСклад,
	|	Товары.ПроизводитсяВПроцессе
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА НЕ Товары.ЗаказатьНаСклад
	|				ИЛИ Товары.ПроизводитсяВПроцессе
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыОтправитель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|			И (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА НЕ Товары.ЗаказатьНаСклад
	|				ИЛИ Товары.ПроизводитсяВПроцессе
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УчетСебестоимостиПоСериям)
	|			ТОГДА 14
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|			ТОГДА 10
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыПолучатель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Подразделение)
	|			И (ПолитикиУчетаСерий.Ссылка = СпрНоменклатура.ВидНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	СтатусыОтправитель.СтатусУказанияСерий КАК СтатусУказанияСерийОтправитель,
	|	ВЫБОР
	|		КОГДА СтатусыОтправитель.СтатусУказанияСерий В (10, 14)
	|			ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерийПолучатель,
	|	СтатусыОтправитель.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОтправитель КАК СтатусыОтправитель
	|		ПО (СтатусыОтправитель.НомерСтроки = Товары.НомерСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПолучатель КАК СтатусыПолучатель
	|		ПО (СтатусыПолучатель.НомерСтроки = Товары.НомерСтроки)
	|ГДЕ
	|	(СтатусыОтправитель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийОтправитель
	|			ИЛИ ВЫБОР
	|				КОГДА СтатусыОтправитель.СтатусУказанияСерий В (10, 14)
	|					ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|				ИНАЧЕ 0
	|			КОНЕЦ <> Товары.СтатусУказанияСерийПолучатель
	|			ИЛИ СтатусыОтправитель.СтатусУказанияСерий <> Товары.СтатусУказанияСерий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устанавливает условное оформление в списке ввода корректировки заказа материалов
//
Процедура УстановитьУсловноеОформление(УсловноеОформление, Элементы, ИмяРеквизита, ПрефиксЭлементов, ДляВводаКорректировок = Истина) Экспорт
	
	// Текст <из подразделения> если материал не заказывается на склад
	#Область ОтметкаНезаполненногоСклад
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиСклад"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ЗаказатьНаСклад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<из подразделения>';uk='<з підрозділу>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	#КонецОбласти
	
	// Склад можно выбрать только для товаров
	#Область ТолькоПросмотрСклад
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиСклад"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не используется>';uk='<не використовується>'"));
	#КонецОбласти
	
	// Запретить редактировать строку и выделить ее коричневым цветом, если материал производится в процессе
	#Область НастройкаОформленияДляМатериалаПроизводимогоВПроцессе
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслуги"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", ДляВводаКорректировок);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	#КонецОбласти
	
	// Выделение серым отмененных строк
	#Область ВыделениеСерымОтмененныхСтрок
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслуги"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	#КонецОбласти
	
	// Запрет редактирования полей отмененных строк
	#Область ТолькоПросмотрОтмененныхСтрок
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиСклад"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Текст <Отгружено>
	#Область ТекстОтгружено
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиВариантОбеспечения"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.КоличествоОтгружено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.КоличествоОсталосьОтгрузить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Отгружено>';uk='<Відвантажено>'"));
	#КонецОбласти
	
	// Текст <Отгружается>
	#Область ТекстОтгружено
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиВариантОбеспечения"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.КоличествоОтгружено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.КоличествоОсталосьОтгрузить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Отгружается>';uk='<Відвантажується>'"));
	#КонецОбласти
	
	// Текст <Оставить в подразделении>
	#Область ТекстОтгружено
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиВариантОбеспечения"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.КоличествоОтгружено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Оставить в подразделении>';uk='<Залишити в підрозділі>'"));
	#КонецОбласти
	
	// Запрет редактирования если материал отгружен
	#Область ТолькоПросмотрОтгружено
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиСерия"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиУпаковка"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиВариантОбеспечения"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиСклад"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиДатаПотребности"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.КоличествоОтгружено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
		
	// Вариант обеспечения и дата потребности не используется
	#Область ВариантОбеспеченияНеИспользуется
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не используется>';uk='<не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиВариантОбеспечения"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиДатаПотребности"].Имя);

	ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	// если это работа и не используется обособленное обеспечение
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
	
		ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;

	КонецЕсли;
	#КонецОбласти

	// Дата потребности не используется
	#Область ДатаПотребностиНеИспользуется
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не используется>';uk='<не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиДатаПотребности"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ВариантОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить(Перечисления.ВариантыОбеспечения.НеТребуется);
	ОтборЭлемента.ПравоеЗначение = СписокВариантов;

	#КонецОбласти
	
	// Дата потребности ОтметкаНезаполненного
	#Область ДатаПотребностиОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ПрефиксЭлементов + "МатериалыИУслугиДатаПотребности"].Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".Товары.ВариантОбеспечения");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОбеспечения.НеТребуется;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ПроизводитсяВПроцессе");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ПодгруппаОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ПодгруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ПодгруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ЗаказатьНаСклад");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ПодгруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяРеквизита + ".МатериалыИУслуги.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	#КонецОбласти
	
КонецПроцедуры

// Выполняет запись корректировки заказа материалов
// Если используются корректировки заказа, то создаются документы КорректировкаЗаказаМатериаловВПроизводство
// Если не используются корректировки заказа, то изменения записываются в заказы на производство
//
// Параметры:
//  МатериалыИУслуги 			- ТаблицаЗначений, ДанныеФормыКоллекция - данные по материалам (см. табличную часть "МатериалыИУслуги")
//  СписокСозданныхДокументов	- СписокЗначений - содержит список созданных документов
//
// Возвращаемое значение:
//   - Булево - Истина, если изменения записаны
//
Функция ЗаписатьИзменения(МатериалыИУслуги, СписокСозданныхДокументов = Неопределено) Экспорт
	
	СписокСозданныхДокументов = Новый СписокЗначений;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиЗаказаМатериаловВПроизводство") Тогда
		РезультатЗаписи = ЗаписатьИзмененияВКорректировкиЗаказаМатериаловВПроизводство(МатериалыИУслуги, СписокСозданныхДокументов);
	Иначе
		РезультатЗаписи = ЗаписатьИзмененияВЗаказыНаПроизводство(МатериалыИУслуги, СписокСозданныхДокументов);
	КонецЕсли;
	
	Возврат РезультатЗаписи
	
КонецФункции

// Переносит корректировку материалов в заказы на производство
//
// Параметры:
//  МатериалыИУслуги - ТаблицаЗначений, ДанныеФормыКоллекция - данные по материалам (см. табличную часть "МатериалыИУслуги")
//  СписокДокументов - Соответствие - содержит сформированные документы, 
//										можно передать параметр с заполненными ключами, 
//										чтобы заполнить уже полученные заказы-объект
// 
// Возвращаемое значение:
//   Булево - Истина, если операция успешно выполнена
//
Функция ПеренестиКорректировкуВЗаказы(МатериалыИУслуги, СписокДокументов) Экспорт

	СписокИзмененныхСтрок = СписокИзмененныхСтрок(МатериалыИУслуги);
	
	ТаблицаМатериалыИУслуги = Новый ТаблицаЗначений;
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство, ДокументСсылка.ЗаказМатериаловВПроизводство"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("КодСтрокиИсходный", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("КодСтрокиРаспоряжения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	
	ТаблицаМатериалыИУслуги.Колонки.Добавить("ВариантОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("ДатаПотребности", Новый ОписаниеТипов("Дата"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Отменено", Новый ОписаниеТипов("Булево"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ТаблицаМатериалыИУслуги.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
	ТаблицаМатериалыИУслуги.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
	
	ДобавленныеСтрокиРаспоряжений = Новый Соответствие;
	
	Для каждого ДанныеСтроки Из СписокИзмененныхСтрок Цикл
		
		ДокументОбъект = СписокДокументов.Получить(ДанныеСтроки.Ссылка);
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект = ДанныеСтроки.Ссылка.ПолучитьОбъект();
			Попытка
				// Заблокируем заказ для редактирования
				ЗаблокироватьДанныеДляРедактирования(ДанныеСтроки.Ссылка);
			Исключение
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат Ложь;
			КонецПопытки;
			
			СписокДокументов.Вставить(ДанныеСтроки.Ссылка, ДокументОбъект);
		КонецЕсли;
		
		СтрокаКорректировка = ТаблицаМатериалыИУслуги.Добавить();
		СтрокаКорректировка.Распоряжение = ДанныеСтроки.Ссылка;
		СтрокаКорректировка.КодСтрокиРаспоряжения = ДанныеСтроки.КодСтрокиРаспоряжения;
		СтрокаКорректировка.ВариантОбеспечения = ДанныеСтроки.ВариантОбеспеченияИсходный;
		СтрокаКорректировка.ДатаПотребности = ДанныеСтроки.ДатаПотребностиИсходный;
		СтрокаКорректировка.КодСтроки = ДанныеСтроки.КодСтрокиИсходный;
		СтрокаКорректировка.Отменено = ДанныеСтроки.ОтмененоИсходный;
		СтрокаКорректировка.Серия = ДанныеСтроки.СерияИсходный;
		СтрокаКорректировка.Склад = ДанныеСтроки.СкладИсходный;
		СтрокаКорректировка.Упаковка = ДанныеСтроки.УпаковкаИсходный;
		СтрокаКорректировка.Количество = -ДанныеСтроки.Количество;
		СтрокаКорректировка.КоличествоУпаковок = -ДанныеСтроки.КоличествоУпаковок;
		
		СтрокаКорректировка = ТаблицаМатериалыИУслуги.Добавить();
		СтрокаКорректировка.Распоряжение = ДанныеСтроки.Ссылка;
		СтрокаКорректировка.КодСтрокиРаспоряжения = ДанныеСтроки.КодСтрокиРаспоряжения;
		СтрокаКорректировка.ВариантОбеспечения = ДанныеСтроки.ВариантОбеспечения;
		СтрокаКорректировка.ДатаПотребности = ДанныеСтроки.ДатаПотребности;
		СтрокаКорректировка.КодСтроки = ДанныеСтроки.КодСтроки;
		СтрокаКорректировка.Отменено = ДанныеСтроки.Отменено;
		СтрокаКорректировка.Серия = ДанныеСтроки.Серия;
		СтрокаКорректировка.Склад = ДанныеСтроки.Склад;
		СтрокаКорректировка.Упаковка = ДанныеСтроки.Упаковка;
		СтрокаКорректировка.Количество = ДанныеСтроки.Количество;
		СтрокаКорректировка.КоличествоУпаковок = ДанныеСтроки.КоличествоУпаковок;
		
		СтрокиРаспоряжения = ДобавленныеСтрокиРаспоряжений.Получить(ДанныеСтроки.Ссылка);
		Если СтрокиРаспоряжения = Неопределено ИЛИ СтрокиРаспоряжения.Найти(ДанныеСтроки.КодСтрокиРаспоряжения) = Неопределено Тогда
			
			ПараметрыОтбора = Новый Структура("КодСтроки", СтрокаКорректировка.КодСтрокиРаспоряжения);
			СтрокаМатериалИсходный = ДокументОбъект.МатериалыИУслуги.НайтиСтроки(ПараметрыОтбора)[0];
			
			СтрокаКорректировка = ТаблицаМатериалыИУслуги.Добавить();
			СтрокаКорректировка.Распоряжение = ДанныеСтроки.Ссылка;
			СтрокаКорректировка.КодСтрокиРаспоряжения = ДанныеСтроки.КодСтрокиРаспоряжения;
			СтрокаКорректировка.ВариантОбеспечения = СтрокаМатериалИсходный.ВариантОбеспечения;
			СтрокаКорректировка.ДатаПотребности = СтрокаМатериалИсходный.ДатаПотребности;
			СтрокаКорректировка.КодСтроки = СтрокаМатериалИсходный.КодСтроки;
			СтрокаКорректировка.Отменено = СтрокаМатериалИсходный.Отменено;
			СтрокаКорректировка.Серия = СтрокаМатериалИсходный.Серия;
			СтрокаКорректировка.Склад = СтрокаМатериалИсходный.Склад;
			СтрокаКорректировка.Упаковка = СтрокаМатериалИсходный.Упаковка;
			СтрокаКорректировка.Количество = СтрокаМатериалИсходный.Количество;
			СтрокаКорректировка.КоличествоУпаковок = СтрокаМатериалИсходный.КоличествоУпаковок;
			
			Если СтрокиРаспоряжения = Неопределено Тогда
				СтрокиРаспоряжения = Новый Массив;
			КонецЕсли; 
			СтрокиРаспоряжения.Добавить(ДанныеСтроки.КодСтрокиРаспоряжения);
			ДобавленныеСтрокиРаспоряжений.Вставить(ДанныеСтроки.Ссылка, СтрокиРаспоряжения);
		КонецЕсли; 
		
	КонецЦикла;
	
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаМатериалыИУслуги.Свернуть("Распоряжение,КодСтрокиРаспоряжения,ВариантОбеспечения,ДатаПотребности,
									|КодСтроки,Отменено,Серия,Склад,Упаковка", "Количество,КоличествоУпаковок");
									
	// Содержит ключи связи с продукцией по которой изменились материалы									
	// Используется, чтобы сбросить признак расчета графика
	КодыСтрокПродукции = Новый Соответствие; 
	Для каждого СтрокаКорректировка Из ТаблицаМатериалыИУслуги Цикл
		
		Если СтрокаКорректировка.КоличествоУпаковок = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СписокДокументов.Получить(СтрокаКорректировка.Распоряжение);
		Если СтрокаКорректировка.КодСтроки = 0 Тогда
			
			ПараметрыОтбора = Новый Структура("КодСтроки", СтрокаКорректировка.КодСтрокиРаспоряжения);
			СтрокаМатериалИсходный = ДокументОбъект.МатериалыИУслуги.НайтиСтроки(ПараметрыОтбора)[0];
	
			СтрокаМатериал = ДокументОбъект.МатериалыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаМатериал, СтрокаМатериалИсходный);
			СтрокаМатериал.КодСтроки = 0;
			СтрокаМатериал.КлючСвязи = Новый УникальныйИдентификатор;
			
		Иначе
			
			ПараметрыОтбора = Новый Структура("КодСтроки", СтрокаКорректировка.КодСтроки);
			СтрокаМатериал = ДокументОбъект.МатериалыИУслуги.НайтиСтроки(ПараметрыОтбора)[0];
			
		КонецЕсли;
		
		СтрокаМатериал.ЗаказатьНаСклад = (СтрокаКорректировка.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.НеТребуется);
		СтрокаМатериал.ВариантОбеспечения = СтрокаКорректировка.ВариантОбеспечения;
		СтрокаМатериал.ДатаПотребности = СтрокаКорректировка.ДатаПотребности;
		СтрокаМатериал.Отменено = СтрокаКорректировка.Отменено;
		СтрокаМатериал.Серия = СтрокаКорректировка.Серия;
		СтрокаМатериал.Склад = СтрокаКорректировка.Склад;
		СтрокаМатериал.Упаковка = СтрокаКорректировка.Упаковка;
		СтрокаМатериал.Количество = СтрокаКорректировка.Количество;
		СтрокаМатериал.КоличествоУпаковок = СтрокаКорректировка.КоличествоУпаковок;
		
		ИзмененныеКодыСтрокПродукции = КодыСтрокПродукции.Получить(ДокументОбъект.Ссылка);
		Если ИзмененныеКодыСтрокПродукции = Неопределено Тогда
			ИзмененныеКодыСтрокПродукции = Новый Массив;
		КонецЕсли;
		Если ИзмененныеКодыСтрокПродукции.Найти(СтрокаМатериал.КлючСвязиПродукция) = Неопределено Тогда
			ИзмененныеКодыСтрокПродукции.Добавить(СтрокаМатериал.КлючСвязиПродукция);
			КодыСтрокПродукции.Вставить(ДокументОбъект.Ссылка, ИзмененныеКодыСтрокПродукции);
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого ИзмененныеКодыСтрокПродукции Из КодыСтрокПродукции Цикл
		ДокументОбъект = СписокДокументов.Получить(ИзмененныеКодыСтрокПродукции.Ключ);
		Для каждого КлючСвязиПродукция Из ИзмененныеКодыСтрокПродукции.Значение Цикл
			
			ПараметрыОтбора = Новый Структура("КлючСвязи", КлючСвязиПродукция);
			СтрокаПродукции = ДокументОбъект.Продукция.НайтиСтроки(ПараметрыОтбора)[0];
			СтрокаПродукции.ГрафикРассчитан = Ложь;
			
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

Функция СписокИзмененныхСтрок(МатериалыИУслуги) Экспорт

	СписокИзмененныхСтрок = Новый Массив;
	
	Для каждого ДанныеСтроки Из МатериалыИУслуги Цикл
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка)
			И (ДанныеСтроки.ВариантОбеспечения <> ДанныеСтроки.ВариантОбеспеченияИсходный
				ИЛИ ДанныеСтроки.ДатаПотребности <> ДанныеСтроки.ДатаПотребностиИсходный
				ИЛИ ДанныеСтроки.Склад <> ДанныеСтроки.СкладИсходный 
				ИЛИ ДанныеСтроки.ЗаказатьНаСклад <> ДанныеСтроки.ЗаказатьНаСкладИсходный
				ИЛИ ДанныеСтроки.Серия <> ДанныеСтроки.СерияИсходный 
				ИЛИ ДанныеСтроки.Отменено <> ДанныеСтроки.ОтмененоИсходный 
				ИЛИ ДанныеСтроки.Упаковка <> ДанныеСтроки.УпаковкаИсходный 
				ИЛИ ДанныеСтроки.КодСтроки = 0) Тогда
			
			СписокИзмененныхСтрок.Добавить(ДанныеСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокИзмененныхСтрок;
	
КонецФункции

#Область РедактированиеСпецификацииЗаказаНаПроизводства

// Возвращает параметры редактирования материалов и услуг в Заказе на производство
//
// Параметры
//     УникальныйИдентификатор - УникальныйИдентификатор -  Уникальный идентификатор формы, во временное хранилище которой надо поместить результат редактирования и вернуть адрес 
//
// Возвращаемое значение:
//     Структура - параметры ввода корректировок
//       * ИспользоватьКорректировки - Булево - значение функциональной опции ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
//       * ВведеныеКорректировки     - Соответствие - информация о ранее введенных корректировках 
//           ** ключ     - ключ связи продукции
//           ** значение - истина, если корректировки уже вводились
//       * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище которой будут помещены корректировки
//       * Адрес                     - Строка - адрес во временном хранилище ранее введенных корректировок
//
Функция ПараметрыРедактированияМатериалов(УникальныйИдентификатор) Экспорт
	
	ИспользоватьКорректировки = ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиЗаказаМатериаловВПроизводство");
	
	ПараметрыРедактированияМатериалов = Новый Структура;
	
	ПараметрыРедактированияМатериалов.Вставить("ИспользоватьКорректировки", ИспользоватьКорректировки);
	ПараметрыРедактированияМатериалов.Вставить("ВведеныеКорректировки",     Новый Соответствие);
	ПараметрыРедактированияМатериалов.Вставить("УникальныйИдентификатор",   УникальныйИдентификатор);
	ПараметрыРедактированияМатериалов.Вставить("Адрес");
	
	Возврат ПараметрыРедактированияМатериалов;
	
КонецФункции

// Обновляет параметры редактирования материалов в Заказе на производство
//
// Параметры
//     Параметры - Структура - параметры ввода корректировок
//       * ИспользоватьКорректировки             - Булево - значение функциональной опции ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
//       * ВведеныеКорректировки     - Соответствие - информация о ранее введенных корректировках 
//           ** ключ     - ключ связи продукции
//           ** значение - истина, если корректировки уже вводились
//       * УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище которой будут помещены корректировки
//       * Адрес                   - Строка - адрес во временном хранилище ранее введенных корректировок
//
Процедура ОбновитьПараметрыРедактированияМатериалов(Параметры, УникальныйИдентификатор) Экспорт
	
	Если ЭтоАдресВременногоХранилища(Параметры.Адрес) Тогда 
		
		УдалитьИзВременногоХранилища(Параметры.Адрес);
	
	КонецЕсли;
	
	Параметры = ПараметрыРедактированияМатериалов(УникальныйИдентификатор);
	
КонецПроцедуры

// Возвращает признак использования корректировки заказа материалов
//  Заказ - ДокументОбъект.ЗаказНаПроизводство, ДокументСсылка.ЗаказНаПроизводство - объект, для которого необходимо
//   получить признак использования корректировок
//
// Параметры
//
// Возвращаемое значение:
//   - Булево - Истина, если корректировки используются
//
Функция ИспользуютсяКорректировки(Объект) Экспорт

	Перем Статус;

	ИспользоватьКорректировки = ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиЗаказаМатериаловВПроизводство");
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказНаПроизводство") Тогда
		
		Возврат ИспользоватьКорректировки И Объект.Статус <> Перечисления.СтатусыЗаказовНаПроизводство.Создан;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		
		Возврат ИспользоватьКорректировки И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Статус") <> Перечисления.СтатусыЗаказовНаПроизводство.Создан;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") И (Объект.Свойство("Статус", Статус) ИЛИ Объект.Свойство("СтатусЗаказаНаПроизводство", Статус)) Тогда
		
		Возврат ИспользоватьКорректировки И Статус <> Перечисления.СтатусыЗаказовНаПроизводство.Создан;
		
	КонецЕсли;

КонецФункции

// Возвращает признак наличия корректировок во временном хранилище 
//
// Параметры
//  Параметры - Структура - параметры ввода корректировок
//    * ИспользоватьКорректировки - Булево - значение функциональной опции ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
//    * ВведеныеКорректировки     - Соответствие - информация о ранее введенных корректировках 
//        ** ключ     - ключ связи продукции
//        ** значение - истина, если корректировки уже вводились
//    * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище которой будут помещены корректировки
//    * Адрес                     - Строка - адрес во временном хранилище ранее введенных корректировок
//  КлючСвязиПродукция - УникальныйИдентификатор - ключ строки продукции
//
// Возвращаемое значение:
//   - Булево - Истина, если есть корректировки
//
Функция ВведеныКорректировки(Параметры, Знач КлючСвязиПродукция = Неопределено) Экспорт
	
	ВведеныКорректировки = Ложь;
	
	Если Параметры <> Неопределено Тогда
		
		Если КлючСвязиПродукция = Неопределено Тогда
			
			Для Каждого ЭлементКоллекции Из Параметры.ВведеныеКорректировки Цикл
				
				ВведеныКорректировки = (ЭлементКоллекции.Значение = Истина);
				
				Если ВведеныКорректировки Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ВведеныКорректировки = (Параметры.ВведеныеКорректировки[КлючСвязиПродукция] = Истина);
			
		КонецЕсли;
		
		ВведеныКорректировки = ВведеныКорректировки И ЭтоАдресВременногоХранилища(Параметры.Адрес);
		
	КонецЕсли;
	
	Возврат ВведеныКорректировки;
	
КонецФункции

// Функция - Скорректировать заказ материалов в производство
//
// Параметры:
//  Заказ				 - 	 - 
//  КлючСвязиПродукция	 - 	 - 
//  СокращенныеЭтапы	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция СкорректироватьЗаказМатериаловВПроизводство(Заказ, КлючСвязиПродукция, СокращенныеЭтапы) Экспорт
	
	Перем Результат, КэшированныеЗначения;
	
	Если СокращенныеЭтапы.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВводКорректировкиЗаказаМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.Создать();
	ВводКорректировкиЗаказаМатериалов.ЗаполнитьВводКорректировкиСпецификацииЗаказа(Заказ, КлючСвязиПродукция, Ложь, Ложь);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("КлючСвязиЭтапы");
	
	МатериалыИУслуги = ВводКорректировкиЗаказаМатериалов.МатериалыИУслуги.Выгрузить();
	МатериалыИУслуги.Индексы.Добавить("КлючСвязиЭтапы");
	
	ВводКорректировкиЗаказаМатериалов.МатериалыИУслуги.Очистить();
	ВводКорректировкиЗаказаМатериалов = Неопределено;
	
	Для Каждого СокращенныйЭтап Из СокращенныеЭтапы Цикл
		
		ПараметрыОтбора.КлючСвязиЭтапы = СокращенныйЭтап.КлючСвязи;
		
		Для Каждого ТекущаяСтрока Из МатериалыИУслуги.НайтиСтроки(ПараметрыОтбора) Цикл
			
			Требуется = ТекущаяСтрока.Количество * СокращенныйЭтап.КоличествоЭтапов/СокращенныйЭтап.КоличествоЭтаповИсходный;
			
			Если ТекущаяСтрока.КоличествоОтгружено > Требуется Тогда
				
				НоваяСтрока = МатериалыИУслуги.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				
				НоваяСтрока.Отменено   = Истина;
				НоваяСтрока.Количество = ТекущаяСтрока.КоличествоОтгружено - Требуется;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
			Иначе
				
				НоваяСтрока = МатериалыИУслуги.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				
				НоваяСтрока.Отменено   = Истина;
				НоваяСтрока.Количество = ТекущаяСтрока.Количество - Требуется;
				
				НоваяСтрока.КодСтроки          = 0;
				НоваяСтрока.ЗаказатьНаСклад    = Ложь; //ПроизводитсяВПроцессе = Ложь - ранее установлен отбор
				НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МатериалыИУслуги.Скопировать(СписокИзмененныхСтрок(МатериалыИУслуги));
	
КонецФункции

// Помещает результат ввода корректировок спецификации заказа на производство в хранилище
//
// Параметры:
//     КлючСвязиПродукция - УникальныйИдентификатор - ключ строки продукции
//     Параметры - Структура - параметры ввода корректировок
//       * ИспользоватьКорректировки - Булево - значение функциональной опции ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
//       * ВведеныеКорректировки     - Соответствие - информация о ранее введенных корректировках 
//           ** ключ     - ключ связи продукции
//           ** значение - Истина, если корректировки уже вводились
//       * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище которой будут помещены корректировки
//       * Адрес                     - Строка - адрес во временном хранилище ранее введенных корректировок
//     МатериалыИУслуги - ТаблицаЗначений, ДанныеФормыКоллекция - данные по материалам (см. табличную часть "МатериалыИУслуги")
//
Процедура ПоместитьРезультатКорректировкиСпецификацииЗаказаВХранилище(КлючСвязиПродукция, Параметры, МатериалыИУслуги) Экспорт
	
	Если ТипЗнч(МатериалыИУслуги) <> Тип("ТаблицаЗначений")
		ИЛИ МатериалыИУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПервичнаяКорректировка = Не ВведеныКорректировки(Параметры, КлючСвязиПродукция);
	
	Если ЭтоАдресВременногоХранилища(Параметры.Адрес) Тогда
		
		ТаблицаКорректировок = ПолучитьИзВременногоХранилища(Параметры.Адрес);
		
		МассивКлючейКУдалению = ОбщегоНазначенияКлиентСервер.СократитьМассив(
									ОбщегоНазначенияУТ.ПолучитьМассивУникальныхЗначенийКолонкиТаблицы(ТаблицаКорректировок, "КлючСвязиПродукция"), 
									ПолучитьМассивКлючейПродукцииПоКоторымВведеныКорректировки(Параметры));
			
		Если Не ПервичнаяКорректировка Тогда
			
			МассивКлючейКУдалению.Добавить(КлючСвязиПродукция);
			
		КонецЕсли;
		
		Для Каждого КлючКУдалению Из МассивКлючейКУдалению Цикл
			
			Для Каждого НайденнаяСтрока Из ТаблицаКорректировок.НайтиСтроки(Новый Структура("КлючСвязиПродукция", КлючКУдалению)) Цикл
				
				ТаблицаКорректировок.Удалить(НайденнаяСтрока);
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаКорректировок = Обработки.ВводКорректировкиЗаказаМатериалов.Создать().МатериалыИУслуги.ВыгрузитьКолонки();
		ТаблицаКорректировок.Индексы.Добавить("КлючСвязиПродукция");
		
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ТаблицаКорректировок, МатериалыИУслуги);
	
	Параметры.Адрес = ПоместитьВоВременноеХранилище(ТаблицаКорректировок, Параметры.УникальныйИдентификатор);
	
	Если ПервичнаяКорректировка Тогда
		
		Параметры.ВведеныеКорректировки.Вставить(КлючСвязиПродукция, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает результат ввода корректировок спецификации заказа на производство из хранилища
//
// Параметры:
//     Параметры - Структура - параметры ввода корректировок
//       * ИспользоватьКорректировки - Булево - значение функциональной опции ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
//       * ВведеныеКорректировки     - Соответствие - информация о ранее введенных корректировках 
//           ** ключ     - ключ связи продукции
//           ** значение - Истина, если корректировки уже вводились
//       * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище которой будут помещены корректировки
//       * Адрес                     - Строка - адрес во временном хранилище ранее введенных корректировок
//     КлючСвязиПродукция - УникальныйИдентификатор - ключ строки продукции
//
// Возвращаемое значение:
// - ТаблицаЗначений - данные по материалам (см. табличную часть "МатериалыИУслуги")
//
Функция ПолучитьРезультатКорректировкиСпецификацииЗаказаИзХранилища(Параметры, КлючСвязиПродукция = Неопределено) Экспорт
	
	Перем Результат;
	
	Если ВведеныКорректировки(Параметры, КлючСвязиПродукция) Тогда
		
		Если КлючСвязиПродукция = Неопределено Тогда
			
			Результат = ПолучитьИзВременногоХранилища(Параметры.Адрес);
			
		Иначе
			
			Результат = ПолучитьИзВременногоХранилища(Параметры.Адрес).Скопировать(Новый Структура("КлючСвязиПродукция", КлючСвязиПродукция));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Выполняет сохранение корректировок заказа материалов для заказа на производство
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаПроизводство - распоряжение, для которого необходимо скорректировать заказ материалов в производство
//  Параметры - Структура - параметры ввода корректировок
//    * ИспользоватьКорректировки - Булево - значение функциональной опции ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
//    * ВведеныеКорректировки     - Соответствие - информация о ранее введенных корректировках 
//        ** ключ     - ключ связи продукции
//        ** значение - истина, если корректировки уже вводились
//    * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище которой будут помещены корректировки
//    * Адрес                     - Строка - адрес во временном хранилище ранее введенных корректировок
//  МатериалыИУслуги - ТаблицаЗначений, ДанныеФормыКоллекция - данные по материалам, если не передано, то получается из временного хранилища
//
// Возвращаемое значение:
//   - Булево - Истина, если изменения записаны
//
Функция СохранитьКорректировкиЗаказаМатериаловПоЗаказуНаПроизводство(Объект, Параметры, МатериалыИУслуги = Неопределено) Экспорт
	
	Если МатериалыИУслуги = Неопределено Тогда
		
		Если ВведеныКорректировки(Параметры) Тогда
			МатериалыИУслуги = ПолучитьИзВременногоХранилища(Параметры.Адрес);
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли МатериалыИУслуги.Количество() = 0 Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	СоответствиеНазначений = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Назначение", Объект.Назначение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПродукция.КлючСвязи КАК КлючСвязи,
	|	ЕСТЬNULL(Назначения.Ссылка, &Назначение) КАК Назначение
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО (Назначения.Ссылка = ТаблицаПродукция.Назначение)
	|			И (Назначения.Заказ ССЫЛКА Документ.ЗаказДавальца)
	|ГДЕ
	|	ТаблицаПродукция.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СоответствиеНазначений.Вставить(Выборка.КлючСвязи, Выборка.Назначение);
		
	КонецЦикла;
	
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	
	РеквизитыРаспоряжения = Новый Структура;
	РеквизитыРаспоряжения.Вставить("Организация", Объект.Организация);
	РеквизитыРаспоряжения.Вставить("Распоряжение", Объект.Ссылка);
	РеквизитыРаспоряжения.Вставить("ЗаказНаПроизводство", Объект.Ссылка);
	
	Для Каждого Корректировка Из МатериалыИУслуги Цикл
		
		ЗаполнитьЗначенияСвойств(Корректировка, РеквизитыРаспоряжения);
		
		Если (Корректировка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
				Или Корректировка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно
				Или Корректировка.ВариантОбеспеченияИсходный = Перечисления.ВариантыОбеспечения.Обособленно
				Или Корректировка.ВариантОбеспеченияИсходный = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно) Тогда
			
			Корректировка.Назначение = СоответствиеНазначений[Корректировка.КлючСвязиПродукция];
			
		Иначе
			
			Корректировка.Назначение = ПустоеНазначение;
			
		КонецЕсли;
		
	КонецЦикла;

	Результат = Ложь;
	
	Если Параметры.ИспользоватьКорректировки Тогда
		
		СписокДокументов = Новый СписокЗначений;
		
		Результат = ЗаписатьИзмененияВКорректировкиЗаказаМатериаловВПроизводство(МатериалыИУслуги, СписокДокументов);
		
	Иначе
		
		СоответствиеДокументов = Новый Соответствие;
		СоответствиеДокументов.Вставить(Объект.Ссылка, Объект);
		
		Результат = ПеренестиКорректировкуВЗаказы(МатериалыИУслуги, СоответствиеДокументов);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаписатьИзмененияВКорректировкиЗаказаМатериаловВПроизводство(МатериалыИУслуги, СписокСозданныхДокументов = Неопределено) Экспорт

	НужноЗаполнитьКодСтроки = Ложь;
	
	// Создание документов
	СписокДокументов = Новый ТаблицаЗначений;
	СписокДокументов.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	СписокДокументов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	СписокДокументов.Колонки.Добавить("ДокументОбъект");
	
	СписокИзмененныхСтрок = СписокИзмененныхСтрок(МатериалыИУслуги);
	Для каждого ДанныеСтроки Из СписокИзмененныхСтрок Цикл
		
		СтруктураПоиска = Новый Структура("Распоряжение,Подразделение", ДанныеСтроки.Ссылка, ДанныеСтроки.Подразделение);
		СписокСтрок = СписокДокументов.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			ДокументОбъект = Документы.КорректировкаЗаказаМатериаловВПроизводство.СоздатьДокумент();
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
			ДокументОбъект.Подразделение = ДанныеСтроки.Подразделение;
			ДокументОбъект.Распоряжение = ДанныеСтроки.Ссылка;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Организация) Тогда
				ДокументОбъект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Ссылка, "Организация");
			Иначе
				ДокументОбъект.Организация = ДанныеСтроки.Организация;
			КонецЕсли; 
			
			СтрокаДокументОбъект = СписокДокументов.Добавить();
			СтрокаДокументОбъект.Распоряжение = ДанныеСтроки.Ссылка;
			СтрокаДокументОбъект.Подразделение = ДанныеСтроки.Подразделение;
			СтрокаДокументОбъект.ДокументОбъект = ДокументОбъект;
		Иначе
			ДокументОбъект = СписокСтрок[0].ДокументОбъект;
		КонецЕсли;
		
		СтрокаКорректировка = ДокументОбъект.МатериалыИУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКорректировка, ДанныеСтроки);
		
		Если ДанныеСтроки.КодСтроки = 0 Тогда
			НужноЗаполнитьКодСтроки = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если СписокДокументов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Запись документов
	НачатьТранзакцию();
	
	Для каждого СтрокаДокументОбъект Из СписокДокументов Цикл
		
		ДокументОбъект = СтрокаДокументОбъект.ДокументОбъект;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла; 
	
	ЗафиксироватьТранзакцию();
	
	Для каждого СтрокаДокументОбъект Из СписокДокументов Цикл
		СписокСозданныхДокументов.Добавить(СтрокаДокументОбъект.ДокументОбъект.Ссылка, Строка(СтрокаДокументОбъект.ДокументОбъект.Ссылка));
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписатьИзмененияВЗаказыНаПроизводство(МатериалыИУслуги, СписокСозданныхДокументов)

	// Создание документов
	СписокДокументов = Новый Соответствие;
	
	Если НЕ ПеренестиКорректировкуВЗаказы(МатериалыИУслуги, СписокДокументов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Запись документов
	НачатьТранзакцию();
	
	Для каждого СтрокаДокументОбъект Из СписокДокументов Цикл
		
		ДокументОбъект = СтрокаДокументОбъект.Значение;
		
		Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли; 
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла; 
	
	ЗафиксироватьТранзакцию();
	
	Для каждого СтрокаДокументОбъект Из СписокДокументов Цикл
		СписокСозданныхДокументов.Добавить(СтрокаДокументОбъект.Значение.Ссылка, Строка(СтрокаДокументОбъект.Значение.Ссылка));
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьВариантОбеспеченияТаблицыФормы(ТаблицаПриемник, ТаблицаИсточник)

	Идентификатор = Неопределено;
	ИзмененныеСтроки = Новый Массив();

	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл

		Если Идентификатор <> СтрокаИсточник.Идентификатор Тогда

			Идентификатор  = СтрокаИсточник.Идентификатор;
			СтрокаПриемник = ТаблицаПриемник.НайтиПоИдентификатору(Идентификатор);

		Иначе

			НоваяСтрока = ТаблицаПриемник.Вставить(ТаблицаПриемник.Индекс(СтрокаПриемник) + 1);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПриемник);
			СтрокаПриемник = НоваяСтрока;

		КонецЕсли;

		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник, "Количество, ВариантОбеспечения, Склад, ДатаОтгрузки");

		ИзмененныеСтроки.Добавить(СтрокаПриемник);

	КонецЦикла;

	Возврат ИзмененныеСтроки;

КонецФункции

// Возвращает массив ключей связи продукции, для которых используются корректировки
//
// Параметры
//  Параметры - Структура - параметры ввода корректировок
//    * ИспользоватьКорректировки - Булево - значение функциональной опции ИспользоватьКорректировкиЗаказаМатериаловВПроизводство
//    * ВведеныеКорректировки     - Соответствие - информация о ранее введенных корректировках 
//        ** ключ     - ключ связи продукции
//        ** значение - истина, если корректировки уже вводились
//    * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище которой будут помещены корректировки
//    * Адрес                     - Строка - адрес во временном хранилище ранее введенных корректировок
//
// Возвращаемое значение:
//   - Массив - массив ключей связи продукции, по которым используются и введены корректировки
//
Функция ПолучитьМассивКлючейПродукцииПоКоторымВведеныКорректировки(Параметры)
	
	МассивКлючей = Новый Массив;
	
	Если Параметры.ИспользоватьКорректировки Тогда
		Для Каждого ЭлементКоллекции Из Параметры.ВведеныеКорректировки Цикл
			Если ЭлементКоллекции.Значение = Истина Тогда
				МассивКлючей.Добавить(ЭлементКоллекции.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивКлючей;
	
КонецФункции

#КонецОбласти

#КонецЕсли