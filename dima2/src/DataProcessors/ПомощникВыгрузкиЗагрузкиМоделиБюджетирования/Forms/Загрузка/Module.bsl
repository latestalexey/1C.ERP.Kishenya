&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтатусВыполненнойЗагрузки = Ложь;
	// Устанавливаем текущую таблицу переходов
	ПереходыПоСценарию();
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗначениеЗаполнено(Объект.ИмяФайлаМодели) Тогда
		УдалитьВременныеФайлыНаСервере(Объект.ИмяФайлаМодели);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИмяФайлаМоделиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИмяФайлаМоделиРасширениеПодключено",
		ЭтотОбъект);
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыАналитикПриАктивизацииСтроки(Элемент)

	УправлениеОтображениемСтраницаЗаменаЗначений();

КонецПроцедуры

&НаКлиенте
Процедура ВидыБюджетовФлагПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыБюджетов.ТекущиеДанные;
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Флаг");
	УстановитьПометкиРодителей(ТекущиеДанные, "Флаг");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыБюджетовФлагПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыПодготовкиБюджетов.ТекущиеДанные;
	УстановитьПометкиПодчиненных(ТекущиеДанные, "Флаг");
	УстановитьПометкиРодителей(ТекущиеДанные, "Флаг");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменаЗначенийАналитикАналитикаБДПриИзменении(Элемент)
	
	ВидыАналитикРассчитать(Элементы.ЗаменаЗначенийАналитик.ТекущиеДанные.Тип);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВсеАналитикиПриИзменении(Элемент)

	УправлениеОтображениемСтраницаЗаменаЗначений();

КонецПроцедуры

&НаКлиенте
Процедура ВидыБюджетовОбновитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыБюджетов.ТекущиеДанные;
	УстановитьФлагОбновитьВидовЭтаповБюджета(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПодготовкиБюджетовОбновитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭтапыПодготовкиБюджетов.ТекущиеДанные;
	УстановитьФлагОбновитьВидовЭтаповБюджета(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМодельПриИзменении(Элемент)
	
	ПризнакОбновитьМодельПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыБюджетовОбновитьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВидыБюджетов.ТекущиеДанные;
	Элемент.СписокВыбора.Очистить();
	СписокВыбора = ДоступныеДействия(ТекущиеДанные);
	Для Каждого Стр Из СписокВыбора Цикл
		НоваяСтрока = Элемент.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПодготовкиБюджетовОбновитьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЭтапыПодготовкиБюджетов.ТекущиеДанные;
	Элемент.СписокВыбора.Очистить();
	СписокВыбора = ДоступныеДействия(ТекущиеДанные);
	Для Каждого Стр Из СписокВыбора Цикл
		НоваяСтрока = Элемент.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыБюджетовНаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ВидыБюджетов.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыБюджетовНаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЭтапыПодготовкиБюджетов.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Если ЗначениеЗаполнено(Объект.ИмяФайлаМодели) Тогда
		УдалитьВременныеФайлыНаСервере(Объект.ИмяФайлаМодели);
		Объект.ИмяФайлаМодели = "";
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ЗавершитьФоновоеЗадание(ИдентификаторЗадания);
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Дерево = Неопределено;
	Если Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаВидыБюджетов Тогда
		Дерево = ВидыБюджетов;
	ИначеЕсли  Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаЭтапыПодготовкиБюджетов Тогда
		Дерево = ЭтапыПодготовкиБюджетов;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка.Флаг = Истина;
		УстановитьПометкиПодчиненных(Строка, "Флаг");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Дерево = Неопределено;
	Если Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаВидыБюджетов Тогда
		Дерево = ВидыБюджетов;
	ИначеЕсли  Элементы.СтраницыВидыЭтапыБюджета.ТекущаяСтраница = Элементы.СтраницаЭтапыПодготовкиБюджетов Тогда
		Дерево = ЭтапыПодготовкиБюджетов;
	Иначе
		Возврат;
	КонецЕсли;

	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка.Флаг = Ложь;
		УстановитьПометкиПодчиненных(Строка, "Флаг");
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазделИнициализацииПереходовПомощника

&НаКлиенте
Функция ПараметрыПерехода()
	
	ПараметрыПерехода = Новый Структура;
	ПараметрыПерехода.Вставить("ПорядковыйНомерПерехода", "");
	ПараметрыПерехода.Вставить("ИмяОсновнойСтраницы", "");
	ПараметрыПерехода.Вставить("ИмяСтраницыНавигации", "");
	ПараметрыПерехода.Вставить("ИмяСтраницыДекорации", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриОткрытии", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПослеОткрытия", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриПереходеДалее", "");
	ПараметрыПерехода.Вставить("ИмяОбработчикаПриПереходеНазад", "");
	
	Возврат ПараметрыПерехода;
	
КонецФункции

&НаКлиенте
Процедура ПереходыПоСценарию()
	
	Переходы.Очистить();
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 1;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаПриветствие";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииНачало";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаПриветствие_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее = "СтраницаПриветствие_ПриПереходеДалее";
	ДобавитьПереход(ПараметрыПерехода);
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 2;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаФильтры";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииНазадДалее";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииНазадДалее";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаФильтры_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее = "СтраницаФильтры_ПриПереходеДалее";
	ДобавитьПереход(ПараметрыПерехода);
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 3;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаЗаменаЗначений";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииНазадДалее";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииНазадДалее";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаЗаменаЗначений_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее = "СтраницаЗаменаЗначений_ПриПереходеДалее";
	ДобавитьПереход(ПараметрыПерехода);
	
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 4;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаОжидания";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииОжидание";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииОжидание";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаОжидания_ПриОткрытии";
	ПараметрыПерехода.ИмяОбработчикаПослеОткрытия = "СтраницаОжидания_ПослеОткрытия";
	
	ДобавитьПереход(ПараметрыПерехода);
	
	ПараметрыПерехода = ПараметрыПерехода();
	ПараметрыПерехода.ПорядковыйНомерПерехода = 5;
	ПараметрыПерехода.ИмяОсновнойСтраницы = "СтраницаЗавершение";
	ПараметрыПерехода.ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
	ПараметрыПерехода.ИмяСтраницыДекорации = "СтраницаДекорацииОкончание";
	ПараметрыПерехода.ИмяОбработчикаПриОткрытии = "СтраницаЗавершение_ПриОткрытии";
	ДобавитьПереход(ПараметрыПерехода);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПереход(ПараметрыПерехода)
	
	НоваяСтрока = Переходы.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПараметрыПерехода.ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ПараметрыПерехода.ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ПараметрыПерехода.ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ПараметрыПерехода.ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ПараметрыПерехода.ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ПараметрыПерехода.ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ПараметрыПерехода.ИмяОбработчикаПриОткрытии;
	НоваяСтрока.ИмяОбработчикаПослеОткрытия    = ПараметрыПерехода.ИмяОбработчикаПослеОткрытия;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Значение;
	Если ПорядковыйНомерПерехода < 0 Тогда
		ПорядковыйНомерПерехода = 0;
	КонецЕсли;
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			Выполнить(ИмяПроцедуры);
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			Выполнить(ИмяПроцедуры);
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Выполнить(ИмяПроцедуры);
		
		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			Иначе
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Установка отображения текущей страницы
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	ПодключитьОбработчикОжидания("ВыполнитьОбработчикПослеОткрытия", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикПослеОткрытия()
	
	СтрокиПереходаТекущие = Переходы.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПослеОткрытия
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПослеОткрытия) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика]()";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПослеОткрытия);
		
		Выполнить(ИмяПроцедуры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазделОбработчиковСобытийПерехода

&НаКлиенте
Процедура Подключаемый_СтраницаПриветствие_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
	
	Заголовок = НСтр("ru='Загрузка модели бюджетирования.';uk='Завантаження моделі бюджетування.'");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаПриветствие_ПриПереходеДалее(Отказ)
	
	ОчиститьСообщения();
	
	Элементы.ГруппаСостояние.Видимость = Истина;
	Элементы.ВидыБюджетов.Видимость = Ложь;
	
	Если ПустаяСтрока(ИмяФайлаАрхива) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не указан путь к файлу с данными';uk='Не зазначений шлях до файлу з даними'"), , "ИмяФайлаАрхива", "ИмяФайлаАрхива", Отказ);
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СтраницаПриветствие_ПриПереходеДалее_ИнициализацияФайла",
		ЭтотОбъект);
	
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайлаАрхива);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаФильтры_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
	Заголовок = НСтр("ru='Выбор загружаемых видов бюджетов и этапов подготовки бюджетов.';uk='Вибір видів бюджетів і етапів підготовки бюджетів, які завантажуються.'");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаФильтры_ПриПереходеДалее(Отказ)
	
	ОчиститьСообщения();
	ВыполнитьДействияПередЗагрузкойНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаЗаменаЗначений_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ОтображатьВсеАналитики = Истина;
	Заголовок = НСтр("ru='Сопоставление загружаемых значений';uk='Зіставлення значень, які завантажуються'");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаЗаменаЗначений_ПриПереходеДалее(Отказ)
	
	ОчиститьСообщения();
	ПроверкаЗаполненияАналитикПередЗагрузкой(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = НСтр("ru='Загрузка модели бюджетирования.';uk='Завантаження моделі бюджетування.'");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаПриветствие_ПриПереходеДалее_ИнициализацияФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СтраницаПриветствие_ПриПереходеДалее_ПроверкаСуществованияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаПриветствие_ПриПереходеДалее_ПроверкаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ИзменитьПорядковыйНомерПерехода(-1);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='По указанному пути файл с данными не найден';uk='За вказаним шляхом файл з даними не знайдено'"), , "ИмяФайлаАрхива", "ИмяФайлаАрхива");
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПомещениеФайлаНаСерверЗавершение", ЭтаФорма);
	НачатьПомещениеФайла(Обработчик, АдресВременногоХранилищаФайлаОбмена, ИмяФайлаАрхива, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаЗавершение_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.КомандаГотово.КнопкаПоУмолчанию = Истина;
	Элементы.НадписьСтатусЗагрузки.Заголовок = 
		?(СтатусВыполненнойЗагрузки,
			НСтр("ru='Загрузка успешно завершена';uk='Завантаження успішно завершено'"),
			НСтр("ru='Загрузка выполненна с ошибками';uk='Завантаження виконана з помилками'"));
	
	Элементы.НадписьВариантовПродолжения.Заголовок = 
		?(СтатусВыполненнойЗагрузки,
		НСтр("ru='Нажмите кнопку ""Готово"" для выхода из помощника.';uk='Натисніть кнопку ""Готово"" для виходу з помічника.'"),
		НСтр("ru='Для того чтобы попробовать загрузить еще раз, нажмите ""Назад"", для выхода из помощника, нажимите ""Готово""';uk='Для того щоб спробувати завантажити ще раз, натисніть ""Назад"", для виходу з помічника, натисніть ""Готово""'"));
		
	ЗаполнитьИтоговуюИнформацию();
	
	Заголовок = НСтр("ru='Загрузка модели бюджетирования.';uk='Завантаження моделі бюджетування.'");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаОжидания_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Заголовок = НСтр("ru='Загрузка модели бюджетирования.';uk='Завантаження моделі бюджетування.'");
	
	Если Не ЭтоПереходДалее Тогда
		ПропуститьСтраницу = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтраницаОжидания_ПослеОткрытия()
	
	ВыполнитьЗагрузкуМодели();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ВыполнитьЗагрузкуМодели()
	
	Результат = ЗагрузитьНаСервере();
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	Иначе
		ЗагрузкаВыполнена();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаНаСерверЗавершение(Результат, Адрес, ВыбранноеИмяФайла, Параметры) Экспорт
	
	АдресВременногоХранилищаФайлаОбмена = Адрес;
	
	ТекстОшибки = "";
	ИмяФайлаМоделиXML = РазархивироватьФайлНаСервере(АдресВременногоХранилищаФайлаОбмена, ТекстОшибки);
	Если ИмяФайлаМоделиXML = Неопределено Тогда
		ИзменитьПорядковыйНомерПерехода(-1);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	Объект.ИмяФайлаМодели = ИмяФайлаМоделиXML;
	
	ЗаполнитьФильтрыПоДаннымXML();
	ПризнакОбновитьМодельПриИзменении();
	РаскрытьВерхнийУровеньДереваФормы(ВидыБюджетов,"ВидыБюджетов");
	//++ НЕ УТКА
	РаскрытьВерхнийУровеньДереваФормы(ЭтапыПодготовкиБюджетов,"ЭтапыПодготовкиБюджетов");
	//-- НЕ УТКА
	
	Элементы.ГруппаСостояние.Видимость = Ложь;
	Элементы.ВидыБюджетов.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНаСервере()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ДвоичныеДанные",Новый ДвоичныеДанные(Объект.ИмяФайлаМодели));
	ПараметрыЗадания.Вставить("ВыбранныеВидыБюджета", ПолучитьВыбранныеЭлементыОтбора(ВидыБюджетов,"Нпп"));
	ПараметрыЗадания.Вставить("ВыбранныеЭтапыПодготовкиБюджета", ПолучитьВыбранныеЭлементыОтбора(ЭтапыПодготовкиБюджетов,"Нпп"));
	ПараметрыЗадания.Вставить("ЗаменаЗначенийАналитик", ЗаменаЗначенийАналитик.Выгрузить(,"АналитикаФайлаУИН,АналитикаФайлаНпп,АналитикаБД,ЗагружатьАналитикуИзИсточника,СсылкаИсточника"));
	ПараметрыЗадания.Вставить("ЗагружаемыеНпп",ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ЗагружаемыеНпп.ВыгрузитьЗначения()));
	ПараметрыЗадания.Вставить("ПараметрыОбновленияНпп",ПолучитьПараметрыОбновленияВсехНпп());
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.ПомощникВыгрузкиЗагрузкиМоделиБюджетирования.ЗагрузитьМодельУчета(ПараметрыЗадания, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
		
	Иначе
		
		НаименованиеЗадания = "";
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
				УникальныйИдентификатор,
				"Обработки.ПомощникВыгрузкиЗагрузкиМоделиБюджетирования.ЗагрузитьМодельУчета",
				ПараметрыЗадания,
				НаименованиеЗадания);
		
		АдресХранилища = Результат.АдресХранилища;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИтоговуюИнформацию()
	
	ЕстьОшибки = Не СтатусВыполненнойЗагрузки;
	
	Элементы.ИтоговаяИнформация.Видимость = ЕстьОшибки;
	Если ЕстьОшибки Тогда
		ИтоговаяИнформация =  НСтр("ru='Протокол:';uk='Протокол:'") + Символы.ПС+ ПротоколОбмена.ПолучитьТекст();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ЗавершитьФоновоеЗадание(ИдентификаторЗадания)
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		ФоновоеЗадание.Отменить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
		ЗагрузкаВыполнена();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗадания", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВыполнена()
	
	РезультатВыгрузкиИзФайла = ПолучитьИзВременногоХранилища(АдресХранилища);
	СтатусВыполненнойЗагрузки = РезультатВыгрузкиИзФайла.ЗагрузкаВыполнена;
	ПротоколОбмена.УстановитьТекст(РезультатВыгрузкиИзФайла.ПротоколОбмена);
	
	ЗаполнитьИтоговуюИнформацию();
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаМоделиРасширениеПодключено(Результат, ДополнительныеПараметры) Экспорт 
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Фильтр             = НСтр("ru='Файл выгрузки (*.zip)|*.zip';uk='Файл вивантаження (*.zip)|*.zip'");
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок          = НСтр("ru='Выберите путь к файлу выгрузки модели учета';uk='Виберіть шлях до файлу вивантаження моделі обліку'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИмяФайлаМоделиПоказатьДиалогЗавершение",
		ЭтотОбъект);
		
	ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаМоделиПоказатьДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаАрхива = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФильтрыПоДаннымXML()
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Объект.ИмяФайлаМодели); 
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Объекты = ДокументDOM.ПолучитьЭлементыПоИмени("Объект");
	
	ВидыБюджетовДерево = РеквизитФормыВЗначение("ВидыБюджетов");
	ВидыБюджетовДерево.Строки.Очистить();
	//++ НЕ УТКА
	ЭтапыПодготовкиБюджетовДерево = РеквизитФормыВЗначение("ЭтапыПодготовкиБюджетов");
	ЭтапыПодготовкиБюджетовДерево.Строки.Очистить();
	//-- НЕ УТКА
	ЭлементыФайла.Очистить();
	
	ИспользуемыеВидыЭтапыБюджета = Новый Массив();
	
	Для Каждого Элемент Из Объекты Цикл
		
		ТипЭлементаСтрока = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Тип").Значение;
		
		РезультатЧтения = ПрочитатьЭлементXML(Элемент);
		
		Если ТипЭлементаСтрока = "СправочникСсылка.МоделиБюджетирования" Тогда
			
			МодельБюджетированияНпп = Число(РезультатЧтения.Нпп);
			УИД = Новый УникальныйИдентификатор(РезультатЧтения.УИН);
			НайденнаяМодель = Справочники.МоделиБюджетирования.ПолучитьСсылку(УИД);
			Если ЗначениеЗаполнено(НайденнаяМодель.Наименование) Тогда
				МодельБюджетированияСсылка = НайденнаяМодель;
				ИспользуемыеВидыЭтапыБюджета = ПолучитьИспользуемыеВидыЭтапыБюджета(МодельБюджетированияСсылка); 
				ОбновитьМодель = Истина;
			Иначе
				ОбновитьМодель = Ложь;
			КонецЕсли;
			
		ИначеЕсли ТипЭлементаСтрока = "СправочникСсылка.ВидыБюджетов" Тогда
			
			Нов = ВидыБюджетовДерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Нов,РезультатЧтения);
			УИД = Новый УникальныйИдентификатор(Нов.УИН);
			НайденныйВидБюджета = Справочники.ВидыБюджетов.ПолучитьСсылку(УИД);
			Если ЗначениеЗаполнено(НайденныйВидБюджета.Наименование) Тогда
				Нов.Ссылка = НайденныйВидБюджета;
				Если Не ИспользуемыеВидыЭтапыБюджета.Найти(НайденныйВидБюджета) = Неопределено Тогда
					Нов.Используется = Истина;
				КонецЕсли;
			КонецЕсли;
			
		//++ НЕ УТКА
		ИначеЕсли Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.ЭтапыПодготовкиБюджетов") Тогда
		
			Нов = ЭтапыПодготовкиБюджетовДерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Нов,РезультатЧтения);
			УИД = Новый УникальныйИдентификатор(Нов.УИН);
			НайденныйЭтапБюджета = Справочники.ЭтапыПодготовкиБюджетов.ПолучитьСсылку(УИД);
			Если ЗначениеЗаполнено(НайденныйЭтапБюджета.Наименование) ИЛИ ЗначениеЗаполнено(НайденныйЭтапБюджета.Код) Тогда
				Нов.Ссылка = НайденныйЭтапБюджета;
				Если Не ИспользуемыеВидыЭтапыБюджета.Найти(НайденныйЭтапБюджета) = Неопределено Тогда
					Нов.Используется = Истина;
				КонецЕсли;
			КонецЕсли;
		//-- НЕ УТКА
		
		КонецЕсли;
		
		НоваяСтрока = ЭлементыФайла.Добавить();
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип(ТипЭлементаСтрока));
		ОписаниеТиповАнилитики = Новый ОписаниеТипов(МассивТипов);
		НоваяСтрока.Тип = ОписаниеТиповАнилитики;
		НоваяСтрока.ТипСтрока = ТипЭлементаСтрока;
		Если РезультатЧтения.Свойство("Код") Тогда
			НоваяСтрока.Код = РезультатЧтения.Код;
		КонецЕсли;
		Если РезультатЧтения.Свойство("Наименование") Тогда
			НоваяСтрока.Наименование = РезультатЧтения.Наименование;
		КонецЕсли;
		Если РезультатЧтения.Свойство("ИНН") Тогда
			НоваяСтрока.ИНН = РезультатЧтения.ИНН;
		КонецЕсли;
		Если РезультатЧтения.Свойство("КПП") Тогда
			НоваяСтрока.КПП = РезультатЧтения.КПП;
		КонецЕсли;
		Если РезультатЧтения.Свойство("ЭтоГруппа") И РезультатЧтения.ЭтоГруппа Тогда
			НоваяСтрока.ЭтоГруппа = Истина;
		КонецЕсли;
		Если РезультатЧтения.Свойство("УИН") Тогда
			НоваяСтрока.УИН = РезультатЧтения.УИН;
		КонецЕсли;
		Если РезультатЧтения.Свойство("Нпп") Тогда
			НоваяСтрока.Нпп = РезультатЧтения.Нпп;
		КонецЕсли;
		Если РезультатЧтения.Свойство("Номер") Тогда
			НоваяСтрока.Номер = РезультатЧтения.Номер;
		КонецЕсли;
		Если РезультатЧтения.Свойство("Дата") Тогда
			НоваяСтрока.Дата = РезультатЧтения.Дата;
		КонецЕсли;
		Если Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.СценарииТоварногоПланирования") Тогда
			Если РезультатЧтения.Свойство("ВалютаСценарияТоварногоПланирования") Тогда
				НоваяСтрока.ВалютаСценарияТоварногоПланирования = РезультатЧтения.ВалютаСценарияТоварногоПланирования;
			КонецЕсли;
			Если РезультатЧтения.Свойство("ПериодичностьСценарияТоварногоПланирования") Тогда
				НоваяСтрока.ПериодичностьСценарияТоварногоПланирования = РезультатЧтения.ПериодичностьСценарияТоварногоПланирования;
			КонецЕсли;
		КонецЕсли;
		Если Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.ВидыПланов") Тогда
			Если РезультатЧтения.Свойство("СценарийТоварногоПланированияВидаПлана") Тогда
				НоваяСтрока.СценарийТоварногоПланированияВидаПлана = РезультатЧтения.СценарийТоварногоПланированияВидаПлана;
			КонецЕсли;
			Если РезультатЧтения.Свойство("ТипПланаВидаПлана") Тогда
				НоваяСтрока.ТипПланаВидаПлана = РезультатЧтения.ТипПланаВидаПлана;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	ВосстановитьИерархиюДереваФильтра(ВидыБюджетовДерево);
	ЗначениеВРеквизитФормы(ВидыБюджетовДерево,"ВидыБюджетов");
	//++ НЕ УТКА
	ВосстановитьИерархиюДереваФильтра(ЭтапыПодготовкиБюджетовДерево);
	ЗначениеВРеквизитФормы(ЭтапыПодготовкиБюджетовДерево,"ЭтапыПодготовкиБюджетов");
	//-- НЕ УТКА
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменаЗначенийАналитикАналитикаБД.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменаЗначенийАналитик.ВариантПодсказкиВвода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ЗначениеНеНайдено";
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменаЗначенийАналитик.АналитикаБД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменаЗначенийАналитик.НСИТоварногоПланирования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru='<Значение аналитики не найдено.>';uk='<Значення аналітики не знайдено.>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменаЗначенийАналитикАналитикаБД.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменаЗначенийАналитик.ВариантПодсказкиВвода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "ЗначениеНеНайдено";
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменаЗначенийАналитик.АналитикаБД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменаЗначенийАналитик.НСИТоварногоПланирования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru='<Выбирите соответствие.>';uk='<Оберіть відповідність.>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаменаЗначенийАналитикАналитикаБД.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаменаЗначенийАналитик.ВариантПодсказкиВвода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "НетПравНаОбъект";
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru='<Найденное значение недоступно для текущего пользователя из-за ограничений по записям. Обратитесь к администратору базы.>';uk='<Знайдене значення недоступне для поточного користувача через обмеження по записах. Зверніться до адміністратора бази.>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПередЗагрузкойНаСервере()
	
	Если НЕ ПроверкаПередЗагрузкой() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗагружаемыеНппПоДаннымXML();
	ЗаполнитьЗаменаЗначенийАналитикПоДаннымXML();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЗаполненияАналитикПередЗагрузкой(Отказ)
	
	Для каждого СтрокаЗаменыАналитики Из ЗаменаЗначенийАналитик Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаЗаменыАналитики.АналитикаБД)
		   И НЕ СтрокаЗаменыАналитики.ЗагружатьАналитикуИзИсточника Тогда
			
			Отказ = Истина;
			
			ТекстСообщения = НСтр("ru='Не заполнено значение аналитики: %1. Загрузка модели не может быть выполнена, выбирите значение аналитики.';uk='Не заповнено значення аналітики: %1. Завантаження моделі не може бути виконано, оберіть значення аналітики.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаЗаменыАналитики.АналитикаФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаПередЗагрузкой()
	ПроверкаПройдена = Истина;
	
	Поиск = Новый Структура("ЭтоГруппа", Ложь);
	ТипыЗагружаемыхДанных = ЭлементыФайла.Выгрузить(Поиск, "ТипСтрока").ВыгрузитьКолонку("ТипСтрока");
	ТипыЗагружаемыхДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТипыЗагружаемыхДанных);
	ТипыЗначенийАналитик = БюджетированиеСервер.ВсеТипыАналитик().Типы();
	
	Для каждого ТипДанных Из ТипыЗагружаемыхДанных Цикл
		Если ТипыЗначенийАналитик.Найти(Тип(ТипДанных)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип(ТипДанных));
		Если НЕ ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
			ПроверкаПройдена = Ложь;
			
			ТекстСообщения = НСтр("ru='У текущего пользователя нет прав на чтение таблицы %1, необходимой для загрузки данных по модели. Загрузка будет прервана. Обратитесь к администратору базы.';uk='У користувача немає прав на читання таблиці "" %1, необхідної для завантаження даних по моделі. Завантаження буде перерване. Зверніться до адміністратора бази.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				ОбъектМетаданных.ПолноеИмя());
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПроверкаПройдена;
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаменаЗначенийАналитикПоДаннымXML()
	
	ВидыАналитик.Очистить();
	ЗаменаЗначенийАналитик.Очистить();
	ТипыУстанавливаемыхСоответствий = БюджетированиеСервер.ВсеТипыАналитик().Типы();
	
	ТипыУстанавливаемыхСоответствий.Добавить(Тип("СправочникСсылка.СценарииТоварногоПланирования"));
	ТипыУстанавливаемыхСоответствий.Добавить(Тип("СправочникСсылка.ВидыПланов"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТипСценарииТоварногоПланирования",
		Новый ОписаниеТипов("СправочникСсылка.СценарииТоварногоПланирования"));
	ДополнительныеПараметры.Вставить("ТипВидыПланов",
		Новый ОписаниеТипов("СправочникСсылка.ВидыПланов"));
	
	Для Каждого ЭлементФайла Из ЭлементыФайла Цикл
		Если ТипыУстанавливаемыхСоответствий.Найти(Тип(ЭлементФайла.ТипСтрока)) = Неопределено
		 ИЛИ ЭлементФайла.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗагружаемыеНпп.НайтиПоЗначению(ЭлементФайла.Нпп) = Неопределено Тогда
			ДобавитьЗаменуЗначенийАналитик(ЭлементФайла, ДополнительныеПараметры);
		КонецЕсли;
	КонецЦикла;
	
	ВидыАналитикРассчитать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗагружаемыеНппПоДаннымXML()
	
	ЗагружаемыеНпп.Очистить();
	
	ВыбранныеВидыБюджета = ПолучитьВыбранныеЭлементыОтбора(ВидыБюджетов,"Нпп");
	Для Каждого Стр Из ВыбранныеВидыБюджета Цикл
		ЗагружаемыеНпп.Добавить(Стр);
	КонецЦикла;
	//++ НЕ УТКА
	ВыбранныеЭтапыПодготовкиБюджета = ПолучитьВыбранныеЭлементыОтбора(ЭтапыПодготовкиБюджетов,"Нпп");
	Для Каждого Стр Из ВыбранныеЭтапыПодготовкиБюджета Цикл
		ЗагружаемыеНпп.Добавить(Стр);
	КонецЦикла;
	//-- НЕ УТКА
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Объект.ИмяФайлаМодели); 
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Объекты = ДокументDOM.ПолучитьЭлементыПоИмени("Объект");
	
	Сч = 1;
	ВсегоЭлементов = 0;
	Пока ВсегоЭлементов <> ЗагружаемыеНпп.Количество() И Сч <= 100 Цикл
		
		ВсегоЭлементов = ЗагружаемыеНпп.Количество();
		Для Каждого Элемент Из Объекты Цикл
			
			ТипЭлементаСтрока = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Тип").Значение;
			
			РезультатЧтения = ПрочитатьЭлементXML(Элемент,Истина);
			
			ДобавлятьДочерние = Ложь;
			Если (РезультатЧтения.Свойство("ВладелецНпп") И Не ЗагружаемыеНпп.НайтиПоЗначению(РезультатЧтения.ВладелецНпп) = Неопределено) 
			 ИЛИ Не ЗагружаемыеНпп.НайтиПоЗначению(РезультатЧтения.Нпп) = Неопределено Тогда
				Если ЗагружаемыеНпп.НайтиПоЗначению(РезультатЧтения.Нпп) = Неопределено Тогда
					ЗагружаемыеНпп.Добавить(РезультатЧтения.Нпп);
				КонецЕсли;
				ДобавлятьДочерние = Истина;
			ИначеЕсли РезультатЧтения.ВладельцыНпп.Количество() > 0 Тогда
				Для Каждого Нпп Из РезультатЧтения.ВладельцыНпп Цикл
					Если Не ЗагружаемыеНпп.НайтиПоЗначению(Нпп) = Неопределено ИЛИ МодельБюджетированияНпп = Нпп Тогда
						Если ЗагружаемыеНпп.НайтиПоЗначению(РезультатЧтения.Нпп) = Неопределено Тогда
							ЗагружаемыеНпп.Добавить(РезультатЧтения.Нпп);
						КонецЕсли;
						ДобавлятьДочерние = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Не Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.ВидыБюджетов") 
				//++ НЕ УТКА
				И Не Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.ЭтапыПодготовкиБюджетов") 
				//-- НЕ УТКА
					И РезультатЧтения.Свойство("ВладелецНпп") И РезультатЧтения.ВладелецНпп = МодельБюджетированияНпп Тогда
				Если ЗагружаемыеНпп.НайтиПоЗначению(РезультатЧтения.Нпп) = Неопределено Тогда
					ЗагружаемыеНпп.Добавить(РезультатЧтения.Нпп);
				КонецЕсли;
				ДобавлятьДочерние = Истина;
			КонецЕсли;
			
			Если ДобавлятьДочерние Тогда
				Для Каждого Нпп Из РезультатЧтения.ДочерниеНпп Цикл
					Если ЗагружаемыеНпп.НайтиПоЗначению(Нпп) = Неопределено Тогда
						ЗагружаемыеНпп.Добавить(Нпп);
					КонецЕсли;
				КонецЦикла;
				Если РезультатЧтения.Свойство("РодительНпп") Тогда
					Если ЗагружаемыеНпп.НайтиПоЗначению(РезультатЧтения.РодительНпп) = Неопределено Тогда
						ЗагружаемыеНпп.Добавить(РезультатЧтения.РодительНпп);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		Сч = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьИерархиюДереваФильтра(Дерево)
	
	Если Дерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = Дерево.Скопировать();
	Дерево.Строки.Очистить();
	
	Для Каждого СтрокаТЗ Из ТЗ.Строки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.родительУИН) Тогда
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,СтрокаТЗ);
		Иначе
			РодительСтроки = Дерево.Строки.Найти(СтрокаТЗ.РодительУИН,"УИН",Истина);
			Если Не РодительСтроки = Неопределено Тогда
				СтрокаДерева = РодительСтроки.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДерева,СтрокаТЗ);
			Иначе
				СтрокаДерева = Дерево.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДерева,СтрокаТЗ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РаскрытьВерхнийУровеньДереваФормы(ДеревоФормы,ИмяЭлемента)
	
	ЭлементыДерева = ДеревоФормы.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы[ИмяЭлемента].Развернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьЭлементXML(ЭлементXML,ЧитатьДочерниеНпп=Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("ДочерниеНпп",Новый Массив());
	Результат.Вставить("ВладельцыНпп",Новый Массив());
	
	ТипЭлементаСтрока = ЭлементXML.Атрибуты.ПолучитьИменованныйЭлемент("Тип").Значение;
	Нпп = ЭлементXML.Атрибуты.ПолучитьИменованныйЭлемент("Нпп").Значение;
	Результат.Вставить("Нпп",Число(Нпп));
	
	ТипыЗначенийАналитик = БюджетированиеСервер.ВсеТипыАналитик().Типы();
	
	РеквизитыОбъекта = ЭлементXML.ДочерниеУзлы;
	
	Для каждого Реквизит Из РеквизитыОбъекта Цикл
		
		Если Реквизит.ИмяУзла = "Ссылка" Тогда
			
			АтрибутНпп = Реквизит.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
			Если Не АтрибутНпп = Неопределено Тогда
				Результат.Вставить("Нпп",Число(АтрибутНпп.ТекстовоеСодержимое));
			КонецЕсли;
			
			Для Каждого Узел Из Реквизит.ДочерниеУзлы Цикл
				Если Узел.Атрибуты = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				АтрибутИмя = Узел.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
				Если АтрибутИмя = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если АтрибутИмя.Значение = "{УникальныйИдентификатор}" Тогда
					Результат.Вставить("УИН",Узел.ТекстовоеСодержимое);
				ИначеЕсли АтрибутИмя.Значение = "Наименование" Тогда
					Результат.Вставить("Наименование",Узел.ТекстовоеСодержимое);
				ИначеЕсли АтрибутИмя.Значение = "Код" Тогда
					Результат.Вставить("Код",Узел.ТекстовоеСодержимое);
				ИначеЕсли АтрибутИмя.Значение = "Номер" Тогда
					Результат.Вставить("Номер",Узел.ТекстовоеСодержимое);
				ИначеЕсли АтрибутИмя.Значение = "Дата" Тогда
					Результат.Вставить("Дата",XMLЗначение(Тип("Дата"), Узел.ТекстовоеСодержимое));
				ИначеЕсли АтрибутИмя.Значение = "ЭтоГруппа" Тогда
					ЭтоГруппа  = Узел.ТекстовоеСодержимое;
					Результат.Вставить("ЭтоГруппа",Булево(ЭтоГруппа));
					Результат.Вставить("ИндексКартинки",Не ЭтоГруппа);
				ИначеЕсли АтрибутИмя.Значение = "ИНН" Тогда
					Результат.Вставить("ИНН",Узел.ТекстовоеСодержимое);
				ИначеЕсли АтрибутИмя.Значение = "КПП" Тогда
					Результат.Вставить("КПП",Узел.ТекстовоеСодержимое);
				ИначеЕсли АтрибутИмя.Значение = "Родитель" Тогда
					Для Каждого Узел1 Из Узел.ДочерниеУзлы Цикл
						Если Узел1.ИмяУзла = "Ссылка" Тогда
							АтрибутНпп = Узел1.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
							Если Не АтрибутНпп = Неопределено Тогда
								Результат.Вставить("РодительНпп",Число(АтрибутНпп.ТекстовоеСодержимое));
							КонецЕсли;
							Для Каждого Узел2 Из Узел1.ДочерниеУзлы Цикл
								АтрибутИмя = Узел2.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
								Если АтрибутИмя = Неопределено Тогда
									Продолжить;
								КонецЕсли;
								Если АтрибутИмя.Значение = "{УникальныйИдентификатор}" Тогда
									Результат.Вставить("РодительУИН",Узел2.ТекстовоеСодержимое);
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.СценарииТоварногоПланирования") Тогда
					Если АтрибутИмя.Значение = "Валюта" Тогда
						Для Каждого Узел1 Из Узел.ДочерниеУзлы Цикл
							Если Узел1.ИмяУзла = "Ссылка" Тогда
								Для каждого Узел2 Из Узел1.ДочерниеУзлы Цикл
									АтрибутИмя = Узел2.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
									Если НЕ АтрибутИмя = Неопределено
									   И АтрибутИмя.Значение = "Наименование" Тогда
										Результат.Вставить("ВалютаСценарияТоварногоПланирования", Узел2.ТекстовоеСодержимое);
									КонецЕсли;
								КонецЦикла; 
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли АтрибутИмя.Значение = "Периодичность" Тогда
						Для Каждого Узел1 Из Узел.ДочерниеУзлы Цикл
							Если Узел1.ИмяУзла = "Значение" Тогда
								Если ЗначениеЗаполнено(Узел1.ТекстовоеСодержимое) Тогда
									Результат.Вставить("ПериодичностьСценарияТоварногоПланирования", Перечисления.Периодичность[Узел1.ТекстовоеСодержимое]);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.ВидыПланов") Тогда
					Если АтрибутИмя.Значение = "Владелец" Тогда
						Для Каждого Узел1 Из Узел.ДочерниеУзлы Цикл
							Если Узел1.ИмяУзла = "Ссылка" Тогда
								Для каждого Узел2 Из Узел1.ДочерниеУзлы Цикл
									АтрибутИмя = Узел2.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
									Если НЕ АтрибутИмя = Неопределено
									   И АтрибутИмя.Значение = "Наименование" Тогда
										Результат.Вставить("СценарийТоварногоПланированияВидаПлана", Узел2.ТекстовоеСодержимое);
									КонецЕсли;
								КонецЦикла; 
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли АтрибутИмя.Значение = "ТипПлана" Тогда
						Для Каждого Узел1 Из Узел.ДочерниеУзлы Цикл
							Если Узел1.ИмяУзла = "Значение" Тогда
								Если ЗначениеЗаполнено(Узел1.ТекстовоеСодержимое) Тогда
									Результат.Вставить("ТипПланаВидаПлана", Перечисления.ТипыПланов[Узел1.ТекстовоеСодержимое]);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли АтрибутИмя.Значение = "Владелец" Тогда
					Для Каждого Узел1 Из Узел.ДочерниеУзлы Цикл
						Если Узел1.ИмяУзла = "Ссылка" Тогда
							АтрибутНпп = Узел1.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
							Если Не АтрибутНпп = Неопределено Тогда
								Результат.Вставить("ВладелецНпп",Число(АтрибутНпп.ТекстовоеСодержимое));
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Реквизит.ИмяУзла = "Свойство" Тогда
			
			АтрибутИмя = Реквизит.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
			Если АтрибутИмя = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если АтрибутИмя.Значение = "Родитель" Тогда
				
				Для Каждого Узел Из Реквизит.ДочерниеУзлы Цикл
					Если Узел.ИмяУзла = "Ссылка" Тогда
						АтрибутНпп = Узел.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
						Если Не АтрибутНпп = Неопределено Тогда
							Результат.Вставить("РодительНпп",Число(АтрибутНпп.ТекстовоеСодержимое));
						КонецЕсли;
						Для Каждого Узел1 Из Узел.ДочерниеУзлы Цикл
							АтрибутИмя = Узел1.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
							Если АтрибутИмя = Неопределено Тогда
								Продолжить;
							КонецЕсли;
							Если АтрибутИмя.Значение = "{УникальныйИдентификатор}" Тогда
								Результат.Вставить("РодительУИН",Узел1.ТекстовоеСодержимое);
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли АтрибутИмя.Значение = "Наименование" Тогда
				
				Результат.Вставить("Наименование",Реквизит.ТекстовоеСодержимое);
				
			ИначеЕсли АтрибутИмя.Значение = "ИНН" Тогда	
				
				Результат.Вставить("ИНН",Реквизит.ТекстовоеСодержимое); 
				
			ИначеЕсли АтрибутИмя.Значение = "КПП" Тогда	
				
				Результат.Вставить("КПП",Реквизит.ТекстовоеСодержимое);	
				
			ИначеЕсли Не Реквизит.Атрибуты.ПолучитьИменованныйЭлемент("Тип") = Неопределено
			        И Тип(Реквизит.Атрибуты.ПолучитьИменованныйЭлемент("Тип").Значение) = Тип("ХранилищеЗначения") Тогда
					
				Если НЕ ЧитатьДочерниеНпп ИЛИ ЭлементыФайла.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				ЗначениеСтрока = Реквизит.ТекстовоеСодержимое;
				Если ЗначениеЗаполнено(ЗначениеСтрока) Тогда
					ДанныеХранилища = XMLЗначение(Тип("ХранилищеЗначения"), ЗначениеСтрока).Получить();
					Если ТипЗнч(ДанныеХранилища) = Тип("ТаблицаЗначений") Тогда
						Для Каждого Стр Из ДанныеХранилища Цикл
							Для Каждого Колонка Из ДанныеХранилища.Колонки Цикл
								ЗначениеКолонки = Стр[Колонка.Имя];
								ДобавитьДочерниеНппПоЗначению(Результат,ЗначениеКолонки);
							КонецЦикла;
						КонецЦикла;
					ИначеЕсли ТипЗнч(ДанныеХранилища) =  Тип("НастройкиКомпоновкиДанных") Тогда
						Для Каждого Стр Из ДанныеХранилища.Отбор.Элементы Цикл
							Если ТипЗнч(Стр) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
								Продолжить;
							КонецЕсли;
							ДобавитьДочерниеНппПоЗначению(Результат,Стр.ПравоеЗначение);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			// Нестандартные названия реквизитов владельцев справочников
			ИначеЕсли (Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов") И  АтрибутИмя.Значение = "СтатьяБюджетов")
			      ИЛИ (Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов") И  АтрибутИмя.Значение = "ПоказательБюджетов")
			      ИЛИ (ТипЭлементаСтрока = "СправочникСсылка.МоделиБюджетированияПрисоединенныеФайлы" И АтрибутИмя.Значение = "ВладелецФайла") Тогда
				Для Каждого Узел Из Реквизит.ДочерниеУзлы Цикл
					Если Узел.ИмяУзла = "Ссылка" Тогда
						АтрибутНпп = Узел.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
						Если Не АтрибутНпп = Неопределено Тогда
							Результат.ВладельцыНпп.Добавить(Число(АтрибутНпп.ТекстовоеСодержимое));
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли Тип(ТипЭлементаСтрока) = Тип("РегистрСведенийЗапись.СвязиПоказателейБюджетов") 
			        И (АтрибутИмя.Значение = "СвязанныйПоказательБюджетов" ИЛИ АтрибутИмя.Значение = "СвязанныйПоказательБюджетов") Тогда
				Для Каждого Узел Из Реквизит.ДочерниеУзлы Цикл
					Если Узел.ИмяУзла = "Ссылка" Тогда
						АтрибутНпп = Узел.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
						Если Не АтрибутНпп = Неопределено Тогда
							Результат.ВладельцыНпп.Добавить(Число(АтрибутНпп.ТекстовоеСодержимое));
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если Не ЧитатьДочерниеНпп Тогда 
					Продолжить;
				КонецЕсли;
				АтрибутТип = Реквизит.Атрибуты.ПолучитьИменованныйЭлемент("Тип");
				Если Не АтрибутТип = Неопределено  
					И (ЭтоСсылочныйТип(Тип(АтрибутТип.Значение)) 
					  ИЛИ Не ТипыЗначенийАналитик.Найти(Тип(АтрибутТип.Значение)) = Неопределено) Тогда 
						Для Каждого Узел Из Реквизит.ДочерниеУзлы Цикл
							Если Узел.ИмяУзла = "Ссылка" Тогда
								АтрибутНпп = Узел.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
								Если Не АтрибутНпп = Неопределено Тогда
									Результат.ДочерниеНпп.Добавить(Число(АтрибутНпп.ТекстовоеСодержимое));
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Реквизит.ИмяУзла = "ТабличнаяЧасть" Тогда
			Для Каждого СтрокаТЧ Из Реквизит.ДочерниеУзлы Цикл
				Для Каждого КолонкаТЧ Из СтрокаТЧ.ДочерниеУзлы Цикл
					Если КолонкаТЧ.Атрибуты = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					АтрибутТип = КолонкаТЧ.Атрибуты.ПолучитьИменованныйЭлемент("Тип");
					Если Не АтрибутТип = Неопределено 
						И (ЭтоСсылочныйТип(Тип(АтрибутТип.Значение))
						  ИЛИ Не ТипыЗначенийАналитик.Найти(Тип(АтрибутТип.Значение)) = Неопределено) Тогда
							Для Каждого Свойство Из КолонкаТЧ.ДочерниеУзлы Цикл
								Если Свойство.ИмяУзла = "Ссылка" Тогда
									АтрибутНпп = Свойство.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
									Если Не АтрибутНпп = Неопределено Тогда
										Результат.ДочерниеНпп.Добавить(Число(АтрибутНпп.ТекстовоеСодержимое));
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			// Для Шаблонов ввода нфп, владельцев выбираем из таб. части ПоказателиШаблона
			АтрибутИмя = Реквизит.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
			Если Тип(ТипЭлементаСтрока) = Тип("СправочникСсылка.ШаблоныВводаНефинансовыхПоказателей") 
				И АтрибутИмя.Значение = "ПоказателиШаблона" Тогда
				Если Не СтрокаТЧ = Неопределено Тогда
					Для Каждого КолонкаТЧ Из СтрокаТЧ.ДочерниеУзлы Цикл
						АтрибутТип = КолонкаТЧ.Атрибуты.ПолучитьИменованныйЭлемент("Тип");
						Если Не АтрибутТип = Неопределено 
							И Тип(АтрибутТип.Значение) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда 
								Для Каждого Свойство Из КолонкаТЧ.ДочерниеУзлы Цикл
									Если Свойство.ИмяУзла = "Ссылка" Тогда
										АтрибутНпп = Свойство.Атрибуты.ПолучитьИменованныйЭлемент("Нпп");
										Если Не АтрибутНпп = Неопределено Тогда
											Результат.ВладельцыНпп.Добавить(Число(АтрибутНпп.ТекстовоеСодержимое));
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат.Свойство("РодительУИН") Тогда
		Результат.Вставить("РодительУИН","");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере	
Процедура ДобавитьДочерниеНппПоЗначению(Результат,ЗначениеКолонки)
	
	Если ТипЗнч(ЗначениеКолонки) = Тип("СписокЗначений") Тогда
		Для Каждого Эл Из ЗначениеКолонки Цикл
			Если ЭтоСсылочныйТип(ТипЗнч(Эл.Значение)) Тогда
				УИД = Эл.Значение.УникальныйИдентификатор();
				Если Не УИД = Неопределено Тогда
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("УИН",Строка(УИД));
					Строки = ЭлементыФайла.НайтиСтроки(ПараметрыОтбора);
					Если Строки.Количество() > 0 Тогда
						Результат.ДочерниеНпп.Добавить(Строки[0].Нпп);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЗначениеКолонки) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Стр Из ЗначениеКолонки Цикл
			Для Каждого Колонка Из ЗначениеКолонки.Колонки Цикл
				ЗначениеПодчиненнойКолонки = Стр[Колонка.Имя];
				ДобавитьДочерниеНппПоЗначению(Результат,ЗначениеПодчиненнойКолонки);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Если ЗначениеКолонки <> Неопределено И ЭтоСсылочныйТип(ТипЗнч(ЗначениеКолонки)) Тогда 
			УИД = ЗначениеКолонки.УникальныйИдентификатор();
			Если Не УИД = Неопределено Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("УИН",Строка(УИД));
				Строки = ЭлементыФайла.НайтиСтроки(ПараметрыОтбора);
				Если Строки.Количество() > 0 Тогда
					Результат.ДочерниеНпп.Добавить(Строки[0].Нпп);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки.
//
// Параметры:
//  ТекСтрока      - Строка дерева значений.
// 
&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка)
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Подчиненные Цикл
		
		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];
		
		УстановитьПометкиПодчиненных(Строка, ИмяФлажка);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки.
//
// Параметры:
//  ТекСтрока      - Строка дерева значений.
// 
&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСостояние = Родитель[ИмяФлажка];
	
	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;
	
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли Строка[ИмяФлажка] = 1
			ИЛИ Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = Истина;
		КонецЕсли; 
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВыбранныеЭлементыОтбора(ДеревоОтбора,ИмяКолонки)
	
	ВыбранныеЗначения = Новый Массив;
	ЭлементыДерева = ДеревоОтбора.ПолучитьЭлементы();
	Для Каждого ЭлементыДерева Из ЭлементыДерева Цикл
		Если ЭлементыДерева.Флаг Тогда
			ВыбранныеЗначения.Добавить(ЭлементыДерева[ИмяКолонки]);
			ПодчиненныеЗначения = ПолучитьВыбранныеЭлементыОтбора(ЭлементыДерева,ИмяКолонки);
			Для Каждого Значение Из ПодчиненныеЗначения Цикл
				ВыбранныеЗначения.Добавить(Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыбранныеЗначения;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗаменуЗначенийАналитик(Аналитика, ДополнительныеПараметры)
	
	НоваяСтрока = ЗаменаЗначенийАналитик.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,Аналитика);
	НоваяСтрока.АналитикаФайла = Аналитика.Наименование;
	Если НЕ ЗначениеЗаполнено(Аналитика.Наименование)
	   И ЗначениеЗаполнено(Аналитика.Номер)
	   И ЗначениеЗаполнено(Аналитика.Дата) Тогда
		ТипАналитики = Аналитика.Тип.Типы()[0];
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипАналитики);
		ПредставлениеОбъекта = НСтр("ru='%1 %2 от %3';uk='%1 %2 від %3'");
		НоваяСтрока.АналитикаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОбъекта,
		                                                                                     МетаданныеОбъекта.Синоним,
		                                                                                     Аналитика.Номер,
		                                                                                     Аналитика.Дата);
	КонецЕсли;
	Если Аналитика.Тип = ДополнительныеПараметры.ТипСценарииТоварногоПланирования Тогда
		НоваяСтрока.НСИТоварногоПланирования = Истина;
		
		ПредставлениеАналитикиФайла = НСтр("ru='%1 (Валюта %2, Периодичность %3)';uk='%1 (Валюта %2, Періодичність %3)'");
		НоваяСтрока.АналитикаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ПредставлениеАналитикиФайла,
			Аналитика.Наименование,
			Аналитика.ВалютаСценарияТоварногоПланирования,
			Аналитика.ПериодичностьСценарияТоварногоПланирования);
	ИначеЕсли Аналитика.Тип = ДополнительныеПараметры.ТипВидыПланов Тогда
		НоваяСтрока.НСИТоварногоПланирования = Истина;
		
		ПредставлениеАналитикиФайла = НСтр("ru='%1 (Сценарий %2, Тип плана %3)';uk='%1 (Сценарій %2, Тип плану %3)'");
		НоваяСтрока.АналитикаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ПредставлениеАналитикиФайла,
			Аналитика.Наименование,
			Аналитика.СценарийТоварногоПланированияВидаПлана,
			Аналитика.ТипПланаВидаПлана);
	КонецЕсли;
	НоваяСтрока.АналитикаФайлаУИН = Аналитика.УИН;
	НоваяСтрока.АналитикаФайлаНпп = Аналитика.Нпп;
	
	РезультатПоиска = НайтиАналитикуБД(Аналитика);
	НоваяСтрока.АналитикаБД = РезультатПоиска.Значение;
	НоваяСтрока.СсылкаИсточника = РезультатПоиска.СсылкаИсточника;
	НоваяСтрока.ВариантПодсказкиВвода = РезультатПоиска.ВариантПодсказкиВвода;
	Если Не ЗначениеЗаполнено(НоваяСтрока.АналитикаБД) Тогда
		НоваяСтрока.ТребуетВнимания = Истина;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Тип",Аналитика.Тип);
	ВидыАналитикСтроки = ВидыАналитик.НайтиСтроки(ПараметрыПоиска);
	Если ВидыАналитикСтроки.Количество() = 0 Тогда
		НоваяСтрока = ВидыАналитик.Добавить();
		НоваяСтрока.Тип = Аналитика.Тип;
		НоваяСтрока.Представление = Строка(Аналитика.Тип);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидыАналитикРассчитать(Тип=Неопределено)
	
	Для Каждого Стр Из ВидыАналитик Цикл
		Если Тип <> Неопределено И Стр.Тип <> Тип Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Тип",Стр.Тип);
		ЗаменаЗначенийСтроки = ЗаменаЗначенийАналитик.НайтиСтроки(ПараметрыПоиска);
		Стр.Всего = ЗаменаЗначенийСтроки.Количество();
		Сч = 0;
		Для Каждого Строка Из ЗаменаЗначенийСтроки Цикл
			Если Не ЗначениеЗаполнено(Строка.АналитикаБД) Тогда
				Строка.ТребуетВнимания = Истина;
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		Стр.НеЗаполнено = Сч;
		Стр.ТребуетВнимания = Сч > 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиАналитикуБД(Аналитика)
	
	АналитикаБД = Неопределено;
	ИмяОбъекта = Сред(Аналитика.ТипСтрока,СтрНайти(Аналитика.ТипСтрока, ".") + 1);
	ВидОбъекта = ОбщегоНазначения.ВидОбъектаПоТипу(Тип(Аналитика.ТипСтрока));
	РезультатПоискаАналитики = Новый Структура("Значение, ВариантПодсказкиВвода, СсылкаИсточника", АналитикаБД, "", Неопределено);
	
	ТекстыЗапросаПоиска = Новый Массив;
	РазделительЗапроса = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	Запрос = Новый Запрос;
	
	// 1. поиск по ссылке
	УИД = Новый УникальныйИдентификатор(Аналитика.УИН);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ВидОбъекта + "."+ ИмяОбъекта);
	АналитикаБД = МенеджерОбъекта.ПолучитьСсылку(УИД);
	РезультатПоискаАналитики.СсылкаИсточника = АналитикаБД;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	1 КАК Приоритет
		|ИЗ
		|	&Таблица КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ВидОбъекта + "."+ ИмяОбъекта);
	ТекстыЗапросаПоиска.Добавить(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Ссылка", АналитикаБД);
	
	// 2. поиск по коду + наименование
	Если ЗначениеЗаполнено(Аналитика.Код) И ЗначениеЗаполнено(Аналитика.Наименование) Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка,
			|	2 КАК Приоритет
			|ИЗ
			|	&Таблица КАК Таблица
			|ГДЕ
			|	Таблица.Код = &Код
			|	И Таблица.Наименование = &Наименование";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ВидОбъекта + "."+ ИмяОбъекта);
		ТекстыЗапросаПоиска.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("Код",Аналитика.Код);
		Запрос.УстановитьПараметр("Наименование",Аналитика.Наименование);
	КонецЕсли;
	
	// 3. для контрагентов и организаций по инн + кпп
	
	Если ЗначениеЗаполнено(Аналитика.ИНН) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка,
			|	3 КАК Приоритет
			|ИЗ
			|	&Таблица КАК Таблица
			|ГДЕ
			|	Таблица.ИНН = &ИНН
			|	И (&ИскатьТолькоПоИНН
			|			ИЛИ Таблица.КПП = &КПП)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ВидОбъекта + "."+ ИмяОбъекта);
		ТекстыЗапросаПоиска.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ИНН",Аналитика.ИНН);
		Запрос.УстановитьПараметр("КПП",Аналитика.КПП);
		Запрос.УстановитьПараметр("ИскатьТолькоПоИНН", НЕ ЗначениеЗаполнено(Аналитика.КПП));
		
	КонецЕсли;
	
	// 4. поиск по наименованию
	Если ЗначениеЗаполнено(Аналитика.Наименование) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка,
			|	4 КАК Приоритет
			|ИЗ
			|	&Таблица КАК Таблица
			|ГДЕ
			|	Таблица.Наименование = &Наименование";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ВидОбъекта + "."+ ИмяОбъекта);
		ТекстыЗапросаПоиска.Добавить(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("Наименование", Аналитика.Наименование);
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросаПоиска, РазделительЗапроса) + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	
	УстановитьПривилегированныйРежим(Истина);
	СсылкиБезУчетаRLS = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СсылкиБезУчетаRLS.Количество() > 0 Тогда
		
		ПравилоПоиска = СсылкиБезУчетаRLS[0].Приоритет;
		
		Запрос = УстановитьВыборкуРазрешенныхЗаписей(Запрос, Истина);
		РазрешенныеСсылки = Запрос.Выполнить().Выгрузить();
		
		Если РазрешенныеСсылки.Количество() = 0 Тогда
			АналитикаБД = Неопределено;
			РезультатПоискаАналитики.Значение = АналитикаБД;
			РезультатПоискаАналитики.ВариантПодсказкиВвода = "НетПравНаОбъект";
		ИначеЕсли РазрешенныеСсылки[0].Приоритет > ПравилоПоиска Тогда
			АналитикаБД = Неопределено;
			РезультатПоискаАналитики.Значение = АналитикаБД;
			РезультатПоискаАналитики.ВариантПодсказкиВвода = "НетПравНаОбъект";
		Иначе
			АналитикаБД = РазрешенныеСсылки[0].Ссылка;
			РезультатПоискаАналитики.Значение = АналитикаБД;
			РезультатПоискаАналитики.ВариантПодсказкиВвода = "";
		КонецЕсли;
	Иначе
		АналитикаБД = Неопределено;
		РезультатПоискаАналитики.Значение = АналитикаБД;
		РезультатПоискаАналитики.ВариантПодсказкиВвода = "ЗначениеНеНайдено";
	КонецЕсли;
	
	Возврат РезультатПоискаАналитики;

КонецФункции

&НаКлиенте
Процедура УправлениеОтображениемСтраницаЗаменаЗначений()
	
	ВидыАналитикТекущиеДанные = Элементы.ВидыАналитик.ТекущиеДанные;
	
	Если  ОтображатьВсеАналитики Тогда
		Элементы.ВидыАналитик.ОтборСтрок = Неопределено;
		Элементы.ЗаменаЗначенийАналитик.ОтборСтрок = Новый ФиксированнаяСтруктура("Тип",
			?(Не ВидыАналитикТекущиеДанные = Неопределено,ВидыАналитикТекущиеДанные.Тип,Неопределено));
	Иначе
		Элементы.ВидыАналитик.ОтборСтрок = Новый ФиксированнаяСтруктура("ТребуетВнимания",Истина);
		Элементы.ЗаменаЗначенийАналитик.ОтборСтрок = Новый ФиксированнаяСтруктура("ТребуетВнимания,Тип",
			Истина, ?(Не ВидыАналитикТекущиеДанные = Неопределено,ВидыАналитикТекущиеДанные.Тип,Неопределено));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьПараметрыОбновленияНпп(ДеревоОтбора)
	
	ПараметрыОбновленияНпп = Новый Соответствие;
	ЭлементыДерева = ДеревоОтбора.ПолучитьЭлементы();
	Для Каждого ЭлементыДерева Из ЭлементыДерева Цикл
		Если ЭлементыДерева.Флаг Тогда
			Если ЗначениеЗаполнено(ЭлементыДерева.Ссылка) Тогда
				ПараметрыОбновленияНпп.Вставить(ЭлементыДерева.Нпп,ЭлементыДерева.Обновить);
			КонецЕсли;
			ПодчиненныеЗначения = ПолучитьПараметрыОбновленияНпп(ЭлементыДерева);
			Для Каждого Значение Из ПодчиненныеЗначения Цикл
				ПараметрыОбновленияНпп.Вставить(Значение.Ключ,Значение.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыОбновленияНпп;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыОбновленияВсехНпп()
	
	ПараметрыОбновленияНпп1 = ПолучитьПараметрыОбновленияНпп(ВидыБюджетов);
	ПараметрыОбновленияНпп2 = ПолучитьПараметрыОбновленияНпп(ЭтапыПодготовкиБюджетов);
	
	Для Каждого Значение Из ПараметрыОбновленияНпп2 Цикл
		ПараметрыОбновленияНпп1.Вставить(Значение.Ключ,Значение.Значение);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МодельБюджетированияСсылка) Тогда
		ПараметрыОбновленияНпп1.Вставить(МодельБюджетированияНпп,ОбновитьМодель);
	КонецЕсли;
	
	Возврат ПараметрыОбновленияНпп1;
	
КонецФункции

&НаКлиенте
Процедура ПризнакОбновитьМодельПриИзменении()
	
	Дерево = ВидыБюджетов;
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка.Обновить = ОбновитьМодель И ЗначениеЗаполнено(Строка.Ссылка);
		Если ОбновитьМодель И ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Если Строка.Используется Тогда
				Строка.Обновить = Ложь;
			Иначе
				Строка.Обновить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьФлагОбновитьВидовЭтаповБюджета(Строка);
	КонецЦикла;
	
	//++ НЕ УТКА
	Дерево = ЭтапыПодготовкиБюджетов;
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Строка.Обновить = ОбновитьМодель И ЗначениеЗаполнено(Строка.Ссылка);
		Если ОбновитьМодель И ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Если Строка.Используется Тогда
				Строка.Обновить = Ложь;
			Иначе
				Строка.Обновить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьФлагОбновитьВидовЭтаповБюджета(Строка);
		
	КонецЦикла;
	//-- НЕ УТКА
	
	Если Не ЗначениеЗаполнено(МодельБюджетированияСсылка) Тогда
		Элементы.ГруппаИнформацияПоМодели.Видимость = Ложь;
	КонецЕсли;
	Если Не ОбновитьМодель Тогда
		Элементы.ВидыБюджетовОбновить.Видимость = Ложь;
		Элементы.ЭтапыПодготовкиБюджетовОбновить.Видимость = Ложь;
	Иначе
		Элементы.ВидыБюджетовОбновить.Видимость = Истина;
		Элементы.ЭтапыПодготовкиБюджетовОбновить.Видимость = Истина;
	КонецЕсли;
	
	//++ НЕ УТКА
	ЗапрещеноИзменятьЭтапыБюджетов = ОбновитьМодель И ЗапрещеноИзменятьЭтапыБюджетов(МодельБюджетированияСсылка);
	
	Если ЗапрещеноИзменятьЭтапыБюджетов Тогда
		Элементы.ЭтапыПодготовкиБюджетов.ТолькоПросмотр = Истина;
		Элементы.ЭтапыПодготовкиБюджетовУстановитьФлажки.Доступность = Ложь;
		Элементы.ЭтапыПодготовкиБюджетовСнятьФлажки.Доступность = Ложь;
	Иначе
		Элементы.ЭтапыПодготовкиБюджетов.ТолькоПросмотр = Ложь;
		Элементы.ЭтапыПодготовкиБюджетовУстановитьФлажки.Доступность = Истина;
		Элементы.ЭтапыПодготовкиБюджетовСнятьФлажки.Доступность = Истина;
	КонецЕсли;
	//-- НЕ УТКА

КонецПроцедуры

&НаСервереБезКонтекста
Функция РазархивироватьФайлНаСервере(АдресХранилищаФайлаНаСервере, ТекстОшибки = "")
	
	ФайлДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилищаФайлаНаСервере);
	ИмяФайлаАрхива = ПолучитьИмяВременногоФайла(".zip");
	
	Если ТипЗнч(ФайлДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		ФайлДвоичныеДанные.Записать(ИмяФайлаАрхива);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	КаталогРаспаковки = "";
	Попытка
		ОбъектЧтение = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
		Если ОбъектЧтение.Элементы.Количество() = 0 Тогда
			ОбъектЧтение.Закрыть();
			ТекстОшибки = НСтр("ru='Нет файлов в архиве.';uk='Немає файлів в архіві.'");
			Попытка	
				УдалитьФайлы(ИмяФайлаАрхива);
			Исключение
				ТекстОшибки = ТекстОшибки + Символы.ПС + 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка удаления временных файлов: %1';uk='Помилка вилучення тимчасових файлів: %1'"), ИнформацияОбОшибке().Описание);
			КонецПопытки;
			Возврат Неопределено;
		КонецЕсли;
		
		КаталогРаспаковки = ПолучитьИмяВременногоФайла() + ПолучитьРазделительПути();
		СоздатьКаталог(КаталогРаспаковки);
		ЭлементПоиска = Неопределено;
		Если ОбъектЧтение.Элементы.Количество() = 1 Тогда
			ЭлементПоиска = ОбъектЧтение.Элементы[0];
			ИмяФайлаИзАрхива = ОбъектЧтение.Элементы[0].Имя;
		Иначе
			ИмяФайлаМоделиСтрока = НСтр("ru='ВыгрузкаМоделиКА.xml';uk='ВыгрузкаМоделиКА.xml'");
			//++ НЕ УТКА
			ИмяФайлаМоделиСтрока = НСтр("ru='ВыгрузкаМодели.xml';uk='ВыгрузкаМодели.xml'");
			//-- НЕ УТКА
			
			ЭлементПоиска = ОбъектЧтение.Элементы.Найти(ИмяФайлаМоделиСтрока);
			
			Если ЭлементПоиска = Неопределено Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден файл - %1, в архиве.';uk='Не знайдено файл - %1, в архіві.'"), ИмяФайлаМоделиСтрока);
				Попытка
					УдалитьФайлы(КаталогРаспаковки);
					УдалитьФайлы(ИмяФайлаАрхива);
				Исключение
					ТекстОшибки = ТекстОшибки + Символы.ПС + 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка удаления временных файлов: %1';uk='Помилка вилучення тимчасових файлів: %1'"), ИнформацияОбОшибке().Описание);
				КонецПопытки;
				Возврат Неопределено;
			КонецЕсли;
			ИмяФайлаИзАрхива = ЭлементПоиска.Имя;
		КонецЕсли;
		
		ОбъектЧтение.Извлечь(ЭлементПоиска, КаталогРаспаковки,РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ОбъектЧтение.Закрыть();
		
		Возврат КаталогРаспаковки + ИмяФайлаИзАрхива;
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка распаковки архива: %1';uk='Помилка розпакування архіву: %1'"), Символы.ПС + ИнформацияОбОшибке().Описание);
		Попытка
			УдалитьФайлы(ИмяФайлаАрхива);
			Если ЗначениеЗаполнено(КаталогРаспаковки) Тогда
				УдалитьФайлы(КаталогРаспаковки);
			КонецЕсли;
		Исключение
			ТекстОшибки = ТекстОшибки + Символы.ПС + 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка удаления временных файлов: %1';uk='Помилка вилучення тимчасових файлів: %1'"), ИнформацияОбОшибке().Описание);
		КонецПопытки;
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьВременныеФайлыНаСервере(ИмяФайлаНаСервере)
	
	Если Не ЗначениеЗаполнено(ИмяФайлаНаСервере) Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаНаСервере);
	КаталогРаспаковки = Файл.Путь;
	
	Попытка
		УдалитьФайлы(КаталогРаспаковки);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Ошибка удаления временных файлов: %1';uk='Помилка вилучення тимчасових файлів: %1'"), ИнформацияОбОшибке().Описание));
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ЭтоСсылочныйТип(Тип)
	
	Результат = Ложь;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(Тип)
			ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) 
			ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//++ НЕ УТКА
&НаСервере
Функция ЗапрещеноИзменятьЭтапыБюджетов(Модель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	БюджетнаяЗадача.Ссылка
	|ИЗ
	|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|ГДЕ
	|	БюджетнаяЗадача.МодельБюджетирования = &МодельБюджетирования";
	
	Запрос.УстановитьПараметр("МодельБюджетирования",Модель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Выборка.Количество() > 0;
	
КонецФункции
//-- НЕ УТКА

&НаКлиенте
Процедура УстановитьФлагОбновитьВидовЭтаповБюджета(ТекСтрока)
	
	Если Не ОбновитьМодель Тогда
		ТекСтрока.Обновить = Ложь;
	КонецЕсли;
	
	Подчиненные = ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Подчиненные Цикл
		
		Строка.Обновить = ТекСтрока.Обновить;
		Если ТекСтрока.Обновить И ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Если Строка.Используется Тогда
				Строка.Обновить = Ложь;
			Иначе
				Строка.Обновить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьФлагОбновитьВидовЭтаповБюджета(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИспользуемыеВидыЭтапыБюджета(Модель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользуемыеВидыЭтапыБюджета = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыБюджетов.Ссылка
	|ПОМЕСТИТЬ ВидыБюджетов
	|ИЗ
	|	Справочник.ВидыБюджетов КАК ВидыБюджетов
	|ГДЕ
	|	ВидыБюджетов.Владелец = &Модель
	|;
	//++ НЕ УТКА
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыПодготовкиБюджетов.Ссылка
	|ПОМЕСТИТЬ ЭтапыБюджетов
	|ИЗ
	|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
	|ГДЕ
	|	ЭтапыПодготовкиБюджетов.Владелец = &Модель
	|;
	//-- НЕ УТКА
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭкземплярБюджета.ВидБюджета КАК Ссылка
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|ГДЕ
	|	ЭкземплярБюджета.ВидБюджета В
	|			(ВЫБРАТЬ
	|				А.Ссылка
	|			ИЗ
	|				ВидыБюджетов КАК А)
	//++ НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БюджетнаяЗадача.ЭтапПодготовкиБюджетов
	|ИЗ
	|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|ГДЕ
	|	БюджетнаяЗадача.ЭтапПодготовкиБюджетов В
	|			(ВЫБРАТЬ
	|				А.Ссылка
	|			ИЗ
	|				ЭтапыБюджетов КАК А)
	//-- НЕ УТКА
	|";
	
	Запрос.УстановитьПараметр("Модель",Модель);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		ИспользуемыеВидыЭтапыБюджета = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИспользуемыеВидыЭтапыБюджета;
	
КонецФункции

&НаКлиенте
Функция ДоступныеДействия(ТекущаяСтрока)
	
	СписокДействий = Новый СписокЗначений;
	СписокДействий.Добавить(Ложь,НСтр("ru='загрузить новый';uk='завантажити новий'"));
	
	ЗапретОбновления = Ложь;
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Если Не Родитель.Обновить Тогда
			ЗапретОбновления = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗапретОбновления И ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) И Не ТекущаяСтрока.Используется Тогда
		СписокДействий.Добавить(Истина,НСтр("ru='обновить существующий';uk='оновити існуючий'"));
	КонецЕсли;
	
	Возврат СписокДействий;
	
КонецФункции

// Устанавливает в секцию ВЫБРАТЬ ключевое слово "РАЗРЕШЕННЫЕ"
//
// Параметры:
//  Запрос        - Строка, Запрос - текст запроса или запрос
//  ВыбиратьРазрешенные    - Булево - признак, выбирать ли только разрешенные записи
//                                 - Истина - будет добавлено ключевое слово "РАЗРЕШЕННЫЕ" в секцию ВЫБРАТЬ
//                                 - Ложь   - будет исключено ключевое слово "РАЗРЕШЕННЫЕ" в секцию ВЫБРАТЬ
//  ИндексЗапросаВПакете           - Число - индекс запроса в пакете запросов. Если не задано, то последний запрос в пакете
//
// Возвращаемое значение:
//  Строка, Запрос - измененный текст запроса или запрос
//
&НаСервере
Функция УстановитьВыборкуРазрешенныхЗаписей(Знач Запрос, Знач ВыбиратьРазрешенные, Знач ИндексЗапросаВПакете = Неопределено) Экспорт
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		ТекстЗапроса = Запрос;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		ТекстЗапроса = Запрос.Текст;
	Иначе
		ВызватьИсключение НСтр("ru='Некорректный тип параметра 1';uk='Некоректний тип параметра 1'") ;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ИзменяемыйЗапрос = ЗапросПакетаЗапросов(СхемаЗапроса, ИндексЗапросаВПакете);
	
	Если ТипЗнч(ИзменяемыйЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		ВызватьИсключение НСтр("ru='Невозможно добавить количество выбираемых записей в запрос уничтожения таблицы.';uk='Неможливо додати кількість записів, які обираються, в запит знищення таблиці.'"); 
	КонецЕсли;
	
	ИзменяемыйЗапрос.ВыбиратьРазрешенные = ВыбиратьРазрешенные;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Если ТипЗнч(Запрос) = Тип("Строка") Тогда
		Запрос = ТекстЗапроса;
	ИначеЕсли ТипЗнч(Запрос) = Тип("Запрос") Тогда 
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает схему запроса по значению переданного индекса в пакете запросов
//
// Параметры:
//  СхемаЗапроса         - СхемаЗапроса - схема запроса
//  ИндексЗапросаВПакете - Число - индекс запроса в пакете запросов. Если не задано, то последний запрос в пакете
//
// Возвращаемое значение:
//  ЗапросВыбораСхемыЗапроса, ЗапросУничтоженияТаблицыСхемыЗапроса - измененный текст запроса или запрос
//
&НаСервере
Функция ЗапросПакетаЗапросов(Знач СхемаЗапроса, ИндексЗапросаВПакете = Неопределено) Экспорт
	Перем ЗапросПакетаЗапросов;
	
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов;
	
	Если ИндексЗапросаВПакете = Неопределено Тогда
		ИндексЗапросаВПакете = ПакетЗапросов.Количество() - 1;
	КонецЕсли;
	
	ЗапросПакетаЗапросов = ПакетЗапросов.Получить(ИндексЗапросаВПакете);
	
	Возврат ЗапросПакетаЗапросов;
КонецФункции

#КонецОбласти
