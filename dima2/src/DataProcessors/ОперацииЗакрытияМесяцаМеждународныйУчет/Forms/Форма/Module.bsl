
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ПериодРегистрации", Объект.ПериодРегистрации)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Объект.ПериодРегистрации = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("Организация", Объект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	КонецЕсли;
	СписокДоступныхОрганизаций = ДоступныеОрганизации(Объект.Организация);
	
	УчетнаяВалюта = МеждународнаяОтчетностьВызовСервера.УчетнаяВалюта();
	ВалютыСовпадают = УчетнаяВалюта.Функциональная = УчетнаяВалюта.Представления;
	
	УчетВнеоборотныхАктивов = ПолучитьФункциональнуюОпцию("ИспользоватьДокументыВнеоборотныхАктивовМеждународныйУчет");
	Элементы.ГруппаАмортизацияОСОбщая.Видимость = УчетВнеоборотныхАктивов;
	Элементы.ГруппаАмортизацияНМАОбщая.Видимость = УчетВнеоборотныхАктивов;
	
	ПроводкиПоДаннымОперУчета = ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымОперативного");
	ПроводкиПоДаннымРеглУчета = ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного");
	ИспользоватьОтражениеДокументов = ПроводкиПоДаннымОперУчета ИЛИ ПроводкиПоДаннымРеглУчета;
	
	Элементы.ГруппаОтражениеДокументовВМеждУчетеОбщая.Видимость = ИспользоватьОтражениеДокументов;
	
	ВидПериодаРегистрации = Перечисления.ДоступныеПериодыОтчета.Месяц;
	ЗаполнитьСписокЭтаповЗакрытия();
	ПоказатьПоясненияКЭтапам = Истина;
	Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Заголовок = НСтр("ru='Скрыть пояснения к этапам';uk='Приховати пояснення до етапів'");
	ПолучитьСостояниеРегламентногоЗадания();
	УправлениеЭлементамиПодвала();
	ЗаполнитьСписокВыбораОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПредставлениеПериодаРегистрации = 
							ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.ПериодРегистрации);
	ПредставлениеПериодРегистрацииРегламентный = 
							ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрацииРегламентный);
	
	ОбновитьСостояния();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаДатаЗапретаФормированияПроводок" Тогда
		СостояниеДатаЗапретаФормированияПроводок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("ПериодРегистрации") Тогда
		Объект.ПериодРегистрации = Параметры.ПериодРегистрации;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	
	СписокДоступныхОрганизаций = ДоступныеОрганизации(Объект.Организация);
	ПолучитьСостояниеРегламентногоЗадания();
	УправлениеЭлементамиПодвала();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.НачалоВыбораПредставленияПериодаРегистрации(Элемент,
		СтандартнаяОбработка,
		Объект.ПериодРегистрации,
		ЭтаФорма,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод <> Неопределено Тогда
		Объект.ПериодРегистрации = ВыбранныйПериод;
		ПредставлениеПериодаРегистрации = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.ПериодРегистрации);
		ОбновитьСостояния();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(Направление,
																		  СтандартнаяОбработка,
																		  Объект.ПериодРегистрации,
																		  ПредставлениеПериодаРегистрации);
	
	ОбновитьСостояния();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭтапов

&НаКлиенте
Процедура ЗакрытиеМесяцаОперативныйУчетНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", 		 Объект.Организация);
	ПараметрыФормы.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	ОткрытьФорму("Обработка.ОперацииЗакрытияМесяца.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияОСНажатие(Элемент)
	
	ОткрытьФорму("Документ.АмортизацияОСМеждународныйУчет.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеАмортизацияОСНажатие(Элемент)
	
	ДействиеАмортизацияОССервер();

КонецПроцедуры

&НаКлиенте
Процедура АмортизацияНМАНажатие(Элемент)
	
	ОткрытьФорму("Документ.АмортизацияНМАМеждународныйУчет.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеАмортизацияНМАНажатие(Элемент)
	
	ДействиеАмортизацияНМАСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтражениеДокументовВМеждУчетеНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ДатаОкончанияПериода", КонецМесяца(Объект.ПериодРегистрации));
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОтражениеДокументовВМеждУчетеНажатие(Элемент)
	
	ДействиеОтражениеДокументовВМеждУчетеСервер();
	Оповестить("Запись_ОтражениеДокументовВМеждународномУчете");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетКурсовыхРазницНажатие(Элемент)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипОперации", ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницФункциональнаяВалюта"));
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Документ.РегламентнаяОперацияМеждународныйУчет.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетКурсовыхРазницНажатие(Элемент)
	
	ДействиеРасчетКурсовыхРазницСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеСчетовДоходовРасходовНажатие(Элемент)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипОперации", ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОперацийМеждународныйУчет.ЗакрытиеСчетовДоходовРасходов"));
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Документ.РегламентнаяОперацияМеждународныйУчет.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеЗакрытиеСчетовДоходовРасходовНажатие(Элемент)
	
	ДействиеЗакрытиеСчетовДоходовРасходовСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчетВВалютуПредставленияНажатие(Элемент)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипОперации", ПредопределенноеЗначение("Перечисление.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницВалютаПредставления"));
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Документ.РегламентнаяОперацияМеждународныйУчет.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПересчетВВалютуПредставленияНажатие(Элемент)
	
	ДействиеПересчетВВалютуПредставленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеДатаЗапретаФормированияПроводокНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.ДатыЗапретаФормированияПроводокМеждународныйУчет.Форма.ДатыЗапретаФормирования");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура АвтоматическиВыполнятьОперацииПоЗакрытиюМесяцаПриИзменении(Элемент)
	
	Если АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца И НЕ ЗначениеЗаполнено(ПериодРегистрацииРегламентный) Тогда
			ПериодРегистрацииРегламентный = Объект.ПериодРегистрации;
			ПредставлениеПериодРегистрацииРегламентный = 
						ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрацииРегламентный);
	КонецЕсли;
	
	СохранитьРеквизитыРегламентногоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодРегистрацииРегламентныйРегулирование(Элемент, Направление, СтандартнаяОбработка)

	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(Направление,
																		  СтандартнаяОбработка,
																		  ПериодРегистрацииРегламентный,
																		  ПредставлениеПериодРегистрацииРегламентный);
	СохранитьРеквизитыРегламентногоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодРегистрацииРегламентныйНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодРегистрацииРегламентныйНачалоВыбораИзСпискаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.НачалоВыбораПредставленияПериодаРегистрации(Элемент,
		СтандартнаяОбработка,
		ПериодРегистрацииРегламентный,
		ЭтаФорма,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодРегистрацииРегламентныйНачалоВыбораИзСпискаЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод <> Неопределено Тогда
		ПериодРегистрацииРегламентный = ВыбранныйПериод;
		
		ПредставлениеПериодРегистрацииРегламентный = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрацииРегламентный);
		СохранитьРеквизитыРегламентногоЗадания();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОперацииПоЗакрытиюМесяцаНажатие(Команда)
	
	ВыполнитьОперацииПоЗакрытиюМесяца();
	Оповестить("Запись_ОтражениеДокументовВМеждународномУчете");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗадания(Команда)
	
	РедактированиеРасписанияРегламентногоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеОпераций(Команда)
	
	ОбновитьСостояниеОперацийСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПоясненияКЭтапам(Команда)

	ПоказатьПоясненияКЭтапам = Не ПоказатьПоясненияКЭтапам;
	Если ПоказатьПоясненияКЭтапам Тогда
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Заголовок = НСтр("ru='Скрыть пояснения к этапам';uk='Приховати пояснення до етапів'");
	Иначе
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Заголовок = НСтр("ru='Показать пояснения к этапам';uk='Показати пояснення до етапів'");
	КонецЕсли;
	
	УстановитьВидимостьПояснений();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ДобавитьУсловноеОформление("АмортизацияОС");
	ДобавитьУсловноеОформление("АмортизацияНМА");
	ДобавитьУсловноеОформление("ЗакрытиеСчетовДоходовРасходов");
	ДобавитьУсловноеОформление("ОтражениеДокументовВМеждУчете");
	ДобавитьУсловноеОформление("ПересчетВВалютуПредставления");
	ДобавитьУсловноеОформление("РасчетКурсовыхРазниц");

КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформление(НаименованиеЭтапа)
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[НаименованиеЭтапа].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НаименованиеЭтапа);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеактуальногоСписка);
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	СписокДоступныхОрганизаций = ДоступныеОрганизации(Объект.Организация);
	ОбновитьСостояния();
	ПолучитьСостояниеРегламентногоЗадания();
	УправлениеЭлементамиПодвала();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеОперацийСервер()
	
	СписокДоступныхОрганизаций = ДоступныеОрганизации(Объект.Организация);
	ОбновитьСостояния();
	ПолучитьСостояниеРегламентногоЗадания();
	УправлениеЭлементамиПодвала();
	
КонецПроцедуры

#КонецОбласти

#Область СостояниеОперацийЗакрытияМесяца

&НаСервере
Процедура СостояниеЗакрытиеМесяцаОперативныйУчет()
	
	ЗакрытиеМесяцаОперативныйУчет = ЗакрытиеМесяцаУТВызовСервера.СостояниеРасчетаСебестоимости(
										СписокДоступныхОрганизаций.ВыгрузитьЗначения(), Объект.ПериодРегистрации);
	Если ЗакрытиеМесяцаОперативныйУчет = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
		Элементы.ЗакрытиеМесяцаОперативныйУчет.Гиперссылка = Ложь;
	Иначе
		Элементы.ЗакрытиеМесяцаОперативныйУчет.Гиперссылка = Истина;
		ПояснениеЗакрытиеМесяцаОперативныйУчет = НСтр("ru='Необходимо выполнить закрытие месяца в оперативном учете.';uk='Необхідно виконати закриття місяця в оперативному обліку.'");
		ЗакрытиеМесяцаОперативныйУчет = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций;
	КонецЕсли;
	
	УстановитьДействияИКартинкиСтатусаДляЭтапа(ЗакрытиеМесяцаОперативныйУчет, Элементы.ЗакрытиеМесяцаОперативныйУчет.Имя);

КонецПроцедуры

&НаСервере
Процедура СостояниеАмортизацияОС()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОССрезПоследних.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ОсновныеСредстваМеждународныйУчет.СрезПоследних(&КонецПериода, Организация В (&СписокОрганизаций)) КАК ОССрезПоследних
	|ГДЕ
	|	ОССрезПоследних.Состояние = &Состояние
	|	И ОССрезПоследних.ПорядокУчета = &ПорядокУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АмортизацияОС.Ссылка
	|ИЗ
	|	Документ.АмортизацияОСМеждународныйУчет КАК АмортизацияОС
	|ГДЕ
	|	АмортизацияОС.Проведен
	|	И АмортизацияОС.Организация В(&СписокОрганизаций)
	|	И АмортизацияОС.Дата >= &НачалоПериода
	|	И АмортизацияОС.Дата <= &КонецПериода");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокДоступныхОрганизаций);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияОС.ПринятоКУчету);
	Запрос.УстановитьПараметр("ПорядокУчета", Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Элементы.АмортизацияОС.Гиперссылка = Ложь;
	Если РезультатЗапроса[0].Пустой() Тогда
		АмортизацияОС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли НЕ РезультатЗапроса[1].Пустой() Тогда
		АмортизацияОС = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		АмортизацияОС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		Элементы.АмортизацияОС.Гиперссылка = Истина;
		ПояснениеАмортизацияОС = НСтр("ru='Необходимо начислить амортизацию основных средств по международному учету';uk='Необхідно нарахувати амортизацію основних засобів по міжнародному обліку'");
	КонецЕсли;
	
	УстановитьДействияИКартинкиСтатусаДляЭтапа(АмортизацияОС, Элементы.АмортизацияОС.Имя);

КонецПроцедуры

&НаСервере
Процедура СостояниеАмортизацияНМА()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НМАСрезПоследних.НематериальныйАктив
	|ИЗ
	|	РегистрСведений.НематериальныеАктивыМеждународныйУчет.СрезПоследних(&КонецПериода, Организация В (&СписокОрганизаций)) КАК НМАСрезПоследних
	|ГДЕ
	|	НМАСрезПоследних.Состояние = &Состояние
	|	И НМАСрезПоследних.ПорядокУчета = &ПорядокУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АмортизацияНМА.Ссылка
	|ИЗ
	|	Документ.АмортизацияНМАМеждународныйУчет КАК АмортизацияНМА
	|ГДЕ
	|	АмортизацияНМА.Проведен
	|	И АмортизацияНМА.Организация В(&СписокОрганизаций)
	|	И АмортизацияНМА.Дата >= &НачалоПериода
	|	И АмортизацияНМА.Дата <= &КонецПериода");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокДоступныхОрганизаций);
	Запрос.УстановитьПараметр("Состояние", Перечисления.ВидыСостоянийНМА.ПринятКУчету);
	Запрос.УстановитьПараметр("ПорядокУчета", Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Элементы.АмортизацияНМА.Гиперссылка = Ложь;
	Если РезультатЗапроса[0].Пустой() Тогда
		АмортизацияНМА = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли НЕ РезультатЗапроса[1].Пустой() Тогда
		АмортизацияНМА = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		АмортизацияНМА = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		Элементы.АмортизацияНМА.Гиперссылка = Истина;
		ПояснениеАмортизацияНМА = НСтр("ru='Необходимо начислить амортизацию нематериальных активов по международному учету';uk='Необхідно нарахувати амортизацію нематеріальних активів по міжнародному обліку'");
	КонецЕсли;
	
	УстановитьДействияИКартинкиСтатусаДляЭтапа(АмортизацияНМА, Элементы.АмортизацияНМА.Имя);

КонецПроцедуры

&НаСервере
Процедура СостояниеОтражениеДокументовВМеждУчете()
	
	ОтражениеДокументовВМеждУчете = Обработки.ОперацииЗакрытияМесяцаМеждународныйУчет.СостояниеОтражениеДокументов(
										СписокДоступныхОрганизаций, Объект.ПериодРегистрации);
	Если ОтражениеДокументовВМеждУчете = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно Тогда
		Элементы.ОтражениеДокументовВМеждУчете.Гиперссылка = Ложь;
	Иначе
		Элементы.ОтражениеДокументовВМеждУчете.Гиперссылка = Истина;
		ПояснениеОтражениеДокументовВМеждУчете = НСтр("ru='Существуют документы, не отраженные в международном учете.';uk='Існують документи, які не відображені в міжнародному обліку.'");
	КонецЕсли;
	
	УстановитьДействияИКартинкиСтатусаДляЭтапа(ОтражениеДокументовВМеждУчете, Элементы.ОтражениеДокументовВМеждУчете.Имя);

КонецПроцедуры

&НаСервере
Процедура СостояниеРасчетКурсовыхРазниц()
	
	УстановитьПривилегированныйРежим(Истина);
	ЕстьДокумент = ЕстьДокументПереоценки(Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницФункциональнаяВалюта);
	ВсегоНеЗакрыто = Документы.РегламентнаяОперацияМеждународныйУчет.НезакрытыеКурсовыеРазницы(СписокДоступныхОрганизаций,
																					КонецМесяца(Объект.ПериодРегистрации),
																					Истина);
	Элементы.РасчетКурсовыхРазниц.Гиперссылка = Ложь;
	Если ВсегоНеЗакрыто = 0 И НЕ ЕстьДокумент Тогда
		РасчетКурсовыхРазниц = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИНачеЕсли ВсегоНеЗакрыто = 0 И ЕстьДокумент Тогда
		РасчетКурсовыхРазниц = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Элементы.РасчетКурсовыхРазниц.Гиперссылка = Истина;
		РасчетКурсовыхРазниц = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		ПояснениеРасчетКурсовыхРазниц = 
			НСтр("ru='Необходимо ввести документ регламентная операция (международный учет)
            |с типом операции ""Расчет курсовых разниц в функциональной валюте"".'
            |;uk='Необхідно ввести документ регламентна операція (міжнародний облік)
            |з типом операції ""Розрахунок курсових різниць у функціональній валюті"".'");
	КонецЕсли;
	
	УстановитьДействияИКартинкиСтатусаДляЭтапа(РасчетКурсовыхРазниц, Элементы.РасчетКурсовыхРазниц.Имя);
	
КонецПроцедуры

&НаСервере
Процедура СостояниеЗакрытиеСчетовДоходовРасходов()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизацийМФУ.Организация,
	|	УчетнаяПолитикаОрганизацийМФУ.УчетнаяПолитика
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизацийДляМеждународногоУчета.СрезПоследних(&КонецПериода, Организация В (&СписокОрганизаций)) КАК УчетнаяПолитикаОрганизацийМФУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗакрытиеСчетов.Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперацияМеждународныйУчет КАК ЗакрытиеСчетов
	|ГДЕ
	|	ЗакрытиеСчетов.Проведен
	|	И ЗакрытиеСчетов.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОперацийМеждународныйУчет.ЗакрытиеСчетовДоходовРасходов)
	|	И ЗакрытиеСчетов.Организация В(&СписокОрганизаций)
	|	И ЗакрытиеСчетов.Дата >= &НачалоПериода
	|	И ЗакрытиеСчетов.Дата <= &КонецПериода");
	
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("СтатусДоговора", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокДоступныхОрганизаций);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Элементы.ЗакрытиеСчетовДоходовРасходов.Гиперссылка = Ложь;
	Если РезультатЗапроса[0].Пустой() Тогда
		ЗакрытиеСчетовДоходовРасходов = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли НЕ РезультатЗапроса[1].Пустой() Тогда
		ЗакрытиеСчетовДоходовРасходов = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Элементы.ЗакрытиеСчетовДоходовРасходов.Гиперссылка = Истина;
		ЗакрытиеСчетовДоходовРасходов = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		ПояснениеЗакрытиеСчетовДоходовРасходов = 
			НСтр("ru='Необходимо ввести документ регламентная операция (международный учет)
            |с типом операции ""Закрытие счетов учета доходов и расходов"".'
            |;uk='Необхідно ввести документ регламентна операція (міжнародний облік)
            |з типом операції ""Закриття рахунків обліку доходів та витрат"".'");
	КонецЕсли;
	
	УстановитьДействияИКартинкиСтатусаДляЭтапа(ЗакрытиеСчетовДоходовРасходов, Элементы.ЗакрытиеСчетовДоходовРасходов.Имя);
	
КонецПроцедуры

&НаСервере
Процедура СостояниеПересчетВВалютуПредставления()
	
	УстановитьПривилегированныйРежим(Истина);
	ЕстьДокумент = ЕстьДокументПереоценки(Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницВалютаПредставления);
	ВсегоНеПересчитано = Документы.РегламентнаяОперацияМеждународныйУчет.НепересчитаноВВалютуПредставления(СписокДоступныхОрганизаций,
																					КонецМесяца(Объект.ПериодРегистрации),
																					Истина);
	Элементы.ПересчетВВалютуПредставления.Гиперссылка = Ложь;
	Если ВсегоНеПересчитано = 0 И НЕ ЕстьДокумент Тогда
		ПересчетВВалютуПредставления = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
	ИначеЕсли ВсегоНеПересчитано = 0 И ЕстьДокумент Тогда
		ПересчетВВалютуПредставления = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	Иначе
		Элементы.ПересчетВВалютуПредставления.Гиперссылка = Истина;
		ПересчетВВалютуПредставления = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		ПояснениеПересчетВВалютуПредставления = 
			НСтр("ru='Необходимо ввести документ регламентная операция (международный учет)
            |с типом операции ""Расчет курсовых разниц в валюте представления"".'
            |;uk='Необхідно ввести документ регламентна операція (міжнародний облік)
            |з типом операції ""Розрахунок курсових різниць у валюті подання"".'");
	КонецЕсли;
	
	УстановитьДействияИКартинкиСтатусаДляЭтапа(ПересчетВВалютуПредставления, Элементы.ПересчетВВалютуПредставления.Имя);
	
КонецПроцедуры

&НаСервере
Процедура СостояниеДатаЗапретаФормированияПроводок()
	
	ДатаЗапретаФормированияПроводок = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	ДатаЗапрета = МеждународныйУчетСерверПовтИсп.ДатаЗапретаФормированияПроводок(Объект.Организация);
	Текст = НСтр("ru='Дата запрета формирования проводок %Дата%';uk='Дата заборони формування проводок %Дата%'");
	Элементы.ДатаЗапретаФормированияПроводок.Заголовок = СтрЗаменить(Текст, "%Дата%", Формат(ДатаЗапрета, "ДЛФ=DD"));
	
	УстановитьДействияИКартинкиСтатусаДляЭтапа(ДатаЗапретаФормированияПроводок, Элементы.ДатаЗапретаФормированияПроводок.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаРегламентногоЗадания

&НаСервере
Процедура СохранитьРеквизитыРегламентногоЗадания()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗадания = Новый Структура;
	Если РасписаниеРегламентногоЗадания <> Неопределено Тогда
		ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	КонецЕсли;
	ПараметрыЗадания.Вставить("Использование", АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца);
	
	ПараметрыРегламентногоЗадания = Новый Массив;
	НастройкаРегламентногоЗадания = Новый Структура;
	НастройкаРегламентногоЗадания.Вставить("Организация", Объект.Организация);
	НастройкаРегламентногоЗадания.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	ПараметрыРегламентногоЗадания.Добавить(НастройкаРегламентногоЗадания);
	ПараметрыЗадания.Вставить("Параметры", ПараметрыРегламентногоЗадания);
	
	Задание = НайтиРегламентноеЗадание();
	Если Задание = Неопределено Тогда
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗакрытиеМесяцаМеждународныйУчет);
		СтрокаНаименования = НСтр("ru='%1: закрытие месяца (международный учет)';uk='%1: закриття місяця (міжнародний облік)'");
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаименования,
																						 НСтр("ru='<По всем организациям>';uk='<За всіма організаціями>'"));
		Иначе
			СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаименования,
																						 СокрЛП(Объект.Организация));
		КонецЕсли;
		ПараметрыЗадания.Вставить("Наименование", СтрокаНаименования);
		Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		Задание = Задание.Ссылка;
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЕсли;
	
	РегламентноеЗадание = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
	
	Если НЕ ЗначениеЗаполнено(ПериодРегистрацииРегламентный) Тогда
		ПериодРегистрацииРегламентный = НачалоМесяца(ТекущаяДата());
		ПредставлениеПериодРегистрацииРегламентный = Формат(ПериодРегистрацииРегламентный, "ДФ='MMMM yyyy'");
	КонецЕсли;
	
	УправлениеЭлементамиПодвала();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеРасписания()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		 ПредставлениеРасписания = НСтр("ru='Расписание не задано';uk='Розклад не заданий'");
	КонецЕсли;
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок = ПредставлениеРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗадания()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
    
    Диалог = ДополнительныеПараметры.Диалог;
    
    
    Если Расписание <> Неопределено Тогда
        РасписаниеРегламентногоЗадания = Диалог.Расписание;
        СохранитьРеквизитыРегламентногоЗадания();
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеРегламентногоЗадания()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = НайтиРегламентноеЗадание();
	Если Задание <> Неопределено Тогда
		
		ПериодРегистрацииРегламентный = Задание.ПериодРегистрации;
		ПредставлениеПериодРегистрацииРегламентный = Формат(ПериодРегистрацииРегламентный, "ДФ='MMMM yyyy'");
		РасписаниеРегламентногоЗадания = Задание.Расписание;
		АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца = Задание.Использование;
		
		СвойстваПоследнегоФоновогоЗадания = 
			ОбщегоНазначенияУТ.ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание.Ссылка);
		Если СвойстваПоследнегоФоновогоЗадания = Неопределено Тогда
			СостояниеАвтоматическогоВыполненияОпераций = НСтр("ru='Не выполнялось';uk='Не виконувалось'");
		Иначе
			СостояниеАвтоматическогоВыполненияОпераций = Строка(СвойстваПоследнегоФоновогоЗадания.Состояние) + ": "
			+ Строка(СвойстваПоследнегоФоновогоЗадания.Конец);
		КонецЕсли;
	Иначе
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
		АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца = Ложь;
		СостояниеАвтоматическогоВыполненияОпераций = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиРегламентноеЗадание()
	
	Отбор = Новый Структура("Метаданные","ЗакрытиеМесяцаМеждународныйУчет");
	МассивЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Результат = Неопределено;
	Для Каждого Задание Из МассивЗаданий Цикл
		Если Задание.Параметры.Количество() Тогда
			ПараметрыЗадания = Задание.Параметры[0];
			Если ТипЗнч(ПараметрыЗадания) = Тип("Структура")
				И ПараметрыЗадания.Свойство("Организация")
				И ПараметрыЗадания.Организация = Объект.Организация Тогда
				Результат = Новый Структура;
				Результат.Вставить("Ссылка", Задание);
				Результат.Вставить("Организация", ПараметрыЗадания.Организация);
				Результат.Вставить("ПериодРегистрации", '00010101');
				Если ПараметрыЗадания.Свойство("ПериодРегистрации") Тогда
					Результат.ПериодРегистрации = ПараметрыЗадания.ПериодРегистрации;
				КонецЕсли;
				Результат.Вставить("Использование", Задание.Использование);
				Результат.Вставить("Расписание", Задание.Расписание);
				Результат.Вставить("УникальныйИдентификатор", РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание));
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьДействияИКартинкиСтатусаДляЭтапа(Этап, НазваниеЭтапа)

	ИндексЗначения = Перечисления.СостоянияОперацийЗакрытияМесяца.Индекс(Этап);
	ИмяПеречисления = Метаданные.Перечисления.СостоянияОперацийЗакрытияМесяца.ЗначенияПеречисления[ИндексЗначения].Имя;
	Элементы["Картинки" + НазваниеЭтапа].ТекущаяСтраница = Элементы[НазваниеЭтапа + ИмяПеречисления];

	Если Этап = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		Элементы["Действия" + НазваниеЭтапа].ТекущаяСтраница = Элементы["Действие" + НазваниеЭтапа+"НеТребуется"];
		Элементы["ГруппаПояснение" + НазваниеЭтапа].Видимость = Ложь;
	ИначеЕсли Этап = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций Тогда
		Элементы["Действия" + НазваниеЭтапа].ТекущаяСтраница = Элементы["Действие" + НазваниеЭтапа+"Ожидание"];
		Элементы["ГруппаПояснение" + НазваниеЭтапа].Видимость = Ложь;
	Иначе
		Элементы["Действия" + НазваниеЭтапа].ТекущаяСтраница = Элементы["Действие" + НазваниеЭтапа+"Выполнять"];
		Если ПоказатьПоясненияКЭтапам И Этап = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
			Элементы["ГруппаПояснение" + НазваниеЭтапа].Видимость = Истина;
		Иначе
			Элементы["ГруппаПояснение" + НазваниеЭтапа].Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиПодвала()
	
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность 	= АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца;
	Элементы.ПредставлениеПериодРегистрацииРегламентный.Доступность = АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца;
	Элементы.СостояниеАвтоматическогоВыполненияОпераций.Доступность = АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца;
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПояснений()
	
	Для Каждого Этап Из СписокЭтаповЗакрытия Цикл
		СостояниеЭтапа = ЭтаФорма[Этап.Значение];
		Если ПоказатьПоясненияКЭтапам 
			И (СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено
			   ИЛИ СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками) Тогда
			Элементы["ГруппаПояснение"+Этап].Видимость = Истина;
		Иначе
			Элементы["ГруппаПояснение"+Этап].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояния(СтруктураОпераций = Неопределено)
	
	ОбновитьВсе = СтруктураОпераций = Неопределено;
	Если ОбновитьВсе ИЛИ СтруктураОпераций.Свойство("ЗакрытиеМесяцаОперативныйУчет") Тогда
		СостояниеЗакрытиеМесяцаОперативныйУчет();
	КонецЕсли;
	Если ОбновитьВсе ИЛИ СтруктураОпераций.Свойство("АмортизацияОС") Тогда
		 СостояниеАмортизацияОС();
	КонецЕсли;
	Если ОбновитьВсе ИЛИ СтруктураОпераций.Свойство("АмортизацияНМА") Тогда
		СостояниеАмортизацияНМА();
	КонецЕсли;
	Если ОбновитьВсе ИЛИ СтруктураОпераций.Свойство("ОтражениеДокументовВМеждУчете") Тогда
		СостояниеОтражениеДокументовВМеждУчете();
	КонецЕсли;
	Если ОбновитьВсе ИЛИ СтруктураОпераций.Свойство("РасчетКурсовыхРазниц") Тогда
		 СостояниеРасчетКурсовыхРазниц();
	 КонецЕсли;
	Если ОбновитьВсе ИЛИ СтруктураОпераций.Свойство("ЗакрытиеСчетовДоходовРасходов") Тогда
		 СостояниеЗакрытиеСчетовДоходовРасходов();
	 КонецЕсли;
	Если ОбновитьВсе ИЛИ СтруктураОпераций.Свойство("ПересчетВВалютуПредставления") Тогда
		 СостояниеПересчетВВалютуПредставления();
	 КонецЕсли;
	Если ОбновитьВсе ИЛИ СтруктураОпераций.Свойство("ДатаЗапретаФормированияПроводок") Тогда
		СостояниеДатаЗапретаФормированияПроводок();
	КонецЕсли;
	УстановитьСтатус();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатус()

	ВыполненоУспешно = 0;
	НеТребуется		 = 0;
	НеВыполнено		 = 0;
	
	Для Каждого Элемент Из СписокЭтаповЗакрытия Цикл
		Если ЭтаФорма[Элемент.Значение] = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно  Тогда 
			ВыполненоУспешно = ВыполненоУспешно +1;
		ИначеЕсли 	ЭтаФорма[Элемент.Значение] = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			НеТребуется = НеТребуется + 1;
		Иначе
			НеВыполнено = НеВыполнено + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыполненоУспешно >0 И НеВыполнено = 0 Тогда
		Статус = НСтр("ru='Операции выполнены успешно';uk='Операції виконані успішно'");
		Элементы.ДекорацияВыполнено.Видимость= Истина;
		Элементы.ДекорацияНеВыполнено.Видимость = Ложь;
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Видимость = Ложь;
	ИначеЕсли НеТребуется > 0 И НеВыполнено = 0 Тогда
		Статус = "";
		Элементы.ДекорацияВыполнено.Видимость= Ложь;
		Элементы.ДекорацияНеВыполнено.Видимость = Ложь;
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Видимость = Ложь;
	Иначе
		Статус = НСтр("ru='Существуют невыполненные операции';uk='Існують невиконані операції'");
		Элементы.ДекорацияВыполнено.Видимость= Ложь;
		Элементы.ДекорацияНеВыполнено.Видимость = Истина;
		Элементы.ФормаПоказатьСкрытьПоясненияКЭтапам.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДоступныеОрганизации(Организация = Неопределено)
	
	СписокОрганизаций = Новый СписокЗначений;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеСправочника.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК ДанныеСправочника
		|ГДЕ
		|	(ДанныеСправочника.Ссылка = &Организация
		|	ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
		|	И
		|	(ДанныеСправочника.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
		|	 ИЛИ &УчитыватьУпрОрганизацию)
		|");
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("УчитыватьУпрОрганизацию", 
								  ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
		МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
		СписокОрганизаций.ЗагрузитьЗначения(МассивОрганизаций);
	Иначе
		СписокОрганизаций.Добавить(Организация);
	КонецЕсли;
	
	Возврат СписокОрганизаций;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокЭтаповЗакрытия()
	
	СписокЭтаповЗакрытия.Добавить("ЗакрытиеМесяцаОперативныйУчет");
	СписокЭтаповЗакрытия.Добавить("АмортизацияОС");
	СписокЭтаповЗакрытия.Добавить("АмортизацияНМА");
	Если ИспользоватьОтражениеДокументов Тогда
		СписокЭтаповЗакрытия.Добавить("ОтражениеДокументовВМеждУчете");
	КонецЕсли;
	СписокЭтаповЗакрытия.Добавить("РасчетКурсовыхРазниц");
	СписокЭтаповЗакрытия.Добавить("ЗакрытиеСчетовДоходовРасходов");
	СписокЭтаповЗакрытия.Добавить("ПересчетВВалютуПредставления");
	
	Если НЕ ВалютыСовпадают Тогда
		СписокЭтаповЗакрытия.Добавить("ДатаЗапретаФормированияПроводок");
	КонецЕсли;
	Элементы.ГруппаПересчетВВалютуПредставленияОбщая.Видимость = НЕ ВалютыСовпадают;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОрганизации()
	
	СписокВыбора = Элементы.Организация.СписокВыбора;
	СписокВыбора.ЗагрузитьЗначения(ДоступныеОрганизации().ВыгрузитьЗначения());
	СписокВыбора.Вставить(0, Справочники.Организации.ПустаяСсылка(), НСтр("ru='<По всем организациям>';uk='<За всіма організаціями>'"));
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ВыполнитьОперацииПоЗакрытиюМесяца()
	
	Обработка = Обработки.ОперацииЗакрытияМесяцаМеждународныйУчет;
	Обработка.ВыполнитьОперацииПоЗакрытиюМесяца(Объект.Организация, Объект.ПериодРегистрации);
	ОбновитьСостояниеОперацийСервер();
	
КонецПроцедуры

&НаСервере
Процедура ДействиеАмортизацияОССервер()
	
	// Основной функционал.
	Обработки.ОперацииЗакрытияМесяцаМеждународныйУчет.НачислитьАмортизациюОС(Объект.ПериодРегистрации, Объект.Организация);
	
	// Последующие действия.
	СтруктураОпераций = Новый Структура;
	СтруктураОпераций.Вставить("АмортизацияОС","");
	
	ОбновитьСостояния(СтруктураОпераций);
	
	Если НЕ (АмортизацияОС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено) Тогда
			ДействиеАмортизацияНМАСервер();
	Иначе
		СтруктураОпераций = Новый Структура;
		СтруктураОпераций.Вставить("АмортизацияНМА","");
		ОбновитьСостояния(СтруктураОпераций);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДействиеАмортизацияНМАСервер()
	
	// Основной функционал.
	Обработки.ОперацииЗакрытияМесяцаМеждународныйУчет.НачислитьАмортизациюНМА(Объект.ПериодРегистрации, Объект.Организация);
	
	// Последующие действия.
	СтруктураОпераций = Новый Структура;
	СтруктураОпераций.Вставить("АмортизацияНМА","");
	ОбновитьСостояния(СтруктураОпераций);

КонецПроцедуры

&НаСервере
Процедура ДействиеРасчетКурсовыхРазницСервер()
	
	// Основной функционал.
	Обработки.ОперацииЗакрытияМесяцаМеждународныйУчет.РасчетКурсовыхРазниц(Объект.Организация, Объект.ПериодРегистрации);
	
	// Последующие действия.
	СтруктураОпераций = Новый Структура;
	СтруктураОпераций.Вставить("РасчетКурсовыхРазниц","");
	ОбновитьСостояния(СтруктураОпераций);
	
КонецПроцедуры

&НаСервере
Процедура ДействиеЗакрытиеСчетовДоходовРасходовСервер()
	
	// Основной функционал.
	Обработки.ОперацииЗакрытияМесяцаМеждународныйУчет.ЗакрытиеСчетовДоходовРасходов(Объект.Организация, Объект.ПериодРегистрации);
	
	// Последующие действия.
	СтруктураОпераций = Новый Структура;
	СтруктураОпераций.Вставить("ЗакрытиеСчетовДоходовРасходов","");
	ОбновитьСостояния(СтруктураОпераций);
	
КонецПроцедуры

&НаСервере
Процедура ДействиеПересчетВВалютуПредставленияСервер()
	
	// Основной функционал.
	Обработки.ОперацииЗакрытияМесяцаМеждународныйУчет.ПересчетВВалютуПредставления(Объект.Организация, Объект.ПериодРегистрации);
	
	// Последующие действия.
	СтруктураОпераций = Новый Структура;
	СтруктураОпераций.Вставить("ПересчетВВалютуПредставления","");
	ОбновитьСостояния(СтруктураОпераций);
	
КонецПроцедуры

&НаСервере
Процедура ДействиеОтражениеДокументовВМеждУчетеСервер()
	
	// Основной функционал.
	МеждународныйУчетПроведениеСервер.ОтразитьВМеждународномУчете(Объект.Организация, КонецМесяца(Объект.ПериодРегистрации));
	
	// Последующие действия.
	СтруктураОпераций = Новый Структура;
	СтруктураОпераций.Вставить("ОтражениеДокументовВМеждУчете","");
	ОбновитьСостояния(СтруктураОпераций);
	
КонецПроцедуры

&НаСервере
Функция ЕстьДокументПереоценки(ТипОперации)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентнаяОперацияМеждународныйУчет КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация В(&Организация)
	|	И ДанныеДокумента.ТипОперации = &ТипОперации");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", СписокДоступныхОрганизаций);
	Запрос.УстановитьПараметр("ТипОперации" , ТипОперации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Следующий();
	
КонецФункции

#КонецОбласти

#КонецОбласти
