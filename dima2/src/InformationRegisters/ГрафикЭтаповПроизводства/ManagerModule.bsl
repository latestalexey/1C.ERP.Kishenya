#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ОбновитьОбъект_2_1_3_ОтметитьКОбработке(Параметры) Экспорт
	
	ДополнительныеПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметки.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметрыОтметки.ПолноеИмяРегистра = ПолноеИмяРегистра();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыПроизводства.Распоряжение КАК Распоряжение
		|ИЗ
		|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства КАК ГрафикЭтаповПроизводства
		|		ПО ЭтапыПроизводства.Распоряжение = ГрафикЭтаповПроизводства.Распоряжение
		|			И ЭтапыПроизводства.КодСтрокиПродукция = ГрафикЭтаповПроизводства.КодСтрокиПродукция
		|			И ЭтапыПроизводства.КодСтрокиЭтапыГрафик = ГрафикЭтаповПроизводства.КодСтрокиЭтапыГрафик
		|ГДЕ
		|	ЭтапыПроизводства.ПроизводствоНаСтороне
		|	И НЕ ГрафикЭтаповПроизводства.ПроизводствоНаСтороне ЕСТЬ NULL
		|	И НЕ ГрафикЭтаповПроизводства.ПроизводствоНаСтороне
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГрафикЭтаповПроизводства.Распоряжение КАК Распоряжение
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства КАК ГрафикЭтаповПроизводства
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ПО ГрафикЭтаповПроизводства.Распоряжение = ЭтапыПроизводства.Распоряжение
		|			И ГрафикЭтаповПроизводства.КодСтрокиПродукция = ЭтапыПроизводства.КодСтрокиПродукция
		|			И ГрафикЭтаповПроизводства.КодСтрокиЭтапыГрафик = ЭтапыПроизводства.КодСтрокиЭтапыГрафик
		|ГДЕ
		|	ЭтапыПроизводства.Распоряжение ЕСТЬ NULL");
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметрыОтметки);
	
КонецПроцедуры

Процедура ОбновитьОбъект_2_1_3(Параметры) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаОбъектыДляОбработки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, 
		ПолноеИмяРегистра(), МенеджерВременныхТаблиц);
	
	Если НЕ ТаблицаОбъектыДляОбработки.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ТаблицаОбъектыДляОбработки.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыПроизводства.Распоряжение КАК Распоряжение
		|ПОМЕСТИТЬ ВТЗаблокированныеРаспоряжения
		|ИЗ
		|	#ТаблицаЗаблокированных КАК ТаблицаЗаблокированных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
		|		ПО ТаблицаЗаблокированных.Регистратор = ЭтапыПроизводства.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбъектыДляОбработки.Распоряжение КАК Распоряжение
		|ИЗ
		|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокированныеРаспоряжения КАК ЗаблокированныеРаспоряжения
		|		ПО ОбъектыДляОбработки.Распоряжение = ЗаблокированныеРаспоряжения.Распоряжение
		|ГДЕ
		|	ЗаблокированныеРаспоряжения.Распоряжение ЕСТЬ NULL";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", ТаблицаОбъектыДляОбработки.ИмяВременнойТаблицы);
	
	ТаблицаЗаблокированныхДокументов = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияДанных(Параметры.Очередь,
		Метаданные.РегистрыНакопления.ЭтапыПроизводства.ПолноеИмя(), МенеджерВременныхТаблиц);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаЗаблокированных", ТаблицаЗаблокированныхДокументов.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыРасчета = Новый Структура("ПоЗаказу, ТребуетсяПроверкаГрафика", Истина, Истина);
	
	ПорцияДанных = Новый ТаблицаЗначений;
	ПорцияДанных.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЭтапыПроизводства");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировки.УстановитьЗначение("Распоряжение", Выборка.Распоряжение);
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ГрафикЭтаповПроизводства");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Распоряжение", Выборка.Распоряжение);
			
			Блокировка.Заблокировать();
			
			ЗаполнитьПорциюДанных(ПорцияДанных, Выборка);
			
			РегистрыНакопления.ЭтапыПроизводства.РассчитатьИтогиРегистраГрафикЭтаповПроизводства(ПараметрыРасчета, ПорцияДанных, Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось расcчитать итоги по распоряжению: %Распоряжение% по причине: %Причина%';uk='Не вдалося розрахувати підсумки за розпорядженням: %Распоряжение% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Распоряжение%", Выборка.Распоряжение);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.РегистрыСведений.ГрафикЭтаповПроизводства,
									Выборка.Распоряжение,
									ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра());
	
КонецПроцедуры

Процедура ЗаполнитьПорциюДанных(ПорцияДанных, Выборка)
	
	Если ПорцияДанных.Количество() = 1 Тогда
		ПорцияДанных[0].Распоряжение = Выборка.Распоряжение;
	Иначе
		ПорцияДанных.Добавить().Распоряжение = Выборка.Распоряжение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПолноеИмяРегистра()
	
	Возврат "РегистрСведений.ГрафикЭтаповПроизводства";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
