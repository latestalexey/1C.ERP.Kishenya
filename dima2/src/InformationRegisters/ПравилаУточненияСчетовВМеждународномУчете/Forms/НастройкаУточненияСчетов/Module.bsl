
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("ГруппаФинансовогоУчета") Тогда
	    ТекстСообщения = НСтр("ru='Непосредственное открытие этой формы не предусмотрено!';uk='Безпосереднє відкриття цієї форми не передбачено!'");
	    ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ГруппаФинансовогоУчета = Параметры.ГруппаФинансовогоУчета;
	
	ПоказатьСчетаУчета();
	
	УстановитьДоступностьВидимостьЭлементовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Оповестить("ИзмененыНастройкиУточненияСчетовУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	МассивВыделенныхСтрок = Элементы.ШаблоныПроводок.ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ЗаполнитьСчетаУчета(МассивВыделенныхСтрок, ВыбранноеЗначение);		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ШаблоныПроводокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ШаблоныПроводокШаблонПроводки Тогда
		ТекущиеДанные = ШаблоныПроводок.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ШаблонПроводки);
		ОткрытьФорму("Справочник.ШаблоныПроводокДляМеждународногоУчета.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	МассивВыделенныхСтрок = Элементы.ШаблоныПроводок.ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ПланСчетов.Международный.ФормаВыбора", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписатьСчетаУчета();
	Закрыть(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьСчетаУчета();
	Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокВидДвижения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.ВидДвижения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыДвиженийБухгалтерии.Дебет;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаДебета);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Дт';uk='Дт'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокВидДвижения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.ВидДвижения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыДвиженийБухгалтерии.Кредит;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаКредита);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Право);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Кт';uk='Кт'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокСчетПоУмолчанию.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокСчетПоУмолчаниюНаименование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.ШаблонПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокШаблонПроводки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.ШаблонПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокВидДвижения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокСчетУчета.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокСчетУчетаНаименование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.ШаблонПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ШаблоныПроводокСчетУчета.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.ШаблонПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблоныПроводок.СчетУчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Счет по умолчанию>';uk='<Рахунок по умовчанню>'"));

КонецПроцедуры

&НаСервере
Процедура ПоказатьСчетаУчета()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаУточненияСчетов.ШаблонПроводки КАК ШаблонПроводки,
	|	ПравилаУточненияСчетов.ВидДвижения КАК ВидДвижения,
	|	ПравилаУточненияСчетов.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ПравилаУточенияСчетов
	|ИЗ
	|	РегистрСведений.ПравилаУточненияСчетовВМеждународномУчете КАК ПравилаУточненияСчетов
	|ГДЕ
	|	ПравилаУточненияСчетов.ГруппаФинансовогоУчета = &ГруппаФинансовогоУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка КАК ШаблонПроводки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Дебет) КАК ВидДвижения,
	|	ШаблоныПроводок.СчетДебетаПоУмолчанию КАК СчетПоУмолчанию,
	|	ПравилаУточенияСчетов.СчетУчета КАК СчетУчета
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПравилаУточенияСчетов КАК ПравилаУточенияСчетов
	|	ПО
	|		(ПравилаУточенияСчетов.ШаблонПроводки = ШаблоныПроводок.Ссылка)
	|		И (ПравилаУточенияСчетов.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Дебет))
	|ГДЕ
	|	ШаблоныПроводок.ТипИсточникаУточненияСчетаДт В (&ТипыИсточниковУточненияСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит),
	|	ШаблоныПроводок.СчетКредитаПоУмолчанию,
	|	ПравилаУточенияСчетов.СчетУчета
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПравилаУточенияСчетов КАК ПравилаУточенияСчетов
	|	ПО 
	|		(ПравилаУточенияСчетов.ШаблонПроводки = ШаблоныПроводок.Ссылка)
	|		И (ПравилаУточенияСчетов.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит))
	|ГДЕ
	|	ШаблоныПроводок.ТипИсточникаУточненияСчетаКт В (&ТипыИсточниковУточненияСчета)
	|ИТОГИ ПО
	|	СчетПоУмолчанию";
	
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("ТипыИсточниковУточненияСчета", МеждународныйУчетКлиентСервер.ТипыИсточниковУточненияСчета(ГруппаФинансовогоУчета));
	
	ДеревоСчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗначениеВРеквизитФормы(ДеревоСчетов, "ШаблоныПроводок");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСчетаУчета()

	НаборЗаписей = РегистрыСведений.ПравилаУточненияСчетовВМеждународномУчете.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ГруппаФинансовогоУчета.Установить(ГруппаФинансовогоУчета);
	СчетаПоУмолчанию = ШаблоныПроводок.ПолучитьЭлементы();
	Для каждого  Строка из СчетаПоУмолчанию Цикл
		ШаблоныПроводокПоСчету = Строка.ПолучитьЭлементы();
		Для каждого ШаблонПроводки Из ШаблоныПроводокПоСчету Цикл
			Если ЗначениеЗаполнено(ШаблонПроводки.СчетУчета) Тогда
	 			НоваяЗапись	= НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ШаблонПроводки);
				НоваяЗапись.ГруппаФинансовогоУчета = ГруппаФинансовогоУчета;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	НаборЗаписей.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСчетаУчета(МассивВыделенныхСтрок, СчетУчета)

	Для каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
		НайденнаяСтрока = ШаблоныПроводок.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ЗначениеЗаполнено(НайденнаяСтрока.ШаблонПроводки) Тогда
			НайденнаяСтрока.СчетУчета = СчетУчета;
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьВидимостьЭлементовНаСервере()

	ДоступноИзменениеНастроекМФУ = МеждународныйУчетОбщегоНазначения.ДоступноИзменениеНастроекМеждународногоУчета();
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ФормаЗаписатьИЗакрыть");
	МассивЭлементов.Добавить("ШаблоныПроводок");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", НЕ ДоступноИзменениеНастроекМФУ);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ШаблоныПроводокИзменитьВыделенные");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", ДоступноИзменениеНастроекМФУ);

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоШаблоновПроводок() Экспорт

	ЭлементыДерева = ШаблоныПроводок.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.ШаблоныПроводок.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Ложь); 	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
