#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Отмечает изменение статуса проверки документа.
//	Входные параметры:
//		МассивДокументов - ссылка на документ или массив документов, являющийся измерением регистра "Статусы проверки документов"
//		ДанныеОшибок - Соответствие (если не задано - данные об ошибках не фиксируются)
//			ДанныеОшибок.Ключ - ДокументСсылка - ссылка на документ, статус проверки которого изменяется;
//			ДанныеОшибок.Значение - Строка - выводимая пользователю информация об ошибке;
//		Проверен - Булево - истина - если ставится пометка что документ проверен и ложь в противном случае. Если необходимо поменять текущий статус можно не указывать значение данного параметра.
//
Процедура УстановитьСтатусПроверкиДокументов(Знач МассивДокументов, ДанныеОшибок = Неопределено, ДокументПроверен = Неопределено) Экспорт
	
	ФиксироватьОшибки = Не ДанныеОшибок = Неопределено;
	
	Если Не ТипЗнч(МассивДокументов) = Тип("Массив") Тогда
		Документ = МассивДокументов;
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Документ);
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтатусыПроверкиДокументов) Тогда
		Если ФиксироватьОшибки Тогда
			ДанныеОшибок.Вставить(МассивДокументов.Получить(0), НСтр("ru='У пользователя не достаточно прав для изменения данных о проверке документов';uk='У користувача недостатньо прав для зміни даних про перевірку документів'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТекстОшибкиДокумента = НСтр("ru='Недоступно изменение статуса проверки документа %1.
                                |Возможно с документом работают другие пользователи.'
                                |;uk='Недоступна зміна статусу перевірки документа %1.
                                |Можливо з документом працюють інші користувачі.'");
	
	ТаблицаДокументов = ИнициализироватьТаблицуДокументов(МассивДокументов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДокументов.Документ КАК Документ
	               |ПОМЕСТИТЬ ТаблицаДокументов
	               |ИЗ
	               |	&ТаблицаДокументов КАК ТаблицаДокументов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокументов.Документ КАК Документ,
	               |	СтатусыПроверкиДокументов.Организация,
	               |	СтатусыПроверкиДокументов.СтатусПроверки КАК СтатусПроверкиСтарый,
	               |	ВЫБОР
	               |		КОГДА ВЫБОР
	               |				КОГДА &НовыйСтатусПроверки = НЕОПРЕДЕЛЕНО
	               |					ТОГДА ВЫБОР
	               |							КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |								ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
	               |							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |						КОНЕЦ
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА &НовыйСтатусПроверки = ИСТИНА
	               |							ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |						ИНАЧЕ ВЫБОР
	               |								КОГДА ЕСТЬNULL(СтатусыПроверкиДокументов.СтатусПроверки, ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |									ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
	               |								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)
	               |							КОНЕЦ
	               |					КОНЕЦ
	               |			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |			ТОГДА &ТекущийПользователь
	               |		ИНАЧЕ СтатусыПроверкиДокументов.Проверил
	               |	КОНЕЦ КАК Проверил,
	               |	ВЫБОР
	               |		КОГДА ВЫБОР
	               |				КОГДА &НовыйСтатусПроверки = НЕОПРЕДЕЛЕНО
	               |					ТОГДА ВЫБОР
	               |							КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |								ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
	               |							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |						КОНЕЦ
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА &НовыйСтатусПроверки = ИСТИНА
	               |							ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |						ИНАЧЕ ВЫБОР
	               |								КОГДА ЕСТЬNULL(СтатусыПроверкиДокументов.СтатусПроверки, ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |									ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
	               |								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)
	               |							КОНЕЦ
	               |					КОНЕЦ
	               |			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |			ТОГДА &ТекущаяДата
	               |		ИНАЧЕ СтатусыПроверкиДокументов.ДатаПроверки
	               |	КОНЕЦ КАК ДатаПроверки,
	               |	ВЫБОР
	               |		КОГДА ВЫБОР
	               |				КОГДА &НовыйСтатусПроверки = НЕОПРЕДЕЛЕНО
	               |					ТОГДА ВЫБОР
	               |							КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |								ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
	               |							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |						КОНЕЦ
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА &НовыйСтатусПроверки = ИСТИНА
	               |							ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |						ИНАЧЕ ВЫБОР
	               |								КОГДА ЕСТЬNULL(СтатусыПроверкиДокументов.СтатусПроверки, ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |									ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
	               |								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)
	               |							КОНЕЦ
	               |					КОНЕЦ
	               |			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |			ТОГДА СтатусыПроверкиДокументов.Изменил
	               |		ИНАЧЕ &ТекущийПользователь
	               |	КОНЕЦ КАК Изменил,
	               |	ВЫБОР
	               |		КОГДА ВЫБОР
	               |				КОГДА &НовыйСтатусПроверки = НЕОПРЕДЕЛЕНО
	               |					ТОГДА ВЫБОР
	               |							КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |								ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
	               |							ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |						КОНЕЦ
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА &НовыйСтатусПроверки = ИСТИНА
	               |							ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |						ИНАЧЕ ВЫБОР
	               |								КОГДА ЕСТЬNULL(СтатусыПроверкиДокументов.СтатусПроверки, ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |									ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
	               |								ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)
	               |							КОНЕЦ
	               |					КОНЕЦ
	               |			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |			ТОГДА СтатусыПроверкиДокументов.ДатаИзменения
	               |		ИНАЧЕ &ТекущаяДата
	               |	КОНЕЦ КАК ДатаИзменения,
	               |	ВЫБОР
	               |		КОГДА &НовыйСтатусПроверки = НЕОПРЕДЕЛЕНО
	               |			ТОГДА ВЫБОР
	               |					КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |						ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
	               |					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА &НовыйСтатусПроверки = ИСТИНА
	               |					ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА ЕСТЬNULL(СтатусыПроверкиДокументов.СтатусПроверки, ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)) = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)
	               |							ТОГДА ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен)
	               |						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
	               |					КОНЕЦ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК СтатусПроверки,
	               |	ВЫБОР
	               |		КОГДА СтатусыПроверкиДокументов.Организация ЕСТЬ NULL 
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДанныхПоДокументуНетВРегистре
	               |ПОМЕСТИТЬ ТаблицаДанных
	               |ИЗ
	               |	ТаблицаДокументов КАК ТаблицаДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПроверкиДокументов КАК СтатусыПроверкиДокументов
	               |		ПО ТаблицаДокументов.Документ = СтатусыПроверкиДокументов.Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДанных.Документ КАК Документ,
	               |	ТаблицаДанных.Организация,
	               |	ТаблицаДанных.Проверил,
	               |	ТаблицаДанных.ДатаПроверки,
	               |	ТаблицаДанных.Изменил,
	               |	ТаблицаДанных.ДатаИзменения,
	               |	ТаблицаДанных.СтатусПроверки
	               |ИЗ
	               |	ТаблицаДанных КАК ТаблицаДанных
	               |ГДЕ
	               |	НЕ ТаблицаДанных.ДанныхПоДокументуНетВРегистре
	               |ИТОГИ ПО
	               |	Документ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДанных.Документ,
	               |	ТИПЗНАЧЕНИЯ(ТаблицаДанных.Документ) КАК ТипДокумента,
	               |	ТаблицаДанных.Проверил,
	               |	ТаблицаДанных.ДатаПроверки,
	               |	ТаблицаДанных.Изменил,
	               |	ТаблицаДанных.ДатаИзменения,
	               |	ТаблицаДанных.СтатусПроверки
	               |ИЗ
	               |	ТаблицаДанных КАК ТаблицаДанных
	               |ГДЕ
	               |	ТаблицаДанных.ДанныхПоДокументуНетВРегистре
	               |ИТОГИ ПО
	               |	ТипДокумента";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.УстановитьПараметр("НовыйСтатусПроверки", ДокументПроверен);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтатусыПроверкиДокумента = РегистрыСведений.СтатусыПроверкиДокументов.СоздатьНаборЗаписей();
	ПараметрыБлокировки	= Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрСведений", "СтатусыПроверкиДокументов");
	
	// Запишем изменения для документов, данные по которым ранее заносились в регистр:	
	ВыборкаПоДокументам = Результат.Получить(2).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
					
			ЗначенияБлокировки	= Новый Структура("Документ", ВыборкаПоДокументам.Документ);
			ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки);
			
			ЗаблокироватьДанныеДляРедактирования(ВыборкаПоДокументам.Документ);
			
			СтатусыПроверкиДокумента.Очистить();
			СтатусыПроверкиДокумента.Отбор.Документ.Установить(ВыборкаПоДокументам.Документ);
			
			Выборка = ВыборкаПоДокументам.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ЗаписьРегистра = СтатусыПроверкиДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
				
			КонецЦикла;
			
			СтатусыПроверкиДокумента.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если ФиксироватьОшибки Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиДокумента, ВыборкаПоДокументам.Документ);
				ДанныеОшибок.Вставить(ВыборкаПоДокументам.Документ, ТекстОшибки);
			КонецЕсли;
			
		КонецПопытки;
		
		РазблокироватьДанныеДляРедактирования(ВыборкаПоДокументам.Документ);
		
	КонецЦикла;
	
	// Запишем изменения для документов, данных по которым не было в регистре, с дополнительным запросом по организациям:
	Если Не Результат.Получить(3).Пустой() Тогда
		
		ВыборкаПоТипамДокументов = Результат.Получить(3).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоТипамДокументов.Следующий() Цикл
			
			Выборка = ВыборкаПоТипамДокументов.Выбрать();
			
			МассивДокументовДляПолученияОрганизаций = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
				МассивДокументовДляПолученияОрганизаций.Добавить(Выборка.Документ);
			КонецЦикла;
			
			РеквизитыОрганизации = ОбщегоНазначения.ИменаРеквизитовПоТипу(МассивДокументовДляПолученияОрганизаций.Получить(0), Тип("СправочникСсылка.Организации"));
			
			Если ЗначениеЗаполнено(РеквизитыОрганизации) Тогда
				
				ДанныеПоОрганизациям = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДокументовДляПолученияОрганизаций, РеквизитыОрганизации);
				
				Выборка.Сбросить();
				
				Пока Выборка.Следующий() Цикл
					
					НачатьТранзакцию();
					
					Попытка
					
						ЗначенияБлокировки	= Новый Структура("Документ", Выборка.Документ);
						ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки);
						
						ЗаблокироватьДанныеДляРедактирования(Выборка.Документ);
						
						СтатусыПроверкиДокумента.Очистить();
						СтатусыПроверкиДокумента.Отбор.Документ.Установить(Выборка.Документ);
						
						ДанныеОрганизаций = ДанныеПоОрганизациям.Получить(Выборка.Документ);
						МассивЗаписанныхОрганизаций = Новый Массив; // чтобы одна и та же организация не записывалась несколько раз.
						
						Для каждого Организация из ДанныеОрганизаций Цикл
							
							Если МассивЗаписанныхОрганизаций.Найти(Организация.Значение) = Неопределено
								И ЗначениеЗаполнено(Организация.Значение) И ТипЗнч(Организация.Значение) = Тип("СправочникСсылка.Организации") Тогда
								
								ЗаписьРегистра = СтатусыПроверкиДокумента.Добавить();
							   	ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
								ЗаписьРегистра.Организация = Организация.Значение;
								
								МассивЗаписанныхОрганизаций.Добавить(Организация.Значение);
								
							КонецЕсли;
							
						КонецЦикла;
						
						СтатусыПроверкиДокумента.Записать();
						
						ЗафиксироватьТранзакцию();
						
					Исключение
			
						ОтменитьТранзакцию();
						
						Если ФиксироватьОшибки Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиДокумента, Выборка.Документ);
							ДанныеОшибок.Вставить(ВыборкаПоДокументам.Документ, ТекстОшибки);
						КонецЕсли;
						
					КонецПопытки;
					
					РазблокироватьДанныеДляРедактирования(Выборка.Документ);
					
				КонецЦикла;
				
			Иначе
				
				Выборка.Сбросить();
				
				Пока Выборка.Следующий() Цикл
					
					НачатьТранзакцию();
					
					Попытка
						
						ЗначенияБлокировки	= Новый Структура("Документ", Выборка.Документ);
						ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки);
						
						ЗаблокироватьДанныеДляРедактирования(Выборка.Документ);
						
						СтатусыПроверкиДокумента.Очистить();
						СтатусыПроверкиДокумента.Отбор.Документ.Установить(Выборка.Документ);
						
						ЗаписьРегистра = СтатусыПроверкиДокумента.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
						ЗаписьРегистра.Организация = Справочники.Организации.ПустаяСсылка();
						СтатусыПроверкиДокумента.Записать();
						
						ЗафиксироватьТранзакцию();
					
					Исключение
			
						ОтменитьТранзакцию();
						
						Если ФиксироватьОшибки Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиДокумента, Выборка.Документ);
							ДанныеОшибок.Вставить(ВыборкаПоДокументам.Документ, ТекстОшибки);
						КонецЕсли;
						
					КонецПопытки;
					
					РазблокироватьДанныеДляРедактирования(Выборка.Документ);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

// Получает данные о проверке документа.
//
//	Параметры:
//		ДокументСсылка - ссылка на документ, для которого необходимо получить данные о проверке.
//
//	ВозвращаемоеЗначение:
//		Структура - содержит следующие данные:
//			СтатусПроверки - ПеречислениеСсылка.ЭтапыПроверкиДокументаВРеглУчете - текущий статус проверки документа;
//			Проверен - Булево - признак проверки документа, если данных о проверке данного документа в базе нет - возвращает ложь.
//			Проверил - СправочникСсылка.Пользователи - последний пользователь, кто проверял документ, если никто не проверял - пустая ссылка;
//			ДатаПроверки - Дата и время - дата и время последней проверки документа.
//
Функция ПолучитьДанныеПроверкиДокумента(ДокументСсылка) Экспорт
	
	СтруктураВозврата = Новый Структура("СтатусПроверки, Проверен, Проверил, ДатаПроверки");
	СтруктураВозврата.Вставить("СтатусПроверки", Перечисления.ЭтапыПроверкиДокументаВРеглУчете.ПустаяСсылка());
	СтруктураВозврата.Вставить("Проверен", Ложь);
	СтруктураВозврата.Вставить("БылПроверен", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	               |	СтатусыПроверкиДокументов.Организация КАК Организация,
	               |	СтатусыПроверкиДокументов.Документ КАК Документ,
	               |	СтатусыПроверкиДокументов.Проверил КАК Проверил,
	               |	СтатусыПроверкиДокументов.ДатаПроверки КАК ДатаПроверки,
	               |	СтатусыПроверкиДокументов.СтатусПроверки КАК СтатусПроверки,
	               |	ВЫБОР
	               |		КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Проверен,
	               |	ВЫБОР
	               |		КОГДА СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)
	               |				ИЛИ СтатусыПроверкиДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК БылПроверен
	               |ИЗ
	               |	РегистрСведений.СтатусыПроверкиДокументов КАК СтатусыПроверкиДокументов
	               |ГДЕ
	               |	СтатусыПроверкиДокументов.Документ = &Документ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Проверен УБЫВ";
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Устанавливает статус "Не проверен" для новых документов или отменяет проверку документу, если документ ранее был изменен.
//
//	Параметры:
//		ДокументСсылка - ссылка на документ, для которого происходит запись статуса;
//		Организации - массив - массив организаций, для которых необходимо отразить запись о проверке документа в регистре, см. ПроверкаДокументовСервер.ПолучитьМассивОрганизацийДокумента;
//		ДанныеПроверки - структура с данными о проверке документа, см. ПолучитьДанныеПроверкиДокумента.
//
Процедура УстановитьСтатусПроверкиДокументаПриЗаписи(ДокументСсылка, Организации, ДанныеПроверки) Экспорт
	
	ПроверкаДокументов = РегистрыСведений.СтатусыПроверкиДокументов.СоздатьНаборЗаписей();
	ПроверкаДокументов.Отбор.Документ.Установить(ДокументСсылка);
	ПроверкаДокументов.Очистить();
	
	Для каждого Организация из Организации Цикл
		
		ЗаписьСтатусаПроверки = ПроверкаДокументов.Добавить();
	
		ЗаписьСтатусаПроверки.Документ = ДокументСсылка;
		ЗаписьСтатусаПроверки.Организация = Организация;
		
		ЗаписьСтатусаПроверки.ДатаИзменения = ТекущаяДатаСеанса();
		ЗаписьСтатусаПроверки.Изменил = Пользователи.ТекущийПользователь();
		ЗаписьСтатусаПроверки.СтатусПроверки = ?(ДанныеПроверки.БылПроверен, Перечисления.ЭтапыПроверкиДокументаВРеглУчете.КПовторнойПроверке, Перечисления.ЭтапыПроверкиДокументаВРеглУчете.НеПроверен);
		ЗаписьСтатусаПроверки.Проверил = ДанныеПроверки.Проверил;
		ЗаписьСтатусаПроверки.ДатаПроверки = ДанныеПроверки.ДатаПроверки;
		
	КонецЦикла;
	
	ПроверкаДокументов.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализироватьТаблицуДокументов(ИсходныйМассивДокументов)
	
	НаборЗаписей = РегистрыСведений.СтатусыПроверкиДокументов.СоздатьНаборЗаписей();
	ТаблицаВозврата = НаборЗаписей.ВыгрузитьКолонки("Документ");
	
	Для ТекущийИндекс = 1 по ИсходныйМассивДокументов.Количество() Цикл
		ТаблицаВозврата.Добавить();
	КонецЦикла;
	
	ТаблицаВозврата.ЗагрузитьКолонку(ИсходныйМассивДокументов, "Документ");
	
	Возврат ТаблицаВозврата;
	
КонецФункции

#КонецОбласти

#КонецЕсли