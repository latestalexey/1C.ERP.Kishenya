
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	СтатусЛиквидирован = Перечисления.СтатусыОбъектовЭксплуатации.Ликвидирован;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Ложь);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;
	
	Если Параметры.Свойство("СообщитьОбОшибках") И Параметры.СообщитьОбОшибках Тогда
		
		ВыполнитьПроверкуЗаполненияНаСервере();
		
	КонецЕсли;
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ТекущийОбъект.ПараметрыУчетаНаработок.Загрузить(
		ПараметрыУчетаНаработок.Выгрузить( , "ПоказательНаработки, НазначенныйРесурс, Источник"));

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьПараметрыУчетаНаработок(ТекущийОбъект.ПараметрыУчетаНаработок, ТекущийОбъект.Класс);
	
	УстановитьДоступностьЭлементовНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры  

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Редактируется Или ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		ТекстВопроса = НСтр("ru='Объект эксплуатации ""%Объект%"" не редактируется.
            |Для изменения состава узлов потребуется разблокировать объект для изменения.'
            |;uk='Об''єкт експлуатації ""%Объект%"" не редагується.
            |Для зміни складу вузлів потрібно розблокувати об''єкт для зміни.'");
		
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Объект%", Объект.Владелец);
		
		ВариантыОтветов = Новый СписокЗначений;
		ВариантыОтветов.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Разблокировать объект';uk='Розблокувати об''єкт'"));
		ВариантыОтветов.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена';uk='Відмінити'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВопросПриОткрытииЗавершение", ЭтаФорма),
			ТекстВопроса,
			ВариантыОтветов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриОткрытииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ЕстьОшибки = Ложь;
		РазблокироватьОбъектЭксплуатации(Объект.Владелец, ЕстьОшибки);
		Если ЕстьОшибки Тогда
			Закрыть();
		Иначе
			Оповестить("РазблокировкаОбъектаЭксплуатации", Новый Структура("ОбъектЭксплуатации", Объект.Владелец));
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РазблокировкаОбъектаЭксплуатации" И Параметр.ОбъектЭксплуатации = Объект.Владелец Тогда
		
		Редактируется = Истина;
		УстановитьДоступностьЭлементовНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Элементы.НаименованиеПолное.СписокВыбора.Очистить();
	Элементы.НаименованиеПолное.СписокВыбора.Добавить(Объект.Наименование);
	
	Если Не ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	РодительПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РодительПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		СтатусРодителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Родитель, "Статус");
		РодительЛиквидирован = (СтатусРодителя = Перечисления.СтатусыОбъектовЭксплуатации.Ликвидирован);
		Если РодительЛиквидирован Тогда
			Объект.Статус = СтатусРодителя;
		КонецЕсли;
		
	Иначе
		РодительЛиквидирован = Ложь;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КлассПриИзменении(Элемент)
	
	КлассПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КлассПриИзмененииНаСервере()
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	Если ЗначениеЗаполнено(Объект.Класс) Тогда
		ИспользуютсяПодклассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Класс, "ИспользуютсяПодклассы");
		СоставРеквизитов.Загрузить(СоставРеквизитовПоКлассуОбъектаЭксплуатации());
	Иначе
		ИспользуютсяПодклассы = Ложь;
		СоставРеквизитов.Загрузить(Справочники.УзлыОбъектовЭксплуатации.СоставРеквизитов());
	КонецЕсли;
	
	ЗаполнитьПараметрыУчетаНаработок(Объект.ПараметрыУчетаНаработок, Объект.Класс);
	
	УстановитьДоступностьЭлементовНаСервере();
	ЗаполнитьУсловноеОформлениеФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиПараметрыУчетаНаработок

&НаКлиенте
Процедура ПараметрыУчетаНаработокОбъектФормыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыУчетаНаработок.ТекущиеДанные;
	ТекущиеДанные.Источник = ТекущиеДанные.ОбъектФормы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыУчетаНаработокУзелФормыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыУчетаНаработок.ТекущиеДанные;
	ТекущиеДанные.Источник = ?(
		ЗначениеЗаполнено(ТекущиеДанные.УзелФормы),
		ТекущиеДанные.УзелФормы,
		ТекущиеДанные.ОбъектФормы);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьПроверкуЗаполнения(Команда)
	
	Отказ = Ложь;
	ВыполнитьПроверкуЗаполненияНаСервере(Отказ);
	
	Если Не Отказ Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Проверка выполнена';uk='Перевірка виконана'"),
			,
			НСтр("ru='Ошибок заполнения реквизитов не обнаружено';uk='Помилок заповнення реквізитів не виявлено'"),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПараметрыУчетаНаработокНазначенныйРесурс.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработок.ЗаполнятьНазначенныйРесурс");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='< не требуется >';uk='< не потрібно >'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПараметрыУчетаНаработокНазначенныйРесурс.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработок.ЗаполнятьНазначенныйРесурс");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработок.НазначенныйРесурс");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработокОбъектФормы");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработокУзелФормы");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработок.ЗаполнятьИсточник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='< не требуется >';uk='< не потрібно >'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработокОбъектФормы");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработокУзелФормы");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработок.ЗаполнятьИсточник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПараметрыУчетаНаработок.Источник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

// Обработчик события при создании и чтении на сервере
//
&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	Элементы.НаименованиеПолное.СписокВыбора.Очистить();
	Элементы.НаименованиеПолное.СписокВыбора.Добавить(Объект.Наименование);
	
	ЗаполнитьПараметрыОтображения(Объект);
	
	ЗаполнитьПараметрыУчетаНаработок(Объект.ПараметрыУчетаНаработок, Объект.Класс);
	
	УстановитьДоступностьЭлементовНаСервере();
	КоличествоЭлемнтовСтандартногоОформления = УсловноеОформление.Элементы.Количество();
	ЗаполнитьУсловноеОформлениеФормы();
	
КонецПроцедуры

// Процедура обновления элементов дополнительных реквизитов объекта в форме
//
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

// Обработка установки доступности элементов формы
//
&НаСервере
Процедура УстановитьДоступностьЭлементовНаСервере()
	
	РазрешитьРедактирование = Не ВладелецЛиквидирован И Редактируется;
	
	МассивЭлементов = Новый Массив();
	// Основные реквизиты
	МассивЭлементов.Добавить("Владелец");
	МассивЭлементов.Добавить("Родитель");
	МассивЭлементов.Добавить("Наименование");
	МассивЭлементов.Добавить("Код");
	МассивЭлементов.Добавить("Статус");
	МассивЭлементов.Добавить("ВлияетНаДоступностьРЦ");
	МассивЭлементов.Добавить("НаименованиеПолное");
	МассивЭлементов.Добавить("ГруппаОсновныеРеквизиты");
	МассивЭлементов.Добавить("Описание");
	
	// Табличные части
	МассивЭлементов.Добавить("РабочиеЦентры");
	МассивЭлементов.Добавить("ПараметрыУчетаНаработок");
	
	// Дополнительные реквизиты
	МассивЭлементов.Добавить("ГруппаДополнительныеРеквизиты");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Не РазрешитьРедактирование);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Подкласс", "Видимость", ИспользуютсяПодклассы);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Статус", "Доступность", Не РодительЛиквидирован);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаПараметрыУчетаНаработок", "Видимость", ПараметрыУчетаНаработок.Количество()>0);	
	
	Если Не ЗначениеЗаполнено(Объект.Владелец) Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Владелец", "Доступность", Истина);
	КонецЕсли;
	
	Элементы.КоманднаяПанельСтатуса.Видимость = ДоступныКомандыСтатуса;
	
	Элементы.ГруппаСтатус.Видимость = Не ВладелецЛиквидирован;
	Элементы.СтатусЛиквидирован.Видимость = ВладелецЛиквидирован;
	
КонецПроцедуры

// Возвращает структуру с параметрами отображения элемента справочника в форме
//
&НаСервере
Процедура ЗаполнитьПараметрыОтображения(ОбъектЗаполнения)
	
	Если ЗначениеЗаполнено(ОбъектЗаполнения.Владелец) Тогда
		СтатусВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектЗаполнения.Владелец, "Статус");
		Редактируется = (СтатусВладельца = Перечисления.СтатусыОбъектовЭксплуатации.Редактируется);
		ВладелецЛиквидирован = (СтатусВладельца = Перечисления.СтатусыОбъектовЭксплуатации.Ликвидирован);
		
	Иначе
		Редактируется = Ложь;
		ВладелецЛиквидирован = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектЗаполнения.Класс) Тогда
		ИспользуютсяПодклассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектЗаполнения.Класс, "ИспользуютсяПодклассы");
		СоставРеквизитов.Загрузить(СоставРеквизитовПоКлассуОбъектаЭксплуатации());
	Иначе
		ИспользуютсяПодклассы = Ложь;
		СоставРеквизитов.Загрузить(Справочники.УзлыОбъектовЭксплуатации.СоставРеквизитов());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектЗаполнения.Родитель) Тогда
		РодительЛиквидирован = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектЗаполнения.Родитель, "Статус") = Перечисления.СтатусыОбъектовЭксплуатации.Ликвидирован);
		
	Иначе
		РодительЛиквидирован = Ложь;
		
	КонецЕсли;
	
	ДоступныКомандыСтатуса = ПравоДоступа("Изменение", Метаданные.Справочники.УзлыОбъектовЭксплуатации);
	
КонецПроцедуры

&НаСервере
Функция СоставРеквизитовПоКлассуОбъектаЭксплуатации()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СоставРеквизитов.Имя КАК СТРОКА(255)) КАК Имя,
		|	ВЫРАЗИТЬ(СоставРеквизитов.Синоним КАК СТРОКА(255)) КАК Синоним,
		|	ВЫРАЗИТЬ(СоставРеквизитов.ОбязателенДляЗаполнения КАК БУЛЕВО) КАК ОбязателенДляЗаполнения,
		|	ВЫРАЗИТЬ(СоставРеквизитов.ТолькоПросмотрОбязательности КАК БУЛЕВО) КАК ТолькоПросмотрОбязательности
		|ПОМЕСТИТЬ РеквизитыОбъектов
		|ИЗ
		|	&СоставРеквизитовОбъекта КАК СоставРеквизитов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Реквизиты.ИмяРеквизита КАК Имя,
		|	Реквизиты.ОбязателенДляЗаполнения КАК ОбязателенДляЗаполнения
		|ПОМЕСТИТЬ РеквизитыОбъектовКласса
		|ИЗ
		|	Справочник.КлассыОбъектовЭксплуатации.РеквизитыДляКонтроля КАК Реквизиты
		|ГДЕ
		|	Реквизиты.Ссылка = &Класс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Реквизиты.Имя, РеквизитыДляКонтроляОбъектов.Имя) КАК Имя,
		|	ЕСТЬNULL(Реквизиты.ОбязателенДляЗаполнения, ЛОЖЬ) КАК ОбязателенДляЗаполнения
		|ИЗ
		|	РеквизитыОбъектовКласса КАК Реквизиты
		|		ПОЛНОЕ СОЕДИНЕНИЕ РеквизитыОбъектов КАК РеквизитыДляКонтроляОбъектов
		|		ПО Реквизиты.Имя = РеквизитыДляКонтроляОбъектов.Имя");
	Запрос.УстановитьПараметр("СоставРеквизитовОбъекта", Справочники.ОбъектыЭксплуатации.СоставРеквизитов());
	Запрос.УстановитьПараметр("Класс", Объект.Класс);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУсловноеОформлениеФормы()
	
	ЭлементыОформления = ЭтаФорма.УсловноеОформление.Элементы;
	Пока ЭлементыОформления.Количество() > КоличествоЭлемнтовСтандартногоОформления Цикл
		ЭлементыОформления.Удалить(ЭлементыОформления.Получить(ЭлементыОформления.Количество()-1));
		
	КонецЦикла;
	
	Для Каждого Реквизит Из СоставРеквизитов Цикл
		
		Имя = СокрЛП(Реквизит.Имя);
		
		Элемент = ЭлементыОформления.Добавить();
		
		Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + Имя);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Отбор.Использование = Истина;
		Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Редактируется");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = Истина;
		Отбор.Использование = Истина;
		
		ОтметкаНезаполненного = Элемент.Оформление.Элементы.Найти("ОтметкаНезаполненного");
		ОтметкаНезаполненного.Значение = Реквизит.ОбязателенДляЗаполнения;
		ОтметкаНезаполненного.Использование = Истина;
		
		ПолеОформления = Элемент.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Имя);
		ПолеОформления.Использование = Истина;
		
		Элемент = ЭлементыОформления.Добавить();
		
		Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + Имя);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Отбор.Использование = Истина;
		
		ОтметкаНезаполненного = Элемент.Оформление.Элементы.Найти("ОтметкаНезаполненного");
		ОтметкаНезаполненного.Значение = Ложь;
		ОтметкаНезаполненного.Использование = Истина;
		
		ПолеОформления = Элемент.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(Имя);
		ПолеОформления.Использование = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверки заполнения
//
&НаСервере
Процедура ВыполнитьПроверкуЗаполненияНаСервере(Отказ=Ложь)
	
	ПараметрыПроверки = Справочники.УзлыОбъектовЭксплуатации.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.Форма = ЭтаФорма;
	ПараметрыПроверки.СообщатьОшибки = Ложь;
	
	Справочники.УзлыОбъектовЭксплуатации.ПроверитьЗаполнение(Объект, ПараметрыПроверки, Отказ);
	
	ОбъектыЭксплуатации.СообщитьОшибкиПроверкиЗаполнения(ПараметрыПроверки.ПотокОшибок, Отказ);
	
КонецПроцедуры

// Заполняет таблицу параметров учета наработки по данным выбранного класса и текущих заполненных значений
//
&НаСервере
Процедура ЗаполнитьПараметрыУчетаНаработок(ТаблицаЗаполнения, КлассЗаполнения)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаЗаполнения.ПоказательНаработки,
		|	ТаблицаЗаполнения.НазначенныйРесурс,
		|	ТаблицаЗаполнения.Источник
		|ПОМЕСТИТЬ ТаблицаЗаполнения
		|ИЗ
		|	&ТаблицаЗаполнения КАК ТаблицаЗаполнения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиНаработкиПоКлассификации.ПоказательНаработки КАК ПоказательНаработки,
		|	ТаблицаЗаполнения.НазначенныйРесурс КАК НазначенныйРесурс,
		|	ТаблицаЗаполнения.Источник КАК Источник,
		|	ЕСТЬNULL(Объекты.Ссылка, Узлы.Владелец) КАК ОбъектФормы,
		|	ЕСТЬNULL(Узлы.Ссылка, НЕОПРЕДЕЛЕНО) КАК УзелФормы,
		|	ПоказателиНаработкиПоКлассификации.РасчитыватьОстаточныйРесурс КАК ЗаполнятьНазначенныйРесурс,
		|	ПоказателиНаработкиПоКлассификации.РегистрироватьОтИсточника КАК ЗаполнятьИсточник
		|ИЗ
		|	Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК ПоказателиНаработкиПоКлассификации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗаполнения КАК ТаблицаЗаполнения
		|		ПО ПоказателиНаработкиПоКлассификации.ПоказательНаработки = ТаблицаЗаполнения.ПоказательНаработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК Объекты
		|		ПО (ТаблицаЗаполнения.Источник = Объекты.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УзлыОбъектовЭксплуатации КАК Узлы
		|		ПО (ТаблицаЗаполнения.Источник = Узлы.Ссылка)
		|ГДЕ
		|	ПоказателиНаработкиПоКлассификации.Ссылка = &Класс
		|	И (ПоказателиНаработкиПоКлассификации.РасчитыватьОстаточныйРесурс
		|			ИЛИ ПоказателиНаработкиПоКлассификации.РегистрироватьОтИсточника)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоказателиНаработкиПоКлассификации.НомерСтроки");
	
	Запрос.УстановитьПараметр("ТаблицаЗаполнения", ТаблицаЗаполнения.Выгрузить(, "ПоказательНаработки, НазначенныйРесурс, Источник"));
	Запрос.УстановитьПараметр("Класс", КлассЗаполнения);
	
	ПараметрыУчетаНаработок.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РазблокироватьОбъектЭксплуатации(ОбъектЭксплуатации, Отказ)
	
	Справочники.ОбъектыЭксплуатации.РазблокироватьОбъектЭксплуатации(ОбъектЭксплуатации, Отказ);
	
КонецПроцедуры

#КонецОбласти
