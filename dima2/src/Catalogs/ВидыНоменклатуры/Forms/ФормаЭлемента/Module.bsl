
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ОтказОткрытияФормы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ЦветТекстаФормы = ЦветаСтиля.ЦветТекстаФормы;
	
	УстановитьУсловноеОформление();
	
	ЕстьПравоРедактирования = НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Справочники.ГруппыДоступаНоменклатуры.ЕстьПравоИзменения(Объект);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЭтаФорма.ТолькоПросмотр = Не ЕстьПравоРедактирования;
		Элементы.ГруппаНаименованиеДляПечатиКолонки.ТолькоПросмотр = Не ЕстьПравоРедактирования;
		
	Иначе
		
		ПриЧтенииСозданииНаСервере();
		
		ТолькоОбщие = Ложь;
		
		Если Параметры.Свойство("ЗначениеКопирования") Тогда
		
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопРеквизитовНоменклатуры, 
				Параметры.ЗначениеКопирования.НаборСвойств, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие,
				"Реквизиты",
				ТолькоОбщие);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопРеквизитовХарактеристик, 
				Параметры.ЗначениеКопирования.НаборСвойствХарактеристик, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
				"Реквизиты",
				ТолькоОбщие);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопРеквизитовСерий, 
				Параметры.ЗначениеКопирования.НаборСвойствСерий, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
				"Реквизиты",
				ТолькоОбщие);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопСведенийНоменклатуры, 
				Параметры.ЗначениеКопирования.НаборСвойств, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие,
				"Сведения",
				ТолькоОбщие);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопСведенийХарактеристик, 
				Параметры.ЗначениеКопирования.НаборСвойствХарактеристик, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
				"Сведения",
				ТолькоОбщие);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопСведенийСерий, 
				Параметры.ЗначениеКопирования.НаборСвойствСерий, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
				"Сведения",
				ТолькоОбщие);
			
			//Заполнить дополнительные реквизиты для контроля.
			КоллекцияРеквизитовДляКонтроля = КоллекцияРеквизитовДляКонтроля(Объект, "Номенклатура");
			НеиспользуемыеДляКонтроляЗаполненияИОтборовРеквизиты = Справочники.Номенклатура.НеиспользуемыеДляКонтроляЗаполненияИОтборовРеквизиты();
			
			Для Каждого ДополнительныеРеквизиты Из Параметры.ЗначениеКопирования.НаборСвойств.ДополнительныеРеквизиты Цикл
				
				ДобавляемоеСвойство = ДополнительныеРеквизиты.Свойство;
				ТипЗначения = ДобавляемоеСвойство.ТипЗначения;
				НоваяСтрока = КоллекцияРеквизитовДляКонтроля.Добавить();
				
				НоваяСтрока.ИмяРеквизита = ДобавляемоеСвойство;
				НоваяСтрока.ПредставлениеРеквизита = Строка(ДобавляемоеСвойство);
				НоваяСтрока.Свойство = ДобавляемоеСвойство;
				НоваяСтрока.ЭтоДопРеквизит = Истина;
				НоваяСтрока.ОбязателенДляЗаполнения = ДобавляемоеСвойство.ЗаполнятьОбязательно;
				НоваяСтрока.ОтображатьПриСоздании = ДобавляемоеСвойство.ЗаполнятьОбязательно;
				
				УсловияДоступности = УсловияДоступности();
				УсловияДоступности.ЭтоДопРеквизит = Истина;
				УсловияДоступности.ЭтоНеиспользуемыйДляКонтроляТип = (НеиспользуемыеДляКонтроляЗаполненияИОтборовРеквизиты.Найти(ТипЗначения) <> Неопределено);
				УсловияДоступности.ТипРеквизитаБулево = (ТипЗначения =  Новый ОписаниеТипов("Булево"));
				УсловияДоступности.ЗаполнятьОбязательно = ДобавляемоеСвойство.ЗаполнятьОбязательно;
				
				УстановитьДоступностьНастройкиПолейРеквизитаДляКонтроля(НоваяСтрока, УсловияДоступности);
				
			КонецЦикла;
			
		КонецЕсли;
		
    КонецЕсли;
    
	НоменклатураКлиентСервер.ПроверитьЗаполнитьПустуюУпаковку(Объект, "ЕдиницаДляОтчетов");
	НоменклатураКлиентСервер.ПроверитьЗаполнитьПустуюУпаковку(Объект, "ЕдиницаИзмерения");
	
	УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтаФорма);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		ОтказОткрытияФормы = Истина;
		Возврат;
	КонецЕсли;
	
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	
	Если ИспользоватьИндивидуальноеНаименование = "ИспользоватьИндивидуальноеНаименование" Тогда
		Объект.ИспользоватьИндивидуальноеНаименованиеПриПечати = Истина;
	Иначе
		Объект.ИспользоватьИндивидуальноеНаименованиеПриПечати = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВидыНоменклатуры");
	Прочитать();
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопРеквизит", "Номенклатура");
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопРеквизит", "Характеристики");
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопРеквизит", "Серии");
	
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопСведение", "Номенклатура");
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопСведение", "Характеристики");
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопСведение", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборРеквизитовВТаблицуОтбора" Тогда
		
		// При подборе элемента в таблицу реквизитов отбора номенклатуры или характеристик.
		Отбор = Новый Структура("ИмяРеквизита, ЭтоДопРеквизит, Свойство");
		
		Если ТекущийТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			
			ТЧРеквизитовОтбора = Объект.РеквизитыБыстрогоОтбораНоменклатуры;
			
		ИначеЕсли ТекущийТипВладельцаНабораЭлементов = "Характеристики" Тогда
			
			ТЧРеквизитовОтбора = Объект.РеквизитыБыстрогоОтбораХарактеристик;
			
		КонецЕсли;
		
		Для каждого ПараметрыСтроки Из Параметр.МассивДобавляемых Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, ПараметрыСтроки);
			
			РеквизитНеНайден = (ТЧРеквизитовОтбора.НайтиСтроки(Отбор).Количество() = 0);
			
			Если РеквизитНеНайден Тогда
				
				НоваяСтрока = ТЧРеквизитовОтбора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыСтроки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
	ИначеЕсли ИмяСобытия = "Запись_НаборыДополнительныхРеквизитовИСведений"
	 ИЛИ ИмяСобытия = "Запись_ДополнительныеРеквизитыИСведения" Тогда
		
		// При записи набора доп.реквизитов (сведений), например: 
		// открыли форму редактирования общих доп.реквизитов (сведений) и записали его.
		ПриЗаписиНабораДополнительныхРеквизитовИСведенийНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьСлужебныеРеквизиты();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Перечисление.ТипыНоменклатуры.Форма.ВыборТипаНоменклатуры",
				Новый Структура("ТипНоменклатуры", Объект.ТипНоменклатуры),
				Элемент,
				,
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ТипНоменклатурыПриИзменении(Элемент)
	
	ТипНоменклатурыПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьХарактеристикиПриИзменении(Элемент)
	
	ИспользоватьХарактеристикиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеХарактеристикПриИзменении(Элемент)
	
	Если Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры") Тогда
		ВыбратьВидВладелец("Характеристик");
	Иначе
		Объект.ВладелецХарактеристик = Неопределено;
		НастроитьФорму();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТоварныхКатегорийПриИзменении(Элемент)
	Объект.ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры = 
		НастройкаТоварныхКатегорий = "ОбщиеСДругимВидомНоменклатуры";
	
	Если Объект.ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры Тогда
		ВыбратьВидВладелец("ТоварныхКатегорий");
	Иначе
		Объект.ВладелецТоварныхКатегорий = Неопределено;
		НастроитьФорму();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерииПриИзменении(Элемент)
	
	ИспользоватьСерииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИспользованияСерийПриИзменении(Элемент)
	
	Если Объект.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара")
		И Объект.ПолитикиУчетаСерий.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Для серий, которые используются для учета экземляров товаров, на складах могут быть назначены
        |только политики учета серий с типом ""%СправочноеУказаниеСерий%"". Политики с другими типами будут очищены. Продолжить?'
        |;uk='Для серій, які використовуються для обліку экземляров товарів, на складах можуть бути призначені
        |тільки політики обліку серій з типом ""%СправочноеУказаниеСерий%"". Політики з іншими типами будуть очищені. Продовжити?'");
		
		ТекстВопроса = СтрЗаменить(ТекстВопроса,"%СправочноеУказаниеСерий%", ПредопределенноеЗначение("Перечисление.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий"));
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("НастройкаИспользованияСерийПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ТекстВопроса", ТекстВопроса)), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
        Возврат;
		
	ИначеЕсли Объект.НастройкаИспользованияСерий <> ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоНомеруИСрокуГодности")
		И Объект.НастройкаИспользованияСерий <> ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоСрокуГодности")
		И Объект.ПолитикиУчетаСерий.Количество()> 0 Тогда
		
		ТекстВопроса = НСтр("ru='Настройка работы с сериями не предусматривает указания в сериях срока годности.
        |Из списка настроек учета серий будут удалены строки, в которых указаны политики учета серий 
        |с типами политики ""%СерииПоFEFO%"" и ""%СрокиГодностиПоПоступлению%"". Продолжить?'
        |;uk='Настройка роботи з серіями не передбачає зазначення в серіях терміну придатності.
        |Зі списку настройок обліку серій будуть вилучені рядки, в яких вказані політики обліку серій 
        |з типами політики ""%СерииПоFEFO%"" та ""%СрокиГодностиПоПоступлению%"". Продовжити?'");
		
		ТекстВопроса = СтрЗаменить(ТекстВопроса,"%СерииПоFEFO%", ПредопределенноеЗначение("Перечисление.ТипыПолитикУказанияСерий.УправлениеПоFEFOОстаткамиСерий"));
		ТекстВопроса = СтрЗаменить(ТекстВопроса,"%СрокиГодностиПоПоступлению%", ПредопределенноеЗначение("Перечисление.ТипыПолитикУказанияСерий.АвторасчетПоFEFOОстатковСерий"));
		
		ПоказатьВопрос(Новый ОписаниеОповещения("НастройкаИспользованияСерийПриИзмененииЗавершение", ЭтотОбъект), ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
        Возврат;
		
	КонецЕсли;
	
	НастройкаИспользованияСерийПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИспользованияСерийПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        УдалитьНеКорректныеПолитики();
    Иначе
        Объект.НастройкаИспользованияСерий = ТекущаяНастройкаИспользованияСерий;
    КонецЕсли;
    
    
    НастройкаИспользованияСерийПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура НастройкаИспользованияСерийПриИзмененииФрагмент()
	Объект.ИспользоватьСрокГодностиСерии = 
			Объект.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоСрокуГодности")
        Или Объект.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоНомеруИСрокуГодности");
    
 	Объект.ИспользоватьНомерСерии = 
			Объект.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоНомеру")
        Или Объект.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоНомеруИСрокуГодности")
        Или Объект.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара");
		
	Объект.ИспользоватьКоличествоСерии = Объект.НастройкаИспользованияСерий <> ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара"); 
		
   	ТекущаяНастройкаИспользованияСерий = Объект.НастройкаИспользованияСерий;
	
	НастроитьФорму();

КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	ЕдиницаИзмеренияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаДляОтчетовПриИзменении(Элемент)
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУпаковкиПриИзменении(Элемент)
	
	Если Не Объект.ИспользоватьУпаковки Тогда
		Объект.НаборУпаковок = Неопределено;
		ИспользованиеУпаковок = "";
	Иначе
		Объект.ПоставляетсяВМногооборотнойТаре  = Ложь;
		Объект.НоменклатураМногооборотнаяТара   = Неопределено;
		Объект.ХарактеристикаМногооборотнаяТара = Неопределено;
		ИспользованиеУпаковок = "ОбщийНабор";
	КонецЕсли;
	
	ИспользоватьУпаковкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаборУпаковокПриИзменении(Элемент)
	
	НаборУпаковокПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставляетсяВМногооборотнойТареПриИзменении(Элемент)
	
	Если Не Объект.ПоставляетсяВМногооборотнойТаре Тогда
		Объект.НоменклатураМногооборотнаяТара   = Неопределено;
		Объект.ХарактеристикаМногооборотнаяТара = Неопределено;
	КонецЕсли;
	
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураМногооборотнаяТараПриИзменении(Элемент)
	
	Объект.ХарактеристикаМногооборотнаяТара = Неопределено;
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРеквизитыДляКонтроляИОтбора()
	
	Если Не (ТекущийТипВладельцаНабораЭлементов = "Номенклатура" 
		Или ТекущийТипВладельцаНабораЭлементов = "Характеристики"
		Или ТекущийТипВладельцаНабораЭлементов = "Серии") Тогда
		Возврат;
	КонецЕсли;
	
	// Если редактируется состав набора общих дополнительных сведений,
	// то изменять состав реквизитов для контроля и отбора не нужно.
	Если ТекущийТипЭлемента = "ДопСведение" Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДляКонтроля = КоллекцияРеквизитовДляКонтроля(Объект, ТекущийТипВладельцаНабораЭлементов);
	РеквизитыДляОтбора = КоллекцияРеквизитовОтбора(Объект, ТекущийТипВладельцаНабораЭлементов);
	
	// В таблицах дополнительных реквизитов и их состав еще не изменился, получить исходный список можно оттуда.
	ДопРеквизитыСведения = Новый Массив;
	
	ТаблицаДопРеквизитовСведений = ТаблицаДопРеквизитов(
		ЭтаФорма, 
		ТекущийТипЭлемента, 
		ТекущийТипВладельцаНабораЭлементов);
	
	Для Каждого Элемент Из ТаблицаДопРеквизитовСведений Цикл
		
		Если РедактируютсяОбщиеРеквизитыСведения Тогда
			
			Если Элемент.ОбщееСвойство Тогда
				ДопРеквизитыСведения.Добавить(Элемент.Свойство);
			КонецЕсли;
			
		Иначе
			
			ДопРеквизитыСведения.Добавить(Элемент.Свойство);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Получить новый состав набора дополнительных реквизитов для текущего типа владельца.
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Наименование КАК ИмяДопРеквизита,
		|	ДополнительныеРеквизитыИСведения.Заголовок КАК ПредставлениеРеквизита,
		|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
		|	ВЫБОР
		|		КОГДА НаборыДополнительныхРеквизитов.Ссылка = &НаборОбщихСвойств
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоОбщийРеквизит
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|		ПО НаборыДополнительныхРеквизитов.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
		|ГДЕ
		|	НЕ ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
		|	И (НаборыДополнительныхРеквизитов.Ссылка = &НаборОбщихСвойств
		|			ИЛИ НаборыДополнительныхРеквизитов.Ссылка = &НаборСвойствОбъекта
		|				И НЕ &ТолькоОбщиеРеквизиты)";
	
	НаборОбщихСвойств = Новый Массив;
	
	Если ТекущийТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		Запрос.УстановитьПараметр("НаборОбщихСвойств",
			Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
		Запрос.УстановитьПараметр("НаборСвойствОбъекта", Объект.НаборСвойств);
	ИначеЕсли  ТекущийТипВладельцаНабораЭлементов = "Характеристики" Тогда
		Запрос.УстановитьПараметр("НаборОбщихСвойств",
			Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие);
		Запрос.УстановитьПараметр("НаборСвойствОбъекта", Объект.НаборСвойствХарактеристик);
	Иначе // Серии
		Запрос.УстановитьПараметр("НаборОбщихСвойств",
			Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие);
		Запрос.УстановитьПараметр("НаборСвойствОбъекта", Объект.НаборСвойствСерий);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТолькоОбщиеРеквизиты", РедактируютсяОбщиеРеквизитыСведения);
	
	РезультатЗапроса = Запрос.Выполнить();
	НовТаблицаДопРеквизитовСведений = РезультатЗапроса.Выгрузить();
	
	// Удалить из таблицы реквизитов для контроля и из таблицы реквизитов для отбора удаленные свойства.
	Отбор = Новый Структура("Свойство, ЭтоДопРеквизит");
	
	Для каждого ДопРеквизит Из ДопРеквизитыСведения Цикл
		
		Если Не (НовТаблицаДопРеквизитовСведений.Найти(ДопРеквизит, "Свойство") = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.Свойство = ДопРеквизит;
		Отбор.ЭтоДопРеквизит = Истина;
		
		// Из таблицы реквизитов для контроля.
		НайденныеСтроки = РеквизитыДляКонтроля.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			РеквизитыДляКонтроля.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
		
		// Из таблицы реквизитов для отбора.
		Если РеквизитыДляОтбора <> Неопределено Тогда
			
			НайденныеСтроки = РеквизитыДляОтбора.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				РеквизитыДляОтбора.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавить в таблицу реквизитов для контроля добавленные свойства.
	Для каждого СтрокаТаблицы Из НовТаблицаДопРеквизитовСведений Цикл
		
		Если Не (ДопРеквизитыСведения.Найти(СтрокаТаблицы.Свойство) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = РеквизитыДляКонтроля.Добавить();
		
		НоваяСтрока.ИмяРеквизита = СтрокаТаблицы.ИмяДопРеквизита;
		НоваяСтрока.ПредставлениеРеквизита = СтрокаТаблицы.ПредставлениеРеквизита;
		
		НоваяСтрока.Свойство = СтрокаТаблицы.Свойство;
		НоваяСтрока.ЭтоДопРеквизит = Истина;
		НоваяСтрока.ДоступностьОбязателенДляЗаполнения = Истина;
		Если ТекущийТипВладельцаНабораЭлементов <> "Серии" Тогда
			НоваяСтрока.ДоступностьУникален = Истина;
			НоваяСтрока.ДоступностьОтображатьПриСоздании = Истина;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Свойство, "ЗаполнятьОбязательно") Тогда
			НоваяСтрока.ОбязателенДляЗаполнения = Истина;
			Если ТекущийТипВладельцаНабораЭлементов <> "Серии" Тогда
				НоваяСтрока.ОтображатьПриСоздании   = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ПриИзмененииНастройкиКонтроля(ТекущийТипВладельцаНабораЭлементов, НоваяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНабораДополнительныхРеквизитовИСведенийНаСервере()
	
	Если НЕ Модифицированность Тогда
		Прочитать();
	Иначе
		ИзменитьРеквизитыДляКонтроляИОтбора();
		ЗаполнитьСпискиДопРеквизитовСведений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОказанияУслугПриИзменении(Элемент)
	ВариантОказанияУслугПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВариантОказанияУслугПриИзмененииНаСервере()
	ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоТипуНоменклатуры();
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаданияНастроекСерийПриИзменении(Элемент)
	Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры 
		= ВариантЗаданияНастроекСерий = "ИспользуютсяТакжеКакВДругомВидеНоменклатуры";
	Если Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры Тогда
		ВыбратьВидВладелец("Серий");
	Иначе
		Объект.ВладелецСерий = Неопределено;
		НастроитьФорму();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСерийПоСкладамПриИзменении(Элемент)
	Объект.ЕдинаяНастройкаСерийДляСкладов = (НастройкаСерийПоСкладам = "ОднаПолитикаДляВсехСкладов");
	
	Если Объект.ЕдинаяНастройкаСерийДляСкладов Тогда
		Индекс = Объект.ПолитикиУчетаСерий.Количество();
		
		Пока Индекс > 0 Цикл
			
			СтрТабл = Объект.ПолитикиУчетаСерий[Индекс - 1];
			
			Если Не ЗначениеЗаполнено(СтрТабл.Склад)
				Или СтрТабл.ЭтоПолитикаДляСклада Тогда
				Объект.ПолитикиУчетаСерий.Удалить(СтрТабл);
			КонецЕсли;
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
	КонецЕсли;	
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСерийПоПозраделениямПриИзменении(Элемент)
	Объект.ЕдинаяНастройкаСерийДляПодразделений = (НастройкаСерийПоПозраделениям = "ОднаПолитикаДляВсехПодразделений");
	
	Если Объект.ЕдинаяНастройкаСерийДляПодразделений Тогда
		Индекс = Объект.ПолитикиУчетаСерий.Количество();
		
		Пока Индекс > 0 Цикл
			
			СтрТабл = Объект.ПолитикиУчетаСерий[Индекс - 1];
			
			Если Не ЗначениеЗаполнено(СтрТабл.Склад)
				Или Не СтрТабл.ЭтоПолитикаДляСклада Тогда
				Объект.ПолитикиУчетаСерий.Удалить(СтрТабл);
			КонецЕсли;
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
	КонецЕсли;
	
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ВладелецХарактеристикОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиНадписиПоВидуВладельцу(НавигационнаяСсылка, "Характеристик", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецСерийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиНадписиПоВидуВладельцу(НавигационнаяСсылка, "Серий", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецТоварныхКатегорийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиНадписиПоВидуВладельцу(НавигационнаяСсылка, "ТоварныхКатегорий", СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаНастройкаСерийПоСкладам1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "Ограничения" Тогда
		ТекстСообщения = НСтр("ru='Есть склады, для которых не включено использование ордерной схемы при отражении излишков, недостач и порчи. Поэтому единой политикой учета серий может быть только политика со справочным указанием серий, которая не требует указания серий при отражении излишков.';uk='Є склади, для яких не включено використання ордерної схеми при відображенні надлишків, нестач і псування. Тому єдиною політикою обліку серій може бути лише політика з довідковим зазначенням серій, яка не потребує зазначення серій при відображенні надлишків.'");
		ПоказатьПредупреждение(,ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеУпаковокПриИзменении(Элемент)
	Если ИспользованиеУпаковок = "ИндивидуальныйНабор" Тогда
		Объект.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры");
	Иначе
		Объект.НаборУпаковок = ПредопределенноеЗначение("Справочник.НаборыУпаковок.ПустаяСсылка");
	КонецЕсли;
	
	НастроитьФорму();
КонецПроцедуры


&НаКлиенте
Процедура ПодакцизныйТоварПриИзменении(Элемент)
	Если Объект.ПодакцизныйТовар Тогда
	     Объект.ВестиУчетПоГТД = Истина;
	Иначе
	     Объект.СтатьяДекларацииПоАкцизномуНалогу = Неопределено;
	КонецЕсли;
	ОбновитьДоступностьЭлементовАкцизныйНалог(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	ОбновитьДоступностьЭлементовПоСтавкеНДС(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолитикиУчетаСерий

&НаКлиенте
Процедура ПолитикиУчетаСерийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПолитикиУчетаСерий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ПолитикиУчетаСерийСклад" 
		И (Элементы.ПолитикиУчетаСерий.ТолькоПросмотр ИЛИ ТолькоПросмотр) Тогда
			
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Склад);
		
	ИначеЕсли Поле.Имя = "ПолитикиУчетаСерийПолитикаУчетаСерий" 
		И (Элементы.ПолитикиУчетаСерий.ТолькоПросмотр ИЛИ ТолькоПросмотр) Тогда
			
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ПолитикаУчетаСерий);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолитикиУчетаСерийПриАктивизацииСтроки(Элемент)
	Если Элементы.ПолитикиУчетаСерий.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элементы.ПолитикиУчетаСерий.ТекущиеДанные.Склад) Тогда 
		ПодключитьОбработчикОжидания("ОбновитьПредупреждениеПоСкладуКлиент", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолитикиУчетаСерийСкладПриИзменении(Элемент)
	ОбновитьПредупреждениеПоСкладуКлиент();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДопРеквизитовНоменклатуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыПередУдалением(Элемент, Отказ)
	
	ПередУдалениемЭлементаДопРеквизитовСведений(Отказ, "ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений("ДопРеквизит", "Номенклатура", Элемент.ТекущиеДанные.Свойство);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбораДопРеквизитСведение(ВыбранноеЗначение, "ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДопРеквизитовХарактеристик

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикПередУдалением(Элемент, Отказ)
	
	ПередУдалениемЭлементаДопРеквизитовСведений(Отказ, "ДопРеквизит", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопРеквизит", 
		"Характеристики", 
		Элемент.ТекущиеДанные.Свойство);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбораДопРеквизитСведение(ВыбранноеЗначение, "ДопРеквизит", "Характеристики");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДопРеквизитовСерий

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийПередУдалением(Элемент, Отказ)
	
	ПередУдалениемЭлементаДопРеквизитовСведений(Отказ, "ДопРеквизит", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопРеквизит", 
		"Серии", 
		Элемент.ТекущиеДанные.Свойство);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбораДопРеквизитСведение(ВыбранноеЗначение, "ДопРеквизит", "Серии");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДопСведенийНоменклатуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыПередУдалением(Элемент, Отказ)
	
	ПередУдалениемЭлементаДопРеквизитовСведений(Отказ, "ДопСведение", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопСведение", 
		"Номенклатура", 
		Элемент.ТекущиеДанные.Свойство);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбораДопРеквизитСведение(ВыбранноеЗначение, "ДопСведение", "Номенклатура");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицадДопСведенийХарактеристик

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикПередУдалением(Элемент, Отказ)
	
	ПередУдалениемЭлементаДопРеквизитовСведений(Отказ, "ДопСведение", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопСведение", 
		"Характеристики", 
		Элемент.ТекущиеДанные.Свойство);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбораДопРеквизитСведение(ВыбранноеЗначение, "ДопСведение", "Характеристики");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДопСведенийСерий

&НаКлиенте
Процедура ТаблицаДопСведенийСерийПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийСерийПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийСерийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийСерийПередУдалением(Элемент, Отказ)
	
	ПередУдалениемЭлементаДопРеквизитовСведений(Отказ, "ДопСведение", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийСерийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопСведение", 
		"Серии", 
		Элемент.ТекущиеДанные.Свойство);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийСерийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаВыбораДопРеквизитСведение(ВыбранноеЗначение, "ДопСведение", "Серии");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыДляКонтроляНоменклатуры

&НаКлиенте
Процедура РеквизитыДляКонтроляНоменклатурыУникаленПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыДляКонтроляНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДопРеквизит И Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ИдентификаторСтрокиТаблицы = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииНастройкиКонтроля("Номенклатура", ИдентификаторСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыДляКонтроляНоменклатурыОбязателенДляЗаполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыДляКонтроляНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ДоступностьОтображатьПриСоздании = Не ТекущиеДанные.ОбязателенДляЗаполнения;
	
	Если ТекущиеДанные.ОбязателенДляЗаполнения Тогда
		ТекущиеДанные.ОтображатьПриСоздании = Истина;
	КонецЕсли;
	
	ИдентификаторСтрокиТаблицы = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииНастройкиКонтроляЗаполнения("Номенклатура", ИдентификаторСтрокиТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыДляКонтроляХарактеристик

&НаКлиенте
Процедура РеквизитыДляКонтроляХарактеристикУникаленПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыДляКонтроляХарактеристик.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокиТаблицы = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииНастройкиКонтроля("Характеристики", ИдентификаторСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыДляКонтроляХарактеристикОбязателенДляЗаполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыДляКонтроляХарактеристик.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ДоступностьОтображатьПриСоздании = Не ТекущиеДанные.ОбязателенДляЗаполнения;
	
	Если ТекущиеДанные.ОбязателенДляЗаполнения Тогда
		ТекущиеДанные.ОтображатьПриСоздании = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыБыстрогоОтбораНоменклатуры

&НаКлиенте
Процедура РеквизитыБыстрогоОтбораНоменклатурыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.РеквизитыБыстрогоОтбораНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ИмяРеквизита, ЭтоДопРеквизит");
	ЗаполнитьЗначенияСвойств(Отбор, ТекущиеДанные);
	
	МассивСтрок = ТаблицаРеквизитовОтбораНоменклатуры.НайтиСтроки(Отбор);
	
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицы.Используется = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыБыстрогоОтбораНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Модифицированность Тогда
		ЗаписатьПередИзменениемПанелиБыстрогоОтбораНоменклатуры()
	Иначе
		ИзмененитьПанельБыстрогоОтбораНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыБыстрогоОтбораХарактеристик

&НаКлиенте
Процедура РеквизитыБыстрогоОтбораХарактеристикПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.РеквизитыБыстрогоОтбораХарактеристик.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ИмяРеквизита, ЭтоДопРеквизит");
	ЗаполнитьЗначенияСвойств(Отбор, ТекущиеДанные);
	
	МассивСтрок = ТаблицаРеквизитовОтбораХарактеристик.НайтиСтроки(Отбор);
	
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицы.Используется = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыБыстрогоОтбораХарактеристикПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.НаборСвойствХарактеристик) Тогда
		ЗаписатьПередИзменениемПанелиБыстрогоОтбораХарактеристики() 
	Иначе
		ИзмененитьПанельБыстрогоОтбораХарактеристики();	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьПроверкуЗаполненияДляРеквизитов(Команда)
	
	ВключитьПроверкуЗаполненияДляРеквизитовНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонРабочегоНаименованияНоменклатуры(Команда)
	ИзменениеВРедактореШаблона("РабочегоНаименованияНоменклатуры");
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонРабочегоНаименованияСерии(Команда)
	
	ИзменениеВРедактореШаблона("РабочегоНаименованияСерии");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонНаименованияДляПечатиНоменклатуры(Команда)
	
	ИзменениеВРедактореШаблона("НаименованияДляПечатиНоменклатуры");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонРабочегоНаименованияХарактеристики(Команда)
	
	ИзменениеВРедактореШаблона("РабочегоНаименованияХарактеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонНаименованияДляПечатиХарактеристики(Команда)
	
	ИзменениеВРедактореШаблона("НаименованияДляПечатиХарактеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСкладВПолитикиУчетаСерий(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСкладВПолитикиУчетаСерийЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ОткрытьФорму("Справочник.Склады.ФормаВыбора", ПараметрыФормы, Элементы.ПолитикиУчетаСерийСклад,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодразделениеВПолитикиУчетаСерий(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПодразделениеВПолитикиУчетаСерийЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ПараметрыОтбора = Новый Структура("ПроизводственноеПодразделение", Истина);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, Элементы.ПолитикиУчетаСерийСклад,,,,ОписаниеОповещения);
	
КонецПроцедуры

#Область КомандыДопРеквизитовИСведений

&НаКлиенте
Процедура СоздатьНовыйРеквизитНоменклатуры(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбщийРеквизитНоменклатуры(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Номенклатура", "Общее");
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоОбразцуРеквизитНоменклатуры(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Номенклатура", "ПоОбразцу");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйРеквизитХарактеристики(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбщийРеквизитХарактеристики(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Характеристики", "Общее");
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоОбразцуРеквизитХарактеристики(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Характеристики", "ПоОбразцу");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйРеквизитСерии(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбщийРеквизитСерии(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Серии", "Общее");
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоОбразцуРеквизитСерии(Команда)
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Серии", "ПоОбразцу");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеСведениеНоменклатуры(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбщееСведениеНоменклатуры(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Номенклатура", "Общее");
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоОбразцуСведениеНоменклатуры(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Номенклатура", "ПоОбразцу");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеСведениеХарактеристики(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбщееСведениеХарактеристики(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Характеристики", "Общее");
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоОбразцуСведениеХарактеристики(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Характеристики", "ПоОбразцу");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеСведениеСерии(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбщееСведениеСерии(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Серии", "Общее");
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоОбразцуСведениеСерии(Команда)
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Серии", "ПоОбразцу");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#Область ПроцедурыИФункцииДляРедактированияТаблицДопРеквизитовСведений

// Функция возвращает структуру команд редактирования таблицы доп. реквизитов (сведений).
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элемента, команды редактирования коллекции которых надо получить.
//	Принимает значения: "ДопСведение", "ДопРеквизит".
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов, команды редактирования коллекции которых надо получить.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	Структура.
//	Структура команд редактирования таблицы доп. реквизитов (сведений). Ключ структуры - строка - имя команды,
//	а значение - строка - имя элемента-команды редактирования.
//
&НаКлиенте
Функция КомандыРедактированияДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	СтруктураКоманд = Новый Структура;
	СтруктураКоманд.Вставить("Удалить");
	СтруктураКоманд.Вставить("ПереместитьВверх");
	СтруктураКоманд.Вставить("ПереместитьВниз");
	
	СтруктураКоманд.Вставить("КонтекстноеМенюУдалить");
	СтруктураКоманд.Вставить("КонтекстноеМенюПереместитьВверх");
	СтруктураКоманд.Вставить("КонтекстноеМенюПереместитьВниз");
	
	ИмяТаблицыДопРеквизитовСведений = ИмяТаблицыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	СтруктураКоманд.Удалить                         = ИмяТаблицыДопРеквизитовСведений + "Удалить";
	СтруктураКоманд.ПереместитьВверх                = ИмяТаблицыДопРеквизитовСведений + "ПереместитьВверх";
	СтруктураКоманд.ПереместитьВниз                 = ИмяТаблицыДопРеквизитовСведений + "ПереместитьВниз";
	
	СтруктураКоманд.КонтекстноеМенюУдалить          = ИмяТаблицыДопРеквизитовСведений + "КонтекстноеМенюУдалить";
	СтруктураКоманд.КонтекстноеМенюПереместитьВверх = ИмяТаблицыДопРеквизитовСведений + "КонтекстноеМенюПереместитьВверх";
	СтруктураКоманд.КонтекстноеМенюПереместитьВниз  = ИмяТаблицыДопРеквизитовСведений + "КонтекстноеМенюПереместитьВниз";
	
	Возврат СтруктураКоманд;
	
КонецФункции

// Возвращает таблицу формы - таблицу доп. реквизитов (сведений), относящуюся к нужному набору (номенклатуры, характеристик или серий).
//
// Параметры:
//	ТипЭлемента - Строка - тип элементов таблицу формы которых надо получить, принимает значения: "ДопСведение", "ДопРеквизит",
//	ТипВладельцаНабораЭлементов - Строка - Имя владельца набора элементов, таблицу формы которых надо получить, принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	ТаблицаФормы - ЭлементФормы - таблица доп.реквизитов (сведений) нужного набора.
//
&НаКлиенте
Функция ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат Элементы.ТаблицаДопРеквизитовНоменклатуры;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
			Возврат Элементы.ТаблицаДопРеквизитовХарактеристик;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
			Возврат Элементы.ТаблицаДопРеквизитовСерий;
		КонецЕсли;
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат Элементы.ТаблицаДопСведенийНоменклатуры;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
			Возврат Элементы.ТаблицаДопСведенийХарактеристик;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
			Возврат Элементы.ТаблицаДопСведенийСерий;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает коллекцию - таблицу доп. ревизитов (сведений), относящуюся к нужному набору (набору номенклатуры, характеристик или серий).
//
// Параметры:
//	Форма - УправляемаяФорма - форма,
//	ТипЭлемента - Строка - Тип элементов, коллекцию которых надо получить, принимает значения: "ДопСведение", "ДопРеквизит".
//	ТипВладельцаНабораЭлементов - Строка - Имя владельца набора элементов, принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	ДанныеФормыКоллекция - коллекция доп.реквизитов (сведений) нужного набора.
//
&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаДопРеквизитов(Форма, ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат Форма.ТаблицаДопРеквизитовНоменклатуры;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
			Возврат Форма.ТаблицаДопРеквизитовХарактеристик;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
			Возврат Форма.ТаблицаДопРеквизитовСерий;
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат Форма.ТаблицаДопСведенийНоменклатуры;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
			Возврат Форма.ТаблицаДопСведенийХарактеристик;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
			Возврат Форма.ТаблицаДопСведенийСерий;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает коллекцию - таблицу ревизитов быстрого отбора,
// относящуюся к нужному владельцу - номенклатуре или характеристикам.
//
// Параметры:
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов, пПринимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	ДанныеФормыКоллекция - Коллекция доп.реквизитов (сведений) нужного набора.
//
&НаКлиентеНаСервереБезКонтекста
Функция КоллекцияРеквизитовОтбора(ТекущийОбъект, ТипВладельцаНабораЭлементов)
	
	Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		Возврат ТекущийОбъект.РеквизитыБыстрогоОтбораНоменклатуры;
	ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
		Возврат ТекущийОбъект.РеквизитыБыстрогоОтбораХарактеристик;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает коллекцию реквизитов, относящуюся к нужному набору (номенклатуры, характеристик, серий).
//
// Параметры:
//	ТипВладельцаНабораЭлементов - Строка - Имя владельца набора элементов, принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	ДанныеФормыКоллекция - Коллекция доп.реквизитов (сведений) нужного набора.
//
&НаКлиентеНаСервереБезКонтекста
Функция КоллекцияРеквизитовДляКонтроля(ТекущийОбъект, ТипВладельцаНабораЭлементов)
	
	Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		Возврат ТекущийОбъект.РеквизитыДляКонтроляНоменклатуры;
	ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
		Возврат ТекущийОбъект.РеквизитыДляКонтроляХарактеристик;
	ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
		Возврат ТекущийОбъект.РеквизитыДляКонтроляСерий;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает имя элемента - таблицы доп. ревизитов (сведений),
// относящуюся к нужному набору (набору номенклатуры, характеристик или серий).
//
// Параметры:
//	ТипЭлемента - Строка - Тип элемента, имя элемента формы коллекции которых надо получить, принимает значения: "ДопСведение", "ДопРеквизит".
//	ТипВладельцаНабораЭлементов - Строка - Имя владельца набора элементов, принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	Строка - Имя элемента коллекции доп.реквизитов (сведений) нужного набора.
//
&НаКлиентеНаСервереБезКонтекста
Функция ИмяТаблицыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат "ТаблицаДопРеквизитовНоменклатуры";
		ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
			Возврат "ТаблицаДопРеквизитовХарактеристик";
		ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
			Возврат "ТаблицаДопРеквизитовСерий";
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат "ТаблицаДопСведенийНоменклатуры";
		ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
			Возврат "ТаблицаДопСведенийХарактеристик";
		ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
			Возврат "ТаблицаДопСведенийСерий";
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает ссылку на таблицу набора доп.реквизитов / сведений объекта.
//
// Параметры:
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов в который добавляется элемент. 
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	ДанныеФормыКоллекция.
//	Данные табличной части набора свойств.
//
&НаКлиентеНаСервереБезКонтекста
Функция НаборДопРеквизитовСведенийОбъекта(Объект, ТипВладельцаНабораЭлементов)
	
	Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		Возврат Объект.НаборСвойств;
	ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
		Возврат Объект.НаборСвойствХарактеристик;
	ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
		Возврат Объект.НаборСвойствСерий;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Процедура выполняет добавление дополнительного реквизита (сведения).
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элемента который добавляется. 
//	Принимает значения: "ДопСведение", "ДопРеквизит",
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов в который добавляется элемент. 
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
&НаКлиенте
Процедура ДобавитьДопРеквизитСведение(ТипЭлемента, ТипВладельцаНабораЭлементов, Вид = "")
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Данные еще не записаны.
        |Добавление дополнительных свойств возможно только после записи элемента.
        |Записать элемент?'
        |;uk='Дані ще не записані.
        |Додавання додаткових властивостей можливо тільки після запису елемента.
        |Записати елемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьДопРеквизитСведениеЗавершение", ЭтотОбъект, Новый Структура("Вид, ТипВладельцаНабораЭлементов, ТипЭлемента", Вид, ТипВладельцаНабораЭлементов, ТипЭлемента)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьДопРеквизитСведениеФрагмент(Вид, ТипВладельцаНабораЭлементов, ТипЭлемента);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДопРеквизитСведениеФрагмент(Знач Вид, Знач ТипВладельцаНабораЭлементов, Знач ТипЭлемента)
    
    Перем НаборДопРеквизитовСведений, ПараметрыФормы;
    
    ТекущийТипВладельцаНабораЭлементов = ТипВладельцаНабораЭлементов;
    ТекущийТипЭлемента = ТипЭлемента;
    
    НаборДопРеквизитовСведений = НаборДопРеквизитовСведенийОбъекта(Объект, ТипВладельцаНабораЭлементов);
    Если НЕ ЗначениеЗаполнено(НаборДопРеквизитовСведений) Тогда
        Возврат;
	КонецЕсли;
	
	ВерсияДанныхТекущегоНабора = ПолучитьВерсиюДанныхНабора(НаборДопРеквизитовСведений);
	
	ПараметрыФормы = Новый Структура;
	
	Если Вид = "Общее" Тогда
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			НаборДопРеквизитовСведений = ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие");
		ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
			НаборДопРеквизитовСведений = ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие");
		ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
			НаборДопРеквизитовСведений = ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие");
		Иначе
			НаборДопРеквизитовСведений = Неопределено;
		КонецЕсли;
	ИначеЕсли Вид = "ПоОбразцу" Тогда
		Если ТипЭлемента = "ДопРеквизит" Тогда 
			ПараметрыФормы.Вставить("ВыборВладельцаДополнительныхЗначений", Истина);
		Иначе
			ПараметрыФормы.Вставить("ВыборОбщегоСвойства", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("НаборСвойств", НаборДопРеквизитовСведений);
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", НаборДопРеквизитовСведений);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", ТипЭлемента <> "ДопРеквизит");
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта",
					ПараметрыФормы,
					ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов),
					,
					,
					,
					,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДопРеквизитСведениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Вид = ДополнительныеПараметры.Вид;
    ТипВладельцаНабораЭлементов = ДополнительныеПараметры.ТипВладельцаНабораЭлементов;
    ТипЭлемента = ДополнительныеПараметры.ТипЭлемента;
       
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        ЭлементЗаписан = Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    ДобавитьДопРеквизитСведениеФрагмент(Вид, ТипВладельцаНабораЭлементов, ТипЭлемента);

КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаВыбораДопРеквизитСведение(ВыбранноеЗначение, ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	НаборДопРеквизитовСведений = НаборДопРеквизитовСведенийОбъекта(Объект, ТипВладельцаНабораЭлементов);
	Если НЕ ЗначениеЗаполнено(НаборДопРеквизитовСведений) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНаборыДополнительныхСведений = (ТипЭлемента <> "ДопРеквизит");
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ВладелецДополнительныхЗначений") Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЭтоДополнительноеСведение",      ЭтоНаборыДополнительныхСведений);
		ПараметрыФормы.Вставить("ТекущийНаборСвойств",            НаборДопРеквизитовСведений);
		ПараметрыФормы.Вставить("ВладелецДополнительныхЗначений", ВыбранноеЗначение.ВладелецДополнительныхЗначений);
		
		ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта",
			ПараметрыФормы, ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов));
			
	ИначеЕсли ВыбранноеЗначение.Свойство("ОбщееСвойство") Тогда		
		
		ЗаписатьОбщееСвойствоНаСервере(ВыбранноеЗначение, НаборДопРеквизитовСведений, ЭтоНаборыДополнительныхСведений);
		
	КонецЕсли;

КонецПроцедуры

// Процедура управляет доступностью команд редактирования таблиц доп. реквизитов (сведений).
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элемента который удаляется.
//	Принимает значения: "ДопСведение", "ДопРеквизит".
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов из которого удаляется элемент.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
&НаКлиенте
Процедура УстановитьДоступностьКомандРедактированияДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	ТаблицаДопРеквизитовСведений = ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	ТекущиеДанные = ТаблицаДопРеквизитовСведений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = ТаблицаДопРеквизитов(ЭтаФорма, ТипЭлемента, ТипВладельцаНабораЭлементов);
	КомандыРедактирования = КомандыРедактированияДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	// Если активная строка - строка общего доп. реквизита (сведения), то сделать недоступными кнопки добавления, удаления, перемещения.
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.Удалить, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.ПереместитьВверх, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.ПереместитьВниз, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.КонтекстноеМенюУдалить, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.КонтекстноеМенюПереместитьВверх, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.КонтекстноеМенюПереместитьВниз,
		"Доступность",
		Не ТекущиеДанные.ОбщееСвойство);
	
	// Если активная строка - первая или последняя в списке, то сделать недоступными кнопки сдвига вверх или вниз.
	Если Не ТекущиеДанные.ОбщееСвойство Тогда
		
		ИндексСтроки = ТаблицаДопРеквизитов.Индекс(ТекущиеДанные);
		
		Если ИндексСтроки = 0 Тогда
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.ПереместитьВверх, 
				"Доступность", 
				Ложь);
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.КонтекстноеМенюПереместитьВверх, 
				"Доступность", 
				Ложь);
			
		КонецЕсли;
		
		Если ИндексСтроки = ТаблицаДопРеквизитов.Количество() - 1 Тогда
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.ПереместитьВниз, 
				"Доступность", 
				Ложь);
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.КонтекстноеМенюПереместитьВниз, 
				"Доступность", 
				Ложь);
			
		КонецЕсли;
		
		Если ИндексСтроки <> 0 Тогда
			
			ПредыдущаяСтрока = ТаблицаДопРеквизитов[ИндексСтроки - 1];
			
			Если ПредыдущаяСтрока.ОбщееСвойство Тогда
				
				// Если предыдущая строка является строкой общего реквизита, то сделать недоступной кнопку сдвига вверх.
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, 
					КомандыРедактирования.ПереместитьВверх, 
					"Доступность", 
					Ложь);
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, 
					КомандыРедактирования.КонтекстноеМенюПереместитьВверх, 
					"Доступность", 
					Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет запись изменившихся наборов доп. реквизитов (сведений).
// Вызывается при записи текущего элемента на сервере.
//
// Параметры:
//	Отказ (Булево) - Признак отказа от записи. Значение по умолчанию: Ложь,
//
//	ТекущийОбъект (СправочникОбъект.ВидыНоменклатуры) - Записываемый объект - вид номенклатуры,
//
//	ТипЭлемента (Строка) - Тип элемента который удаляется. 
//	Принимает значения: "ДопСведение", "ДопРеквизит",
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов из которого удаляется элемент. 
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
&НаСервере
Процедура ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	НаборСвойствДопРеквизитовСведений = НаборДопРеквизитовСведенийОбъекта(ТекущийОбъект, ТипВладельцаНабораЭлементов);
	Если НЕ ЗначениеЗаполнено(НаборСвойствДопРеквизитовСведений) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектНаборСвойств = НаборСвойствДопРеквизитовСведений.ПолучитьОбъект();
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеСведения;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = ТаблицаДопРеквизитов(ЭтаФорма, ТипЭлемента, ТипВладельцаНабораЭлементов);
	ТЧДополнительныеРеквизитыСведения.Очистить();
	
	Для каждого ЭлементСтр Из ТаблицаДопРеквизитов Цикл
		Если Не ЭлементСтр.ОбщееСвойство Тогда
			НовСтр = ТЧДополнительныеРеквизитыСведения.Добавить();
			НовСтр.Свойство = ЭлементСтр.Свойство;
			НовСтр.ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСтр.Свойство, "ПометкаУдаления");
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ОбъектНаборСвойств.Записать();
	Исключение
		
		// Установить признак отказа записи.
		Отказ = Истина;
		
		// Добавить запись в журнал регистрации.
		ИмяСобытия = НСтр("ru='Дополнительные %1 %2. Не удалось обновить состав дополнительных %3 набора.';uk='Додаткові %1 %2. Не вдалося оновити склад додаткових %3 наборів.'");
		
		ТипСведений = ?(ТипЭлемента = "ДопРеквизит", "реквизиты", "сведения");
		ТипОбъекта  = ?(ТипВладельцаНабораЭлементов = "Номенклатура", "номенклатуры", ?(ТипВладельцаНабораЭлементов = "Характеристики", "характеристик", "серий"));
		ТипСостава  = ?(ТипЭлемента = "ДопРеквизит", "реквизитов", "сведений");
		
		ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ИмяСобытия, 
			ТипСведений, 
			ТипОбъекта, 
			ТипСостава);
		
		КомментарийЖурнала  = НСтр("ru='При обновлении табличной части дополнительных реквизитов набора свойств ""%1"" произошла ошибка: ""%2""';uk='При оновленні табличній частині додаткових реквізитів набору властивостей ""%1"" сталася помилка: ""%2""'");
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		КомментарийЖурнала  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			КомментарийЖурнала, 
			НаборСвойствДопРеквизитовСведений, 
			ПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, 
			, 
			НаборСвойствДопРеквизитовСведений, 
			КомментарийЖурнала, 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		// Вызвать исключение.
		ВыражениеИсключения = НСтр("ru='При записи дополнительных %1 %2 произошла ошибка (см. журнал регистрации).';uk='При запису додаткових %1 %2 сталася помилка (див. журнал реєстрації).'");
		
		ТипСведений = ?(ТипЭлемента = "ДопРеквизит", "реквизитов", "сведений");
		ТипОбъекта = ?(ТипВладельцаНабораЭлементов = "Номенклатура", "номенклатуры", ?(ТипВладельцаНабораЭлементов = "Характеристики", "характеристик", "серий"));
		
		ВыражениеИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ВыражениеИсключения, 
			ТипСведений, 
			ТипОбъекта, 
			ТипСостава);
		
		ВызватьИсключение(ВыражениеИсключения);
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет проверку, является ли удаляемый элемент общим доп. реквизитом (сведением),
// если да, то устанавливается флаг отказа. Если нет, то разрешается удаление элемента из списка
// доп.реквизитов, при этом, также удаляются записи с этим реквизитом из таблицы реквизитов и 
// таблицы реквизитов для отборов.
//
// Параметры:
//	Отказ - Булево - Признак отказа от удаления. Значение по умолчанию: Ложь,
//	ТипЭлемента - Строка - Тип элемента который удаляется, принимает значения: "ДопСведение", "ДопРеквизит".
//	ТипВладельцаНабораЭлементов - Строка - Имя владельца набора элементов из которого удаляется элемент, принимает значения: "Номенклатура", "Характеристики", "Серии".
//
&НаКлиенте
Процедура ПередУдалениемЭлементаДопРеквизитовСведений(Отказ, ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	ТаблицаДопРеквизитовСведений = ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	ТаблицаДопРеквизитов = ТаблицаДопРеквизитов(ЭтаФорма, ТипЭлемента, ТипВладельцаНабораЭлементов);
	ИмяТаблицыДопРеквизитовСведений = ИмяТаблицыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	ТекущиеДанные = ТаблицаДопРеквизитовСведений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ОбщееСвойство Тогда
		
		Отказ = Истина;
		
		ТекстСообщения = НСтр("ru='%1 %2 ""%3"" является общим. Состав общих дополнительных %4 
        |можно редактировать только в форме элемента набора общих %4.'
        |;uk='%1 %2 ""%3"" є спільим. Склад спільних додаткових %4 
        |можна редагувати тільки у формі елемента набору спільних %4.'");
		
		Параметр1 = ?(ТипЭлемента = "ДопРеквизит", "Дополнительный", "Дополнительное");
		Параметр2 = ?(ТипЭлемента = "ДопРеквизит", "реквизит", "сведение");
		Параметр3 = ТекущиеДанные.Свойство;
		Параметр4 = ?(ТипЭлемента = "ДопРеквизит", "реквизитов", "сведений");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Параметр1, Параметр2, Параметр3, Параметр4);
		
		ИндексСтроки = ТаблицаДопРеквизитов.Индекс(ТекущиеДанные);
		Поле = ИмяТаблицыДопРеквизитовСведений + "[" + Формат(ИндексСтроки, "ЧЦ=10; ЧДЦ=0; ЧГ=0") + "].Свойство";
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = Поле;
		Сообщение.Сообщить();
		
	Иначе
		
		Отказ = ПометитьТекущееСвойствоНаУдаление(
			ТекущиеДанные.Свойство,
			ТекущиеДанные.ИндексКартинки,
			ТипВладельцаНабораЭлементов,
			ТипЭлемента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПометитьТекущееСвойствоНаУдаление(Свойство, ИндексКартинки, ТипВладельцаНабораЭлементов, ТипЭлемента)
	
	НачатьТранзакцию();
	
	ОбъектСвойства = Свойство.ПолучитьОбъект();
	ОбъектСвойства.ПометкаУдаления = НЕ ОбъектСвойства.ПометкаУдаления;
	ОбъектСвойства.Записать();
	
	НаборСвойствДопРеквизитовСведений = НаборДопРеквизитовСведенийОбъекта(Объект, ТипВладельцаНабораЭлементов);
	Если НЕ ЗначениеЗаполнено(НаборСвойствДопРеквизитовСведений) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектНаборСвойств = НаборСвойствДопРеквизитовСведений.ПолучитьОбъект();
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеСведения;
	КонецЕсли;
	
	Для Каждого ЭлементСтр Из ТЧДополнительныеРеквизитыСведения Цикл
		Если ЭлементСтр.Свойство = Свойство Тогда
			ЭлементСтр.ПометкаУдаления = ОбъектСвойства.ПометкаУдаления;
		КонецЕсли;
	КонецЦикла;
	
	ОбъектНаборСвойств.Записать();
	
	ЗафиксироватьТранзакцию();
	
	ИндексКартинки = ?(ОбъектСвойства.ПометкаУдаления, 4, 1);
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПриВыбореСтрокиТаблицыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов, Свойство)
	
	ТекущийТипЭлемента = ТипЭлемента;
	ТекущийТипВладельцаНабораЭлементов = ТипВладельцаНабораЭлементов;
	
	ПараметрыФормы = Новый Структура("Ключ", Свойство);
	
	ОткрытьФорму(
		"ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Форма.ФормаЭлемента", 
		ПараметрыФормы, 
		ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Процедура вызывается при начале выбора шаблона наименования номенклатуры или характеристик.
// Проверяет модифицированность элемента и открывается форму редактирования шаблона.
//
// Параметры:
//	ШаблонНаименования (Строка) - шаблон наименования,
//	ЭлементШаблонаНаименования (ПолеФормы) - элемент шаблона,
//	ИмяШаблона (Строка) - имя шаблона наименования,
//	ФлагЗапрета (Строка) - имя флага запрета.
//
&НаКлиенте
Процедура ИзменениеВРедактореШаблона(ЗначащаяЧастьИмениШаблона)
	
	ПараметрыВопроса = Новый Структура;
	ПараметрыВопроса.Вставить("ЗначащаяЧастьИмениШаблона", ЗначащаяЧастьИмениШаблона);
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Изменение шаблона наименования с помощью редактора формул 
                                  |возможно только после записи элемента, записать элемент?'
                                  |;uk='Зміна шаблону найменування за допомогою редактора формул 
                                  |можлива тільки після запису елемента, записати елемент?'");
		

		ПоказатьВопрос(Новый ОписаниеОповещения("ИзменениеВРедактореШаблонаВопросОЗаписиЗавершение", ЭтотОбъект, ПараметрыВопроса),
			ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,,НСтр("ru='Редактирование шаблона';uk='Редагування шаблону'"));
			
		Возврат;	
	КонецЕсли;
	
	ИзменениеВРедактореШаблонаВопросФрагмент(ПараметрыВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеВРедактореШаблонаВопросФрагмент(ДополнительныеПараметры)
	
	НаборСвойств = Новый Структура("НаборСвойствНоменклатуры, НаборСвойствХарактеристик, Набор", Ложь, Ложь, Неопределено);
	
	ИмяШаблона = "Шаблон" + ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона;
	
	Если СтрНайти(ИмяШаблона, "Номенклатуры") > 0 Тогда
		
		НаборСвойств.НаборСвойствНоменклатуры = Истина;
		НаборСвойств.Набор = Объект.НаборСвойств;
		
	ИначеЕсли СтрНайти(ИмяШаблона, "Характеристик") > 0 Тогда
		
		НаборСвойств.НаборСвойствХарактеристик = Истина;
		НаборСвойств.Набор = Объект.НаборСвойствХарактеристик;
		
	Иначе
		
		НаборСвойств.Набор = Объект.НаборСвойствСерий;
		
	КонецЕсли;
	
	ПараметрыРедактированияШаблона = Новый Структура("Формула, ОперандыЗаголовок, Операторы, СтроковаяФормула, НаборСвойств");
	
	ПараметрыРедактированияШаблона.Формула           = Объект[ИмяШаблона];
	ПараметрыРедактированияШаблона.ОперандыЗаголовок = НСтр("ru='Доступные реквизиты';uk='Доступні реквізити'");
	ПараметрыРедактированияШаблона.Операторы         = АдресХранилищаДереваОператоров;
	ПараметрыРедактированияШаблона.СтроковаяФормула  = Истина;
	ПараметрыРедактированияШаблона.НаборСвойств      = НаборСвойств;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменениеВРедактореШаблонаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.КонструкторФормул",
		ПараметрыРедактированияШаблона,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеВРедактореШаблонаВопросОЗаписиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			
			ИзменениеВРедактореШаблонаВопросФрагмент(ДополнительныеПараметры);
								
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеВРедактореШаблонаЗавершение(Результат, ДополнительныеПараметры) Экспорт
		
	Шаблон = Результат;
	ИмяШаблона = "Шаблон" + ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона;
	                   
	Если Шаблон <> Неопределено 
		И Объект[ИмяШаблона] <> Шаблон Тогда
		Модифицированность = Истина;
		Объект[ИмяШаблона] = Шаблон;
		
		Если СтрНайти(ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона, "Серии") = 0 Тогда
			ИмяШаблона = "Шаблон" + ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона;
			Объект["ЗапретРедактирования"+ ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона] = ЗначениеЗаполнено(Объект[ИмяШаблона]);
		КонецЕсли;
		
		НастроитьПоШаблонуНаименования(ДополнительныеПараметры.ЗначащаяЧастьИмениШаблона);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоОператоров()
	
	Дерево = РаботаСФормулами.ПолучитьПустоеДеревоОператоров();
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Разделители';uk='Роздільники'"));
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "/", " + ""/"" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "\", " + ""\"" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "|", " + ""|"" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "_", " + ""_"" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ",", " + "", "" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ".", " + "". "" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Пробел';uk='Пробіл'"), " + "" "" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "(", " + "" ("" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ")", " + "") "" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, """", " + """""""" + ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Операторы';uk='Оператори'"));
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Логические операторы и константы';uk='Логічні оператори і константи'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='И';uk='И'"),      " " + "И"      + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Или';uk='Або'"),    " " + "Или"    + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Не';uk='Не'"),     " " + "Не"     + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИСТИНА';uk='ІСТИНА'"), " " + "ИСТИНА" + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ЛОЖЬ';uk='ХИБНІСТЬ'"),   " " + "ЛОЖЬ"   + " ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Числовые функции';uk='Числові функції'"));
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Максимум';uk='Максимум'"),    "Макс(,)", 2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Минимум';uk='Мінімум'"),     "Мин(,)",  2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Округление';uk='Округлення'"),  "Окр(,)",  2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Целая часть';uk='Ціла частина'"), "Цел()",   1);
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Строковые функции';uk='Строкові функції'"));
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Строка';uk='Рядок'"),		"Строка()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ВРег';uk='ВРег'"), 			"ВРег()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Лев';uk='Лев'"), 			"Лев()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='НРег';uk='НРег'"), 			"НРег()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Прав';uk='Прав'"), 			"Прав()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='СокрЛ';uk='СокрЛ'"), 		"СокрЛ()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='СокрЛП';uk='СокрЛП'"), 		"СокрЛП()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='СокрП';uk='СокрП'"), 		"СокрП()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ТРег';uk='ТРег'"), 			"ТРег()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='СтрЗаменить';uk='СтрЗаменить'"),	"СтрЗаменить(,,)");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='СтрДлина';uk='СтрДлина'"), 		"СтрДлина()");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Прочие функции';uk='Інші функції'"));
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Условие';uk='Умова'"), 					"?(,,)", 3);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Предопределенное значение';uk='Напередвизначене значення'"), "ПредопределенноеЗначение()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Значение заполнено';uk='Значення заповнено'"), 		"ЗначениеЗаполнено()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Формат';uk='Формат'"), 					"Формат(,)");
	
	АдресХранилищаДереваОператоров = ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура вызывается при изменении значения флажка контроля уникальности в строке
// таблицы реквизитов для контроля номенклатуры. В процедуре выполняется контроль доступности
// изменения настройки отображения и заполнения для реквизита. По полученным настройкам
// доступности выполняется установка доступности изменения настроек.
//
// Параметры:
//	ВладелецРеквизита (Строка) - Имя владельца строки таблицы контроля реквизитов.
//	Приинимает значения: "Номенклатура", "Характеристики".
//
//	ИдентификаторСтрокиТаблицы (Число) - Идентификатор строки таблицы контроля реквизитов.
//
&НаСервере
Процедура ПриИзмененииНастройкиКонтроля(ВладелецРеквизита, ИдентификаторСтрокиТаблицы)
	
	Если ВладелецРеквизита = "Номенклатура" Тогда
		ТекущиеДанные = Объект.РеквизитыДляКонтроляНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	ИначеЕсли ВладелецРеквизита = "Характеристики" Тогда
		ТекущиеДанные = Объект.РеквизитыДляКонтроляХарактеристик.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	Иначе
		ТекущиеДанные = Объект.РеквизитыДляКонтроляСерий.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ДоступноИзменениеНастройкиОтображения = Справочники.ВидыНоменклатуры.ДоступноИзменениеНастройкиОтображенияРеквизита(Объект,
											   ТекущиеДанные.ИмяРеквизита,
											   ВладелецРеквизита,
											   ТекущиеДанные.ЭтоДопРеквизит,
											   ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Свойство,"ЗаполнятьОбязательно"));
	ДоступноИзменениеНастройкиОбязательностиЗаполнения = Справочники.ВидыНоменклатуры.ДоступноИзменениеНастройкиОбязательностиЗаполненияРеквизита(Объект,
																ТекущиеДанные.ИмяРеквизита,
																ВладелецРеквизита,
																ТекущиеДанные.ЭтоДопРеквизит,
																ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Свойство,"ЗаполнятьОбязательно"));
	
	ТекущиеДанные.ДоступностьОтображатьПриСоздании = Не (ТекущиеДанные.Уникален Или ТекущиеДанные.ОбязателенДляЗаполнения) И ДоступноИзменениеНастройкиОтображения;
	Если ВладелецРеквизита = "Серии" Тогда
		ТекущиеДанные.ДоступностьОбязателенДляЗаполнения = Истина;
	Иначе
		ТекущиеДанные.ДоступностьОбязателенДляЗаполнения = Не ТекущиеДанные.Уникален И ДоступноИзменениеНастройкиОбязательностиЗаполнения;
	КонецЕсли;
	
	Если ТекущиеДанные.Уникален Тогда
		ТекущиеДанные.ОбязателенДляЗаполнения = Истина;
		ТекущиеДанные.ОтображатьПриСоздании = Истина;
	КонецЕсли;
	
	Если ТекущиеДанные.ОбязателенДляЗаполнения Тогда
		ТекущиеДанные.ОтображатьПриСоздании = Истина;
	КонецЕсли;
	
	// Если тип реквизита - Булево, то не включать контроль заполнения.
	Если ТекущиеДанные.ЭтоДопРеквизит Тогда
		
		Если ВладелецРеквизита = "Номенклатура" Тогда
			ДополнительныеРеквизиты = ДополнительныеРеквизитыНоменклатуры();
		ИначеЕсли ВладелецРеквизита = "Характеристики" Тогда
			ДополнительныеРеквизиты = ДополнительныеРеквизитыХарактеристик();
		ИначеЕсли ВладелецРеквизита = "Серии" Тогда
			ДополнительныеРеквизиты = ДополнительныеРеквизитыСерий();
		КонецЕсли;
		
		Отбор = Новый Структура("ИмяРеквизита, Свойство, ЭтоДопРеквизит", ТекущиеДанные.ИмяРеквизита, ТекущиеДанные.Свойство, Истина);
		
		НайденныеСтроки = ДополнительныеРеквизиты.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		НайденнаяСтрока = НайденныеСтроки[0];
		
		ТипЗначения = НайденнаяСтрока.ТипЗначения;
		
		Если ТипЗначения = ОписаниеТиповБулево Тогда
			ТекущиеДанные.ОбязателенДляЗаполнения = Ложь;
			ТекущиеДанные.ДоступностьОбязателенДляЗаполнения = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ВладелецРеквизита = "Номенклатура" Тогда
			
			Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(ТекущиеДанные.ИмяРеквизита);
			
			Если Реквизит = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если Реквизит.Тип = ОписаниеТиповБулево Тогда
				ТекущиеДанные.ОбязателенДляЗаполнения = Ложь;
				ТекущиеДанные.ДоступностьОбязателенДляЗаполнения = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при изменении значения флажка контроля заполнения в строке
// таблицы реквизитов для контроля номенклатуры. В процедуре выполняется контроль доступности
// изменения настройки отображения и заполнения для реквизита. По полученным настройкам
// доступности выполняется установка доступности изменения настроек.
//
// Параметры:
//	ВладелецРеквизита (Строка) - Имя владельца строки таблицы контроля реквизитов.
//	Приинимает значения: "Номенклатура", "Характеристики", "Серии".
//
//	ИдентификаторСтрокиТаблицы (Число) - Идентификатор строки таблицы контроля реквизитов.
//
&НаСервере
Процедура ПриИзмененииНастройкиКонтроляЗаполнения(ВладелецРеквизита, ИдентификаторСтрокиТаблицы)
	
	Если ВладелецРеквизита = "Номенклатура" Тогда
		ТекущиеДанные = Объект.РеквизитыДляКонтроляНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	ИначеЕсли ВладелецРеквизита = "Характеристики" Тогда
		ТекущиеДанные = Объект.РеквизитыДляКонтроляХарактеристик.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	Иначе
		ТекущиеДанные = Объект.РеквизитыДляКонтроляСерий.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбязательноОтображаемыеРеквизиты = Справочники.Номенклатура.ОбязательноОтображаемыеПриСозданииРеквизиты();
	ОбязательноОтображаемый = (ОбязательноОтображаемыеРеквизиты.Найти(ТекущиеДанные.ИмяРеквизита) <> Неопределено);
	
	Если ОбязательноОтображаемый Тогда
		ТекущиеДанные.ДоступностьОтображатьПриСоздании = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоСоставнойТипЗначения(ТипЗначения)
	
	Возврат ТипЗначения.Типы().Количество() > 1;
	
КонецФункции

&НаСервере
Процедура УдалитьРеквизитДляКонтроляНоменклатуры(ИмяРеквизита)
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	
	НайденныеСтроки = Объект.РеквизитыДляКонтроляНоменклатуры.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаТаблицыРеквизитов = НайденныеСтроки[0];
		Объект.РеквизитыДляКонтроляНоменклатуры.Удалить(СтрокаТаблицыРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРеквизитДляОтбораНоменклатуры(ИмяРеквизита)
	
	МассивСтрок = ТаблицаРеквизитовОтбораНоменклатуры.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаТаблицыРеквизитов = МассивСтрок[0];
		ТаблицаРеквизитовОтбораНоменклатуры.Удалить(СтрокаТаблицыРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоТипуНоменклатуры()
	
	Перем СтрокаТаблицыРеквизитовДляКонтроля;
	
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	ТаблицаРеквизитов = Справочники.Номенклатура.ЗависимостьРеквизитовОтТипаНоменклатуры(Объект.ТипНоменклатуры, Ложь,
		Объект.ИспользоватьСрокГодностиСерии, Объект.ВариантОказанияУслуг, Объект.ИспользованиеХарактеристик);

	// Пройти по таблице реквизитов, выполнить нужную обработку.
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Для каждого СтрокаТаблицыРеквизитов Из ТаблицаРеквизитов Цикл
		
		Реквизит = СтрокаТаблицыРеквизитов.Реквизит;
		
		// Выполнить действия с таблицами реквизитов для контроля и отбора.
		
		Отбор.ИмяРеквизита = Реквизит.Имя;
		
		// ... с таблицей реквизитов для контроля.
		ИмяДействия = СтрокаТаблицыРеквизитов.ДействиеСРеквизитом;
		
		Если ЗначениеЗаполнено(ИмяДействия) Тогда
			
			Если ИмяДействия = "Добавить" Тогда
				
				// Для реквизита "ЕдиницаИзмерения" - отдельная обработка.
				Если Реквизит.Имя = "ЕдиницаИзмерения" Тогда
					
					НайденныеСтроки = Объект.РеквизитыДляКонтроляНоменклатуры.НайтиСтроки(Отбор);
					
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						СтрокаТаблицыРеквизитовДляКонтроля = НайденныеСтроки[0];
						
						СтрокаТаблицыРеквизитовДляКонтроля.ПредставлениеРеквизита = Реквизит.Синоним;
						
						Если ЭтоТовар Или ЭтоМногооборотнаяТара Тогда
							
							СтрокаТаблицыРеквизитовДляКонтроля.ПредставлениеРеквизита = НСтр("ru='Единица хранения';uk='Одиниця зберігання'");
							СтрокаТаблицыРеквизитовДляКонтроля.ОтображатьПриСоздании = Истина;
							СтрокаТаблицыРеквизитовДляКонтроля.ОбязателенДляЗаполнения = Истина;
							
							СтрокаТаблицыРеквизитовДляКонтроля.ДоступностьОбязателенДляЗаполнения = Ложь;
							СтрокаТаблицыРеквизитовДляКонтроля.ДоступностьОтображатьПриСоздании = Ложь;
							СтрокаТаблицыРеквизитовДляКонтроля.ДоступностьУникален = Истина;
							
						Иначе
							
							СтрокаТаблицыРеквизитовДляКонтроля.ПредставлениеРеквизита = НСтр("ru='Единица измерения';uk='Одиниця виміру'");
							СтрокаТаблицыРеквизитовДляКонтроля.ДоступностьОбязателенДляЗаполнения = Не СтрокаТаблицыРеквизитовДляКонтроля.Уникален;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					Справочники.ВидыНоменклатуры.ДобавитьРеквизитДляКонтроляИОтбораНоменклатуры(Объект,Реквизит,ТаблицаРеквизитовДляКонтроляНоменклатуры,ТаблицаРеквизитовОтбораНоменклатуры);
					
				КонецЕсли;
				
			ИначеЕсли ИмяДействия = "Удалить" Тогда
				
				УдалитьРеквизитДляКонтроляНоменклатуры(Реквизит.Имя);
				УдалитьРеквизитДляОтбораНоменклатуры(Реквизит.Имя);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.РеквизитыДляКонтроляНоменклатуры.Сортировать("ПредставлениеРеквизита");
	
	ТаблицаРеквизитовОтбораНоменклатуры.Сортировать("ПредставлениеРеквизита");
	
КонецПроцедуры

// Процедура заполняет нужную таблицу дополнительных реквизитов (сведений).
//
// Параметры:
//	Таблица (ДанныеФормыКоллекция) - Таблица доп.реквизитов (сведений).
//	
//	НаборСвойствДопРеквизитов (СправочникСсылка.НаборыДополнительныхРеквизитовИСведений) - Ссылка на элемент-владелец 
//	набора доп.реквизитов (сведений).
//	
//	НаборОбщихСвойствДопРеквизитов (СправочникСсылка.НаборыДополнительныхРеквизитовИСведений) - Ссылка на элемент-владелец 
//	набора общих доп.реквизитов (сведений).
//	
//	ТипДанных (Строка) - Тип данных которые будут заполняться. 
//	Принимает значения: "Реквизиты", "Сведения".
//	
//	ТолькоОбщиеСвойства (Булево) - Если параметр, установлен в Истина, то предварительно очищается не вся таблица,
//	а только список общих доп.реквизитов (сведений). Это сделано для того чтобы избежать 
//	потери введенных данных о не общих доп.реквизитах (сведениях) в форму.
//	Значение по умолчанию: Ложь
//	
&НаСервере
Процедура ЗаполнитьСписокСвойствДопРеквизитовТаблицы(Таблица, НаборСвойствДопРеквизитов, НаборОбщихСвойствДопРеквизитов, 
	ТипДанных, ТолькоОбщиеСвойства = Ложь)
	
	// Если нужно перезаполнить свойства, то проверить, что передана ссылка на набор свойств.
	Если Не ТолькоОбщиеСвойства Тогда
		Если Не ЗначениеЗаполнено(НаборСвойствДопРеквизитов) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		// Если нужно перезаполнить только ОБЩИЕ свойства, то проверить, что передана ссылка на набор ОБЩИХ свойств.
		Если Не ЗначениеЗаполнено(НаборОбщихСвойствДопРеквизитов) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТолькоОбщиеСвойства Тогда
		
		// Удалить из таблицы только строки общих свойств.
		ВГраница = Таблица.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			
			СтрокаТаблицы = Таблица[ВГраница - ОбрИндекс];
			
			Если СтрокаТаблицы.ОбщееСвойство Тогда
				Таблица.Удалить(СтрокаТаблицы);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Таблица.Очистить();
		
	КонецЕсли;
	
	Если ТипДанных = "Реквизиты" Тогда
		ИмяТЧ = "ДополнительныеРеквизиты";
	ИначеЕсли ТипДанных = "Сведения" Тогда
		ИмяТЧ = "ДополнительныеСведения";
	КонецЕсли;
	
	// Получить список дополнительных реквизитов из набора свойств, и дополнительных реквизитов из набора общих свойств.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НаборОбщихСвойств", НаборОбщихСвойствДопРеквизитов);
	
	Если ТолькоОбщиеСвойства Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбщиеДопРеквизитыСведения.Свойство КАК Свойство,
		|	ОбщиеДопРеквизитыСведения.Свойство.Заголовок КАК ПредставлениеРеквизита,
		|	ИСТИНА КАК ОбщееСвойство,
		|	ОбщиеДопРеквизитыСведения.НомерСтроки КАК НомерСтрокиДляСортировки,
		|	ВЫБОР КОГДА ОбщиеДопРеквизитыСведения.Свойство.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК ИндексКартинки
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений." + ИмяТЧ + " КАК ОбщиеДопРеквизитыСведения
		|ГДЕ
		|	ОбщиеДопРеквизитыСведения.Ссылка = &НаборОбщихСвойств";
		
	Иначе
		
		Запрос.УстановитьПараметр("НаборСвойств", НаборСвойствДопРеквизитов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДопРеквизитыСведения.Свойство КАК Свойство,
		|	ДопРеквизитыСведения.Свойство.Заголовок КАК ПредставлениеРеквизита,
		|	ЛОЖЬ КАК ОбщееСвойство,
		|	ДопРеквизитыСведения.НомерСтроки КАК НомерСтрокиДляСортировки,
		|	ВЫБОР КОГДА ДопРеквизитыСведения.Свойство.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК ИндексКартинки
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений." + ИмяТЧ + " КАК ДопРеквизитыСведения
		|ГДЕ
		|	ДопРеквизитыСведения.Ссылка = &НаборСвойств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбщиеДопРеквизитыСведения.Свойство,
		|	ОбщиеДопРеквизитыСведения.Свойство.Заголовок,
		|	ИСТИНА,
		|	ОбщиеДопРеквизитыСведения.НомерСтроки,
		|	ВЫБОР КОГДА ОбщиеДопРеквизитыСведения.Свойство.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений." + ИмяТЧ + " КАК ОбщиеДопРеквизитыСведения
		|ГДЕ
		|	ОбщиеДопРеквизитыСведения.Ссылка = &НаборОбщихСвойств";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДопРеквизитовСведений = РезультатЗапроса.Выгрузить();
	
	Если ТолькоОбщиеСвойства Тогда
		
		ТаблицаДопРеквизитовСведений.Сортировать("НомерСтрокиДляСортировки Возр");
		
		ТаблицаВсехДопРеквизитовСведений = Таблица.Выгрузить();
		ТаблицаВсехДопРеквизитовСведений.Очистить();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДопРеквизитовСведений, ТаблицаВсехДопРеквизитовСведений);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, ТаблицаВсехДопРеквизитовСведений);
		
		Таблица.Загрузить(ТаблицаВсехДопРеквизитовСведений);
		
	Иначе
		
		ТаблицаДопРеквизитовСведений.Сортировать("ОбщееСвойство Убыв, НомерСтрокиДляСортировки Возр");
		
		Таблица.Загрузить(ТаблицаДопРеквизитовСведений);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиДопРеквизитовСведений()
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопРеквизитовНоменклатуры, 
		Объект.НаборСвойств, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие,
		"Реквизиты",
		РедактируютсяОбщиеРеквизитыСведения);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопРеквизитовХарактеристик, 
		Объект.НаборСвойствХарактеристик, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
		"Реквизиты",
		РедактируютсяОбщиеРеквизитыСведения);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопРеквизитовСерий, 
		Объект.НаборСвойствСерий, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
		"Реквизиты",
		РедактируютсяОбщиеРеквизитыСведения);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопСведенийНоменклатуры, 
		Объект.НаборСвойств, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие,
		"Сведения",
		РедактируютсяОбщиеРеквизитыСведения);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопСведенийХарактеристик, 
		Объект.НаборСвойствХарактеристик, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
		"Сведения",
		РедактируютсяОбщиеРеквизитыСведения);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопСведенийСерий, 
		Объект.НаборСвойствСерий, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
		"Сведения",
		РедактируютсяОбщиеРеквизитыСведения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоРеквизитам()
	
	Для Каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		
		Справочники.ВидыНоменклатуры.ДобавитьРеквизитДляКонтроляИОтбораНоменклатуры(Объект,Реквизит,ТаблицаРеквизитовДляКонтроляНоменклатуры,ТаблицаРеквизитовОтбораНоменклатуры);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДополнительныеРеквизитыХарактеристик()
	
	МассивНаборовСвойств = Новый Массив;
	МассивНаборовСвойств.Добавить(Объект.НаборСвойствХарактеристик);
	МассивНаборовСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Наименование КАК ИмяРеквизита,
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ВЫБОР
	|		КОГДА НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОбщийРеквизит
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО НаборыДополнительныхРеквизитов.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	НЕ ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
	|	И НаборыДополнительныхРеквизитов.Ссылка В(&НаборСвойств)";
	
	Запрос.УстановитьПараметр("НаборСвойств", МассивНаборовСвойств);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ДополнительныеРеквизитыСерий()
	
	МассивНаборовСвойств = Новый Массив;
	МассивНаборовСвойств.Добавить(Объект.НаборСвойствСерий);
	МассивНаборовСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Наименование КАК ИмяРеквизита,
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ВЫБОР
	|		КОГДА НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОбщийРеквизит
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО НаборыДополнительныхРеквизитов.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	НЕ ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
	|	И НаборыДополнительныхРеквизитов.Ссылка В(&НаборСвойств)";
	
	Запрос.УстановитьПараметр("НаборСвойств", МассивНаборовСвойств);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ДополнительныеРеквизитыНоменклатуры()
	
	МассивНаборовСвойств = Новый Массив;
	МассивНаборовСвойств.Добавить(Объект.НаборСвойств);
	МассивНаборовСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Наименование КАК ИмяРеквизита,
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно,
	|	ВЫБОР
	|		КОГДА НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОбщийРеквизит
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО НаборыДополнительныхРеквизитов.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	НЕ ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
	|	И НаборыДополнительныхРеквизитов.Ссылка В(&НаборСвойств)";
	
	Запрос.УстановитьПараметр("НаборСвойств", МассивНаборовСвойств);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоДопРеквизитам()
	
	ТипыНеИспользуемыеДляКонтроля = Справочники.Номенклатура.НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы();
	
	СвойстваДляЗаполнения = "Уникален, ОбязателенДляЗаполнения, ОтображатьПриСоздании, ДоступностьУникален, ДоступностьОбязателенДляЗаполнения, ДоступностьОтображатьПриСоздании";
	
	Отбор = Новый Структура("Свойство, ЭтоДопРеквизит");
	
	УсловияДоступности = УсловияДоступности();
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ДополнительныеРеквизитыНоменклатуры = ДополнительныеРеквизитыНоменклатуры();
	
	Для Каждого СтрокаДопРеквизитовСведений Из ДополнительныеРеквизитыНоменклатуры Цикл
		
		ТипЗначения = СтрокаДопРеквизитовСведений.ТипЗначения;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаДопРеквизитовСведений);
		
		ЭтоНеиспользуемыйДляКонтроляТип = (ТипыНеИспользуемыеДляКонтроля.Найти(ТипЗначения) <> Неопределено);
		ЭтоСоставнойТипЗначения =  ЭтоСоставнойТипЗначения(ТипЗначения);
		ТипРеквизитаБулево = (ТипЗначения = ОписаниеТиповБулево);
		
		// Добавить доп.реквизит в таблицу реквизитов номенклатуры.
		СтрокаРеквизитовДляКонтроля = Объект.РеквизитыДляКонтроляНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляКонтроля, СтрокаДопРеквизитовСведений);
		Если СтрокаДопРеквизитовСведений.ЗаполнятьОбязательно Тогда
			СтрокаРеквизитовДляКонтроля.ОбязателенДляЗаполнения = Истина;
			СтрокаРеквизитовДляКонтроля.ОтображатьПриСоздании   = Истина;
		КонецЕсли;
		
		// Если реквизит был в таблице реквизитов для контроля, то заполнить свойства по существовашей записи.
		НайденныеСтроки = ТаблицаРеквизитовДляКонтроляНоменклатуры.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляКонтроля, НайденныеСтроки[0], СвойстваДляЗаполнения);
		КонецЕсли;
		
		// ... установить доступность настройки реквизитов для контроля номенклатуры.
		УсловияДоступности.ЭтоДопРеквизит = Истина;
		УсловияДоступности.ЭтоНеиспользуемыйДляКонтроляТип = ЭтоНеиспользуемыйДляКонтроляТип;
		УсловияДоступности.ТипРеквизитаБулево = ТипРеквизитаБулево;
		УсловияДоступности.ЗаполнятьОбязательно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДопРеквизитовСведений.Свойство,"ЗаполнятьОбязательно");

		УстановитьДоступностьНастройкиПолейРеквизитаДляКонтроля(СтрокаРеквизитовДляКонтроля, УсловияДоступности);
		
		// Добавить доп. реквизит в таблицу реквизитов отбора номенклатуры.
		Если Не (ЭтоНеИспользуемыйДляКонтроляТип Или ЭтоСоставнойТипЗначения) Тогда
			
			СтрокаРеквизитовДляОтбора = ТаблицаРеквизитовОтбораНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляОтбора, СтрокаДопРеквизитовСведений);
			
			НайденныеСтроки = Объект.РеквизитыБыстрогоОтбораНоменклатуры.НайтиСтроки(Отбор);
			СтрокаРеквизитовДляОтбора.Используется = (НайденныеСтроки.Количество() > 0);
			
			Если СтрокаРеквизитовДляОтбора.Используется Тогда
				ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], СтрокаДопРеквизитовСведений, "ИмяРеквизита, ПредставлениеРеквизита");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыДляКэширования()
	
	ТаблицаРеквизитовОтбораНоменклатуры.Очистить();
	ТаблицаРеквизитовДляКонтроляНоменклатуры.Очистить();
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(Объект.РеквизитыДляКонтроляНоменклатуры, ТаблицаРеквизитовДляКонтроляНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыОбъекта()
	
	Объект.РеквизитыДляКонтроляНоменклатуры.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатуры()
	
	ЗаполнитьТаблицыДляКэширования();
	
	ОчиститьТаблицыОбъекта();
	
	ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоРеквизитам();
	ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоТипуНоменклатуры();
	
	ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоДопРеквизитам();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДляКонтроляИОтбораХарактеристик()
	
	Если Не (Объект.ИспользоватьХарактеристики И ЗначениеЗаполнено(Объект.НаборСвойствХарактеристик)) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить правила заполнения для доп.реквизитов.
	ТипыНеИспользуемыеДляКонтроля = Справочники.Номенклатура.НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы();
	
	Отбор = Новый Структура("Свойство, ЭтоДопРеквизит");
	УсловияДоступности = УсловияДоступности();
	
	ТаблицаРеквизитовОтбораХарактеристик.Очистить();
	ТаблицаРеквизитовДляКонтроляХарактеристик = Объект.РеквизитыДляКонтроляХарактеристик.Выгрузить();
	
	Объект.РеквизитыДляКонтроляХарактеристик.Очистить();
	
	// Получить список доп.реквизитов характеристик (набора свойств и общего набора свойств).
	СвойстваДляЗаполнения = "Уникален, ОбязателенДляЗаполнения, ОтображатьПриСоздании, 
	                        |ДоступностьУникален, ДоступностьОбязателенДляЗаполнения, ДоступностьОтображатьПриСоздании";
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	МассивНаборовСвойств = Новый Массив;
	МассивНаборовСвойств.Добавить(Объект.НаборСвойствХарактеристик);
	МассивНаборовСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаборСвойств", МассивНаборовСвойств);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Наименование КАК ИмяРеквизита,
	|	ДополнительныеРеквизитыИСведения.Заголовок    КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно,
	|	ВЫБОР
	|		КОГДА НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОбщийРеквизит
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО НаборыДополнительныхРеквизитов.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	Не ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
	|	И НаборыДополнительныхРеквизитов.Ссылка В(&НаборСвойств)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТипЗначения = Выборка.ТипЗначения;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		
		ЭтоНеиспользуемыйДляКонтроляТип = (ТипыНеИспользуемыеДляКонтроля.Найти(ТипЗначения) <> Неопределено);
		ЭтоСоставнойТипЗначения         = ЭтоСоставнойТипЗначения(Выборка.ТипЗначения);
		ТипРеквизитаБулево              = (ТипЗначения = ОписаниеТиповБулево);
		
		// Добавить доп.реквизит в таблицу реквизитов для контроля характеристик.
		СтрокаРеквизитовДляКонтроля = Объект.РеквизитыДляКонтроляХарактеристик.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляКонтроля, Выборка);
		Если Выборка.ЗаполнятьОбязательно Тогда
			СтрокаРеквизитовДляКонтроля.ОбязателенДляЗаполнения = Истина;
			СтрокаРеквизитовДляКонтроля.ОтображатьПриСоздании   = Истина;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаРеквизитовДляКонтроляХарактеристик.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаТаблицы = НайденныеСтроки[0];
			
			ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляКонтроля, СтрокаТаблицы, СвойстваДляЗаполнения);
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, "ИмяРеквизита, ПредставлениеРеквизита");
			
		КонецЕсли;
		
		// ... установить доступность настройки реквизитов для контроля номенклатуры.
		УсловияДоступности.ЭтоДопРеквизит                  = Истина;
		УсловияДоступности.ЭтоНеиспользуемыйДляКонтроляТип = ЭтоНеиспользуемыйДляКонтроляТип;
		УсловияДоступности.ТипРеквизитаБулево              = ТипРеквизитаБулево;
		УсловияДоступности.ЗаполнятьОбязательно 		   = Выборка.ЗаполнятьОбязательно;
		
		УстановитьДоступностьНастройкиПолейРеквизитаДляКонтроля(СтрокаРеквизитовДляКонтроля, УсловияДоступности);
		
		// Добавить доп.реквизит в таблицу реквизитов для отбора характеристик.
		Если Не ЭтоНеиспользуемыйДляКонтроляТип И Не ЭтоСоставнойТипЗначения Тогда
			
			СтрокаРеквизитовДляОтбора = ТаблицаРеквизитовОтбораХарактеристик.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляОтбора, Выборка);
			
			НайденныеСтроки = Объект.РеквизитыБыстрогоОтбораХарактеристик.НайтиСтроки(Отбор);
			СтрокаРеквизитовДляОтбора.Используется = (НайденныеСтроки.Количество() > 0);
			
			Если СтрокаРеквизитовДляОтбора.Используется Тогда
				ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], Выборка, "ИмяРеквизита, ПредставлениеРеквизита");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДляКонтроляИОтбораСерий()
	
	Если Не (Объект.ИспользоватьСерии И ЗначениеЗаполнено(Объект.НаборСвойствСерий)) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить правила заполнения для доп.реквизитов.
	ТипыНеИспользуемыеДляКонтроля = Справочники.Номенклатура.НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы();
	
	Отбор = Новый Структура("Свойство, ЭтоДопРеквизит");
	
	ТаблицаРеквизитовДляКонтроляСерий = Объект.РеквизитыДляКонтроляСерий.Выгрузить();
	Объект.РеквизитыДляКонтроляСерий.Очистить();
	
	// Получить список доп.реквизитов серий (набора свойств и общего набора свойств).
	СвойстваДляЗаполнения = "ОбязателенДляЗаполнения, ДоступностьОбязателенДляЗаполнения";
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	МассивНаборовСвойств = Новый Массив;
	МассивНаборовСвойств.Добавить(Объект.НаборСвойствСерий);
	МассивНаборовСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаборСвойств", МассивНаборовСвойств);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Наименование КАК ИмяРеквизита,
	|	ДополнительныеРеквизитыИСведения.Заголовок    КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно,
	|	ВЫБОР
	|		КОГДА НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОбщийРеквизит
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО НаборыДополнительныхРеквизитов.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	Не ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
	|	И НаборыДополнительныхРеквизитов.Ссылка В(&НаборСвойств)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТипЗначения = Выборка.ТипЗначения;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		
		ЭтоНеиспользуемыйДляКонтроляТип = (ТипыНеИспользуемыеДляКонтроля.Найти(ТипЗначения) <> Неопределено);
		ЭтоСоставнойТипЗначения         = ЭтоСоставнойТипЗначения(Выборка.ТипЗначения);
		ТипРеквизитаБулево              = (ТипЗначения = ОписаниеТиповБулево);
		
		// Добавить доп.реквизит в таблицу реквизитов для контроля серий.
		СтрокаРеквизитовДляКонтроля = Объект.РеквизитыДляКонтроляСерий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляКонтроля, Выборка);
		Если Выборка.ЗаполнятьОбязательно Тогда
			СтрокаРеквизитовДляКонтроля.ОбязателенДляЗаполнения = Истина;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаРеквизитовДляКонтроляСерий.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаТаблицы = НайденныеСтроки[0];
			
			ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляКонтроля, СтрокаТаблицы, СвойстваДляЗаполнения);
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, "ИмяРеквизита, ПредставлениеРеквизита");
			
		КонецЕсли;
		
		СтрокаРеквизитовДляКонтроля.ДоступностьОбязателенДляЗаполнения = НЕ ТипРеквизитаБулево;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()

	Для каждого ДанныеСтроки Из Объект.ПолитикиУчетаСерий Цикл
		ДанныеСтроки.ЭтоПолитикаДляСклада = ТипЗнч(ДанныеСтроки.Склад) = Тип("СправочникСсылка.Склады");
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьНастройкиПолейРеквизитаДляКонтроля(СтрокаРеквизитаДляКонтроля, УсловияДоступности)
	
	СтрокаРеквизитаДляКонтроля.ДоступностьУникален = Истина;
	СтрокаРеквизитаДляКонтроля.ДоступностьОбязателенДляЗаполнения = Истина;
	СтрокаРеквизитаДляКонтроля.ДоступностьОтображатьПриСоздании = Истина;
	
	Если УсловияДоступности.ЭтоДопРеквизит Тогда
		СтрокаРеквизитаДляКонтроля.ДоступностьУникален = (Не УсловияДоступности.ЭтоНеиспользуемыйДляКонтроляТип);
		СтрокаРеквизитаДляКонтроля.ДоступностьОбязателенДляЗаполнения = (Не УсловияДоступности.ТипРеквизитаБулево И Не СтрокаРеквизитаДляКонтроля.Уникален И Не УсловияДоступности.ЗаполнятьОбязательно);
		СтрокаРеквизитаДляКонтроля.ДоступностьОтображатьПриСоздании = (Не СтрокаРеквизитаДляКонтроля.ОбязателенДляЗаполнения И Не УсловияДоступности.ЗаполнятьОбязательно);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()

	#Область ЗначенияФО
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	Если Не ИспользоватьНесколькоСкладов Тогда
		
		Для каждого ДанныеСтроки Из Объект.ПолитикиУчетаСерий Цикл
			Если ТипЗнч(ДанныеСтроки.Склад) = Тип("СправочникСсылка.Склады") Тогда
				Склад = ДанныеСтроки.Склад;
				ПолитикаУчетаСерий = ДанныеСтроки.ПолитикаУчетаСерий;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	КонецЕсли;
	
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	ИспользоватьМногооборотнуюТару = ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару");
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач", Новый Структура("Склад", Склад));
	ИспользоватьПродажуАгентскихУслуг = ПолучитьФункциональнуюОпцию("ИспользоватьПродажуАгентскихУслуг");
	ИспользоватьТоварныеКатегории = ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории"); 
	ИспользоватьПроизводство = Ложь; //Для УТ
	//++ НЕ УТ
	ИспользоватьПроизводство = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	//-- НЕ УТ
	
	ИспользоватьСкладскиеГруппыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение", Новый Структура); 
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	#КонецОбласти

	#Область ТипНоменклатуры
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ЭтоРабота = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоУслуга = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоНабор = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор);
	
	Элементы.ТипНоменклатуры.Подсказка = Перечисления.ТипыНоменклатуры.ПодсказкаПоТипуНоменклатуры(Объект.ТипНоменклатуры);
	
	ИспользоватьОбщиеХарактеристики = (Объект.ИспользованиеХарактеристик
										= ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры"));
	
	ИспользоватьХарактеристикиИзДругогоВида = (Объект.ИспользованиеХарактеристик
										= ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры"));
										
	#КонецОбласти
	
	#Область НесколькоВидов
	НесколькоВидовНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры");
	
	Элементы.СтраницаНастройкиПанелиБыстрогоОтбора.Видимость 	= НесколькоВидовНоменклатуры;
	Элементы.Родитель.Видимость 								= НесколькоВидовНоменклатуры;
	Элементы.Описание.Видимость 								= НесколькоВидовНоменклатуры;
	Элементы.ТипНоменклатуры.Видимость 							= НесколькоВидовНоменклатуры;
	Элементы.ПодменюПерейти.Видимость							= НесколькоВидовНоменклатуры;
	
	#КонецОбласти
	
	#Область ТТН
	Элементы.ИспользоватьИндивидуальноеНаименование.Видимость = (ЭтоТовар или ЭтоМногооборотнаяТара) И НесколькоВидовНоменклатуры;
	Элементы.ОбщееНаименованиеДляПечати.Видимость = (ЭтоТовар или ЭтоМногооборотнаяТара) И НесколькоВидовНоменклатуры;
	Элементы.НаименованиеДляПечати.Видимость = (ЭтоТовар или ЭтоМногооборотнаяТара) И НесколькоВидовНоменклатуры;
	Элементы.ГруппаНаименованиеДляПечатиКолонкиЗаголовок.Видимость = (ЭтоТовар или ЭтоМногооборотнаяТара) И НесколькоВидовНоменклатуры;
	#КонецОбласти
	
	#Область ОказаниеИОоформлениеУслуг
	Элементы.ВариантОказанияУслуг.Видимость     = ЭтоУслуга И ИспользоватьПродажуАгентскихУслуг;
	Элементы.ВариантОформленияПродажи.Видимость = (ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав") И ЭтоТовар)
													Или ЭтоУслуга
													Или ЭтоРабота;
													
	СписокВыбораВариантовОформления = Элементы.ВариантОформленияПродажи.СписокВыбора;
	СписокВыбораВариантовОформления.Очистить();
	
	СписокВыбораВариантовОформления.Добавить(Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
	Если ЭтоУслуга Или ЭтоРабота Тогда
		СписокВыбораВариантовОформления.Добавить(Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАктыНаПередачуПрав")
		И Не ЭтоМногооборотнаяТара Тогда
		СписокВыбораВариантовОформления.Добавить(Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав);
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоОрганизаций Тогда
		ЭлементСписка = Элементы.ВариантОказанияУслуг.СписокВыбора.НайтиПоЗначению(Перечисления.ВариантыОказанияУслуг.ОрганизациейПоАгентскойСхеме);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ВариантОказанияУслуг.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
												
	#Область Набор
	Элементы.ВариантРасчетаЦеныНабора.Видимость = ЭтоНабор;
	Элементы.ВариантПредставленияНабораВПечатныхФормах.Видимость = ЭтоНабор;
	Элементы.ГруппаФинансовогоУчета.Видимость = Не ЭтоНабор;
	#КонецОбласти
	
	#Область Товар
	Элементы.ВестиУчетПоГТД.Видимость = ЭтоТовар;
	Элементы.ПодакцизныйТовар.Видимость = ЭтоТовар;
	Элементы.ВестиУчетСертификатовНоменклатуры.Видимость = ЭтоТовар;
	#КонецОбласти
	
	#Область Работа
	Элементы.СпособОбеспеченияПотребностей.Видимость = ЭтоРабота;
	#КонецОбласти
	
	#Область Тара
	
	ДоступностьТары = ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) 
		И Не Объект.ИспользоватьУпаковки
		И Не Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения);
	
	Элементы.ПоставляетсяВМногооборотнойТаре.Видимость = ИспользоватьМногооборотнуюТару
														И ЭтоТовар;

	Элементы.ПоставляетсяВМногооборотнойТаре.Доступность = Элементы.ПоставляетсяВМногооборотнойТаре.Видимость
															И ДоступностьТары;
	
	Элементы.НоменклатураМногооборотнаяТара.Видимость = Элементы.ПоставляетсяВМногооборотнойТаре.Доступность
														И Объект.ПоставляетсяВМногооборотнойТаре;
														
	Элементы.ХарактеристикаМногооборотнаяТара.Видимость = Элементы.НоменклатураМногооборотнаяТара.Видимость
															И ИспользоватьХарактеристикиНоменклатуры;
	
	ЕстьХарактеристикиТары = Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.НоменклатураМногооборотнаяТара);
	
	Элементы.ХарактеристикаМногооборотнаяТара.Доступность =	ЕстьХарактеристикиТары;
	
	Элементы.ТараОтступ.Видимость = Элементы.ПоставляетсяВМногооборотнойТаре.Видимость
									И Объект.ПоставляетсяВМногооборотнойТаре;
															
	#КонецОбласти
	
	#Область ТоварИлиТара
	Элементы.СхемаОбеспечения.Видимость = ЭтоТовар или ЭтоТовар;
	#КонецОбласти
	
	#Область ТоварИлиРабота
	Элементы.ОбособленнаяЗакупкаПродажа.Видимость = ЭтоТовар Или ЭтоРабота;
	#КонецОбласти
	
	#Область ТоварныеКатегории
	Элементы.ДекорацияТоварныеКатегории.Видимость = ИспользоватьТоварныеКатегории;
	Элементы.НастройкиТоварныхКатегорий.Видимость = ИспользоватьТоварныеКатегории;
	Элементы.ВладелецТоварныхКатегорий.Видимость = ИспользоватьТоварныеКатегории;
	СформироватьНадписьПоВидуВладельцу("ТоварныхКатегорий");
	#КонецОбласти
	
	#Область Характеристики
	Элементы.ИспользоватьХарактеристики.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	Элементы.ИспользованиеХарактеристик.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	
	Элементы.ИспользованиеХарактеристик.Доступность = Объект.ИспользоватьХарактеристики;
	
	Элементы.РеквизитыБыстрогоОтбораХарактеристик.Видимость = Объект.ИспользоватьХарактеристики И Не ИспользоватьХарактеристикиИзДругогоВида;
	Элементы.ТаблицаДопРеквизитовХарактеристик.Видимость = Объект.ИспользоватьХарактеристики И Не ИспользоватьХарактеристикиИзДругогоВида;
	Элементы.ТаблицаДопСведенийХарактеристик.Видимость = Объект.ИспользоватьХарактеристики И Не ИспользоватьХарактеристикиИзДругогоВида;
	Элементы.ТаблицаДопСведенийХарактеристик.Видимость = Объект.ИспользоватьХарактеристики И Не ИспользоватьХарактеристикиИзДругогоВида;
	Элементы.ГруппаРеквизитыДляКонтроляХарактеристик.Видимость = Объект.ИспользоватьХарактеристики И Не ИспользоватьХарактеристикиИзДругогоВида;
	Элементы.ГруппаШаблоныНаименованийХарактеристик.Видимость = Объект.ИспользоватьХарактеристики И Не ИспользоватьХарактеристикиИзДругогоВида;
	
	Элементы.ВладелецХарактеристик.Видимость = ИспользоватьХарактеристикиНоменклатуры;
	
	Элементы.ПоказатьРеквизитыДляКонтроляХарактеристик.Видимость = Объект.ИспользоватьХарактеристики И Не ИспользоватьХарактеристикиИзДругогоВида;
	СформироватьНадписьПоВидуВладельцу("Характеристик");
	#КонецОбласти
	
	#Область Серии	                    
	Элементы.ИспользоватьСерии.Видимость = (ЭтоТовар
											Или ЭтоМногооборотнаяТара)
											И ИспользоватьСерииНоменклатуры;
	Элементы.ВариантЗаданияНастроекСерий.Видимость = (ЭтоТовар
													Или ЭтоМногооборотнаяТара)
													И ИспользоватьСерииНоменклатуры;
	Элементы.ВариантЗаданияНастроекСерий.Доступность = Объект.ИспользоватьСерии;
	
	Элементы.НастройкаИспользованияСерий.Видимость = Объект.ИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	Элементы.НастройкаИспользованияСерий.Доступность = ЭтоТовар;
	
	Элементы.ДекорацияСерияИдентифицирует.Видимость = Элементы.НастройкаИспользованияСерий.Видимость;
	
	Элементы.ВладелецСерий.Видимость = (ЭтоТовар Или ЭтоМногооборотнаяТара) И ИспользоватьСерииНоменклатуры;
	
	Элементы.НастройкаСерийПоСкладам1.Видимость = Объект.ИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
													И ИспользоватьНесколькоСкладов;
	Элементы.НастройкаСерийПоСкладам2.Видимость = Объект.ИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
													И ИспользоватьНесколькоСкладов;
	Элементы.ПолитикаУчетаСерийНаСкладах.Видимость = Объект.ИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
													И ИспользоватьНесколькоСкладов;
	Элементы.ПолитикаУчетаСерийНаСкладах.Доступность = Объект.ЕдинаяНастройкаСерийДляСкладов;
	Элементы.ПолитикаУчетаСерийНаСкладах.АвтоОтметкаНезаполненного = Объект.ЕдинаяНастройкаСерийДляСкладов;
	
	Элементы.ПодсказкаНастройкаСерийПоСкладам1.Видимость = Элементы.НастройкаСерийПоСкладам1.Видимость
															И ЕстьСкладыБезОрдернойСхемы
															И Объект.ЕдинаяНастройкаСерийДляСкладов;
													
	Элементы.НастройкаСерийПоПозраделениям1.Видимость = Объект.ИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
													И ИспользоватьПроизводство;
	Элементы.НастройкаСерийПоПозраделениям2.Видимость = Объект.ИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
													И ИспользоватьПроизводство;
	Элементы.ПолитикаУчетаСерийНаВПодраделениях.Видимость = Объект.ИспользоватьСерии
													И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
													И ИспользоватьПроизводство;
													
	Элементы.ПолитикаУчетаСерийНаВПодраделениях.Доступность = Объект.ЕдинаяНастройкаСерийДляПодразделений;
	Элементы.ПолитикаУчетаСерийНаВПодраделениях.АвтоОтметкаНезаполненного = Объект.ЕдинаяНастройкаСерийДляПодразделений;
													
	Элементы.ТочностьУказанияСрокаГодностиСерии.Видимость = Объект.ИспользоватьСерии И Объект.ИспользоватьСрокГодностиСерии И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	Элементы.НадписьДляЭкземпляровТолькоСправочноеУказание.Видимость = 
			Объект.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара")
			И Объект.ИспользоватьСерии
			И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры; 
			
	Элементы.ПолитикаУчетаСерий.Видимость = Объект.ИспользоватьСерии
											И Не ИспользоватьНесколькоСкладов
											И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	Элементы.НадписьПодсказкаПолитикиУчетаСерийОдинСклад.Видимость =  Объект.ИспользоватьСерии
																		И Не ИспользоватьНесколькоСкладов
																		И Не ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
																		И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	Элементы.ПолитикиУчетаСерий.Видимость = Объект.ИспользоватьСерии
								И (ИспользоватьНесколькоСкладов Или ИспользоватьПроизводство)
								И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
								И (Не Объект.ЕдинаяНастройкаСерийДляПодразделений
								Или Не Объект.ЕдинаяНастройкаСерийДляСкладов);
								
	Элементы.ПолитикиУчетаСерийДобавитьСкладВПолитикиУчетаСерий.Видимость = ИспользоватьНесколькоСкладов
																			И ИспользоватьПроизводство
																			И Не Объект.ЕдинаяНастройкаСерийДляСкладов
																			И Не Объект.ЕдинаяНастройкаСерийДляПодразделений;
	Элементы.ПолитикиУчетаСерийДобавитьПодразделениеВПолитикиУчетаСерий.Видимость = ИспользоватьПроизводство
																					И ИспользоватьНесколькоСкладов
																					И Не Объект.ЕдинаяНастройкаСерийДляСкладов
																					И Не Объект.ЕдинаяНастройкаСерийДляПодразделений;
	
	Элементы.ПолитикиУчетаСерийДобавить.Видимость = Не Элементы.ПолитикиУчетаСерийДобавитьСкладВПолитикиУчетаСерий.Видимость
													И Не Элементы.ПолитикиУчетаСерийДобавитьПодразделениеВПолитикиУчетаСерий.Видимость;
	
	Если ИспользоватьНесколькоСкладов
		И ИспользоватьПроизводство
		И Не (Объект.ЕдинаяНастройкаСерийДляПодразделений
		 Или Объект.ЕдинаяНастройкаСерийДляСкладов)Тогда 
		Элементы.ПолитикиУчетаСерийСклад.Заголовок = НСтр("ru='Склад или подразделение';uk='Склад або підрозділ'");
		Элементы.ПолитикиУчетаСерийСклад.Подсказка = НСтр("ru='Склад или подразделение, в котором ведется учет по сериям';uk='Склад чи підрозділ, в якому ведеться облік по серіях'");
		Элементы.ПолитикиУчетаСерий.ОтборСтрок = Неопределено;
		Элементы.ПолитикиУчетаСерийСклад.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады,СправочникСсылка.СтруктураПредприятия");
	ИначеЕсли ИспользоватьНесколькоСкладов
		И Не Объект.ЕдинаяНастройкаСерийДляСкладов Тогда
		Элементы.ПолитикиУчетаСерийСклад.Заголовок = НСтр("ru='Склад';uk='Склад'");
		Элементы.ПолитикиУчетаСерийСклад.Подсказка = НСтр("ru='Склад, в котором ведется учет по сериям';uk='Склад, в якому ведеться облік по серіях'");
		Элементы.ПолитикиУчетаСерийСклад.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Элементы.ПолитикиУчетаСерий.ОтборСтрок = Новый ФиксированнаяСтруктура("ЭтоПолитикаДляСклада", Истина);
	Иначе
		Элементы.ПолитикиУчетаСерийСклад.Заголовок = НСтр("ru='Подразделение';uk='Підрозділ'");
		Элементы.ПолитикиУчетаСерийСклад.Подсказка = НСтр("ru='Подразделение, в котором ведется учет по сериям';uk='Підрозділ, в якому ведеться облік по серіях'");
		Элементы.ПолитикиУчетаСерийСклад.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		Элементы.ПолитикиУчетаСерий.ОтборСтрок = Новый ФиксированнаяСтруктура("ЭтоПолитикаДляСклада", Ложь);
	КонецЕсли;	
	
	Элементы.ГруппаРеквизитыДляКонтроляСерий.Видимость = Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	Элементы.ГруппаШаблоныНаименованийСерий.Видимость = Объект.ИспользоватьСерии  И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	Элементы.ТаблицаДопРеквизитовСерий.Видимость = Объект.ИспользоватьСерии  И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	Элементы.ТаблицаДопСведенийСерий.Видимость = Объект.ИспользоватьСерии  И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	Элементы.ШаблонЭтикеткиСерии.Видимость     = Объект.ИспользоватьСерии;
	
	Элементы.ПоказатьРеквизитыДляКонтроляСерий.Видимость = Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры;
	
	Элементы.ПоказатьРеквизитыДляКонтроляНоменклатуры.Видимость = (Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры)
																	или (Объект.ИспользоватьХарактеристики И Не ИспользоватьХарактеристикиИзДругогоВида);
	
	//Отработка запрета редактирования																
	Элементы.ВариантЗаданияНастроекСерий.ТолькоПросмотр = Элементы.НастройкаИспользованияСерий.ТолькоПросмотр;
	Элементы.НастройкаСерийПоСкладам1.ТолькоПросмотр = Элементы.НастройкаИспользованияСерий.ТолькоПросмотр;
	Элементы.НастройкаСерийПоСкладам2.ТолькоПросмотр = Элементы.НастройкаИспользованияСерий.ТолькоПросмотр;
	Элементы.НастройкаСерийПоПозраделениям1.ТолькоПросмотр = Элементы.НастройкаИспользованияСерий.ТолькоПросмотр;
	Элементы.НастройкаСерийПоПозраделениям2.ТолькоПросмотр = Элементы.НастройкаИспользованияСерий.ТолькоПросмотр;
																		
	СформироватьНадписьПоВидуВладельцу("Серий");
	#КонецОбласти
	
	ОбновитьДоступностьЭлементовАкцизныйНалог(ЭтаФорма);
	ОбновитьДоступностьЭлементовПоСтавкеНДС(ЭтаФорма);
	
	#Область Упаковки
	ИндивидуальныйНаборУпаковок = Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
		
	Элементы.ИспользоватьУпаковки.Видимость = ИспользоватьУпаковкиНоменклатуры И ЭтоТовар;
	Элементы.НаборУпаковок.Видимость = Объект.ИспользоватьУпаковки И Не ИндивидуальныйНаборУпаковок;
	Элементы.НаборУпаковокОтступ.Видимость = Объект.ИспользоватьУпаковки;
	Элементы.ИспользованиеУпаковок1.Видимость = Объект.ИспользоватьУпаковки;
	Элементы.ИспользованиеУпаковок2.Видимость = Объект.ИспользоватьУпаковки;
	#КонецОбласти
	
	#Область ЕдиницаИзмерения
	Если ЭтоУслуга
	 Или ЭтоРабота
	 Или ЭтоНабор Тогда
		ЗаголовокЕдиницыИзмерения = НСтр("ru='Ед. измерения';uk='Од. вимірювання'");
		ЗаголовоеГруппыЕдиницаИзмерения = НСтр("ru='Единицы измерения';uk='Одиниці вимірювання'");
	Иначе
		ЗаголовокЕдиницыИзмерения = НСтр("ru='Ед. хранения';uk='Од. зберігання'");
		ЗаголовоеГруппыЕдиницаИзмерения = НСтр("ru='Единицы измерения и условия хранения';uk='Одиниці вимірювання та умови зберігання'");
	КонецЕсли;
	Элементы.ЕдиницаИзмерения.Заголовок                       = ЗаголовокЕдиницыИзмерения;
	Элементы.ГруппаЕдиницыИзмеренияИУсловияХранения.Заголовок = ЗаголовоеГруппыЕдиницаИзмерения; 
	
	Элементы.ЕдиницаДляОтчетов.Видимость = Не ЭтоНабор И ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмеренияДляОтчетов");
	
	ЕдиницаИзмеренияДоступна = 
		Не (ИспользоватьУпаковкиНоменклатуры
			И Объект.ИспользоватьУпаковки
			И Не ИндивидуальныйНаборУпаковок)
		Или Не ЗначениеЗаполнено(Объект.НаборУпаковок);
		
	Элементы.ЕдиницаИзмерения.Доступность = ЕдиницаИзмеренияДоступна;

	Элементы.КоэффициентЕдиницыДляОтчетов.Видимость = Элементы.ЕдиницаДляОтчетов.Видимость
													И ЗначениеЗаполнено(Объект.ЕдиницаДляОтчетов)
													И Объект.ЕдиницаДляОтчетов <> Объект.ЕдиницаИзмерения;
													
	Элементы.ЕдиницаДляОтчетовЕдиницаИзмеренияНадпись.Видимость = Элементы.КоэффициентЕдиницыДляОтчетов.Видимость;
	
	Элементы.ЗаголовокЕдиницаДляОтчетов.Видимость = Элементы.ЕдиницаДляОтчетов.Видимость;
	Элементы.ОтступЕдиницаДляОтчетов.Видимость    = Элементы.ЕдиницаДляОтчетов.Видимость;
	
	#КонецОбласти
	
	#Область СкладскаяГруппа
	Элементы.СкладскаяГруппа.Видимость = ЭтоТовар Или ЭтоМногооборотнаяТара И ИспользоватьСкладскиеГруппыНоменклатуры;
	#КонецОбласти
	
	#Область ШаблоныНаименованийИНастройкаРеквизитовНоменклатуры
	Элементы.ГруппаНастройкиСозданияПереключатели.Видимость =  (Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры)
																	или (Объект.ИспользоватьХарактеристики И Не ИспользоватьХарактеристикиИзДругогоВида);
	
	Элементы.ГруппаНастройкиСозданияСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизитыДляКонтроляНоменклатуры;
	УстановитьОформлениеНажатойГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляНоменклатуры, ЦветТекстаФормы);
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляХарактеристик);	
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляСерий);	
	
	Элементы.ГруппаШаблоныНаименованийНоменклатуры.Поведение = ?((Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры)
																	или (Объект.ИспользоватьХарактеристики И Не ИспользоватьХарактеристикиИзДругогоВида),
																				ПоведениеОбычнойГруппы.Свертываемая,
																				ПоведениеОбычнойГруппы.Обычное);	
																				
	Элементы.ГруппаШаблоныНаименованийНоменклатуры.ОтображатьЗаголовок = (Объект.ИспользоватьСерии И Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры)
																	или (Объект.ИспользоватьХарактеристики И Не ИспользоватьХарактеристикиИзДругогоВида);
	
	НастроитьПоШаблонуНаименования("РабочегоНаименованияНоменклатуры"); 
	НастроитьПоШаблонуНаименования("НаименованияДляПечатиНоменклатуры"); 
	НастроитьПоШаблонуНаименования("РабочегоНаименованияХарактеристики"); 
	НастроитьПоШаблонуНаименования("НаименованияДляПечатиХарактеристики"); 
	НастроитьПоШаблонуНаименования("РабочегоНаименованияСерии"); 
	
	Элементы.РедактироватьШаблонНаименованияДляПечатиНоменклатуры.Доступность   = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.РедактироватьШаблонНаименованияДляПечатиХарактеристики.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.РедактироватьШаблонРабочегоНаименованияНоменклатуры.Доступность    = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.РедактироватьШаблонРабочегоНаименованияХарактеристики.Доступность  = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.РедактироватьШаблонРабочегоНаименованияСерии.Доступность           = Не ЭтаФорма.ТолькоПросмотр;
		
	Если ИспользоватьИндивидуальноеНаименование = "ИспользоватьИндивидуальноеНаименование" Тогда
		Элементы.НаименованиеДляПечати.Доступность = Истина;
	Иначе
		Элементы.НаименованиеДляПечати.Доступность = Ложь;
	КонецЕсли;
	#КонецОбласти

	
	#Область ДопРеквизитыИДопСведения
	Элементы.СтраницаДопРеквизиты.Видимость = ИспользоватьДополнительныеРеквизитыИСведения;
	Элементы.СтраницаДопСведения.Видимость = ИспользоватьДополнительныеРеквизитыИСведения;

	НесколькоВидовДопРеквизитовСведений =
		ПолучитьФункциональнуюОпцию("ИспользоватьОбщиеДополнительныеЗначения")
	 	ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОбщиеДополнительныеРеквизитыИСведения");
	ЕстьПравоДобавленияРеквизитов = ПравоДоступа("Добавление", Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения);
	
	Элементы.НоменклатураСоздатьНовыйРеквизит.Видимость 	= НЕ НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.НоменклатураГруппаСоздатьРеквизиты.Видимость 	= НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.ХарактеристикиСоздатьНовыйРеквизит.Видимость 	= НЕ НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.ХарактеристикиГруппаСоздатьРеквизиты.Видимость = НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.СерииСоздатьНовыйРеквизит.Видимость 			= НЕ НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.СерииГруппаСоздатьРеквизиты.Видимость 			= НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.НоменклатураСоздатьНовоеСведение.Видимость 	= НЕ НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.НоменклатураГруппаСоздатьСведения.Видимость 	= НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.ХарактеристикиСоздатьНовоеСведение.Видимость 	= НЕ НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.ХарактеристикиГруппаСоздатьСведения.Видимость  = НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.СерииСоздатьНовоеСведение.Видимость 			= НЕ НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	Элементы.СерииГруппаСоздатьСведения.Видимость 			= НесколькоВидовДопРеквизитовСведений И ЕстьПравоДобавленияРеквизитов;
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоШаблонуНаименования(ЗначащаяЧастьИмениШаблона)
	Если Не ПустаяСтрока(Объект["Шаблон" + ЗначащаяЧастьИмениШаблона]) Тогда
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].Заголовок  = Объект["Шаблон" + ЗначащаяЧастьИмениШаблона];
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].ЦветТекста = ЦветаСтиля.ЦветТекстаФормы; 
	Иначе	
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].Заголовок = НСтр("ru='<шаблон не задан>';uk='<шаблон не заданий>'");
		Элементы["НадписьШаблон" + ЗначащаяЧастьИмениШаблона].ЦветТекста = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет; 
	КонецЕсли;
	
	Если СтрНайти(ЗначащаяЧастьИмениШаблона, "Серии") = 0 Тогда
		Элементы["ЗапретРедактирования" + ЗначащаяЧастьИмениШаблона].Доступность = 
						Не ПустаяСтрока(Объект["Шаблон" + ЗначащаяЧастьИмениШаблона]);
	КонецЕсли;
					
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	ЕстьСкладыБезОрдернойСхемы = СкладыСервер.ЕстьСкладыБезОрдернойСхемыПриОтраженииИзлишковНедостач();
	
	// Подсистема запрета редактирования ключевых реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	Элементы.НастройкиТоварныхКатегорий.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Ссылка);
	                                                                        
	// Сбросить флаг редактирования общих дополнительных реквизитов (сведений).
	РедактируютсяОбщиеРеквизитыСведения = Ложь;
	
	ОбщееНаименованиеДляПечати = Константы.НаименованиеДляПечатиВидовНоменклатуры.Получить();
	ОбщееНаименованиеДляПечати = ?(ЗначениеЗаполнено(ОбщееНаименованиеДляПечати), ОбщееНаименованиеДляПечати, НСтр("ru='<не указано>';uk='<не вказано>'"));
	
	Если Объект.ИспользоватьИндивидуальноеНаименованиеПриПечати Тогда
		ИспользоватьИндивидуальноеНаименование = "ИспользоватьИндивидуальноеНаименование";
	Иначе
		ИспользоватьИндивидуальноеНаименование = "ИспользоватьНаименованиеИзКонстанты";
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты();
	ПостроитьДеревоОператоров();
	ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатуры();
	ЗаполнитьРеквизитыДляКонтроляИОтбораХарактеристик();
	ЗаполнитьРеквизитыДляКонтроляИОтбораСерий();
	ЗаполнитьСпискиДопРеквизитовСведений();
	
	// Установить текущую настройку использования серий.
	ТекущаяНастройкаИспользованияСерий = Объект.НастройкаИспользованияСерий;
	
	Если Объект.ИспользоватьСерии Тогда
		Если Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры Тогда
			ВариантЗаданияНастроекСерий = "ИспользуютсяТакжеКакВДругомВидеНоменклатуры";
		Иначе
			ВариантЗаданияНастроекСерий = "НастроеныДляВидаНоменклатуры";
		КонецЕсли;
	Иначе
		ВариантЗаданияНастроекСерий = "";
	КонецЕсли;
	
	Если Объект.ЕдинаяНастройкаСерийДляСкладов Тогда
		НастройкаСерийПоСкладам = "ОднаПолитикаДляВсехСкладов";
	Иначе
		НастройкаСерийПоСкладам = "РазныеПолитикиДляСкладов";
	КонецЕсли;
	
	Если Объект.ЕдинаяНастройкаСерийДляПодразделений Тогда
		НастройкаСерийПоПозраделениям = "ОднаПолитикаДляВсехПодразделений";
	Иначе
		НастройкаСерийПоПозраделениям = "РазныеПолитикиДляПодразделений";
	КонецЕсли;	
	
	Если Объект.ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры Тогда
		НастройкаТоварныхКатегорий = "ОбщиеСДругимВидомНоменклатуры";
	Иначе
		НастройкаТоварныхКатегорий = "НастроеныДляЭтогоВидаНоменклатуры";
	КонецЕсли;	
	
	Если Объект.ИспользоватьУпаковки Тогда
		Если Объект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
			ИспользованиеУпаковок = "ИндивидуальныйНабор";
		Иначе
			ИспользованиеУпаковок = "ОбщийНабор";
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокВидовНоменклатурыСТемжеВладельцем("ТоварныхКатегорий");
	ЗаполнитьСписокВидовНоменклатурыСТемжеВладельцем("Характеристик");
	ЗаполнитьСписокВидовНоменклатурыСТемжеВладельцем("Серий");
	
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ТипНоменклатурыПриИзмененииСервер()
	
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоРабота = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ЭтоУслуга = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	
	Если ЭтоТовар
		Или ЭтоМногооборотнаяТара Тогда
		
		УстановитьНастройкуИспользованияСерий();
		
		Объект.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		
	Иначе
		Объект.ИспользоватьСерии = Ложь;
		Объект.ПолитикиУчетаСерий.Очистить();
		Объект.ПолитикаУчетаСерийДляСкладов = Справочники.ПолитикиУчетаСерий.ПустаяСсылка();
		Объект.ПолитикаУчетаСерийДляПодразделений = Справочники.ПолитикиУчетаСерий.ПустаяСсылка();
		Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если ЭтоУслуга Тогда
		Объект.ВариантОказанияУслуг = Перечисления.ВариантыОказанияУслуг.ОрганизациейПродавцом;
	КонецЕсли;
	
	Если Не ЭтоТовар И Не ЭтоРабота Тогда
		Объект.ОбособленнаяЗакупкаПродажа = Ложь;
	КонецЕсли;
	
	ПроверитьПоТипуНоменклатуруОчиститьВладельца("Характеристик");
	ПроверитьПоТипуНоменклатуруОчиститьВладельца("Серий");
	ПроверитьПоТипуНоменклатуруОчиститьВладельца("ТоварныхКатегорий");
		
	ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоТипуНоменклатуры();
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииСервер()
	
	Если Объект.КоэффициентЕдиницыДляОтчетов = 1 Тогда
		Объект.ЕдиницаДляОтчетов = Объект.ЕдиницаИзмерения;
	КонецЕсли;
	
	Если Объект.ЕдиницаДляОтчетов = Объект.ЕдиницаИзмерения Тогда
		Объект.КоэффициентЕдиницыДляОтчетов = 1;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") 
		Или Не (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар) 
		Или Справочники.УпаковкиЕдиницыИзмерения.ЭтоМернаяЕдиница(Объект.ЕдиницаИзмерения) Тогда
		Объект.ПоставляетсяВМногооборотнойТаре = Ложь;
		Объект.НоменклатураМногооборотнаяТара = Неопределено;
		Объект.ХарактеристикаМногооборотнаяТара = Неопределено;
	КонецЕсли;
	
	НастроитьФорму();

КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкуИспользованияСерий()
	
	Если Объект.ИспользоватьСерии Тогда
		Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара;
		Объект.ИспользоватьНомерСерии        = Истина;
		Объект.ИспользоватьСрокГодностиСерии = Ложь;
		Объект.ИспользоватьКоличествоСерии   = Ложь;
	Иначе
		Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	УдалитьНеКорректныеПолитики();

КонецПроцедуры

&НаСервере
Процедура УдалитьНеКорректныеПолитики()
	
	МассивДопустимыхТиповПолитик = НоменклатураСервер.ДопустимыеТипыПолитикУчетаСерий(Объект);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.НомерСтроки КАК НомерСтроки,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий,
	|	ВидыНоменклатурыПолитикиУчетаСерий.Склад
	|ПОМЕСТИТЬ ТаблицаПолитик
	|ИЗ
	|	&ТаблицаПолитик КАК ВидыНоменклатурыПолитикиУчетаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПолитик.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПолитик.ПолитикаУчетаСерий,
	|	ТаблицаПолитик.Склад
	|ИЗ
	|	ТаблицаПолитик КАК ТаблицаПолитик
	|ГДЕ
	|	(ВЫРАЗИТЬ(ТаблицаПолитик.ПолитикаУчетаСерий КАК Справочник.ПолитикиУчетаСерий).ТипПолитики В (&ТипыПолитик)
	|		ИЛИ ТаблицаПолитик.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТипыПолитик", МассивДопустимыхТиповПолитик);
	Запрос.УстановитьПараметр("ТаблицаПолитик", Объект.ПолитикиУчетаСерий.Выгрузить());
	
	Объект.ПолитикиУчетаСерий.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Копирует значения из коллекции данных формы в массив.
//
// Параметры:
//	КоллекцияФормы - ДанныеФормыКоллекция - таблица значений формы.
//
// Возвращаемое значение:
//	Массив - Массив структур с данными коллекции формы.
//
&НаКлиенте
Функция МассивИзКоллекцииФормы(КоллекцияФормы)
	
	Массив = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из КоллекцияФормы Цикл
		СтруктураЭлемента = Новый Структура("ИмяРеквизита, ПредставлениеРеквизита, ЭтоДопРеквизит, Свойство, Используется");
		
		ЗаполнитьЗначенияСвойств(СтруктураЭлемента, ЭлементКоллекции);
		Массив.Добавить(СтруктураЭлемента);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ОткрытьФорму("Справочник.ВидыНоменклатуры.Форма.РазблокированиеРеквизитов",,,,,, 
		Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
        
        ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
		Элементы.НастройкиТоварныхКатегорий.ТолькоПросмотр = Результат.Найти("ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры") = Неопределено;
		НастроитьФорму();
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовНаСервере()
	
	Если ПустаяСтрока(Объект.ШаблонНаименованияДляПечатиНоменклатуры)
		И ПустаяСтрока(Объект.ШаблонРабочегоНаименованияНоменклатуры)
		И Объект.РеквизитыБыстрогоОтбораНоменклатуры.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='Настройки проверки заполнения реквизитов номенклатуры не изменены: не заданы ни шаблоны наименований номенклатуры, ни реквизиты, отображаемые в панели быстрого отбора.';uk='Настройки перевірки заповнення реквізитів номенклатури не змінено: не задані ні шаблони найменувань номенклатури, ні реквізити, які відображаються в панелі швидкого відбору.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
	Иначе
		ВключитьПроверкуЗаполненияДляРеквизитовНоменклатурыНаСервере();
	КонецЕсли;
	
	Если Объект.ИспользоватьХарактеристики Тогда
		Если ПустаяСтрока(Объект.ШаблонНаименованияДляПечатиХарактеристики)
			И ПустаяСтрока(Объект.ШаблонРабочегоНаименованияХарактеристики)
			И Объект.РеквизитыБыстрогоОтбораХарактеристик.Количество() = 0 Тогда
			ТекстПредупреждения = НСтр("ru='Настройки проверки заполнения реквизитов характеристик не изменены: не заданы ни шаблоны наименований характеристик, ни реквизиты, отображаемые в панели быстрого отбора.';uk='Настройки перевірки заповнення реквізитів характеристик не змінено: не задані ні шаблони найменувань характеристик, ні реквізити, які відображаються в панелі швидкого відбору.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);;
		Иначе
			ВключитьПроверкуЗаполненияДляРеквизитовХарактеристикНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИспользоватьСерии Тогда
		Если ПустаяСтрока(Объект.ШаблонРабочегоНаименованияСерии) Тогда
			ТекстПредупреждения = НСтр("ru='Настройки проверки заполнения серий не изменены: не задан шаблон наименования серий.';uk='Настройки перевірки заповнення серій не змінено: не заданий шаблон найменування серій.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);;
		Иначе
			ВключитьПроверкуЗаполненияДляРеквизитовСерийНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовНоменклатурыНаСервере()
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновНоменклатурыНаСервере();
	ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораНоменклатурыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаНоменклатурыНаСервере(ШаблонНаименования)
	
	Если Не ЗначениеЗаполнено(ШаблонНаименования) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеРеквизиты = ДополнительныеРеквизитыНоменклатуры();
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	Отбор = Новый Структура("ИмяРеквизита, Свойство, ЭтоДопРеквизит");
	
	ОперандыТекстовойФормулы = РаботаСФормуламиКлиентСервер.ПолучитьМассивОперандовТекстовойФормулы(ШаблонНаименования);
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыДляКонтроляНоменклатуры Цикл
		
		ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
		
		РеквизитИспользуетсяВФормуле = (ОперандыТекстовойФормулы.Найти(ИмяРеквизита) <> Неопределено);
		
		Если Не РеквизитИспользуетсяВФормуле Тогда
			Продолжить;
		КонецЕсли;
		
		// Если тип реквизита - Булево, то не включать для него контроль заполнения.
		Если СтрокаТЧ.ЭтоДопРеквизит Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
			
			НайденныеСтроки = ДополнительныеРеквизиты.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДопРеквизитовСведений = НайденныеСтроки[0];
			
			ТипЗначенияРеквизита = СтрокаДопРеквизитовСведений.ТипЗначения;
			
		Иначе
			
			Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(ИмяРеквизита);
			
			Если Реквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначенияРеквизита = Реквизит.Тип;
			
		КонецЕсли;
		
		Если ТипЗначенияРеквизита = ОписаниеТиповБулево Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.ОбязателенДляЗаполнения = Истина;
		СтрокаТЧ.ОтображатьПриСоздании = Истина;
		СтрокаТЧ.ДоступностьОтображатьПриСоздании = Ложь;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновНоменклатурыНаСервере()
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаНоменклатурыНаСервере(Объект.ШаблонРабочегоНаименованияНоменклатуры);
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаНоменклатурыНаСервере(Объект.ШаблонНаименованияДляПечатиНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовХарактеристикНаСервере()
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновХарактеристикНаСервере();
	ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораХарактеристикНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовСерийНаСервере()
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновСерийНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаХарактеристикНаСервере(ШаблонНаименованияХарактеристики)
	
	Если Не ЗначениеЗаполнено(ШаблонНаименованияХарактеристики) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеРеквизиты = ДополнительныеРеквизитыХарактеристик();
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	Отбор = Новый Структура("ИмяРеквизита, Свойство, ЭтоДопРеквизит");
	
	ОперандыТекстовойФормулы = РаботаСФормуламиКлиентСервер.ПолучитьМассивОперандовТекстовойФормулы(ШаблонНаименованияХарактеристики);
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыДляКонтроляХарактеристик Цикл
		
		ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
		
		РеквизитИспользуетсяВФормуле = (ОперандыТекстовойФормулы.Найти(СтрокаТЧ.ИмяРеквизита) <> Неопределено);
		
		Если Не РеквизитИспользуетсяВФормуле Тогда
			Продолжить;
		КонецЕсли;
		
		// Если тип реквизита - Булево, то не включать для него контроль заполнения.
		Если СтрокаТЧ.ЭтоДопРеквизит Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
			
			НайденныеСтроки = ДополнительныеРеквизиты.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДопРеквизитовСведений = НайденныеСтроки[0];
			
			ТипЗначенияРеквизита = СтрокаДопРеквизитовСведений.ТипЗначения;
			
		Иначе
			
			Реквизит = Метаданные.Справочники.ХарактеристикиНоменклатуры.Реквизиты.Найти(ИмяРеквизита);
			
			Если Реквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначенияРеквизита = Реквизит.Тип;
			
		КонецЕсли;
		
		Если ТипЗначенияРеквизита = ОписаниеТиповБулево Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.ОбязателенДляЗаполнения = Истина;
		СтрокаТЧ.ОтображатьПриСоздании = Истина;
		СтрокаТЧ.ДоступностьОтображатьПриСоздании = Ложь;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаСерийНаСервере(ШаблонНаименованияСерии)
	
	Если Не ЗначениеЗаполнено(ШаблонНаименованияСерии) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеРеквизиты = ДополнительныеРеквизитыСерий();
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	Отбор = Новый Структура("ИмяРеквизита, Свойство, ЭтоДопРеквизит");
	
	ОперандыТекстовойФормулы = РаботаСФормуламиКлиентСервер.ПолучитьМассивОперандовТекстовойФормулы(ШаблонНаименованияСерии);
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыДляКонтроляСерий Цикл
		
		ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
		
		РеквизитИспользуетсяВФормуле = (ОперандыТекстовойФормулы.Найти(СтрокаТЧ.ИмяРеквизита) <> Неопределено);
		
		Если Не РеквизитИспользуетсяВФормуле Тогда
			Продолжить;
		КонецЕсли;
		
		// Если тип реквизита - Булево, то не включать для него контроль заполнения.
		Если СтрокаТЧ.ЭтоДопРеквизит Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
			
			НайденныеСтроки = ДополнительныеРеквизиты.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДопРеквизитовСведений = НайденныеСтроки[0];
			
			ТипЗначенияРеквизита = СтрокаДопРеквизитовСведений.ТипЗначения;
			
		Иначе
			
			Реквизит = Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ИмяРеквизита);
			
			Если Реквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначенияРеквизита = Реквизит.Тип;
			
		КонецЕсли;
		
		Если ТипЗначенияРеквизита = ОписаниеТиповБулево Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.ОбязателенДляЗаполнения = Истина;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновХарактеристикНаСервере()
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаХарактеристикНаСервере(Объект.ШаблонРабочегоНаименованияХарактеристики);
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаХарактеристикНаСервере(Объект.ШаблонНаименованияДляПечатиХарактеристики);
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновСерийНаСервере()
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаСерийНаСервере(Объект.ШаблонРабочегоНаименованияСерии);
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораНоменклатурыНаСервере()
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыДляКонтроляНоменклатуры Цикл
		
		Отбор.ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
		
		РеквизитИспользуетсяДляОтбора = (Объект.РеквизитыБыстрогоОтбораНоменклатуры.НайтиСтроки(Отбор).Количество() <> 0);
		
		Если РеквизитИспользуетсяДляОтбора Тогда
			
			СтрокаТЧ.ОбязателенДляЗаполнения = Истина;
			СтрокаТЧ.ОтображатьПриСоздании = Истина;
			СтрокаТЧ.ДоступностьОтображатьПриСоздании = Ложь;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораХарактеристикНаСервере()
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыДляКонтроляХарактеристик Цикл
		
		Отбор.ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
		
		Если Объект.РеквизитыБыстрогоОтбораХарактеристик.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			
			СтрокаТЧ.ОбязателенДляЗаполнения = Истина;
			СтрокаТЧ.ОтображатьПриСоздании = Истина;
			СтрокаТЧ.ДоступностьОтображатьПриСоздании = Ложь;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УсловияДоступности()
	
	Возврат Новый Структура("ЭтоДопРеквизит, ЭтоНеиспользуемыйДляКонтроляТип, ТипРеквизитаБулево, ЗаполнятьОбязательно");
	
КонецФункции

&НаСервере
Процедура ИспользоватьХарактеристикиПриИзмененииНаСервере()
	
	Элементы.ИспользованиеХарактеристик.Доступность = Объект.ИспользоватьХарактеристики;
	
	Если Не Объект.ИспользоватьХарактеристики Тогда
		
		Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать");
		
		Объект.ШаблонНаименованияДляПечатиХарактеристики = "";
		Объект.ШаблонРабочегоНаименованияХарактеристики  = "";
		
		Объект.ЗапретРедактированияНаименованияДляПечатиХарактеристики = Ложь;
		Объект.ЗапретРедактированияРабочегоНаименованияХарактеристики  = Ложь;
		Объект.ВладелецХарактеристик = Неопределено;
		
	Иначе
		
		Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры");
		Объект.ШаблонНаименованияДляПечатиХарактеристики = "[Наименование]";
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ТолькоОбщие = Истина;
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопРеквизитовХарактеристик, 
				Объект.НаборСвойствХарактеристик, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
				"Реквизиты",
				ТолькоОбщие);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопСведенийХарактеристик, 
				Объект.НаборСвойствХарактеристик, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
				"Сведения",
				ТолькоОбщие);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьСерииПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Объект.ИспользоватьСерии Тогда
			
			ТолькоОбщие = Истина;
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопРеквизитовСерий, 
				Объект.НаборСвойствСерий, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
				"Реквизиты",
				ТолькоОбщие);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопСведенийСерий, 
				Объект.НаборСвойствСерий, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
				"Сведения",
				ТолькоОбщие);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ИспользоватьСерии Тогда
		ВариантЗаданияНастроекСерий = "НастроеныДляВидаНоменклатуры";
		Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры = Ложь;
	Иначе
		ВариантЗаданияНастроекСерий = "";
		Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры = Ложь;
		Объект.ВладелецСерий = Неопределено;
	КонецЕсли;
	
	УстановитьНастройкуИспользованияСерий();
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьУпаковкиПриИзмененииНаСервере()

	Если Объект.ИспользоватьУпаковки Тогда
		Объект.ПоставляетсяВМногооборотнойТаре = Ложь;
		Объект.НоменклатураМногооборотнаяТара = Неопределено;
		Объект.ХарактеристикаМногооборотнаяТара = Неопределено;
	КонецЕсли;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура НаборУпаковокПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.НаборУпаковок)
		И Объект.НаборУпаковок <> ПредопределенноеЗначение("Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры") Тогда
		Объект.ЕдиницаИзмерения = Объект.НаборУпаковок.ЕдиницаИзмерения;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НаборУпаковок.ЕдиницаДляОтчетов) Тогда
		Объект.ЕдиницаДляОтчетов = Объект.НаборУпаковок.ЕдиницаДляОтчетов;
		Объект.КоэффициентЕдиницыДляОтчетов = Объект.НаборУпаковок.КоэффициентЕдиницыДляОтчетов;
	КонецЕсли;
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальноеНаименованиеПриИзменении(Элемент)
	
	Если ИспользоватьИндивидуальноеНаименование = "ИспользоватьНаименованиеИзКонстанты" Тогда
		Объект.НаименованиеДляПечати = "";
	КонецЕсли;
		
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПередИзменениемПанелиБыстрогоОтбораНоменклатуры()
	
	ТекстВопроса = НСтр("ru='Редактирование состава панели быстрого отбора
        |возможно только после записи элемента, записать элемент?'
        |;uk='Редагування складу панелі швидкого відбору
        |можливо тільки після запису елемента, записати елемент?'");
		
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьПередИзменениемПанелиБыстрогоОтбораНоменклатурыЗавершение", ЭтотОбъект),
		ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,,НСтр("ru='Редактирование панели быстрого отбора';uk='Редагування панелі швидкого відбору'"));
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПередИзменениемПанелиБыстрогоОтбораНоменклатурыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			
			ИзмененитьПанельБыстрогоОтбораНоменклатуры();
				
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененитьПанельБыстрогоОтбораНоменклатуры()
	
	Прочитать();
	
	ТекущийТипЭлемента = "ДопРеквизит";
	ТекущийТипВладельцаНабораЭлементов = "Номенклатура";
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(МассивИзКоллекцииФормы(ТаблицаРеквизитовОтбораНоменклатуры));
	
	СтруктураПараметров = Новый Структура("АдресВХранилище", АдресВХранилище);
	
	ОткрытьФорму("Справочник.ВидыНоменклатуры.Форма.ФормаРедактированияСоставаРеквизитов", СтруктураПараметров,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры		

&НаКлиенте
Процедура ЗаписатьПередИзменениемПанелиБыстрогоОтбораХарактеристики()
	
	ТекстВопроса = НСтр("ru='Редактирование состава панели быстрого отбора
        |возможно только после записи элемента, записать элемент?'
        |;uk='Редагування складу панелі швидкого відбору
        |можливо тільки після запису елемента, записати елемент?'");
		
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьПередИзменениемПанелиБыстрогоОтбораХарактеристикиЗавершение", ЭтотОбъект),
		ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,,НСтр("ru='Редактирование панели быстрого отбора';uk='Редагування панелі швидкого відбору'"));
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПередИзменениемПанелиБыстрогоОтбораХарактеристикиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			
			ИзмененитьПанельБыстрогоОтбораХарактеристики();
					
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененитьПанельБыстрогоОтбораХарактеристики()
	Прочитать();
	
	КоличествоДоступных = ТаблицаДопРеквизитовХарактеристик.Количество();
	
	Если КоличествоДоступных = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Невозможно отредактировать состав панели быстрого отбора характеристик.
        |Не указаны дополнительные реквизиты характеристик.
        |Перед редактированием состава панели быстрого отбора нужно настроить состав 
        |дополнительных реквизитов характеристик.'
        |;uk='Неможливо відредагувати склад панелі швидкого відбору характеристик.
        |Не вказані додаткові реквізити характеристик.
        |Перед редагуванням складу панелі швидкого відбору потрібно настроїти склад 
        |додаткових реквізитів характеристик.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийТипЭлемента = "ДопРеквизит";
	ТекущийТипВладельцаНабораЭлементов = "Характеристики";
	
	МассивРеквизитовОтбора = МассивИзКоллекцииФормы(ТаблицаРеквизитовОтбораХарактеристик);
	АдресТаблицыРеквизитов = ПоместитьВоВременноеХранилище(МассивРеквизитовОтбора);
	
	СтруктураПараметров = Новый Структура("АдресВХранилище", АдресТаблицыРеквизитов);
	
	ОткрытьФорму(
	"Справочник.ВидыНоменклатуры.Форма.ФормаРедактированияСоставаРеквизитов", 
	СтруктураПараметров,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры		

&НаКлиенте
Процедура ДобавитьСкладВПолитикиУчетаСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) <> Тип("СправочникСсылка.Склады") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПолитика = Объект.ПолитикиУчетаСерий.Добавить();
	СтрокаПолитика.Склад = РезультатЗакрытия;
	СтрокаПолитика.ЭтоПолитикаДляСклада = Истина;
	
	Элементы.ПолитикиУчетаСерий.ТекущаяСтрока = СтрокаПолитика.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодразделениеВПолитикиУчетаСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) <> Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПолитика = Объект.ПолитикиУчетаСерий.Добавить();
	СтрокаПолитика.Склад = РезультатЗакрытия;
	СтрокаПолитика.ЭтоПолитикаДляСклада = Ложь;
	
	Элементы.ПолитикиУчетаСерий.ТекущаяСтрока = СтрокаПолитика.ПолучитьИдентификатор();
	
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьПредупреждениеПоСкладуКлиент()
	
	ТекущиеДанные = Элементы.ПолитикиУчетаСерий.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или Не ЗначениеЗаполнено(ТекущиеДанные.Склад)
		Или ТипЗнч(ТекущиеДанные.Склад) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Элементы.НадписьПодсказкаПолитикиУчетаСерий.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.НадписьПодсказкаПолитикиУчетаСерий.Видимость = Не ЕстьОрдернаяСхема(ТекущиеДанные.Склад);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьОрдернаяСхема(Склад)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныеСклады") Тогда
		Возврат Истина;
 	КонецЕсли;
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач", Новый Структура("Склад", Склад));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовПоСтавкеНДС(Форма)
	
	ЭтоСтавкаБезНДСИлиНеНДС = (Форма.Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")) ИЛИ (Форма.Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС"));
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ЛьготаНДС",
		"Доступность",
		ЭтоСтавкаБезНДСИлиНеНДС
	);
		
КонецПроцедуры // ОбновитьДоступностьЭлементовПоСтавкеНДС

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовАкцизныйНалог(Форма)
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СтатьяДекларацииПоАкцизномуНалогу",
		"Доступность",
		Форма.Объект.ПодакцизныйТовар
	);
		
КонецПроцедуры // ОбновитьДоступностьЭлементовАкцизныйНалог

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДопРеквизитовНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовНоменклатуры.ОбщееСвойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДопРеквизитовХарактеристик.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовХарактеристик.ОбщееСвойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДопРеквизитовСерий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопРеквизитовСерий.ОбщееСвойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДопСведенийНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопСведенийНоменклатуры.ОбщееСвойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДопСведенийХарактеристик.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопСведенийХарактеристик.ОбщееСвойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаДопСведенийСерий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДопСведенийСерий.ОбщееСвойство");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолитикиУчетаСерийПолитикаУчетаСерий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПолитикиУчетаСерий.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<выберите склад>';uk='<виберіть склад>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДляКонтроляНоменклатурыУникален.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеквизитыДляКонтроляНоменклатуры.ДоступностьУникален");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДляКонтроляНоменклатурыОбязателенДляЗаполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеквизитыДляКонтроляНоменклатуры.ДоступностьОбязателенДляЗаполнения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДляКонтроляНоменклатурыОтображатьПриСоздании.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеквизитыДляКонтроляНоменклатуры.ДоступностьОтображатьПриСоздании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДляКонтроляХарактеристикУникален.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеквизитыДляКонтроляХарактеристик.ДоступностьУникален");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДляКонтроляХарактеристикОбязателенДляЗаполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеквизитыДляКонтроляХарактеристик.ДоступностьОбязателенДляЗаполнения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДляКонтроляСерийОбязателенДляЗаполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеквизитыДляКонтроляСерий.ДоступностьОбязателенДляЗаполнения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыДляКонтроляХарактеристикОтображатьПриСоздании.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РеквизитыДляКонтроляХарактеристик.ДоступностьОтображатьПриСоздании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРеквизитыДляКонтроляНоменклатуры(Команда)
	Элементы.ГруппаНастройкиСозданияСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизитыДляКонтроляНоменклатуры;
	УстановитьОформлениеНажатойГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляНоменклатуры, ЦветТекстаФормы);
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляХарактеристик);	
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляСерий);	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРеквизитыДляКонтроляХарактеристик(Команда)
	Элементы.ГруппаНастройкиСозданияСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизитыДляКонтроляХарактеристик;
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляНоменклатуры);
	УстановитьОформлениеНажатойГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляХарактеристик, ЦветТекстаФормы);	
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляСерий);	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРеквизитыДляКонтроляСерий(Команда)
	Элементы.ГруппаНастройкиСозданияСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизитыДляКонтроляСерий;
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляНоменклатуры);
	УстановитьСтандартноеОформлениеГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляХарактеристик);	
	УстановитьОформлениеНажатойГиперссылки(Элементы.ПоказатьРеквизитыДляКонтроляСерий, ЦветТекстаФормы);	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьСтандартноеОформлениеГиперссылки(Кнопка)
	
	Кнопка.Шрифт = Новый Шрифт;
	Кнопка.ЦветТекста = Новый Цвет;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьОформлениеНажатойГиперссылки(Кнопка, ЦветТекста)
	
	Кнопка.Шрифт = Новый Шрифт(,,Истина);
	Кнопка.ЦветТекста = ЦветТекста;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидВладелец(ЗначащаяЧастьИмениНадписи)
    
    ПараметрыФормыВыбора = Новый Структура;
    ПараметрыФормыВыбора.Вставить("ТекущийВид", Объект.Ссылка);
    ПараметрыФормыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ОтборФормыВыбора = Новый Структура;
	
	ТипыНоменклатуры = СовместимыеТипыНоменклатуры(Объект.ТипНоменклатуры, ЗначащаяЧастьИмениНадписи);
	Если ТипыНоменклатуры.Количество() > 0 Тогда
		ОтборФормыВыбора.Вставить("ТипНоменклатуры", Новый ФиксированныйМассив(ТипыНоменклатуры));
	КонецЕсли;
  
	Если ЗначащаяЧастьИмениНадписи = "Характеристик" Тогда
	    ОтборФормыВыбора.Вставить("ИспользованиеХарактеристик",
	    		ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры"));
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Серий" Тогда
		ОтборФормыВыбора.Вставить("НастройкиСерийБерутсяИзДругогоВидаНоменклатуры", Ложь);
		ОтборФормыВыбора.Вставить("ИспользоватьСерии", Истина);
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "ТоварныхКатегорий" Тогда
		ОтборФормыВыбора.Вставить("ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры", Ложь);
	КонецЕсли;		
    
    ПараметрыФормыВыбора.Вставить("Отбор", ОтборФормыВыбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначащаяЧастьИмениНадписи", ЗначащаяЧастьИмениНадписи);
	
    ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьВидВладелецЗавершение", ЭтотОбъект, ДополнительныеПараметры);
    
    ОткрытьФорму("Справочник.ВидыНоменклатуры.Форма.ФормаВыбора",
   				ПараметрыФормыВыбора,
			    ЭтотОбъект,
			    ,
			    ,
			    ,
			    ОписаниеОповещения,
			    РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидВладелецЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		НастроитьФорму();
	Иначе
		Объект["Владелец" + ДополнительныеПараметры.ЗначащаяЧастьИмениНадписи] = Результат;
		ВыбратьВидВладецСервер(ДополнительныеПараметры.ЗначащаяЧастьИмениНадписи);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьВидВладецСервер(ЗначащаяЧастьИмениНадписи)
	
	ЗаполнитьСписокВидовНоменклатурыСТемжеВладельцем(ЗначащаяЧастьИмениНадписи);
	НастроитьФорму();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовНоменклатурыСТемжеВладельцем(ЗначащаяЧастьИмениНадписи)
	
	Особенности = ОсобенностиВыводаНадписиПоВладельцу(ЗначащаяЧастьИмениНадписи);
	
	СписокВидов = ЭтотОбъект["ВидыНоменклатурыСТемжеВладельцем" + ЗначащаяЧастьИмениНадписи];
	ВидВладелец = Объект["Владелец" + ЗначащаяЧастьИмениНадписи];
		
	Если (Не Особенности.ЭтотВидСамЯвляетсяВладельцем 
		И Не ЗначениеЗаполнено(ВидВладелец))
		Или Не Особенности.НуженТекстВНадписи Тогда
		СписокВидов.Очистить();
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	&РеквизитВладелец = &ВидВладелец
	|	И &ВидВладелец <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|	И ВидыНоменклатуры.Ссылка <> &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитВладелец", "ВидыНоменклатуры.Владелец" + ЗначащаяЧастьИмениНадписи);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Если Особенности.ЭтотВидСамЯвляетсяВладельцем Тогда
		Запрос.УстановитьПараметр("ВидВладелец", Объект.Ссылка);
	Иначе
		Запрос.УстановитьПараметр("ВидВладелец", ВидВладелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	СписокВидов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

&НаСервере
Функция ОсобенностиВыводаНадписиПоВладельцу(ЗначащаяЧастьИмениНадписи)
	Особенности = Новый Структура("ЭтотВидСамЯвляетсяВладельцем,НуженТекстВНадписи,МожноРедактироватьВладельца");
	
	Особенности.ЭтотВидСамЯвляетсяВладельцем = Ложь;
	Особенности.НуженТекстВНадписи           = Ложь;
	Особенности.МожноРедактироватьВладельца  = Ложь;
	
	Если ЗначащаяЧастьИмениНадписи = "ТоварныхКатегорий" Тогда
		Если Не Объект.ТоварныеКатегорииОбщиеСДругимВидомНоменклатуры Тогда
			Особенности.ЭтотВидСамЯвляетсяВладельцем = Истина;
		КонецЕсли;
		
		Особенности.НуженТекстВНадписи = ПолучитьФункциональнуюОпцию("ИспользоватьТоварныеКатегории");
		Особенности.МожноРедактироватьВладельца = Не Элементы.НастройкиТоварныхКатегорий.ТолькоПросмотр;
		
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Серий" Тогда
		Если Не Объект.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры Тогда
			Особенности.ЭтотВидСамЯвляетсяВладельцем = Истина;
		КонецЕсли;
		
		Особенности.НуженТекстВНадписи = Объект.ИспользоватьСерии;
		Особенности.МожноРедактироватьВладельца = Не Элементы.ВариантЗаданияНастроекСерий.ТолькоПросмотр;
		
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Характеристик" Тогда
		Если Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
			Особенности.ЭтотВидСамЯвляетсяВладельцем = Истина;
		КонецЕсли;	
		
		Особенности.НуженТекстВНадписи =  Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры
											Или  Объект.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры;
		Особенности.МожноРедактироватьВладельца = Не Элементы.ИспользованиеХарактеристик.ТолькоПросмотр;
		
	КонецЕсли;
	
	Возврат Особенности;
КонецФункции

&НаСервере
Процедура СформироватьНадписьПоВидуВладельцу(ЗначащаяЧастьИмениНадписи);
	Особенности = ОсобенностиВыводаНадписиПоВладельцу(ЗначащаяЧастьИмениНадписи);
	
	МассивСтрок = Новый Массив;
	Если Особенности.НуженТекстВНадписи Тогда
		
		СписокВидов = ЭтотОбъект["ВидыНоменклатурыСТемжеВладельцем" + ЗначащаяЧастьИмениНадписи];
		ПредставлениеКоличестваВидов = "";
		
		Если Особенности.ЭтотВидСамЯвляетсяВладельцем Тогда
			
			Если ЗначащаяЧастьИмениНадписи <> "Серий" Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Список';uk='Список'"),,,,"ОткрытьСписок"+ЗначащаяЧастьИмениНадписи));
				Если СписокВидов.Количество() > 0 Тогда
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(НСтр("ru='используется еще в';uk='використовується ще в'"));
					МассивСтрок.Добавить(" ");
					ПредставлениеКоличестваВидов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СписокВидов.Количество(),
																													НСтр("ru='виде,видах,видах';uk='виді,видах,видах'"));
				КонецЕсли;
			Иначе
				Если СписокВидов.Количество() > 0 Тогда
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(НСтр("ru='и еще';uk='і ще'"));
					МассивСтрок.Добавить(" ");
					ПредставлениеКоличестваВидов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СписокВидов.Количество(),
																													НСтр("ru='вида,видов,видов';uk='виду,видів,видів'"));
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ВидВладелец = Объект["Владелец" + ЗначащаяЧастьИмениНадписи];
			
			Если Не ЗначениеЗаполнено(ВидВладелец) Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='<вид не выбран>';uk='<вид не вибрано>'"),,ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет));
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Выбрать';uk='Обрати'"),,,,"ИзменитьВладельца"+ЗначащаяЧастьИмениНадписи));
			Иначе	
				
				ПредставлениеВида = ОбщегоНазначенияУТКлиентСервер.ПредставлениеСтрокиСДлинойНеБолее(Строка(ВидВладелец), 20);
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеВида,,,,"ОткрытьВладельца"+ЗначащаяЧастьИмениНадписи));
				
				Если Особенности.МожноРедактироватьВладельца Тогда
					МассивСтрок.Добавить(" (");
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='изменить';uk='змінити'"),,,,"ИзменитьВладельца"+ЗначащаяЧастьИмениНадписи));
					МассивСтрок.Добавить(")");
				КонецЕсли;	
				
				Если СписокВидов.Количество() > 0 Тогда
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(НСтр("ru='и еще с';uk='і ще з'"));
					МассивСтрок.Добавить(" ");
					ПредставлениеКоличестваВидов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(СписокВидов.Количество(),
																													НСтр("ru='видом,видами,видами';uk='видом,видами,видами'"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеКоличестваВидов) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеКоличестваВидов,
													,
													,
													,
													"ОткрытьСписокВидовСТемжеВладельцем"+ЗначащаяЧастьИмениНадписи));
		КонецЕсли;
	КонецЕсли;
	Элементы["Владелец" + ЗначащаяЧастьИмениНадписи].Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиНадписиПоВидуВладельцу(НавигационнаяСсылка, ЗначащаяЧастьИмениНадписи, СтандартнаяОбработка);
	
	СтандартнаяОбработка = Ложь;
	
	НавигационнаяСсылкаПриведенная = СтрЗаменить(НавигационнаяСсылка, ЗначащаяЧастьИмениНадписи, "");
	
	Если НавигационнаяСсылкаПриведенная = "ОткрытьВладельца" Тогда
		ПоказатьЗначение(,Объект["Владелец" + ЗначащаяЧастьИмениНадписи]);
	ИначеЕсли НавигационнаяСсылкаПриведенная = "ИзменитьВладельца" Тогда
		ВыбратьВидВладелец(ЗначащаяЧастьИмениНадписи);
	ИначеЕсли НавигационнаяСсылкаПриведенная = "ОткрытьСписокВидовСТемжеВладельцем" Тогда
		ПоказатьЗначение(,ЭтотОбъект["ВидыНоменклатурыСТемжеВладельцем" + ЗначащаяЧастьИмениНадписи]);
	ИначеЕсли НавигационнаяСсылкаПриведенная = "ОткрытьСписок" Тогда
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ТекстВопроса = НСтр("ru='Данные еще не записаны.
            |Переход к списку возможен только после записи данных.'
            |;uk='Дані ще не записані.
            |Перехід до списку можливий тільки після запису даних.'");
			
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Записать';uk='Записати'"));
			КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена';uk='Відмінити'"));
			
			ДополнительныеПараметрыВопроса = Новый Структура;
			ДополнительныеПараметрыВопроса.Вставить("ЗначащаяЧастьИмениНадписи", ЗначащаяЧастьИмениНадписи);
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьСписокЗавершение", ЭтотОбъект, ДополнительныеПараметрыВопроса),
							ТекстВопроса,
							КнопкиВопроса);
			Возврат;
			
		КонецЕсли;
		
		ОткрытьСписокФрагмент(ЗначащаяЧастьИмениНадписи);
	Иначе
		ТекстИсключения = НСтр("ru='Неизвестная навигационная ссылка.';uk='Невідоме навігаційне посилання.'");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        ЭлементЗаписан = Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    
   ОткрытьСписокФрагмент(ДополнительныеПараметры.ЗначащаяЧастьИмениНадписи);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокФрагмент(ЗначащаяЧастьИмениНадписи)
    
	Если ЗначащаяЧастьИмениНадписи = "ТоварныхКатегорий" Тогда
		ПараметрыОткрытия = Новый Структура;
	    ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Владелец", Объект.Ссылка));
	    ПараметрыОткрытия.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	    
	    ОткрытьФорму("Справочник.ТоварныеКатегории.ФормаСписка",
					ПараметрыОткрытия,
					ЭтаФорма,
					,
					,
					,
					,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Характеристик" Тогда
				
	    ПараметрыОткрытия = Новый Структура;
	    ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Владелец", Объект.Ссылка));
	    ПараметрыОткрытия.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	    
	    ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаСписка",
					ПараметрыОткрытия,
					ЭтаФорма,
					,
					,
					,
					,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьОбщееСвойствоНаСервере(ВыбранноеЗначение, НаборДопРеквизитовСведений, ЭтоНаборыДополнительныхСведений)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Справочник.НаборыДополнительныхРеквизитовИСведений");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка", НаборДопРеквизитовСведений);
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(НаборДопРеквизитовСведений);
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ЗаблокироватьДанныеДляРедактирования(НаборДопРеквизитовСведений);
			
			ТекущийНаборОбъект = НаборДопРеквизитовСведений.ПолучитьОбъект();
			Если ТекущийНаборОбъект.ВерсияДанных <> ВерсияДанныхТекущегоНабора Тогда
				Если ЭтоНаборыДополнительныхСведений Тогда
					ВызватьИсключение
					НСтр("ru='Действие не выполнено, так как состав дополнительных сведений
                    |был изменен другим пользователем.
                    |Новый состав дополнительных сведений прочитан.
                    |
                    |Повторите действие, если требуется.'
                    |;uk='Дія не виконана, тому що склад додаткових відомостей
                    |був змінений іншим користувачем.
                    |Новий склад додаткових відомостей прочитаний.
                    |
                    |Повторіть дію, якщо потрібно.'");
				Иначе
					ВызватьИсключение
					НСтр("ru='Действие не выполнено, так как состав дополнительных реквизитов
                    |был изменен другим пользователем.
                    |Новый состав дополнительных реквизитов прочитан.
                    |
                    |Повторите действие, если требуется.'
                    |;uk='Дія не виконана, тому що склад додаткових реквізитів
                    |був змінений іншим користувачем.
                    |Новий склад додаткових реквізитів прочитаний.
                    |
                    |Повторіть дію, якщо потрібно.'");
				КонецЕсли;
			КонецЕсли;
			
			ТабличнаяЧасть = ТекущийНаборОбъект[?(ЭтоНаборыДополнительныхСведений,
				"ДополнительныеСведения", "ДополнительныеРеквизиты")];
			
			НайденнаяСтрока = ТабличнаяЧасть.Найти(ВыбранноеЗначение.ОбщееСвойство, "Свойство");
			
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				НоваяСтрока.Свойство = ВыбранноеЗначение.ОбщееСвойство;
				ТекущийНаборОбъект.Записать();
				
			ИначеЕсли НайденнаяСтрока.ПометкаУдаления Тогда
				НайденнаяСтрока.ПометкаУдаления = Ложь;
				ТекущийНаборОбъект.Записать();
			КонецЕсли;
			
			Модифицированность = Истина;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	Исключение
		РазблокироватьДанныеДляРедактирования(НаборДопРеквизитовСведений);
		ВызватьИсключение;
	КонецПопытки;
	
	ПриЗаписиНабораДополнительныхРеквизитовИСведенийНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВерсиюДанныхНабора(Набор)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Набор, "ВерсияДанных");
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция СовместимыеТипыНоменклатуры(ТекущийТипНоменклатуры, ЗначащаяЧастьИмениНадписи)
	
	ТипыНоменклатуры = Новый Массив;
	
	Если ЗначащаяЧастьИмениНадписи = "Характеристик" Тогда
		Если ТекущийТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
			Или ТекущийТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		Иначе
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
		КонецЕсли;	
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "Серий" Тогда
		ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	ИначеЕсли ЗначащаяЧастьИмениНадписи = "ТоварныхКатегорий" Тогда
		Если ТекущийТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
			Или ТекущийТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		Иначе
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
			ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ТипыНоменклатуры;
КонецФункции

&НаСервере
Процедура ПроверитьПоТипуНоменклатуруОчиститьВладельца(ЗначащаяЧастьИмени)
	
	Если ЗначениеЗаполнено(Объект["Владелец" + ЗначащаяЧастьИмени]) Тогда
		ТипНоменклатурыВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект["Владелец" + ЗначащаяЧастьИмени], "ТипНоменклатуры");
		СовместимыеТипыНоменклатуры = СовместимыеТипыНоменклатуры(Объект.ТипНоменклатуры, ЗначащаяЧастьИмени);
		
		Если СовместимыеТипыНоменклатуры.Найти(ТипНоменклатурыВладельца) = Неопределено Тогда
			Объект["Владелец" + ЗначащаяЧастьИмени] = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти