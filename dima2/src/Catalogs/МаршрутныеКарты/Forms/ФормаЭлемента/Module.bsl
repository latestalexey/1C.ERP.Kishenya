&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	ОсновнаяЕдиницаВремениБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
	
	УправлениеДаннымиОбИзделиях.ИнициализацияАвтоподбораНоменклатуры(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	УстановитьОтборВСпискеОпераций();
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ РазбиватьМаршрутныеЛисты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("МаксимальноеКоличествоЕдиницПартийИзделия");
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ТекущийОбъект.МаксимальноеКоличествоЕдиницПартийИзделия = МаксимальноеКоличествоЕдиницПартийИзделия;

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_МаршрутныеКарты",, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	УстановитьОтборВСпискеОпераций();
	
	ЗаполнитьСлужебныеРеквизиты();
	
	УстановитьДоступностьКомандИзмененияСтатуса();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
		
		Элементы.Операции.Обновить();
		
	ИначеЕсли ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.НастройкаАвтовыбораМатериала" Тогда
		
		ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
		Если УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтоподборНоменклатурыЗавершение(ВыбранноеЗначение, ТекущиеДанные, Объект.СоответствиеСвойств) Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.НастройкаПотребленияМатериала" Тогда
		
		ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
		Если УправлениеДаннымиОбИзделияхКлиент.НастроитьПотреблениеНоменклатурыЗавершение(ВыбранноеЗначение, ТекущиеДанные) Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
	Иначе
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ДляВидаИзделийПриИзменении(Элемент)
	
	ПриИзмененииВидаИзделийВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПредварительногоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияПредварительногоБуфера.Пустая() Тогда
		Объект.ЕдиницаИзмеренияПредварительногоБуфера = ОсновнаяЕдиницаВремениБуфера;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияЗавершающегоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияЗавершающегоБуфера.Пустая() Тогда
		Объект.ЕдиницаИзмеренияЗавершающегоБуфера = ОсновнаяЕдиницаВремениБуфера;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РазбиватьМаршрутныеЛистыПриИзменении(Элемент)
	
	Если НЕ РазбиватьМаршрутныеЛисты Тогда
		Если МаксимальноеКоличествоЕдиницПартийИзделия <> 0 Тогда
			МаксимальноеКоличествоЕдиницПартийИзделия = 0;
		КонецЕсли; 
	Иначе
		Если МаксимальноеКоличествоЕдиницПартийИзделия = 0 Тогда
			МаксимальноеКоличествоЕдиницПартийИзделия = 1;
		КонецЕсли; 
	КонецЕсли;
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйБуферПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершающийБуферПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОперации

&НаКлиенте
Процедура ОперацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ДобавитьОперацию(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("ВыходныеИзделия", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ВыходныеИзделия"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		КоличествоИзделийСТипомСтоимостиРассчитывается = Объект.ВыходныеИзделия.Количество();
		ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
		Если Объект.ДляВидаИзделий.Пустая() 
			И ТекущиеДанные.НомерСтроки = 1 
			И НЕ ТекущиеДанные.Номенклатура.Пустая() Тогда
			Объект.ДляВидаИзделий = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПослеУдаления(Элемент)
	
	КоличествоИзделийСТипомСтоимостиРассчитывается = Объект.ВыходныеИзделия.Количество();
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПослеУдаления(Элемент)
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИУслуги

&НаКлиенте
Процедура МатериалыИУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("МатериалыИУслуги", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		СтрокаТабличнойЧасти = Элементы.МатериалыИУслуги.ТекущиеДанные;
		
		КлючСвязиИсточника = ?(Копирование, СтрокаТабличнойЧасти.КлючСвязи, Неопределено);
		
		СтрокаТабличнойЧасти.КлючСвязи = Новый УникальныйИдентификатор;
		
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиМатериалов(
					СтрокаТабличнойЧасти, 
					КлючСвязиИсточника,
					Объект.СоответствиеСвойств);
					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПередУдалением(Элемент, Отказ)
	
	УправлениеДаннымиОбИзделияхКлиент.ПередУдалениемМатериалов(
				Элементы.МатериалыИУслуги, 
				Объект.МатериалыИУслуги,
				Объект.СоответствиеСвойств);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "МатериалыИУслуги"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
    УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииНоменклатурыВСтрокеМатериалов(ТекущаяСтрока, Объект);
    УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеМатериалов(ТекущаяСтрока, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
    УправлениеДаннымиОбИзделияхКлиентСервер.ПриИзмененииХарактеристикиВСтрокеМатериалов(ТекущиеДанные, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("Трудозатраты", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСхемаОпераций(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МаршрутнаяКарта", Объект.Ссылка);
	
	ОткрытьФорму("Отчет.СхемаМаршрутнойКарты.Форма", ПараметрыФормы); 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоМаршрутнойКарте(Команда)
	
	ПараметрыОтбора = Новый Структура("ПометкаУдаления", Ложь);
	ПараметрыФормы = Новый Структура("ЗапретитьВыбор,Отбор", Объект.Ссылка, ПараметрыОтбора);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикЗаполнитьПоМаршрутнойКарте", ЭтотОбъект);
	ОткрытьФорму("Справочник.МаршрутныеКарты.ФормаВыбора", 
				ПараметрыФормы,,,,, 
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусВРазработке(Команда)
	
	Если НЕ ДоступностьРеквизитов Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусВРазработкеЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.МаршрутныеКарты.Форма.РазблокированиеРеквизитов", 
								Новый Структура("Объект", Объект.Ссылка),,,,,
								ОписаниеОповещения,
								РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусДействует(Команда)
	
	УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхКарт.Действует"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусЗакрыта(Команда)
	
	УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхКарт.Закрыта"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьЗаполнение(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнениеПринудительно() Тогда
		ТекстПредупреждения = НСтр("ru='Маршрутную карту можно сделать действующей.';uk='Маршрутну карту можна зробити чинною.'");
	Иначе
		ТекстПредупреждения = НСтр("ru='Маршрутная карта не может быть действующей.
                                        |Необходимо заполнить указанные реквизиты.'
                                        |;uk='Маршрутна карта не може бути діючою.
                                        |Необхідно заповнити зазначені реквізити.'");
	КонецЕсли;
	
	ПоказатьПредупреждение(,ТекстПредупреждения,, НСтр("ru='Проверка маршрутной карты';uk='Перевірка маршрутної карти'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастроитьСостав(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИспользоватьВыходныеИзделия", Объект.ИспользоватьВыходныеИзделия);
	ПараметрыФормы.Вставить("ИспользоватьМатериалы", Объект.ИспользоватьМатериалы);
	ПараметрыФормы.Вставить("ИспользоватьОперации", Объект.ИспользоватьОперации);
	ПараметрыФормы.Вставить("ИспользоватьТрудозатраты", Объект.ИспользоватьТрудозатраты);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьСоставЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.МаршрутныеКарты.Форма.НастройкаСоставаМаршрутнойКарты", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

#Область Материалы

&НаКлиенте
Процедура КомандаНастроитьАвтовыборМатериалов(Команда)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не выбрана строка таблицы ""Материалы и работы"".';uk='Не вибраний рядок таблиці ""Матеріали і роботи"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.ДляВидаИзделий.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Для настройки автовыбора материала необходимо указать вид изделий.';uk='Для настройки автовибору матеріалу необхідно зазначити вид виробів.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДляВидаИзделий", "Объект");
		Возврат;
	КонецЕсли; 
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьАвтоподборНоменклатуры(
							ТекущиеДанные, 
							Объект.СоответствиеСвойств, 
							Объект.ДляВидаИзделий,
							НСтр("ru='Указывается в маршрутной карте';uk='Вказується в маршрутній карті'"),
							ЭтаФорма,
							НЕ ДоступностьРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастроитьПотребление(Команда)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	ОчиститьСообщения();
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не выбрана строка таблицы ""Материалы и работы"".';uk='Не вибраний рядок таблиці ""Матеріали і роботи"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.МатериалыИУслуги", "Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.ДляВидаИзделий.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Для настройки потребления необходимо указать вид изделий.';uk='Для настройки споживання необхідно зазначти вид виробів.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДляВидаИзделий", "Объект");
		Возврат;
	КонецЕсли; 
	
	Если Объект.ВыходныеИзделия.Количество() <> 0 Тогда
		Изделие = Объект.ВыходныеИзделия[0].Номенклатура;
	Иначе
		Изделие = Неопределено;
	КонецЕсли; 
	
	УправлениеДаннымиОбИзделияхКлиент.НастроитьПотреблениеНоменклатуры(
							ТекущиеДанные, 
							Объект.ДляВидаИзделий, 
							ЭтаФорма,
							НЕ ДоступностьРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПодборМатериалов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	МассивТиповНоменклатуры = Новый Массив();
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	ДоступныеТипыНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", ДоступныеТипыНоменклатуры));
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", 
			ПараметрыФормы, 
			ЭтаФорма, 
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.МатериалыИУслуги.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.МатериалыИУслуги.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.МатериалыИУслуги.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.МатериалыИУслуги.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Операции

&НаКлиенте
Процедура КомандаДобавитьОперацию(Команда)
	
	Элементы.Операции.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВложенныйМаршрут(Команда)
	
	ДобавитьОперацию(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьВидОперацииНаВложенныйМаршрут(Команда)
	
	ИзменитьВидОперации(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьВидОперацииНаОперация(Команда)
	
	ИзменитьВидОперации(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьОперациюВперед(Команда)
	
	ПереместитьОперацию(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьОперациюНазад(Команда)
	
	ПереместитьОперацию(Ложь);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#Область ПроцедурыПодсистемыСвойств

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.МатериалыИУслуги.ВыделенныеСтроки, Объект.МатериалыИУслуги);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.МатериалыИУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,СтатьяКалькуляции");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ТекущаяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиМатериалов(ТекущаяСтрока);
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("МатериалыИУслугиВставитьСтроки");
	МассивЭлементов.Добавить("МатериалыИУслугиКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Доступность",
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки") И ДоступностьРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("МатериалыИУслугиВставитьСтроки");
	МассивЭлементов.Добавить("МатериалыИУслугиКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", ДоступностьРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область Операции

&НаКлиенте
Процедура ИзменитьВидОперации(СодержитВложенныйМаршрут)

	Если НЕ ТекущаяСтрокаЭтоОперация() Тогда
		Возврат;
	КонецЕсли;
	
	Если СодержитВложенныйМаршрут Тогда
		ТекстВопроса = НСтр("ru='Изменить вид операции на ""Вложенный маршрут""?';uk='Змінити вид операції на ""Вкладений маршрут""?'");
	Иначе
		ТекстВопроса = НСтр("ru='Изменить вид операции на ""Операция""?';uk='Змінити вид операції на ""Операція""?'");
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросИзменитьВидОперации", ЭтаФорма, СодержитВложенныйМаршрут);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьОперацию(Вперед)
    Перем ТекстОшибки;
	
	Если НЕ ТекущаяСтрокаЭтоОперация() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	Если ПереместитьОперациюНаСервере(ТекущиеДанные.Ссылка, Вперед, ТекстОшибки) Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка.ТехнологическиеОперации"));
	Иначе
		ПоказатьПредупреждение(,ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереместитьОперациюНаСервере(Ссылка, Вперед, ТекстОшибки)

	ОперацияОбъект = Ссылка.ПолучитьОбъект();
	Попытка
		ОперацияОбъект.Заблокировать();
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось переместить операцию.
                                |Возможно, операция редактируется пользователем.'
                                |;uk='Не вдалося перемістити операцію.
                                |Можливо, операція редагується користувачем.'");
	    Возврат Ложь;
	КонецПопытки;
	НомерОперации          = ОперацияОбъект.НомерОперации;
	НомерСледующейОперации = ОперацияОбъект.НомерСледующейОперации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехнологическиеОперации.Ссылка
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
	|ГДЕ
	|	ТехнологическиеОперации.Владелец = &Владелец
	|	И НЕ ТехнологическиеОперации.ПометкаУдаления
	|	И (&Вперед
	|				И ТехнологическиеОперации.НомерОперации = &НомерСледующейОперации
	|			ИЛИ НЕ &Вперед
	|				И ТехнологическиеОперации.НомерСледующейОперации = &НомерОперации)";
	
	Запрос.УстановитьПараметр("Владелец",               ОперацияОбъект.Владелец);
	Запрос.УстановитьПараметр("НомерОперации",          НомерОперации);
	Запрос.УстановитьПараметр("НомерСледующейОперации", НомерСледующейОперации);
	Запрос.УстановитьПараметр("Вперед",                 Вперед);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		
		Возврат Истина;
		
	ИначеЕсли Результат.Количество() > 1 Тогда
		// Не должно быть несколько операций
		Если Вперед Тогда
			ТекстОшибки = НСтр("ru='Не удалось переместить операцию вперед,
                                    |т.к. следующих операций несколько.'
                                    |;uk='Не вдалося перемістити операцію вперед,
                                    |т. к. наступних операцій декілька.'");
		Иначе
			ТекстОшибки = НСтр("ru='Не удалось переместить операцию назад,
                                    |т.к. предыдущих операций несколько.'
                                    |;uk='Не вдалося перемістити операцію назад,
                                    |т. к. попередніх операцій декілька.'");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	ОперацияДляЗамены = Неопределено;
	
	// Заблокируем операцию с которой будет выполняться перемещение
	ОперацияДляЗамены = Результат[0].Ссылка.ПолучитьОбъект();
	Попытка
		ОперацияДляЗамены.Заблокировать();
	Исключение
		Если Вперед Тогда
			ТекстОшибки = НСтр("ru='Не удалось переместить операцию.
                                    |Возможно, следующая операция редактируется пользователем.'
                                    |;uk='Не вдалося перемістити операцію.
                                    |Можливо, наступна операція редагується користувачем.'");
		Иначе
			ТекстОшибки = НСтр("ru='Не удалось переместить операцию.
                                    |Возможно, предыдущая операция редактируется пользователем.'
                                    |;uk='Не вдалося перемістити операцію.
                                    |Можливо, попередня операція редагується користувачем.'");
		КонецЕсли;
	    Возврат Ложь;
	КонецПопытки;
	
	ОперацияОбъект.НомерОперации          = ОперацияДляЗамены.НомерОперации;
	ОперацияОбъект.НомерСледующейОперации = ОперацияДляЗамены.НомерСледующейОперации;
	
	ОперацияДляЗамены.НомерОперации          = НомерОперации;
	ОперацияДляЗамены.НомерСледующейОперации = НомерСледующейОперации;
	
	Попытка
		ОперацияОбъект.Записать();
		ОперацияДляЗамены.Записать();
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось переместить операцию.';uk='Не вдалося перемістити операцію.'");
		Возврат Ложь;
	КонецПопытки;
	
	ОперацияОбъект.Разблокировать();
	ОперацияДляЗамены.Разблокировать();
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ТекущаяСтрокаЭтоОперация()

	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТипЗнч(ТекущиеДанные) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборВСпискеОпераций()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Операции, 
		"Владелец", 
		Объект.Ссылка, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Операции, "МаршрутнаяКарта", Объект.Ссылка, Истина); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОперацию(Отказ = Ложь, ДобавитьВложенныйМаршрут = Ложь)

	Если НЕ ДоступностьРеквизитов Тогда
		
		Отказ = Истина;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Отказ = Истина;
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхКарт.Действует") Тогда
			ТекстВопроса = НСтр("ru='Ввод операций возможен со статусом ""В разработке"".
                                        |Изменить статус и записать спецификацию?'
                                        |;uk='Введення операцій можливе зі статусом ""У розробці"".
                                        |Змінити статус і записати специфікацію?'");
		Иначе
			ТекстВопроса = НСтр("ru='Ввод операций возможен только после записи маршрутной карты.
                                        |Записать маршрутную карту?'
                                        |;uk='Введення операцій можливе тільки після запису маршрутної карти.
                                        |Записати маршрутну карту?'");
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросДобавитьОперацию", ЭтаФорма, ДобавитьВложенныйМаршрут);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ДобавитьВложенныйМаршрут Тогда
		
		ДобавитьВложенныйМаршрут();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ТипСтоимостиРассчитывается = Перечисления.ТипыСтоимостиВыходныхИзделий.Рассчитывается;
	
	РазбиватьМаршрутныеЛисты = (Объект.МаксимальноеКоличествоЕдиницПартийИзделия <> 0);
	
	МаксимальноеКоличествоЕдиницПартийИзделия = Объект.МаксимальноеКоличествоЕдиницПартийИзделия;
	
	ЗаполнитьСлужебныеРеквизиты();
	
	УстановитьДоступностьКомандИзмененияСтатуса();
	УправлениеДоступностью(ЭтаФорма);
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтаФорма);
	
	НастроитьСоставМаршрутнойКарты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачалоДействия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхКарт.Действует;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Подразделение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхКарт.Действует;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ВыходныеИзделияНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВыходныеИзделия.Упаковка");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ВозвратныеОтходыНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.ВыходныеИзделия.Упаковка");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ОсновноеИзделие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияОперация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ОперацияРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<последняя операция>';uk='<остання операція>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыОперация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ОперацияРедактирование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<последняя операция>';uk='<остання операція>'"));

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ВыходныеИзделияХарактеристика",
																		     "Объект.ВыходныеИзделия.ХарактеристикиИспользуются");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ВозвратныеОтходыХарактеристика",
																		     "Объект.ВозвратныеОтходы.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимости.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоИзделийСТипомСтоимостиРассчитывается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МаксимальноеКоличествоЕдиницПартийИзделия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазбиватьМаршрутныеЛисты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// Текст <любая характеристика>
	#Область ТекстЛюбаяХарактеристика
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<любая характеристика>';uk='<будь-яка характеристика>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<любая характеристика>';uk='<будь-яка характеристика>'"));
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()

	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВыходныеИзделия,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВозвратныеОтходы,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
			
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.МатериалыИУслуги,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакАртикул",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "Артикул")));
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтоподбораНоменклатуры(Объект.МатериалыИУслуги);
	
	ВсегоИзделий = Объект.ВыходныеИзделия.Количество() + Объект.ВозвратныеОтходы.Количество();
	
	КоличествоИзделийСТипомСтоимостиРассчитывается = Объект.ВыходныеИзделия.Количество();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоМаршрутнойКарте(Источник)

	НачатьТранзакцию();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УдалитьОперацииПолучателя();
		СсылкаПриемника = Объект.Ссылка;
	Иначе
		СсылкаПриемника = Справочники.МаршрутныеКарты.ПолучитьСсылку();
	КонецЕсли;
		
	Если НЕ Справочники.МаршрутныеКарты.ЗапонитьПоМаршрутнойКарте(Объект, Источник, СсылкаПриемника) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Попытка
			СправочникОбъект = РеквизитФормыВЗначение("Объект");
			СправочникОбъект.УстановитьСсылкуНового(СсылкаПриемника);
			СправочникОбъект.Записать();
			ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
		Исключение
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки; 
	КонецЕсли; 
	
	ЗафиксироватьТранзакцию();

	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УдалитьОперацииПолучателя()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехнологическиеОперации.Ссылка
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
	|ГДЕ
	|	ТехнологическиеОперации.Владелец = &Владелец
	|	И НЕ ТехнологическиеОперации.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОперацияОбъект.ОбменДанными.Загрузка = Истина;
		ОперацияОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьРеквизитов = (Объект.Статус = Перечисления.СтатусыМаршрутныхКарт.ВРазработке);
	МаршрутнаяКартаЗакрыта = (Объект.Статус = Перечисления.СтатусыМаршрутныхКарт.Закрыта);
	
	МассивЭлементов = Справочники.МаршрутныеКарты.ПолучитьБлокируемыеРеквизитыОбъекта();
	
	// Команды
	МассивЭлементов.Добавить("ФормаЗаполнитьПоМаршрутнойКарте");
	МассивЭлементов.Добавить("МатериалыИУслугиВставитьСтроки");
	МассивЭлементов.Добавить("МатериалыИУслугиКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", НЕ ДоступностьРеквизитов);
	
	// Если маршрутная карта закрыта то сделаем недоступными остальные реквизиты
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("Подразделение");
	МассивЭлементов.Добавить("НачалоДействия");
	МассивЭлементов.Добавить("КонецДействия");
	МассивЭлементов.Добавить("Ответственный");
	МассивЭлементов.Добавить("РазбиватьМаршрутныеЛисты");
	МассивЭлементов.Добавить("МаксимальноеКоличествоЕдиницПартийИзделия");
	МассивЭлементов.Добавить("ПредварительныйБуфер");
	МассивЭлементов.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
	МассивЭлементов.Добавить("ЗавершающийБуфер");
	МассивЭлементов.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", МаршрутнаяКартаЗакрыта);
	
	// Доступность элементов списка операций
	Элементы.Операции.ИзменятьСоставСтрок       = ДоступностьРеквизитов;
	Элементы.ОперацииГруппаДобавить.Доступность = ДоступностьРеквизитов;
	
	Элементы.ОперацииИзменитьВидОперацииНаОперация.Доступность         = ДоступностьРеквизитов;
	Элементы.ОперацииИзменитьВидОперацииНаВложенныйМаршрут.Доступность = ДоступностьРеквизитов;
	Элементы.ОперацииКонтекстноеМенюИзменитьВидОперацииНаОперация.Доступность = ДоступностьРеквизитов;
	Элементы.ОперацииКонтекстноеМенюИзменитьВидОперацииНаВложенныйМаршрут.Доступность = ДоступностьРеквизитов;
	
	Элементы.ОперацииПереместитьОперациюНазад.Доступность   = ДоступностьРеквизитов;
	Элементы.ОперацииПереместитьОперациюВперед.Доступность  = ДоступностьРеквизитов;
	
	УстановитьДоступностьКомандБуфераОбмена();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеПринудительно()
    
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	СправочникОбъект.Статус = Перечисления.СтатусыМаршрутныхКарт.Действует;
	
	Возврат СправочникОбъект.ПроверитьЗаполнение();
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандИзмененияСтатуса()
	
	Элементы.УстановитьСтатусДействует.Доступность   = (Объект.Статус <> Перечисления.СтатусыМаршрутныхКарт.Действует);
	Элементы.УстановитьСтатусаЗакрыта.Доступность    = (Объект.Статус <> Перечисления.СтатусыМаршрутныхКарт.Закрыта);
	Элементы.УстановитьСтатусВРазработке.Доступность = (Объект.Статус <> Перечисления.СтатусыМаршрутныхКарт.ВРазработке);
	Элементы.ПроверитьЗаполнение.Доступность         = (Объект.Статус <> Перечисления.СтатусыМаршрутныхКарт.Действует);
	Элементы.НастроитьСостав.Видимость               = (Объект.Статус <> Перечисления.СтатусыМаршрутныхКарт.Действует);

КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьНовыйСтатусИЗаписать(Статус)

	Если Объект.ПометкаУдаления Тогда
		ТекстПредупреждения = НСтр("ru='Нельзя изменить статус помеченной на удаление маршрутной карты.';uk='Не можна змінити статус позначеної на вилучення маршрутної карти.'");
  		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();
	
	ТекущийСтатус = Объект.Статус;
	Объект.Статус = Статус;
	
	СтатусИзменен = Ложь;
	Попытка
		СтатусИзменен = Записать();
	Исключение
	
	КонецПопытки;
	
	Если НЕ СтатусИзменен Тогда
		Объект.Статус = ТекущийСтатус;
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)

	МассивЭлементов = Новый Массив;;
	МассивЭлементов.Добавить("МаксимальноеКоличествоЕдиницПартийИзделия");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
								Форма.Элементы, 
								МассивЭлементов, 
								"ТолькоПросмотр", 
								НЕ Форма.РазбиватьМаршрутныеЛисты);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		СписокТоваров = ВыбранноеЗначение;
	Иначе
		СписокТоваров = Новый Массив;
		СписокТоваров.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из СписокТоваров Цикл
		
		ТекущаяСтрока = Объект.МатериалыИУслуги.Добавить();
		ТекущаяСтрока.Номенклатура = СтрокаТовара;
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ТекущаяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиМатериалов(ТекущаяСтрока);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаИзделийВызовСервера()

	УправлениеДаннымиОбИзделиях.ПроверитьАвтовыборМатериаловИНастройкиПотребления(
		Объект.МатериалыИУслуги,
		Объект.СоответствиеСвойств, 
		Объект.ДляВидаИзделий);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗаполнитьПоМаршрутнойКарте(МаршрутнаяКартаИсточник, ДополнительныеПараметры) Экспорт

	Если МаршрутнаяКартаИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстВопроса = НСтр("ru='При заполнении прежние данные будут утеряны.
                                |Заполнить?'
                                |;uk='При заповненні колишні дані будуть загублені.
                                |Заповнити?'");
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Заполнить';uk='Заповнити'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаполнитьПоМаршрутнойКарте", ЭтаФорма, МаршрутнаяКартаИсточник);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,,, НСтр("ru='Заполнение по маршрутной карте';uk='Заповнення за маршрутною картою'"));

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьПоМаршрутнойКарте(РезультатВопроса, МаршрутнаяКартаИсточник) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаполнитьПоМаршрутнойКарте(МаршрутнаяКартаИсточник) Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка.ТехнологическиеОперации"));
		Оповестить("Запись_ТехнологическиеОперации");
	Иначе
		ПоказатьПредупреждение(,НСтр("ru='Не удалось заполнить по маршрутной карте.';uk='Не вдалося заповнити за маршрутною картою.'"));
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменитьВидОперации(РезультатВопроса, СодержитВложенныйМаршрут) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	
	Если СодержитВложенныйМаршрут Тогда
		ИмяОткрываемойФормы = "ФормаВложенногоМаршрута";
	Иначе
		ИмяОткрываемойФормы = "ФормаОперации";
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
	ОткрытьФорму("Справочник.ТехнологическиеОперации.Форма." + ИмяОткрываемойФормы, ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ВопросДобавитьОперацию(РезультатВопроса, ДобавитьВложенныйМаршрут) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхКарт.Действует") Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхКарт.ВРазработке");
	КонецЕсли;
	
	Если Записать() Тогда
		
		Если ДобавитьВложенныйМаршрут Тогда
			ДобавитьВложенныйМаршрут();
		Иначе
			Элементы.Операции.ДобавитьСтроку();
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенныйМаршрут()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СодержитВложенныйМаршрут", Истина);
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	ОткрытьФорму("Справочник.ТехнологическиеОперации.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ПараметрыФормы));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусВРазработкеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Истина Тогда
		УстановитьНовыйСтатусИЗаписать(ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхКарт.ВРазработке"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПоляВТаблице(ИмяТаблицы, ИмяПоля, СтандартнаяОбработка)

	Если НЕ ТолькоПросмотр И ДоступностьРеквизитов Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если (ИмяПоля = "ВыходныеИзделияНоменклатура"
			ИЛИ ИмяПоля = "ВыходныеИзделияНоменклатураКод"
			ИЛИ ИмяПоля = "ВыходныеИзделияНоменклатураАртикул"
			ИЛИ ИмяПоля = "МатериалыИУслугиНоменклатура"
			ИЛИ ИмяПоля = "МатериалыИУслугиНоменклатураКод"
			ИЛИ ИмяПоля = "МатериалыИУслугиАртикул")
		И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		
	ИначеЕсли ИмяПоля = "ВыходныеИзделияОперация" 
		И ЗначениеЗаполнено(ТекущиеДанные.ОперацияРедактирование) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ОперацияРедактирование);
		
	ИначеЕсли (ИмяПоля = "МатериалыИУслугиОперация"
			ИЛИ ИмяПоля = "ТрудозатратыОперация")
		И ЗначениеЗаполнено(ТекущиеДанные.Операция) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Операция);
		
	ИначеЕсли (ИмяПоля = "МатериалыИУслугиСтатьяКалькуляции"
			ИЛИ ИмяПоля = "ТрудозатратыСтатьяКалькуляции")
		И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.СтатьяКалькуляции);
		
	ИначеЕсли (ИмяПоля = "ТрудозатратыВидРабот")
		И ЗначениеЗаполнено(ТекущиеДанные.ВидРабот)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВидРабот);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкуНезаполненногоДляБуферов(Форма)

	Если НЕ ЗначениеЗаполнено(Форма.Объект.ЕдиницаИзмеренияПредварительногоБуфера)
		И Форма.Объект.ПредварительныйБуфер <> 0 Тогда
		Форма.Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ОтметкаНезаполненного = Истина;
	Иначе
		Форма.Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ОтметкаНезаполненного = Ложь;
	КонецЕсли; 	

	Если НЕ ЗначениеЗаполнено(Форма.Объект.ЕдиницаИзмеренияЗавершающегоБуфера)
		И Форма.Объект.ЗавершающийБуфер <> 0 Тогда
		Форма.Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ОтметкаНезаполненного = Истина;
	Иначе
		Форма.Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ОтметкаНезаполненного = Ложь;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоставЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(Объект, РезультатЗакрытия);
	НастроитьСоставМаршрутнойКарты();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСоставМаршрутнойКарты()

	Элементы.Операции.Видимость = Объект.ИспользоватьОперации;
	Элементы.ВыходныеИзделия.Видимость = Объект.ИспользоватьВыходныеИзделия;
	Элементы.ВозвратныеОтходы.Видимость = Объект.ИспользоватьВыходныеИзделия;
	Элементы.МатериалыИУслуги.Видимость = Объект.ИспользоватьМатериалы;
	Элементы.Трудозатраты.Видимость = Объект.ИспользоватьТрудозатраты;

	Элементы.ВыходныеИзделияОперация.Видимость = Объект.ИспользоватьОперации;
	Элементы.ВозвратныеОтходыОперация.Видимость = Объект.ИспользоватьОперации;
	Элементы.МатериалыИУслугиОперация.Видимость = Объект.ИспользоватьОперации;
	Элементы.ТрудозатратыОперация.Видимость = Объект.ИспользоватьОперации;
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти
