#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Возвращает данные маршрутной карты с учетом вложенных маршрутов
//
// Параметры:
//  МаршрутнаяКарта			- СправочникСсылка.МаршрутныеКарты	- Маршрутная карта данные которой нужно получить
//  КоличествоРезультата	- Число								- Количество результата по маршрутной карте
//  Номенклатура			- СправочникСсылка.Номенклатура		- Изделие
//  Характеристика			- СправочникСсылка.ХарактеристикиНоменклатуры	- Характеристика изделия
//  СписокДанных			- Строка	- через запятую перечисляются данные, которые нужно получить: ВыходныеИзделия,Материалы,Трудозатраты,Операции
//
// Возвращаемое значение:
//   Структура - содержит данные маршрутной карты: операции, выходные изделия, материалы, трудозатраты 
//
Функция ДанныеМаршрутнойКарты(МаршрутнаяКарта, КоличествоРезультата, Номенклатура, Характеристика, Знач СписокДанных = "") Экспорт
	
	Если СписокДанных <> "" Тогда
		СтруктураДанных = Новый Структура(СписокДанных);
	Иначе
		СтруктураДанных = Новый Структура("ВыходныеИзделия,ВозвратныеОтходы,Материалы,Трудозатраты,Операции,ВспомогательныеРабочиеЦентры");
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Операции") Тогда
		СтруктураДанных.Вставить("Операции", ИнициализироватьТаблицуОперации());
	КонецЕсли;
	
	СтруктураСвязей = ИнициализиорватьСтруктуруСвязей();
	ДобавитьДанныеМаршрутнойКартыРекурсивно(
				МаршрутнаяКарта, 
				КоличествоРезультата, 
				Номенклатура, 
				Характеристика, 
				СтруктураСвязей,
				СтруктураДанных);
	
	Если СтруктураДанных.Свойство("Операции") Тогда
		ЗаполнитьПорядокОпераций(СтруктураДанных.Операции);
	КонецЕсли; 
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает данные маршрутной карты для печати с учетом вложенных маршрутов
//
// Параметры:
//  МаршрутнаяКарта			- СправочникСсылка.МаршрутныеКарты	- Маршрутная карта данные которой нужно получить
//  КоличествоРезультата	- Число								- Количество результата по маршрутной карте
//  Номенклатура			- СправочникСсылка.Номенклатура		- Изделие
//  Характеристика			- СправочникСсылка.ХарактеристикиНоменклатуры	- Характеристика изделия
//  СписокДанных			- Строка	- через запятую перечисляются данные, которые нужно получить: ВыходныеИзделия,Материалы,Операции
//
// Возвращаемое значение:
//   Структура - содержит данные маршрутной карты: операции, выходные изделия, материалы 
//
Функция ДанныеМаршрутнойКартыДляПечати(МаршрутнаяКарта, КоличествоРезультата, Номенклатура, Характеристика, Знач СписокДанных = "") Экспорт
	
	Если СписокДанных <> "" Тогда
		СтруктураДанных = Новый Структура(СписокДанных);
	Иначе
		СтруктураДанных = Новый Структура("ВыходныеИзделия,Материалы,Операции");
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Операции") Тогда
		СтруктураДанных.Вставить("Операции", ИнициализироватьТаблицуОперации());
	КонецЕсли; 
	
	СтруктураСвязей = ИнициализиорватьСтруктуруСвязей();
	ДобавитьДанныеМаршрутнойКартыДляПечатиРекурсивно(
				МаршрутнаяКарта, 
				КоличествоРезультата, 
				Номенклатура, 
				Характеристика, 
				СтруктураСвязей, 
				СтруктураДанных);
	
	Если СтруктураДанных.Свойство("Операции") Тогда
		
		ЗаполнитьПорядокОпераций(СтруктураДанных.Операции);
		
		Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
			ЗаполнитьНомерОперацииВСвязаннойТаблице(СтруктураДанных.ВыходныеИзделия, СтруктураДанных.Операции);
		КонецЕсли; 
		Если СтруктураДанных.Свойство("Материалы") Тогда
			ЗаполнитьНомерОперацииВСвязаннойТаблице(СтруктураДанных.Материалы, СтруктураДанных.Операции);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат СтруктураДанных;
	
КонецФункции

// Проверяет последовательность операций
//
// Параметры:
//  МаршрутнаяКарта		- СправочникСсылка.МаршрутныеКарты - маршрутная карта, операции которой требуется проверить
//  Отказ				- Булево - признак отмены текущего действия
//
// Возвращаемое значение:
//   Булево   - истина, если последовательность операций правильная
//
Функция ПоследовательностьОперацийПравильная(МаршрутнаяКарта, Отказ = Ложь) Экспорт
	
	СтруктураСообщений = Новый Структура;
	СтруктураСообщений.Вставить("НесколькоПервыхОпераций",    НСтр("ru='Не может быть несколько первых операций.';uk='Не може бути кілька перших операцій.'"));
	
	СтруктураСообщений.Вставить("НетПервойОперации",    НСтр("ru='Отсутствует первая операция.';uk='Відсутня перша операція.'"));
	СтруктураСообщений.Вставить("НетПоследнейОперации", НСтр("ru='Отсутствует последняя операция.';uk='Відсутня остання операція.'"));
	СтруктураСообщений.Вставить("НетСледующейОперации", НСтр("ru='Операция ""%1"" ссылается на несуществующую операцию.';uk='Операція ""%1"" посилається на неіснуючу операцію.'"));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяСправочникаОпераций",     "ТехнологическиеОперации");
	СтруктураПараметров.Вставить("ПолеНомерОперации",          "НомерОперации");
	СтруктураПараметров.Вставить("ПолеНомерСледующейОперации", "НомерСледующейОперации");
	
	ПоследовательностьПравильная = УправлениеДаннымиОбИзделиях.ПоследовательностьОперацийПравильная(МаршрутнаяКарта, СтруктураПараметров, СтруктураСообщений, Отказ);
	
	Возврат ПоследовательностьПравильная;
	
КонецФункции

// Заполняет маршрутную карту по другой маршрутной карте
//
// Параметры:
//  Приемник	- СправочникОбъект.МаршрутныеКарты, ДанныеФормыСтруктура - маршрутная карта в которую будут скопированы операции
//  Источник	- СправочникСсылка.МаршрутныеКарты - маршрутная карта операции которой нужно скопировать
//
// Возвращаемое значение:
//   Булево   - истина, если копирование выполнено успешно
//
Функция ЗапонитьПоМаршрутнойКарте(Приемник, Источник, СсылкаПриемника) Экспорт

	ИсточникОбъект = Источник.ПолучитьОбъект();
	Если Приемник.ИспользоватьВыходныеИзделия Тогда
		Приемник.ВыходныеИзделия.Загрузить(ИсточникОбъект.ВыходныеИзделия.Выгрузить());
		Приемник.ВозвратныеОтходы.Загрузить(ИсточникОбъект.ВозвратныеОтходы.Выгрузить());
	КонецЕсли;
	Если Приемник.ИспользоватьМатериалы Тогда
		Приемник.МатериалыИУслуги.Загрузить(ИсточникОбъект.МатериалыИУслуги.Выгрузить());
	КонецЕсли; 
	Если Приемник.ИспользоватьТрудозатраты Тогда
		Приемник.Трудозатраты.Загрузить(ИсточникОбъект.Трудозатраты.Выгрузить());
	КонецЕсли; 
	
	Если Приемник.ИспользоватьОперации Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникТехнологическиеОперации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТехнологическиеОперации КАК СправочникТехнологическиеОперации
		|ГДЕ
		|	СправочникТехнологическиеОперации.Владелец = &Источник
		|	И НЕ СправочникТехнологическиеОперации.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Источник", Источник);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОперацияОбъект = Выборка.Ссылка.Скопировать();
			ОперацияОбъект.Владелец = СсылкаПриемника;
			
			ОперацияОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ОперацияОбъект.Записать();
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
			// Заполним связь с операцией
			Если Приемник.ИспользоватьВыходныеИзделия Тогда
				НайденныеСтроки = Приемник.ВыходныеИзделия.НайтиСтроки(Новый Структура("ОперацияРедактирование", Выборка.Ссылка));
				Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
					ДанныеСтроки.ОперацияРедактирование = ОперацияОбъект.Ссылка;
				КонецЦикла;
				НайденныеСтроки = Приемник.ВозвратныеОтходы.НайтиСтроки(Новый Структура("ОперацияРедактирование", Выборка.Ссылка));
				Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
					ДанныеСтроки.ОперацияРедактирование = ОперацияОбъект.Ссылка;
				КонецЦикла;
			КонецЕсли; 
			Если Приемник.ИспользоватьМатериалы Тогда
				НайденныеСтроки = Приемник.МатериалыИУслуги.НайтиСтроки(Новый Структура("Операция", Выборка.Ссылка));
				Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
					ДанныеСтроки.Операция = ОперацияОбъект.Ссылка;
				КонецЦикла;
			КонецЕсли; 
			Если Приемник.ИспользоватьТрудозатраты Тогда
				НайденныеСтроки = Приемник.Трудозатраты.НайтиСтроки(Новый Структура("Операция", Выборка.Ссылка));
				Для каждого ДанныеСтроки Из НайденныеСтроки Цикл
					ДанныеСтроки.Операция = ОперацияОбъект.Ссылка;
				КонецЦикла;
			КонецЕсли; 
			
		КонецЦикла;
	Иначе
		Для каждого ДанныеСтроки Из Приемник.ВыходныеИзделия Цикл
			ДанныеСтроки.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
			ДанныеСтроки.ОперацияРедактирование = Справочники.ТехнологическиеОперации.ПустаяСсылка();
		КонецЦикла;
		Для каждого ДанныеСтроки Из Приемник.ВозвратныеОтходы Цикл
			ДанныеСтроки.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
			ДанныеСтроки.ОперацияРедактирование = Справочники.ТехнологическиеОперации.ПустаяСсылка();
		КонецЦикла;
		Для каждого ДанныеСтроки Из Приемник.МатериалыИУслуги Цикл
			ДанныеСтроки.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
		КонецЦикла;
		Для каждого ДанныеСтроки Из Приемник.Трудозатраты Цикл
			ДанныеСтроки.Операция = Справочники.ТехнологическиеОперации.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли; 

	Возврат Истина;
	
КонецФункции

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значание:
//	Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	// Элементы управления шапки
	Результат.Добавить("Код");
	Результат.Добавить("ДляВидаИзделий");
	
	// Элементы табличных частей
	Результат.Добавить("ВыходныеИзделия");
	Результат.Добавить("ВозвратныеОтходы");
	Результат.Добавить("МатериалыИУслуги");
	Результат.Добавить("Трудозатраты");
	
	// Команды
	Результат.Добавить("МатериалыИУслугиОткрытьПодборМатериалов");
	
	Возврат Результат;
	
КонецФункции

// Проверяет использование объекта
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки
//
Процедура ПроверитьИспользованиеОбъекта(Параметры, АдресХранилища) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСсылки
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.МаршрутнаяКарта = &Объект
	//++ НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.МаршрутнаяКарта = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.МаршрутнаяКарта = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.Операции КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Операция = &Объект
	//-- НЕ УТКА
	|";
	
	Запрос.УстановитьПараметр("Объект", Параметры.Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЕстьСсылки = НЕ Результат.Пустой();
	
	ПоместитьВоВременноеХранилище(ЕстьСсылки, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	УправлениеДаннымиОбИзделияхВызовСервера.МаршрутныеКартыОбработкаПолученияДанныхВыбора(
				ДанныеВыбора, 
				Параметры, 
				СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" И Параметры.Свойство("ВыборДействующихМаршрутныхКарт") Тогда
		ВыбраннаяФорма = "ВыборДействующихМаршрутныхКарт";
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ИнициализироватьТаблицуОперации()
	
	ТаблицаОперации = Новый ТаблицаЗначений;
	ТаблицаОперации.Колонки.Добавить("Операция",         	Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	ТаблицаОперации.Колонки.Добавить("ОперацияПредставление",  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаОперации.Колонки.Добавить("ОперацияРодитель", 	Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	ТаблицаОперации.Колонки.Добавить("ВложенныйМаршрут", 	Новый ОписаниеТипов("СправочникСсылка.МаршрутныеКарты"));
	ТаблицаОперации.Колонки.Добавить("КлючСвязи",        	Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаОперации.Колонки.Добавить("КлючСвязиРодитель",	Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаОперации.Колонки.Добавить("КлючСвязиВложенныйМаршрут", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	ТаблицаОперации.Колонки.Добавить("СодержитВложенныйМаршрут", Новый ОписаниеТипов("Булево"));
	
	ТаблицаОперации.Колонки.Добавить("Количество",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОперации.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));
	
	ТаблицаОперации.Колонки.Добавить("НомерОперации",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаОперации.Колонки.Добавить("НомерСледующейОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаОперации.Колонки.Добавить("ИсходныйНомерОперации",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаОперации.Колонки.Добавить("ИсходныйНомерСледующейОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	
	ТаблицаОперации.Колонки.Добавить("РабочийЦентр",      Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров"));
	ТаблицаОперации.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	
	ТаблицаОперации.Колонки.Добавить("Норма",             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	ТаблицаОперации.Колонки.Добавить("ПараллельнаяЗагрузка",       Новый ОписаниеТипов("Булево"));
	
	ТаблицаОперации.Колонки.Добавить("ВремяВыполнения",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,1)));
	ТаблицаОперации.Колонки.Добавить("ВремяВыполненияЕдИзм",       Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"));
	
	ТаблицаОперации.Колонки.Добавить("ВремяШтучное",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,1)));
	ТаблицаОперации.Колонки.Добавить("ВремяШтучноеЕдИзм", Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"));
	
	ТаблицаОперации.Колонки.Добавить("ВремяПЗ",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,1)));
	ТаблицаОперации.Колонки.Добавить("ВремяПЗЕдИзм", Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"));
	
	ТаблицаОперации.Колонки.Добавить("ВариантНаладки",	Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки"));
	ТаблицаОперации.Колонки.Добавить("Загрузка",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаОперации.Колонки.Добавить("Непрерывная",		Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаОперации;
	
КонецФункции

Функция ИнициализиорватьСтруктуруСвязей()
	
	СтруктураСвязей = Новый Структура;
	СтруктураСвязей.Вставить("ОперацияРодитель", Неопределено);
	СтруктураСвязей.Вставить("КлючСвязиРодитель", Неопределено);
	СтруктураСвязей.Вставить("КлючСвязиВложенныйМаршрут", Неопределено);
	
	Возврат СтруктураСвязей;
	
КонецФункции

Процедура ДобавитьДанныеМаршрутнойКартыРекурсивно(МаршрутнаяКарта, КоличествоРезультата, Номенклатура, Характеристика, СтруктураСвязей, СтруктураДанных)
	
	// Заполним строки по маршрутной карте
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	ТекущийИндекс = 0;
	ИндексыТаблиц = Новый Соответствие;
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		
		ИндексыТаблиц.Вставить("ВыходныеИзделия", ТекущийИндекс);
		
		Запрос.Текст = Запрос.Текст +
		?(Запрос.Текст = "", "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	МаршрутныеКартыВыходныеИзделия.Номенклатура                   КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА МаршрутныеКартыВыходныеИзделия.Характеристика
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Номенклатура = &Номенклатура
		|			ТОГДА &Характеристика
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                                          КАК Характеристика,
		|	МаршрутныеКартыВыходныеИзделия.КоличествоУпаковок * &КоличествоРезультата КАК КоличествоУпаковок,
		|	МаршрутныеКартыВыходныеИзделия.Количество * &КоличествоРезультата         КАК Количество,
		|	МаршрутныеКартыВыходныеИзделия.Упаковка                        КАК Упаковка,
		|	МаршрутныеКартыВыходныеИзделия.Операция                        КАК Операция,
		|	МаршрутныеКартыВыходныеИзделия.ДоляСтоимости                   КАК ДоляСтоимости
		|ИЗ
		|	Справочник.МаршрутныеКарты.ВыходныеИзделия КАК МаршрутныеКартыВыходныеИзделия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.ВыходныеИзделия КАК ИсходноеВыходноеИзделие
		|		ПО ИсходноеВыходноеИзделие.Ссылка = МаршрутныеКартыВыходныеИзделия.Ссылка
		|			И ИсходноеВыходноеИзделие.Номенклатура = &Номенклатура
		|ГДЕ
		|	МаршрутныеКартыВыходныеИзделия.Ссылка = &МаршрутнаяКарта
		|	И МаршрутныеКарты.ИспользоватьВыходныеИзделия";
		
		ТекущийИндекс = ТекущийИндекс + 1;
		
	КонецЕсли; 

	Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
		
		ИндексыТаблиц.Вставить("ВозвратныеОтходы", ТекущийИндекс);
		
		Запрос.Текст = Запрос.Текст +
		?(Запрос.Текст = "", "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	МаршрутныеКартыВозвратныеОтходы.Номенклатура                               КАК Номенклатура,
		|	МаршрутныеКартыВозвратныеОтходы.Характеристика                             КАК Характеристика,
		|	МаршрутныеКартыВозвратныеОтходы.КоличествоУпаковок * &КоличествоРезультата КАК КоличествоУпаковок,
		|	МаршрутныеКартыВозвратныеОтходы.Количество * &КоличествоРезультата         КАК Количество,
		|	МаршрутныеКартыВозвратныеОтходы.Упаковка                                   КАК Упаковка,
		|	МаршрутныеКартыВозвратныеОтходы.СтатьяКалькуляции                          КАК СтатьяКалькуляции,
		|	МаршрутныеКартыВозвратныеОтходы.Операция                                   КАК Операция
		|ИЗ
		|	Справочник.МаршрутныеКарты.ВозвратныеОтходы КАК МаршрутныеКартыВозвратныеОтходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|ГДЕ
		|	МаршрутныеКартыВозвратныеОтходы.Ссылка = &МаршрутнаяКарта
		|	И МаршрутныеКарты.ИспользоватьВыходныеИзделия";
		
		ТекущийИндекс = ТекущийИндекс + 1;
		
	КонецЕсли; 
	
	// Операции получаем всегда, чтобы обойти вложенные маршрутные карты
	ИндексыТаблиц.Вставить("Операции", ТекущийИндекс);
	
	Запрос.Текст = Запрос.Текст +
	?(Запрос.Текст = "", "", Символы.ПС + ";" + Символы.ПС) + ТекстЗапросаОперацииМаршрутнойКарты();
		
	ТекущийИндекс = ТекущийИндекс + 1;
		
	Если СтруктураДанных.Свойство("Материалы") Тогда
		
		ИндексыТаблиц.Вставить("Материалы", ТекущийИндекс);
		
		Запрос.Текст = Запрос.Текст +
		?(Запрос.Текст = "", "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	МаршрутныеКартыМатериалыИУслуги.Операция                                        КАК Операция,
		|	МаршрутныеКартыМатериалыИУслуги.Номенклатура                                    КАК Номенклатура,
		|	МаршрутныеКартыМатериалыИУслуги.Характеристика                                  КАК Характеристика,
		|	МаршрутныеКартыМатериалыИУслуги.КоличествоУпаковок * &КоличествоРезультата      КАК КоличествоУпаковок,
		|	МаршрутныеКартыМатериалыИУслуги.Количество * &КоличествоРезультата              КАК Количество,
		|	МаршрутныеКартыМатериалыИУслуги.Упаковка                                        КАК Упаковка,
		|	МаршрутныеКартыМатериалыИУслуги.СтатьяКалькуляции                               КАК СтатьяКалькуляции,
		|	ВЫБОР 
		|		КОГДА МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|			ИЛИ МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                            КАК ИспользуетсяАвтовыбор,
		|	МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораНоменклатуры,
		|	МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораХарактеристики,
		|	МаршрутныеКартыМатериалыИУслуги.СвойствоСодержащееНоменклатуру,
		|	МаршрутныеКартыМатериалыИУслуги.ОтборСвойство,
		|	МаршрутныеКартыМатериалыИУслуги.ОтборЗначениеСвойства,
		|	МаршрутныеКартыМатериалыИУслуги.АлгоритмРасчетаКоличества,
		|	МаршрутныеКартыМатериалыИУслуги.ПрименениеМатериала,
		|	МаршрутныеКартыМатериалыИУслуги.КлючСвязи,
		|	ВЫБОР 
		|		КОГДА МаршрутныеКартыМатериалыИУслуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ МаршрутныеКартыМатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
		|																	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		КОГДА ЕСТЬNULL(НастройкаХарактеристика.ОснованиеДляПолучения,
		|				ЕСТЬNULL(НастройкаНоменклатура.ОснованиеДляПолучения,
		|				ЕСТЬNULL(НастройкаСклад.ОснованиеДляПолучения,
		|				ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)))) = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
		|			ТОГДА ЕСТЬNULL(НастройкаХарактеристика.Склад,
		|				ЕСТЬNULL(НастройкаНоменклатура.Склад,
		|				ЕСТЬNULL(НастройкаСклад.Склад,
		|				ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))) 
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|	ВЫБОР 
		|		КОГДА МаршрутныеКартыМатериалыИУслуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|			ИЛИ МаршрутныеКартыМатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
		|																	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
		|			ТОГДА ЛОЖЬ
		|		КОГДА ЕСТЬNULL(НастройкаХарактеристика.ОснованиеДляПолучения,
		|				ЕСТЬNULL(НастройкаНоменклатура.ОснованиеДляПолучения,
		|				ЕСТЬNULL(НастройкаСклад.ОснованиеДляПолучения,
		|				ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)))) = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗаказатьНаСклад,
		|	ВЫБОР 
		|		КОГДА МаршрутныеКартыМатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
		|	КОНЕЦ КАК ВариантОбеспечения
		|ИЗ
		|	Справочник.МаршрутныеКарты.МатериалыИУслуги КАК МаршрутныеКартыМатериалыИУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК СвойстваНоменклатуры
		|		ПО МаршрутныеКартыМатериалыИУслуги.ОтборСвойство = СвойстваНоменклатуры.Свойство
		|			И (СвойстваНоменклатуры.Ссылка = &Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК СвойстваХарактеристики
		|		ПО МаршрутныеКартыМатериалыИУслуги.ОтборСвойство = СвойстваХарактеристики.Свойство
		|			И (СвойстваХарактеристики.Ссылка = &Характеристика)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаХарактеристика
		|		ПО МаршрутныеКартыМатериалыИУслуги.Ссылка.Подразделение = НастройкаХарактеристика.Подразделение
		|			И МаршрутныеКартыМатериалыИУслуги.Номенклатура = НастройкаХарактеристика.Номенклатура
		|			И МаршрутныеКартыМатериалыИУслуги.Характеристика = НастройкаХарактеристика.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаНоменклатура
		|		ПО МаршрутныеКартыМатериалыИУслуги.Ссылка.Подразделение = НастройкаНоменклатура.Подразделение
		|			И МаршрутныеКартыМатериалыИУслуги.Номенклатура = НастройкаНоменклатура.Номенклатура
		|			И (НастройкаНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (НастройкаХарактеристика.Подразделение ЕСТЬ NULL )
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаСклад
		|		ПО МаршрутныеКартыМатериалыИУслуги.Ссылка.Подразделение = НастройкаСклад.Подразделение
		|			И (НастройкаСклад.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|			И (НастройкаСклад.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (НастройкаХарактеристика.Подразделение ЕСТЬ NULL )
		|			И (НастройкаНоменклатура.Подразделение ЕСТЬ NULL )
		|ГДЕ
		|	МаршрутныеКартыМатериалыИУслуги.Ссылка = &МаршрутнаяКарта
		|	И МаршрутныеКарты.ИспользоватьМатериалы
		|	И (МаршрутныеКартыМатериалыИУслуги.ОтборСвойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)
		|			ИЛИ (СвойстваНоменклатуры.Свойство ЕСТЬ NULL 
		|				ИЛИ СвойстваНоменклатуры.Значение = МаршрутныеКартыМатериалыИУслуги.ОтборЗначениеСвойства)
		|				И (СвойстваХарактеристики.Свойство ЕСТЬ NULL 
		|					ИЛИ СвойстваХарактеристики.Значение = МаршрутныеКартыМатериалыИУслуги.ОтборЗначениеСвойства))
		|;
		|
		// СоответствиеСвойств
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутныеКартыСоответствиеСвойств.СвойствоМатериала,
		|	МаршрутныеКартыСоответствиеСвойств.СвойствоПродукции,
		|	МаршрутныеКартыСоответствиеСвойств.КлючСвязиМатериал
		|ИЗ
		|	Справочник.МаршрутныеКарты.СоответствиеСвойств КАК МаршрутныеКартыСоответствиеСвойств
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|ГДЕ
		|	МаршрутныеКартыСоответствиеСвойств.Ссылка = &МаршрутнаяКарта
		|	И МаршрутныеКарты.ИспользоватьМатериалы";
			
		ТекущийИндекс = ТекущийИндекс + 2;
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Трудозатраты") Тогда
		
		ИндексыТаблиц.Вставить("Трудозатраты", ТекущийИндекс);
		
		Запрос.Текст = Запрос.Текст +
		?(Запрос.Текст = "", "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	МаршрутныеКартыТрудозатраты.ВидРабот,
		|	МаршрутныеКартыТрудозатраты.Операция.Представление КАК СодержаниеРабот,
		|	МаршрутныеКартыТрудозатраты.Количество * &КоличествоРезультата КАК Количество,
		|	МаршрутныеКартыТрудозатраты.СтатьяКалькуляции,
		|	МаршрутныеКартыТрудозатраты.Операция
		|ИЗ
		|	Справочник.МаршрутныеКарты.Трудозатраты КАК МаршрутныеКартыТрудозатраты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|ГДЕ
		|	МаршрутныеКартыТрудозатраты.Ссылка = &МаршрутнаяКарта
		|	И МаршрутныеКарты.ИспользоватьТрудозатраты";
			
		ТекущийИндекс = ТекущийИндекс + 1;
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ВспомогательныеРабочиеЦентры") Тогда
		
		ИндексыТаблиц.Вставить("ВспомогательныеРабочиеЦентры", ТекущийИндекс);
		
		Запрос.Текст = Запрос.Текст +
		?(Запрос.Текст = "", "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	ТехнологическиеОперацииВспомогательныеРабочиеЦентры.РабочийЦентр,
		|	ТехнологическиеОперацииВспомогательныеРабочиеЦентры.Ссылка КАК Операция
		|ИЗ
		|	Справочник.ТехнологическиеОперации.ВспомогательныеРабочиеЦентры КАК ТехнологическиеОперацииВспомогательныеРабочиеЦентры
		|ГДЕ
		|	ТехнологическиеОперацииВспомогательныеРабочиеЦентры.Ссылка.Владелец = &МаршрутнаяКарта";
		
		ТекущийИндекс = ТекущийИндекс + 1;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МаршрутнаяКарта",         МаршрутнаяКарта);
	Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",          Характеристика);
	Запрос.УстановитьПараметр("КоличествоРезультата",    КоличествоРезультата);
	Запрос.УстановитьПараметр("ОперацияРодитель",        СтруктураСвязей.ОперацияРодитель);
	Запрос.УстановитьПараметр("КлючСвязиРодитель",       СтруктураСвязей.КлючСвязиРодитель);
	Запрос.УстановитьПараметр("КлючСвязиВложенныйМаршрут", СтруктураСвязей.КлючСвязиВложенныйМаршрут);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		ТаблицаВыходныеИзделия  = РезультатЗапроса[ИндексыТаблиц.Получить("ВыходныеИзделия")].Выгрузить();
		ТаблицаВыходныеИзделия.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
		ТаблицаВозвратныеОтходы = РезультатЗапроса[ИндексыТаблиц.Получить("ВозвратныеОтходы")].Выгрузить();
		ТаблицаВозвратныеОтходы.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ТаблицаМатериалыИУслуги = РезультатЗапроса[ИндексыТаблиц.Получить("Материалы")].Выгрузить();
		ТаблицаСоответствиеСвойств = РезультатЗапроса[ИндексыТаблиц.Получить("Материалы") + 1].Выгрузить();
		ТаблицаМатериалыИУслуги.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	Если СтруктураДанных.Свойство("Трудозатраты") Тогда
		ТаблицаТрудозатраты = РезультатЗапроса[ИндексыТаблиц.Получить("Трудозатраты")].Выгрузить();
		ТаблицаТрудозатраты.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВспомогательныеРабочиеЦентры") Тогда
		ТаблицаВспомогательныеРабочиеЦентры = РезультатЗапроса[ИндексыТаблиц.Получить("ВспомогательныеРабочиеЦентры")].Выгрузить();
		ТаблицаВспомогательныеРабочиеЦентры.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	
	ТаблицаВложенныхМаршрутов = Новый ТаблицаЗначений;
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("ВложенныйМаршрут");
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("Операция");
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("КлючСвязи");
	
	ВыборкаОпераций = РезультатЗапроса[ИндексыТаблиц.Получить("Операции")].Выбрать();
	Пока ВыборкаОпераций.Следующий() Цикл
		
		// Добавим полученные операции
		Если СтруктураДанных.Свойство("Операции") Тогда
			СтрокаОперация = СтруктураДанных.Операции.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперация, ВыборкаОпераций);
			СтрокаОперация.КлючСвязи = Новый УникальныйИдентификатор;
			
			ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации(
				СтрокаОперация, КоличествоРезультата);
			
			Если ВыборкаОпераций.СодержитВложенныйМаршрут Тогда
				НовыйВложенныйМаршрут = ТаблицаВложенныхМаршрутов.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйВложенныйМаршрут, СтрокаОперация);
				Продолжить;
			КонецЕсли;
			
			Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаВыходныеИзделия);
			КонецЕсли;
			Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаВозвратныеОтходы);
			КонецЕсли;
			Если СтруктураДанных.Свойство("Материалы") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаМатериалыИУслуги);
			КонецЕсли;
			Если СтруктураДанных.Свойство("Трудозатраты") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаТрудозатраты);
			КонецЕсли;
			Если СтруктураДанных.Свойство("ВспомогательныеРабочиеЦентры") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаВспомогательныеРабочиеЦентры);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Для материалов требуется обработать автовыбор номенклатуры (характеристики) и формулы
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ДанныеПоНоменклатуре = Новый Структура;
		ДанныеПоНоменклатуре.Вставить("Номенклатура",   Номенклатура);
		ДанныеПоНоменклатуре.Вставить("Характеристика", Характеристика);
		ДанныеПоНоменклатуре.Вставить("Спецификация",   МаршрутнаяКарта);
		
		Если СтруктураДанных.Свойство("ВыходныеИзделия") И ТаблицаВыходныеИзделия.Количество() <> 0 Тогда
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", Номенклатура,Характеристика);
   			СписокСтрок = ТаблицаВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() <> 0 Тогда
				ДанныеПоНоменклатуре.Вставить("Количество", СписокСтрок[0].Количество);
			Иначе
				ДанныеПоНоменклатуре.Вставить("Количество",	КоличествоРезультата);
			КонецЕсли;
		Иначе
			ДанныеПоНоменклатуре.Вставить("Количество",	КоличествоРезультата);
		КонецЕсли;
		
		УправлениеДаннымиОбИзделиях.ОбработатьНастройкиАвтовыбораИПотребленияМатериалов(
						ТаблицаМатериалыИУслуги, 
						ДанныеПоНоменклатуре, 
						"МаршрутныеКарты", 
						Ложь, 
						Истина);
	КонецЕсли;
					
	// Добавим подготовленные таблицы в структуру данных
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		ДобавитьТаблицуМаршрутнойКарты("ВыходныеИзделия",  ТаблицаВыходныеИзделия.Скопировать(),  СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВозвратныеОтходы") Тогда
		ДобавитьТаблицуМаршрутнойКарты("ВозвратныеОтходы",  ТаблицаВозвратныеОтходы.Скопировать(), СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ДобавитьТаблицуМаршрутнойКарты("Материалы", ТаблицаМатериалыИУслуги.Скопировать(), СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Трудозатраты") Тогда
		ДобавитьТаблицуМаршрутнойКарты("Трудозатраты", ТаблицаТрудозатраты.Скопировать(), СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВспомогательныеРабочиеЦентры") Тогда
		ДобавитьТаблицуМаршрутнойКарты("ВспомогательныеРабочиеЦентры", ТаблицаВспомогательныеРабочиеЦентры.Скопировать(), СтруктураДанных);
	КонецЕсли;
	
	// Перед тем как уйти в рекурсию освободим память
	Запрос                  = Неопределено;
	РезультатЗапроса        = Неопределено;
	ТаблицаВыходныеИзделия  = Неопределено;
	ТаблицаВозвратныеОтходы = Неопределено;
	ТаблицаМатериалыИУслуги = Неопределено;
	ТаблицаТрудозатраты     = Неопределено;
	ТаблицаВспомогательныеРабочиеЦентры = Неопределено;
	
	// Добавим данные вложенных маршрутов рекурсивно
	Для каждого ВыборкаОпераций Из ТаблицаВложенныхМаршрутов Цикл
		
		СтруктураСвязейВложенная = Новый Структура;
		СтруктураСвязейВложенная.Вставить("ОперацияРодитель", ВыборкаОпераций.Операция);
		СтруктураСвязейВложенная.Вставить("КлючСвязиРодитель", ВыборкаОпераций.КлючСвязи);
		
		Если СтруктураСвязей.КлючСвязиВложенныйМаршрут = Неопределено Тогда
			СтруктураСвязейВложенная.Вставить("КлючСвязиВложенныйМаршрут", ВыборкаОпераций.КлючСвязи);
		Иначе
			СтруктураСвязейВложенная.Вставить("КлючСвязиВложенныйМаршрут", СтруктураСвязей.КлючСвязиВложенныйМаршрут);
		КонецЕсли;
		
		ДобавитьДанныеМаршрутнойКартыРекурсивно(ВыборкаОпераций.ВложенныйМаршрут, 
												КоличествоРезультата, 
												Номенклатура, 
												Характеристика,
												СтруктураСвязейВложенная,
												СтруктураДанных);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеМаршрутнойКартыДляПечатиРекурсивно(МаршрутнаяКарта, КоличествоРезультата, Номенклатура, Характеристика, СтруктураСвязей, СтруктураДанных)
	
	// Заполним строки по маршрутной карте
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	ТекущийИндекс = 0;
	ИндексыТаблиц = Новый Соответствие;
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		
		ИндексыТаблиц.Вставить("ВыходныеИзделия", ТекущийИндекс);
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	МаршрутныеКартыВыходныеИзделия.Номенклатура                   КАК Номенклатура,
		|	МаршрутныеКартыВыходныеИзделия.Номенклатура.Представление КАК НоменклатураПредставление,
		|	ВЫБОР
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА МаршрутныеКартыВыходныеИзделия.Характеристика
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Номенклатура = &Номенклатура
		|			ТОГДА &Характеристика
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                                          КАК Характеристика,
		|	ВЫБОР
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|			ТОГДА МаршрутныеКартыВыходныеИзделия.Характеристика.Представление
		|		КОГДА МаршрутныеКартыВыходныеИзделия.Номенклатура = &Номенклатура
		|			ТОГДА ХарактеристикиНоменклатуры.Представление
		|		ИНАЧЕ """"
		|	КОНЕЦ                                                          КАК ХарактеристикаПредставление,
		|	МаршрутныеКартыВыходныеИзделия.КоличествоУпаковок * &КоличествоРезультата КАК КоличествоУпаковок,
		|	МаршрутныеКартыВыходныеИзделия.Количество * &КоличествоРезультата         КАК Количество,
		|	&ТекстЗапросаНаименованиеЕдиницыИзмерения1                                КАК ЕдиницаИзмеренияНаименование,
		|	МаршрутныеКартыВыходныеИзделия.Операция                        КАК Операция,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости,
		|	МаршрутныеКартыВыходныеИзделия.ДоляСтоимости                   КАК ДоляСтоимости
		|ИЗ
		|	Справочник.МаршрутныеКарты.ВыходныеИзделия КАК МаршрутныеКартыВыходныеИзделия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.ВыходныеИзделия КАК ИсходноеВыходноеИзделие
		|		ПО ИсходноеВыходноеИзделие.Ссылка = МаршрутныеКартыВыходныеИзделия.Ссылка
		|			И ИсходноеВыходноеИзделие.Номенклатура = &Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ХарактеристикиНоменклатуры.Ссылка = &Характеристика
		|ГДЕ
		|	МаршрутныеКартыВыходныеИзделия.Ссылка = &МаршрутнаяКарта
		|	И МаршрутныеКарты.ИспользоватьВыходныеИзделия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МаршрутныеКартыВозвратныеОтходы.Номенклатура                   КАК Номенклатура,
		|	МаршрутныеКартыВозвратныеОтходы.Номенклатура.Представление КАК НоменклатураПредставление,
		|	МаршрутныеКартыВозвратныеОтходы.Характеристика                 КАК Характеристика,
		|	МаршрутныеКартыВозвратныеОтходы.Характеристика.Представление   КАК ХарактеристикаПредставление,
		|	МаршрутныеКартыВозвратныеОтходы.КоличествоУпаковок * &КоличествоРезультата КАК КоличествоУпаковок,
		|	МаршрутныеКартыВозвратныеОтходы.Количество * &КоличествоРезультата         КАК Количество,
		|	&ТекстЗапросаНаименованиеЕдиницыИзмерения2                     КАК ЕдиницаИзмеренияНаименование,
		|	МаршрутныеКартыВозвратныеОтходы.Операция                       КАК Операция,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная)          КАК ТипСтоимости,
		|	0                                                              КАК ДоляСтоимости
		|ИЗ
		|	Справочник.МаршрутныеКарты.ВозвратныеОтходы КАК МаршрутныеКартыВозвратныеОтходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|ГДЕ
		|	МаршрутныеКартыВозвратныеОтходы.Ссылка = &МаршрутнаяКарта
		|	И МаршрутныеКарты.ИспользоватьВыходныеИзделия";
			
		ТекущийИндекс = ТекущийИндекс + 1;
		
	КонецЕсли; 

	// Операции получаем всегда, чтобы обойти вложенные маршрутные карты
	ИндексыТаблиц.Вставить("Операции", ТекущийИндекс);
	
	Запрос.Текст = Запрос.Текст +
	?(Запрос.Текст = "", "", Символы.ПС + ";" + Символы.ПС) + ТекстЗапросаОперацииМаршрутнойКарты();
	
	ТекущийИндекс = ТекущийИндекс + 1;
		
	Если СтруктураДанных.Свойство("Материалы") Тогда
		
		ИндексыТаблиц.Вставить("Материалы", ТекущийИндекс);
		
		Запрос.Текст = Запрос.Текст +
		?(Запрос.Текст = "", "", Символы.ПС + ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	МаршрутныеКартыМатериалыИУслуги.Операция                                        КАК Операция,
		|	МаршрутныеКартыМатериалыИУслуги.Номенклатура                                    КАК Номенклатура,
		|	МаршрутныеКартыМатериалыИУслуги.Номенклатура.Представление                      КАК НоменклатураПредставление,
		|	МаршрутныеКартыМатериалыИУслуги.Характеристика                                  КАК Характеристика,
		|	МаршрутныеКартыМатериалыИУслуги.Характеристика.Представление                    КАК ХарактеристикаПредставление,
		|	МаршрутныеКартыМатериалыИУслуги.КоличествоУпаковок * &КоличествоРезультата      КАК КоличествоУпаковок,
		|	МаршрутныеКартыМатериалыИУслуги.Количество * &КоличествоРезультата              КАК Количество,
		|	МаршрутныеКартыМатериалыИУслуги.Упаковка                                        КАК Упаковка,
		|	МаршрутныеКартыМатериалыИУслуги.СтатьяКалькуляции                               КАК СтатьяКалькуляции,
		|	&ТекстЗапросаНаименованиеЕдиницыИзмерения3                                      КАК ЕдиницаИзмеренияНаименование,
		|	ВЫБОР 
		|		КОГДА МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ)
		|			ИЛИ МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораХарактеристики <> ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                                            КАК ИспользуетсяАвтовыбор,
		|	МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораНоменклатуры,
		|	МаршрутныеКартыМатериалыИУслуги.СпособАвтовыбораХарактеристики,
		|	МаршрутныеКартыМатериалыИУслуги.СвойствоСодержащееНоменклатуру,
		|	МаршрутныеКартыМатериалыИУслуги.ОтборСвойство,
		|	МаршрутныеКартыМатериалыИУслуги.ОтборЗначениеСвойства,
		|	МаршрутныеКартыМатериалыИУслуги.АлгоритмРасчетаКоличества,
		|	МаршрутныеКартыМатериалыИУслуги.ПрименениеМатериала,
		|	МаршрутныеКартыМатериалыИУслуги.КлючСвязи
		|ИЗ
		|	Справочник.МаршрутныеКарты.МатериалыИУслуги КАК МаршрутныеКартыМатериалыИУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК СвойстваНоменклатуры
		|		ПО МаршрутныеКартыМатериалыИУслуги.ОтборСвойство = СвойстваНоменклатуры.Свойство
		|			И (СвойстваНоменклатуры.Ссылка = &Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК СвойстваХарактеристики
		|		ПО МаршрутныеКартыМатериалыИУслуги.ОтборСвойство = СвойстваХарактеристики.Свойство
		|			И (СвойстваХарактеристики.Ссылка = &Характеристика)
		|ГДЕ
		|	МаршрутныеКартыМатериалыИУслуги.Ссылка = &МаршрутнаяКарта
		|	И МаршрутныеКарты.ИспользоватьМатериалы
		|	И (МаршрутныеКартыМатериалыИУслуги.ОтборСвойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка)
		|			ИЛИ (СвойстваНоменклатуры.Свойство ЕСТЬ NULL 
		|				ИЛИ СвойстваНоменклатуры.Значение = МаршрутныеКартыМатериалыИУслуги.ОтборЗначениеСвойства)
		|				И (СвойстваХарактеристики.Свойство ЕСТЬ NULL 
		|					ИЛИ СвойстваХарактеристики.Значение = МатериалыИУслуги.ОтборЗначениеСвойства))
		|;
		|
		// СоответствиеСвойств
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаршрутныеКартыСоответствиеСвойств.СвойствоМатериала,
		|	МаршрутныеКартыСоответствиеСвойств.СвойствоПродукции,
		|	МаршрутныеКартыСоответствиеСвойств.КлючСвязиМатериал
		|ИЗ
		|	Справочник.МаршрутныеКарты.СоответствиеСвойств КАК МаршрутныеКартыСоответствиеСвойств
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|		ПО МаршрутныеКарты.Ссылка = &МаршрутнаяКарта
		|ГДЕ
		|	МаршрутныеКартыСоответствиеСвойств.Ссылка = &МаршрутнаяКарта
		|	И МаршрутныеКарты.ИспользоватьМатериалы";
		
		ТекущийИндекс = ТекущийИндекс + 2;
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"МаршрутныеКартыВыходныеИзделия.Упаковка",
			"МаршрутныеКартыВыходныеИзделия.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"МаршрутныеКартыВозвратныеОтходы.Упаковка",
			"МаршрутныеКартыВозвратныеОтходы.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"МаршрутныеКартыМатериалыИУслуги.Упаковка",
			"МаршрутныеКартыМатериалыИУслуги.Номенклатура"));
	
	Запрос.УстановитьПараметр("МаршрутнаяКарта",         МаршрутнаяКарта);
	Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",          Характеристика);
	Запрос.УстановитьПараметр("КоличествоРезультата",    КоличествоРезультата);
	Запрос.УстановитьПараметр("ОперацияРодитель",        СтруктураСвязей.ОперацияРодитель);
	Запрос.УстановитьПараметр("КлючСвязиРодитель",       СтруктураСвязей.КлючСвязиРодитель);
	Запрос.УстановитьПараметр("КлючСвязиВложенныйМаршрут", СтруктураСвязей.КлючСвязиВложенныйМаршрут);

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		ТаблицаВыходныеИзделия  = РезультатЗапроса[ИндексыТаблиц.Получить("ВыходныеИзделия")].Выгрузить();
		ТаблицаВыходныеИзделия.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ТаблицаМатериалыИУслуги = РезультатЗапроса[ИндексыТаблиц.Получить("Материалы")].Выгрузить();
		ТаблицаСоответствиеСвойств = РезультатЗапроса[ИндексыТаблиц.Получить("Материалы") + 1].Выгрузить();
		ТаблицаМатериалыИУслуги.Колонки.Добавить("КлючСвязиОперации", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	
	ТаблицаВложенныхМаршрутов = Новый ТаблицаЗначений;
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("ВложенныйМаршрут");
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("Операция");
	ТаблицаВложенныхМаршрутов.Колонки.Добавить("КлючСвязи");
	
	ВыборкаОпераций = РезультатЗапроса[ИндексыТаблиц.Получить("Операции")].Выбрать();
	Пока ВыборкаОпераций.Следующий() Цикл
		
		// Добавим полученные операции
		Если СтруктураДанных.Свойство("Операции") Тогда
			СтрокаОперация = СтруктураДанных.Операции.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперация, ВыборкаОпераций);
			СтрокаОперация.КлючСвязи = Новый УникальныйИдентификатор;
			
			ОперативныйУчетПроизводстваКлиентСервер.РассчитатьОбщееВремяВыполненияОперации(
				СтрокаОперация, КоличествоРезультата);
			
			Если ВыборкаОпераций.СодержитВложенныйМаршрут Тогда
				НовыйВложенныйМаршрут = ТаблицаВложенныхМаршрутов.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйВложенныйМаршрут, СтрокаОперация);
				Продолжить;
			КонецЕсли;
			
			Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаВыходныеИзделия);
			КонецЕсли;
			Если СтруктураДанных.Свойство("Материалы") Тогда
				ЗаполнитьКлючСвязи(СтрокаОперация.Операция, СтрокаОперация.КлючСвязи, ТаблицаМатериалыИУслуги);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Для материалов требуется обработать автовыбор номенклатуры (характеристики) и формулы
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ДанныеПоНоменклатуре = Новый Структура;
		ДанныеПоНоменклатуре.Вставить("Номенклатура",   Номенклатура);
		ДанныеПоНоменклатуре.Вставить("Характеристика", Характеристика);
		ДанныеПоНоменклатуре.Вставить("Спецификация",   МаршрутнаяКарта);
		
		Если СтруктураДанных.Свойство("ВыходныеИзделия") И ТаблицаВыходныеИзделия.Количество() <> 0 Тогда
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика", Номенклатура,Характеристика);
   			СписокСтрок = ТаблицаВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() <> 0 Тогда
				ДанныеПоНоменклатуре.Вставить("Количество", СписокСтрок[0].Количество);
			Иначе
				ДанныеПоНоменклатуре.Вставить("Количество",	КоличествоРезультата);
			КонецЕсли;
		Иначе
			ДанныеПоНоменклатуре.Вставить("Количество",	КоличествоРезультата);
		КонецЕсли;
		
		УправлениеДаннымиОбИзделиях.ОбработатьНастройкиАвтовыбораИПотребленияМатериалов(
						ТаблицаМатериалыИУслуги, 
						ДанныеПоНоменклатуре, 
						"МаршрутныеКарты", 
						Ложь, 
						Истина);
	КонецЕсли;
					
	// Добавим подготовленные таблицы в структуру данных
	Если СтруктураДанных.Свойство("ВыходныеИзделия") Тогда
		ДобавитьТаблицуМаршрутнойКарты("ВыходныеИзделия",  ТаблицаВыходныеИзделия.Скопировать(),  СтруктураДанных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Материалы") Тогда
		ДобавитьТаблицуМаршрутнойКарты("Материалы", ТаблицаМатериалыИУслуги.Скопировать(), СтруктураДанных);
	КонецЕсли;
	
	// Перед тем как уйти в рекурсию освободим память
	Запрос                  = Неопределено;
	РезультатЗапроса        = Неопределено;
	ТаблицаВыходныеИзделия  = Неопределено;
	ТаблицаМатериалыИУслуги = Неопределено;
	
	// Добавим данные вложенных маршрутов рекурсивно
	Для каждого ВыборкаОпераций Из ТаблицаВложенныхМаршрутов Цикл
		
		СтруктураСвязейВложенная = Новый Структура;
		СтруктураСвязейВложенная.Вставить("ОперацияРодитель", ВыборкаОпераций.Операция);
		СтруктураСвязейВложенная.Вставить("КлючСвязиРодитель", ВыборкаОпераций.КлючСвязи);
		
		Если СтруктураСвязей.КлючСвязиВложенныйМаршрут = Неопределено Тогда
			СтруктураСвязейВложенная.Вставить("КлючСвязиВложенныйМаршрут", ВыборкаОпераций.КлючСвязи);
		Иначе
			СтруктураСвязейВложенная.Вставить("КлючСвязиВложенныйМаршрут", СтруктураСвязей.КлючСвязиВложенныйМаршрут);
		КонецЕсли;
		
		ДобавитьДанныеМаршрутнойКартыДляПечатиРекурсивно(ВыборкаОпераций.ВложенныйМаршрут, 
															КоличествоРезультата, 
															Номенклатура, 
															Характеристика,
															СтруктураСвязейВложенная,
															СтруктураДанных);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьКлючСвязи(Операция, КлючСвязиОперации, Таблица)

	СтруктураПоиска = Новый Структура("Операция", Операция);
   	СписокСтрок = Таблица.НайтиСтроки(СтруктураПоиска);							
	Для каждого ЭлементКоллекции Из СписокСтрок Цикл
		ЭлементКоллекции.КлючСвязиОперации = КлючСвязиОперации;
	КонецЦикла; 
 	
КонецПроцедуры

Процедура ДобавитьТаблицуМаршрутнойКарты(ИмяТаблицы, Таблица, СтруктураДанных)

	ИсходнаяТаблица = Неопределено;
	СтруктураДанных.Свойство(ИмяТаблицы, ИсходнаяТаблица);
	Если ИсходнаяТаблица <> Неопределено Тогда
		Для каждого ЭлементКоллекции Из Таблица Цикл
			НоваяСтрока = ИсходнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		КонецЦикла; 
	Иначе
		СтруктураДанных.Вставить(ИмяТаблицы, Таблица);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьНомерОперацииВСвязаннойТаблице(ТаблицаСвязаннаяСОперациями, ТаблицаОперации)

	ТаблицаСвязаннаяСОперациями.Колонки.Добавить("НомерОперации", Новый ОписаниеТипов("Число"));
	
	Для каждого ДанныеСтроки Из ТаблицаСвязаннаяСОперациями Цикл
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Операция) Тогда
			ДанныеСтроки.НомерОперации = 1;
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Операция", ДанныеСтроки.Операция);
  		СписокСтрок = ТаблицаОперации.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			ДанныеСтроки.НомерОперации = СписокСтрок[0].НомерОперации;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьПорядокОпераций(ТаблицаОперации)
	
	ТаблицаОперации.Колонки.Добавить("НомерПрисвоен",          Новый ОписаниеТипов("Булево"));
	ТаблицаОперации.Колонки.Добавить("НомерСледующейПрисвоен", Новый ОписаниеТипов("Булево"));
	
	ТекущийНомер = МаксимальныйНомерОперации(ТаблицаОперации) + 1;
	
	ЗаполнитьНомерНачальныхОпераций(ТаблицаОперации, ТекущийНомер);
	ЗаполнитьНомерЗависимыхОпераций(ТаблицаОперации, ТекущийНомер);
	УдалитьВложенныеМаршрутыИзТаблицыОпераций(ТаблицаОперации);
	
КонецПроцедуры

Процедура ЗаполнитьНомерНачальныхОпераций(ТаблицаОперации, ТекущийНомер)
	
	НомераОпераций = НомераНачальныхОпераций(ТаблицаОперации);
	
	Для каждого НомерОперации Из НомераОпераций Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИсходныйНомерОперации", НомерОперации);
		СтруктураОтбора.Вставить("КлючСвязиРодитель", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
		СписокСтрок = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
		Для каждого Строка Из СписокСтрок Цикл
			
			Строка.НомерОперации = НомерОперации;
			Строка.НомерСледующейОперации = Строка.ИсходныйНомерСледующейОперации;
			УстановитьФлагНомерОперацииПрисвоен(Строка);
			
			Если Строка.СодержитВложенныйМаршрут Тогда
				ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(ТаблицаОперации, НомерОперации, ТекущийНомер, Строка.КлючСвязи);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНомерЗависимыхОпераций(ТаблицаОперации, ТекущийНомер)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязиРодитель", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ОтборНеобработанныеСтроки = Новый Структура;
	ОтборНеобработанныеСтроки.Вставить("НомерПрисвоен", Истина);
	ОтборНеобработанныеСтроки.Вставить("НомерСледующейПрисвоен", Ложь);
	ОтборНеобработанныеСтроки.Вставить("КлючСвязиРодитель", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	СписокСтрок = ТаблицаОперации.НайтиСтроки(ОтборНеобработанныеСтроки);
	Пока НЕ СписокСтрок.Количество() = 0 Цикл
		
		Для каждого Строка Из СписокСтрок Цикл
			
			СтруктураОтбора.Вставить("ИсходныйНомерОперации", Строка.ИсходныйНомерСледующейОперации);
			СледующиеСтроки = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
			
			Для каждого СледующаяСтрока Из СледующиеСтроки Цикл
				
				Если НЕ СледующаяСтрока.НомерПрисвоен Тогда
					
					СледующаяСтрока.НомерОперации = СледующаяСтрока.ИсходныйНомерОперации;
					СледующаяСтрока.НомерСледующейОперации = СледующаяСтрока.ИсходныйНомерСледующейОперации;
					УстановитьФлагНомерОперацииПрисвоен(СледующаяСтрока);
					
					Если СледующаяСтрока.СодержитВложенныйМаршрут Тогда
						ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(ТаблицаОперации, СледующаяСтрока.НомерОперации, ТекущийНомер, СледующаяСтрока.КлючСвязи);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Строка.НомерСледующейПрисвоен = Истина;
			
		КонецЦикла;
		
		СписокСтрок = ТаблицаОперации.НайтиСтроки(ОтборНеобработанныеСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(ТаблицаОперации, НачальныйНомер, ТекущийНомер, КлючСвязиРодитель)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИсходныйНомерОперации", 1);
	СтруктураОтбора.Вставить("КлючСвязиРодитель", КлючСвязиРодитель);
	
	СтрокиМаршрута = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
	Для каждого Строка Из СтрокиМаршрута Цикл
		Если Строка.ИсходныйНомерОперации = 1 Тогда
			
			Строка.НомерОперации = НачальныйНомер;
			Если ЗначениеЗаполнено(Строка.ИсходныйНомерСледующейОперации) Тогда
				Строка.НомерСледующейОперации = ТекущийНомер;
				ТекущийНомер = ТекущийНомер + 1;
			КонецЕсли;
			УстановитьФлагНомерОперацииПрисвоен(Строка);
			
			Если Строка.СодержитВложенныйМаршрут Тогда
				ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(ТаблицаОперации, НачальныйНомер, ТекущийНомер, Строка.КлючСвязи);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОтборНеобработанныеСтроки = Новый Структура;
	ОтборНеобработанныеСтроки.Вставить("НомерПрисвоен", Истина);
	ОтборНеобработанныеСтроки.Вставить("НомерСледующейПрисвоен", Ложь);
	ОтборНеобработанныеСтроки.Вставить("КлючСвязиРодитель", КлючСвязиРодитель);
	
	СписокСтрок = ТаблицаОперации.НайтиСтроки(ОтборНеобработанныеСтроки);
	Пока НЕ СписокСтрок.Количество() = 0 Цикл
		
		Для каждого Строка Из СписокСтрок Цикл
			
			СтруктураОтбора.Вставить("ИсходныйНомерОперации", Строка.ИсходныйНомерСледующейОперации);
			СледующиеСтроки = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
			
			Для каждого СледующаяСтрока Из СледующиеСтроки Цикл
				
				Если НЕ СледующаяСтрока.НомерПрисвоен Тогда
					
					СледующаяСтрока.НомерОперации = Строка.НомерСледующейОперации;
					Если ЗначениеЗаполнено(СледующаяСтрока.ИсходныйНомерСледующейОперации) Тогда
						СледующаяСтрока.НомерСледующейОперации = ТекущийНомер;
						ТекущийНомер = ТекущийНомер + 1;
					КонецЕсли;
					УстановитьФлагНомерОперацииПрисвоен(СледующаяСтрока);
					
					Если СледующаяСтрока.СодержитВложенныйМаршрут Тогда
						ЗаполнитьНомерОперацийВложенногоМаршрутаРекурсивно(ТаблицаОперации, СледующаяСтрока.НомерОперации, ТекущийНомер, СледующаяСтрока.КлючСвязи);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Строка.НомерСледующейПрисвоен = Истина;
			
		КонецЦикла;
		
		СписокСтрок = ТаблицаОперации.НайтиСтроки(ОтборНеобработанныеСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция МаксимальныйНомерОперации(ТаблицаОперации)
	
	Если ЗначениеЗаполнено(ТаблицаОперации) Тогда
		
		ТаблицаОперацийКопия = ТаблицаОперации.Скопировать(, "ИсходныйНомерОперации");
		ТаблицаОперацийКопия.Сортировать("ИсходныйНомерОперации Убыв");
		Возврат ТаблицаОперацийКопия[0].ИсходныйНомерОперации;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

Функция НомераНачальныхОпераций(ТаблицаОперации)
	
	Результат = Новый Массив;
	
	Для каждого Строка Из ТаблицаОперации Цикл
		
		НайденнаяСтрока = ТаблицаОперации.Найти(Строка.ИсходныйНомерОперации, "ИсходныйНомерСледующейОперации");
		Если НайденнаяСтрока = Неопределено Тогда
			Результат.Добавить(Строка.ИсходныйНомерОперации);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьФлагНомерОперацииПрисвоен(СтрокаОперации)
	
	СтрокаОперации.НомерПрисвоен = Истина;
	Если СтрокаОперации.ИсходныйНомерСледующейОперации = 0 Тогда
		СтрокаОперации.НомерСледующейПрисвоен = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВложенныеМаршрутыИзТаблицыОпераций(ТаблицаОперации)
	
	СтруктураПоискаОпераций = Новый Структура("СодержитВложенныйМаршрут", Истина);
	СписокСтрок = ТаблицаОперации.НайтиСтроки(СтруктураПоискаОпераций);
	
	Если ЗначениеЗаполнено(СписокСтрок) Тогда
		
		Для каждого СтрокаОперация Из СписокСтрок Цикл
			
			СтруктураПоиска = Новый Структура("КлючСвязиРодитель,НомерСледующейОперации", СтрокаОперация.КлючСвязи, 0);
			СписокПоследнихОпераций = ТаблицаОперации.НайтиСтроки(СтруктураПоиска);
			Для каждого ПоследняяОпераций Из СписокПоследнихОпераций Цикл
				ПоследняяОпераций.НомерСледующейОперации = СтрокаОперация.НомерСледующейОперации;
			КонецЦикла;
			
			ТаблицаОперации.Удалить(СтрокаОперация);
			
		КонецЦикла;
		
		ПеренумероватьОперацииВложенныхМаршрутов(ТаблицаОперации);
		ТаблицаОперации.Сортировать("НомерОперации Возр");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренумероватьОперацииВложенныхМаршрутов(ТаблицаОперации)
	
	ВложенныеМаршруты = ТаблицаОперации.ВыгрузитьКолонку("КлючСвязиВложенныйМаршрут");
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ВложенныеМаршруты, Истина);
	
	Для каждого КлючСвязиВложенныйМаршрут Из ВложенныеМаршруты Цикл
		
		Если ЗначениеЗаполнено(КлючСвязиВложенныйМаршрут) Тогда
			
			Для каждого Строка Из ТаблицаОперации Цикл
				Строка.ИсходныйНомерОперации = Строка.НомерОперации;
				Строка.ИсходныйНомерСледующейОперации = Строка.НомерСледующейОперации;
			КонецЦикла;
			ТаблицаОперации.ЗаполнитьЗначения(Ложь, "НомерПрисвоен, НомерСледующейПрисвоен");
			
			СтруктураОтбора = Новый Структура("КлючСвязиВложенныйМаршрут", КлючСвязиВложенныйМаршрут);
			СтрокиМаршрута = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
			
			ИсходныйНомер = НомерПервойОперацииВложенногоМаршрута(СтрокиМаршрута);
			НомераОпераций = НомераОперацийВложенногоМаршрута(СтрокиМаршрута);
			ИндексТекущегоНомера = 0;
			
			ПеренумероватьОперацииВложенногоМаршрутаРекурсивно(
				ТаблицаОперации, КлючСвязиВложенныйМаршрут, НомераОпераций, ИндексТекущегоНомера, ИсходныйНомер);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренумероватьОперацииВложенногоМаршрутаРекурсивно(ТаблицаОперации, КлючСвязиВложенныйМаршрут, НомераОпераций, ИндексТекущегоНомера, ИсходныйНомер)
	
	ТекущийНомер = НомераОпераций[ИндексТекущегоНомера];
	
	СтруктураОтбора = Новый Структура("ИсходныйНомерСледующейОперации, НомерСледующейПрисвоен", ИсходныйНомер, Ложь);
	СписокСтрок = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
	Для каждого Строка Из СписокСтрок Цикл
		Строка.НомерСледующейОперации = ТекущийНомер;
		Строка.НомерСледующейПрисвоен = Истина;
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("ИсходныйНомерОперации, НомерПрисвоен", ИсходныйНомер, Ложь);
	СписокСтрок = ТаблицаОперации.НайтиСтроки(СтруктураОтбора);
	Для каждого Строка Из СписокСтрок Цикл
		Строка.НомерОперации = ТекущийНомер;
		Строка.НомерПрисвоен = Истина;
	КонецЦикла;
	
	Для каждого Строка Из СписокСтрок Цикл
		Если НЕ Строка.ИсходныйНомерСледующейОперации = 0
			И Строка.КлючСвязиВложенныйМаршрут = КлючСвязиВложенныйМаршрут Тогда
			
			ИндексТекущегоНомера = ИндексТекущегоНомера + 1;
			ПеренумероватьОперацииВложенногоМаршрутаРекурсивно(
				ТаблицаОперации, КлючСвязиВложенныйМаршрут, НомераОпераций, ИндексТекущегоНомера, Строка.ИсходныйНомерСледующейОперации);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НомерПервойОперацииВложенногоМаршрута(СтрокиВложенногоМаршрута)
	
	Результат = 0;
	
	Для каждого Строка Из СтрокиВложенногоМаршрута Цикл
		
		ПерваяСтрока = Истина;
		
		Для каждого ПоследующаяСтрока Из СтрокиВложенногоМаршрута Цикл
			
			Если ПоследующаяСтрока.НомерОперации = Строка.НомерОперации Тогда
				Продолжить;
			ИначеЕсли ПоследующаяСтрока.НомерСледующейОперации = Строка.НомерОперации Тогда
				ПерваяСтрока = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		Если ПерваяСтрока Тогда
			Результат = Строка.НомерОперации;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НомераОперацийВложенногоМаршрута(СтрокиВложенногоМаршрута)
	
	Результат = Новый Массив;
	Для каждого Строка Из СтрокиВложенногоМаршрута Цикл
		Результат.Добавить(Строка.НомерОперации);
		Если ЗначениеЗаполнено(Строка.НомерСледующейОперации) Тогда
			Результат.Добавить(Строка.НомерСледующейОперации);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(Результат);
	СортироватьМассив(Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура СортироватьМассив(Массив, Направление = "Возр")
	
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("Значение");
	
	Для каждого Элемент Из Массив Цикл
		НоваяСтрока = ТаблицаСортировки.Добавить();
		НоваяСтрока.Значение = Элемент;
	КонецЦикла;
	
	ТаблицаСортировки.Сортировать("Значение " + Направление);
	
	Массив.Очистить();
	Для каждого Строка Из ТаблицаСортировки Цикл
		Массив.Добавить(Строка.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаОперацииМаршрутнойКарты()
	
	Возврат
	"ВЫБРАТЬ
	|	&ОперацияРодитель КАК ОперацияРодитель,
	|	&КлючСвязиРодитель КАК КлючСвязиРодитель,
	|	&КлючСвязиВложенныйМаршрут КАК КлючСвязиВложенныйМаршрут,
	|	ТехнологическиеОперации.Владелец КАК МаршрутнаяКарта,
	|	ТехнологическиеОперации.Ссылка КАК Операция,
	|	ТехнологическиеОперации.Представление КАК ОперацияПредставление,
	|	ТехнологическиеОперации.ВложенныйМаршрут КАК ВложенныйМаршрут,
	|	ТехнологическиеОперации.РабочийЦентр КАК РабочийЦентр,
	|	ВЫБОР
	|		КОГДА ТехнологическиеОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
	|			ТОГДА ТехнологическиеОперации.РабочийЦентр
	|		ИНАЧЕ ТехнологическиеОперации.РабочийЦентр.ВидРабочегоЦентра
	|	КОНЕЦ КАК ВидРабочегоЦентра,
	|	ВЫБОР
	|		КОГДА ТехнологическиеОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
	|			ТОГДА ТехнологическиеОперации.РабочийЦентр.ПараллельнаяЗагрузка
	|		ИНАЧЕ ТехнологическиеОперации.РабочийЦентр.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|	КОНЕЦ КАК ПараллельнаяЗагрузка,
	|	ТехнологическиеОперации.НомерОперации КАК ИсходныйНомерОперации,
	|	ТехнологическиеОперации.НомерСледующейОперации КАК ИсходныйНомерСледующейОперации,
	|	ВЫБОР
	|		КОГДА ТехнологическиеОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ПараллельнаяЗагрузка
	|							И ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ИспользуютсяВариантыНаладки
	|									ТОГДА ТехнологическиеОперации.ВариантНаладки.ВремяРаботы
	|								ИНАЧЕ ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ВремяРаботы
	|							КОНЕЦ
	|					ИНАЧЕ ТехнологическиеОперации.ВремяШтучное
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|						И ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|					ТОГДА ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|								ТОГДА ТехнологическиеОперации.ВариантНаладки.ВремяРаботы
	|							ИНАЧЕ ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ВремяРаботы
	|						КОНЕЦ
	|				ИНАЧЕ ТехнологическиеОперации.ВремяШтучное
	|			КОНЕЦ
	|	КОНЕЦ КАК ВремяШтучное,
	|	ВЫБОР
	|		КОГДА ТехнологическиеОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ПараллельнаяЗагрузка
	|							И ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|						ТОГДА ВЫБОР
	|								КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ИспользуютсяВариантыНаладки
	|									ТОГДА ТехнологическиеОперации.ВариантНаладки.ЕдиницаИзмерения
	|								ИНАЧЕ ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ЕдиницаИзмерения
	|							КОНЕЦ
	|					ИНАЧЕ ТехнологическиеОперации.ВремяШтучноеЕдИзм
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|						И ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ВариантЗагрузки = ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиРабочихЦентров.Синхронный)
	|					ТОГДА ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ИспользуютсяВариантыНаладки
	|								ТОГДА ТехнологическиеОперации.ВариантНаладки.ЕдиницаИзмерения
	|							ИНАЧЕ ВЫРАЗИТЬ(ТехнологическиеОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ЕдиницаИзмерения
	|						КОНЕЦ
	|				ИНАЧЕ ТехнологическиеОперации.ВремяШтучноеЕдИзм
	|			КОНЕЦ
	|	КОНЕЦ КАК ВремяШтучноеЕдИзм,
	|	ТехнологическиеОперации.ВремяПЗ КАК ВремяПЗ,
	|	ВЫБОР
	|		КОГДА ТехнологическиеОперации.ВремяПЗ <> 0
	|			ТОГДА ТехнологическиеОперации.ВремяПЗЕдИзм
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.ПустаяСсылка)
	|	КОНЕЦ КАК ВремяПЗЕдИзм,
	|	ТехнологическиеОперации.ВариантНаладки КАК ВариантНаладки,
	|	ТехнологическиеОперации.Загрузка КАК Загрузка,
	|	ТехнологическиеОперации.Непрерывная КАК Непрерывная,
	|	ТехнологическиеОперации.СодержитВложенныйМаршрут КАК СодержитВложенныйМаршрут
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ПО (МаршрутныеКарты.Ссылка = &МаршрутнаяКарта)
	|ГДЕ
	|	НЕ ТехнологическиеОперации.ПометкаУдаления
	|	И ТехнологическиеОперации.Владелец = &МаршрутнаяКарта
	|	И МаршрутныеКарты.ИспользоватьОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТехнологическиеОперации.НомерОперации";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли