#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ СодержитВложенныйМаршрут Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВложенныйМаршрут");
		
		ЗначенияРеквизитовРЦ = ЗначенияРеквизитовРЦ();
		Если НЕ ЗначенияРеквизитовРЦ.ИспользуютсяВариантыНаладки Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ВариантНаладки");
		КонецЕсли;
		Если НЕ ЗначенияРеквизитовРЦ.ПараллельнаяЗагрузка Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Загрузка");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РабочийЦентр) И РабочийЦентрСинхроннаяЗагрузка() Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ВремяШтучное");
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("ВариантНаладки");
		МассивНепроверяемыхРеквизитов.Добавить("Загрузка");
		МассивНепроверяемыхРеквизитов.Добавить("ВремяШтучное");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если НомерОперации >= НомерСледующейОперации 
		И НомерСледующейОперации <> 0 Тогда
		
		ТекстСообщения = НСтр("ru='Номер следующеей операции должен быть больше номера операции.';uk='Номер наступної операції повинен бути більше номера операції.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "НомерСледующейОперации",, Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если Владелец.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемаяОперацияНеДолжнаИспользоватьсяВМаршрутнойКарте(Отказ);
	
	ПроверитьЗацикливание(Отказ);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Владелец") Тогда
		НомерОперации = Справочники.ТехнологическиеОперации.НовыйНомерОперации(ДанныеЗаполнения.Владелец);
		НомерСледующейОперации = НомерОперации + 1;
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Процедура УдаляемаяОперацияНеДолжнаИспользоватьсяВМаршрутнойКарте(Отказ)

	Если НЕ ЭтоНовый() И ПометкаУдаления И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаСвязи.Ссылка
		|ИЗ
		|	Справочник.МаршрутныеКарты.ВыходныеИзделия КАК ТаблицаСвязи
		|ГДЕ
		|	ТаблицаСвязи.ОперацияРедактирование = &Операция
		|	И НЕ ТаблицаСвязи.Ссылка.ПометкаУдаления
		|	И ТаблицаСвязи.Ссылка = &Владелец";
		
		Запрос.УстановитьПараметр("Операция", Ссылка);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ТекстСообщения = НСтр("ru='Операция используется в маршрутной карте. Удаление невозможно.';uk='Операція використовується в маршрутній карті. Вилучення неможливо.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ПроверитьЗацикливание(Отказ)

	Если НЕ СодержитВложенныйМаршрут Тогда
		Возврат;
	КонецЕсли;
	
	Если Справочники.ТехнологическиеОперации.ЕстьЗацикливание(ВложенныйМаршрут, Владелец, Отказ) Тогда
		ТекстСообщения = НСтр("ru='Выбранный вложенный маршрут приводит к зацикливанию операций.';uk='Вибраний вкладений маршрут призводить до зациклювання операцій.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "ВложенныйМаршрут",, Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Функция ЗначенияРеквизитовРЦ()
	
	Если ЗначениеЗаполнено(РабочийЦентр) Тогда
		
		ИменаРеквизитов = Новый Структура;
		ИменаРеквизитов.Вставить("ИспользуютсяВариантыНаладки", "ИспользуютсяВариантыНаладки");
		ИменаРеквизитов.Вставить("ПараллельнаяЗагрузка", "ПараллельнаяЗагрузка");
		
		Если ТипЗнч(РабочийЦентр) = Тип("СправочникСсылка.РабочиеЦентры") Тогда
			Для каждого Элемент Из ИменаРеквизитов Цикл
				ИменаРеквизитов[Элемент.Ключ] = "ВидРабочегоЦентра." + Элемент.Значение;
			КонецЦикла;
		КонецЕсли;
		
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РабочийЦентр, ИменаРеквизитов);
		
	Иначе
		
		Результат = Новый Структура;
		Результат.Вставить("ИспользуютсяВариантыНаладки", Ложь);
		Результат.Вставить("ПараллельнаяЗагрузка", Ложь);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РабочийЦентрСинхроннаяЗагрузка()
	
	Если ТипЗнч(РабочийЦентр) = Тип("СправочникСсылка.ВидыРабочихЦентров") Тогда
		ИмяРеквизита = "ВариантЗагрузки";
	Иначе
		ИмяРеквизита = "ВидРабочегоЦентра.ВариантЗагрузки";
	КонецЕсли;
	
	ВариантЗагрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, ИмяРеквизита);
	Возврат ВариантЗагрузки = Перечисления.ВариантыЗагрузкиРабочихЦентров.Синхронный;
	
КонецФункции

#КонецОбласти
 
#КонецОбласти

#КонецЕсли