
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
// 
// Возвращаемое значание:
// 	Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Периодичность");
	Результат.Добавить("Валюта");
	
	Возврат Результат;
	
КонецФункции

// Возвращает наименьшую из переданной периодичности и периодичностей сценариев
//
// Параметры
//  Сценарий  - Массив - СправочникСсылка.Сценарии, сценарии, для которых 
//						требуется сравнить периодичность
//  Периодичность  - ПеречислениеСсылка.Периодичность - периодичность, с которой требуется сравнить
//						периодичность сценариев
//
// Возвращаемое значание:
// 	ПеречислениеСсылка.Периодичность - вычисленная периодичность
//
Функция ПривестиПериодичностьКПериодичностиСценария(Сценарии, Периодичность) Экспорт
	
	ПериодичностиСценариев = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сценарии, "Периодичность");
	ПериодичностиПоПорядку = Перечисления.Периодичность.УпорядоченныеПериодичности();
	
	ПериодичностьСценариев       = Перечисления.Периодичность.ПустаяСсылка();
	ИндексПериодичностиСценариев = 0;
	Для каждого Элемент Из ПериодичностиСценариев Цикл
		Индекс = ПериодичностиПоПорядку.Найти(Элемент.Значение);
		Если Индекс > ИндексПериодичностиСценариев Тогда
			ИндексПериодичностиСценариев = Индекс;
			ПериодичностьСценариев       = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Периодичность) Тогда
		Периодичность = ПериодичностьСценариев;
	ИначеЕсли ИндексПериодичностиСценариев > ПериодичностиПоПорядку.Найти(Периодичность) Тогда 
		Периодичность = ПериодичностьСценариев;
	КонецЕсли;

	Возврат Периодичность;
	
КонецФункции

// Возвращает таблицу прогнозных курсов сценариев за выбранный период,
// дополненную начальными курсами
//
// Параметры
//  Сценарий 		 - Массив - СправочникСсылка.Сценарии, сценарии, для которых 
//								требуется получить курсы
//  Валюты 			 - Массив - Валюты, по которым требуется получить таблицу курсов. 
//								если не указано - то по всем
//  ДатаНачала 		 - Дата - дата начала курсов
//  ДатаОкончания 	 - Дата - дата окончания курсов
//
// Возвращаемое значание:
// 	ТаблицаЗначений - таблица курсов
//
Функция ТаблицаКурсовСценария(Сценарий = Неопределено, Валюты = Неопределено, ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Сценарии.Ссылка КАК Сценарий,
	|	Сценарии.Ссылка КАК СценарийКурсов
	|ПОМЕСТИТЬ ФильтрПоСценариям
	|ИЗ
	|	Справочник.Сценарии КАК Сценарии
	|ГДЕ
	|	" + ?(Сценарий <> Неопределено, "Сценарии.Ссылка В(&Сценарий)
	|	И", "") + " НЕ Сценарии.ИспользоватьКурсыДругогоСценария
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Сценарии.Ссылка,
	|	Сценарии.СценарийКурсов
	|ИЗ
	|	Справочник.Сценарии КАК Сценарии
	|ГДЕ
	|	" + ?(Сценарий <> Неопределено, "Сценарии.Ссылка В(&Сценарий)
	|	И", "") + " Сценарии.ИспользоватьКурсыДругогоСценария
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&НачалоПериода КАК Период,
	|	ПрогнозныеКурсыСценариев.Валюта КАК Валюта,
	|	ФильтрПоСценариям.Сценарий КАК Сценарий,
	|	ВЫБОР
	|		КОГДА ПрогнозныеКурсыСценариев.Кратность = 0
	|			ТОГДА 0
	|		ИНАЧЕ ПрогнозныеКурсыСценариев.Курс / ПрогнозныеКурсыСценариев.Кратность
	|	КОНЕЦ КАК Курс
	|ИЗ
	|	РегистрСведений.ПрогнозныеКурсыСценариев.СрезПоследних(
	|			&НачалоПериода,
	|			Сценарий В (ВЫБРАТЬ РАЗЛИЧНЫЕ Фильтр.СценарийКурсов ИЗ ФильтрПоСценариям КАК Фильтр)
	|			" + ?(Валюты <> Неопределено, "И Валюта В (&Валюты)", "") + "
	|			) КАК ПрогнозныеКурсыСценариев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФильтрПоСценариям КАК ФильтрПоСценариям
	|		ПО ПрогнозныеКурсыСценариев.Сценарий = ФильтрПоСценариям.СценарийКурсов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПрогнозныеКурсыСценариев.Период,
	|	ПрогнозныеКурсыСценариев.Валюта,
	|	ФильтрПоСценариям.Сценарий,
	|	ВЫБОР
	|		КОГДА ПрогнозныеКурсыСценариев.Кратность = 0
	|			ТОГДА 0
	|		ИНАЧЕ ПрогнозныеКурсыСценариев.Курс / ПрогнозныеКурсыСценариев.Кратность
	|	КОНЕЦ КАК Курс
	|ИЗ
	|	ФильтрПоСценариям КАК ФильтрПоСценариям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрогнозныеКурсыСценариев КАК ПрогнозныеКурсыСценариев
	|		ПО (ПрогнозныеКурсыСценариев.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (ПрогнозныеКурсыСценариев.Сценарий = ФильтрПоСценариям.СценарийКурсов)
	|			" + ?(Валюты <> Неопределено, "И ПрогнозныеКурсыСценариев.Валюта В (&Валюты)", "")
	);
	
	Запрос.УстановитьПараметр("Валюты", Валюты);
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончания);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу, содержащую информацию о незаполненных курсах сценариев. 
//
// Параметры
//  Сценарий 		 - Массив - СправочникСсылка.Сценарии, сценарии, для которых необходимо выполнить проверку заполнения курсов
//  Валюты 			 - Массив - Валюты, по которым необходимо выполнить проверку заполнения курсов
//  ДатаНачала 		 - Дата - Начало периода проверки
//  ДатаОкончания 	 - Дата - Окончание периода проверки
//
// Возвращаемое значание:
// 	ТаблицаЗначений - таблица незаполненных курсов
//
Функция ПроверитьЗаполнениеКурсовСценариев(Сценарии, Валюты, ДатаНачала, ДатаОкончания) Экспорт
	
	ПериодичностиСценариев = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сценарии, "Периодичность");
	КурсыСценариев = Справочники.Сценарии.ТаблицаКурсовСценария(Сценарии, Валюты, ДатаНачала, ДатаОкончания);
	КурсыСценариев.Индексы.Добавить("Сценарий, Валюта, Период");
	
	НезаполненныеКурсы = КурсыСценариев.СкопироватьКолонки("Сценарий, Валюта, Период");
	
	Для каждого Сценарий Из Сценарии Цикл
		Периоды = БюджетнаяОтчетностьВыводСервер.ПолучитьМассивПериодов(ДатаНачала, ДатаОкончания, ПериодичностиСценариев[Сценарий]);
		Для каждого Период Из Периоды Цикл
			Для каждого Валюта Из Валюты Цикл
				СтруктураПоиска = Новый Структура("Сценарий, Валюта, Период", Сценарий, Валюта, Период);
				Если КурсыСценариев.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
					НоваяСтрока = НезаполненныеКурсы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат НезаполненныеКурсы;
	
КонецФункции

// Возвращает таблицу сценариев с учетом отбора компоновки данных
//
// Параметры
// 	 ОтборКомпоновкиДанны - НастройкиКомпоновкиДанных - Настройки отбора по сценарию
//
Функция СценарииСУчетомОтбора(ОтборКомпоновкиДанны) Экспорт
	
	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхема();
	НаборДанныхСценарии = ФинансоваяОтчетностьСервер.НовыйНабор(
		СхемаКомпоновкиДанных, Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"), "Сценарии");
		
	НаборДанныхСценарии.Запрос = 
	"ВЫБРАТЬ
	|	Сценарии.Ссылка КАК Сценарий,
	|	Сценарии.Валюта КАК Валюта,
	|	Сценарии.ТребоватьУказанияКурсовДляКаждогоПериода КАК ТребоватьУказанияКурсовДляКаждогоПериода
	|ИЗ
	|	Справочник.Сценарии КАК Сценарии
	|ГДЕ
	|	НЕ Сценарии.ЭтоГруппа
	|	И НЕ Сценарии.ПометкаУдаления";
	НаборДанныхСценарии.АвтоЗаполнениеДоступныхПолей = Истина;
	
	Настройки = Новый НастройкиКомпоновкиДанных;
	КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(Настройки);
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Сценарий");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Валюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Периодичность");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "ТребоватьУказанияКурсовДляКаждогоПериода");
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, ОтборКомпоновкиДанны);
	
	Возврат ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	БюджетнаяОтчетностьВызовСервера.СценарииСФильтром(ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

