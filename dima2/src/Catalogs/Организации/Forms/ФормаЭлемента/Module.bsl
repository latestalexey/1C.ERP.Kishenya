
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("ВидОрганизации") Тогда
		ВидОрганизации = Параметры.ЗначенияЗаполнения.ВидОрганизации;
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		И НЕ Объект.ОбособленноеПодразделение Тогда
		ВидОрганизации = "ЮридическоеЛицо";
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		И Объект.ОбособленноеПодразделение Тогда
		ВидОрганизации = "ОбособленноеПодразделение";
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда 
		ВидОрганизации = "ИндивидуальныйПредприниматель";
	Иначе ВызватьИсключение НСтр("ru='Невозможно определить вид организации. Обратитесь к администратору.';uk='Неможливо визначити вид організації. Зверніться до адміністратора.'");
	КонецЕсли;
	
	ЗаполнитьРеквизитГоловнаяОрганизация();
	ОткрытаФормаВыбораДаты = Ложь;

	УправлениеФормойНаСервере();
	
	// Установка списка выбора головных организаций
	Элементы.ГоловнаяОрганизация.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокГоловныхОрганизацийОбособленногоПодразделения().ВыгрузитьЗначения());
	
	// Исключим редактируемую организацию из списка головных
	Если Параметры.Ключ.Пустая() Тогда
		ЭлементТекущаяОрганизация	= Элементы.ГоловнаяОрганизация.СписокВыбора.НайтиПоЗначению(Объект.Ссылка);
		Если ЭлементТекущаяОрганизация <> Неопределено Тогда
			Элементы.ГоловнаяОрганизация.СписокВыбора.Удалить(ЭлементТекущаяОрганизация);
		КонецЕсли;
	КонецЕсли;
	
		
	ИспользоватьРазделениеПоОбластямДанных = ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
		
	АдресЛоготипа 			= ?(Объект.ФайлЛоготип.Пустая(), 			"", НавигационнаяСсылкаКартинки(Объект.ФайлЛоготип,            УникальныйИдентификатор));
	АдресФаксимильнойПечати = ?(Объект.ФайлФаксимильнаяПечать.Пустая(), "", НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор));
	АдресФаксимильнойПодписи= ?(Объект.ФайлФаксимильнаяПодпись.Пустая(),"", НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПодпись,УникальныйИдентификатор));
	
	БазоваяВерсия = ПолучитьФункциональнуюОпцию("БазоваяВерсия");
	
	Элементы.ПояснениеЛоготип.Заголовок = ПояснениеЛоготипа();	
	Элементы.ПраваяСторонаКоды.Видимость = Не БазоваяВерсия;
	
	Если ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.Организации) Тогда
		Элементы.ФормаСкопировать.Видимость = Не БазоваяВерсия;
	КонецЕсли;
	
	
	
	ЗаполнитьОписанияПараметров();
	
	ФИОФизическогоЛица = ПолучитьФИОФизическогоЛица(Объект.ИндивидуальныйПредприниматель);
	
	ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		ФИОФизическогоЛица.Фамилия, ФИОФизическогоЛица.Имя, ФИОФизическогоЛица.Отчество);
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	
	
	МоментОпределенияБазыНДСПоИмпорту                      = НСтр("ru='По таможенной декларации';uk='За митною декларацією'");
	МоментОпределенияБазыНДСПоПоступлениюТоваровНаКомиссию = Строка(Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию);
	МоментОпределенияБазыНДСПоПередачеТоваровНаКомиссию    = Строка(Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация", , , Истина);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация	
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОчиститьСообщения();
	
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПрисоединенныеФайлы"
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если РаботаСЛоготипом Тогда
			
			Объект.ФайлЛоготип = ВыбранноеЗначение;
			АдресЛоготипа = НавигационнаяСсылкаКартинки(Объект.ФайлЛоготип, УникальныйИдентификатор)
			
		ИначеЕсли РаботаСФаксимильнойПечатью Тогда
			
			Объект.ФайлФаксимильнаяПечать = ВыбранноеЗначение;
			АдресФаксимильнойПечати = НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор)
			
		ИначеЕсли РаботаСФаксимильнойПодписью Тогда
			
			Объект.ФайлФаксимильнаяПодпись = ВыбранноеЗначение;
			АдресФаксимильнойПодписи = НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПодпись, УникальныйИдентификатор)
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборДаты" Тогда
		ОбработкаВыбораДатыНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	УправлениеПредприятием = НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	

	Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.УчетнаяПолитика) И Не Объект.ОбособленноеПодразделение Тогда
		
		Отказ = Истина;
		Элементы.ГруппаУчетнаяПолитика.Видимость = Истина;
		Элементы.ГруппаУчетнаяПолитикаНоваяБаза.Видимость = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Учетная политика"" не заполнено.';uk='Поле ""Облікова політика"" не заповнено.'"), ,
			"УчетнаяПолитикаОрганизаций.УчетнаяПолитика");
		
		КонецЕсли;
		
	
	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗапроситьРежимИзмененияУчетнойПолитики(УчетнаяПолитикаОрганизаций.Период, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеФормойНаСервере();
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
		
		Модифицированность = Истина;
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		
		Если РаботаСЛоготипом Тогда
			
			Объект.ФайлЛоготип = СсылкаНаФайл;
			АдресЛоготипа = НавигационнаяСсылкаКартинки(Объект.ФайлЛоготип, УникальныйИдентификатор);
			
		ИначеЕсли РаботаСФаксимильнойПечатью Тогда
			
			Объект.ФайлФаксимильнаяПечать = СсылкаНаФайл;
			АдресФаксимильнойПечати = НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПечать, УникальныйИдентификатор);
			
		ИначеЕсли РаботаСФаксимильнойПодписью Тогда
			
			Объект.ФайлФаксимильнаяПодпись = СсылкаНаФайл;
			АдресФаксимильнойПодписи = НавигационнаяСсылкаКартинки(Объект.ФайлФаксимильнаяПодпись, УникальныйИдентификатор);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_УчетныеПолитикиОрганизаций" И ЗначениеЗаполнено(Источник) Тогда
		
		ДействияПослеЗаписиУчетнойПолитики(Источник);
	
	ИначеЕсли ИмяСобытия = "ОтредактированаИстория" И ГоловнаяОрганизация = Источник
		И Параметр.ИмяРегистра = "УчетнаяПолитикаОрганизаций" Тогда
		
		Если УчетнаяПолитикаОрганизацийНаборЗаписейПрочитан Тогда
			
			РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(
				ЭтаФорма,
				ГоловнаяОрганизация,
				ИмяСобытия,
				Параметр,
				Источник);
			
			ОбновитьПолеУчетнаяПолитикаОрганизацийПериод(ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Организации", , Объект.Ссылка);
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеУчетнойПолитикиИНалогов(ТекущийОбъект);
	
КонецПроцедуры
	

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы


&НаКлиенте
Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент)
	
	
	ФИОФизическогоЛица = ПолучитьФИОФизическогоЛица(Объект.ИндивидуальныйПредприниматель);
	
	ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		ФИОФизическогоЛица.Фамилия, ФИОФизическогоЛица.Имя, ФИОФизическогоЛица.Отчество);
		
	Объект.НаименованиеСокращенное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ФЛП %1 %2 %3';uk='ФОП %1 %2 %3'"),
		ФИОФизическогоЛица.Фамилия,
		?(ПустаяСтрока(ФИОФизическогоЛица.Имя), "", Лев(ФИОФизическогоЛица.Имя, 1) + "."),
		?(ПустаяСтрока(ФИОФизическогоЛица.Отчество), "", Лев(ФИОФизическогоЛица.Отчество, 1) + "."));
		
	Объект.НаименованиеПолное	= "";
	НаименованиеСокращенноеПриИзменении(Элементы.НаименованиеСокращенное);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОрганизацииПриИзменении(Элемент)
	ИзменитьВидОрганизацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АдресЛоготипаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь, Ложь);
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры 

&НаКлиенте
Процедура АдресФаксимильнойПечатиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина, Ложь);
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресФаксимильнойПодписиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Ложь, Истина);
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаИНН(Текст);
КонецПроцедуры

&НаКлиенте
Процедура КодПоЕДРПОУОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаКодПоЕДРПОУ(Текст);
КонецПроцедуры

&НаКлиенте
Процедура НомерСвидельстваОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ПриОкончанииВводаНомерСвидетельства(Текст);
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаПриИзменении(Элемент)
	
	ТекстВопроса = НСтр("ru='Данные еще не записаны.
    |Настройка учетной политики возможна только после записи данных.
    |Данные будут записаны.'
    |;uk='Дані ще не записані.
    |Настройка облікової політики можлива тільки після запису даних.
    |Дані будуть записані.'");

	ПроверитьЗаписанностьОбъекта(НСтр("ru='Учетная политика';uk='Облікова політика'"), Новый ОписаниеОповещения("УчетнаяПолитикаПриИзмененииОбъектЗаписан", ЭтотОбъект), ТекстВопроса);
			
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаПриИзмененииОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт 
	УчетнаяПолитикаПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОрганизацийПериодСтрокойПриИзменении(Элемент)
	
	ВводМесяцаПриИзменении(ЭтаФорма,
								   "УчетнаяПолитикаОрганизаций.Период",
								   "УчетнаяПолитикаОрганизацийПериодСтрокой",
								   Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОрганизацийПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВводМесяцаНачалоВыбора(
		ЭтаФорма,
		ЭтаФорма,
		"УчетнаяПолитикаОрганизаций.Период",
		"УчетнаяПолитикаОрганизацийПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОрганизацийПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ВводМесяцаРегулирование(ЭтаФорма,
								"УчетнаяПолитикаОрганизаций.Период",
								"УчетнаяПолитикаОрганизацийПериодСтрокой",
								Направление,
								Модифицированность);
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаСервере
Процедура КонтактнаяИнформацияПриСменеСтраницы()
	
	УправлениеКонтактнойИнформацией.ВыполнитьОтложеннуюИнициализацию(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура ПрефиксПриИзменении(Элемент)
	
	Если Найти(Объект.Префикс, "-") > 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Нельзя в префиксе организации использовать символ ""-"".';uk='Не можна в префіксі організації використовувати символ ""-"".'"));
		Объект.Префикс = СтрЗаменить(Объект.Префикс, "-", "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	
	СтруктураНаименования	= РазложитьСтрокуНаименования(Объект.НаименованиеСокращенное);
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименованиеПолное(РазложитьСтрокуНаименования(НаименованиеСокращенное));
		
		Если СокрЛП(Объект.НаименованиеПолное) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование	= СформироватьНаименование(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименование(РазложитьСтрокуНаименования(НаименованиеСокращенное));
		
		Если СокрЛП(Объект.Наименование) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.Наименование	= СформироватьНаименование(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяПолитикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = УчетнаяПолитикаОрганизаций.УчетнаяПолитика Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПараметрыОрганизацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если ТекущаяСтраница.Имя = ПараметрыКонтактнойИнформации.ГруппаДляРазмещения
		И Не ПараметрыКонтактнойИнформации.ВыполненаОтложеннаяИнициализация Тогда
		
		КонтактнаяИнформацияПриСменеСтраницы();
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьПараметрыПФ(Команда)	
	
	
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru='Пенсионный фонд';uk='Пенсійний фонд'"), Новый ОписаниеОповещения("ОткрытьПараметрыПФОбъектЗаписан", ЭтотОбъект));
	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыПФОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт	
	
	//++ НЕ УТ
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОрганизации", ВидОрганизации);
	СтруктураПараметров.Вставить("НомерРегистрацииПФ", Объект.НомерРегистрацииПФ);
	СтруктураПараметров.Вставить("КодОрганаПФУ",       Объект.КодОрганаПФУ);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметровПФ", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПараметрыПФЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыПФЗавершение(Результат, ДополнительныеПараметры) Экспорт	
	
	//++ НЕ УТ
	СтруктураПараметров = Результат;
    Если ЗначениеЗаполнено(СтруктураПараметров) И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда		
        ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметров);
		ЗаполнитьОписаниеПФ();
		Модифицированность = Истина;
	КонецЕсли;

	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыФСС(Команда)
		
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru='Фонд социального страхования';uk='Фонд соціального страхування'"), Новый ОписаниеОповещения("ОткрытьПараметрыФССОбъектЗаписан", ЭтотОбъект));
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыФССОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОрганизации", ВидОрганизации);
	СтруктураПараметров.Вставить("НомерФСС", Объект.НомерФСС);	
	СтруктураПараметров.Вставить("НомерФССУ", Объект.НомерФССУ);	
	СтруктураПараметров.Вставить("НазваниеРабочегоОрганаФонда", Объект.НазваниеРабочегоОрганаФонда);	
	СтруктураПараметров.Вставить("ФИОДиректораФонда", Объект.ФИОДиректораФонда);	
	
	СтруктураПараметров.Вставить("НомерФССНесчСлучай", Объект.НомерФССНесчСлучай);	
	
	СтруктураПараметров.Вставить("НомерРегистрацииВСлужбеЗанятости", Объект.НомерРегистрацииВСлужбеЗанятости);	
	
	СтруктураПараметров.Вставить("ОрганСоциальнойЗащитыНаселения", Объект.ОрганСоциальнойЗащитыНаселения);	
	
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметровФСС", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПараметрыФССЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыФССЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураПараметров = Результат;
    
    Если ЗначениеЗаполнено(СтруктураПараметров) И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда		
        ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметров);
        ЗаполнитьОписаниеФСС();
        Модифицированность = Истина;
    КонецЕсли;
    
    //-- НЕ УТ
    Возврат;

КонецПроцедуры


&НаКлиенте
Процедура ОткрытьПараметрыКлассификаторов(Команда)
	
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru='Классификаторы';uk='Класифікатори'"), Новый ОписаниеОповещения("ОткрытьПараметрыКлассификаторовОбъектЗаписан", ЭтотОбъект));
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыКлассификаторовОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОрганизации", ВидОрганизации);
	
	СтруктураПараметров.Вставить("КодОПФГ", Объект.КодОПФГ);
	СтруктураПараметров.Вставить("ОПФГ", Объект.ОПФГ);
	
	СтруктураПараметров.Вставить("КодКОАТУУ", Объект.КодКОАТУУ);
	СтруктураПараметров.Вставить("Территория", Объект.Территория);
	
	СтруктураПараметров.Вставить("КодКФВ", Объект.КодКФВ);
	СтруктураПараметров.Вставить("ФормаСобственности", Объект.ФормаСобственности);
	
	СтруктураПараметров.Вставить("КодСПОДУ", Объект.КодСПОДУ);
	СтруктураПараметров.Вставить("ОрганГУ", Объект.ОрганГУ);
	
	СтруктураПараметров.Вставить("КодЗКГНГ", Объект.КодЗКГНГ);
	СтруктураПараметров.Вставить("Отрасль", Объект.Отрасль);
	
	СтруктураПараметров.Вставить("КодКВЕД", Объект.КодКВЕД);
	СтруктураПараметров.Вставить("ВЭД", Объект.ВЭД);
	
	СтруктураПараметров.Вставить("КлассПрофессиональногоРиска", Объект.КлассПрофессиональногоРиска);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметрыКлассификаторов", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПараметрыКлассификаторовЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыКлассификаторовЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураПараметров = Результат;
    
    Если ЗначениеЗаполнено(СтруктураПараметров) И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда
        ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметров);
        ЗаполнитьОписаниеКлассификаторов();
        Модифицированность = Истина;	
    КонецЕсли;
    
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыГосРегистрации(Команда)
	
	ПроверитьЗаписанностьОбъекта(НСтр("ru='Государственная регистрация';uk='Державна реєстрація'"), Новый ОписаниеОповещения("ОткрытьПараметрыГосРегистрацииОбъектЗаписан", ЭтотОбъект));
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыГосРегистрацииОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОрганизации", 		ВидОрганизации);
	СтруктураПараметров.Вставить("ДатаРегистрации", 	Объект.ДатаРегистрации);
	СтруктураПараметров.Вставить("НомерРегистрации",    Объект.НомерРегистрации);
	СтруктураПараметров.Вставить("КемЗарегистрирована", Объект.КемЗарегистрирована);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметровГосРегистрации", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПараметрыГосРегистрацииЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыГосРегистрацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураПараметров = Результат;
    
    Если ЗначениеЗаполнено(СтруктураПараметров) И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда
        ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметров);
        ЗаполнитьОписаниеГосРегистрации();
        Модифицированность = Истина;	
    КонецЕсли;
    
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыРасчетаЗарплаты(Команда)
	
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru='График работы';uk='Графік роботи'"), Новый ОписаниеОповещения("ОткрытьПараметрыРасчетаЗарплатыОбъектЗаписан" ,ЭтотОбъект));
			
КонецПроцедуры
											
&НаКлиенте
Процедура ОткрытьПараметрыРасчетаЗарплатыОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОрганизацияСсылка",            Объект.Ссылка);
	СтруктураПараметров.Вставить("ВидОрганизации",               ВидОрганизации);
	СтруктураПараметров.Вставить("ГрафикРаботыСотрудников",      Объект.ГрафикРаботыСотрудников);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметрыФормированияЗарплаты", 
												СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПараметрыРасчетаЗарплатыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыРасчетаЗарплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтруктураПараметров = Результат;
    
    Если ЗначениеЗаполнено(СтруктураПараметров) И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда
        ЗаполнитьЗначенияСвойств(Объект, СтруктураПараметров);
        ЗаполнитьОписаниеПараметровРасчетаЗарплаты();
        Модифицированность = Истина;	
    КонецЕсли;
    
    //-- НЕ УТ
    Возврат;

КонецПроцедуры


&НаКлиенте
Процедура ОткрытьКадровыйУчетИРасчетЗарплаты(Команда)
	
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru='Параметры кадрового учета и расчета зарплаты';uk='Параметри кадрового обліку і розрахунку зарплати'"), Новый ОписаниеОповещения("ОткрытьКадровыйУчетИРасчетЗарплатыОбъектЗаписан", ЭтотОбъект));
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКадровыйУчетИРасчетЗарплатыОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",  НСтр("ru='Параметры кадрового учета и расчет зарплаты';uk='Параметри кадрового обліку і розрахунку зарплати'"));
	ПараметрыОткрытия.Вставить("ОрганизацияСсылка",	Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ОрганизацияУчетнаяПолитика",
									ПараметрыОткрытия,
									ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьКадровыйУчетИРасчетЗарплатыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКадровыйУчетИРасчетЗарплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты();	
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБухучетИВыплатуЗарплаты(Команда)
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru='Бухучет и выплата зарплаты';uk='Бухгалтерський облік та виплата зарплати'"), Новый ОписаниеОповещения("ОткрытьБухучетИВыплатуЗарплатыОбъектЗаписан", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБухучетИВыплатуЗарплатыОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",			ЭтаФорма.Заголовок);
	ПараметрыОткрытия.Вставить("ОрганизацияСсылка",	Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ОрганизацияБухучетИВыплатаЗарплаты",
		ПараметрыОткрытия,
		ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьБухучетИВыплатуЗарплатыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБухучетИВыплатуЗарплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаполнитьОписаниеБухучетаИВыплатыЗарплат();	
    //-- НЕ УТ
    Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВоинскийУчет(Команда)
	//++ НЕ УТ
	ПроверитьЗаписанностьОбъекта(НСтр("ru='Воинский учет';uk='Військовий облік'"), Новый ОписаниеОповещения("ОткрытьВоинскийУчетОбъектЗаписан", ЭтотОбъект));
		
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьВоинскийУчетОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",			ЭтаФорма.Заголовок);
	ПараметрыОткрытия.Вставить("ОрганизацияСсылка",	Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ОрганизацияВоинскийУчет",
		ПараметрыОткрытия,
		ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьВоинскийУчетЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВоинскийУчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаполнитьОписаниеВоинскогоУчета();	
    //-- НЕ УТ
    Возврат;

КонецПроцедуры



&НаКлиенте
Процедура ДобавитьИзображениеЛоготипа(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?';uk='Для вибору зображення необхідно записати об''єкт. Записати?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЛоготипаЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеЛоготипаФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе
        Возврат
    КонецЕсли;
    
    
    ДобавитьИзображениеЛоготипаФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЛоготипаФрагмент()
    
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь, Ложь);
    
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеЛоготипа(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлЛоготип) Тогда
		
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.ФайлЛоготип);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутстует изображение для редактирования';uk='Відсутнє зображення для редагування'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресЛоготипа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеЛоготипа(Команда)
	
	Объект.ФайлЛоготип = Неопределено;
	АдресЛоготипа = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображениеЛоготипа(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь, Ложь);
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛоготипИзПрисоединенныхФайлов(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Истина, Ложь, Ложь);
	ВыбратьКартинкуИзПрисоединенныхФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимильнойПечати(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?';uk='Для вибору зображення необхідно записати об''єкт. Записати?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеФаксимильнаяПечатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФаксимильнаяПечатьФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимильнаяПечатьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе
        Возврат
    КонецЕсли;
    
    
	ДобавитьИзображениеФаксимильнаяПечатьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимильнаяПечатьФрагмент()
    
    Перем ИдентификаторФайла;
    
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина, Ложь);
    
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеФаксимильнойПечати(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлФаксимильнаяПечать) Тогда
		
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.ФайлФаксимильнаяПечать);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутстует изображение для редактирования';uk='Відсутнє зображення для редагування'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресФаксимильнойПечати");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеФаксимильнойПечати(Команда)
	
	Объект.ФайлФаксимильнаяПечать = Неопределено;
	АдресФаксимильнойПечати = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображениеФаксимильнойПечати(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина, Ложь);
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксимильнаяПечатьИзПрисоединенныхФайлов(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Истина, Ложь);
	ВыбратьКартинкуИзПрисоединенныхФайлов();
	
КонецПроцедуры // ФаксимильнаяПечатьИзПрисоединенныхФайлов()

&НаКлиенте
Процедура ДобавитьИзображениеФаксимильнойПодписи(Команда) 
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?';uk='Для вибору зображення необхідно записати об''єкт. Записати?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеФаксимильнаяПодписьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФаксимильнаяПодписьФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимильнаяПодписьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе
        Возврат
    КонецЕсли;
    
    
    ДобавитьИзображениеФаксимильнаяПодписьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФаксимильнаяПодписьФрагмент()
    
    Перем ИдентификаторФайла;
    
    УправлениеФлагамиРаботыСКартинками(Ложь, Ложь, Истина);
    
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображениеФаксимильнойПодписи(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлФаксимильнаяПодпись) Тогда
		
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.ФайлФаксимильнаяПодпись);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутстует изображение для редактирования';uk='Відсутнє зображення для редагування'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресФаксимильнойПодписи");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображениеФаксимильнойПодписи(Команда)
	
	Объект.ФайлФаксимильнаяПодпись = Неопределено;
	АдресФаксимильнойПодписи = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображениеФаксимильнойПодписи(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Ложь, Истина);
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксимильнаяПодписьИзПрисоединенныхФайлов(Команда)
	
	УправлениеФлагамиРаботыСКартинками(Ложь, Ложь, Истина);
	ВыбратьКартинкуИзПрисоединенныхФайлов();
	
КонецПроцедуры // ФаксимильнаяПодписьИзПрисоединенныхФайлов()

&НаКлиенте
Процедура ПомощникРаботыФаксимильнойПечати(Команда)
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(Объект.Ссылка);
	
	СтруктураДополнительныхПараметров = Новый Структура("ЗаголовокФормы", НСтр("ru='Как создать факсимильную подпись и печать?';uk='Як створити факсимільний підпис та печатку?'"));
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.Организации", "НапечататьПомощникРаботыФаксимильнойПечати", ПараметрКоманды, Неопределено, СтруктураДополнительныхПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрСчетаНаОплату(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Данные еще не записаны.
        |Переход к преварительному просмотру счета на оплату доступен только после записи данных.
        |Данные будут записаны.'
        |;uk='Дані ще не записані.
        |Перехід до попереднього перегляду рахунку на оплату доступний тільки після запису даних.
        |Дані будуть записані.'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПредварительныйПросмотрСчетаНаОплатуЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
		
	КонецЕсли;
	
	ПредварительныйПросмотрСчетаНаОплатуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрСчетаНаОплатуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    ЭлементЗаписан = Записать();
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    
    ПредварительныйПросмотрСчетаНаОплатуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрСчетаНаОплатуФрагмент()
    
    Перем ПараметрКоманды, СтруктураДополнительныхПараметров;
    
    ПараметрКоманды = Новый Массив;
    ПараметрКоманды.Добавить(Объект.Ссылка);
    
    СтруктураДополнительныхПараметров = Новый Структура("ЗаголовокФормы", НСтр("ru='Предварительный просмотр печатной формы ""Счет на оплату"".';uk='Попередній перегляд друкованої форми ""Рахунок на оплату"".'"));
    УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьСчетовНаОплату", "ПредварительныйПросмотрПечатнойФормыСчетНаОплату", ПараметрКоманды, Неопределено, СтруктураДополнительныхПараметров);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюУчетнуюПолитику(Команда)
	 ИзменятьУчетнуюПолитикуПриЗаписиНовой = Истина;
	ОткрытьФорму("Справочник.УчетныеПолитикиОрганизаций.ФормаОбъекта",
		,
		ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИсториюИзмененийУчетнойПолитики(Команда)
	
	ТолькоПросмотрИстории = Ложь;
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию("УчетнаяПолитикаОрганизаций",
																												ГоловнаяОрганизация,
																												ЭтаФорма,
																												ТолькоПросмотрИстории);

КонецПроцедуры


// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ПараметрыФормыРазблокировки = Новый Структура;
		ПараметрыФормыРазблокировки.Вставить("ОбособленноеПодразделение", Объект.ОбособленноеПодразделение);

		ОткрытьФорму("Справочник.Организации.Форма.РазблокированиеРеквизитов", ПараметрыФормыРазблокировки,,,,, 
			Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
        
        ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
        
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФИОФизическогоЛица(ИндивидуальныйПредприниматель)
	
	Возврат ФизическиеЛицаУТ.ФамилияИмяОтчество(ИндивидуальныйПредприниматель);
	
КонецФункции

&НаКлиенте
Функция СформироватьНаименование(СтруктураНаименования)
	
	Возврат	СтруктураНаименования.Наименование
			+ ?(ПустаяСтрока(СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно), "", " ")
			+ СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно;

КонецФункции

&НаКлиенте
Функция СформироватьНаименованиеПолное(СтруктураНаименования)
	Перем НаименованиеПолное;
	
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		НаименованиеПолное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2",
			СтруктураНаименования.ОрганизационноПравоваяФорма, ?(ЗначениеЗаполнено(ФИОИндивидуальногоПредпринимателя),ФИОИндивидуальногоПредпринимателя,СтруктураНаименования.Наименование));
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтруктураНаименования.ОрганизационноПравоваяФорма) Тогда
			НаименованиеПолное = СтруктураНаименования.Наименование;
		Иначе
			НаименованиеПолное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 ""%2""",
				СтруктураНаименования.ОрганизационноПравоваяФорма, СтруктураНаименования.Наименование);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат	НаименованиеПолное;
	
КонецФункции

&НаКлиенте
Функция РазложитьСтрокуНаименования(Знач Наименование)
	
	Результат	= Новый Структура("Наименование,ОрганизационноПравоваяФорма,ОрганизационноПравоваяФормаСокращенно");
	
	Наименование	= СокрЛП(Наименование);
	
	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ООО") Тогда
		ОрганизационноПравоваяФорма				= "Общество с ограниченной ответственностью";
		ОрганизационноПравоваяФормаСокращенно	= "ООО";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ТОВ") Тогда
		ОрганизационноПравоваяФорма				= "Товариство з обмеженою відповідальністю";
		ОрганизационноПравоваяФормаСокращенно	= "ТОВ";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ПАО") Тогда
		ОрганизационноПравоваяФорма				= "Публичное акционерное общество";
		ОрганизационноПравоваяФормаСокращенно	= "ПАО";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ПАТ") Тогда
		ОрганизационноПравоваяФорма				= "Публічне акціонерне товариство";
		ОрганизационноПравоваяФормаСокращенно	= "ПАТ";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ЧАО") Тогда
		ОрганизационноПравоваяФорма				= "Частное акционерное общество";
		ОрганизационноПравоваяФормаСокращенно	= "ЧАО";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ПрАТ") Тогда
		ОрганизационноПравоваяФорма				= "Приватне акціонерне товариство";
		ОрганизационноПравоваяФормаСокращенно	= "ПрАТ";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ФЛП") Тогда
		ОрганизационноПравоваяФорма				= "Физическое лицо - предприниматель";
		ОрганизационноПравоваяФормаСокращенно	= "ФЛП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ФОП") Тогда
		ОрганизационноПравоваяФорма				= "Фізична особа - підприємець";
		ОрганизационноПравоваяФормаСокращенно	= "ФОП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ЧП") Тогда
		ОрганизационноПравоваяФорма				= "Частное предприятие";
		ОрганизационноПравоваяФормаСокращенно	= "ЧП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ПП") Тогда
		ОрганизационноПравоваяФорма				= "Приватне підприємство";
		ОрганизационноПравоваяФормаСокращенно	= "ПП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ГП") Тогда
		ОрганизационноПравоваяФорма				= "Государственное предприятие";
		ОрганизационноПравоваяФормаСокращенно	= "ГП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "ДП") Тогда
		ОрганизационноПравоваяФорма				= "Державне підприємство";
		ОрганизационноПравоваяФормаСокращенно	= "ГП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "КП") Тогда
		ОрганизационноПравоваяФорма				= "Комунальне підприємство";
		ОрганизационноПравоваяФормаСокращенно	= "КП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Общество с ограниченной ответственностью") Тогда
		ОрганизационноПравоваяФорма				= "Общество с ограниченной ответственностью";
		ОрганизационноПравоваяФормаСокращенно	= "ООО";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Товариство з обмеженою відповідальністю") Тогда
		ОрганизационноПравоваяФорма				= "Товариство з обмеженою відповідальністю";
		ОрганизационноПравоваяФормаСокращенно	= "ТОВ";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Публичное акционерное общество") Тогда
		ОрганизационноПравоваяФорма				= "Публичное акционерное общество";
		ОрганизационноПравоваяФормаСокращенно	= "ПАО";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Публічне акціонерне товариство") Тогда
		ОрганизационноПравоваяФорма				= "Публічне акціонерне товариство";
		ОрганизационноПравоваяФормаСокращенно	= "ПАТ";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Частное акционерное общество") Тогда
		ОрганизационноПравоваяФорма				= "Частное акционерное общество";
		ОрганизационноПравоваяФормаСокращенно	= "ЧАО";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Приватне акціонерне товариство") Тогда
		ОрганизационноПравоваяФорма				= "Приватне акціонерне товариство";
		ОрганизационноПравоваяФормаСокращенно	= "ПрАТ";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Физическое лицо - предприниматель") Тогда
		ОрганизационноПравоваяФорма				= "Физическое лицо - предприниматель";
		ОрганизационноПравоваяФормаСокращенно	= "ФЛП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Фізична особа - підприємець") Тогда
		ОрганизационноПравоваяФорма				= "Фізична особа - підприємець";
		ОрганизационноПравоваяФормаСокращенно	= "ФОП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Частное предприятие") Тогда
		ОрганизационноПравоваяФорма				= "Частное предприятие";
		ОрганизационноПравоваяФормаСокращенно	= "ЧП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Приватне підприємство") Тогда
		ОрганизационноПравоваяФорма				= "Приватне підприємство";
		ОрганизационноПравоваяФормаСокращенно	= "ПП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Государственное предприятие") Тогда
		ОрганизационноПравоваяФорма				= "Государственное предприятие";
		ОрганизационноПравоваяФормаСокращенно	= "ГП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Державне підприємство") Тогда
		ОрганизационноПравоваяФорма				= "Державне підприємство";
		ОрганизационноПравоваяФормаСокращенно	= "ГП";
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, "Комунальне підприємство") Тогда
		ОрганизационноПравоваяФорма				= "Комунальне підприємство";
		ОрганизационноПравоваяФормаСокращенно	= "КП";
	
	Иначе
		ОрганизационноПравоваяФорма				= "";
		ОрганизационноПравоваяФормаСокращенно	= "";
	КонецЕсли;
	
	Если Объект.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")
	   И НЕ ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек	= СтрЧислоВхождений(Наименование, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек
			ПозицияПервойКавычки	= Найти(Наименование, """");
			ПозицияПоследнейКавычки	= 0;
			
			ВремНаименование	= Наименование;
			
			ПозицияКавычки		= ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки	= ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование	= Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки		= Найти(ВремНаименование, """");
			КонецЦикла;
			
			Наименование	= Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если НЕ КоличествоКавычек%2 = 0 Тогда
				Наименование	= Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Наименование							= СокрЛП(Наименование);
	Результат.ОрганизационноПравоваяФорма			= ОрганизационноПравоваяФорма;
	Результат.ОрганизационноПравоваяФормаСокращенно	= ОрганизационноПравоваяФормаСокращенно;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат	= Ложь;
	
	Наименование	= СокрЛП(Наименование);
	
	ДлинаНаименования			= СтрДлина(Наименование);
	ДлинаОрганизационнойФормы	= СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат		= Истина;
	КонецЕсли;	
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат		= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	УправлениеПредприятием = НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"ГруппаВидОрганизации",
			"Доступность", 
			ПравоДоступа("Изменение", Метаданные.Справочники.Организации));
	Если ВидОрганизации = "ЮридическоеЛицо" Тогда
		
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru='например, Стройснаб ООО';uk='наприклад, Будснаб ТОВ'");
		Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru='например, ООО ""Стройснаб""';uk='наприклад, ТОВ ""Будснаб""'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru='например, Общество с ограниченной ответственностью Стройснаб';uk='наприклад, Товариство з обмеженою відповідальністю Будснаб'");
		
		
	ИначеЕсли ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru='например, Балабанова Наталья Игнатьевна';uk='наприклад, Балабанова Наталія Ігнатівна'");
		Элементы.НаименованиеСокращенное.ПодсказкаВвода = НСтр("ru='например, ФЛП Балабанова Наталья Игнатьевна';uk='наприклад, ФОП Балабанова Наталія Ігнатівна'");
		Элементы.НаименованиеПолное.ПодсказкаВвода = НСтр("ru='например, Физическое лицо - предприниматель Балабанова Наталья Игнатьевна';uk='наприклад, Фізична особа - підприємець Балабанова Наталія Ігнатівна'");
		
	КонецЕсли;
	
	
	ВидимостьГруппаИндивидуальныйПредприниматель = 
	  	УправлениеПредприятием И ВидОрганизации = "ИндивидуальныйПредприниматель";
	  	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
	  			Элементы, 
	  			"ГруппаИндивидуальныйПредприниматель",
	  			"Видимость", 
	  			ВидимостьГруппаИндивидуальныйПредприниматель);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницОсновныхКодов",
																	"ТекущаяСтраница", Элементы.ОсновныеКоды);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию",
																	"Видимость", (ВидОрганизации = "ОбособленноеПодразделение"));
																	
																	
	
	Если НЕ УправлениеПредприятием Тогда
	  	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
	  			Элементы, 
				"ГруппаРегистрационныеДанные, ГруппаГрафикРаботыОтступ, ГруппаКадровыйУчетИРасчетЗарплатыОтступ, ГруппаБухучетИВыплатаЗарплатыОтступ, ГруппаВоинскийУчетОтступ",
	  			"Видимость", 
	 			Ложь);
	КонецЕсли;
	
		
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
		И НЕ ВидОрганизации = "ОбособленноеПодразделение" Тогда
		ЭлементСписка = Элементы.ВидОрганизации.СписокВыбора.НайтиПоЗначению("ОбособленноеПодразделение");
		
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ВидОрганизации.СписокВыбора.Удалить(ЭлементСписка);	
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступностьИзмененияУчетнойПолитикиИНалогов = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаУчетнаяПолитикаИДругиеНастройки",
																	"Доступность", ДоступностьИзмененияУчетнойПолитикиИНалогов, Истина);
																	
	Если НЕ УправлениеПредприятием Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаУчетнаяПолитикаИДругиеНастройки",
																	"Заголовок", НСтр("ru='Учетная политика';uk='Облікова політика'"));
	КонецЕсли;
	
	СуществуютУчетныеПолитики = СуществуютУчетныеПолитикиОрганизаций();
	РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "УчетнаяПолитикаОрганизаций", Объект.Ссылка);
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьНаборЗаписейИстории(ЭтаФорма, "УчетнаяПолитикаОрганизаций", Объект.Ссылка);
	Если Не ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.Период) Тогда
		УчетнаяПолитикаОрганизаций.Период = НачалоГода(ТекущаяДатаСеанса());
	КонецЕсли;
	ОбновитьПолеУчетнаяПолитикаОрганизацийПериод(ЭтаФорма);
	
	
	УстановитьСвойстваУчетнойПолитикиИНалогов();
	
	//++ НЕ УТ
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоинскийУчет") Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ГруппаВоинскийУчетОтступ",
				"Видимость",
				Ложь);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ГруппаЗарплатаИКадры",
				"Видимость",
				Ложь);
	КонецЕсли;
	
	ДоступностьКнопкиОткрытьКадровыйУчетИРасчетЗарплаты = 
			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносов)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаПоНДФЛ);
			
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ОткрытьКадровыйУчетИРасчетЗарплаты",
																	"Доступность", ДоступностьКнопкиОткрытьКадровыйУчетИРасчетЗарплаты);
																	
	ДоступностьКнопкиОткрытьБухучетИВыплатуЗарплаты = 
			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.БухучетЗарплатыОрганизаций)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ОткрытьБухучетИВыплатуЗарплаты",
																	"Доступность", ДоступностьКнопкиОткрытьБухучетИВыплатуЗарплаты);
	
	ДоступностьКнопкиОткрытьВоинскийУчет = 
			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВоинскийУчет);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ОткрытьВоинскийУчет",
																	"Доступность", ДоступностьКнопкиОткрытьВоинскийУчет);
																	
	//-- НЕ УТ
	
	//СистемаНалогообложения = Справочники.УчетныеПолитикиОрганизаций.ПараметрУчетнойПолитики(УчетнаяПолитикаОрганизаций.УчетнаяПолитика, "СистемаНалогообложения");
	//
	//ЕстьЕН  = СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ЕдиныйНалог") ИЛИ
	//          СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ЕдиныйНалогИНДС");
	//		  
	//ЕстьНДС = СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.ЕдиныйНалогИНДС") ИЛИ
	//          СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.СистемыНалогообложения.НалогНаПрибыльИНДС");

	//ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КодПоЕДРПОУ", "Заголовок", ?(ВидОрганизации = "ЮридическоеЛицо", "Код по ЕДРПОУ", "Код по ДРФО"));
	//ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СистемыНалогообложенияГруппаПлательщикаЕдиногоНалога",  "Видимость", ЕстьЕН);
	//ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПлательщикНДС", "Видимость", ЕстьНДС);

	//МассивНастроекУчетаПоНДС = Новый Массив;
	//
	//МассивНастроекУчетаПоНДС.Добавить("ГруппаУчетНДС");
	//МассивНастроекУчетаПоНДС.Добавить("ОбособленноеПодразделениеПоУмолчанию");
	//МассивНастроекУчетаПоНДС.Добавить("ОтветственныйЗаВыпискуНалоговыхДокументов");
	//МассивНастроекУчетаПоНДС.Добавить("НоменклатураЗаполненияНалоговыхНаАванс");
	//МассивНастроекУчетаПоНДС.Добавить("ФормироватьИтоговыеНалоговыеВРозницеСводноПоНоменклатуре");
	//МассивНастроекУчетаПоНДС.Добавить("НоменклатураЗаполненияИтоговыхНалоговыхПоРознице");
	//
	//МассивНастроекУчетаПоНДС.Добавить("МоментОпределенияБазыНДСПоПродажам");
	//МассивНастроекУчетаПоНДС.Добавить("МоментОпределенияБазыНДСПоЗакупкам");
	//МассивНастроекУчетаПоНДС.Добавить("МоментОпределенияБазыНДСПоЭкспорту");
	//МассивНастроекУчетаПоНДС.Добавить("МоментОпределенияБазыНДСПоИмпорту");
	//МассивНастроекУчетаПоНДС.Добавить("МоментОпределенияБазыНДСПоПередачеТоваровНаКомиссию");
	//МассивНастроекУчетаПоНДС.Добавить("МоментОпределенияБазыНДСПоПоступлениюТоваровНаКомиссию");
	//
	//МассивНастроекУчетаПоНДС.Добавить("ДекорацияИнформацияОНоменклатуре");
	//
	//
	//
	//
	//МассивНастроекУчетаПоНДС.Добавить("КартинкаИнформацияОДоговорах");
	//МассивНастроекУчетаПоНДС.Добавить("ДекорацияИнформацияОДоговорах");
	//
	//ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивНастроекУчетаПоНДС, "Видимость", ЕстьНДС);
	
	
КонецПроцедуры


&НаСервере
Процедура ИзменитьВидОрганизацииНаСервере()
	
	Если ВидОрганизации = "ЮридическоеЛицо" Тогда
			Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
			Объект.ОбособленноеПодразделение = Ложь;
			
			Объект.ИндивидуальныйПредприниматель = Справочники.ФизическиеЛица.ПустаяСсылка();
			Объект.ЦифровойИндексОбособленногоПодразделения = "";
			Объект.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию = Ложь;
			
		ИначеЕсли ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда 
			Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель");
			Объект.ОбособленноеПодразделение = Ложь;
			
			Объект.ЦифровойИндексОбособленногоПодразделения = "";
			Объект.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию = Ложь;
			
		Иначе ВызватьИсключение НСтр("ru='Произошла ошибка при изменении типа организации. Обратитесь к администратору.';uk='Сталася помилка при зміні типу організації. Зверніться до адміністратора.'");
		КонецЕсли;
	
	Модифицированность = Истина;
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФлагамиРаботыСКартинками(ЭтоРаботаСЛоготипом = Ложь, ЭтоРаботаСФаксимильнойПечатью = Ложь, ЭтоРаботаСФаксимильнойПодписью = Ложь)
	
	РаботаСЛоготипом = ЭтоРаботаСЛоготипом;
	РаботаСФаксимильнойПечатью  = ЭтоРаботаСФаксимильнойПечатью;
	РаботаСФаксимильнойПодписью = ЭтоРаботаСФаксимильнойПодписью;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов()
	
	ПараметрыВыбораКартинки = Новый Структура;
	ПараметрыВыбораКартинки.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыВыбораКартинки.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыВыбораКартинки.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныеФайлы", ПараметрыВыбораКартинки, ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	ИмяРеквизитаОбъекта = "";
	
	Если РаботаСЛоготипом Тогда
		
		ИмяРеквизитаОбъекта = "ФайлЛоготип";
		
	ИначеЕсли РаботаСФаксимильнойПечатью Тогда
		
		ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПечать";
		
	ИначеЕсли РаботаСФаксимильнойПодписью Тогда
		
		ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПодпись";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяРеквизитаОбъекта)
		И ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		
		ДанныеФайла = ПолучитьДанныеФайла(ЭтаФорма.Объект[ИмяРеквизитаОбъекта], УникальныйИдентификатор);
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутстует изображение для просмотра';uk='Відсутнє зображення для перегляду'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?';uk='Для вибору зображення необхідно записати об''єкт. Записати?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Если Не Записать() Тогда
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
    
    
    ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
    
    Перем ИдентификаторФайла, ИмяРеквизитаОбъекта;
    
    Если РаботаСЛоготипом Тогда
        
        ИмяРеквизитаОбъекта = "ФайлЛоготип";
        
	ИначеЕсли РаботаСФаксимильнойПечатью Тогда
        
        ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПечать";
		
	ИначеЕсли РаботаСФаксимильнойПодписью Тогда
        
        ИмяРеквизитаОбъекта = "ФайлФаксимильнаяПодпись";
        
    КонецЕсли;
    
    Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
        
        ПросмотретьПрисоединенныйФайл();
        
    ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
        
        ИдентификаторФайла = Новый УникальныйИдентификатор;
        
        ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, НоменклатураКлиент.ФильтрФайловИзображений());
        
    КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПриОкончанииВводаИНН(ТекстРедактирования) 
	
	Перем ТекстСообщения;
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(ТекстРедактирования) 
		И НЕ РегламентированныеДанныеКлиентСервер.ИННПлательщикаНДССоответствуетТребованиям(ТекстРедактирования, 
			ЭтоЮрЛицо, 
			ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.ИНН",,);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииВводаНомерСвидетельства(ТекстРедактирования) 
	
	Перем ТекстСообщения;
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(ТекстРедактирования) 
		И НЕ РегламентированныеДанныеКлиентСервер.НомерСвидетельстваПлательщикаНДССоответствуетТребованиям(ТекстРедактирования, 
			ЭтоЮрЛицо, 
			ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"НомерСвидетельства",,);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииВводаКодПоЕДРПОУ(ТекстРедактирования)	
	
	Перем ТекстСообщения;
	ОчиститьСообщения();
	
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	Если НЕ ПустаяСтрока(ТекстРедактирования) 
		И НЕ РегламентированныеДанныеКлиентСервер.КодПоЕДРПОУСоответствуетТребованиям(ТекстРедактирования, 
			ЭтоЮрЛицо,
			ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.КодПоЕДРПОУ",,);
			
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Заполнение описания (саммари) параметров организации

&НаСервере
Процедура ЗаполнитьОписанияПараметров()
	
	ЗаполнитьОписаниеГосРегистрации();
	//++ НЕ УТ
	ЗаполнитьОписаниеПФ();
	ЗаполнитьОписаниеФСС();
	ЗаполнитьОписаниеКлассификаторов();
	ЗаполнитьОписаниеПараметровРасчетаЗарплаты();
	ЗаполнитьОписаниеБухучетаИВыплатыЗарплат();
	ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты();
	ЗаполнитьОписаниеВоинскогоУчета();
	//-- НЕ УТ
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеГосРегистрации()	
	
	СтрокаОписанияРеквизитовГосРегистрации = НСтр("ru='Дата регистрации: %ДатаРегистрации%. Номер регистрации: %НомерРегистрации%. Кем зарегистрирована: %КемЗарегистрирована%';uk='Дата реєстрації: %ДатаРегистрации%. Номер реєстрації: %НомерРегистрации%. Ким зареєстрована: %КемЗарегистрирована%'");
	
	СтрокаОписанияРеквизитовГосРегистрации = СтрЗаменить(
		СтрокаОписанияРеквизитовГосРегистрации, 
		"%ДатаРегистрации%",  
		?(ЗначениеЗаполнено(Объект.ДатаРегистрации), 
			Объект.ДатаРегистрации, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
																						
	СтрокаОписанияРеквизитовГосРегистрации = СтрЗаменить(
		СтрокаОписанияРеквизитовГосРегистрации, 
		"%НомерРегистрации%",
		?(ЗначениеЗаполнено(Объект.НомерРегистрации),
			Объект.НомерРегистрации, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияРеквизитовГосРегистрации = СтрЗаменить(
		СтрокаОписанияРеквизитовГосРегистрации, 
		"%КемЗарегистрирована%",
		?(ЗначениеЗаполнено(Объект.КемЗарегистрирована),
			Объект.КемЗарегистрирована, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	Элементы.ДекорацияОписаниеГосРегистрация.Заголовок = СтрокаОписанияРеквизитовГосРегистрации;
	
КонецПроцедуры

//++ НЕ УТ

&НаСервере
Процедура ЗаполнитьОписаниеПФ()	
	
	СтрокаОписанияРеквизитовПФ = НСтр("ru='Номер регистрации в ПФ: %НомерРегистрацииПФ%. Код органа ПФУ: %КодОрганаПФУ%';uk='Номер реєстрації в ПФ: %НомерРегистрацииПФ%. Код органу ПФУ: %КодОрганаПФУ%'");
		
	
	СтрокаОписанияРеквизитовПФ = СтрЗаменить(
		СтрокаОписанияРеквизитовПФ, 
		"%НомерРегистрацииПФ%",  
		?(ЗначениеЗаполнено(Объект.НомерРегистрацииПФ), 
			Объект.НомерРегистрацииПФ, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
																						
	СтрокаОписанияРеквизитовПФ = СтрЗаменить(
		СтрокаОписанияРеквизитовПФ, 
		"%КодОрганаПФУ%",
		?(ЗначениеЗаполнено(Объект.КодОрганаПФУ),
			Объект.КодОрганаПФУ, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	Элементы.ДекорацияОписаниеРеквизитовПФР.Заголовок = СтрокаОписанияРеквизитовПФ;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеФСС()
	
	
	СтрокаОписанияРеквизитовФСС = НСтр("ru='Номер регистрации ФСС Украины: %НомерФССУ%. Номер регистрации ФСС от временной потери трудоспособности: %НомерФСС%. Номер регистрации в ФСС от несчастного случая: %НомерФССНесчСлучай%. Номер регистрации в службе занятости: %НомерРегистрацииВСлужбеЗанятости%';uk='Номер реєстрації ФСС України: %НомерФССУ%. Номер реєстрації ФСС від тимчасової втрати працездатності: %НомерФСС%. Номер реєстрації у ФСС від нещасного випадку: %НомерФССНесчСлучай%. Номер реєстрації в службі зайнятості: %НомерРегистрацииВСлужбеЗанятости%'");
	
	СтрокаОписанияРеквизитовФСС = СтрЗаменить(
		СтрокаОписанияРеквизитовФСС, 
		"%НомерФСС%",  
		?(ЗначениеЗаполнено(Объект.НомерФСС), 
			Объект.НомерФСС, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияРеквизитовФСС = СтрЗаменить(
		СтрокаОписанияРеквизитовФСС, 
		"%НомерФССУ%",  
		?(ЗначениеЗаполнено(Объект.НомерФССУ), 
			Объект.НомерФССУ, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияРеквизитовФСС = СтрЗаменить(
		СтрокаОписанияРеквизитовФСС, 
		"%НомерФССНесчСлучай%",  
		?(ЗначениеЗаполнено(Объект.НомерФССНесчСлучай), 
			Объект.НомерФССНесчСлучай, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияРеквизитовФСС = СтрЗаменить(
		СтрокаОписанияРеквизитовФСС, 
		"%НомерРегистрацииВСлужбеЗанятости%",  
		?(ЗначениеЗаполнено(Объект.НомерРегистрацииВСлужбеЗанятости), 
			Объект.НомерРегистрацииВСлужбеЗанятости, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	Элементы.ДекорацияОписаниеРеквизитовФСС.Заголовок = СтрокаОписанияРеквизитовФСС;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьОписаниеКлассификаторов()
	
	СтрокаОписанияКлассификаторов = НСтр("ru='ОПФГ: %КодОПФГ%. Организационно-правовая форма: %ОПФГ%. КодКОАТУУ: %КодКОАТУУ%. Территория: %Территория%. КФВ: %КодКФВ%. Форма собственности: %ФормаСобственности%. ЗКГНГ: %КодЗКГНГ%. Отрасль: %Отрасль%. СПОДУ: %КодСПОДУ%. Орган державного управления: %ОрганГУ%. КВЭД: %КодКВЕД%. Вид деятельности: %ВЭД%. Класс профессионального риска: %КлассПрофессиональногоРиска%.';uk='ОПФГ: %КодОПФГ%. Організаційно-правова форма: %ОПФГ%. КодКОАТУУ: %КодКОАТУУ%. Територія: %Территория%. КФВ: %КодКФВ%. Форма власності: %ФормаСобственности%. ЗКГНГ: %КодЗКГНГ%. Галузь: %Отрасль%. СПОДУ: %КодСПОДУ%. Орган державного управління: %ОрганГУ%. КВЕД: %КодКВЕД%. Вид діяльності: %ВЭД%. Клас професійного ризику: %КлассПрофессиональногоРиска%.'");
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КодОПФГ%",  
		?(ЗначениеЗаполнено(Объект.КодОПФГ), 
			Объект.КодОПФГ, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%ОПФГ%",  
		?(ЗначениеЗаполнено(Объект.ОПФГ), 
			Объект.ОПФГ, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КодКОАТУУ%",  
		?(ЗначениеЗаполнено(Объект.КодКОАТУУ), 
			Объект.КодКОАТУУ, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%Территория%",  
		?(ЗначениеЗаполнено(Объект.Территория), 
			Объект.Территория, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КодКФВ%",  
		?(ЗначениеЗаполнено(Объект.КодКФВ), 
			Объект.КодКФВ, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%ФормаСобственности%",  
		?(ЗначениеЗаполнено(Объект.ФормаСобственности), 
			Объект.ФормаСобственности, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КодСПОДУ%",  
		?(ЗначениеЗаполнено(Объект.КодСПОДУ), 
			Объект.КодСПОДУ, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%ОрганГУ%",  
		?(ЗначениеЗаполнено(Объект.ОрганГУ), 
			Объект.ОрганГУ, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КодЗКГНГ%",  
		?(ЗначениеЗаполнено(Объект.КодЗКГНГ), 
			Объект.КодЗКГНГ, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%Отрасль%",  
		?(ЗначениеЗаполнено(Объект.Отрасль), 
			Объект.Отрасль, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КодКВЕД%",  
		?(ЗначениеЗаполнено(Объект.КодКВЕД), 
			Объект.КодКВЕД, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%ВЭД%",  
		?(ЗначениеЗаполнено(Объект.ВЭД), 
			Объект.ВЭД, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	СтрокаОписанияКлассификаторов = СтрЗаменить(
		СтрокаОписанияКлассификаторов, 
		"%КлассПрофессиональногоРиска%",  
		?(ЗначениеЗаполнено(Объект.КлассПрофессиональногоРиска), 
			Объект.КлассПрофессиональногоРиска, 
			НСтр("ru='не указано';uk='не указано'")
		)
	);
	
	Элементы.ДекорацияОписаниеКлассификаторов.Заголовок = СтрокаОписанияКлассификаторов;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеПараметровРасчетаЗарплаты()
	
	СтрокаОписания = НСтр("ru='График работы сотрудников: %ГрафикРаботыСотрудников%.';uk='Графік роботи співробітників: %ГрафикРаботыСотрудников%.'");
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ГрафикиРаботыСотрудников) Тогда 
		Если ЗначениеЗаполнено(Объект.ГрафикРаботыСотрудников) Тогда 
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", Объект.ГрафикРаботыСотрудников);		
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", НСтр("ru='не указано';uk='не указано'"));
		КонецЕсли;	
	Иначе
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));	
	КонецЕсли;
	
	Элементы.ОписаниеПараметровРасчетаЗарплаты.Заголовок = СтрокаОписания;	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты()
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	ПравоЧтенияУчетСтраховыхВзносов 		= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносов);
		
	ПравоЧтенияЗарплатаКадрыРасширенная 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);
	
	ПравоЧтенияУчетПособийСоциальногоСтрахования  
											= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования);
	ПравоЧтенияУчетнаяПолитикаПоНДФЛ 		= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.УчетнаяПолитикаПоНДФЛ);
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаОрганизация.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		КОГДА Организации.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Организации.ГоловнаяОрганизация
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК Организация
	|ПОМЕСТИТЬ ТаблицаГоловнаяОрганизация
	|ИЗ
	|	ТаблицаОрганизация КАК ТаблицаОрганизация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ТаблицаОрганизация.Ссылка = Организации.Ссылка
	|;";
	
	НомерТекущейТаблицыЗапроса = 1;
	
	Если ПравоЧтенияУчетСтраховыхВзносов Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудЧленовЛетныхЭкипажей, ЛОЖЬ) КАК ИспользуетсяТрудЧленовЛетныхЭкипажей,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуютсяСпециальныеРаботы, ЛОЖЬ) КАК ИспользуютсяСпециальныеРаботы,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.УчетНовыхРабочихМест, ЛОЖЬ) КАК УчетНовыхРабочихМест,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ОсновнаяКатегорияЗастрахованныхЛиц, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)) КАК ОсновнаяКатегорияЗастрахованныхЛиц
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаСтраховыхВзносов КАК НастройкиУчетаСтраховыхВзносов
		|		ПО Организации.Ссылка = НастройкиУчетаСтраховыхВзносов.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетСтраховыхВзносов = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
		
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияУчетПособийСоциальногоСтрахования Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	НастройкиУчетаПособийСоциальногоСтрахования.РазрешенаВыплатаПособийДоОплатыФСС
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования КАК НастройкиУчетаПособийСоциальногоСтрахования
		|		ПО Организации.Ссылка = НастройкиУчетаПособийСоциальногоСтрахования.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетПособийСоциальногоСтрахования = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	
	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЛОЖЬ
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗарплатаКадрыРасширенная КАК НастройкиЗарплатаКадрыРасширенная
		|		ПО Организации.Ссылка = НастройкиЗарплатаКадрыРасширенная.Организация;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыЗарплатаКадрыРасширенная = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
		
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияУчетнаяПолитикаПоНДФЛ Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация,
		|	ЕСТЬNULL(УчетнаяПолитикаПоНДФЛ.ИспользоватьОбособленныеПодразделенияДляНДФЛ, ЛОЖЬ) КАК ИспользоватьОбособленныеПодразделенияДляНДФЛ,
		|	ЕСТЬNULL(УчетнаяПолитикаПоНДФЛ.РазрешенаУплатаНалоговДоОплатыФСС, ЛОЖЬ) КАК РазрешенаУплатаНалоговДоОплатыФСС
		|ИЗ
		|	ТаблицаГоловнаяОрганизация КАК ТаблицаГоловнаяОрганизация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
		|		ПО ТаблицаГоловнаяОрганизация.Организация = УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетнаяПолитикаПоНДФЛ = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
		
	СтрокаОписания = "%ПродолжениеСтроки%";
	
	
	СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				"%ОсновнаяКатегорияЗастрахованныхЛиц% %УчетНовыхРабочихМест% %ИспользуетсяТрудЧленовЛетныхЭкипажей% %ИспользуютсяСпециальныеРаботы% %ИспользуетсяТрудШахтеров% 
					|%ПродолжениеСтроки%");;
				
	
	Если ИспользоватьРасчетЗарплатыРасширенная Тогда
		СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				"%РазрешенаВыплатаПособийДоОплатыФСС%
					|%ПродолжениеСтроки%");				
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты Тогда  
		СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				"%ИспользоватьОбособленныеПодразделенияДляНДФЛ%. %РазрешенаУплатаНалоговДоОплатыФСС%. 
					|%ПродолжениеСтроки%");
		
	КонецЕсли;	
		

	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПродолжениеСтроки%", "");
	
	
	Если ПравоЧтенияУчетСтраховыхВзносов Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетСтраховыхВзносов].Выбрать();
		Результат.Следующий();
		
		
		Если Результат.ИспользуетсяТрудЧленовЛетныхЭкипажей Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%",
			НСтр("ru='Используется труд летных экипажей.';uk='Використовується праця льотних екіпажів.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%", "");
		КонецЕсли;
		
		
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудШахтеров%", "");

		Если ЗначениеЗаполнено(Результат.ОсновнаяКатегорияЗастрахованныхЛиц) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсновнаяКатегорияЗастрахованныхЛиц%",
			НСтр("ru='Основная категория застрахованных лиц: ';uk='Основна категорія застрахованих осіб: '") + Результат.ОсновнаяКатегорияЗастрахованныхЛиц.Наименование);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсновнаяКатегорияЗастрахованныхЛиц%", "");
		КонецЕсли;

		Если Результат.УчетНовыхРабочихМест Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%УчетНовыхРабочихМест%",
			НСтр("ru='Ведется учет работников принятых на новые рабочие места.';uk='Ведеться облік прийнятих працівників на нові робочі місця.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%УчетНовыхРабочихМест%", "");
		КонецЕсли;
		
		Если Результат.ИспользуютсяСпециальныеРаботы Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяСпециальныеРаботы%",
			НСтр("ru='Есть работники на специальных работах.';uk='Є працівники на спеціальних роботах.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяСпециальныеРаботы%", "");
		КонецЕсли;


	Иначе
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудШахтеров%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсновнаяКатегорияЗастрахованныхЛиц%", 
													НСтр("ru='Недостаточно прав на чтение информации об учете страховых взносов.';uk='Недостатньо прав для читання інформації про облік страхових внесків.'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%УчетНовыхРабочихМест%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяСпециальныеРаботы%", "");
		
	КонецЕсли;
	
		
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияУчетнаяПолитикаПоНДФЛ Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетнаяПолитикаПоНДФЛ].Выбрать();
		Результат.Следующий();
		
		Если Результат.ИспользоватьОбособленныеПодразделенияДляНДФЛ Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользоватьОбособленныеПодразделенияДляНДФЛ%",НСтр("ru='Ведется учет НДФЛ по обособленным подразделениям';uk='Ведеться облік ПДФО за відокремленими підрозділами'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользоватьОбособленныеПодразделенияДляНДФЛ%",НСтр("ru='Не ведется учет НДФЛ по обособленным подразделениям';uk='Не ведеться облік ПДФО за відокремленими підрозділами'"));
		КонецЕсли;
		
		Если Результат.РазрешенаУплатаНалоговДоОплатыФСС Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаУплатаНалоговДоОплатыФСС%",НСтр("ru='Разрешена уплата налогов по начислениям ФСС до оплаты фондом';uk='Дозволена сплата податків по нарахуваннях до ФСС фондом оплати'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаУплатаНалоговДоОплатыФСС%",НСтр("ru='Не разрешена уплата налогов по начислениям ФСС до оплаты фондом';uk='Не дозволяється сплата податків по нарахуваннях до ФСС фондом оплати'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьНачислениеЗарплаты Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсобенностиИсчисленияНДФЛ%", НСтр("ru='Недостаточно прав на чтение информации о настройках НДФЛ';uk='Недостатньо прав для читання інформації про настройках ПДФО'"));
			
	КонецЕсли;
		
	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияУчетПособийСоциальногоСтрахования Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетПособийСоциальногоСтрахования].Выбрать();
		Результат.Следующий();

        Если НЕ (Результат.РазрешенаВыплатаПособийДоОплатыФСС = NULL) И Результат.РазрешенаВыплатаПособийДоОплатыФСС Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаВыплатаПособийДоОплатыФСС%",
			НСтр("ru='Разрешена выплата пособий ФСС до поступления средств от фонда.';uk='Дозволена виплата допомоги ФСС до надходження коштів від фонду.'"));			
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаВыплатаПособийДоОплатыФСС%",
			НСтр("ru='Пособия ФСС выплачиваются только после поступления средств от фонда.';uk='Допомоги ФСС виплачуються тільки після надходження коштів від фонду.'"));			
		Конецесли;	

	ИначеЕсли ИспользоватьРасчетЗарплатыРасширенная Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РазрешенаВыплатаПособийДоОплатыФСС%", НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
		
	КонецЕсли;
	
	Пока Найти(СтрокаОписания, "  ") > 0 Цикл
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "  ", " ");
	КонецЦикла;
	
	Элементы.ОписаниеКадровыйУчетИРасчетЗарплаты.Заголовок = СокрЛП(СтрокаОписания);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеБухучетаИВыплатыЗарплат()
	
	ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	ИспользоватьНачислениеЗарплаты		  = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	ПравоЧтенияБухучетЗарплатыОрганизаций 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.БухучетЗарплатыОрганизаций);
	ПравоЧтенияМестаВыплатыЗарплатыОрганизаций = 
											  ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций);
	ПравоЧтенияЗарплатаКадрыРасширенная 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;";
	
	НомерТекущейТаблицыЗапроса = 0;
			
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияМестаВыплатыЗарплатыОрганизаций Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	МестаВыплатыЗарплатыОрганизаций.Вид,
		|	МестаВыплатыЗарплатыОрганизаций.МестоВыплаты
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
		|		ПО Организации.Ссылка = МестаВыплатыЗарплатыОрганизаций.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыМестаВыплатыЗарплатыОрганизаций = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияБухучетЗарплатыОрганизаций Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	БухучетЗарплатыОрганизацийСрезПоследних.СпособОтраженияЗарплатыВБухучете,
		|	БухучетЗарплатыОрганизацийСрезПоследних.СтатьяФинансирования
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыОрганизаций.СрезПоследних КАК БухучетЗарплатыОрганизацийСрезПоследних
		|		ПО Организации.Ссылка = БухучетЗарплатыОрганизацийСрезПоследних.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыБухучетЗарплатыОрганизаций = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;

	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	НастройкиЗарплатаКадрыРасширенная.ДатаВыплатыАвансаНеПозжеЧем,
		|	НастройкиЗарплатаКадрыРасширенная.ДатаВыплатыЗарплатыНеПозжеЧем
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗарплатаКадрыРасширенная КАК НастройкиЗарплатаКадрыРасширенная
		|		ПО Организации.Ссылка = НастройкиЗарплатаКадрыРасширенная.Организация;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыЗарплатаКадрыРасширенная = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
			
	СтрокаОписания = "%ПродолжениеСтроки%";
	
	Если ИспользоватьНачислениеЗарплаты Тогда
		СтрокаОписания = СтрЗаменить(
			СтрокаОписания, 
			"%ПродолжениеСтроки%", 
			НСтр("ru='Способ отражения зарплаты в бухучете: %СпособОтраженияЗарплатыВБухучете%.
                |%ПродолжениеСтроки%'
                |;uk='Спосіб відображення зарплати в бухобліку: %СпособОтраженияЗарплатыВБухучете%.
                |%ПродолжениеСтроки%'"));	
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплатыРасширенная Тогда
		СтрокаОписания = СтрЗаменить(
			СтрокаОписания, 
			"%ПродолжениеСтроки%", 
			НСтр("ru='%МестоВыплатыЗарплаты%
                |%ПродолжениеСтроки%'
                |;uk='%МестоВыплатыЗарплаты%
                |%ПродолжениеСтроки%'"));	
	КонецЕсли;
		
	СтрокаОписания = СтрЗаменить(
		СтрокаОписания,
		"%ПродолжениеСтроки%",
		НСтр("ru='Крайний срок выплаты аванса: %ДатаВыплатыАвансаНеПозжеЧем%.
            |Крайний срок выплаты зарплаты: %ДатаВыплатыЗарплатыНеПозжеЧем%.'
            |;uk='Крайній термін виплати авансу: %ДатаВыплатыАвансаНеПозжеЧем%.
            |Крайній термін виплати зарплати: %ДатаВыплатыЗарплатыНеПозжеЧем%.'"));
			
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПродолжениеСтроки%", "");
		
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияБухучетЗарплатыОрганизаций Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыБухучетЗарплатыОрганизаций].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.СтатьяФинансирования) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%",
				Результат.СтатьяФинансирования);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%",
				НСтр("ru='не указано';uk='не указано'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.СпособОтраженияЗарплатыВБухучете) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%",
			Результат.СпособОтраженияЗарплатыВБухучете);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%",
			НСтр("ru='не указано';uk='не указано'"));
		КонецЕсли;
		
		
	ИначеЕсли ИспользоватьНачислениеЗарплаты Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%", НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%", НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
		
	КонецЕсли;
			
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияМестаВыплатыЗарплатыОрганизаций Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыМестаВыплатыЗарплатыОрганизаций].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.Вид) Тогда
			Если Результат.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса Тогда
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru='Зарплата выдается через кассу: %МестоВыплаты%.';uk='Зарплата видається через касу: %МестоВыплаты%.'"));
			Иначе
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru='Зарплата выдается посредством зачисления на карточку: %МестоВыплаты%.';uk='Зарплата видається за допомогою зарахування на картку: %МестоВыплаты%.'"));
			КонецЕсли;
			МестоВыплаты = ?(ЗначениеЗаполнено(Результат.МестоВыплаты), Результат.МестоВыплаты, НСтр("ru='не указано';uk='не указано'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплаты%", МестоВыплаты);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%",
			НСтр("ru='Место/способ выплаты зарплаты не указан.';uk='Місце/спосіб виплати зарплати не вказано.'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьРасчетЗарплатыРасширенная Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru='Недостаточно прав на чтение информации о местах выплаты зарплаты.';uk='Недостатньо прав для читання інформації про місця виплати зарплати.'"));		
		
	КонецЕсли;
	
	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыЗарплатаКадрыРасширенная].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.ДатаВыплатыАвансаНеПозжеЧем) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru='%ДатаВыплатыАвансаНеПозжеЧем% число месяца';uk='%ДатаВыплатыАвансаНеПозжеЧем% число місяця'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			Результат.ДатаВыплатыАвансаНеПозжеЧем);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru='не указано';uk='не указано'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.ДатаВыплатыЗарплатыНеПозжеЧем) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru='%ДатаВыплатыЗарплатыНеПозжеЧем% число месяца';uk='%ДатаВыплатыЗарплатыНеПозжеЧем% число місяця'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			Результат.ДатаВыплатыЗарплатыНеПозжеЧем);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru='не указано';uk='не указано'"));
		КонецЕсли;
				
	Иначе
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru='недостаточно прав на чтение информации';uk='недостатньо прав для читання інформації'"));
	КонецЕсли;
		
	Элементы.ОписаниеБухучетИВыплатаЗарплаты.Заголовок = СокрЛП(СтрокаОписания);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеВоинскогоУчета()
	
	Элементы.ОписаниеВоинскийУчет.Заголовок = НСтр("ru='Воинский учет';uk='Військовий облік'");
	
КонецПроцедуры
//-- НЕ УТ



&НаСервере
Функция ПолучитьСписокГоловныхОрганизацийОбособленногоПодразделения()

	Запрос = Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = Организации.Ссылка
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И НЕ Организации.Ссылка = &УправленческаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	УправленческаяОрганизация 
		= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	Запрос.УстановитьПараметр("УправленческаяОрганизация", УправленческаяОрганизация);
	
	СписокОрганизаций = Новый СписокЗначений;

	Результат	= Запрос.Выполнить();
	Выборка	= Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции

&НаКлиенте
Процедура ПроверитьЗаписанностьОбъекта(ИмяФормы, ОповещениеПослеЗаписи, ТекстВопроса = Неопределено)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ТекстВопроса = Неопределено Тогда
			ТекстВопроса = НСтр("ru='Данные еще не записаны.
            |Переход к ""%ИмяФормы%"" возможен только после записи данных.
            |Данные будут записаны.'
            |;uk='Дані ще не записані.
            |Перехід до ""%ИмяФормы%"" можливий тільки після запису даних.
            |Дані будуть записані.'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяФормы%", ИмяФормы);
		КонецЕсли;
				
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьЗаписанностьОбъектаОбработкаОтвета", ЭтотОбъект, ОповещениеПослеЗаписи), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПослеЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаписанностьОбъектаОбработкаОтвета(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Если КодОтвета = КодВозвратаДиалога.ОК Тогда 
		
		ЭлементЗаписан = Записать();
		
		Если Не ЭлементЗаписан Тогда
			Возврат;
		КонецЕсли;
		
	    Оповещение = ДополнительныеПараметры;
		
		ВыполнитьОбработкуОповещения(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеЗаписиУчетнойПолитики(Знач УчетнаяПолитика)
	
	Если ИзменятьУчетнуюПолитикуПриЗаписиНовой Тогда
		УчетнаяПолитикаОрганизаций.УчетнаяПолитика = УчетнаяПолитика;
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.Период) Тогда
			УчетнаяПолитикаОрганизаций.Период = НачалоГода(ТекущаяДатаСеанса());
		КонецЕсли;
		ИзменятьУчетнуюПолитикуПриЗаписиНовой = Ложь;
		Модифицированность = Истина;
		СуществуютУчетныеПолитики = СуществуютУчетныеПолитикиОрганизаций();

	КонецЕсли;
	
	УстановитьСвойстваУчетнойПолитикиИНалогов();
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьРеквизитГоловнаяОрганизация()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|				И Организации.ОбособленноеПодразделение
	|			ТОГДА Организации.ГоловнаяОрганизация
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Объект.Ссылка);
	
	ДанныеГоловнаяОрганизация = Запрос.Выполнить().Выбрать();
	Пока ДанныеГоловнаяОрганизация.Следующий() Цикл
		ГоловнаяОрганизация = ДанныеГоловнаяОрганизация.ГоловнаяОрганизация;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораДатыНаСервере(ВыбраннаяДата)
	
	ОткрытаФормаВыбораДаты = Ложь;

КонецПроцедуры

&НаСервере
Процедура УчетнаяПолитикаПриИзмененииСервер()
	
	УстановитьСвойстваУчетнойПолитикиИНалогов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваУчетнойПолитикиИНалогов()
	
	Элементы.ДекорацияПредупреждениеУчетнаяПолитика.Видимость =  (ВидОрганизации = "ОбособленноеПодразделение");
	Элементы.ГруппаУчетнаяПолитика.Видимость = СуществуютУчетныеПолитики;
	Элементы.ГруппаУчетнаяПолитикаНоваяБаза.Видимость = Не СуществуютУчетныеПолитики;
	
//++ НЕ УТ


//-- НЕ УТ

КонецПроцедуры

&НаСервере
Функция СуществуютУчетныеПолитикиОрганизаций()

	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.УчетныеПолитикиОрганизаций КАК Т");

	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПолеУчетнаяПолитикаОрганизацийПериод(Форма)
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма,
																				"УчетнаяПолитикаОрганизаций",
																				Форма.ГоловнаяОрганизация);
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "УчетнаяПолитикаОрганизаций.Период");
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма,
																				"УчетнаяПолитикаОрганизацийПериодСтрокой",
																				ПолучитьПредставлениеМесяца(Значение));
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеУчетнойПолитикиИНалогов(ТекущийОбъект)
	
	Если НЕ НастройкиУчетнойПолитикиИНалоговВведены Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций)
		И ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.УчетнаяПолитика) Тогда
		
		ПараметрыУчетнойПолитики = Справочники.УчетныеПолитикиОрганизаций.ПараметрыУчетнойПолитики(УчетнаяПолитикаОрганизаций.УчетнаяПолитика);
		ЗаполнитьЗначенияСвойств(УчетнаяПолитикаОрганизаций, ПараметрыУчетнойПолитики);
		
		Если Не ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.Организация) Тогда
			УчетнаяПолитикаОрганизаций.Организация = ТекущийОбъект.Ссылка;
			ГоловнаяОрганизация = ТекущийОбъект.Ссылка;
		КонецЕсли;
		
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтаФорма,
																					"УчетнаяПолитикаОрганизаций",
																					ТекущийОбъект.Ссылка);
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма,
																					"УчетнаяПолитикаОрганизаций",
																					ТекущийОбъект.Ссылка);
		Если Не ЗначениеЗаполнено(УчетнаяПолитикаОрганизаций.Период) Тогда
			УчетнаяПолитикаОрганизаций.Период = Дата(0001,1,1);
		КонецЕсли;
		ОбновитьПолеУчетнаяПолитикаОрганизацийПериод(ЭтаФорма);
		
	КонецЕсли;
	
	//++ НЕ УТ
	// Запись настроек расчета резервов отпусков.
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиРасчетаРезервовОтпусков) Тогда
			
			Набор = РегистрыСведений.НастройкиРасчетаРезервовОтпусков.СоздатьНаборЗаписей();
			Набор.Отбор.Организация.Установить(ТекущийОбъект.Ссылка);
			Набор.Прочитать();
			
			ЗначенияУчетнойПолитики = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяПолитикаОрганизаций.УчетнаяПолитика, 
				"ФормироватьРезервОтпусковБУ, МетодНачисленияРезерваОтпусков, НормативОтчисленийВРезервОтпусков, ПредельнаяВеличинаОтчисленийВРезервОтпусков");
			
			МассивУдаляемыхЗаписей = Новый Массив;
			ЗаписьДобавлена = Ложь;
			// сохраняем, обновляем предыдущие записи
			Для Каждого Строка Из Набор Цикл
				Если Строка.Период = НачалоГода(УчетнаяПолитикаОрганизаций.Период) Тогда
					ЗаписьДобавлена = Истина;
					ЗаполнитьЗначенияСвойств(Строка, ЗначенияУчетнойПолитики);
				ИначеЕсли Строка.Период > НачалоГода(УчетнаяПолитикаОрганизаций.Период) Тогда
					МассивУдаляемыхЗаписей.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Строка Из МассивУдаляемыхЗаписей Цикл
				Набор.Удалить(Строка);
			КонецЦикла;
			
			Если Не ЗаписьДобавлена Тогда
				СтрокаНабора = Набор.Добавить();
				СтрокаНабора.Организация             = ТекущийОбъект.Ссылка;
				СтрокаНабора.Период                  = НачалоГода(УчетнаяПолитикаОрганизаций.Период);
				ЗаполнитьЗначенияСвойств(СтрокаНабора, ЗначенияУчетнойПолитики);
			КонецЕсли;
			Набор.Записать(Истина);
			
	КонецЕсли;
    //-- НЕ УТ
	
	
КонецПроцедуры


&НаКлиенте
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеМесяца(Знач ДатаНачалаМесяца)
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
	
КонецФункции

&НаКлиенте
Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь)
	
	ЗначениеПредставления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект,
																				ПутьРеквизитаПредставления,
																				ПолучитьПредставлениеМесяца(Значение));
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВводМесяцаНачалоВыбора(	Форма,
											РедактируемыйОбъект,
											ПутьРеквизита,
											ПутьРеквизитаПредставления,
											ИзменитьМодифицированность = Истина,
											ОповещениеЗавершения = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("РедактируемыйОбъект", РедактируемыйОбъект);
	ДополнительныеПараметры.Вставить("ПутьРеквизита", ПутьРеквизита);
	ДополнительныеПараметры.Вставить("ПутьРеквизитаПредставления", ПутьРеквизитаПредставления);
	ДополнительныеПараметры.Вставить("ИзменитьМодифицированность", ИзменитьМодифицированность);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", 
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводМесяцаРегулирование(	РедактируемыйОбъект,
											ПутьРеквизита,
											ПутьРеквизитаПредставления,
											Направление,
											Модифицированность = Ложь)
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Значение = ДобавитьМесяц(Значение, Направление);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект,
																				ПутьРеквизита,
																				Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект,
																				ПутьРеквизитаПредставления,
																				ПолучитьПредставлениеМесяца(Значение));
	
	Модифицированность = Истина;
 	
КонецПроцедуры 

&НаКлиенте
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ДатаСеанса());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если Найти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли Найти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли Найти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли Найти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли Найти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 и МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте
Процедура ВводМесяцаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	РедактируемыйОбъект = ДополнительныеПараметры.РедактируемыйОбъект;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	ИзменитьМодифицированность = ДополнительныеПараметры.ИзменитьМодифицированность;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	Значение = ВыбранноеЗначение;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	Представление = ПолучитьПредставлениеМесяца(Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, Представление);
	
	Если ИзменитьМодифицированность Тогда 
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДатаСеанса()
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли
	
КонецФункции

//++ НЕ УТ
//-- НЕ УТ


&НаСервереБезКонтекста
Функция ПояснениеЛоготипа()
	
	ТекстПоясненияЛоготипа = НСтр("ru='Логотип будет использоваться в печатных формах документов%СписокДокументов%.';uk='Логотип буде використовуватися у друкованих формах документів%СписокДокументов%.'");
	ТекстСписокДокументов = "";
	
	ИспользоватьКоммерческиеПредложения = ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам");
	ИспользоватьЗаказыКлиентов          = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов");
	ИспользоватьСчетаНаОплату           = ПолучитьФункциональнуюОпцию("ИспользоватьСчетаНаОплатуКлиентам");
	ИспользоватьРозничныеПродажи        = ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи");
	
	ТекстСписокДокументов = "%П1%%П2%%П3%%П4%";	
	
	Если ИспользоватьКоммерческиеПредложения Тогда
		ТекстКоммерческоеПредложение = НСтр("ru=' ""Коммерческое предложение"",';uk=' ""Комерційна пропозиція"",'");
	Иначе
		ТекстКоммерческоеПредложение = "";
	КонецЕсли;
	
	Если ИспользоватьЗаказыКлиентов Тогда
		ТекстЗаказКлиента = НСтр("ru=' ""Заказ клиента"",';uk=' ""Замовлення клієнта"",'"); 
	Иначе
		ТекстЗаказКлиента = "";
	КонецЕсли;
	
	Если ИспользоватьСчетаНаОплату Тогда
		ТекстСчетНаОплату = НСтр("ru=' ""Счет на оплату"",';uk=' ""Рахунок на оплату"",'");
	Иначе
		ТекстСчетНаОплату = "";
	КонецЕсли;
	
	Если ИспользоватьРозничныеПродажи Тогда
		ТекстТоварныйЧек = НСтр("ru=' ""Товарный чек"",';uk=' ""Товарний чек"",'");
	Иначе
		ТекстТоварныйЧек = "";
	КонецЕсли;
	
	ТекстСписокДокументов = СтрЗаменить(ТекстСписокДокументов, "%П1%", ТекстКоммерческоеПредложение);
	ТекстСписокДокументов = СтрЗаменить(ТекстСписокДокументов, "%П2%", ТекстЗаказКлиента);
	ТекстСписокДокументов = СтрЗаменить(ТекстСписокДокументов, "%П3%", ТекстСчетНаОплату);		
	ТекстСписокДокументов = СтрЗаменить(ТекстСписокДокументов, "%П4%", ТекстТоварныйЧек);
	
	Если Не ПустаяСтрока(ТекстСписокДокументов) Тогда
		ТекстСписокДокументов = Лев(ТекстСписокДокументов, СтрДлина(ТекстСписокДокументов)-1);	
	КонецЕсли;
	
	Возврат СтрЗаменить(ТекстПоясненияЛоготипа, "%СписокДокументов%", ТекстСписокДокументов);
	
КонецФункции	

&НаКлиенте
Процедура ЗапроситьРежимИзмененияУчетнойПолитики(ДатаИзменения, Отказ, ОповещениеЗавершения = Неопределено)
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	Оповещение = Новый ОписаниеОповещения("ЗапроситьРежимИзмененияУчетнойПолитикиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстКнопкиДа = НСтр("ru='Изменилась учетная политика';uk='Змінилася облікова політика'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru =  'При редактировании изменилась учетная политика для организации.
					|Если просто исправлены прежние данные (они были ошибочны), нажмите ""Исправлена ошибка"".
					|Если учетная политика организации изменилась с %1, нажмите ""Изменилась учетная политика""'"), 
		Формат(ДатаИзменения, "ДФ='д ММММ гггг ""г""'"));
	
	ЗапроситьРежимИзмененияРегистра(ЭтаФорма, "УчетнаяПолитикаОрганизаций", ТекстВопроса, ТекстКнопкиДа, Отказ, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияРегистра(Форма, ИмяРегистра, ТекстЗапроса, ТекстКнопкиДа, Отказ, ОповещениеЗавершения = Неопределено)
	// Требуется запрашивать пользователя об изменении только если еще не принято решение, что запись - новая
	Если Форма[ИмяРегистра + "НоваяЗапись"] = Истина Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	// Требуется запрашивать пользователя об изменении только если задана дата записи
	Если Не ЗначениеЗаполнено(Форма[ИмяРегистра].Период) Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Требуется запрашивать пользователя об изменении только если была считана прежняя запись
	Если Не ЗначениеЗаполнено(Форма[ИмяРегистра + "Прежняя"].Период) Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИзменилсяПериод = (Форма[ИмяРегистра].Период <> Форма[ИмяРегистра + "Прежняя"].Период);
	ИзменилисьДанные = Ложь;
	Для Каждого Поле Из Форма[ИмяРегистра + "Прежняя"] Цикл
		Если Поле.Ключ = "Период" Тогда
			Продолжить;
		КонецЕсли;
		ИзменилисьДанные = Форма[ИмяРегистра][Поле.Ключ] <> Поле.Значение;
		Если ИзменилисьДанные Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Требуется запрашивать пользователя об изменении - изменили и текущие данные, и дату записи
	Если ИзменилисьДанные И ИзменилсяПериод Тогда
		
		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить(КодВозвратаДиалога.Нет,  	НСтр("ru='Исправлена ошибка';uk='Виправлена помилка'"));
		Кнопки.Добавить(КодВозвратаДиалога.Да, 		ТекстКнопкиДа);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, 	НСтр("ru='Отмена';uk='Відмінити'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма",                Форма);
		ДополнительныеПараметры.Вставить("Отказ",                Отказ);
		ДополнительныеПараметры.Вставить("ИмяРегистра",          ИмяРегистра);
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗапроситьРежимИзмененияРегистраОбработкаОтвета", ЭтотОбъект, ДополнительныеПараметры), 
			ТекстЗапроса, 
			Кнопки, ,
			КодВозвратаДиалога.Отмена);
		
		Возврат;
					
	Иначе
		
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияРегистраОбработкаОтвета(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Форма                = ДополнительныеПараметры.Форма;
	Отказ                = ДополнительныеПараметры.Отказ;
	ИмяРегистра          = ДополнительныеПараметры.ИмяРегистра;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;	
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
		Отказ = Истина;
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Форма[ИмяРегистра + "НоваяЗапись"] = Истина;
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияУчетнойПолитикиЗавершение(Отказ, ДополнительныеПараметры) Экспорт 
	
	Если НЕ Отказ Тогда
		НастройкиУчетнойПолитикиИНалоговВведены = Истина;
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ



//-- НЕ УТ



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
