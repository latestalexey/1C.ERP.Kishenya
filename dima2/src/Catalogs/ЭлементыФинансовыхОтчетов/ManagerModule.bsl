
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура устанавливает текст ячейки таблицы настроек
//
// Параметры
//  Форма  - УправляемаяФорма - форма, где отображена настройка ячеек
//  Адрес  - Строка - Адрес структуры настроек
//
Процедура УстановитьТекстЯчейки(Форма, Адрес) Экспорт
	Перем ДопРежимФормы;
	
	УстановитьВспомогательныйТекст = Ложь;
	Если Форма.Параметры.Свойство("ПроверятьВидТаблицы") Тогда
		ВидТаблицы = Неопределено;
		Форма.Параметры.Свойство("ВидТаблицы", ВидТаблицы);
		Если ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
			ИЛИ ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
			УстановитьВспомогательныйТекст = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ФинОтчеты = ФинансоваяОтчетностьВызовСервера;
	ТекущаяОбласть = Форма.ПредставлениеОтчета.Область(Адрес);
	
	Если Не УстановитьВспомогательныйТекст Тогда
		Расшифровка = ТекущаяОбласть.Расшифровка;
	КонецЕсли;

	Если УстановитьВспомогательныйТекст Тогда
		
		ТекущаяОбласть.Текст = НСтр("ru='<значение показателя отчета>';uk='<значення показника звіту>'");
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Расшифровка.ЭлементОтчета)
		И НЕ ЗначениеЗаполнено(Расшифровка.ВидЭлемента) Тогда
		
		ТекущаяОбласть.Текст = НСтр("ru='<выберите тип ячейки>';uk='<виберіть тип комірки>'");
		
	Иначе
		
		ТекущаяОбласть.Текст = Строка(Расшифровка.ВидЭлемента);
		
		Если Расшифровка.ВидЭлемента = ВидЭлемента("ПоказательБюджетов")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("ВсеПоказателиБюджетов") Тогда
			
			Если Расшифровка.ВидЭлемента <> ВидЭлемента("ВсеПоказателиБюджетов") Тогда
				ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + " """ + 
				ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ПоказательБюджетов") +
				"""";
			КонецЕсли;
			
			Показатель = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ВыводимыеПоказатели");
			ТипПоказателя = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ТипЗначенияПоказателя");
			ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + " (" + Показатель + ", " + ТипПоказателя + ")";
			
			ПериодСмещения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ПериодСмещения");
			ЕстьНастройки = ФинансоваяОтчетностьВызовСервера.ЗначениеРеквизитаОбъекта(Расшифровка.ЭлементОтчета, "ЕстьНастройки");
			Если ЕстьНастройки = Истина
				ИЛИ ЗначениеЗаполнено(ПериодСмещения) Тогда
				ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС + НСтр("ru='<установлены настройки>';uk='<встановлені настройки>'");
			КонецЕсли;
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("СтатьяБюджетов")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("ВсеСтатьиБюджетов") Тогда
			
			Если Расшифровка.ВидЭлемента <> ВидЭлемента("ВсеСтатьиБюджетов") Тогда
				ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + " """ + 
				ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "СтатьяБюджетов") + 
				"""";
			КонецЕсли;
			
			Показатель = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ВыводимыеПоказатели");
			ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + " (" + Показатель + ")";
			
			Если Форма.ИспользоватьДляВводаПлана Тогда
				ФормулаАвтозаполнения = ФинОтчеты.ЗначениеДополнительногоРеквизита(
																				Расшифровка.ЭлементОтчета, "Формула");
				Если ЗначениеЗаполнено(ФормулаАвтозаполнения) Тогда
					ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС + НСтр("ru='<настроено автозаполнение>';uk='<настроєне автозаповнення>'");
				КонецЕсли;
			Иначе
				ПериодСмещения = ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ПериодСмещения");
				ЕстьНастройки = ФинОтчеты.ЗначениеРеквизитаОбъекта(Расшифровка.ЭлементОтчета, "ЕстьНастройки");
				Если ЕстьНастройки = Истина
					ИЛИ ЗначениеЗаполнено(ПериодСмещения) Тогда
					ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС + НСтр("ru='<установлены настройки>';uk='<встановлені настройки>'");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("НефинансовыйПоказатель") Тогда
			
			ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + " """ + 
				ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "НефинансовыйПоказатель") + 
				"""";
			
			ПериодСмещения = ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ПериодСмещения");
			ЕстьНастройки = ФинОтчеты.ЗначениеРеквизитаОбъекта(Расшифровка.ЭлементОтчета, "ЕстьНастройки");
			Если ЕстьНастройки = Истина
				ИЛИ ЗначениеЗаполнено(ПериодСмещения) Тогда
				ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС + НСтр("ru='<установлены настройки>';uk='<встановлені настройки>'");
			КонецЕсли;
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("ФормулаПоГруппе") Тогда
			
			ВидФормулы = ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "ФормулаПоГруппе");
			ТекущаяОбласть.Текст = НСтр("ru='Формула по группе (%1)';uk='Формула по групі (%1)'");
			ТекущаяОбласть.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекущаяОбласть.Текст, ВидФормулы);
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("Группа")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("Измерение")
			Тогда
			
			ТекущаяОбласть.Текст = "";
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
			
			ТекущаяОбласть.Текст = "Итог";
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("РедактируемоеЗначение") Тогда
			
			ТекущаяОбласть.Текст = ПолучитьИзВременногоХранилища(Расшифровка.ЭлементОтчета).НаименованиеДляПечати;
			
		ИначеЕсли Расшифровка.ВидЭлемента = ВидЭлемента("МонетарныйПоказатель")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("НемонетарныйПоказатель")
			ИЛИ Расшифровка.ВидЭлемента = ВидЭлемента("ПроизводныйПоказатель") Тогда
			
			ТекущаяОбласть.Текст = ФинОтчеты.ЗначениеРеквизитаОбъекта(Расшифровка.ЭлементОтчета, "НаименованиеДляПечати");
			
		Иначе
			
			ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + Символы.ПС + 
				ФинОтчеты.ЗначениеДополнительногоРеквизита(Расшифровка.ЭлементОтчета, "Формула")
				
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Функция выводит настройку сложной таблицы
//
// Параметры
//  Форма  - УправляемаяФорма - форма, где располагается настройка ячеек
//  ДеревоТекущейТаблицы  - ДеревоЗначений - дерево элементов, отображаемое в таблице настроек
//
// Возвращаемое значение:
//   Структура   - структура размеров
//
Функция ВывестиТаблицуНастройкиСложнойТаблицы(Форма, ДеревоТекущейТаблицы) Экспорт
	
	ГлубинаОбъединения = БюджетнаяОтчетностьРасчетКэшаСервер.РассчитатьГлубинуУровней(ДеревоТекущейТаблицы);
	
	Если Форма.ЭтоПростаяТаблица Тогда
		ПерваяСтрока = 2;
	Иначе
		ПерваяСтрока = 4;
	КонецЕсли;
	
	Форма.ПерваяСтрока = ПерваяСтрока;
	Форма.ПредставлениеОтчета.Область(,1,,1).ШиринаКолонки = 3;
	
	ДеревоКолонокТаблицы = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(ДеревоТекущейТаблицы, "ВидЭлемента", ВидЭлемента("Колонки"));
	ВысотаШапки = БюджетнаяОтчетностьВыводСервер.ГлубинаДерева(ДеревоКолонокТаблицы.Строки);
	ШиринаШапки = ВывестиДеревоВПоказатели(Форма, ПерваяСтрока, ДеревоКолонокТаблицы.Строки, 0, ВысотаШапки, 2 + ГлубинаОбъединения);
	
	мШиринаМакета = ШиринаШапки;
	мВысотаШапки = ВысотаШапки;
	
	ОбластьШапка = Форма.ПредставлениеОтчета.Область(ПерваяСтрока, 2, ПерваяСтрока + ВысотаШапки, 2 + ГлубинаОбъединения - 1);
	ОбластьШапка.Объединить();
	ОбластьШапка.ШиринаКолонки = 30;
	ОбластьШапка.Текст = "";
	Оформить(ОбластьШапка, "ЗаголовокТаблицы");
	
	Область = Форма.ПредставлениеОтчета.Область(ПерваяСтрока, 2, ПерваяСтрока + ВысотаШапки, 2 + ГлубинаОбъединения -1 + ШиринаШапки);
	Оформить(Область, "Шапка");
	
	ЭлементыТаблицы = ДанныеФормыВЗначение(Форма.ЭлементыТаблицы, Тип("ТаблицаЗначений"));
	ЭлементыТаблицы.Индексы.Добавить("Строка, Колонка");
	
	ВсегоСтрок = 0;
	ДеревоСтрокТаблицы = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(ДеревоТекущейТаблицы, "ВидЭлемента", ВидЭлемента("Строки"));
	ВывестиДеревоВСтроки(
							Форма, ЭлементыТаблицы,
							ДеревоСтрокТаблицы.Строки, 		ПерваяСтрока + ВысотаШапки, 
							ДеревоКолонокТаблицы.Строки, 	ВсегоСтрок, ГлубинаОбъединения
						);
	
	мВысотаМакета = ВысотаШапки + ВсегоСтрок;
	
	//обведем всю таблицу
	Область = Форма.ПредставлениеОтчета.Область(ПерваяСтрока, 2, 
										ПерваяСтрока + ВысотаШапки + ВсегоСтрок, 2 + ГлубинаОбъединения - 1 + ШиринаШапки);
	Оформить(Область, "Шапка");
	
	Возврат Новый Структура("мШиринаМакета, мВысотаМакета, мВысотаШапки", мШиринаМакета, мВысотаМакета, мВысотаШапки);
	
КонецФункции

// Вызывается из обработчика события создания формы на сервере
//
// Параметры
//  Форма  - УправляемаяФорма - создаваемая форма
//
// Возвращаемое значение:
//   Структура   - данные объекта
//
Функция ФормаПриСозданииНаСервере(Форма) Экспорт
	Перем ДанныеОбъекты;
	
	Форма.АдресЭлементаВХранилище = Форма.Параметры.АдресЭлементаВХранилище;
	Записывать = НЕ ЗначениеЗаполнено(Форма.АдресЭлементаВХранилище);
	Форма.Элементы.ФормаЗаписать.Видимость 					= Записывать;
	Форма.Элементы.ФормаПеречитать.Видимость 				= Записывать;
	Если Форма.Элементы.Найти("ФормаСкопировать") <> Неопределено Тогда
		Форма.Элементы.ФормаСкопировать.Видимость 				= Записывать;
	КонецЕсли;
	Если Форма.Элементы.Найти("ФормаУстановитьПометкуУдаления") <> Неопределено Тогда
		Форма.Элементы.ФормаУстановитьПометкуУдаления.Видимость = Записывать;
	КонецЕсли;
	
	Форма.Элементы.ФормаЗаписатьИЗакрыть.Видимость 			= Записывать;
	Форма.Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию 	= Записывать;
	Форма.Элементы.ФормаЗавершитьРедактирование.Видимость 			= НЕ Записывать;
	Форма.Элементы.ФормаЗавершитьРедактирование.КнопкаПоУмолчанию 	= НЕ Записывать;
	Форма.Элементы.ФормаЗавершитьРедактирование.Доступность 		= НЕ Форма.ТолькоПросмотр;
	Если Не Записывать Тогда
		Форма.Элементы.ФормаЗаписатьИЗакрыть.Заголовок = НСтр("ru='Завершить редактирование';uk='Завершити редагування'");
	КонецЕсли;
	
	Если Не Записывать Тогда
		
		ДанныеОбъекта = ПолучитьИзВременногоХранилища(Форма.АдресЭлементаВХранилище);
		ТаблицыЭлемента = "ОперандыФормулы, РеквизитыВидаЭлемента, ЭлементыТаблицы, ДополнительныеПоля,
							|ЭлементыОформления, ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО, ИсточникиЗначений";
		ЗаполнитьЗначенияСвойств(Форма.Объект, ДанныеОбъекта,,ТаблицыЭлемента);
		СтруктураТаблиц = Новый Структура(ТаблицыЭлемента);
		
		Для Каждого КлючИЗначение из СтруктураТаблиц Цикл
			
			Если КлючИЗначение.Ключ = "ОформляемыеСтроки"
				ИЛИ КлючИЗначение.Ключ = "ОформляемыеКолонки" Тогда
				Форма.Объект[КлючИЗначение.Ключ].Очистить();
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ДанныеОбъекта[КлючИЗначение.Ключ]) = Тип("ТаблицаЗначений") Тогда
				Форма.Объект[КлючИЗначение.Ключ].Загрузить(ДанныеОбъекта[КлючИЗначение.Ключ]);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ДанныеОбъекта = Форма.РеквизитФормыВЗначение("Объект");
		
	КонецЕсли;
	
	Для Каждого ДополнительныйРеквизит из Форма.Объект.РеквизитыВидаЭлемента Цикл
		Форма[ДополнительныйРеквизит.Реквизит.ИмяПредопределенныхДанных] = ДополнительныйРеквизит.Значение;
	КонецЦикла;
	
	Реквизиты = Форма.ПолучитьРеквизиты();
	ЕстьКомпоновщикОтбора = Ложь;
	Для Каждого Реквизит из Реквизиты Цикл
		Если Реквизит.Имя = "Компоновщик" Тогда
			ЕстьКомпоновщикОтбора = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьКомпоновщикОтбора Тогда
		УстановитьНастройкиОтбора(Форма, Форма.Компоновщик, ДанныеОбъекта.ВидЭлемента, ДанныеОбъекта.ДополнительныйОтбор);
	КонецЕсли;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Вызывается перед записью объекта в форме
//
// Параметры
//  Форма  - УправляемаяФорма - форма, в которой происходит запись
//  Объект  - СправочникОбъект.ЭлементыФинансовыхОтчетов - записываемый объект
//  Отказ  - Булево - признак программной обработки
//
Процедура ФормаПередЗаписьюНаСервере(Форма, Объект, Отказ, ДополнительныйРежим = Неопределено) Экспорт
	
	ДополнительныеРеквизиты = ФинансоваяОтчетностьВызовСервера.ПараметрыИспользованияФормы(Объект.ВидЭлемента, Объект, ДополнительныйРежим).Реквизиты;
	Объект.РеквизитыВидаЭлемента.Очистить();
	
	Для Каждого Реквизит из ДополнительныеРеквизиты Цикл
		ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
													Объект, Реквизит.Ключ, Форма[Реквизит.Ключ])
	КонецЦикла;
	
	Объект.ЕстьНастройки = Ложь;
	Форма.Объект.ЕстьНастройки = Ложь;
	Для Каждого Реквизит из Форма.ПолучитьРеквизиты() Цикл
		Если Реквизит.Имя = "Компоновщик" Тогда
			
			Настройки = Форма.Компоновщик.ПолучитьНастройки();
			Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
				Если ЭлементОтбора.Использование Тогда
					Объект.ЕстьНастройки = Истина;
					Форма.Объект.ЕстьНастройки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Объект.ДополнительныйОтбор = Новый ХранилищеЗначения(Настройки);
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Форма.АдресЭлементаВХранилище) Тогда
		Отказ = Истина;
		ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(Объект, Форма.АдресЭлементаВХранилище);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает настройки поле отбора в форме
//
// Параметры
//  Реквизиты - Массив - массив реквизитов формы
//  КомпоновщикПриемник - КомпоновщикНастроекКомпоновкиДанных - поле компоновщика формы в которое устанавливается отбор
//  ВидЭлемента  - Перечисление.ВидыЭлементовФинансовогоОтчета - вид элемента финансового отчета
//  ДополнительныйОтбор  - ХранилищеЗначения - сохраненные настройки отбора
//
Процедура УстановитьНастройкиОтбора(Реквизиты, КомпоновщикПриемник = Неопределено, ВидЭлемента, ДополнительныйОтбор) Экспорт
	
	#Область ОпределениеДоступныхПолей
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		ПоляОтбора = Новый Структура();
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
			Выборка = ПолучитьВыборкуАналитикЭлемента(Реквизиты.СтатьяБюджетов);
			
		ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			Выборка = ПолучитьВыборкуАналитикЭлемента(Реквизиты.ПоказательБюджетов);
			
		Иначе
			Выборка = ПолучитьВыборкуАналитикЭлемента(Реквизиты.НефинансовыйПоказатель);
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			Ключ = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Выборка.Ссылка);
			ПоляОтбора.Вставить(Ключ, Выборка.Ссылка)
		КонецЦикла;
		
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		
		ПоляОтбора = Новый Структура();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АналитикиСтатейБюджетов.Ссылка,
		|	АналитикиСтатейБюджетов.ИмяПредопределенныхДанных
		|ИЗ
		|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов
		|ГДЕ
		|	НЕ АналитикиСтатейБюджетов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	АналитикиСтатейБюджетов.Наименование";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Ключ = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Выборка.Ссылка);
			ПоляОтбора.Вставить(Ключ, Выборка.Ссылка)
		КонецЦикла;
		
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
		И Реквизиты.ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистраБухгалтерии Тогда
		ПоляОтбора = Новый Структура(Реквизиты.ИмяИзмерения);
		СхемаНастройки = СхемаОтбораПоказателя(ПоляОтбора);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
		И Реквизиты.ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Субконто Тогда
		ПоляОтбора = Новый Структура("Субконто1", Реквизиты.ВидСубконто);
		СхемаНастройки = СхемаОтбораПоказателя(ПоляОтбора);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель Тогда
		ПоляОтбора = Новый Структура("Счет", Реквизиты.СчетПланаСчетов);
		СхемаНастройки = СхемаОтбораПоказателя(ПоляОтбора, Реквизиты.ТипИтога);
	Иначе
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ДополнениеОтборов
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		
		Если Реквизиты.ИспользоватьФильтрПоОрганизации Тогда
			ПоляОтбора.Вставить("Организация");
		КонецЕсли;
	
		Если Реквизиты.ИспользоватьФильтрПоПодразделению Тогда
			ПоляОтбора.Вставить("Подразделение");
		КонецЕсли;
		
		Если Реквизиты.ИспользоватьФильтрПоСценарию Тогда
			ПоляОтбора.Вставить("Сценарий");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		РеквизитыНФП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.НефинансовыйПоказатель, "ПоОрганизациям, ПоСценариям, ПоПодразделениям");
		Если Реквизиты.ИспользоватьФильтрПоОрганизации
			И РеквизитыНФП.ПоОрганизациям Тогда
			ПоляОтбора.Вставить("Организация");
		КонецЕсли;
	
		Если Реквизиты.ИспользоватьФильтрПоПодразделению
			И РеквизитыНФП.ПоПодразделениям Тогда
			ПоляОтбора.Вставить("Подразделение");
		КонецЕсли;
		
		Если Реквизиты.ИспользоватьФильтрПоСценарию
			И РеквизитыНФП.ПоСценариям Тогда
			ПоляОтбора.Вставить("Сценарий");
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если СхемаНастройки = Неопределено Тогда
		СхемаНастройки = СхемаОтбораИзмерения(ПоляОтбора);
	КонецЕсли;
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаНастройки.Схема, Реквизиты.УникальныйИдентификатор);
	Если КомпоновщикПриемник = Неопределено Тогда
		КомпоновщикПриемник = ФинансоваяОтчетностьСервер.КомпоновщикСхемы(СхемаНастройки.Схема);
	КонецЕсли;
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	КомпоновщикПриемник.Инициализировать(ИсточникДоступныхНастроек);
	КомпоновщикПриемник.ЗагрузитьНастройки(СхемаНастройки.Настройки);
	
	Если ДополнительныйОтбор <> Неопределено Тогда
		Если ТипЗнч(ДополнительныйОтбор) = Тип("ХранилищеЗначения") Тогда
			НастройкиПоказателя = ДополнительныйОтбор.Получить();
		Иначе
			НастройкиПоказателя = ДополнительныйОтбор;
		КонецЕсли;
		Если НастройкиПоказателя <> Неопределено Тогда
			КомпоновщикПриемник.ЗагрузитьНастройки(НастройкиПоказателя);
		КонецЕсли;
	КонецЕсли;
	КомпоновщикПриемник.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Если ПоляОтбора.Свойство("Сценарий")
		И ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикПриемник.Настройки.Отбор, "Сценарий") = Неопределено Тогда
		Элемент = ФинансоваяОтчетностьСервер.НовыйОтбор(КомпоновщикПриемник.Настройки.Отбор, "Сценарий");
		Элемент.Использование = Ложь;
	КонецЕсли;
	Если ПоляОтбора.Свойство("Организация")
		И ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикПриемник.Настройки.Отбор, "Организация") = Неопределено Тогда
		Элемент = ФинансоваяОтчетностьСервер.НовыйОтбор(КомпоновщикПриемник.Настройки.Отбор, "Организация");
		Элемент.Использование = Ложь;
	КонецЕсли;
	Если ПоляОтбора.Свойство("Подразделение")
		И ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикПриемник.Настройки.Отбор, "Подразделение") = Неопределено Тогда
		Элемент = ФинансоваяОтчетностьСервер.НовыйОтбор(КомпоновщикПриемник.Настройки.Отбор, "Подразделение");
		Элемент.Использование = Ложь;
	КонецЕсли;
	
	СписокКУдалению = Новый Массив;
	БюджетнаяОтчетностьВыводСервер.ПолучитьНастраиваемыеЭлементыОтбора(КомпоновщикПриемник.Настройки.Отбор, СписокКУдалению, "");
	Для Каждого ЭлементКУдалению из СписокКУдалению Цикл
		КомпоновщикПриемник.Настройки.Отбор.Элементы.Удалить(ЭлементКУдалению);
	КонецЦикла;
	
	#Область УдалениеНеиспользуемыхЭлементов
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		Если НЕ Реквизиты.ИспользоватьФильтрПоОрганизации Тогда
			Отбор = КомпоновщикПриемник.Настройки.Отбор;
			Элемент = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Отбор, "Организация");
			Если Элемент <> Неопределено Тогда
				Отбор.Элементы.Удалить(Элемент);
			КонецЕсли;
		КонецЕсли;
	
		Если НЕ Реквизиты.ИспользоватьФильтрПоПодразделению Тогда
			Отбор = КомпоновщикПриемник.Настройки.Отбор;
			Элемент = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Отбор, "Подразделение");
			Если Элемент <> Неопределено Тогда
				Отбор.Элементы.Удалить(Элемент);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Реквизиты.ИспользоватьФильтрПоСценарию Тогда
			Отбор = КомпоновщикПриемник.Настройки.Отбор;
			Элемент = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Отбор, "Сценарий");
			Если Элемент <> Неопределено Тогда
				Отбор.Элементы.Удалить(Элемент);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	КомпоновщикПриемник.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

// Процедура сохраняет настроенную структуру вида отчета
//
// Параметры
//  ВидОтчета  - СправочникСсылка.ВидыФинансовыхОтчетов,СправочникСсылка.ВидыБюджетов - ссылка на элемент справочника, структуру которого сохраняем
//  ЭлементыВидаОтчета  - ДеревоЗначений - дерево элементов вида отчета или вида бюджета
//  ПометкаУдаления  - Булево - признак пометки удаления
//
Процедура ЗаписатьСтруктуруВидаОтчета(ВидОтчета, ЭлементыВидаОтчета, ПометкаУдаления) Экспорт
	
	ИспользуемыеЭлементыВидаОтчета = Новый СписокЗначений;
	ОбойтиЗаписатьСтруктуруВидаОтчета(ВидОтчета, ЭлементыВидаОтчета, ПометкаУдаления, ИспользуемыеЭлементыВидаОтчета);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлементыФинансовыхОтчетов.Ссылка
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
	|ГДЕ
	|	ЭлементыФинансовыхОтчетов.Владелец = &Владелец
	|	И НЕ ЭлементыФинансовыхОтчетов.Ссылка В (&Ссылка)";

	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	Запрос.УстановитьПараметр("Ссылка", ИспользуемыеЭлементыВидаОтчета);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	УстановитьПривилегированныйРежим(Истина);
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Объект <> Неопределено Тогда
			Попытка
				Объект.Удалить();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//++ НЕ УТКА
#Область МеждународнаяОтчетность

// Формирует и настравиает схему компоновки данных для получения значений показателя финансовой отчетности
// Параметры
//  Показатель - СтрокаДереваЗначений,Структура - описание показателя для которого необходимо получить схему расчета
//  Измерения - СписокЗначений - список измерения для текущего положения показателя в дереве отчета, если есть
//  Субконто - Структура - описание вида субконто для текущего положения показателя в дереве отчета, если есть
//  Ресурс - Строка - имя ресурса бухгалтерии из которого получать значение показателя
//
// Возвращаемое значение:
//   Структура   - Поля структуры:
//                 Схема - СхемаКомпоновкиДанных - схема получения значений показателя отчета
//                 Настройки - НастройкиКомпоновкиДанных - настройки схемы получения значений показателя отчета
//
Функция СхемаПоказателя(Показатель, Измерения = Неопределено, Субконто = Неопределено, Ресурс = "Сумма") Экспорт

	Если Показатель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель Тогда
		СхемаПоказателя = СхемаМонетарногоПоказателя(Показатель, Измерения, Субконто, Ресурс);
	ИначеЕсли Показатель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
		СхемаПоказателя = СхемаПроизводногоПоказателя(Показатель, Измерения);
	Иначе
		СхемаПоказателя = СхемаНемонетарногоПоказателя(Показатель, Измерения);
	КонецЕсли;
	Возврат СхемаПоказателя;

КонецФункции

Функция ИнтервалыОтчета(ПериодОтчета) Экспорт
	
	НачалоПериода = НачалоМесяца(ПериодОтчета.НачалоПериода);
	КонецПериода = КонецМесяца(ПериодОтчета.КонецПериода);
	Периодичность = Новый Массив;
	ИерархияПериодов = Новый Массив;
	ИнтервалыОтчета = НоваяТаблицаИнтервалов(ИерархияПериодов);
	
	Если ПериодОтчета.Периодичность.Количество() Тогда
		Периодичность = Новый Массив;
		Для Каждого Период Из ПериодОтчета.Периодичность Цикл
			Периодичность.Добавить(Период.Периодичность);
		КонецЦикла;
	Иначе
		НовыйИнтервал = ИнтервалыОтчета.Добавить();
		НовыйИнтервал.ДатаОкончания = КонецПериода;
		НовыйИнтервал.ДатаНачала = НачалоПериода;
		Возврат ИнтервалыОтчета;
	КонецЕсли;
	
	КвантПериода = Перечисления.Периодичность.МинимальнаяПериодичность(Периодичность);
	
	ДатаНачала = НачалоПериода;
	ДатаОкончания = НачалоПериода;
	Пока ДатаОкончания < КонецПериода Цикл
		
		ДатаОкончания = ДатаКонцаНовогоИнтервала(ДатаОкончания, КвантПериода, КонецПериода);
		НовыйИнтервал = ИнтервалыОтчета.Добавить(); 
		НовыйИнтервал.ДатаНачала = ДатаНачала;
		НовыйИнтервал.ДатаОкончания = ДатаОкончания;
		Для Каждого Период Из ИерархияПериодов Цикл
			Если ЗначениеЗаполнено(Период) Тогда
				Если Период = Перечисления.Периодичность.Год Тогда
					ПериодСтрокой = "Год";
				ИначеЕсли Период = Перечисления.Периодичность.Полугодие Тогда
					ПериодСтрокой = "Полугодие";
				ИначеЕсли Период = Перечисления.Периодичность.Квартал Тогда
					ПериодСтрокой = "Квартал";
				ИначеЕсли Период = Перечисления.Периодичность.Месяц Тогда
					ПериодСтрокой = "Месяц";
				КонецЕсли;
				НовыйИнтервал["Период"+ПериодСтрокой] = ДатаКонцаПериода(НовыйИнтервал.ДатаНачала, Период, КонецПериода);
			КонецЕсли;
		КонецЦикла;
		ДатаОкончания = ДатаОкончания + 1;
		ДатаНачала = ДатаОкончания;
		
	КонецЦикла;
	
	Возврат ИнтервалыОтчета;
	
КонецФункции

Функция КоличествоСсылокНаЭлемент(ЭлементОтчета) Экспорт
	
	КоличествоСсылок = 0;
	Если ЗначениеЗаполнено(ЭлементОтчета) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлементыФинОтчетов.Владелец КАК ВидОтчета,
		|	ЭлементыФинОтчетов.Ссылка КАК СвязанныйЭлемент
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинОтчетов
		|ГДЕ
		|	ЭлементыФинОтчетов.СвязанныйЭлемент = &ЭлементОтчета";
		
		Запрос.УстановитьПараметр("ЭлементОтчета", ЭлементОтчета);
		Выборка = Запрос.Выполнить().Выбрать();
		КоличествоСсылок = Выборка.Количество();
		
	КонецЕсли;
	Возврат КоличествоСсылок;
	
КонецФункции

#КонецОбласти
//-- НЕ УТКА
#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Перем ДополнительныйРежим;
	
	Если ВидФормы = "ФормаСписка" Тогда
		ВызватьИсключение НСтр("ru='Содержимое служебного справочника ""Элементы финансовых отчетов"" 
                                    |редактируется через формы элементов справочников владельцев 
                                    |""Виды бюджетов"" и ""Виды финансовых отчетов""'
                                    |;uk='Вміст службового довідника ""Елементи фінансових звітів"" 
                                    |редагується через форми елементів довідників власників 
                                    |""Види бюджетів"" і ""Види фінансових звітів""'");
		Возврат;
	КонецЕсли;
	
	Если ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ДополнительныйРежимФормы", ДополнительныйРежим);
	Если Параметры.Свойство("ВидЭлемента") Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = ФинансоваяОтчетностьВызовСервера.ПараметрыИспользованияФормы(
													Параметры.ВидЭлемента, 
													Параметры.АдресЭлементаВХранилище,
													ДополнительныйРежим).ИмяФормы;
		
	ИначеЕсли Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = ФинансоваяОтчетностьВызовСервера.ПараметрыИспользованияФормы(
													Параметры.Ключ.ВидЭлемента, 
													Параметры.Ключ,
													ДополнительныйРежим).ИмяФормы;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция СхемаОтбораИзмерения(СтруктураИменИзмерений)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаКД = ФинОтчеты.НоваяСхема();
	НаборДанных = ФинОтчеты.НовыйНабор(СхемаКД);
	
	ИмяИзмерения = "";
	Для Каждого КлючИЗначение из СтруктураИменИзмерений Цикл
		
		ИмяИзмерения = ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", ",
		|");
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов") Тогда
			
			ИмяИзмерения = ИмяИзмерения + "(" + 
				БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьТекстПоляВидаАналитики(КлючИЗначение.Ключ) + ").*
			|	КАК " + КлючИЗначение.Ключ;
			Параметр = СхемаКД.Параметры.Добавить();
			Параметр.Имя = КлючИЗначение.Ключ;
			Параметр.Значение = КлючИЗначение.Значение;
			Параметр.ВключатьВДоступныеПоля = Ложь;
			Параметр.ОграничениеИспользования = Истина;
			
			ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных, КлючИЗначение.Ключ,,КлючИЗначение.Значение.Наименование);
			ПолеНабора.ТипЗначения = КлючИЗначение.Значение.ТипЗначения;
			
		Иначе
			
			Заголовок = Метаданные.РегистрыНакопления.ОборотыБюджетов.Измерения[КлючИЗначение.Ключ].Синоним;
			ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных, КлючИЗначение.Ключ,,Заголовок);
			ИмяИзмерения = ИмяИзмерения + КлючИЗначение.Ключ + ".* КАК " + КлючИЗначение.Ключ;
			
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ОборотыБюджетовОбороты.КоличествоОборот,
	               |	ОборотыБюджетовОбороты.СуммаУпрОборот,
	               |	ОборотыБюджетовОбороты.СуммаРеглОборот
	               |ИЗ
	               |	РегистрНакопления.ОборотыБюджетов.Обороты(, , , %1) КАК ОборотыБюджетовОбороты";
	
	Если СтруктураИменИзмерений.Количество() Тогда
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "{" + ИмяИзмерения + "}");
	Иначе
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, "");
	КонецЕсли;
	
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	НаборДанных.Запрос = ТекстЗапроса;
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(СхемаКД);
	СхемаПоказателя = Новый Структура("Схема, Настройки",СхемаКД, Компоновщик.ПолучитьНастройки());
	Возврат СхемаПоказателя;
	
КонецФункции

Функция СхемаОтбораПоказателя(СтруктураИменИзмерений, ТипИтога = Неопределено)
	
	Если ТипИтога = Неопределено Тогда
		ТипИтога = ПредопределенноеЗначение("Перечисление.ТипыИтогов.Сальдо");
	КонецЕсли;
	ЭтоОборот = СтрНайти(Строка(ТипИтога), "Сальдо") = 0;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаКД = ФинОтчеты.НоваяСхема();
	НаборДанных = ФинОтчеты.НовыйНабор(СхемаКД);
	
	ИмяИзмерения = "";
	ЭтоХозрасчетный = Ложь;
	Для Каждого КлючИЗначение из СтруктураИменИзмерений Цикл
		
		ИмяИзмерения = ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", "," + Символы.ПС);
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ПланСчетовСсылка.Хозрасчетный")
			//++ НЕ УТКА
			ИЛИ ТипЗнч(КлючИЗначение.Значение) = Тип("ПланСчетовСсылка.Международный")
			//-- НЕ УТКА
			Тогда
			
			СчетПланаСчетов = КлючИЗначение.Значение;
			
			ИмяИзмерения = ИмяИзмерения + "(Валюта).* КАК Валюта";
			Сч = 1;
			Для Каждого СубконтоСчета Из СчетПланаСчетов.ВидыСубконто Цикл
				ИмяСубконто = "Субконто" + Строка(Сч);
				ЗаголовокСубконто = СубконтоСчета.ВидСубконто.Наименование;
				ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных,ИмяСубконто,,ЗаголовокСубконто);
				ПолеНабора.ТипЗначения = СубконтоСчета.ВидСубконто.ТипЗначения;
				ИмяИзмерения = ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", "," + Символы.ПС);
				ИмяИзмерения = ИмяИзмерения + "("+ИмяСубконто + ").* КАК " + ИмяСубконто;
				Сч = Сч + 1;
			КонецЦикла;
			
			Если ЭтоОборот Тогда
				ИмяИзмерения = ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", "," + Символы.ПС);
				ИмяИзмерения = ИмяИзмерения + "(ВалютаКор).* КАК ВалютаКор";
				ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных,"ВалютаКор",,НСтр("ru='Кор. валюта';uk='Кор. валюта'"));
				ОтборПоКорСчету = "{(КорСчет).* КАК КорСчет}";
				ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных,"КорСчет",,НСтр("ru='Кор. счет';uk='Кор. рахунок'"));
				Для Сч = 1 По 3 Цикл
					ИмяСубконто = "Субконто" + Строка(Сч);
					ИмяКорСубконто = "Кор" + ИмяСубконто;
					ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных,ИмяКорСубконто,,"Кор. "+ИмяСубконто);
					ИмяИзмерения = ИмяИзмерения + ?(ПустаяСтрока(ИмяИзмерения), "", "," + Символы.ПС);
					ИмяИзмерения = ИмяИзмерения + "("+ИмяКорСубконто + ").* КАК " + ИмяКорСубконто;
				КонецЦикла;
			КонецЕсли;
			
			Если ТипЗнч(СчетПланаСчетов) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
				ЭтоХозрасчетный = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные")
			//++ НЕ УТКА
			ИЛИ ТипЗнч(КлючИЗначение.Значение) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные")
			//-- НЕ УТКА
			Тогда
			
			ОтборПоВидуСубконто = "{(&ВидСубконто)}";
			Параметр = СхемаКД.Параметры.Добавить();
			Параметр.Имя = "ВидСубконто";
			Параметр.Значение = КлючИЗначение.Значение;
			Параметр.ВключатьВДоступныеПоля = Ложь;
			Параметр.ОграничениеИспользования = Истина;
			
			ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных, КлючИЗначение.Ключ,,КлючИЗначение.Значение.Наименование);
			ПолеНабора.ТипЗначения = КлючИЗначение.Значение.ТипЗначения;
			ИмяИзмерения = ИмяИзмерения + "("+КлючИЗначение.Ключ + ").* КАК " + КлючИЗначение.Ключ;
			
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные") Тогда
				ЭтоХозрасчетный = Истина;
			КонецЕсли;
			
		Иначе
			
			Заголовок = Метаданные.РегистрыНакопления.ОборотыБюджетов.Измерения[КлючИЗначение.Ключ].Синоним;
			ПолеНабора = ФинОтчеты.НовоеПолеНабора(НаборДанных, КлючИЗначение.Ключ,,Заголовок);
			ИмяИзмерения = "("+КлючИЗначение.Ключ + ").* КАК " + КлючИЗначение.Ключ;
			
		КонецЕсли;
	КонецЦикла;
	ИмяИзмерения = ?(ПустаяСтрока(ИмяИзмерения),"","{" + ИмяИзмерения + "}");
	
	Если ЭтоОборот Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеРегистра.Субконто1,
		|	ДанныеРегистра.Субконто2,
		|	ДанныеРегистра.Субконто3,
		|	ДанныеРегистра.КорСчет,
		|	ДанныеРегистра.КорСубконто1,
		|	ДанныеРегистра.КорСубконто2,
		|	ДанныеРегистра.КорСубконто3
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(, , , , , "+ИмяИзмерения+", "+ОтборПоКорСчету+", ) КАК ДанныеРегистра";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеРегистра.Субконто1,
		|	ДанныеРегистра.Субконто2,
		|	ДанныеРегистра.Субконто3,
		|	ДанныеРегистра.СуммаОстаток КАК Значение
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(,,"+ОтборПоВидуСубконто+", "+ИмяИзмерения+") КАК ДанныеРегистра";
	КонецЕсли;
	//++ НЕ УТКА
	Если НЕ ЭтоХозрасчетный Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Хозрасчетный","Международный");
	КонецЕсли;
	//-- НЕ УТКА
	
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	НаборДанных.Запрос = ТекстЗапроса;
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(СхемаКД);
	СхемаПоказателя = Новый Структура("Схема, Настройки",СхемаКД, Компоновщик.ПолучитьНастройки());
	Возврат СхемаПоказателя;
	
КонецФункции

Функция ПолучитьВыборкуАналитикЭлемента(Ссылка)
	
	ИмяТаблицы = "";
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.СтатьиБюджетов") Тогда
		ИмяТаблицы = "СтатьиБюджетов";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПоказателиБюджетов") Тогда
		ИмяТаблицы = "ПоказателиБюджетов";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда
		ИмяТаблицы = "НефинансовыеПоказателиБюджетов";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справочник.ВидАналитики1,
	|	Справочник.ВидАналитики2,
	|	Справочник.ВидАналитики3,
	|	Справочник.ВидАналитики4,
	|	Справочник.ВидАналитики5,
	|	Справочник.ВидАналитики6
	|ПОМЕСТИТЬ ТаблицаВидовАналитик
	|ИЗ
	|	Справочник." + ИмяТаблицы + " КАК Справочник
	|ГДЕ
	|	Справочник.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикиСтатейБюджетов.Ссылка,
	|	АналитикиСтатейБюджетов.ИмяПредопределенныхДанных
	|ИЗ
	|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов
	|ГДЕ
	|	АналитикиСтатейБюджетов.Ссылка В
	|			(ВЫБРАТЬ
	|				Справочник.ВидАналитики1
	|			ИЗ
	|				ТаблицаВидовАналитик КАК Справочник
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				Справочник.ВидАналитики2
	|			ИЗ
	|				ТаблицаВидовАналитик КАК Справочник
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				Справочник.ВидАналитики3
	|			ИЗ
	|				ТаблицаВидовАналитик КАК Справочник
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				Справочник.ВидАналитики4
	|			ИЗ
	|				ТаблицаВидовАналитик КАК Справочник
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				Справочник.ВидАналитики5
	|			ИЗ
	|				ТаблицаВидовАналитик КАК Справочник
	|		
	|			ОБЪЕДИНИТЬ ВСЕ
	|		
	|			ВЫБРАТЬ
	|				Справочник.ВидАналитики6
	|			ИЗ
	|				ТаблицаВидовАналитик КАК Справочник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикиСтатейБюджетов.Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ЕстьПериодВРодителях(Знач СтрокаДерева, Периодичность)
	
	Пока СтрокаДерева <> Неопределено
		И СтрокаДерева.ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.Строки
		И СтрокаДерева.ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки Цикл
		
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			
			ТипИзмерения = Неопределено;
			Если ЗначениеЗаполнено(СтрокаДерева.АдресСтруктурыЭлемента) Тогда
				ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаДерева.АдресСтруктурыЭлемента, "ТипИзмерения");
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ЭлементОтчета) Тогда
				ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаДерева.ЭлементОтчета, "ТипИзмерения");
			Иначе
				Если ТипЗнч(СтрокаДерева.СтатьяПоказательТипИзмерения) = Тип("ПеречислениеСсылка.Периодичность") Тогда
					ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				Если ЗначениеЗаполнено(СтрокаДерева.АдресСтруктурыЭлемента) Тогда
					Периодичность = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаДерева.АдресСтруктурыЭлемента, "Периодичность");
				ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ЭлементОтчета) Тогда
					Периодичность = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаДерева.ЭлементОтчета, "Периодичность");
				Иначе
					Периодичность = СтрокаДерева.СтатьяПоказательТипИзмерения
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДерева = СтрокаДерева.Родитель;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьПериодВПодчиненных(Знач СтрокаДерева, Периодичность)
	
	Для Каждого ПодчиненнаяСтрока из СтрокаДерева.Строки Цикл
		
		Если ПодчиненнаяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			
			ТипИзмерения = Неопределено;
			Если ЗначениеЗаполнено(ПодчиненнаяСтрока.АдресСтруктурыЭлемента) Тогда
				ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ПодчиненнаяСтрока.АдресСтруктурыЭлемента, "ТипИзмерения");
			ИначеЕсли ЗначениеЗаполнено(ПодчиненнаяСтрока.ЭлементОтчета) Тогда
				ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ПодчиненнаяСтрока.ЭлементОтчета, "ТипИзмерения");
			Иначе
				Если ТипЗнч(ПодчиненнаяСтрока.СтатьяПоказательТипИзмерения) = Тип("ПеречислениеСсылка.Периодичность") Тогда
					ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				Если ЗначениеЗаполнено(ПодчиненнаяСтрока.АдресСтруктурыЭлемента) Тогда
					Периодичность = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ПодчиненнаяСтрока.АдресСтруктурыЭлемента, "Периодичность");
				ИначеЕсли ЗначениеЗаполнено(ПодчиненнаяСтрока.ЭлементОтчета) Тогда
					Периодичность = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ПодчиненнаяСтрока.ЭлементОтчета, "Периодичность");
				Иначе
					Периодичность = ПодчиненнаяСтрока.СтатьяПоказательТипИзмерения
				КонецЕсли;
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьПериодВПодчиненных(ПодчиненнаяСтрока, Периодичность) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭлементРазвернутПоПериоду(Параметры, ПериодичностьГруппировки = Неопределено) Экспорт
	
	ДеревоЭлементов = ПолучитьИзВременногоХранилища(Параметры.АдресЭлементовОтчета);
	Если ЗначениеЗаполнено(Параметры.АдресТаблицыЭлементов) Тогда
		ТаблицаЭлементов = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыЭлементов)
	Иначе
		ТаблицаЭлементов = Неопределено;
	КонецЕсли;
	
	Колонка = Неопределено; Строка = Неопределено;
	
	Если ТаблицаЭлементов = Неопределено Тогда
		
		СтрокаДерева = ДеревоЭлементов.Строки.Найти(Параметры.АдресРедактируемогоЭлемента, "АдресСтруктурыЭлемента", Истина);
		КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаДерева, 
																Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
		ИсточникПодчиненных = Неопределено;
		Если КорневойЭлемент <> Неопределено Тогда
			ИсточникПодчиненных = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(КорневойЭлемент, 
																		"ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
		КонецЕсли;
		КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаДерева, 
																Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
		Если КорневойЭлемент <> Неопределено Тогда
			ИсточникПодчиненных = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(КорневойЭлемент, 
																		"ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
		КонецЕсли;
		
		ЕстьПериод = ЕстьПериодВРодителях(СтрокаДерева, ПериодичностьГруппировки)
					ИЛИ ЕстьПериодВПодчиненных(СтрокаДерева, ПериодичностьГруппировки)
					ИЛИ ?(ИсточникПодчиненных = Неопределено, Ложь, ЕстьПериодВПодчиненных(ИсточникПодчиненных, ПериодичностьГруппировки));
		
	Иначе
		
		ЯчейкаМатрицы = ТаблицаЭлементов.Найти(Параметры.АдресРедактируемогоЭлемента, "Элемент");
		
		СтрокаДерева = ДеревоЭлементов.Строки.Найти(ЯчейкаМатрицы.Строка, "АдресСтруктурыЭлемента", Истина);
		КолонкаДерева = ДеревоЭлементов.Строки.Найти(ЯчейкаМатрицы.Колонка, "АдресСтруктурыЭлемента", Истина);
		
		ЕстьПериод = ЕстьПериодВРодителях(СтрокаДерева, ПериодичностьГруппировки)
					ИЛИ ЕстьПериодВПодчиненных(СтрокаДерева, ПериодичностьГруппировки)
					ИЛИ ЕстьПериодВРодителях(КолонкаДерева, ПериодичностьГруппировки)
					ИЛИ ЕстьПериодВПодчиненных(КолонкаДерева, ПериодичностьГруппировки);
		
	КонецЕсли;
	
	Возврат ЕстьПериод;
	
КонецФункции

Функция РазобратьИмяОперандаНаСоставляющие(ИмяОперанда) Экспорт
	
	ПозицияРазделителя = СтрНайти(ИмяОперанда, ";");
	Если ПозицияРазделителя Тогда
		Строка = Лев(ИмяОперанда, ПозицияРазделителя - 1);
		Колонка = Сред(ИмяОперанда, ПозицияРазделителя + 1);
		Строка = СокрЛ(Строка);
		Колонка = СокрЛ(Колонка);
	Иначе
		Строка = СокрЛ(ИмяОперанда);
		Колонка = "";
	КонецЕсли;
	
	СтрокаФиксированная = БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(Строка, "$");
	Если СтрокаФиксированная Тогда
		Строка = Сред(Строка, 2);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Колонка) Тогда
		КолонкаФиксированная = СтрокаФиксированная;
	Иначе
		КолонкаФиксированная = БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(Колонка, "$");
		Если КолонкаФиксированная Тогда
			Колонка = Сред(Колонка, 2);
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура("Строка, Колонка, СтрокаФиксированная, КолонкаФиксированная",
								Строка, Колонка, СтрокаФиксированная, КолонкаФиксированная);
	
	Возврат Результат;
	
КонецФункции

#Область ВыводДереваНастройкиЯчеек

Функция ВывестиЯчейки(Форма, Группировка, ЭлементыТаблицы,
						ДеревоСтрок, НомерСтроки, НомерПредыдущейКолонки = 3, Знач Глубина = 0)
	Перем ДопРежимФормы;
						
	Элементов = 0; ЭтоВидОтчета = Ложь;
	Если Форма.Параметры.Свойство("ДополнительныйРежимФормы", ДопРежимФормы) Тогда
		ЭтоВидОтчета = ДопРежимФормы = Перечисления.ДополнительныеРежимыЭлементовОтчетов.ВидОтчета;
	КонецЕсли;
	
	Для Каждого СтрокаПоказателя из ДеревоСтрок Цикл
		
		НомерКолонки = НомерПредыдущейКолонки + Элементов;
		
		ПодчиненныхЭлементов = ВывестиЯчейки(Форма, Группировка, ЭлементыТаблицы,
											СтрокаПоказателя.Строки, НомерСтроки, НомерКолонки, Глубина);
		
		Если ПодчиненныхЭлементов Тогда
			Элементов = Элементов + ПодчиненныхЭлементов;
			Продолжить; // расшифровку установили в рекурсивном вызове
		Иначе
			Элементов = Элементов + 1;
		КонецЕсли;
		
		//установка расшифровки области
		Область = Форма.ПредставлениеОтчета.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
		
		СтруктураРасшифровки = Новый Структура("Строка, Колонка, ВидЭлемента, ЭлементОтчета, ЭтоСвязанный");
		СтруктураРасшифровки.ЭтоСвязанный = Ложь;

		СтруктураРасшифровки.Строка  = Новый Структура("Наименование, ЭлементОтчета", 
										Группировка.НаименованиеДляПечати, Группировка.АдресСтруктурыЭлемента);
		СтруктураРасшифровки.Колонка = Новый Структура("Наименование, ЭлементОтчета",
										СтрокаПоказателя.НаименованиеДляПечати, СтрокаПоказателя.АдресСтруктурыЭлемента);
		
		ЭтоПредопределеннаяФормула = Ложь;
		ДанныеЭлемента = ПолучитьИзВременногоХранилища(СтрокаПоказателя.АдресСтруктурыЭлемента);
		Если ДанныеЭлемента.ВидЭлемента = ВидЭлемента("ФормулаПоГруппе")
			ИЛИ ДанныеЭлемента.ВидЭлемента = ВидЭлемента("Группа")
			ИЛИ ДанныеЭлемента.ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
			ЭлементФормулы = СтрокаПоказателя.АдресСтруктурыЭлемента;
			ЭтоПредопределеннаяФормула = Истина;
		Иначе
			ДанныеЭлемента = ПолучитьИзВременногоХранилища(Группировка.АдресСтруктурыЭлемента);
			Если ДанныеЭлемента.ВидЭлемента = ВидЭлемента("ФормулаПоГруппе")
				ИЛИ ДанныеЭлемента.ВидЭлемента = ВидЭлемента("Группа")
				//ИЛИ (ДанныеЭлемента.ВидЭлемента = ВидЭлемента("Измерение") И ЭтоВидОтчета)
				ИЛИ ДанныеЭлемента.ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
				ЭлементФормулы = Группировка.АдресСтруктурыЭлемента;
				ЭтоПредопределеннаяФормула = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ВыводитьЭлементПоПересечениюСтрокКолонок = Истина;
		ВидТаблицы = Неопределено;
		Если Форма.Параметры.Свойство("ПроверятьВидТаблицы") Тогда
			Форма.Параметры.Свойство("ВидТаблицы", ВидТаблицы);
			Если ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
				ИЛИ ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
				ВыводитьЭлементПоПересечениюСтрокКолонок = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыводитьЭлементПоПересечениюСтрокКолонок Тогда
			
			Если Не ЭтоПредопределеннаяФормула Тогда
				
				СтруктураПоиска = Новый Структура("Строка, Колонка");
				СтруктураПоиска.Строка = Группировка.АдресСтруктурыЭлемента;
				СтруктураПоиска.Колонка = СтрокаПоказателя.АдресСтруктурыЭлемента;
				
				СтрокиЭлемента = ЭлементыТаблицы.НайтиСтроки(СтруктураПоиска);
				Если СтрокиЭлемента.Количество() Тогда
					СтрокаЭлемента = СтрокиЭлемента[0];
					Если ТипЗнч(СтрокаЭлемента.Элемент) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов")
						И ЗначениеЗаполнено(СтрокаЭлемента.Элемент) Тогда
						СтрокаЭлемента.Элемент = ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(
																						СтрокаЭлемента.Элемент, 
																						Форма.ИдентификаторГлавногоХранилища);
					КонецЕсли;
					ДанныеЭлемента = ПолучитьИзВременногоХранилища(СтрокаЭлемента.Элемент);
					СтруктураРасшифровки.ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
					СтруктураРасшифровки.ЭлементОтчета = СтрокаЭлемента.Элемент;
				КонецЕсли;
				
			Иначе
				
				СтруктураРасшифровки.ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
				СтруктураРасшифровки.ЭлементОтчета = ЭлементФормулы;
			
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЭтоВидОтчета И ДанныеЭлемента.ВидЭлемента = ВидЭлемента("Измерение") Тогда
			СтруктураРасшифровки.ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
			СтруктураРасшифровки.ЭлементОтчета = Неопределено;
		КонецЕсли;
		
		Область.Расшифровка = СтруктураРасшифровки;
		УстановитьТекстЯчейки(Форма, Область.Имя);
		Оформить(Область, "Ячейка");
		
	КонецЦикла;
	
	Возврат Элементов;
	
КонецФункции

Функция ВывестиДеревоВПоказатели(Форма, ПерваяСтрока, Строки, Знач Глубина, ГлубинаВсего, Знач НомерПредыдущейКолонки = 3)
	
	Элементов = 0;
	
	Для Каждого СтрокаПоказателя из Строки Цикл
		
		НомерКолонки = НомерПредыдущейКолонки + Элементов;
		
		Выводить = Истина;
		Если СтрокаПоказателя.ВидЭлемента = ВидЭлемента("Группа") Тогда
			Выводить = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
												СтрокаПоказателя.АдресСтруктурыЭлемента, "ВыводитьЗаголовокЭлемента") = Истина;
		КонецЕсли;
		
		НоваяГлубина = Глубина;
		Если Выводить Тогда
		
			НомерСтроки = ПерваяСтрока + Глубина;
			Область = Форма.ПредставлениеОтчета.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			Область.Текст = СтрокаПоказателя.НаименованиеДляПечати;
			Область.Расшифровка = СтрокаПоказателя.АдресСтруктурыЭлемента;
			Область.ШиринаКолонки = 15;
			
			НоваяГлубина = Глубина + 1;
			
		КонецЕсли;
		
		ПодчиненныхЭлементов = ВывестиДеревоВПоказатели(Форма, ПерваяСтрока,
														СтрокаПоказателя.Строки, 
														НоваяГлубина, ГлубинаВсего, НомерКолонки);
		
		Если ПодчиненныхЭлементов Тогда
			Элементов = Элементов + ПодчиненныхЭлементов;
			Область = Форма.ПредставлениеОтчета.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки + ПодчиненныхЭлементов - 1);
		Иначе
			Область = Форма.ПредставлениеОтчета.Область(НомерСтроки, НомерКолонки, ПерваяСтрока + ГлубинаВсего);
			Элементов = Элементов + 1;
		КонецЕсли;
		
		Если Выводить Тогда
			
			Область.Объединить();
			Оформить(Область, "ШапкаЯчейки");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Элементов;
	
КонецФункции

Процедура Оформить(Область, Режим)
	
	ЖирнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ТонкаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	Если Режим = "Строка" Тогда
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.Шрифт = Новый Шрифт(, 10, Ложь, Ложь);
		Область.Обвести(ЖирнаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
	ИначеЕсли Режим = "СтрокаОбъединенная" Тогда
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.Шрифт = Новый Шрифт(, 10, Ложь, Ложь);
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
	ИначеЕсли Режим = "СтрокаИтог" Тогда
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.Шрифт = Новый Шрифт(, 10, Истина, Ложь);
		Область.Обвести(ЖирнаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
	ИначеЕсли Режим = "ШапкаЯчейки" Тогда
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
		Область.Шрифт = Новый Шрифт(, 10, Истина, Ложь);
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.ЦветФона = ЦветаСтиля.ЦветФонаГруппировкиОтчета1;
	ИначеЕсли Режим = "ЗаголовокТаблицы" Тогда
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
		Область.Шрифт = Новый Шрифт(, 10, Истина, Ложь);
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		Область.ЦветФона = ЦветаСтиля.ЦветФонаГруппировкиОтчета1;
	ИначеЕсли Режим = "Шапка" Тогда
		Область.Обвести(ЖирнаяЛиния, ЖирнаяЛиния, ЖирнаяЛиния, ЖирнаяЛиния);
	ИначеЕсли Режим = "Ячейка" Тогда
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
		Область.Шрифт = Новый Шрифт(, 8);
	ИначеЕсли Режим = "ЯчейкаИтог" Тогда
		Область.Обвести(ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния, ТонкаяЛиния);
		Область.Шрифт = Новый Шрифт(, 10, Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ПоследующаяСтрокаОбъединенаСТекущей(СтрокаПоказателя)
	
	Если СтрокаПоказателя.Строки.Количество() = 1 И
		СтрокаПоказателя.Строки[0].ВыводитьВместеСРодительским Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВывестиДеревоВСтроки(Форма, ЭлементыТаблицы, ДеревоСтрок, 
							ПерваяСтрока, ДеревоКолонок, ВсегоСтрок, 
							ГлубинаОбъединения, Знач Глубина = 0, Знач НомерКолонки = 0)
	
	Начало = ПерваяСтрока + ВсегоСтрок + 1;
	
	БылиЭлементыДляВывода = Ложь;
	Для Каждого СтрокаПоказателя из ДеревоСтрок Цикл
		
		Выводить = Истина;
		Если СтрокаПоказателя.ВидЭлемента = ВидЭлемента("Группа") Тогда
			Выводить = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
												СтрокаПоказателя.АдресСтруктурыЭлемента, "ВыводитьЗаголовокЭлемента");
		КонецЕсли;
		
		НоваяГлубина = Глубина;
		Если Выводить Тогда
			БылиЭлементыДляВывода = Истина;
			
			Если СтрокаПоказателя.ВыводитьВместеСРодительским = Истина Тогда
				НомерКолонкиТекущий = НомерКолонки + 1;
				РежимОформления = "СтрокаОбъединенная";
			Иначе
				НомерКолонкиТекущий = 0;
				ВсегоСтрок = ВсегоСтрок + 1;
				РежимОформления = "Строка";
			КонецЕсли;
			НомерСтроки 	= ПерваяСтрока + ВсегоСтрок;
			
			ПоследующаяСтрокаОбъединена = ПоследующаяСтрокаОбъединенаСТекущей(СтрокаПоказателя);
			Если ПоследующаяСтрокаОбъединена Тогда
				КонецКолонки = 2 + НомерКолонкиТекущий;
			Иначе
				КонецКолонки = 2 + ГлубинаОбъединения - 1;
			КонецЕсли;
			
			Область 		= Форма.ПредставлениеОтчета.Область(НомерСтроки, 2 + НомерКолонкиТекущий, НомерСтроки, КонецКолонки);
			Область.Объединить();
			Область.Текст 	= СтрокаПоказателя.НаименованиеДляПечати;
			Область.Расшифровка = СтрокаПоказателя.АдресСтруктурыЭлемента;
			
			Если СтрокаПоказателя.ВыводитьВместеСРодительским = Ложь Тогда
				Область.Отступ 	= Глубина * 2;
			КонецЕсли;
			
			Оформить(Область, РежимОформления);
			
			Если Не ПоследующаяСтрокаОбъединена Тогда
				ВывестиЯчейки(Форма, СтрокаПоказателя, ЭлементыТаблицы, ДеревоКолонок, НомерСтроки, 3 + ГлубинаОбъединения - 1);
			КонецЕсли;
			
			НоваяГлубина = Глубина + 1;
		КонецЕсли;
		
		ВывестиДеревоВСтроки(Форма, ЭлементыТаблицы, СтрокаПоказателя.Строки, 
								ПерваяСтрока, ДеревоКолонок, ВсегоСтрок, 
								ГлубинаОбъединения, НоваяГлубина, НомерКолонкиТекущий);
		
	КонецЦикла;
	
	Конец = ПерваяСтрока + ВсегоСтрок;
	
	Если Глубина > 0 и Начало <= Конец и БылиЭлементыДляВывода Тогда
	
		Форма.ПредставлениеОтчета.Область(Начало, , Конец).Сгруппировать(Глубина);
	
	КонецЕсли;
	
КонецФункции

Функция ВидЭлемента(ИмяВидаЭлемента)
	
	Возврат Перечисления.ВидыЭлементовФинансовогоОтчета[ИмяВидаЭлемента];
	
КонецФункции

#КонецОбласти

#Область НастройкаДополнительныхПолей

Процедура ЗаполнитьПредставлениеДополнительныхПолей(Объект, НадписьДополнительныхПолей) Экспорт
	
	МассивПолей = Объект.ДополнительныеПоля.Выгрузить(,"Наименование").ВыгрузитьКолонку("Наименование");
	Если МассивПолей.Количество() Тогда
		Представление = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивПолей, ", ");
		ТекстЗаголовка = НСтр("ru='Дополнительные поля: %1';uk='Додаткові поля: %1'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, Представление);
		НадписьДополнительныхПолей.Заголовок = ТекстЗаголовка;
	Иначе
		ТекстЗаголовка = НСтр("ru='<настроить отображение дополнительных полей>';uk='<настроїти відображення додаткових полів>'");
		НадписьДополнительныхПолей.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьВидаОтчета

// Рекурсивно записывает структуру вида финансового отчета из переданного дерева в подчиненный справочник ЭлементыФинансовыхОтчетов
//
// Параметры
//  ВидОтчета 			- СправочникСсылка.ВидыБюджетов, СправочникСсылка.ВидыФинансовыхОтчетов - владелец элементов видов отчетов
//  ЭлементыВидаОтчета	- ДеревоЗначений - структура (состав и порядок) вида отчета
//  Родитель  			- СправочникСсылка.ЭлементыФинансовыхОтчетов - родитель текущего элемента 
//  ДопПорядок  		- Число - номер по порядку начиная с самого верхнего элемента дерева в направлении сверху\вниз и слева\направо
//
Процедура ОбойтиЗаписатьСтруктуруВидаОтчета(ВидОтчета, ЭлементыВидаОтчета, ПометкаУдаления, ИспользуемыеЭлементыВидаОтчета,
											Родитель = Неопределено, ДопПорядок = 0, Кэш = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
		Элементы = ЭлементыВидаОтчета.Строки[0].Строки;
	Иначе
		Элементы = ЭлементыВидаОтчета.Строки;
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		
		СсылкаНового = ВнестиИзмененияВОбъект(Элемент, Родитель, ПометкаУдаления, ВидОтчета, ДопПорядок, ИспользуемыеЭлементыВидаОтчета, Кэш);
		ОбойтиЗаписатьСтруктуруВидаОтчета(ВидОтчета, Элемент, ПометкаУдаления, ИспользуемыеЭлементыВидаОтчета, СсылкаНового, ДопПорядок, Кэш);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОбъектЭлемента(ОписаниеЭлемента, ДанныеОбъекта)
	
	Если ЗначениеЗаполнено(ОписаниеЭлемента) Тогда
		ОбъектЭлемента = ОписаниеЭлемента.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОбъектЭлемента = Неопределено Тогда
		ОбъектЭлемента = Справочники.ЭлементыФинансовыхОтчетов.СоздатьЭлемент();
		Если ЗначениеЗаполнено(ОписаниеЭлемента) Тогда
			ОбъектЭлемента.УстановитьСсылкуНового(ОписаниеЭлемента);
		ИначеЕсли ЗначениеЗаполнено(ДанныеОбъекта.Ссылка) Тогда
			ОбъектЭлемента.УстановитьСсылкуНового(ДанныеОбъекта.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектЭлемента;
	
КонецФункции

Процедура ЗаполнитьОбъектПоДаннымВременногоХранилища(Объект, ДанныеОбъекта, Код, Владелец, Родитель)
	
	Объект.Код = Код;
	Объект.Владелец = Владелец;
	Объект.Родитель = Родитель;
	
	Если ДанныеОбъекта.Свойство("Родитель") Тогда
		Суффикс = ", Родитель";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта, , 
		"Код, Владелец" + Суффикс + ", РеквизитыВидаЭлемента, ОперандыФормулы, ЭлементыТаблицы,
		|ДополнительныеПоля, ЭлементыОформления, ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО, ИсточникиЗначений");
		
	Объект.РеквизитыВидаЭлемента.Загрузить(ДанныеОбъекта.РеквизитыВидаЭлемента);
	Объект.ОперандыФормулы.Загрузить(ДанныеОбъекта.ОперандыФормулы);
	Объект.ЭлементыТаблицы.Загрузить(ДанныеОбъекта.ЭлементыТаблицы);
	Объект.ДополнительныеПоля.Загрузить(ДанныеОбъекта.ДополнительныеПоля);
	Объект.ЭлементыОформления.Загрузить(ДанныеОбъекта.ЭлементыОформления);
	Объект.ОформляемыеСтроки.Загрузить(ДанныеОбъекта.ОформляемыеСтроки);
	Объект.ОформляемыеКолонки.Загрузить(ДанныеОбъекта.ОформляемыеКолонки);
	Объект.РасшифровкаПолейОтбораЭО.Загрузить(ДанныеОбъекта.РасшифровкаПолейОтбораЭО);
	Объект.ИсточникиЗначений.Загрузить(ДанныеОбъекта.ИсточникиЗначений);
	
	Если Объект.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы") Тогда
		
		СсылкаНаЭлемент = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
																		Объект, "СтрокаЯчейки");
		Если ТипЗнч(СсылкаНаЭлемент) = Тип("Строка") Тогда
			СсылкаНаЭлемент = ПолучитьИзВременногоХранилища(СсылкаНаЭлемент);
			Если СсылкаНаЭлемент <> Неопределено Тогда
				СсылкаНаЭлемент = СсылкаНаЭлемент.Ссылка;
			КонецЕсли;
			ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
															Объект,
															"СтрокаЯчейки",
															СсылкаНаЭлемент);
		КонецЕсли;
		
		СсылкаНаЭлемент = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
																		Объект, "КолонкаЯчейки");
		Если ТипЗнч(СсылкаНаЭлемент) = Тип("Строка") Тогда
			СсылкаНаЭлемент = ПолучитьИзВременногоХранилища(СсылкаНаЭлемент);
			Если СсылкаНаЭлемент <> Неопределено Тогда
				СсылкаНаЭлемент = СсылкаНаЭлемент.Ссылка;
			КонецЕсли;
			ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
															Объект,
															"КолонкаЯчейки",
															СсылкаНаЭлемент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеПоляЭлементаИзКэша(Элемент, ИмяПоля, Кэш, ВидОтчета = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Если ВидОтчета = Неопределено Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
			|ГДЕ
			|	ЭлементыФинансовыхОтчетов.Владелец В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ЭлементыФинансовыхОтчетов.Владелец
			|			ИЗ
			|				Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
			|			ГДЕ
			|				ЭлементыФинансовыхОтчетов.Ссылка = &Ссылка)";
			Запрос.УстановитьПараметр("Ссылка", Элемент);
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
			|ГДЕ
			|	ЭлементыФинансовыхОтчетов.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Владелец", ВидОтчета);
		КонецЕсли;
		Кэш = Запрос.Выполнить().Выгрузить();
		Кэш.Индексы.Добавить("Ссылка");
		
	КонецЕсли;
	
	НайденнаяСтрока = Кэш.Найти(Элемент, "Ссылка");
	Если НайденнаяСтрока = Неопределено Тогда
		//вновь записанный элемент
		Кэш = Неопределено;
		Возврат ЗначениеПоляЭлементаИзКэша(Элемент, ИмяПоля, Кэш, ВидОтчета);
	КонецЕсли;
	Возврат НайденнаяСтрока[ИмяПоля];
	
КонецФункции

Функция ОбновитьСоздатьЭлементПоДаннымВременногоХранилища(СсылкаНаЭлемент, АдресСтруктурыЭлемента, 
															ДопПорядок, ВидОтчета, Родитель,
															ИспользуемыеЭлементыВидаОтчета)
	
	Если Не ПустаяСтрока(АдресСтруктурыЭлемента) Тогда
		ДанныеЭлемента = ПолучитьИзВременногоХранилища(АдресСтруктурыЭлемента);
		Если СсылкаНаЭлемент = Неопределено Тогда
			Если ЗначениеЗаполнено(ДанныеЭлемента.Ссылка) Тогда
				СсылкаНаЭлемент = ДанныеЭлемента.Ссылка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДанныеЭлемента = ПолучитьИзВременногоХранилища(
						ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(СсылкаНаЭлемент));
	КонецЕсли;
	
	//получение объекта для записи и определение ссылки
	ОбъектЭлемента = ПолучитьОбъектЭлемента(СсылкаНаЭлемент, ДанныеЭлемента);
	Если ОбъектЭлемента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ОбъектЭлемента.ЭтоНовый()
		И (ДанныеЭлемента.ОперандыФормулы.Количество()
			ИЛИ ДанныеЭлемента.ЭлементыТаблицы.Количество()) Тогда
		
		ОбъектЭлемента.Владелец = ВидОтчета;
		ОбъектЭлемента.ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
		ОбъектЭлемента.РеквизитыВидаЭлемента.Загрузить(ДанныеЭлемента.РеквизитыВидаЭлемента);
		ОбъектЭлемента.Записать();
		
	КонецЕсли;
	
	//запись данных из табличных частей
	Для Каждого Операнд из ДанныеЭлемента.ОперандыФормулы Цикл
		Если ЗначениеЗаполнено(Операнд.АдресСтруктурыЭлемента) Тогда
			НовыйОперанд = ОбновитьСоздатьЭлементПоДаннымВременногоХранилища(Операнд.Операнд, Операнд.АдресСтруктурыЭлемента,
														ДопПорядок, ВидОтчета, ОбъектЭлемента.Ссылка, 
														ИспользуемыеЭлементыВидаОтчета);
			Операнд.Операнд = НовыйОперанд;
		КонецЕсли;
		ИспользуемыеЭлементыВидаОтчета.Добавить(Операнд.Операнд);
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы из ДанныеЭлемента.ЭлементыТаблицы Цикл
		
		СтруктураКолонок = Новый Структура("Строка, Колонка");
		
		Для Каждого КлючИЗначение из СтруктураКолонок Цикл
			
			Если ТипЗнч(ЭлементТаблицы[КлючИЗначение.Ключ]) = Тип("Строка") Тогда
				
				ДанныеЭлементаТаблицы = ПолучитьИзВременногоХранилища(ЭлементТаблицы[КлючИЗначение.Ключ]);
				Если Не ЗначениеЗаполнено(ДанныеЭлементаТаблицы) Тогда
					ЭлементТаблицы[КлючИЗначение.Ключ] = Неопределено;
				Иначе
					ЭлементТаблицы[КлючИЗначение.Ключ] = ДанныеЭлементаТаблицы.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ЭлементТаблицы.Строка)
			И ЗначениеЗаполнено(ЭлементТаблицы.Колонка) Тогда
			
			Если ТипЗнч(ЭлементТаблицы.Элемент) = Тип("Строка") Тогда
			
				НовыйЭлемент = ОбновитьСоздатьЭлементПоДаннымВременногоХранилища(Неопределено, ЭлементТаблицы.Элемент,
															ДопПорядок, ВидОтчета, ОбъектЭлемента.Ссылка, 
															ИспользуемыеЭлементыВидаОтчета);
				ЭлементТаблицы.Элемент = НовыйЭлемент;
			
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы из ДанныеЭлемента.ОформляемыеСтроки Цикл
		
		Если ТипЗнч(ЭлементТаблицы.ЭлементОтчета) = Тип("Строка") Тогда
			
			Если ЗначениеЗаполнено(ЭлементТаблицы.ЭлементОтчета) Тогда
				ДанныеЭлементаТаблицы = ПолучитьИзВременногоХранилища(ЭлементТаблицы.ЭлементОтчета);
			Иначе
				ДанныеЭлементаТаблицы = Неопределено;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДанныеЭлементаТаблицы) Тогда
				ЭлементТаблицы.ЭлементОтчета = Неопределено;
			Иначе
				ЭлементТаблицы.ЭлементОтчета = ДанныеЭлементаТаблицы.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы из ДанныеЭлемента.ОформляемыеКолонки Цикл
		
		Если ТипЗнч(ЭлементТаблицы.ЭлементОтчета) = Тип("Строка") Тогда
			
			Если ЗначениеЗаполнено(ЭлементТаблицы.ЭлементОтчета) Тогда
				ДанныеЭлементаТаблицы = ПолучитьИзВременногоХранилища(ЭлементТаблицы.ЭлементОтчета);
			Иначе
				ДанныеЭлементаТаблицы = Неопределено;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДанныеЭлементаТаблицы) Тогда
				ЭлементТаблицы.ЭлементОтчета = Неопределено;
			Иначе
				ЭлементТаблицы.ЭлементОтчета = ДанныеЭлементаТаблицы.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы из ДанныеЭлемента.РасшифровкаПолейОтбораЭО Цикл
		
		Если ТипЗнч(ЭлементТаблицы.ЭлементОтчета) = Тип("Строка") Тогда
			
			ДанныеЭлементаТаблицы = ПолучитьИзВременногоХранилища(ЭлементТаблицы.ЭлементОтчета);
			Если Не ЗначениеЗаполнено(ДанныеЭлементаТаблицы) Тогда
				ЭлементТаблицы.ЭлементОтчета = Неопределено;
			Иначе
				ЭлементТаблицы.ЭлементОтчета = ДанныеЭлементаТаблицы.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоСтрок = ДанныеЭлемента.ЭлементыТаблицы.Количество();
	Для Сч = 1 по ВсегоСтрок Цикл
		
		ЭлементТаблицы = ДанныеЭлемента.ЭлементыТаблицы[ВсегоСтрок - Сч];
		Если Не ЗначениеЗаполнено(ЭлементТаблицы.Строка)
			ИЛИ Не ЗначениеЗаполнено(ЭлементТаблицы.Колонка)
			ИЛИ Не ЗначениеЗаполнено(ЭлементТаблицы.Элемент) Тогда
			
			ДанныеЭлемента.ЭлементыТаблицы.Удалить(ЭлементТаблицы);
			Продолжить;
			
		КонецЕсли;
		
		ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Строка);
		ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Колонка);
		ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Элемент);
		Операнды = ЭлементТаблицы.Элемент.ОперандыФормулы;
		Для Каждого Операнд из Операнды Цикл
			ИспользуемыеЭлементыВидаОтчета.Добавить(Операнд.Операнд);
		КонецЦикла;
		
	КонецЦикла;
	
	//запись данных объекта
	ЗаполнитьОбъектПоДаннымВременногоХранилища(ОбъектЭлемента, ДанныеЭлемента, ДопПорядок, ВидОтчета, Родитель);
	
	ОбъектЭлемента.Записать();
	
	Если ЗначениеЗаполнено(АдресСтруктурыЭлемента) Тогда
		//поместим элемент в хранилище, для последующего использования по ссылкам на хранилище
		ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(ОбъектЭлемента, АдресСтруктурыЭлемента);
	КонецЕсли;
	
	Возврат ОбъектЭлемента.Ссылка;
	
КонецФункции

Функция ВнестиИзмененияВОбъект(Элемент, Родитель, ПометкаУдаления, ВидОтчета, ДопПорядок, ИспользуемыеЭлементыВидаОтчета, Кэш)
	
	ДопПорядок = ДопПорядок + 1;
	
	Если ПустаяСтрока(Элемент.АдресСтруктурыЭлемента)
		И Не Элемент.ЭлементОтчета.Пустая()
		И ЗначениеПоляЭлементаИзКэша(Элемент.ЭлементОтчета, "Код", Кэш, ВидОтчета) = ДопПорядок
		И ЗначениеПоляЭлементаИзКэша(Элемент.ЭлементОтчета, "Родитель", Кэш, ВидОтчета) = Родитель 
		И ЗначениеПоляЭлементаИзКэша(Элемент.ЭлементОтчета, "ПометкаУдаления", Кэш, ВидОтчета) = ПометкаУдаления Тогда
		
		//запись данных из табличных частей
		Операнды = ЗначениеПоляЭлементаИзКэша(Элемент.ЭлементОтчета, "ОперандыФормулы", Кэш, ВидОтчета);
		Для Каждого Операнд из Операнды Цикл
			ИспользуемыеЭлементыВидаОтчета.Добавить(Операнд.Операнд);
		КонецЦикла;
		
		ЭлементыТаблицы = ЗначениеПоляЭлементаИзКэша(Элемент.ЭлементОтчета, "ЭлементыТаблицы", Кэш, ВидОтчета);
		Для Каждого ЭлементТаблицы из ЭлементыТаблицы Цикл
			ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Строка);
			ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Колонка);
			ИспользуемыеЭлементыВидаОтчета.Добавить(ЭлементТаблицы.Элемент);
			Операнды = ЗначениеПоляЭлементаИзКэша(ЭлементТаблицы.Элемент, "ОперандыФормулы", Кэш, ВидОтчета);
			Для Каждого Операнд из Операнды Цикл
				ИспользуемыеЭлементыВидаОтчета.Добавить(Операнд.Операнд);
			КонецЦикла;
		КонецЦикла;
		
		ИспользуемыеЭлементыВидаОтчета.Добавить(Элемент.ЭлементОтчета);
		
		Возврат Элемент.ЭлементОтчета;
		
	КонецЕсли;
	
	//если новый элемент - сохраним данные строки во временном хранилище
	ДанныеЭлемента = Элемент.АдресСтруктурыЭлемента;
	
	ИспользуетсяХранилищеФормы = Истина;
	УИД = Новый УникальныйИдентификатор;
	Если Не ЗначениеЗаполнено(Элемент.ЭлементОтчета) 
		И Не ЗначениеЗаполнено(ДанныеЭлемента) Тогда
		//++ НЕ УТКА
		Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыФинансовыхОтчетов") Тогда
			ДанныеЭлемента = МеждународнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(Элемент, УИД);
		КонецЕсли;
		//-- НЕ УТКА
		Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыБюджетов") Тогда
			ДанныеЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(Элемент, УИД);
		КонецЕсли;
		ИспользуетсяХранилищеФормы = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыБюджетов") И ДанныеЭлемента <> "" Тогда
		
		СтруктураЭлемента = ПолучитьИзВременногоХранилища(ДанныеЭлемента);
		Если СтруктураЭлемента.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		
			ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
															ДанныеЭлемента,
															"ВыводитьВместеСРодительским",
															Элемент.ВыводитьВместеСРодительским);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыБюджетов") И ДанныеЭлемента <> "" Тогда
		
		НужноЗаполнениеИсточников = Ложь; ЭтоЗаполнение = Ложь;
		Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ДанныеЭлемента, "ТипИзмерения");
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика
				ИЛИ ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
				НужноЗаполнениеИсточников = Истина;
			КонецЕсли;
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				Если ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ДанныеЭлемента, "РазрешитьРедактирование") = Истина Тогда
					НужноЗаполнениеИсточников = Истина;
					ЭтоЗаполнение = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НужноЗаполнениеИсточников Тогда
			
			СтруктураЭлемента = ПолучитьИзВременногоХранилища(ДанныеЭлемента);
			
			Если ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ДанныеЭлемента, "ВыбранныеИсточникиЗначений") = Истина Тогда
				
				//1. Проверим выбранные источники
				Если СтруктураЭлемента.ИсточникиЗначений.Количество() Тогда
					
					СписокДоступныхЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ИсточникиЗначенийЭлемента(Элемент, Кэш, ЭтоЗаполнение);
					НаУдаление = Новый Массив;
					
					Для Каждого СтрокаИсточника из СтруктураЭлемента.ИсточникиЗначений Цикл
						Если ТипЗнч(СтрокаИсточника.Источник) = Тип("Строка") Тогда
							//1.1. Попробуем найти по адресу
							Если СписокДоступныхЭлементов.Найти(СтрокаИсточника.Источник) <> Неопределено Тогда
								Продолжить;
							КонецЕсли;
							//1.2. Если не найдено - то по ссылке из хранилища
							СтруктураИсточника = ПолучитьИзВременногоХранилища(СтрокаИсточника.Источник);
							Если ЗначениеЗаполнено(СтруктураИсточника.Ссылка) Тогда
								Если СписокДоступныхЭлементов.Найти(СтруктураИсточника.Ссылка) <> Неопределено Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Если ТипЗнч(СтрокаИсточника.Источник) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
							Если СписокДоступныхЭлементов.Найти(СтрокаИсточника.Источник) <> Неопределено Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						НаУдаление.Добавить(СтрокаИсточника);
					КонецЦикла;
					
					Для Каждого ЭлементМассива из НаУдаление Цикл
						СтруктураЭлемента.ИсточникиЗначений.Удалить(ЭлементМассива);
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				//2. Просто заполним доступные источники
				СтруктураЭлемента.ИсточникиЗначений.Очистить();
				СписокДоступныхЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ИсточникиЗначенийПоУмолчанию(Элемент, , Кэш, ЭтоЗаполнение);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СписокДоступныхЭлементов, СтруктураЭлемента.ИсточникиЗначений);
				
			КонецЕсли;
			
			//3. Для расширяемых измерений дополним источники
			Если ЭтоЗаполнение Тогда
				НайденныеСтроки = СтруктураЭлемента.ИсточникиЗначений.НайтиСтроки(Новый Структура("ДобавляемыеЗначенияДокумента", Истина));
				Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
					СтруктураЭлемента.ИсточникиЗначений.Удалить(НайденнаяСтрока);
				КонецЦикла;
				СписокДоступныхЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ИсточникиЗначенийПоУмолчанию(Элемент, , Кэш, ,Истина);
				Для Каждого СтрокаДоступныхЭлементов из СписокДоступныхЭлементов Цикл
					Если СтрокаДоступныхЭлементов.ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
						НоваяСтрока = СтруктураЭлемента.ИсточникиЗначений.Добавить();
						НоваяСтрока.Источник = СтрокаДоступныхЭлементов.Источник;
						НоваяСтрока.ДобавляемыеЗначенияДокумента = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//4. Проверим, если источник еще не записан - преобразуем источник в ссылку
			Для Каждого СтрокаИсточника из СтруктураЭлемента.ИсточникиЗначений Цикл
				
				Если ТипЗнч(СтрокаИсточника.Источник) = Тип("Строка") Тогда
					СтруктураИсточника = ПолучитьИзВременногоХранилища(СтрокаИсточника.Источник);
					Если Не ЗначениеЗаполнено(СтруктураИсточника.Ссылка) Тогда
						СтруктураИсточника.Ссылка = Справочники.ЭлементыФинансовыхОтчетов.ПолучитьСсылку(Новый УникальныйИдентификатор);
					КонецЕсли;
					СтрокаИсточника.Источник = СтруктураИсточника.Ссылка;
					ПоместитьВоВременноеХранилище(СтруктураИсточника, СтрокаИсточника.Источник);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СсылкаНаЭлемент = ОбновитьСоздатьЭлементПоДаннымВременногоХранилища(Элемент.ЭлементОтчета,
															ДанныеЭлемента, ДопПорядок, ВидОтчета,
															Родитель, ИспользуемыеЭлементыВидаОтчета);
	
	Если СсылкаНаЭлемент = Неопределено Тогда
		Элемент.ЭлементОтчета = СсылкаНаЭлемент;
	ИначеЕсли Не ЗначениеЗаполнено(Элемент.ЭлементОтчета) Тогда
		Элемент.ЭлементОтчета = СсылкаНаЭлемент;
	КонецЕсли;
	Если Не ИспользуетсяХранилищеФормы Тогда
		УдалитьИзВременногоХранилища(ДанныеЭлемента);
	КонецЕсли;
	Элемент.АдресСтруктурыЭлемента = "";
	ИспользуемыеЭлементыВидаОтчета.Добавить(Элемент.ЭлементОтчета);
	
	Возврат СсылкаНаЭлемент;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА
#Область МеждународнаяОтчетность

Функция СхемаМонетарногоПоказателя(Показатель, Измерения = Неопределено, Субконто = Неопределено, Ресурс = "Сумма")
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	Источник = "Международный";
	Если ТипЗнч(Показатель.СчетПланаСчетов) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Источник = "Хозрасчетный";
	КонецЕсли;
	
	ЭтоОстаток = СтрНайти(Строка(Показатель.ТипИтога),"Сальдо") > 0;
	СуффиксРесурса = СтрЗаменить(ТРег(Строка(Показатель.ТипИтога))," ","");
	СуффиксРесурса = СтрЗаменить(СуффиксРесурса,"Сальдо","Остаток");
	
	Если ЭтоОстаток Тогда
		ПолеЗначение2 = Ресурс + "Начальный" + СуффиксРесурса;
		ПолеЗначение = Ресурс + "Конечный" + СуффиксРесурса;
		СхемаКД = ПолучитьМакет("МонетарныйПоказательОстаток");
		ТекстЗапроса = СхемаКД.НаборыДанных.ЗначенияПоказателя.Запрос;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СуммаНачальныйОстаток", ПолеЗначение2);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СуммаКонечныйОстаток", ПолеЗначение);
		Если Показатель.НачальноеСальдо Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПолеОстатка", "temp");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Значение", "ПолеОстатка");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "temp", "Значение");
		КонецЕсли;
	Иначе
		ПолеЗначение = Ресурс + СуффиксРесурса;
		СхемаКД = ПолучитьМакет("МонетарныйПоказательОборот");
		ТекстЗапроса = СхемаКД.НаборыДанных.ЗначенияПоказателя.Запрос;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СуммаОборот", ПолеЗначение);
	КонецЕсли;
	
	ДобавитьПоляИзмерений(ТекстЗапроса, Измерения);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Международный", Источник);
	СхемаКД.НаборыДанных.ЗначенияПоказателя.Запрос = ТекстЗапроса;
	
	ДобавитьПоляИзмерений(СхемаКД.НастройкиПоУмолчанию, Измерения);
	Если Субконто <> Неопределено Тогда
		ФинОтчеты.УстановитьПараметрКомпоновки(СхемаКД.НастройкиПоУмолчанию,"ВидСубконтоОборота",Субконто.Вид);
		Если Субконто.ЕстьНастройки Тогда
			НастройкиОтбораСубконто = Субконто.Отбор.Получить();
			ФинОтчеты.СкопироватьОтбор(НастройкиОтбораСубконто.Отбор,СхемаКД.НастройкиПоУмолчанию.Отбор);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоОстаток Тогда
		РольОстатка = ФинОтчеты.НоваяРольПоляНабораДанных();
		РольОстатка.ГруппаОстатка = "Остаток";
		РольОстатка.Остаток = Истина;
		РольОстатка.ПолеСчета = "Счет";
		Если Показатель.НачальноеСальдо Тогда
			РольОстатка.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
			ФинОтчеты.УстановитьРольПоляНабора(СхемаКД.НаборыДанных.ЗначенияПоказателя, "Значение", РольОстатка);
			
			РольОстатка.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
			ФинОтчеты.УстановитьРольПоляНабора(СхемаКД.НаборыДанных.ЗначенияПоказателя, "ПолеОстатка", РольОстатка);
			
		Иначе
			РольОстатка.ТипОстатка = ТипОстаткаКомпоновкиДанных.КонечныйОстаток;
			ФинОтчеты.УстановитьРольПоляНабора(СхемаКД.НаборыДанных.ЗначенияПоказателя, "Значение", РольОстатка);
			
			РольОстатка.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;
			ФинОтчеты.УстановитьРольПоляНабора(СхемаКД.НаборыДанных.ЗначенияПоказателя, "ПолеОстатка", РольОстатка);
			
		КонецЕсли;
	Иначе
		ФинОтчеты.УстановитьРольПоляНабора(СхемаКД.НаборыДанных.ЗначенияПоказателя, "Значение");
	КонецЕсли;
	
	ФинОтчеты.УстановитьОтбор(СхемаКД.НастройкиПоУмолчанию.Отбор, "Счет", Показатель.СчетПланаСчетов);
	
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(СхемаКД);
	Если Показатель.ЕстьНастройки Тогда
		НастройкиОтбораПоказателя = Показатель.ДополнительныйОтбор.Получить();
		Если НастройкиОтбораПоказателя <> Неопределено Тогда
			ФинОтчеты.СкопироватьОтбор(НастройкиОтбораПоказателя.Отбор, Компоновщик.Настройки.Отбор);
		КонецЕсли;
	КонецЕсли;
	
	ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик.Настройки, "ЭлементОтчета", Показатель.ЭлементОтчета);
	ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик.Настройки, "ОбратныйЗнак" , Показатель.ОбратныйЗнак);
	ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик.Настройки, "КодСтроки"    , Показатель.КодСтрокиОтчета);
	ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик.Настройки, "Примечание"   , Показатель.Примечание);
	
	Если Субконто <> Неопределено Тогда
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик.Настройки,"ВидСубконтоОборота",Субконто.Вид);
	КонецЕсли;
	
	СхемаПоказателя = Новый Структура("Схема, Настройки",СхемаКД, Компоновщик.ПолучитьНастройки());
	Возврат СхемаПоказателя;
	
КонецФункции

Функция СхемаНемонетарногоПоказателя(Показатель, Измерения = Неопределено, Отбор = Неопределено)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаКД = ПолучитьМакет("НемонетарныйПоказатель");
	ТекстЗапроса = СхемаКД.НаборыДанных.ЗначенияПоказателя.Запрос;
	ДобавитьПоляИзмерений(ТекстЗапроса, Измерения);
	
	СхемаКД.НаборыДанных.ЗначенияПоказателя.Запрос = ТекстЗапроса;
	
	ДобавитьПоляИзмерений(СхемаКД.НастройкиПоУмолчанию, Измерения);
	
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(СхемаКД);
	ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик.Настройки, "Показатель", Показатель.НемонетарныйПоказатель);
	
	СхемаПоказателя = Новый Структура("Схема, Настройки",СхемаКД, Компоновщик.ПолучитьНастройки());
	Возврат СхемаПоказателя;
	
КонецФункции

Функция СхемаПроизводногоПоказателя(Показатель, Измерения = Неопределено, Отбор = Неопределено)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаКД = ПолучитьМакет("ПроизводныйПоказатель");
	ТипЧисло = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	ОперандыФормулы = Показатель.ЭлементОтчета.ОперандыФормулы;
	Если Показатель.ЭтоСвязанный Тогда
		ОперандыФормулы = Показатель.СвязанныйЭлемент.ОперандыФормулы;
	КонецЕсли;
	Для Каждого Операнд Из ОперандыФормулы Цикл
		НовоеПолеНабора = ФинОтчеты.НовоеПолеНабора(СхемаКД.НаборыДанных.ЗначенияОперандов, Операнд.Идентификатор,,,ТипЧисло);
	КонецЦикла;
	Для Каждого Измерение Из Измерения Цикл
		НовоеПолеНабора = ФинОтчеты.НовоеПолеНабора(СхемаКД.НаборыДанных.ЗначенияОперандов, Измерение.Значение);
		ФинОтчеты.НовоеПолеВыбора(СхемаКД.НастройкиПоУмолчанию,Измерение.Значение);
	КонецЦикла;
	
	ПолеЗначения = СхемаКД.ВычисляемыеПоля[0];
	Если НЕ ПустаяСтрока(Показатель.Формула) Тогда
		ПолеЗначения.Выражение = "(" + Показатель.Формула + ") * ВЫБОР КОГДА &ОбратныйЗнак = ИСТИНА ТОГДА -1 ИНАЧЕ 1 КОНЕЦ";
	КонецЕсли;
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(СхемаКД);
	
	СхемаПоказателя = Новый Структура("Схема, Настройки", СхемаКД, Компоновщик.ПолучитьНастройки());
	Возврат СхемаПоказателя;
	
КонецФункции

Процедура ДобавитьПоляИзмерений(ТекстНабор, Измерения)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	ЭтоТекстЗапроса = ТипЗнч(ТекстНабор) = Тип("Строка");
	Для Каждого Измерение Из Измерения Цикл
		Если ЭтоТекстЗапроса Тогда
			Поле = "ТаблицаРегистра." + Измерение.Значение;
			ТекстНабор = СтрЗаменить(ТекстНабор, "//" + Поле, Поле);
			Если Измерение.Значение = "Субконто1" Тогда
				ТекстНабор = СтрЗаменить(ТекстНабор, "//&ВидСубконто", "&ВидСубконто");
			КонецЕсли;
		Иначе
			ФинОтчеты.НовоеПолеВыбора(ТекстНабор, Измерение.Значение, Измерение.Представление);
			Если Измерение.Отбор <> Неопределено Тогда
				ФинОтчеты.СкопироватьОтбор(Измерение.Отбор, ТекстНабор.Отбор, Истина);
			КонецЕсли;
			Если Измерение.Значение = "Субконто1" Тогда
				ФинОтчеты.НовоеПолеВыбора(ТекстНабор, "ВидСубконто", "ВидСубконто");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ПолучениеТаблицыИнтерваловОтчета

Функция ДатаКонцаНовогоИнтервала(ДатаПериода,Периодичность, КонецПериода)
	
	ДатаКонцаПериода = ДатаПериода;
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		ДатаКонцаПериода = КонецМесяца(ДатаКонцаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ДатаКонцаПериода = ДобавитьМесяц(ДатаКонцаПериода, 2);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ДатаКонцаПериода = ДобавитьМесяц(ДатаКонцаПериода, 5);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ДатаКонцаПериода = ДобавитьМесяц(ДатаКонцаПериода, 11);
		
	Иначе
		ДатаКонцаПериода = КонецПериода;
		
	КонецЕсли;
	ДатаКонцаПериода = КонецМесяца(ДатаКонцаПериода);
	Если ДатаКонцаПериода > КонецПериода Тогда
		ДатаКонцаПериода = КонецПериода;
	КонецЕсли;
	Возврат ДатаКонцаПериода;
	
КонецФункции // ДатаКонцаНовогоИнтервала()

Функция ДатаКонцаПериода(ДатаПериода,Периодичность, КонецПериода)
	
	ДатаКонцаПериода = ДатаПериода;
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		ДатаКонцаПериода = КонецМесяца(ДатаКонцаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ДатаКонцаПериода = КонецКвартала(ДатаКонцаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Если Месяц(ДатаКонцаПериода) <= 6 Тогда
			ДатаКонцаПериода = Дата(Год(ДатаКонцаПериода),6,30,23,59,59);
		Иначе
			ДатаКонцаПериода = Дата(Год(ДатаКонцаПериода),12,31,23,59,59);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ДатаКонцаПериода = КонецГода(ДатаКонцаПериода);
		
	Иначе
		ДатаКонцаПериода = КонецПериода;
		
	КонецЕсли;
	ДатаКонцаПериода = КонецМесяца(ДатаКонцаПериода);
	Если ДатаКонцаПериода > КонецПериода Тогда
		ДатаКонцаПериода = КонецПериода;
	КонецЕсли;
	Возврат ДатаКонцаПериода;
	
КонецФункции // ДатаКонцаПериода()

Функция НоваяТаблицаИнтервалов(ИерархияПериодов = Неопределено)
	
	Интервалы = Новый ТаблицаЗначений;
	Интервалы.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ЭлементыФинансовыхОтчетов"));
	Интервалы.Колонки.Добавить("КодСтроки" , Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	Интервалы.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	
	ТипДата = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	Интервалы.Колонки.Добавить("ДатаНачала"     , ТипДата);
	Интервалы.Колонки.Добавить("ДатаОкончания"  , ТипДата);
	Интервалы.Колонки.Добавить("ПериодГод"      , ТипДата);
	Интервалы.Колонки.Добавить("ПериодПолугодие", ТипДата);
	Интервалы.Колонки.Добавить("ПериодКвартал"  , ТипДата);
	Интервалы.Колонки.Добавить("ПериодМесяц"    , ТипДата);
	
	ИерархияПериодов.Добавить(Перечисления.Периодичность.Год);
	ИерархияПериодов.Добавить(Перечисления.Периодичность.Полугодие);
	ИерархияПериодов.Добавить(Перечисления.Периодичность.Квартал);
	ИерархияПериодов.Добавить(Перечисления.Периодичность.Месяц);
	
	Возврат Интервалы;
	
КонецФункции

#КонецОбласти

#КонецОбласти
//-- НЕ УТКА
#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	СписокНужныхВидов = Новый СписокЗначений;
	СписокНужныхВидов.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов);
	СписокНужныхВидов.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов);
	СписокНужныхВидов.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов);
	СписокНужныхВидов.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
	СписокНужныхВидов.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлементыФинансовыхОтчетов.Ссылка
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|ГДЕ
		|	ЭлементыФинансовыхОтчетов.ВидЭлемента В(&СписокВидов)
		|	И ЭлементыФинансовыхОтчетов.Владелец ССЫЛКА Справочник.ВидыБюджетов";
	
	Запрос.УстановитьПараметр("СписокВидов", СписокНужныхВидов);
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ЭлементыФинансовыхОтчетов";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			НастройкиКомпоновкиДанных = Объект.ДополнительныйОтбор.Получить();
			Если ТипЗнч(НастройкиКомпоновкиДанных) <> Тип("НастройкиКомпоновкиДанных") Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			Иначе
				ФинансоваяОтчетностьСервер.УстановитьОтбор(НастройкиКомпоновкиДанных.Отбор, "ВалютаХранения", 
				"<заполнить_валютахранения>", ВидСравненияКомпоновкиДанных.Равно);
				
				Объект.ДополнительныйОтбор = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли