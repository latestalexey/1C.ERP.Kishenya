
&НаКлиенте
Перем КэшВидовЭлементов;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	КомплектОтчетности = Параметры.КомплектОтчетности;
	
	ТаблицаСочетаний = ФинансоваяОтчетностьПовтИсп.ДопустимыеСочетанияЭлементовОтчетов();
	КэшДопустимыхСочетаний = СоздатьКэшНаОснованииТаблицыСочетаний(ТаблицаСочетаний);
	
	ТаблицаСочетаний = ФинансоваяОтчетностьПовтИсп.НедопустимыеСочетанияЭлементовОтчетов();
	КэшНедопустимыхСочетаний = СоздатьКэшНаОснованииТаблицыСочетаний(ТаблицаСочетаний);
	
	ОбновитьДеревоНовыхЭлементов();
	ОбновитьДеревоОтчетаСервер(Параметры.ЗначениеКопирования);
	ОбновитьЗаголовокФормы();
	
	Если ЗначениеЗаполнено(Параметры.ТекущийЭлементОтчета) Тогда
		СтрокаОтчета = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(
							ЭлементыОтчета, "ЭлементОтчета", Параметры.ТекущийЭлементОтчета);
		Если СтрокаОтчета <> Неопределено Тогда
			Элементы.ЭлементыОтчета.ТекущаяСтрока = СтрокаОтчета.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ИнтеграцияССППР.ДобавитьРазмещениеКомандСППРВДополнительныеПараметры(Элементы.ГруппаСППР, ДополнительныеПараметры);
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);

	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДеревоОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДеревоЭлементыОтчета = РеквизитФормыВЗначение("ЭлементыОтчета");
	Справочники.ЭлементыФинансовыхОтчетов.ЗаписатьСтруктуруВидаОтчета(ТекущийОбъект.Ссылка, ДеревоЭлементыОтчета, ТекущийОбъект.ПометкаУдаления);
	
	ТекущаяСтрока = Элементы.ЭлементыОтчета.ТекущаяСтрока;
	СтрокаДерева = ЭлементыОтчета.НайтиПоИдентификатору(ТекущаяСтрока);
	ТекущийЭлементОтчета = СтрокаДерева.ЭлементОтчета;
	
	ОбновитьДеревоОтчетаСервер();
	
	СтрокаДерева = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(
						ЭлементыОтчета, 
						"ЭлементОтчета", 
						ТекущийЭлементОтчета);
	
	Если СтрокаДерева <> Неопределено Тогда
		Элементы.ЭлементыОтчета.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
	КонецЕсли;
	
	ОбновитьЗаголовокФормы();

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Элементы.ЭлементыОтчета.Развернуть(ЭлементыОтчета.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Добавили\изменили немонетарный показатель
	ТекущаяСтрока = Элементы.ЭлементыОтчета.ТекущиеДанные;
	Если ИмяСобытия = "Запись_НемонетарныйПоказатель" Тогда
		
		ОбновитьДеревоНовыхЭлементов();
		СтрокаДерева = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(
												ДеревоНовыхЭлементов, 
												"ЭлементВидаОтчетности", 
												Источник);
		
		Если СтрокаДерева <> Неопределено Тогда
			Элементы.ДеревоНовыхЭлементов.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Справочник.ВидыФинансовыхОтчетов.Форма.ФормаВыбора" Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			ФильтрПоВидуОтчета = ВыбранноеЗначение;
			ОбновитьДеревоСохраненныхЭлементов();
			МеждународнаяОтчетностьКлиент.РазвернутьДеревоСохраненныхЭлеметов(ЭтаФорма, ДеревоСохраненныхЭлементов);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БыстрыйПоискНовыхПриИзменении(Элемент)
	
	ОбновитьДеревоНовыхЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискСохраненныхПриИзменении(Элемент)
	
	ОбновитьДеревоСохраненныхЭлементов();
	Если ЗначениеЗаполнено(ФильтрПоВидуОтчета) Тогда
		МеждународнаяОтчетностьКлиент.РазвернутьДеревоСохраненныхЭлеметов(ЭтаФорма, ДеревоСохраненныхЭлементов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	ОбновитьДеревоСохраненныхЭлементов();
	МеждународнаяОтчетностьКлиент.РазвернутьДеревоСохраненныхЭлеметов(ЭтаФорма, ДеревоСохраненныхЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура("ИсключитьОтчеты",Объект.Ссылка);
	ПараметрыФормы = Новый Структура("ИсключитьОтчеты",Объект.Ссылка);
	ОткрытьФорму("Справочник.ВидыФинансовыхОтчетов.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНовыхэлементов

&НаКлиенте
Процедура ДеревоНовыхЭлементовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДеревоОтправительСтроки = "ДеревоНовыхЭлементов";
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ВыбраннаяСтрока);
	ИдентификаторСтроки = Элементы.ЭлементыОтчета.ТекущаяСтрока;
	ДобавитьВСтруктуруОтчета(МассивСтрок, ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНовыхЭлементовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ДеревоОтправительСтроки = "ДеревоНовыхЭлементов";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСохраненныхэлементов

&НаКлиенте
Процедура ДеревоСохраненныхЭлементовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДеревоОтправительСтроки = "ДеревоСохраненныхЭлементов";
	ИдентификаторСтроки = Элементы.ЭлементыОтчета.ТекущаяСтрока;
	ДобавитьВСтруктуруОтчета(ВыбраннаяСтрока, ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСохраненныхЭлементовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ДеревоОтправительСтроки = "ДеревоСохраненныхЭлементов";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭлементыотчета

&НаКлиенте
Процедура ЭлементыОтчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактироватьЭлементОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыОтчетаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ДеревоОтправительСтроки = "ЭлементыОтчета";
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыОтчетаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Перем ВидПеретаскиваемогоЭлемента;
	
	СтандартнаяОбработка = Ложь;
	МожноДобавитьВСтруктуру = Истина;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Для Каждого СтрокаВидаЭлемента из ПараметрыПеретаскивания.Значение Цикл
			МожноДобавитьВСтруктуру = РазрешеноПеретаскивание(СтрокаВидаЭлемента, Строка);
			Если НЕ МожноДобавитьВСтруктуру Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		МожноДобавитьВСтруктуру = РазрешеноПеретаскивание(ПараметрыПеретаскивания.Значение, Строка);
	КонецЕсли;
	
	Если МожноДобавитьВСтруктуру Тогда
		Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Перемещение
			И ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Копирование Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		КонецЕсли;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыОтчетаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	МассивСтрок = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	Если ДеревоОтправительСтроки = Элемент.Имя Тогда
		Для Каждого ПереносимаяСтрока из МассивСтрок Цикл
			ПеренестиСтроку(ЭлементыОтчета, ПереносимаяСтрока, Строка, ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование);
		КонецЦикла;
	Иначе
		Если Строка = Неопределено Тогда
			КореньДерева = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ЭлементыОтчета);
			Строка = КореньДерева.ПолучитьИдентификатор();
		КонецЕсли;
		ДобавитьВСтруктуруОтчета(МассивСтрок, Строка);
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыОтчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если (Элемент.ТекущиеДанные.ВидЭлемента = ВидЭлемента("ПустаяСсылка")
			ИЛИ Элемент.ТекущиеДанные.ВидЭлемента = ВидЭлемента("Колонки")
			ИЛИ Элемент.ТекущиеДанные.ВидЭлемента = ВидЭлемента("Строки")
			ИЛИ Элемент.ТекущиеДанные.ВидЭлемента = ВидЭлемента("ИтогПоГруппе"))
			И Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
			
	Если Копирование И НЕ Отказ Тогда
		Отказ = Истина;
		КопияСтроки = СкопироватьСтроку(ЭлементыОтчета, Элемент.ТекущиеДанные);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыОтчетаПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.ЭлементыОтчета.ТекущиеДанные;
	ВидЭлемента = ТекущаяСтрока.ВидЭлемента;
	
	Если (ВидЭлемента = ВидЭлемента("ПустаяСсылка") 
			И ТекущаяСтрока.ПолучитьРодителя() = Неопределено)
		ИЛИ ВидЭлемента = ВидЭлемента("Колонки")
		ИЛИ ВидЭлемента = ВидЭлемента("Строки")
		ИЛИ ВидЭлемента = ВидЭлемента("НастройкаЯчеек") Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Для существующих элементов проверим ссылки на них в других отчетах
	Если ЗначениеЗаполнено(ТекущаяСтрока.ЭлементОтчета)
		И НЕ ТекущаяСтрока.ЭтоСвязанный Тогда
		
		Если МеждународнаяОтчетностьВызовСервера.ЕстьСсылки(ТекущаяСтрока.ЭлементОтчета) Тогда
			
			ПараметрыФормы = Новый Структура("ЭлементОтчета", ТекущаяСтрока.ЭлементОтчета);
			ПараметрыФормы.Вставить("РежимУдаления", Истина);
			Если ВидЭлемента = ВидЭлемента("ТаблицаПоказателиВСтроках")
				ИЛИ ВидЭлемента = ВидЭлемента("ТаблицаПоказателиВКолонках")
				ИЛИ ВидЭлемента = ВидЭлемента("ТаблицаСложная")
				ИЛИ ВидЭлемента = ВидЭлемента("Группа")
				ИЛИ ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
				ПараметрыФормы.Вставить("УдалитьВсе", Истина);
			КонецЕсли;
			
			ОткрытьФорму("Справочник.ВидыФинансовыхОтчетов.Форма.ФормаСпискаСсылок",
				ПараметрыФормы,
				ЭтаФорма);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;// на удаляемый элемент есть ссылки в других отчетах
	КонецЕсли;// есть ссылка элемента
	
	Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ТекущаяСтрока, ВидЭлемента("ТаблицаСложная"));
	Если Таблица <> Неопределено Тогда
		НастройкаЯчеек = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Таблица, "ВидЭлемента", ВидЭлемента("НастройкаЯчеек"));
		ОчиститьУдаляемыеЭлементыОтчета(НастройкаЯчеек.ПолучитьИдентификатор(), ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Неопределено, ТекущаяСтрока.АдресСтруктурыЭлемента);
	ТекущаяСтрока.АдресСтруктурыЭлемента = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыОтчетаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВид = Элемент.ТекущиеДанные.ВидЭлемента;
	Если НЕ ЗначениеЗаполнено(ТекущийВид)
		ИЛИ ТекущийВид = ВидЭлемента("Колонки")
		ИЛИ ТекущийВид = ВидЭлемента("Строки") Тогда
		Возврат;
	КонецЕсли;
	
	РедактироватьЭлементОтчета();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДеревоНовых(Команда)
	
	ОбновитьДеревоНовыхЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоОтчета(Команда)
	
	ОбновитьДеревоОтчетаСервер();
	РазвернутьДеревоОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиНовыйЭлемент(Команда)
	
	ОбновитьДеревоНовыхЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЭлемент(Команда)

	ОбновитьДеревоСохраненныхЭлементов();
	Если ЗначениеЗаполнено(ФильтрПоВидуОтчета) Тогда
		МеждународнаяОтчетностьКлиент.РазвернутьДеревоСохраненныхЭлеметов(ЭтаФорма, ДеревоСохраненныхЭлементов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязьЭлемента(Команда)

	Если Элементы.ЭлементыОтчета.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.ЭлементыОтчета.ТекущиеДанные.ЭтоСвязанный Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Разорвать связь?';uk='Розірвати зв''язок?'");
	ПараметрыОбработчика = Новый Структура("ТекущаяСтрока", Элементы.ЭлементыОтчета.ТекущаяСтрока);
	ТекущиеДанные = Элементы.ЭлементыОтчета.ТекущиеДанные;
	Если ТекущиеДанные.ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
		ТекстВопроса = НСтр("ru='Удалить элемент?';uk='Видалити елемент?'");
		ПараметрыОбработчика.Вставить("Удалить");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикВопросаРазрываСвязи", ЭтотОбъект, ПараметрыОбработчика);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ПереместитьЭлементДерева(ЭлементыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ПереместитьЭлементДерева(ЭлементыОтчета, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидПоказателей(Команда)
	
	ПараметрыФормы = Новый Структура("ВидПоказателей", Объект.ВидПоказателей);
	ВидыПоказателей = ВидыИспользуемыхПоказателей();
	ПараметрыФормы.Вставить("ЕстьПоказатели", ВидыПоказателей.МеждународныйУчет ИЛИ ВидыПоказателей.РеглУчет);
	ПараметрыФормы.Вставить("ЕстьПоказателиМУ", ВидыПоказателей.МеждународныйУчет);
	ПараметрыФормы.Вставить("ЕстьПоказателиБУ", ВидыПоказателей.РеглУчет);
	Установщик = Новый ОписаниеОповещения("УстановитьВидыПоказателей", ЭтаФорма);
	ОткрытьФорму("Справочник.ВидыФинансовыхОтчетов.Форма.ВыборВидаПоказателей", ПараметрыФормы, ЭтаФорма,,,,Установщик);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПоказателя(Команда)
	
	ТекущиеДанные = Элементы.ДеревоНовыхЭлементов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.ВидЭлемента = ВидЭлемента("НемонетарныйПоказатель") Тогда
		ПараметрыФормы = Новый Структура("Ключ",ТекущиеДанные.ЭлементВидаОтчетности);
		ОткрытьФорму("Справочник.НемонетарныеПоказатели.Форма.ФормаЭлемента",ПараметрыФормы,ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
 
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
 
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаДобавленияНовогоЭлементаВОтчет

&НаКлиенте
Функция РазрешеноПеретаскивание(СтрокаДерева, РодительПриемник)
	
	ВидПеретаскиваемогоЭлемента = Неопределено;
	Попытка
		Если ДеревоОтправительСтроки = "ЭлементыОтчета" Тогда //перетаскивание внутри дерева
			ДанныеСтроки = ЭлементыОтчета.НайтиПоИдентификатору(СтрокаДерева);
			ВидПеретаскиваемогоЭлемента = ДанныеСтроки.ВидЭлемента;
			ЭтоСвязанный = ДанныеСтроки.ЭтоСвязанный;
		Иначе
			ВидПеретаскиваемогоЭлемента = СтрокаДерева.ВидЭлемента;
			ЭтоСвязанный = СтрокаДерева.ЭтоСвязанный;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ВидПеретаскиваемогоЭлемента) ИЛИ
		Не МожноДобавитьВСтруктуруОтчета(ВидПеретаскиваемогоЭлемента, РодительПриемник, ЭтоСвязанный) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция МожноДобавитьВСтруктуруОтчета(Знач ВидЭлементаЧтоДобавить, ИдРодителяКудаДобавить, ЭтоСвязанный)
	
	Если ВидЭлементаЧтоДобавить = ВидЭлемента("ИтогПоГруппе")
		И ЭтоСвязанный Тогда
		ВидЭлементаЧтоДобавить = ВидЭлемента("МонетарныйПоказатель");
	КонецЕсли;
	
	СтруктураПоиска = Новый Массив;
	СтруктураПоиска.Добавить(ВидЭлементаЧтоДобавить); // элемент
	
	Если ИдРодителяКудаДобавить = Неопределено Тогда
		СтруктураПоиска.Добавить(ВидЭлемента("ПустаяСсылка")); // Родитель
	Иначе
		СтрокаРодителя = ЭлементыОтчета.НайтиПоИдентификатору(ИдРодителяКудаДобавить);
		СтруктураПоиска.Добавить(СтрокаРодителя.ВидЭлемента); // Родитель
		
		НайденныеСтроки = КэшНедопустимыхСочетаний.Получить(ВидЭлементаЧтоДобавить);
		Если НайденныеСтроки <> Неопределено Тогда
			Для Каждого НедопустимоеСочетание ИЗ НайденныеСтроки Цикл
				Элемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаРодителя, НедопустимоеСочетание.Ключ);
				Если Элемент <> Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Элемент1 = Неопределено;
		
		Если СтрокаРодителя.ВидЭлемента <> ВидЭлемента("Колонки")
			И СтрокаРодителя.ВидЭлемента <> ВидЭлемента("Строки") Тогда
			
			Элемент1 = ПолучитьРодителяПоВиду(СтрокаРодителя, ВидЭлемента("Строки"));
			Если Элемент1 = Неопределено Тогда
				Элемент1 = ПолучитьРодителяПоВиду(СтрокаРодителя, ВидЭлемента("Колонки"));
			КонецЕсли;
			Если Элемент1 <> Неопределено Тогда
				Элемент1 = Элемент1.ВидЭлемента;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Элемент1) Тогда
			Элемент1 = ВидЭлемента("ПустаяСсылка");
		КонецЕсли;
		
		СтруктураПоиска.Добавить(Элемент1); // СтрокиКолонки
			
		Элемент2 = ПолучитьРодителяПоВиду(СтрокаРодителя, ВидЭлемента("ТаблицаПоказателиВСтроках"));
		Если Элемент2 = Неопределено Тогда
			Элемент2 = ПолучитьРодителяПоВиду(СтрокаРодителя, ВидЭлемента("ТаблицаПоказателиВКолонках"));
		КонецЕсли;
		Если Элемент2 = Неопределено Тогда
			Элемент2 = ПолучитьРодителяПоВиду(СтрокаРодителя, ВидЭлемента("ТаблицаСложная"));
		КонецЕсли;
		Если Элемент2 <> Неопределено Тогда
			Элемент2 = Элемент2.ВидЭлемента;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Элемент2) Тогда
			Элемент2 = ВидЭлемента("ПустаяСсылка");
		КонецЕсли;
		
		СтруктураПоиска.Добавить(Элемент2); // ВидТаблицы
		
	КонецЕсли;
	
	ТочкаПоиска = КэшДопустимыхСочетаний;
	Для Каждого ЭлементПоиска из СтруктураПоиска Цикл
		
		НайденныеСтроки = ТочкаПоиска.Получить(ЭлементПоиска);
		Если НайденныеСтроки = Истина Тогда
			Возврат Истина;
		ИначеЕсли НайденныеСтроки = Неопределено Тогда
			Возврат Ложь;
		ИначеЕсли НайденныеСтроки.Количество() Тогда
			ТочкаПоиска = НайденныеСтроки;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПолучитьРодителяПоВиду(СтрокаЭлемента, ВидЭлемента)
	
	Если СтрокаЭлемента.ВидЭлемента = ВидЭлемента Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Возврат ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаЭлемента, ВидЭлемента);
	
КонецФункции

#КонецОбласти

#Область ДобавлениеНовогоЭлементаВОтчет

&НаКлиенте
Процедура ДобавитьВСтруктуруОтчета(НовыеЭлементы, ИдРодителя)
	
	// Определим ветку приемник структуры отчета
	Если ИдРодителя = Неопределено Тогда
		Родитель = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ЭлементыОтчета);
		ИдРодителя = Родитель.ПолучитьИдентификатор();
	Иначе
		Родитель = ЭлементыОтчета.НайтиПоИдентификатору(ИдРодителя);
	КонецЕсли;
	
	Для Каждого НовыйЭлементОтчета Из НовыеЭлементы Цикл
		
		ДанныеЭлемента = НовыйЭлементОтчета;
		Если ТипЗнч(НовыйЭлементОтчета) = Тип("Число") Тогда
			ДанныеЭлемента = ЭтаФорма[ДеревоОтправительСтроки].НайтиПоИдентификатору(НовыйЭлементОтчета);
		КонецЕсли;
		
		Если ДанныеЭлемента.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
		Если Не МожноДобавитьВСтруктуруОтчета(ВидЭлемента, ИдРодителя, ДанныеЭлемента.ЭтоСвязанный) Тогда
			Продолжить;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		// Таблицы создаем после выбора типа
		Если ВидЭлемента = ВидЭлемента("ТаблицаСложная") И НЕ ДанныеЭлемента.ЭтоСвязанный Тогда
			
			ДополнительныеПараметры = Новый Структура("Родитель, ДанныеЭлемента", Родитель, ДанныеЭлемента);
			Оповещение = Новый ОписаниеОповещения("ПриВыбореТипаТаблицы", ЭтаФорма, ДополнительныеПараметры);
			ОткрытьФорму("Справочник.ЭлементыФинансовыхОтчетов.Форма.ФормаВыбораТипТаблицы",,
																ЭтаФорма,
																,,,
																Оповещение,
																РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Продолжить;
		КонецЕсли;
		
		СтрокиПриемник = Родитель.ПолучитьЭлементы();
		Индекс = ФинансоваяОтчетностьКлиентСервер.ИндексНовойСтроки(СтрокиПриемник);//если в конце группы есть итог по группе, то новая строка должна встать перед ним
		НоваяСтрока = СтрокиПриемник.Вставить(Индекс);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЭлемента);
		НоваяСтрока.НестандартнаяКартинка = НоваяСтрока.НестандартнаяКартинка + ДанныеЭлемента.ЭтоСвязанный;
		
		ЗаполнитьДанныеНовогоЭлемента(НоваяСтрока, ДанныеЭлемента);
		ЗаполнитьДанныеСохраненногоЭлемента(НоваяСтрока, ДанныеЭлемента);
		
	КонецЦикла;
	
	Если НоваяСтрока <> Неопределено Тогда
		Если НоваяСтрока.ВидЭлемента = ВидЭлемента("ПроизводныйПоказатель") И НЕ НоваяСтрока.ЭтоСвязанный Тогда
			Элементы.ЭлементыОтчета.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			РедактироватьЭлементОтчета();
		Иначе
			Элементы.ЭлементыОтчета.ТекущаяСтрока = ИдРодителя;
			Элементы.ЭлементыОтчета.Развернуть(ИдРодителя);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореТипаТаблицы(ТипТаблицы, ДопПараметры) Экспорт
	
	Если ТипТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ДопПараметры.Родитель;
	ДанныеЭлемента = ДопПараметры.ДанныеЭлемента;
	
	СтрокиПриемник = Родитель.ПолучитьЭлементы();
	НоваяСтрока = СтрокиПриемник.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЭлемента);
	НоваяСтрока.НаименованиеДляПечати = ДанныеЭлемента.Наименование;
	
	Если ТипТаблицы = 0 Тогда
		НоваяСтрока.ВидЭлемента = ВидЭлемента("ТаблицаПоказателиВСтроках");
	ИначеЕсли ТипТаблицы = 1 Тогда
		НоваяСтрока.ВидЭлемента = ВидЭлемента("ТаблицаПоказателиВКолонках");
	ИначеЕсли ТипТаблицы = 2 Тогда
		НоваяСтрока.ВидЭлемента = ВидЭлемента("ТаблицаСложная");
	КонецЕсли;
	
	ПодчиненныеСтроки  = НоваяСтрока.ПолучитьЭлементы();
	
	ВидЭлемента = ВидЭлемента("Колонки");
	НовыйЭлементТаблицы = ПодчиненныеСтроки.Добавить();
	НовыйЭлементТаблицы.ВидЭлемента = ВидЭлемента;
	НовыйЭлементТаблицы.НаименованиеДляПечати = Строка(ВидЭлемента);
	ПостФикс = ?(ТипТаблицы = 1, "Ввод", "");
	НовыйЭлементТаблицы.НестандартнаяКартинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(ВидЭлемента, ПостФикс);
	
	ВидЭлемента = ВидЭлемента("Строки");
	НовыйЭлементТаблицы = ПодчиненныеСтроки.Добавить();
	НовыйЭлементТаблицы.ВидЭлемента = ВидЭлемента;
	НовыйЭлементТаблицы.НаименованиеДляПечати = Строка(ВидЭлемента);
	ПостФикс = ?(ТипТаблицы = 0, "Ввод", "");
	НовыйЭлементТаблицы.НестандартнаяКартинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(ВидЭлемента, ПостФикс);
	
	Если ТипТаблицы = 2 Тогда
		ВидЭлемента = ВидЭлемента("НастройкаЯчеек");
		НовыйЭлементТаблицы = ПодчиненныеСтроки.Добавить();
		НовыйЭлементТаблицы.ВидЭлемента = ВидЭлемента;
		НовыйЭлементТаблицы.НаименованиеДляПечати = Строка(ВидЭлемента);
		НовыйЭлементТаблицы.НестандартнаяКартинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(ВидЭлемента);
	КонецЕсли;
	
	Элементы.ЭлементыОтчета.Развернуть(Родитель.ПолучитьИдентификатор());
	Элементы.ЭлементыОтчета.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
	Элементы.ЭлементыОтчета.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеНовогоЭлемента(НоваяСтрока, ДанныеЭлемента)
	
	Если ДанныеЭлемента.ЭтоСвязанный Тогда
		Возврат;
	КонецЕсли;
	
	ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
	Если ВидЭлемента = ВидЭлемента("ЭлементТаблицы") Тогда  
			
		ЭлКолонки = ВидЭлемента("Колонки");
		Родитель = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(НоваяСтрока, ЭлКолонки);
		Если Не Родитель = Неопределено Тогда
			НоваяСтрока.НаименованиеДляПечати = "Колонка";
		Иначе
			НоваяСтрока.НаименованиеДляПечати = "Строка";
		КонецЕсли;
		
	ИначеЕсли ВидЭлемента = ВидЭлемента("Монетарныйпоказатель") Тогда
		
		НоваяСтрока.СчетПланаСчетов = ДанныеЭлемента.ЭлементВидаОтчетности;
		НоваяСтрока.СчетПоказательИзмерение = ДанныеЭлемента.ЭлементВидаОтчетности;
		НоваяСтрока.ТипИтога = ПредопределенноеЗначение("Перечисление.ТипыИтогов.СальдоДт");
		
	ИначеЕсли ВидЭлемента = ВидЭлемента("НемонетарныйПоказатель")
		ИЛИ ВидЭлемента = ВидЭлемента("Измерение") Тогда
		
		НоваяСтрока.СчетПоказательИзмерение = ДанныеЭлемента.ЭлементВидаОтчетности;
		НоваяСтрока.Сортировка = "ВОЗР";
		НоваяСтрока.ПредставлениеПериода = ПредопределенноеЗначение("Перечисление.ПредставлениеПериода.КонечнаяДата");
		
	ИначеЕсли ВидЭлемента = ВидЭлемента("Группа") Тогда
		НоваяСтрока.ВыводитьЗаголовокЭлемента = Истина;
		
	ИначеЕсли ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
		НоваяСтрока.ВыводитьЗаголовокЭлемента = Истина;
		ТекущаяГруппа = ПолучитьРодителяПоВиду(НоваяСтрока, ВидЭлемента("Группа"));
		Если ТекущаяГруппа = Неопределено Тогда
			ТекущаяГруппа = ПолучитьРодителяПоВиду(НоваяСтрока, ВидЭлемента("Измерение"));
		КонецЕсли;
		Если ТекущаяГруппа <> Неопределено Тогда
			НаименованиеДляПечати = НСтр("ru='Итого';uk='Разом'") + " " + НРег(ТекущаяГруппа.НаименованиеДляПечати);
			НоваяСтрока.НаименованиеДляПечати = НаименованиеДляПечати;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСохраненногоЭлемента(НоваяСтрока, ДанныеЭлемента)
	
	Если НЕ ДанныеЭлемента.ЭтоСвязанный Тогда
		Возврат;
	КонецЕсли;
	
	ВидЭлемента = ДанныеЭлемента.ВидЭлемента;
	Если ВидЭлемента = ВидЭлемента("Монетарныйпоказатель") Тогда
		НоваяСтрока.СчетПоказательИзмерение = ДанныеЭлемента.СчетПланаСчетов;
		
	ИначеЕсли ВидЭлемента = ВидЭлемента("НемонетарныйПоказатель") Тогда
		НоваяСтрока.СчетПоказательИзмерение = ДанныеЭлемента.НемонетарныйПоказатель;
		
	ИначеЕсли ВидЭлемента = ВидЭлемента("Группа")
		ИЛИ ВидЭлемента = ВидЭлемента("ИтогПоГруппе")
		ИЛИ ВидЭлемента = ВидЭлемента("ТаблицаПоказателиВСтроках")
		ИЛИ ВидЭлемента = ВидЭлемента("ТаблицаПоказателиВКолонках")
		ИЛИ ВидЭлемента = ВидЭлемента("ТаблицаСложная") Тогда
		НоваяСтрока.ВыводитьЗаголовокЭлемента = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеЭлементаОтчета

&НаКлиенте
Процедура РедактироватьЭлементОтчета()
	
	ТекущаяСтрока = Элементы.ЭлементыОтчета.ТекущиеДанные;
	
	Если ТекущаяСтрока.ВидЭлемента = ВидЭлемента("Колонки")
		ИЛИ ТекущаяСтрока.ВидЭлемента = ВидЭлемента("Строки")
		ИЛИ ТекущаяСтрока.ВидЭлемента = ВидЭлемента("ПустаяСсылка") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСтроки = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ТекущаяСтрока,ВидЭлемента("Строки")) <> Неопределено;
	Если ПустаяСтрока(ТекущаяСтрока.АдресСтруктурыЭлемента) Тогда
		ТекущаяСтрока.АдресСтруктурыЭлемента = МеждународнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(ТекущаяСтрока, УникальныйИдентификатор);
	КонецЕсли;
	Если ТекущаяСтрока.ВидЭлемента = ВидЭлемента("НастройкаЯчеек") Тогда
		ЗаполнитьАдресСтруктурыПередНастройкойЯчеек(ТекущаяСтрока.ПолучитьИдентификатор(), ТекущаяСтрока.АдресСтруктурыЭлемента);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторСтрокиЭлементаОтчета",ТекущаяСтрока.ПолучитьИдентификатор());
	ПараметрыФормы.Вставить("Ключ", 							ТекущаяСтрока.ЭлементОтчета);
	ПараметрыФормы.Вставить("ВидЭлемента", 						ТекущаяСтрока.ВидЭлемента);
	ПараметрыФормы.Вставить("ВидПоказателей", 					Объект.ВидПоказателей);
	ПараметрыФормы.Вставить("АдресЭлементаВХранилище", 			ТекущаяСтрока.АдресСтруктурыЭлемента);
	ПараметрыФормы.Вставить("ИдентификаторГлавногоХранилища", 	ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ЭлементыОтчета", 					ЭтаФорма.ЭлементыОтчета);
	ПараметрыФормы.Вставить("ДополнительныйРежимФормы", 		ОпределитьДополнительныеПараметры(ТекущаяСтрока));
	ПараметрыФормы.Вставить("ПоказатьКодСтрокиПримечание",		Истина);
	ПараметрыФормы.Вставить("ЭтоСтроки",						ЭтоСтроки);
	
	ПостОбработчик = Новый ОписаниеОповещения("ОбновитьСтрокуВидаОтчетаПослеИзменения", ЭтаФорма, ПараметрыФормы);
	
	ОткрытьФорму("Справочник.ЭлементыФинансовыхОтчетов.ФормаОбъекта", 
				ПараметрыФормы, ЭтаФорма, , , , ПостОбработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбойтиЗаполнитьАдресСтруктурыЭлементаДляНастройкиЯчеек(Строки, АдресСтруктурыЭлемента, КэшЭлементАдресВХранилище)
	
	Для Каждого Элемент из Строки.ПолучитьЭлементы() Цикл
		
		Если НЕ Элемент.ВидЭлемента = ВидЭлементаСервер("Колонки")
			И НЕ Элемент.ВидЭлемента = ВидЭлементаСервер("Строки") Тогда
			
			Если НЕ ЗначениеЗаполнено(Элемент.АдресСтруктурыЭлемента) Тогда
				Элемент.АдресСтруктурыЭлемента = 
						МеждународнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(Элемент, УникальныйИдентификатор);
			КонецЕсли;
			
			ДанныеНастроек = ПолучитьИзВременногоХранилища(АдресСтруктурыЭлемента);
		
			НайденныеСтроки = ДанныеНастроек.ЭлементыТаблицы.НайтиСтроки(Новый Структура("Строка", Элемент.ЭлементОтчета));
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				НайденнаяСтрока.Строка = Элемент.АдресСтруктурыЭлемента;
			КонецЦикла;
			НайденныеСтроки = ДанныеНастроек.ЭлементыТаблицы.НайтиСтроки(Новый Структура("Колонка", Элемент.ЭлементОтчета));
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				НайденнаяСтрока.Колонка = Элемент.АдресСтруктурыЭлемента;
			КонецЦикла;
			
			ПоместитьВоВременноеХранилище(ДанныеНастроек, АдресСтруктурыЭлемента);
			КэшЭлементАдресВХранилище.Вставить(Элемент.ЭлементОтчета, Элемент.АдресСтруктурыЭлемента);
			
		КонецЕсли;
		
		Если НЕ Элемент.ВидЭлемента = ВидЭлементаСервер("НастройкаЯчеек") Тогда
			ОбойтиЗаполнитьАдресСтруктурыЭлементаДляНастройкиЯчеек(Элемент, АдресСтруктурыЭлемента, КэшЭлементАдресВХранилище);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресСтруктурыПередНастройкойЯчеек(Идентификатор, АдресСтруктурыЭлемента)
	
	Строка = ЭлементыОтчета.НайтиПоИдентификатору(Идентификатор);
	ТаблицаСложная = ВидЭлементаСервер("ТаблицаСложная");
	Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(Строка, ТаблицаСложная);
	
	КэшЭлементАдресВХранилище = Новый Соответствие;
	ОбойтиЗаполнитьАдресСтруктурыЭлементаДляНастройкиЯчеек(Таблица, АдресСтруктурыЭлемента, КэшЭлементАдресВХранилище);
	
	ДанныеНастроек = ПолучитьИзВременногоХранилища(АдресСтруктурыЭлемента);
	Для Каждого ЭлементТаблицы из ДанныеНастроек.ЭлементыТаблицы Цикл
		
		Если ТипЗнч(ЭлементТаблицы.Элемент) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
			ЭлементТаблицы.Элемент = ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(ЭлементТаблицы.Элемент, УникальныйИдентификатор);
		КонецЕсли;
		Если ТипЗнч(ЭлементТаблицы.Строка) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
			ЭлементТаблицы.Строка = КэшЭлементАдресВХранилище[ЭлементТаблицы.Строка];
		КонецЕсли;
		Если ТипЗнч(ЭлементТаблицы.Колонка) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
			ЭлементТаблицы.Колонка = КэшЭлементАдресВХранилище[ЭлементТаблицы.Колонка];
		КонецЕсли;
		
		ДанныеЭлемента = ПолучитьИзВременногоХранилища(ЭлементТаблицы.Элемент);
		Для Каждого Операнд из ДанныеЭлемента.ОперандыФормулы Цикл
			Если НЕ ЗначениеЗаполнено(Операнд.АдресСтруктурыЭлемента) Тогда
				Операнд.АдресСтруктурыЭлемента = ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(Операнд.Операнд, УникальныйИдентификатор);
			КонецЕсли;
			ДанныеОперанда = ПолучитьИзВременногоХранилища(Операнд.АдресСтруктурыЭлемента);
			Если ДанныеОперанда.ВидЭлемента = ВидЭлементаСервер("ЯчейкаТаблицы") Тогда
				СсылкаНаЭлемент = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
																				ДанныеОперанда, 
																				"СтрокаЯчейки");
				Если ТипЗнч(СсылкаНаЭлемент) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
					ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
																	ДанныеОперанда,
																	"СтрокаЯчейки",
																	КэшЭлементАдресВХранилище[СсылкаНаЭлемент]);
				КонецЕсли;
				СсылкаНаЭлемент = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
																				ДанныеОперанда, 
																				"КолонкаЯчейки");
				Если ТипЗнч(СсылкаНаЭлемент) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
					ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
																	ДанныеОперанда,
																	"КолонкаЯчейки",
																	КэшЭлементАдресВХранилище[СсылкаНаЭлемент]);
				КонецЕсли;
				ПоместитьВоВременноеХранилище(ДанныеОперанда, Операнд.АдресСтруктурыЭлемента);
			КонецЕсли;
		КонецЦикла;
		ПоместитьВоВременноеХранилище(ДанныеЭлемента, ЭлементТаблицы.Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьДополнительныеПараметры(ТекущаяСтрока)
	
	ИмяДополнительныхРежимов = "Перечисление.ДополнительныеРежимыЭлементовОтчетов.";
	Если ТекущаяСтрока.ЭтоСвязанный Тогда
		Возврат ПредопределенноеЗначение(ИмяДополнительныхРежимов + "СвязанныйЭлемент");
	КонецЕсли;
	Если ТекущаяСтрока.ВидЭлемента = ВидЭлемента("НастройкаЯчеек") 
		ИЛИ ТекущаяСтрока.ВидЭлемента = ВидЭлемента("ПроизводныйПоказатель")
		ИЛИ ТекущаяСтрока.ВидЭлемента = ВидЭлемента("Измерение") Тогда
		Возврат ПредопределенноеЗначение(ИмяДополнительныхРежимов + "ВидОтчета");
	ИначеЕсли ТекущаяСтрока.ВидЭлемента = ВидЭлемента("Группа")
		ИЛИ ТекущаяСтрока.ВидЭлемента = ВидЭлемента("ИтогПоГруппе")
		ИЛИ ТекущаяСтрока.ВидЭлемента = ВидЭлемента("ЭлементТаблицы") Тогда
		Возврат ПредопределенноеЗначение(ИмяДополнительныхРежимов + "ПоказатьКодСтрокиПримечание");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСтрокуВидаОтчетаПослеИзменения(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеЗаполнения = МеждународнаяОтчетностьКлиентСервер.НовыеДанныеЗаполненияСтроки();
	ДанныеЗаполнения.Источник = Результат;
	ДанныеЗаполнения.СтрокаПриемник = ДополнительныеПараметры.ИдентификаторСтрокиЭлементаОтчета;
	ДанныеЗаполнения.АдресЭлементаВХранилище = ДополнительныеПараметры.АдресЭлементаВХранилище;
	ДанныеЗаполнения.Поле = ЭлементыОтчета;
	
	ФинансоваяОтчетностьКлиентСервер.ЗаполнитьСтрокуДерева(ДанныеЗаполнения);
	
	Если Результат <> Неопределено Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСвязанногоВидаэлемента

&НаКлиенте
Процедура ОбработчикВопросаРазрываСвязи(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Модифицированность = Истина;
		Если ДополнительныеПараметры.Свойство("Удалить") Тогда
			СтрокаОтчета = ЭлементыОтчета.НайтиПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрока);
			ТекущийНаборСтрок = СтрокаОтчета.ПолучитьРодителя().ПолучитьЭлементы();
			ТекущийНаборСтрок.Удалить(СтрокаОтчета);
		Иначе
			РазорватьСвязьСервер(ДополнительныеПараметры.ТекущаяСтрока);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСсылки(Команда)

	Если Элементы.ЭлементыОтчета.ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Укажите элемент отчета.';uk='Зазначте елемент звіту.'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЭлементыОтчета.ТекущиеДанные;
	ТекущийЭлементОтчета = ТекущиеДанные.ЭлементОтчета;
	Если НЕ ЗначениеЗаполнено(ТекущийЭлементОтчета) Тогда
		Возврат;
	КонецЕсли;
	
	ВидЭлемента = ТекущиеДанные.ВидЭлемента;
	Если МеждународнаяОтчетностьВызовСервера.ЕстьСсылки(ТекущийЭлементОтчета) Тогда
		ПараметрыФормы = Новый Структура("ЭлементОтчета", ТекущийЭлементОтчета);
		ПараметрыФормы.Вставить("СчетПланаСчетов", ТекущиеДанные.СчетПланаСчетов);
		Если ВидЭлемента = ВидЭлемента("ИтогПоГруппе")
			ИЛИ ВидЭлемента = ВидЭлемента("ТаблицаПоказателиВСтроках") 
			ИЛИ ВидЭлемента = ВидЭлемента("ТаблицаПоказателиВКолонках") 
			ИЛИ ВидЭлемента = ВидЭлемента("ТаблицаСложная")
			ИЛИ ВидЭлемента = ВидЭлемента("Группа") Тогда
			ПараметрыФормы.Вставить("УдалитьВсе", Истина);
		КонецЕсли;
		ПостОбработчик = Новый ОписаниеОповещения("ОбновитьСтрокуПослеРедактированияСсылок", ЭтаФорма, ПараметрыФормы);
		ОткрытьФорму("Справочник.ВидыФинансовыхОтчетов.Форма.ФормаСпискаСсылок",ПараметрыФормы,ЭтаФорма, , , , ПостОбработчик);
		
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Ссылки на элемент отчета не обнаружены.';uk='Посилання на елемент звіту не виявлені.'"));
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокуПослеРедактированияСсылок(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		Элементы.ЭлементыОтчета.ТекущиеДанные.НестандартнаяКартинка = Элементы.ЭлементыОтчета.ТекущиеДанные.НестандартнаяКартинка - 2;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСтрокДерева

&НаКлиенте
Процедура ПеренестиСтроку(Дерево, ИдентификаторЧто, ИдентификаторКуда = Неопределено, Копирование = Ложь)
	
	ТекущаяСтрока = Дерево.НайтиПоИдентификатору(ИдентификаторЧто);
	
	Если ИдентификаторКуда = Неопределено Тогда
		НовыйРодитель = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(Дерево);
	Иначе
		НовыйРодитель = Дерево.НайтиПоИдентификатору(ИдентификаторКуда);
	КонецЕсли;
	
	// Проверим, что элемент не переносится в подчиненный ему же элемент
	Родитель = НовыйРодитель.ПолучитьРодителя();
	Пока Родитель <> Неопределено Цикл
		Если Родитель = ТекущаяСтрока Тогда
			Возврат;
		КонецЕсли;
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
	Если Не МожноДобавитьВСтруктуруОтчета(ТекущаяСтрока.ВидЭлемента, ИдентификаторКуда, ТекущаяСтрока.ЭтоСвязанный) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьНедоступныеЭлементыПослеПереноса(ТекущаяСтрока, ИдентификаторКуда) Тогда
		Текст = НСтр("ru='Перенос отменен. В подчиненных элементах переносимой строки обнаружены недопустимые элементы';uk='Перенесення скасовано. У підпорядкованих елементах рядка, який переноситься, виявлені недопустимі елементи'");
		ПоказатьПредупреждение(, Текст, 60);
		Возврат;
	КонецЕсли;
	
	ЭлементыСтрок = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(НовыйРодитель);
	ВсегоЭлементов = ЭлементыСтрок.Количество();
	Если ВсегоЭлементов Тогда
		ВернутьИтогНаМесто = ЭлементыСтрок[ВсегоЭлементов - 1].ВидЭлемента = ВидЭлемента("ИтогПоГруппе");
	КонецЕсли;
	
	ФинансоваяОтчетностьКлиентСервер.УстановитьНовогоРодителя(ТекущаяСтрока, НовыйРодитель,,,УникальныйИдентификатор, Копирование);
	
	Элементы.ЭлементыОтчета.Развернуть(НовыйРодитель.ПолучитьИдентификатор(), Истина);
	
КонецПроцедуры

&НаКлиенте
Функция СкопироватьСтроку(Дерево, СтрокаИсточник, НовыйРодитель = Неопределено)

	Если НовыйРодитель = Неопределено Тогда
		НовыйРодитель = СтрокаИсточник.ПолучитьРодителя();
	КонецЕсли;

	СтрокиРодителя = НовыйРодитель.ПолучитьЭлементы();
	Индекс = ФинансоваяОтчетностьКлиентСервер.ИндексНовойСтроки(СтрокиРодителя);//если в конце группы есть итог по группе, то новая строка должна встать перед ним
	НоваяСтрока = СтрокиРодителя.Вставить(Индекс);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник,,"ЭлементОтчета");

	Если НЕ (СтрокаИсточник.ВидЭлемента = ВидЭлемента("Колонки")
		ИЛИ СтрокаИсточник.ВидЭлемента = ВидЭлемента("Строки")) Тогда
		Если ЗначениеЗаполнено(СтрокаИсточник.АдресСтруктурыЭлемента) Тогда
			НоваяСтрока.АдресСтруктурыЭлемента = КопироватьДанныеХранилища(СтрокаИсточник.АдресСтруктурыЭлемента);
		Иначе
			НоваяСтрока.АдресСтруктурыЭлемента = МеждународнаяОтчетностьКлиентСервер.ПоместитьКопиюЭлементаВХранилище(СтрокаИсточник, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;

	СтрокиТекущейСтроки = СтрокаИсточник.ПолучитьЭлементы();
	Для Каждого Подстрока Из СтрокиТекущейСтроки Цикл
		СкопироватьСтроку(Дерево, Подстрока, НоваяСтрока);
	КонецЦикла;

	Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Функция ЕстьНедоступныеЭлементыПослеПереноса(Родитель, ИдентификаторКуда)
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Для Каждого Элемент из ЭлементыРодителя Цикл
		
		Если Элемент.ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не МожноДобавитьВСтруктуруОтчета(Элемент.ВидЭлемента, ИдентификаторКуда, Элемент.ЭтоСвязанный) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ЕстьНедоступныеЭлементыПослеПереноса(Элемент, ИдентификаторКуда) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Запрет редактирования служебных элементов
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭлементыОтчета.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлементыОтчета.ВидЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПустаяСсылка());
	СписокЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
	СписокЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// Запрет редактирования ссылок на элементы из других отчетов (связанные элементы)
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭлементыОтчета.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлементыОтчета.СвязанныйЭлемент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// Оформление пустого наименования элементов
	ВидыЭлементов = Перечисления.ВидыЭлементовФинансовогоОтчета;
	ОформитьПустоеПредставление(ВидыЭлементов.ТаблицаПоказателиВСтроках, НСтр("ru='Таблица';uk='Таблиця'"));
	ОформитьПустоеПредставление(ВидыЭлементов.ТаблицаПоказателиВКолонках, НСтр("ru='Таблица';uk='Таблиця'"));
	ОформитьПустоеПредставление(ВидыЭлементов.ТаблицаСложная		, НСтр("ru='Таблица';uk='Таблиця'"));
	ОформитьПустоеПредставление(ВидыЭлементов.Группа				, НСтр("ru='Группа';uk='Група'"));
	ОформитьПустоеПредставление(ВидыЭлементов.ИтогПоГруппе			, НСтр("ru='Итог по группе показателей';uk='Підсумок по групі показників'"));
	
	// Оформление типа итога монетарных показателей
	ТипыИтогов = Перечисления.ТипыИтогов;
	ОформитьПредставлениеТипИтога(ТипыИтогов.Сальдо,	НСтр("ru='Начальное сальдо';uk='Початкове сальдо'"), Истина);
	ОформитьПредставлениеТипИтога(ТипыИтогов.СальдоДт,	НСтр("ru='Начальное сальдо Дт';uk='Початкове сальдо Дт'"), Истина);
	ОформитьПредставлениеТипИтога(ТипыИтогов.СальдоКт,	НСтр("ru='Начальное сальдо Кт';uk='Початкове сальдо Кт'"), Истина);
	ОформитьПредставлениеТипИтога(ТипыИтогов.Сальдо,	НСтр("ru='Конечное сальдо';uk='Кінцеве сальдо'"), Ложь);
	ОформитьПредставлениеТипИтога(ТипыИтогов.СальдоДт,	НСтр("ru='Конечное сальдо Дт';uk='Кінцеве сальдо Дт'"), Ложь);
	ОформитьПредставлениеТипИтога(ТипыИтогов.СальдоКт,	НСтр("ru='Конечное сальдо Кт';uk='Кінцеве сальдо Кт'"), Ложь);

	// Оформление типа итога у всех остальных элементов
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭлементыОтчетаТипИтога.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлементыОтчета.ВидЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");

	// Оформим поле обратный знак для тех у кого он задан
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭлементыОтчетаОбратныйЗнак.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлементыОтчета.ОбратныйЗнак");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлементыОтчета.ВидЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель);
	СписокЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель);
	СписокЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
	СписокЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "(-)");
	
	// Оформим поле обратный знак для тех у кого он НЕ задан
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭлементыОтчетаОбратныйЗнак.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлементыОтчета.ОбратныйЗнак");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");

КонецПроцедуры

&НаСервере
Процедура ОформитьПустоеПредставление(ВидЭлемента, ТекстПустогоПредставления)
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭлементыОтчетаПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлементыОтчета.ВидЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ВидЭлемента;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлементыОтчета.ВыводитьЗаголовокЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192, 192, 192));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстПустогоПредставления);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьПредставлениеТипИтога(ТипИтога, ТекстПредставления, НачальноеСальдо)
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭлементыОтчетаТипИтога.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлементыОтчета.НачальноеСальдо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НачальноеСальдо;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлементыОтчета.ТипИтога");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипИтога;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлементыОтчета.ВидЭлемента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстПредставления);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	ПредставлениеТипа = НСтр("ru='Вид отчета';uk='Вид звіту'");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.Заголовок = ПредставлениеТипа + НСтр("ru=' (создание)';uk=' (створення)'"); ;
	Иначе
		ЭтаФорма.Заголовок = Объект.Наименование + " (" + ПредставлениеТипа + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьКэшНаОснованииТаблицыСочетаний(ТаблицаСочетаний, Уровень = 0)
	
	Если Уровень = ТаблицаСочетаний.Колонки.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Значения = ТаблицаСочетаний.Скопировать();
	ИмяТекущейКолонки = Значения.Колонки[Уровень].Имя;
	Значения.Свернуть(ИмяТекущейКолонки);
	
	КэшРезультат = Новый Соответствие;
	Для Каждого Значение из Значения Цикл
		ТекущееЗначение = Значение[ИмяТекущейКолонки];
		ОтобранныеСочетания = ТаблицаСочетаний.Скопировать(Новый Структура(ИмяТекущейКолонки, ТекущееЗначение));
		КэшНижнегоУровня = СоздатьКэшНаОснованииТаблицыСочетаний(ОтобранныеСочетания, Уровень + 1);
		КэшРезультат.Вставить(ТекущееЗначение, КэшНижнегоУровня);
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(КэшРезультат);
	
КонецФункции

&НаКлиенте
Функция ВидЭлемента(ИмяВидаЭлемента)
	
	Если КэшВидовЭлементов = Неопределено Тогда
		КэшВидовЭлементов = Новый Соответствие;
	КонецЕсли;
	
	Значение = КэшВидовЭлементов[ИмяВидаЭлемента];
	Если Значение = Неопределено Тогда
		Значение = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета." + ИмяВидаЭлемента);
		КэшВидовЭлементов.Вставить(ИмяВидаЭлемента, Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Функция ВидЭлементаСервер(ИмяВидаЭлемента)
	
	Возврат Перечисления.ВидыЭлементовФинансовогоОтчета[ИмяВидаЭлемента];
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидыПоказателей(Результат, Параметр) Экспорт
	
	УстановитьВидыПоказателейНаСервере(Результат, Параметр);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидыПоказателейНаСервере(Результат, Параметр)
	
	Если Результат <> Неопределено Тогда
		Объект.ВидПоказателей = Результат;
		ОбновитьДеревоНовыхЭлементов();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьДеревоНовыхЭлементов()
	
	ПараметрыДерева = МеждународнаяОтчетностьКлиентСервер.НовыеПараметрыДереваЭлементов();
	ПараметрыДерева.ВидПоказателей = Объект.ВидПоказателей;
	ПараметрыДерева.БыстрыйПоиск = БыстрыйПоискНовых;
	
	МеждународнаяОтчетностьСервер.ОбновитьДеревоНовыхЭлементов(ЭтаФорма, ПараметрыДерева);
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьДеревоСохраненныхЭлементов()
	
	Если НЕ ЗначениеЗаполнено(БыстрыйПоискСохраненных)
		И НЕ ЗначениеЗаполнено(ФильтрПоВидуОтчета) Тогда
		СохраненныеЭлементы = ДеревоСохраненныхЭлементов.ПолучитьЭлементы();
		СохраненныеЭлементы.Очистить();
		Возврат;
	КонецЕсли;
	
	ПараметрыДерева = МеждународнаяОтчетностьКлиентСервер.НовыеПараметрыДереваЭлементов();
	ПараметрыДерева.ИмяЭлементаДерева = "ДеревоСохраненныхЭлементов";
	ПараметрыДерева.ФильтрПоВидуОтчета = ФильтрПоВидуОтчета;
	ПараметрыДерева.ТекущийВидОтчета = Объект.Ссылка;
	ПараметрыДерева.БыстрыйПоиск = БыстрыйПоискСохраненных;
	ПараметрыДерева.ВидПоказателей = Объект.ВидПоказателей;
	
	МеждународнаяОтчетностьСервер.ОбновитьДеревоСохраненныхЭлементов(ЭтаФорма, ПараметрыДерева);
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьДеревоОтчетаСервер(ЗначениеКопирования = Неопределено)
	
	ТекущийВидОтчета = Объект.Ссылка;
	ИдентификаторФормы = Неопределено;
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		ТекущийВидОтчета = ЗначениеКопирования;
		ИдентификаторФормы = УникальныйИдентификатор;
	КонецЕсли;
	
	ИндексКартинкиКорневойСтроки = 100;
	СтрокаЭлементыОтчета = НСтр("ru='Элементы отчета';uk='Елементи звіту'");
	Если НЕ ЗначениеЗаполнено(ТекущийВидОтчета) Тогда
		СтрокиДерева = ЭлементыОтчета.ПолучитьЭлементы();
		КорневаяСтрока = СтрокиДерева.Добавить();
		КорневаяСтрока.НаименованиеДляПечати = СтрокаЭлементыОтчета;
		КорневаяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПустаяСсылка();
		КорневаяСтрока.НестандартнаяКартинка = ИндексКартинкиКорневойСтроки;
		Возврат;
	КонецЕсли;
	
	ДеревоЭлементов = МеждународнаяОтчетностьСервер.ОбновитьДеревоОтчета(ТекущийВидОтчета);
	
	КорневаяСтрока = ДеревоЭлементов.Строки.Добавить();
	КорневаяСтрока.НаименованиеДляПечати = СтрокаЭлементыОтчета;
	КорневаяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПустаяСсылка();
	КорневаяСтрока.НестандартнаяКартинка = ИндексКартинкиКорневойСтроки;
	
	НомерСтроки = 0;
	Пока НомерСтроки < ДеревоЭлементов.Строки.Количество() Цикл
		
		Стр = ДеревоЭлементов.Строки[НомерСтроки];
		// Удалим строки по условию
		Если Стр.НестандартнаяКартинка <> ИндексКартинкиКорневойСтроки Тогда
			ФинансоваяОтчетностьКлиентСервер.УстановитьНовогоРодителя(Стр, КорневаяСтрока, Истина);
			ДеревоЭлементов.Строки.Удалить(Стр);
			Продолжить;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		ПоместитьДеревоВХранилище(ДеревоЭлементов);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоЭлементов, "ЭлементыОтчета");
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьУдаляемыеЭлементыОтчета(НастройкаЯчеекИдентификатор, ТекущаяСтрокаИдентификатор)
	
	НастройкаЯчеек = ЭлементыОтчета.НайтиПоИдентификатору(НастройкаЯчеекИдентификатор);
	ТекущаяСтрока = ЭлементыОтчета.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	Если Не ЗначениеЗаполнено(НастройкаЯчеек.АдресСтруктурыЭлемента) Тогда
		НастройкаЯчеек.АдресСтруктурыЭлемента = МеждународнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(НастройкаЯчеек, УникальныйИдентификатор);
	КонецЕсли;
	СтруктураЭлемента = ПолучитьИзВременногоХранилища(НастройкаЯчеек.АдресСтруктурыЭлемента);
	НайденныеСтроки = СтруктураЭлемента.ЭлементыТаблицы.НайтиСтроки(Новый Структура("Строка", ТекущаяСтрока.ЭлементОтчета));
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		СтруктураЭлемента.ЭлементыТаблицы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	НайденныеСтроки = СтруктураЭлемента.ЭлементыТаблицы.НайтиСтроки(Новый Структура("Строка", ТекущаяСтрока.АдресСтруктурыЭлемента));
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		СтруктураЭлемента.ЭлементыТаблицы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	НайденныеСтроки = СтруктураЭлемента.ЭлементыТаблицы.НайтиСтроки(Новый Структура("Колонка", ТекущаяСтрока.ЭлементОтчета));
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		СтруктураЭлемента.ЭлементыТаблицы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	НайденныеСтроки = СтруктураЭлемента.ЭлементыТаблицы.НайтиСтроки(Новый Структура("Колонка", ТекущаяСтрока.АдресСтруктурыЭлемента));
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		СтруктураЭлемента.ЭлементыТаблицы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	ПоместитьВоВременноеХранилище(СтруктураЭлемента, НастройкаЯчеек.АдресСтруктурыЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлементДерева(Дерево, Вверх = Истина)
	
	ВидЭлементаИтог = ВидЭлемента("ИтогПоГруппе");
	ТекущаяСтрока = Дерево.НайтиПоИдентификатору(Элементы.ЭлементыОтчета.ТекущаяСтрока);
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяКоллекция = Родитель.ПолучитьЭлементы();
	ТекущийИндекс = ТекущаяКоллекция.Индекс(ТекущаяСтрока);
	ПервыйИндекс = 0;
	ПоследнийИндекс = ТекущаяКоллекция.Количество() - 1;
	
	// Проверим условия при которых перемещение не работает
	Если ТекущаяКоллекция.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Вверх И ТекущийИндекс = 0 ИЛИ НЕ Вверх И ТекущийИндекс = ПоследнийИндекс Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ВидЭлемента = ВидЭлемента("Колонки")
		ИЛИ ТекущаяСтрока.ВидЭлемента = ВидЭлемента("Строки") Тогда
		Возврат;
	КонецЕсли;
	
	// Определим позицию итога в группе
	ИндексИтога = -1;
	Для Каждого Стр Из ТекущаяКоллекция Цикл
		Если Стр.ВидЭлемента = ВидЭлементаИтог И НЕ Стр.ЭтоСвязанный Тогда
			ИндексИтога = ТекущаяКоллекция.Индекс(Стр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// По положению итога утвердим крайние положения для простых элементов группы
	Если ИндексИтога = 0 Тогда
		ПервыйИндекс = 1;
	ИначеЕсли ИндексИтога = ПоследнийИндекс Тогда
		ПоследнийИндекс = ПоследнийИндекс - 1;
	КонецЕсли;
	
	// Расчитаем величину и направление сдвига
	Направление = ?(Вверх,-1,1);
	Сдвиг = 1;
	Если ТекущаяСтрока.ВидЭлемента = ВидЭлементаИтог И НЕ ТекущаяСтрока.ЭтоСвязанный Тогда
		Сдвиг = ПоследнийИндекс + 1;
		Если НЕ Вверх Тогда
			Сдвиг = ПоследнийИндекс;
		КонецЕсли;
	ИначеЕсли ТекущийИндекс = ПервыйИндекс И Вверх 
			ИЛИ ТекущийИндекс = ПоследнийИндекс И НЕ Вверх Тогда
		Возврат;
	КонецЕсли;
	
	// Выполним сдвиг
	ТекущаяКоллекция.Сдвинуть(ТекущийИндекс,Сдвиг * Направление);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура РазорватьСвязьСервер(ИдентификаторТекущейСтроки)
	
	ТекущаяСтрока = ЭлементыОтчета.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ТекущаяСтрока.АдресСтруктурыЭлемента = МеждународнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(ТекущаяСтрока.СвязанныйЭлемент, УникальныйИдентификатор);
	
	ДанныеСвязанного = ПолучитьИзВременногоХранилища(ТекущаяСтрока.АдресСтруктурыЭлемента);
	ЗаполнитьЗначенияСвойств(ДанныеСвязанного, ТекущаяСтрока,"НаименованиеДляПечати,Комментарий,ОбратныйЗнак");
	ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(ДанныеСвязанного,"КодСтрокиОтчета",ТекущаяСтрока.КодСтрокиОтчета);
	ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(ДанныеСвязанного,"Примечание",ТекущаяСтрока.Примечание);
	ДанныеСвязанного.Ссылка = Неопределено;
	ПоместитьВоВременноеХранилище(ДанныеСвязанного, ТекущаяСтрока.АдресСтруктурыЭлемента);
	
	ДеревоЭлемента = МеждународнаяОтчетностьСервер.ОбновитьДеревоОтчета(ТекущаяСтрока.СвязанныйЭлемент.Владелец, ТекущаяСтрока.СвязанныйЭлемент);
	Если ДеревоЭлемента.Строки.Количество() > 0 Тогда
		КопироватьДеревоЭлементов(ДеревоЭлемента.Строки[0], ТекущаяСтрока);
	КонецЕсли;
	
	ТекущаяСтрока.ЭлементОтчета = Неопределено;
	ТекущаяСтрока.СвязанныйЭлемент = Неопределено;
	ТекущаяСтрока.ЭтоСвязанный = Ложь;
	ТекущаяСтрока.НестандартнаяКартинка = ТекущаяСтрока.НестандартнаяКартинка - 1;
	
КонецПроцедуры

&НаСервере
Процедура КопироватьДеревоЭлементов(ИсходноеДерево, Копия = Неопределено, АдресаЭлементов = Неопределено, УдалитьИсходные = Ложь)
	
	КопироватьНастройкиЯчеекВХранилище(ИсходноеДерево, АдресаЭлементов);
	
	ИсходныеСтроки = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(ИсходноеДерево);
	КопииСтрок = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(Копия);
	Для Каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
		
		НоваяСтрока = КопииСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока,,"ЭлементОтчета");
		Если НЕ ИсходнаяСтрока.ВидЭлемента.Пустая()
			И НЕ ИсходнаяСтрока.ВидЭлемента = ВидЭлементаСервер("Колонки")
			И НЕ ИсходнаяСтрока.ВидЭлемента = ВидЭлементаСервер("Строки")
			И НЕ ИсходнаяСтрока.ВидЭлемента = ВидЭлементаСервер("НастройкаЯчеек") Тогда
		
			НоваяСтрока.АдресСтруктурыЭлемента = ПоместитьКопиюВХранилище(ИсходнаяСтрока.ЭлементОтчета, АдресаЭлементов);
			
		КонецЕсли;
		
		Если ИсходнаяСтрока.Строки.Количество() Тогда
			КопироватьДеревоЭлементов(ИсходнаяСтрока, НоваяСтрока, АдресаЭлементов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьДеревоВХранилище(ИсходноеДерево, АдресаЭлементов = Неопределено)
	
	КопироватьНастройкиЯчеекВХранилище(ИсходноеДерево, АдресаЭлементов);
	
	ИсходныеСтроки = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(ИсходноеДерево);
	Для Каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
		
		Если НЕ ИсходнаяСтрока.ВидЭлемента.Пустая()
			И НЕ ИсходнаяСтрока.ВидЭлемента = ВидЭлементаСервер("Колонки")
			И НЕ ИсходнаяСтрока.ВидЭлемента = ВидЭлементаСервер("Строки")
			И НЕ ИсходнаяСтрока.ВидЭлемента = ВидЭлементаСервер("НастройкаЯчеек") Тогда
		
			ИсходнаяСтрока.АдресСтруктурыЭлемента = ПоместитьКопиюВХранилище(ИсходнаяСтрока.ЭлементОтчета, АдресаЭлементов);
			
		КонецЕсли;
		
		ИсходнаяСтрока.ЭлементОтчета = Неопределено;
		Если ИсходнаяСтрока.Строки.Количество() Тогда
			ПоместитьДеревоВХранилище(ИсходнаяСтрока, АдресаЭлементов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьКопиюВХранилище(ИсходныйЭлемент, АдресаЭлементов = Неопределено)
	
	Если АдресаЭлементов = Неопределено Тогда
		АдресаЭлементов = Новый Соответствие;
	КонецЕсли;
	
	АдресСтруктурыЭлемента = АдресаЭлементов[ИсходныйЭлемент];
	Если АдресСтруктурыЭлемента <> Неопределено Тогда
		Возврат АдресСтруктурыЭлемента;
	КонецЕсли;
	АдресСтруктурыЭлемента = МеждународнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(ИсходныйЭлемент, УникальныйИдентификатор);
	ДанныеЭлемента = ПолучитьИзВременногоХранилища(АдресСтруктурыЭлемента);
	ДанныеЭлемента.Ссылка = Неопределено;
	АдресаЭлементов.Вставить(ИсходныйЭлемент, АдресСтруктурыЭлемента);

	Для Каждого Операнд Из ДанныеЭлемента.ОперандыФормулы Цикл
		Операнд.АдресСтруктурыЭлемента = ПоместитьКопиюВХранилище(Операнд.Операнд, АдресаЭлементов);
		АдресаЭлементов.Вставить(Операнд.Операнд, Операнд.АдресСтруктурыЭлемента);
		Операнд.Операнд = Неопределено;
	КонецЦикла;
	Поля = Новый Структура("Строка,Колонка,Элемент");
	Для Каждого ЭлементТаблицы Из ДанныеЭлемента.ЭлементыТаблицы Цикл
		
		Для Каждого Поле Из Поля Цикл
			Адрес = АдресаЭлементов[ЭлементТаблицы[Поле.Ключ]];
			Если Адрес = Неопределено Тогда
				Адрес = ПоместитьКопиюВХранилище(ЭлементТаблицы[Поле.Ключ], АдресаЭлементов);
				АдресаЭлементов.Вставить(ЭлементТаблицы[Поле.Ключ], Адрес);
			КонецЕсли;
			ЭлементТаблицы[Поле.Ключ] = Адрес;
		КонецЦикла;
		
	КонецЦикла;
	ПоместитьВоВременноеХранилище(ДанныеЭлемента, АдресСтруктурыЭлемента);
	Возврат АдресСтруктурыЭлемента;
	
КонецФункции

&НаСервере
Процедура КопироватьНастройкиЯчеекВХранилище(ИсходноеДерево, АдресаЭлементов)
	
	Если АдресаЭлементов = Неопределено Тогда
		АдресаЭлементов = Новый Соответствие;
		ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек;
		НайденныеСтроки = ИсходноеДерево.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", ВидЭлемента), Истина);
		Для Каждого НастройкаЯчеек Из НайденныеСтроки Цикл
			НастройкаЯчеек.АдресСтруктурыЭлемента = ПоместитьКопиюВХранилище(НастройкаЯчеек.ЭлементОтчета, АдресаЭлементов);
			НастройкаЯчеек.ЭлементОтчета = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КопироватьДанныеХранилища(АдресИсходныхДанных, АдресаЭлементов = Неопределено)
	
	Если АдресаЭлементов = Неопределено Тогда
		АдресаЭлементов = Новый Соответствие;
	КонецЕсли;
	
	ИсходныеДанные = ПолучитьИзВременногоХранилища(АдресИсходныхДанных);
	ИсходныеДанные.Ссылка = Неопределено;
	
	Для Каждого Операнд Из ИсходныеДанные.ОперандыФормулы Цикл
		Если ЗначениеЗаполнено(Операнд.АдресСтруктурыЭлемента) Тогда
			Операнд.АдресСтруктурыЭлемента = КопироватьДанныеХранилища(Операнд.АдресСтруктурыЭлемента);
		Иначе
			Операнд.АдресСтруктурыЭлемента = ПоместитьКопиюВХранилище(Операнд.Операнд, АдресаЭлементов);
		КонецЕсли;
		Операнд.Операнд = Неопределено;
	КонецЦикла;
	
	Поля = Новый Структура("Строка,Колонка,Элемент");
	Для Каждого ЭлементТаблицы Из ИсходныеДанные.ЭлементыТаблицы Цикл
		
		Для Каждого Поле Из Поля Цикл
			Если ТипЗнч(ЭлементТаблицы[Поле.Ключ]) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
				Адрес = ПоместитьКопиюВХранилище(ЭлементТаблицы[Поле.Ключ], АдресаЭлементов);
			Иначе
				Адрес = КопироватьДанныеХранилища(ЭлементТаблицы[Поле.Ключ]);
			КонецЕсли;
			ЭлементТаблицы[Поле.Ключ] = Адрес;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ИсходныеДанные, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура РазвернутьДеревоОтчета()
	
	Элементы.ЭлементыОтчета.Развернуть(ЭлементыОтчета.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
	
КонецПроцедуры

&НаСервере
Функция ВидыИспользуемыхПоказателей()

	ВидыПоказателей = Новый Структура("МеждународныйУчет,РеглУчет",Ложь,Ложь);
	ДеревоОтчета = РеквизитФормыВЗначение("ЭлементыОтчета");
	
	МонетарныйПоказатель = ВидЭлементаСервер("МонетарныйПоказатель");
	НайденныеСтроки = ДеревоОтчета.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", МонетарныйПоказатель), Истина);
	Для Каждого СтрокаОтчета Из НайденныеСтроки Цикл
		ПроверитьТип(ВидыПоказателей, СтрокаОтчета.СчетПланаСчетов);
		Если ВидыПоказателей.МеждународныйУчет И ВидыПоказателей.РеглУчет Тогда
			Возврат ВидыПоказателей;
		КонецЕсли;
	КонецЦикла;// по монетарным показателям
	
	ПроизводныйПоказатель = ВидЭлементаСервер("ПроизводныйПоказатель");
	НайденныеСтроки = ДеревоОтчета.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", ПроизводныйПоказатель), Истина);
	Для Каждого СтрокаОтчета Из НайденныеСтроки Цикл
		ДанныеЭлемента = ДанныеЭлемента(СтрокаОтчета);
		ПроверитьСчетаФормулы(ДанныеЭлемента, ВидыПоказателей);
		Если ВидыПоказателей.МеждународныйУчет И ВидыПоказателей.РеглУчет Тогда
			Возврат ВидыПоказателей;
		КонецЕсли;
	КонецЦикла;// по производным показателям
	
	ВидЭлемента = ВидЭлементаСервер("НастройкаЯчеек");
	НайденныеСтроки = ДеревоОтчета.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", ВидЭлемента), Истина);
	Для Каждого СтрокаОтчета Из НайденныеСтроки Цикл
		ДанныеЯчеек = ДанныеЭлемента(СтрокаОтчета);
		Для Каждого ЭлементыТаблицы Из ДанныеЯчеек.ЭлементыТаблицы Цикл
			ДанныеЭлемента = ДанныеЭлемента(ЭлементыТаблицы.Элемент);
			Если ДанныеЭлемента.ВидЭлемента = МонетарныйПоказатель Тогда
				Счет = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ЭлементыТаблицы.Элемент,"СчетПланаСчетов");
				ПроверитьТип(ВидыПоказателей, Счет);
				Если ВидыПоказателей.МеждународныйУчет И ВидыПоказателей.РеглУчет Тогда
					Возврат ВидыПоказателей;
				КонецЕсли;
			КонецЕсли;// это монетарный показатель
			Если ДанныеЭлемента.ВидЭлемента = ПроизводныйПоказатель Тогда
				ПроверитьСчетаФормулы(ДанныеЭлемента, ВидыПоказателей);
				Если ВидыПоказателей.МеждународныйУчет И ВидыПоказателей.РеглУчет Тогда
					Возврат ВидыПоказателей;
				КонецЕсли;
			КонецЕсли;// это производный показатель
		КонецЦикла;// по элементам таблицы
	КонецЦикла;// по настройкам ячеек
	
	Возврат ВидыПоказателей;

КонецФункции

&НаСервере
Процедура ПроверитьТип(ВидыПоказателей, СчетПланаСчетов)
	Если ЗначениеЗаполнено(СчетПланаСчетов) Тогда
		Если ТипЗнч(СчетПланаСчетов) = Тип("ПланСчетовСсылка.Международный") Тогда
			ВидыПоказателей.МеждународныйУчет = Истина;
		ИначеЕсли ТипЗнч(СчетПланаСчетов) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
			ВидыПоказателей.РеглУчет = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДанныеЭлемента(СтрокаОтчета)
	
	Адрес = "";
	Если ТипЗнч(СтрокаОтчета) = Тип("СтрокаДереваЗначений") Тогда
		Адрес = СтрокаОтчета.АдресСтруктурыЭлемента;
	ИначеЕсли ТипЗнч(СтрокаОтчета) = Тип("Строка") Тогда
		Адрес = СтрокаОтчета;
	КонецЕсли;
	
	Если ПустаяСтрока(Адрес) Тогда
		Адрес = МеждународнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(СтрокаОтчета,УникальныйИдентификатор);
	КонецЕсли;
	Возврат ПолучитьИзВременногоХранилища(Адрес);
	
КонецФункции

&НаСервере
Процедура ПроверитьСчетаФормулы(ДанныеЭлемента, ВидыПоказателей)
	
	Для Каждого Операнд Из ДанныеЭлемента.ОперандыФормулы Цикл
		Если ЗначениеЗаполнено(Операнд.АдресСтруктурыЭлемента) Тогда
			Счет = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Операнд.АдресСтруктурыЭлемента,"СчетПланаСчетов");
		ИначеЕсли ЗначениеЗаполнено(Операнд.Операнд) Тогда
			Счет = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Операнд.Операнд,"СчетПланаСчетов");
		КонецЕсли;
		ПроверитьТип(ВидыПоказателей, Счет);
		Если ВидыПоказателей.МеждународныйУчет И ВидыПоказателей.РеглУчет Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти