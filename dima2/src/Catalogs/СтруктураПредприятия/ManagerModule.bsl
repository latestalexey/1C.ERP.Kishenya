#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
//Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов
//
//	Возвращаемое значение:
//		Массив - массив имен реквизитов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значание:
//	Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	//++ НЕ УТКА
	Результат.Добавить("ПодразделениеДиспетчер");
	
	Результат.Добавить("ИнтервалПланирования;
		|НачалоИнтервалаПланированияДень, ОкончаниеИнтервалаПланированияДень,
		|НачалоИнтервалаПланированияНеделяДень, НачалоИнтервалаПланированияНеделяВремя,
		|ОкончаниеИнтервалаПланированияНеделяДень, ОкончаниеИнтервалаПланированияНеделяВремя");
	Результат.Добавить("УправлениеМаршрутнымиЛистами");
	Результат.Добавить("СпособПооперационногоУправления");
	//-- НЕ УТКА
	
	Результат.Добавить("ПроизводственноеПодразделение");
	Результат.Добавить("ПроизводствоПоЗаказам");
	Результат.Добавить("ПроизводствоБезЗаказов");
	Результат.Добавить("ИспользуетсяСписаниеЗатратНаВыпуск;
		|ОтдельнымДокументом, ПоПравиламРаспределения");
		
	Возврат Результат;
	
КонецФункции

//++ НЕ УТКА

// Возвращает даты по которые нужно заполнить доступность
//
// Параметры:
//  Подразделение	- СправочникСсылка.СтруктураПредприятия - подразделение для которого нужно получить данные
//
// Возвращаемое значение:
//   Структура   - Даты по которые нужно заполнить доступность
//
Функция ДоступностьТребуетсяЗаполнитьПо(Подразделение) Экспорт
	
	ДоступностьДляГрафикаНужноЗаполнитьПо = '000101010000';
	ГрафикРаботыРЦНужнозаполнитьПо = '000101010000';
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураПредприятия.ЗаполнениеДоступностиДляГрафикаПроизводстваНапоминаниеДней,
	|	СтруктураПредприятия.ЗаполнениеДоступностиДляРасписанияРЦНапоминаниеДней
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Ссылка = &Подразделение";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущаяДатаСеанса = НачалоДня(ТекущаяДатаСеанса());
		Если Выборка.ЗаполнениеДоступностиДляГрафикаПроизводстваНапоминаниеДней <> 0 Тогда
			ДоступностьДляГрафикаНужноЗаполнитьПо = ТекущаяДатаСеанса + Выборка.ЗаполнениеДоступностиДляГрафикаПроизводстваНапоминаниеДней * 86400;
		КонецЕсли; 
		Если Выборка.ЗаполнениеДоступностиДляРасписанияРЦНапоминаниеДней <> 0 Тогда
			ГрафикРаботыРЦНужнозаполнитьПо = ТекущаяДатаСеанса + Выборка.ЗаполнениеДоступностиДляРасписанияРЦНапоминаниеДней * 86400;
		КонецЕсли; 
	КонецЕсли; 
	
	ТребуетсяЗаполнитьПо = Новый Структура;
	ТребуетсяЗаполнитьПо.Вставить("ДоступностьДляГрафикаНужноЗаполнитьПо", ДоступностьДляГрафикаНужноЗаполнитьПо);
	ТребуетсяЗаполнитьПо.Вставить("ГрафикРаботыРЦНужнозаполнитьПо", ГрафикРаботыРЦНужнозаполнитьПо);
	
	Возврат ТребуетсяЗаполнитьПо;

КонецФункции

// Заполняет служебные константы ИспользоватьМетодикуББВ, ИспользоватьМетодикуПооперационноеПланирование
// и ИспользоватьМетодикуРегистрацияОпераций.
//
Процедура ЗаполнитьИспользуемыеМетодикиУправления() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СтруктураПредприятия.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.МетодикаББВ)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИспользоватьМетодикуББВ,
	|	МАКСИМУМ(ИспользоватьМетодикуББВ.Значение) КАК ИспользоватьМетодикуББВЗначение,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СтруктураПредприятия.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.ПОоперационноеПланирование)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИспользоватьМетодикуПооперационноеПланирование,
	|	МАКСИМУМ(ИспользоватьМетодикуПооперационноеПланирование.Значение) КАК ИспользоватьМетодикуПооперационноеПланированиеЗначение,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СтруктураПредприятия.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИспользоватьМетодикуРегистрацияОпераций,
	|	МАКСИМУМ(ИспользоватьМетодикуРегистрацияОпераций.Значение) КАК ИспользоватьМетодикуРегистрацияОперацийЗначение
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия,
	|	Константа.ИспользоватьМетодикуББВ КАК ИспользоватьМетодикуББВ,
	|	Константа.ИспользоватьМетодикуПооперационноеПланирование КАК ИспользоватьМетодикуПооперационноеПланирование,
	|	Константа.ИспользоватьМетодикуРегистрацияОпераций КАК ИспользоватьМетодикуРегистрацияОпераций");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если НЕ Выборка.ИспользоватьМетодикуББВ = Выборка.ИспользоватьМетодикуББВЗначение Тогда
			Константы.ИспользоватьМетодикуББВ.Установить(Выборка.ИспользоватьМетодикуББВ);
		КонецЕсли;
		
		Если НЕ Выборка.ИспользоватьМетодикуПооперационноеПланирование = Выборка.ИспользоватьМетодикуПооперационноеПланированиеЗначение Тогда
			Константы.ИспользоватьМетодикуПооперационноеПланирование.Установить(Выборка.ИспользоватьМетодикуПооперационноеПланирование);
		КонецЕсли;
		
		Если НЕ Выборка.ИспользоватьМетодикуРегистрацияОпераций = Выборка.ИспользоватьМетодикуРегистрацияОперацийЗначение Тогда
			Константы.ИспользоватьМетодикуРегистрацияОпераций.Установить(Выборка.ИспользоватьМетодикуРегистрацияОпераций);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//-- НЕ УТКА

// Получает подразделение-диспетчер, если оно одно в ИБ
// Если подразделение-диспетчер не передано в качестве параметра или передано пустое,
//	возвращает единственное в информационной базе подразделение-диспетчер. 
// Если подразделений-диспетчеров в базе несколько, 
//	возвращает подразделение-диспетчер из настроек пользователя.
// Если подразделение-диспетчер не указано в настройках пользователя,
//	возвращает пустое подразделение.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - ссылка на пользователя
//
// Возвращаемое значение:
//  СправочникСсылка.СтруктураПредприятия
//
Функция ПолучитьПодразделениеДиспетчерПоУмолчанию(Знач Пользователь = Неопределено) Экспорт
	
//++ НЕ УТКА
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	НЕ СтруктураПредприятия.ПометкаУдаления
		|	И СтруктураПредприятия.ПодразделениеДиспетчер
		|");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		
		Подразделение = Выборка.Подразделение;
		
	ИначеЕсли ЗначениеЗаполнено(Пользователь) Тогда
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Пользователи.Подразделение КАК Подразделение
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Ссылка = &Пользователь
			|	И ЕСТЬNULL(Пользователи.Подразделение.ПодразделениеДиспетчер, ЛОЖЬ)
			|");
			
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Подразделение = Выборка.Подразделение;
		Иначе
			Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
//-- НЕ УТКА
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
//++ НЕ УТКА
	КонецЕсли;
//-- НЕ УТКА
	
	Возврат Подразделение;

КонецФункции

//++ НЕ УТ

// Возвращает элемент справочника СтруктураПредприятия, в котором числится физическое лицо.
//
// Параметры:
//  Организация 	- СправочникСсылка.Организации - организация, в которой работает сотрудник
//  ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица - физическое лицо, подразделение которого требуется получить
//  Период			- Дата - дата, на которую требуется получить данные
//
// Возвращаемое значение:
//   СправочникСсылка.СтруктураПредприятия   - подразделение организационной структуры.
//
Функция МестоСотрудникаВСтруктуреПредприятия(Организация, ФизическоеЛицо, Период) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПериодДанных = ?(ЗначениеЗаполнено(Период), Период, ТекущаяДатаСеанса());
	
	ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(
	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо),
	Истина,
	Организация,
	ПериодДанных);
	
	Если ОсновныеСотрудники.Количество() = 0 Тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	// заполнение подразделений по кадровым данным сотрудников
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
		Ложь,
		ОсновныеСотрудники[0].Сотрудник,
		"МестоВСтруктуреПредприятия",
		Период);
	
	Если КадровыеДанные.Количество() > 0 Тогда
		Возврат КадровыеДанные[0].МестоВСтруктуреПредприятия;
	Иначе
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Проверяет использование параметров производства
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки
//
Процедура ПроверитьИспользованиеПараметровПроизводства(Параметры, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"
	//++ НЕ УТКА
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыРабочихЦентров.Ссылка
	|ИЗ
	|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|ГДЕ
	|	ВидыРабочихЦентров.Подразделение = &Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	МаршрутныйЛистПроизводства.Ссылка
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПооперационноеРасписание.ИдентификаторОперации
	|ИЗ
	|	РегистрСведений.ПооперационноеРасписание КАК ПооперационноеРасписание
	|ГДЕ
	|	ПооперационноеРасписание.Подразделение = &Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказНаПроизводство.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Подразделение = &Подразделение
	|	И НЕ ЗаказНаПроизводство.ПометкаУдаления
	|	И ЗаказНаПроизводство.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|		ПО ЭтапыПроизводства.Владелец = РесурсныеСпецификации.Ссылка
	|ГДЕ
	|	ЭтапыПроизводства.Подразделение = &Подразделение
	|	И НЕ РесурсныеСпецификации.ПометкаУдаления
	|	И НЕ ЭтапыПроизводства.ПометкаУдаления
	|	И РесурсныеСпецификации.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Закрыта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//-- НЕ УТКА
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыпускПродукции.Ссылка
	|ИЗ
	|	Документ.ВыпускПродукции КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Подразделение = &Подразделение
	|	И НЕ ВыпускПродукции.ВыпускПоРаспоряжениям
	|	И НЕ ВыпускПродукции.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Подразделение", Параметры.Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	//++ НЕ УТКА
	ЭтоКА = ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация");
	
	Если НЕ ЭтоКА Тогда
		
		ИнтервалПланированияИспользуется           = НЕ Результат[0].Пустой();
		УправлениеМаршрутнымиЛистамиИспользуется   = НЕ Результат[1].Пустой();
		ПооперационноеРасписаниеИспользуется       = НЕ Результат[2].Пустой();
		
		ИспользуетсяКакДиспетчер                   = НЕ Результат[3].Пустой();
		ИспользуетсяДляПроизводстваПоЗаказам       = НЕ Результат[4].Пустой();
		ИспользуетсяДляПроизводстваБезЗаказов      = НЕ Результат[5].Пустой();
		
	Иначе
	//-- НЕ УТКА
		ИнтервалПланированияИспользуется           = Ложь;
		УправлениеМаршрутнымиЛистамиИспользуется   = Ложь;
		ПооперационноеРасписаниеИспользуется       = Ложь;
		
		ИспользуетсяКакДиспетчер                   = Ложь;
		ИспользуетсяДляПроизводстваПоЗаказам       = Ложь;
		ИспользуетсяДляПроизводстваБезЗаказов      = НЕ Результат[0].Пустой();
	//++ НЕ УТКА	
	КонецЕсли;
	//-- НЕ УТКА
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ИнтервалПланированияИспользуется",         ИнтервалПланированияИспользуется);
	РезультатПроверки.Вставить("УправлениеМаршрутнымиЛистамиИспользуется", УправлениеМаршрутнымиЛистамиИспользуется);
	РезультатПроверки.Вставить("ПооперационноеРасписаниеИспользуется",     ПооперационноеРасписаниеИспользуется);
	РезультатПроверки.Вставить("ИспользуетсяКакДиспетчер",                 ИспользуетсяКакДиспетчер);
	РезультатПроверки.Вставить("ИспользуетсяДляПроизводстваПоЗаказам",     ИспользуетсяДляПроизводстваПоЗаказам);
	РезультатПроверки.Вставить("ИспользуетсяДляПроизводстваБезЗаказов",    ИспользуетсяДляПроизводстваБезЗаказов);
	
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресХранилища);
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	//++ НЕ УТ
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ПодразделениеДиспетчерИлиПроизводственноеПодразделение") Тогда
		ПроизводствоВызовСервера.СтруктураПредприятияОбработкаПолученияДанныхВыбора(
					ДанныеВыбора, 
					Параметры, 
					СтандартнаяОбработка);
	КонецЕсли; 
	//-- НЕ УТ
	
	Возврат; // В УТ обработчик пустой
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

//++ НЕ УТ

Процедура ОбновитьОбъект(Параметры) Экспорт

	ПолноеИмяОбъекта = "Справочник.СтруктураПредприятия";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
 
 	Пока Выборка.Следующий() Цикл
 		
 		НачатьТранзакцию();
		
 		Попытка
			
 			Блокировка = Новый БлокировкаДанных;
 			ЭлементБлокировки = Блокировка.Добавить("Справочник.СтруктураПредприятия");
 			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
 			Блокировка.Заблокировать();
 			
 			ДанныеОбъекта = Выборка.Ссылка.ПолучитьОбъект();
 			
			Если ДанныеОбъекта = Неопределено ИЛИ ЗначениеЗаполнено(ДанныеОбъекта.СпособПолученияПолуфабрикатов) Тогда
 				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
 				Продолжить;
 			КонецЕсли;
			
			ДанныеОбъекта.СпособПолученияПолуфабрикатов = Перечисления.СпособыПолученияПолуфабрикатовПроизводимыхВПроцессе.Напрямую;
			
 			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
	
			ЗафиксироватьТранзакцию();
			
 		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать объект: %Ссылка% по причине: %Причина%';uk='Не вдалося обробити об''єкт: %Ссылка% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
									
 		КонецПопытки;
 
 	КонецЦикла;
 		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ОбновитьОбъект_ОтметитьКОбработке(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.СпособПолученияПолуфабрикатов = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияПолуфабрикатовПроизводимыхВПроцессе.ПустаяСсылка)";
	
	СписокСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СписокСсылок);
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#КонецЕсли
