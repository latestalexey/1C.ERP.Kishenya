#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ПроизводственноеПодразделение")
		И ДанныеЗаполнения.ПроизводственноеПодразделение Тогда
		
		ИспользуетсяПроизводствоПоЗаказам = Неопределено;
		ИспользуетсяПроизводствоБезЗаказов = Неопределено;
		
		ДанныеЗаполнения.Свойство("ПроизводствоПоЗаказам", ИспользуетсяПроизводствоПоЗаказам);
		ДанныеЗаполнения.Свойство("ПроизводствоБезЗаказов", ИспользуетсяПроизводствоБезЗаказов);
		
		Если Не ЗначениеЗаполнено(ИспользуетсяПроизводствоПоЗаказам) И Не ЗначениеЗаполнено(ИспользуетсяПроизводствоБезЗаказов) Тогда
			
			Если ПолучитьФункциональнуюОпцию("УправлениеПредприятием") Тогда
				ДанныеЗаполнения.Вставить("ПроизводствоПоЗаказам", Истина);
			Иначе
				ДанныеЗаполнения.Вставить("ПроизводствоБезЗаказов", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВариантОбособленногоУчетаТоваров = Перечисления.ВариантыОбособленногоУчетаТоваров.НеВедется;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	//++ НЕ УТКА
	Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование Тогда
		
		СпособДоЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СпособПооперационногоУправления");
		Если ЗначениеЗаполнено(СпособДоЗаписи) И НЕ СпособДоЗаписи = СпособПооперационногоУправления Тогда
			ПриИзмененииСпособаПооперационногоУправления(СпособДоЗаписи, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ УТКА

	// Установка реквизита РеквизитДопУпорядочивания
	Если НЕ Отказ И РеквизитДопУпорядочивания = 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Таблица.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК Таблица
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочивания УБЫВ");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		РеквизитДопУпорядочивания = ?(Не ЗначениеЗаполнено(Выборка.РеквизитДопУпорядочивания), 1, Выборка.РеквизитДопУпорядочивания + 1);
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
	Если ЭтоНовый() Тогда
		ИзменилсяПризнакПроизводственное = ПроизводственноеПодразделение;
	Иначе
		ПроизводственноеПодразделениеСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка,"ПроизводственноеПодразделение");
		ИзменилсяПризнакПроизводственное = ПроизводственноеПодразделениеСсылка <> ПроизводственноеПодразделение;
	КонецЕсли;
		
	ДополнительныеСвойства.Вставить("ИзменилсяПризнакПроизводственное", ИзменилсяПризнакПроизводственное);
	
	//++ НЕ УТ
	ОбновитьФлагИспользованияСерий();
	//-- НЕ УТ
КонецПроцедуры

//++ НЕ УТ
Процедура ПриЗаписи()
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;

	ДобавитьПодразделениеВТЧПолитикиУчетаСерийВидовНоменклатуры();
	
	//++ НЕ УТКА
	Справочники.СтруктураПредприятия.ЗаполнитьИспользуемыеМетодикиУправления();
	//-- НЕ УТКА
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.Ссылка КАК Ссылка,
	|	ВидыНоменклатурыПолитикиУчетаСерий.НомерСтроки КАК НомерСтроки 
	|ИЗ
	|	Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|ГДЕ
	|	ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад
	|	И НЕ ВидыНоменклатурыПолитикиУчетаСерий.Ссылка.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры";
	
	Запрос.УстановитьПараметр("Склад", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВидНоменклатурыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидНоменклатурыОбъект.ПолитикиУчетаСерий.Удалить(ВидНоменклатурыОбъект.ПолитикиУчетаСерий[Выборка.НомерСтроки - 1]);
		
		ВидНоменклатурыОбъект.ДополнительныеСвойства.Вставить("ПропуститьЗаполнениеТЧПолитикиУчетаСерий");
		ВидНоменклатурыОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаИспользованияСерий");
		ВидНоменклатурыОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаКонтроляОперативныхОстатков");
		ВидНоменклатурыОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры
//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТ
Процедура ОбновитьФлагИспользованияСерий()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ПропуститьОбновлениеФлагаИспользованияСерий") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка)
		Или Не ПроизводственноеПодразделение Тогда
		ИспользоватьСерииНоменклатуры  = Ложь;
		УчитыватьСебестоимостьПоСериям = Ложь;
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.ИспользоватьСерииНоменклатуры) КАК ИспользоватьСерииНоменклатуры,
	|	МАКСИМУМ(ВложенныйЗапрос.УчитыватьСебестоимостьПоСериям) КАК УчитыватьСебестоимостьПоСериям
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК ИспользоватьСерииНоменклатуры,
	|		ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям, ЛОЖЬ) КАК УчитыватьСебестоимостьПоСериям
	|	ИЗ
	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ПО СтруктураПредприятия.Ссылка = ПолитикиУчетаСерий.Склад
	|	ГДЕ
	|		СтруктураПредприятия.Ссылка = &Подразделение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИСТИНА,
	|		ВидыНоменклатуры.ПолитикаУчетаСерийДляСкладов.УчитыватьСебестоимостьПоСериям
	|	ИЗ
	|		Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|	ГДЕ
	|		ВидыНоменклатуры.ЕдинаяНастройкаСерийДляПодразделений) КАК ВложенныйЗапрос";
	Запрос.УстановитьПараметр("Подразделение", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ИспользоватьСерииНоменклатуры  = Выборка.ИспользоватьСерииНоменклатуры;
	УчитыватьСебестоимостьПоСериям = Выборка.УчитыватьСебестоимостьПоСериям;
	
КонецПроцедуры

Процедура ДобавитьПодразделениеВТЧПолитикиУчетаСерийВидовНоменклатуры()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") 
		И (ДополнительныеСвойства.ЭтоНовый
		И ПроизводственноеПодразделение 
		Или ДополнительныеСвойства.ИзменилсяПризнакПроизводственное) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.ЕдинаяНастройкаСерийДляПодразделений
		|	И НЕ ВидыНоменклатуры.НастройкиСерийБерутсяИзДругогоВидаНоменклатуры
		|	И ВидыНоменклатуры.ИспользоватьСерии";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ВидОбъект = Выборка.Ссылка.ПолучитьОбъект();
			НужноЗаписать = Ложь;
			Если ПроизводственноеПодразделение Тогда
				НоваяСтрока = ВидОбъект.ПолитикиУчетаСерий.Добавить();
				НоваяСтрока.Склад 				= Ссылка;
				НоваяСтрока.ПолитикаУчетаСерий  = ВидОбъект.ПолитикаУчетаСерийДляПодразделений;
				НужноЗаписать = Истина;
			Иначе
				
				НайденнаяСтрока = ВидОбъект.ПолитикиУчетаСерий.Найти(Ссылка, "Склад");
				
				Если НайденнаяСтрока <> Неопределено Тогда
					ВидОбъект.ПолитикиУчетаСерий.Удалить(НайденнаяСтрока);
					НужноЗаписать = Истина;
				КонецЕсли;
			КонецЕсли;	
						
			Если НужноЗаписать Тогда
				ВидОбъект.ДополнительныеСвойства.Вставить("ПропуститьЗаполнениеТЧПолитикиУчетаСерий");
				ВидОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаИспользованияСерий");
				ВидОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаКонтроляОперативныхОстатков");
				ВидОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

#КонецОбласти

#Область Прочее

//++ НЕ УТКА

Процедура ПриИзмененииСпособаПооперационногоУправления(СпособДоИзменения, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерБлокировок = РегистрыСведений.БлокировкиПооперационногоРасписания;
	
	Если СпособДоИзменения = Перечисления.СпособыУправленияОперациями.РегистрацияОтклонений Тогда
		
		МенеджерБлокировок.ЗаблокироватьИзмененСпособУправления(Ссылка);
		
	Иначе
		
		РасписаниеЗаблокировано = МенеджерБлокировок.РасписаниеПодразделенияЗаблокировано(
			Ссылка, Перечисления.ПричиныБлокировокПооперационногоРасписания.ИзмененСпособУправления);
			
		Если РасписаниеЗаблокировано Тогда
			МенеджерБлокировок.РазблокироватьИзмененСпособУправления(Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#КонецЕсли