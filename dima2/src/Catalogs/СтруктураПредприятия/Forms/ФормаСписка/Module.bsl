
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	УстановитьУсловноеОформление();
	
	Если Параметры.ТолькоПроизводственныеПодразделения Тогда
		Заголовок = НСтр("ru='Производственные подразделения';uk='Виробничі підрозділи'");
	Иначе
		Заголовок = НСтр("ru='Структура предприятия';uk='Структура підприємства'");
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаИзменитьНалоговыйОрган",
		"Видимость",
		ПравоДоступа("Изменение", Метаданные.Справочники.СтруктураПредприятия));
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.СтруктураПредприятия);
	Элементы.ФормаИзменитьВыделенные.Видимость = МожноРедактировать;
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	ОформитьИСкрытьНедействительныхПользователей();
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	УстановитьПараметрыДинамическогоСписка();
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Пользователи" Тогда
		Элементы.СписокПользователей.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	УстановитьПараметрыДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МассивРезультатов = УстановитьПодразделениеПользователю(ПараметрыПеретаскивания.Значение, Строка, СтандартнаяОбработка);
	Для Каждого Пользователь Из МассивРезультатов Цикл
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Пользователю %1 установлено подразделение %2';uk='Користувачу %1 встановлено підрозділ %2'"),
			Пользователь,
			Строка);
		ПоказатьОповещениеПользователя(
			НСтр("ru='Установлено подразделение';uk='Встановлено підрозділ'"),
			ПолучитьНавигационнуюСсылку(Пользователь),
			Текст,
			БиблиотекаКартинок.Информация32);
	КонецЦикла;
	
	Если МассивРезультатов.Количество() > 0 Тогда
		Элементы.СписокПользователей.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительныхПользователейПриИзменении(Элемент)
	
	ПереключитьОтображениеНедействительныхПользователей(СписокПользователей, ПоказыватьНедействительныхПользователей);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Параметры.ТолькоПроизводственныеПодразделения Тогда
		Отказ = Истина;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Новый Структура("ПроизводственноеПодразделение", Истина));
		ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Оповестить("Запись_СтруктураПредприятия");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#Область ПроцедурыПодсистемыНастройкаПорядкаЭлементов

&НаКлиенте
Процедура ПереместитьЭлементВверх(Команда)
	
	НастройкаПорядкаЭлементовКлиент.ПереместитьЭлементВверхВыполнить(Список, Элементы.Список);
	
КонецПроцедуры // ПереместитьЭлементВверх()

&НаКлиенте
Процедура ПереместитьЭлементВниз(Команда)
	
	НастройкаПорядкаЭлементовКлиент.ПереместитьЭлементВнизВыполнить(Список, Элементы.Список);
	
КонецПроцедуры // ПереместитьЭлементВниз()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПользователей.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПользователей.ЭтоРуководитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	//++ НЕ УТ
	// Выделение серым цветом непроизводственных подразделений
	Если Параметры.ТолькоПроизводственныеПодразделения Тогда
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПроизводственноеПодразделение");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	КонецЕсли; 
	//-- НЕ УТ
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическогоСписка()
	
	Подразделения = Элементы.Список.ВыделенныеСтроки;
	Если Подразделения = Неопределено Тогда
		Подразделения = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	КонецЕсли;
	
	СписокПользователей.Параметры.УстановитьЗначениеПараметра("Подразделение", Подразделения);
	
КонецПроцедуры

&НаСервере
Функция УстановитьПодразделениеПользователю(МассивПользователей, Подразделение, СтандартнаяОбработка)
	
	МассивРезультатов = Новый Массив;
	
	Для Каждого Пользователь Из МассивПользователей Цикл
	
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ТекущееПодразделение = Справочники.Пользователи.ПолучитьРеквизитыПользователя(Пользователь).Подразделение;
			Если ТекущееПодразделение <> Подразделение Тогда
				
				СправочникОбъект = Пользователь.ПолучитьОбъект();
				СправочникОбъект.Подразделение = Подразделение;
				
				Попытка
					СправочникОбъект.Записать();
					МассивРезультатов.Добавить(Пользователь);
				Исключение
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Пользователю %1 не удалось установить подразделение %2';uk='Користувачу %1 не вдалося встановити підрозділ %2'"),
						Пользователь,
						Подразделение);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецПопытки
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивРезультатов;
	
КонецФункции

&НаСервере
Процедура ОформитьИСкрытьНедействительныхПользователей()
	
	// Оформление.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокПользователей.Недействителен");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("СписокПользователей");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	// Скрытие.
	ПереключитьОтображениеНедействительныхПользователей(СписокПользователей, ПоказыватьНедействительныхПользователей);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьОтображениеНедействительныхПользователей(Пользователи, ПоказыватьНедействительных)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Пользователи, "Недействителен", Ложь, , , НЕ ПоказыватьНедействительных);
	
КонецПроцедуры

#КонецОбласти
