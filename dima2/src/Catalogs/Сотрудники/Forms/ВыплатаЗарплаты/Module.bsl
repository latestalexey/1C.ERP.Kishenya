
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "Заголовок,СотрудникСсылка,ДатаПриема,ФизическоеЛицоСсылка,ТекущаяОрганизация,ТекущееПодразделение");
	СозданиеНового = Параметры.СозданиеНового;
	
	Если НЕ Параметры.Свойство("СохранитьВыбранныеЗначения", СохранитьВыбранныеЗначения) Тогда
		СохранитьВыбранныеЗначения = Истина;
	КонецЕсли;
	
	Параметры.Свойство("ОповеститьОбИзмененииЗначений", ОповеститьОбИзмененииЗначений);
	
	ЗапрашиваемыеКадровыеДанные = "";
	Если Не ЗначениеЗаполнено(ФизическоеЛицоСсылка) Тогда
		ЗапрашиваемыеКадровыеДанные = "ФизическоеЛицо";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		ЗапрашиваемыеКадровыеДанные = ?(ПустаяСтрока(ЗапрашиваемыеКадровыеДанные), "", ЗапрашиваемыеКадровыеДанные + ",ТекущаяОрганизация")
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущееПодразделение) Тогда
		ЗапрашиваемыеКадровыеДанные = ?(ПустаяСтрока(ЗапрашиваемыеКадровыеДанные), "", ЗапрашиваемыеКадровыеДанные + ",ТекущееПодразделение")
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЗапрашиваемыеКадровыеДанные) Тогда
		КадровыеДанные = КадровыйУчетРасширенныйВызовСервера.КадровыеДанныеСотрудника(СотрудникСсылка, ЗапрашиваемыеКадровыеДанные, ТекущаяДатаСеанса());
		ЗаполнитьЗначенияСвойств(ЭтаФорма, КадровыеДанные, ЗапрашиваемыеКадровыеДанные);
		ФизическоеЛицоСсылка = ЗапрашиваемыеКадровыеДанные.ФизическоеЛицо;
	КонецЕсли;
	
	СотрудникиФормы.ПрочитатьДанныеИзХранилищаВФорму(
		ЭтаФорма,
		СотрудникиКлиентСервер.ОписаниеДополнительнойФормы(ИмяФормы),
		Параметры.АдресВХранилище);
		
	ПроинициализироватьФорму();
	
	ЦветСтиляЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	
	ОтражениеЗарплатыВБухучете.УстановитьСписокВыбораОтношениеКЕНВД(Элементы, "ОтношениеКЕНВД");
	
	//ERP начало 00-00052247
	ОтражениеЗарплатыВФинансовомУчетеУП.УстановитьЗаголовокСпособаОтражения(ЭтаФорма, "СпособОтраженияЗарплатыВБухучете");
	//ERP конец
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СотрудникиКлиент.ЗарегистрироватьОткрытиеФормы(ЭтаФорма, ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("СохранитьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СотрудникиКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ОтредактированаИстория" И Параметр.ИмяРегистра = "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам" Тогда
		ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	ИначеЕсли ИмяСобытия = "ОтредактированаИстория" И СотрудникСсылка = Источник Тогда
		Если Параметр.ИмяРегистра = "БухучетЗарплатыСотрудников" Тогда
			Если БухучетЗарплатыСотрудниковНаборЗаписейПрочитан Тогда
				РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(
					ЭтаФорма,
					СотрудникСсылка,
					ИмяСобытия,
					Параметр,
					Источник);
				ОбновитьПолеСведенияОБухучетеПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МестоВыплаты = РеквизитФормыВЗначение("МестаВыплатыЗарплатыСотрудников");
	ВзаиморасчетыССотрудникамиРасширенный.ПроверитьМестоВыплатыЗарплатыСотрудника(МестоВыплаты, Отказ);
	
	Если МестоВыплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.ПустаяСсылка() Тогда
		МестоВыплаты = РеквизитФормыВЗначение("МестаВыплатыЗарплатыПодразделений");
	КонецЕсли;
	
	Если МестоВыплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект
		И ЗначениеЗаполнено(ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект) Тогда
		
		// Значения введенные документом не изменяем.
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Период", ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период);
		Запрос.УстановитьПараметр("Организация", ТекущаяОрганизация);
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицоСсылка);
		Запрос.УстановитьПараметр("Документ", ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Документ);
		Запрос.УстановитьПараметр("НомерЛицевогоСчета", ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета);
		Запрос.УстановитьПараметр("ЗарплатныйПроект", ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период
		|ИЗ
		|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам
		|ГДЕ
		|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период = &Период
		|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Организация = &Организация
		|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо = &ФизическоеЛицо
		|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Документ <> ЗНАЧЕНИЕ(Документ.ПодтверждениеОткрытияЛицевыхСчетовСотрудников.ПустаяСсылка)
		|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Документ <> &Документ
		|	И (ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета <> &НомерЛицевогоСчета
		|			ИЛИ ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект <> &ЗарплатныйПроект)";
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Существует запись, введенная документом, о номере лицевого счета с датой сведений %1.';uk='Існує запис, введений документом, номер особового рахунку з датою відомостей %1.'"),
				ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Выборка.Период));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НаборЗаписей.Период", , Отказ);
			
			Возврат;
			
		КонецЕсли;
		
		СтруктураВедущихОбъектов = Новый Структура();
		СтруктураВедущихОбъектов.Вставить("Организация", ТекущаяОрганизация);
		СтруктураВедущихОбъектов.Вставить("ФизическоеЛицо", ФизическоеЛицоСсылка);
		
		РедактированиеПериодическихСведений.ПроверитьЗаписьВФормеПоСтруктуре(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам", СтруктураВедущихОбъектов, Отказ);
		
	Иначе
		ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПрежняя = Новый ФиксированнаяСтруктура(
			ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
				ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам, Метаданные.РегистрыСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам));
		ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамНоваяЗапись = Ложь;
	КонецЕсли; 
	
	РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(ЭтаФорма, "БухучетЗарплатыСотрудников", СотрудникСсылка, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидМестаВыплатыЗарплатыКакВсемПриИзменении(Элемент)
	
	УстановитьДоступностьМестВыплатыЗарплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидМестаВыплатыЗарплатыКассаПриИзменении(Элемент)
	
	УстановитьДоступностьМестВыплатыЗарплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидМестаВыплатыЗарплатыЗарплатныйПроектПриИзменении(Элемент)
	
	УстановитьДоступностьМестВыплатыЗарплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидМестаВыплатыРаздатчикПриИзменении(Элемент)
	
	УстановитьДоступностьМестВыплатыЗарплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидМестаВыплатыЗарплатыБанковскийСчетПриИзменении(Элемент)
	
	УстановитьДоступностьМестВыплатыЗарплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоВыплатыКассаДоступноПолеОткрытие(Элемент, СтандартнаяОбработка)
	
	ВзаиморасчетыССотрудникамиКлиентРасширенный.МестоВыплатыОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоВыплатыКассаНеДоступноПолеОткрытие(Элемент, СтандартнаяОбработка)
	
	ВзаиморасчетыССотрудникамиКлиентРасширенный.МестоВыплатыОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоВыплатыЗарплатныйПроектДоступноПолеОткрытие(Элемент, СтандартнаяОбработка)
	
	ВзаиморасчетыССотрудникамиКлиентРасширенный.МестоВыплатыОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоВыплатыЗарплатныйПроектДоступноПолеПриИзменении(Элемент)
	
	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоВыплатыЗарплатныйПроектНеДоступноПолеОткрытие(Элемент, СтандартнаяОбработка)
	
	ВзаиморасчетыССотрудникамиКлиентРасширенный.МестоВыплатыОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоВыплатыРаздатчикДоступноПолеОткрытие(Элемент, СтандартнаяОбработка)
	
	ВзаиморасчетыССотрудникамиКлиентРасширенный.МестоВыплатыОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоВыплатыРаздатчикНеДоступноПолеОткрытие(Элемент, СтандартнаяОбработка)
	
	ВзаиморасчетыССотрудникамиКлиентРасширенный.МестоВыплатыОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоВыплатыБанковскийСчетДоступноПолеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрВыбораВладельцаСчета = Новый ПараметрВыбора("Отбор.Владелец", ФизическоеЛицоСсылка);
	МассивПараметровВыбора = Новый Массив();
	МассивПараметровВыбора.Добавить(ПараметрВыбораВладельцаСчета);
	
	Элементы.МестоВыплатыБанковскийСчетДоступноПоле.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора); 

КонецПроцедуры

&НаКлиенте
Процедура МестоВыплатыБанковскийСчетДоступноПолеОткрытие(Элемент, СтандартнаяОбработка)
	
	ВзаиморасчетыССотрудникамиКлиентРасширенный.МестоВыплатыОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоВыплатыБанковскийСчетНеДоступноПолеОткрытие(Элемент, СтандартнаяОбработка)
	
	ВзаиморасчетыССотрудникамиКлиентРасширенный.МестоВыплатыОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоВыплатыЛицевойСчетДоступноПолеПриИзменении(Элемент)
	
	УстановитьПояснениеКНомеруЛицевогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтраженияЗарплатыВБухучетеПриИзменении(Элемент)

	ОбновитьПолеСведенияОБухучетеПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());

КонецПроцедуры

&НаКлиенте
Процедура ОтношениеКЕНВДПриИзменении(Элемент)

	ОбновитьПолеСведенияОБухучетеПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());

КонецПроцедуры

&НаКлиенте
Процедура БухучетЗарплатыСотрудниковСтатьяФинансированияПриИзменении(Элемент)
	
	ОбновитьПолеСведенияОБухучетеПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

#Область РедактированиеМесяцаСтрокой

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период", "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПериодСтрокой", Модифицированность);
	
	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(
		ЭтаФорма,
		ЭтаФорма,
		"ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период",
		"ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПериодСтрокой");
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период", "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПериодСтрокой", Направление, Модифицированность);
	
	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура БухучетЗарплатыСотрудниковИстория(Команда)

	СотрудникиКлиент.ОткрытьФормуРедактированияИстории("БухучетЗарплатыСотрудников", СотрудникСсылка, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура OK(Команда)
	
	СохранитьИЗакрытьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействующийЛицевойСчет(Команда)
	
	ЛицевыеСчетаСотрудника = СписокЛицевыхСчетовСотрудника(ТекущаяОрганизация, ФизическоеЛицоСсылка, 
			ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект, ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета,
			ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПрежняя);
			
	ДополнительныеПараметры = Новый Структура("ЛицевыеСчетаСотрудника", ЛицевыеСчетаСотрудника);		
			
	Оповещение = Новый ОписаниеОповещения("ДействующийЛицевойСчетПродолжение", ЭтотОбъект, ДополнительныеПараметры); 
	ЛицевыеСчетаСотрудника.ПоказатьВыборЭлемента(Оповещение, НСтр("ru='Выберите действующий лицевой счет сотрудника.';uk='Виберіть діючий особовий рахунок співрбітника.'"));
			
КонецПроцедуры

&НаКлиенте
Процедура ДействующийЛицевойСчетПродолжение(ВыбранныйЭлементСписка, ДополнительныеПараметры) Экспорт 

	Если ВыбранныйЭлементСписка = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ЛицевыеСчетаСотрудника = ДополнительныеПараметры.ЛицевыеСчетаСотрудника;
	
	СтруктураЛицевогоСчета = ВыбранныйЭлементСписка.Значение;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЛицевыеСчетаСотрудника", ЛицевыеСчетаСотрудника);
	ДополнительныеПараметры.Вставить("СтруктураЛицевогоСчета", СтруктураЛицевогоСчета);
	
	ТекстВопроса = НСтр("ru='Для перечисления зарплаты сотруднику будет использоваться счет в банке %1.
                            |Номера лицевых счетов в других банках будут удалены. Продолжить?'
                            |;uk='Для перерахування зарплати співробітнику буде використовуватися рахунок у банку %1.
                            |Номери особових рахунків в інших банках будуть вилучені. Продовжити?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, СтруктураЛицевогоСчета.Банк);
	
	Оповещение = Новый ОписаниеОповещения("ДействующийЛицевойСчетЗавершение", ЭтотОбъект, ДополнительныеПараметры); 
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействующийЛицевойСчетЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЛицевыеСчетаСотрудника = ДополнительныеПараметры.ЛицевыеСчетаСотрудника;
	СтруктураЛицевогоСчета = ДополнительныеПараметры.СтруктураЛицевогоСчета;
	
	УдалитьНеДействующиеЛицевыеСчетаСервере(ЛицевыеСчетаСотрудника, СтруктураЛицевогоСчета, ТекущаяОрганизация, ФизическоеЛицоСсылка);
	
	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамКоличество = 1;
	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект = СтруктураЛицевогоСчета.ЗарплатныйПроект;
	МестаВыплатыЗарплатыСотрудников.МестоВыплаты = СтруктураЛицевогоСчета.ЗарплатныйПроект;
	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета = СтруктураЛицевогоСчета.НомерЛицевогоСчета;
	
	УстановитьВидимостьДействующегоНомераЛицевогоСчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамИстория(Команда)
	
	СтруктураВедущихОбъектов = Новый Структура();
	СтруктураВедущихОбъектов.Вставить("Организация", ТекущаяОрганизация);
	СтруктураВедущихОбъектов.Вставить("ФизическоеЛицо", ФизическоеЛицоСсылка);
	
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсториюПоСтруктуре("ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам", СтруктураВедущихОбъектов, ЭтаФорма, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СохранитьДанные(Отказ, ОповещениеЗавершения = Неопределено)
	
	Если Не Модифицированность Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли; 
		
	Если Не СозданиеНового И Не Отказ Тогда
		
		Если МестаВыплатыЗарплатыСотрудников.Вид = ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект") Тогда
			ТекстКнопкиДа = НСтр("ru='Изменился номер лицевого счета';uk='Змінився номер особового рахунку'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При редактировании Вы изменили номер лицевого счета или зарплатный проект. 
                |Если Вы исправили прежнюю запись лицевого счета (она была ошибочной), нажмите ""Исправлена ошибка"".
                |Если у лицевого счета изменился номер или зарплатный проект с %1, нажмите ""%2""'
                |;uk='При редагуванні Ви змінили номер особового рахунку або зарплатний проект. 
                |Якщо Ви виправили колишній запис особового рахунку (він був помилковою, натисніть ""Виправлена помилка"".
                |Якщо у особового рахунку змінився номер або зарплатний проект з %1, натисніть ""%2""'"), 
				Формат(ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период, "ДФ='д ММММ гггг ""г""'"),
				ТекстКнопкиДа);
				
			Оповещение = Новый ОписаниеОповещения("СохранитьДанныеЗавершение", ЭтотОбъект, ОповещениеЗавершения);	
			РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам", ТекстВопроса, ТекстКнопкиДа, Отказ, Оповещение);
		КонецЕсли;	
	
		ЗапроситьРежимИзмененияБухгалтерскогоУчета(БухучетЗарплатыСотрудников.Период, Отказ, ОповещениеЗавершения);
		
	Иначе 
		СохранитьДанныеЗавершение(Отказ, ОповещениеЗавершения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеЗавершение(Отказ, ОповещениеЗавершения) Экспорт 
	
	Если Не Отказ Тогда
		
		Если МестаВыплатыЗарплатыСотрудников.Вид = ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект") Тогда
			МестаВыплатыЗарплатыСотрудников.МестоВыплаты = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект;
		КонецЕсли;
		
		ПредставлениеМестаВыплаты = "";
		
		Если ПроверитьЗаполнение() Тогда
			
			ВозвращаемыйПараметр = Новый Структура;
			ВозвращаемыйПараметр.Вставить("ИмяФормы", ИмяФормы);
			ВозвращаемыйПараметр.Вставить("АдресВХранилище", АдресДанныхДополнительнойФормыНаСервере(СотрудникиКлиентСервер.ОписаниеДополнительнойФормы(ИмяФормы)));
			
			Оповестить(
			"ИзмененыДанныеДополнительнойФормы",
			ВозвращаемыйПараметр,
			ВладелецФормы);
			
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Результат, ДополнительныеПараметры) Экспорт 
	
	СохранитьИЗакрытьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрытьНаКлиенте(ЗакрытьФорму = Истина) Экспорт 

	Если НЕ ТолькоПросмотр Тогда
		ТекущийЭлемент = Элементы.ФормаOK;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура("ЗакрытьФорму", ЗакрытьФорму);
	
	Оповещение = Новый ОписаниеОповещения("СохранитьИЗакрытьНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьДанные(Ложь, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрытьНаКлиентеЗавершение(Отказ, ДополнительныеПараметры) Экспорт 

	Если Не Отказ И Открыта() Тогда
		
		Модифицированность = Ложь;
		Если ДополнительныеПараметры.ЗакрытьФорму Тогда
			Закрыть();
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПроинициализироватьФорму()
	
	// Место выплаты зарплаты владельца.
	Если НЕ МестаВыплатыЗарплатыПодразделенийПрочитан Тогда
		Если ЗначениеЗаполнено(ТекущееПодразделение) Тогда
			МестоВыплатыВладельца = ВзаиморасчетыССотрудникамиРасширенный.МестоВыплатыЗарплатыПодразделенияОрганизации(ТекущееПодразделение);
		КонецЕсли;
		Если МестоВыплатыВладельца = Неопределено И ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
			МестоВыплатыВладельца = ВзаиморасчетыССотрудникамиРасширенный.МестоВыплатыЗарплатыОрганизации(ТекущееПодразделение);
		КонецЕсли;
		Если МестоВыплатыВладельца <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(МестаВыплатыЗарплатыПодразделений, МестоВыплатыВладельца);
		КонецЕсли;
		МестаВыплатыЗарплатыПодразделенийПрочитан = Истина;
	КонецЕсли; 
	
	// Место выплаты зарплаты сотрудника.
	Если НЕ МестаВыплатыЗарплатыСотрудниковПрочитан Тогда
		ЗначениеВДанныеФормы(ВзаиморасчетыССотрудникамиРасширенный.МестоВыплатыЗарплатыСотрудника(СотрудникСсылка, ФизическоеЛицоСсылка), МестаВыплатыЗарплатыСотрудников);
		МестаВыплатыЗарплатыСотрудниковПрочитан = Истина;
	КонецЕсли; 
	
	ПрочитатьЛицевыеСчетаСотрудника();
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период", "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПериодСтрокой");
	
	Если НЕ ПустаяСтрока(ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета) Тогда
		СтруктураПояснения = СтруктураПоясненияКНомеруЛицевогоСчета(
			ФизическоеЛицоСсылка,
			ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект,
			ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета,
			ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам,
			ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПрежняя);
		
		ФизическоеЛицоЛСВведенДокументом = СтруктураПояснения.ВведенДокументом;
		
		ОбменСБанкамиПоЗарплатнымПроектамКлиентСервер.УстановитьПояснениеКНомеруЛицевогоСчета(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамНомерЛицевогоСчета", СтруктураПояснения);
	Иначе
		ОбменСБанкамиПоЗарплатнымПроектамКлиентСервер.УстановитьПояснениеКНомеруЛицевогоСчета(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамНомерЛицевогоСчета");
	КонецЕсли;
	
	НастроитьПоляМестВыплатыЗарплаты();
	УстановитьДоступностьМестВыплатыЗарплаты(ЭтаФорма);
	
	РедактированиеРазрешено = 
		ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыСотрудников)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаOK",
		"Видимость",
		РедактированиеРазрешено);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаОтмена",
		"Заголовок",
		?(РедактированиеРазрешено, НСтр("ru='Отмена';uk='Відмінити'"), НСтр("ru='Закрыть';uk='Закрити'")));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаOK",
		"КнопкаПоУмолчанию",
		РедактированиеРазрешено);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаОтмена",
		"КнопкаПоУмолчанию",
		НЕ РедактированиеРазрешено);
		
	Если БухучетЗарплатыСотрудниковПрежняя = Неопределено Тогда
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "БухучетЗарплатыСотрудников", СотрудникСсылка);
	КонецЕсли; 
	
	ОбновитьПолеСведенияОБухучетеПериод(ЭтаФорма, ТекущаяДатаСеанса());
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЛицевыеСчетаСотрудника()
	
	Если ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПрежняя = Неопределено Тогда
		
		СтруктураВедущихОбъектов = Новый Структура();
		СтруктураВедущихОбъектов.Вставить("Организация", ТекущаяОрганизация);
		СтруктураВедущихОбъектов.Вставить("ФизическоеЛицо", ФизическоеЛицоСсылка);
		
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФормеПоСтруктуре(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам", СтруктураВедущихОбъектов);
		
	КонецЕсли;
	
	Если ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период = Дата(1,1,1) Тогда
		ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ЛицевыеСчетаФизическогоЛица = ОбменСБанкамиПоЗарплатнымПроектам.ЛицевыеСчетаСотрудников(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СотрудникСсылка), Истина, ТекущаяОрганизация);
	
	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамКоличество = ЛицевыеСчетаФизическогоЛица.Количество();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоляМестВыплатыЗарплаты()
	
	ОписателиПолейМестВыплаты = Новый Соответствие;
	
	ОписателиПолейМестВыплаты.Вставить(Элементы.МестоВыплатыКассаДоступноПоле,				Перечисления.ВидыМестВыплатыЗарплаты.Касса);
	ОписателиПолейМестВыплаты.Вставить(Элементы.МестоВыплатыКассаНеДоступноПоле,			Перечисления.ВидыМестВыплатыЗарплаты.Касса);
	
	ОписателиПолейМестВыплаты.Вставить(Элементы.МестоВыплатыЗарплатныйПроектДоступноПоле,	Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект);
	ОписателиПолейМестВыплаты.Вставить(Элементы.МестоВыплатыЗарплатныйПроектНеДоступноПоле,	Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект);
	
	ОписателиПолейМестВыплаты.Вставить(Элементы.МестоВыплатыРаздатчикДоступноПоле,			Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик);
	ОписателиПолейМестВыплаты.Вставить(Элементы.МестоВыплатыРаздатчикНеДоступноПоле,		Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик);
	
	ОписателиПолейМестВыплаты.Вставить(Элементы.МестоВыплатыБанковскийСчетДоступноПоле,		Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет);
	ОписателиПолейМестВыплаты.Вставить(Элементы.МестоВыплатыБанковскийСчетНеДоступноПоле,	Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет);
	
	ВзаиморасчетыССотрудникамиФормыРасширенный.НастроитьПоляМестВыплатыЗарплаты(ОписателиПолейМестВыплаты);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомерЛицевогоСчетаПоЗарплатномуПроекту(Организация, ЗарплатныйПроект, Сотрудник)
	
	ЛицевыеСчетаФизическогоЛица = ОбменСБанкамиПоЗарплатнымПроектам.ЛицевыеСчетаСотрудников(Сотрудник, Истина, Организация, , ЗарплатныйПроект);
	Если ЛицевыеСчетаФизическогоЛица.Количество() = 0 Тогда
		Возврат "";
	Иначе
		Возврат ЛицевыеСчетаФизическогоЛица[0].НомерЛицевогоСчета;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗарплатныйПроект(Форма)
	
	ПрочитатьЛицевойСчетСотрудника = Ложь;
	Если Форма.МестаВыплатыЗарплатыСотрудников.Вид = ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.ПустаяСсылка") Тогда
		Если Форма.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект <> Форма.МестаВыплатыЗарплатыПодразделений.МестоВыплаты Тогда
			Форма.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект = Форма.МестаВыплатыЗарплатыПодразделений.МестоВыплаты;
			ПрочитатьЛицевойСчетСотрудника = Истина;
		КонецЕсли;
	ИначеЕсли Форма.МестаВыплатыЗарплатыСотрудников.Вид = ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект") Тогда
		Если Форма.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект <> Форма.МестаВыплатыЗарплатыСотрудников.МестоВыплаты Тогда
			Форма.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект = Форма.МестаВыплатыЗарплатыСотрудников.МестоВыплаты;
			ПрочитатьЛицевойСчетСотрудника = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПрочитатьЛицевойСчетСотрудника Тогда
		Форма.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета = НомерЛицевогоСчетаПоЗарплатномуПроекту(
			Форма.ТекущаяОрганизация, Форма.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект, Форма.СотрудникСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьМестВыплатыЗарплаты(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	СтруктураГруппы = "Группа, СтраницаДоступно, СтраницаНеДоступно";
	
	ГруппыМестВыплаты = Новый Соответствие;
	
	ГруппыМестВыплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.ПустаяСсылка"),
		Новый Структура(СтруктураГруппы, Элементы.МестоВыплатыКакВсем, Элементы.МестоВыплатыКакВсемДоступно, Элементы.МестоВыплатыКакВсемНеДоступно));
	ГруппыМестВыплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.Касса"),
		Новый Структура(СтруктураГруппы, Элементы.МестоВыплатыКасса, Элементы.МестоВыплатыКассаДоступно, Элементы.МестоВыплатыКассаНеДоступно));
	ГруппыМестВыплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект"),
		Новый Структура(СтруктураГруппы, Элементы.МестоВыплатыЗарплатныйПроект, Элементы.МестоВыплатыЗарплатныйПроектДоступно, Элементы.МестоВыплатыЗарплатныйПроектНеДоступно));
	ГруппыМестВыплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.Раздатчик"),
		Новый Структура(СтруктураГруппы, Элементы.МестоВыплатыРаздатчик, Элементы.МестоВыплатыРаздатчикДоступно, Элементы.МестоВыплатыРаздатчикНеДоступно));
	ГруппыМестВыплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет"),
		Новый Структура(СтруктураГруппы, Элементы.МестоВыплатыБанковскийСчет, Элементы.МестоВыплатыБанковскийСчетДоступно, Элементы.МестоВыплатыБанковскийСчетНеДоступно));
		
	ГруппаМестВыплаты = ГруппыМестВыплаты[Форма.МестаВыплатыЗарплатыСотрудников.Вид];
	Для Каждого ГруппаМестВыплаты Из ГруппыМестВыплаты Цикл
		Если ГруппаМестВыплаты.Ключ = Форма.МестаВыплатыЗарплатыСотрудников.Вид Тогда
			ГруппаМестВыплаты.Значение.Группа.ТекущаяСтраница = ГруппаМестВыплаты.Значение.СтраницаДоступно
		Иначе
			ГруппаМестВыплаты.Значение.Группа.ТекущаяСтраница = ГруппаМестВыплаты.Значение.СтраницаНеДоступно
		КонецЕсли
	КонецЦикла;
	
	ВыплатаЧерезЗарплатныйПроект = 
		Форма.МестаВыплатыЗарплатыСотрудников.Вид = ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект")
		И ЗначениеЗаполнено(Форма.МестаВыплатыЗарплатыСотрудников.МестоВыплаты)
		ИЛИ Форма.МестаВыплатыЗарплатыСотрудников.Вид = ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.ПустаяСсылка")
			И Форма.МестаВыплатыЗарплатыПодразделений.Вид = ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект")
			И ЗначениеЗаполнено(Форма.МестаВыплатыЗарплатыПодразделений.МестоВыплаты);
	
	Если ВыплатаЧерезЗарплатныйПроект Тогда
		Элементы.МестоВыплатыЛицевойСчет.ТекущаяСтраница = Элементы.МестоВыплатыЛицевойСчетДоступно;
		Элементы.ЗаголовокНомерЛицевогоСчетаСтраницы.ТекущаяСтраница = Элементы.ЗаголовокНомерЛицевогоСчетаДоступно;
	Иначе
		Элементы.МестоВыплатыЛицевойСчет.ТекущаяСтраница = Элементы.МестоВыплатыЛицевойСчетНеДоступно;
		Элементы.ЗаголовокНомерЛицевогоСчетаСтраницы.ТекущаяСтраница = Элементы.ЗаголовокНомерЛицевогоСчетаНеДоступно;
	КонецЕсли;
	
	УстановитьВидимостьДействующегоНомераЛицевогоСчета(Форма, ВыплатаЧерезЗарплатныйПроект);
	
	УстановитьЗарплатныйПроект(Форма);
	
КонецПроцедуры

// Работа с лицевыми счетами

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДействующегоНомераЛицевогоСчета(Форма, ВыплатаЧерезЗарплатныйПроект = Истина) Экспорт
	
	Если ВыплатаЧерезЗарплатныйПроект И Форма.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамКоличество > 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НомерЛицевогоСчетаДействующий", "Видимость", Истина);
		
		Форма.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамДействующийИнфо = НСтр("ru='В настоящий момент зарегистрированы лицевые счета и в других банках.
            |Для корректного заполнения документов следует использовать единственный лицевой счет.'
            |;uk='У даний момент зареєстровані особові рахунки і в інших банках.
            |Для коректного заповнення документів слід використовувати єдиний особовий рахунок.'");
		Форма.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамДействующийКартинка = БиблиотекаКартинок.Предупреждение;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НомерЛицевогоСчетаДействующий", "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокЛицевыхСчетовСотрудника(Организация, ФизическоеЛицоСсылка, ЗарплатныйПроект, НомерСчета, ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПрежняя)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицоСсылка);
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДатаСеанса());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период КАК Период,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект КАК ЗарплатныйПроект,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Банк КАК Банк,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета КАК НомерЛицевогоСчета
	|ИЗ
	|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.СрезПоследних(
	|			&ДатаСреза,
	|			Организация = &Организация
	|				И ФизическоеЛицо = &ФизическоеЛицо) КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам";
	
	ЛицевыеСчетаСотрудника = Запрос.Выполнить().Выбрать();
	
	СписокЛицевыхСчетов = Новый СписокЗначений;
	
	Пока ЛицевыеСчетаСотрудника.Следующий() Цикл
		
		СтруктураЛицевогоСчета = Новый Структура;
		СтруктураЛицевогоСчета.Вставить("Период", ЛицевыеСчетаСотрудника.Период);
		СтруктураЛицевогоСчета.Вставить("НомерЛицевогоСчета", ЛицевыеСчетаСотрудника.НомерЛицевогоСчета);
		СтруктураЛицевогоСчета.Вставить("ЗарплатныйПроект", ЛицевыеСчетаСотрудника.ЗарплатныйПроект);
		СтруктураЛицевогоСчета.Вставить("Банк", ЛицевыеСчетаСотрудника.Банк);
		
		СписокЛицевыхСчетов.Добавить(СтруктураЛицевогоСчета,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 %2';uk='%1 %2'"),
					ЛицевыеСчетаСотрудника.НомерЛицевогоСчета,
					ЛицевыеСчетаСотрудника.Банк));
		
	КонецЦикла;
	
	// Если изменили лицевой счет на форме, то заменим его в списке.
	Для каждого ЭлементСписка Из СписокЛицевыхСчетов Цикл
		ЛицевойСчетСотрудника = ЭлементСписка.Значение;
		Если ЛицевойСчетСотрудника.Период = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПрежняя.Период
			И ЛицевойСчетСотрудника.НомерЛицевогоСчета = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПрежняя.НомерЛицевогоСчета
			И ЛицевойСчетСотрудника.ЗарплатныйПроект = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПрежняя.ЗарплатныйПроект Тогда
			
			ЛицевойСчетСотрудника.НомерЛицевогоСчета = НомерСчета;
			ЛицевойСчетСотрудника.ЗарплатныйПроект = ЗарплатныйПроект;
			ЭлементСписка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 %2';uk='%1 %2'"),
										НомерСчета,
										?(ЗначениеЗаполнено(ЗарплатныйПроект),
													ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗарплатныйПроект, "Банк"),
													ЛицевойСчетСотрудника.Банк));
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокЛицевыхСчетов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьНеДействующиеЛицевыеСчетаСервере(СписокЛицевыхСчетовСотрудника, СтруктураВыбранногоЭлемента, Организация, ФизическоеЛицоСсылка)
	
	Для каждого ЭлементСписка Из СписокЛицевыхСчетовСотрудника Цикл
		
		СтруктураЛицевогоСчета = ЭлементСписка.Значение;
		Если СтруктураЛицевогоСчета.Банк = СтруктураВыбранногоЭлемента.Банк
			И СтруктураЛицевогоСчета.НомерЛицевогоСчета = СтруктураВыбранногоЭлемента.НомерЛицевогоСчета
			И СтруктураЛицевогоСчета.ЗарплатныйПроект = СтруктураВыбранногоЭлемента.ЗарплатныйПроект Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаписьНабора = РегистрыСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.СоздатьМенеджерЗаписи();
		ЗаписьНабора.Организация = Организация;
		ЗаписьНабора.ФизическоеЛицо = ФизическоеЛицоСсылка;
		ЗаписьНабора.Банк = СтруктураЛицевогоСчета.Банк;
		ЗаписьНабора.Прочитать();
		
		ЗаписьНабора.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовуюЗаписьЛицевыеСчетаСотрудниковПоЗарплатнымПроектам()
	
	Если Не ЭтаФорма["ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамНаборЗаписейПрочитан"] Тогда
		
		СтруктураВедущихОбъектов = Новый Структура();
		СтруктураВедущихОбъектов.Вставить("Организация", ТекущаяОрганизация);
		СтруктураВедущихОбъектов.Вставить("ФизическоеЛицо", ФизическоеЛицоСсылка);
		ПрочитатьНаборЗаписейПериодическихСведенийПоСтруктуре("ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам", СтруктураВедущихОбъектов);
		
	КонецЕсли;
	
	НоваяЗапись = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамНаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам);
	Если ЗначениеЗаполнено(НоваяЗапись.Документ) Тогда
		НоваяЗапись.Документ = Неопределено;
	КонецЕсли;
	НовыйПериод = НачалоМесяца(ТекущаяДата());
	Если ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамНаборЗаписей.Количество() > 1 Тогда
		ПоследнийПериод = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамНаборЗаписей.Получить(
				ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамНаборЗаписей.Количество() - 2).Период;
	Иначе
		ПоследнийПериод = '00010101000000';
	КонецЕсли;
	Если НовыйПериод <= ПоследнийПериод Тогда
		НовыйПериод = КонецМесяца(ПоследнийПериод) + 1;
	КонецЕсли;
	НоваяЗапись.Период = НовыйПериод;
	
	ЗаполнитьЗначенияСвойств(ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам, НоваяЗапись);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период", "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПериодСтрокой");
	
	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамНоваяЗапись = Истина;
	
	СтруктураЗаписиСтрокой = "";
	ПрежняяЗапись = Новый Структура;
	НужнаЗапятая = Ложь;
	Для Каждого КлючЗначение Из ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПрежняя Цикл
		Если НужнаЗапятая Тогда
			СтруктураЗаписиСтрокой = СтруктураЗаписиСтрокой + ",";
		КонецЕсли;
		СтруктураЗаписиСтрокой = СтруктураЗаписиСтрокой + КлючЗначение.Ключ;
		НужнаЗапятая = Истина;
		ПрежняяЗапись.Вставить(КлючЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ПрежняяЗапись, НоваяЗапись);
	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПрежняя = Новый ФиксированнаяСтруктура(ПрежняяЗапись);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПриИзменении()
	
	УстановитьЗарплатныйПроект(ЭтаФорма);
	
	// Значения введенные документом не изменяем.
	Если ЗначениеЗаполнено(ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПрежняя.Документ) Тогда
		СоздатьНовуюЗаписьЛицевыеСчетаСотрудниковПоЗарплатнымПроектам();
	КонецЕсли;
	
	СтруктураВедущихОбъектов = Новый Структура();
	СтруктураВедущихОбъектов.Вставить("Организация", ТекущаяОрганизация);
	СтруктураВедущихОбъектов.Вставить("ФизическоеЛицо", ФизическоеЛицоСсылка);
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВводаПоСтруктуре(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам", СтруктураВедущихОбъектов);
	
	УстановитьДоступностьМестВыплатыЗарплаты(ЭтаФорма);
	УстановитьПояснениеКНомеруЛицевогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПояснениеКНомеруЛицевогоСчета()
	
	Если НЕ ПустаяСтрока(ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета) Тогда
		СтруктураПояснения = СтруктураПоясненияКНомеруЛицевогоСчета(
			ФизическоеЛицоСсылка,
			ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект,
			ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета,
			ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам,
			ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПрежняя);
		
		ФизическоеЛицоЛСВведенДокументом = СтруктураПояснения.ВведенДокументом;
		
		ОбменСБанкамиПоЗарплатнымПроектамКлиентСервер.УстановитьПояснениеКНомеруЛицевогоСчета(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамНомерЛицевогоСчета", СтруктураПояснения);
	Иначе
		ОбменСБанкамиПоЗарплатнымПроектамКлиентСервер.УстановитьПояснениеКНомеруЛицевогоСчета(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамНомерЛицевогоСчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СтруктураВедущихОбъектов = Новый Структура();
	СтруктураВедущихОбъектов.Вставить("Организация", ТекущаяОрганизация);
	СтруктураВедущихОбъектов.Вставить("ФизическоеЛицо", ФизическоеЛицоСсылка);
	
	РедактированиеПериодическихСведенийКлиент.ОбработкаОповещенияПоСтруктуре(ЭтаФорма, СтруктураВедущихОбъектов, ИмяСобытия, Параметр, Источник);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период", "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПериодСтрокой");
	
	Если НЕ ПустаяСтрока(ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета) Тогда
		СтруктураПояснения = СтруктураПоясненияКНомеруЛицевогоСчета(
			ФизическоеЛицоСсылка,
			ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект,
			ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета,
			ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам,
			ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамПрежняя);
		
		ФизическоеЛицоЛСВведенДокументом = СтруктураПояснения.ВведенДокументом;
		
		ОбменСБанкамиПоЗарплатнымПроектамКлиентСервер.УстановитьПояснениеКНомеруЛицевогоСчета(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамНомерЛицевогоСчета", СтруктураПояснения);
	Иначе
		ОбменСБанкамиПоЗарплатнымПроектамКлиентСервер.УстановитьПояснениеКНомеруЛицевогоСчета(ЭтаФорма, "ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамНомерЛицевогоСчета");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураПоясненияКНомеруЛицевогоСчета(ФизическоеЛицоСсылка, ЗарплатныйПроект, НомерЛицевогоСчета, Знач ЛицевыеСчета, ЛицевыеСчетаПрежняя)
	
	СтруктураПояснения = ОбменСБанкамиПоЗарплатнымПроектам.СтруктураПоясненияКНомеруЛицевогоСчета(
			ФизическоеЛицоСсылка,
			ЗарплатныйПроект,
			НомерЛицевогоСчета,
			ЛицевыеСчета,
			ЛицевыеСчетаПрежняя);
	
	Возврат СтруктураПояснения;
	
КонецФункции

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведенийПоСтруктуре(ИмяРегистра, СтруктураВедущихОбъектов) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписейПоСтруктуре(ЭтаФорма, ИмяРегистра, СтруктураВедущихОбъектов);
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхДополнительнойФормыНаСервере(ОписаниеДополнительнойФормы)
	
	Возврат СотрудникиФормы.АдресДанныхДополнительнойФормы(ОписаниеДополнительнойФормы, ЭтаФорма);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПолеСведенияОБухучетеПериод(Форма, ДатаСеанса) Экспорт
	
	// Не обязательно заполнение поля Период если данные по умолчанию и при этом 
	// записи о бухучете еще нет.
	Если ЗарплатаКадрыКлиентСервер.СведенияОБухучетеСотрудникаПоУмолчанию(Форма.БухучетЗарплатыСотрудников) И 
		НЕ ЗначениеЗаполнено(Форма.БухучетЗарплатыСотрудниковПрежняя.Период) Тогда
		Если ЗначениеЗаполнено(Форма.БухучетЗарплатыСотрудников.Период) Тогда
			Форма.БухучетЗарплатыСотрудников.Период = '00010101';
		КонецЕсли; 
	Иначе
		Если НЕ ЗначениеЗаполнено(Форма.БухучетЗарплатыСотрудников.Период) Тогда
			Если ЗначениеЗаполнено(Форма.ДатаПриема) Тогда
				Форма.БухучетЗарплатыСотрудников.Период = НачалоДня(Форма.ДатаПриема);
			Иначе
				Форма.БухучетЗарплатыСотрудников.Период = НачалоДня(ДатаСеанса);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, "БухучетЗарплатыСотрудников", Форма.СотрудникСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияБухгалтерскогоУчета(ДатаИзменения, Отказ, ОповещениеЗавершения)
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	Оповещение = Новый ОписаниеОповещения("ЗапроситьРежимИзмененияБухгалтерскогоУчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстКнопкиДа = НСтр("ru='Изменился бухучет';uk='Змінився бухоблік'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru =  'При редактировании изменился бухгалтерский учет для сотрудника. 
					|Если просто исправлены прежние данные (они были ошибочны), нажмите ""Исправлена ошибка"".
					|Если бухучет сотрудника изменился с %1, нажмите ""Изменился бухучет""'"), 
		Формат(ДатаИзменения, "ДЛФ=DD"));
	
	РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(ЭтаФорма, "БухучетЗарплатыСотрудников", ТекстВопроса, ТекстКнопкиДа, Отказ, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияБухгалтерскогоУчетаЗавершение(Отказ, ДополнительныеПараметры) Экспорт 

	СохранитьДанныеЗавершение(Отказ, ДополнительныеПараметры.ОповещениеЗавершения);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

#КонецОбласти
