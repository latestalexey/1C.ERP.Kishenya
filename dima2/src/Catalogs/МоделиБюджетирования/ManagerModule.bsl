#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ НЕ УТКА

// Функция возвращает таблицу с планируемыми и фактическими задачами
//
// Параметры
//  МодельБюджетированя  			 - Справочник.МоделиБюджетирования - Модель для которой строится расписание
//  НаДату  						 - Дата - Дата по которую (включительно) будет построено расписание
//  ДополнятьФактическимиЗадачами	 - Булево - если ИСТИНА - то будут заполнены данные о фактических задачах
//
// Возвращаемое значение:
//   ТаблицаЗначений - Расписание бюджетного процесса с даты начала действия модели по параметр "НаДату"
//
Функция ПолучитьБюджетныеЗадачи(Знач МодельБюджетирования, Знач НачалоПериода = Неопределено, Знач КонецПериода,
									Знач ДополнятьФактическимиЗадачами = Ложь, Знач ПроверятьЗадачиДругихПериодов = Ложь) Экспорт
	
	НачалоДействияМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МодельБюджетирования, "НачалоДействия");
	Если Не ЗначениеЗаполнено(НачалоДействияМодели) Тогда
		Возврат ПолучитьТаблицуЗадач();
	КонецЕсли;
	
	Если НачалоПериода = Неопределено Тогда
		НачалоПериода = НачалоДействияМодели;
	ИначеЕсли Не ПроверятьЗадачиДругихПериодов Тогда
		НачалоПериода = Макс(НачалоПериода, НачалоДействияМодели);
	КонецЕсли;
	
	ТаблицаРезультат = ПолучитьТаблицуЗадачБюджетирования(МодельБюджетирования, НачалоПериода, КонецПериода, 
													ДополнятьФактическимиЗадачами, ПроверятьЗадачиДругихПериодов);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Функция возвращает таблицу со связями задач между собой
//
// Параметры
//  ТаблицаЗадач - ТаблицаЗначений - таблица, полученная функцией "ПолучитьБюджетныеЗадачи"
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица связей между задачами
//
Функция ПолучитьТаблицуСвязейЗадач(ТаблицаЗадач) Экспорт
	
	ТаблицаСвязейЗадач = Новый ТаблицаЗначений;
	ТаблицаСвязейЗадач.Колонки.Добавить("ПредыдущаяЗадача", Новый ОписаниеТипов("Число"));
	ТаблицаСвязейЗадач.Колонки.Добавить("Задача", 			Новый ОписаниеТипов("Число"));
	ТаблицаСвязейЗадач.Колонки.Добавить("СледующаяЗадача", 	Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаЗадачи из ТаблицаЗадач Цикл
		НоваяСтрока = ТаблицаСвязейЗадач.Добавить();
		НоваяСтрока.Задача = СтрокаЗадачи.НомерЗадачи;
		ТаблицаПредыдущих = СтрокаЗадачи.ПредыдущиеЗадачи;
		Если ЗначениеЗаполнено(ТаблицаПредыдущих) Тогда
			Для Каждого ПредыдущаяЗадача из ТаблицаПредыдущих Цикл
				НоваяСтрока = ТаблицаСвязейЗадач.Добавить();
				НоваяСтрока.Задача = СтрокаЗадачи.НомерЗадачи;
				НоваяСтрока.ПредыдущаяЗадача = ПредыдущаяЗадача.НомерЗадачи;
				НоваяСтрока = ТаблицаСвязейЗадач.Добавить();
				НоваяСтрока.Задача = ПредыдущаяЗадача.НомерЗадачи;
				НоваяСтрока.СледующаяЗадача = СтрокаЗадачи.НомерЗадачи;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСвязейЗадач.Сортировать("Задача, ПредыдущаяЗадача, СледующаяЗадача");
	
	Возврат ТаблицаСвязейЗадач;
	
КонецФункции

//-- НЕ УТКА

// Проверяет, действует ли модель бюджетирования.
//
// Параметры:
// 	МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - Модель бюджетирования для проверки.
//
// Возвращаемое значение:
// 	Истина - Модель бюджетирования действует.
// 	Ложь - Модель бюджетирования не действует.
//
Функция МодельБюджетированияДействует(МодельБюджетирования) Экспорт
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МодельБюджетирования, 
		Новый Структура("ПометкаУдаления, Статус"));
		
	Возврат НЕ РеквизитыОбъекта.ПометкаУдаления 
		И РеквизитыОбъекта.Статус = Перечисления.СтатусыМоделейБюджетирования.Действует;
	
КонецФункции

// Возвращает количество действующих моделей бюджетирования.
//
// Возвращаемое значение:
// 	 Число - Количество действующих моделей.
//
Функция КоличествоДействующихМоделейБюджетирования() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	СУММА(1) КАК Количество
		|ИЗ
		|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
		|ГДЕ
		|	МоделиБюджетирования.Статус = &Статус
		|	И НЕ МоделиБюджетирования.ПометкаУдаления");
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыМоделейБюджетирования.Действует);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Количество, 0);
	
КонецФункции

// Получает модель бюджетирования по умолчанию для подстановки.
//
// Возвращаемое значение:
// 	СправочникСсылка.МодельБюджетирования - Модель бюджетирования по умолчанию или найденная по статистике.
// 	Неопределено                          - Если действующих моделей бюджетирования нет.
//
Функция МодельБюджетированияПоУмолчанию() Экспорт
		
	СтатусДействует = Перечисления.СтатусыМоделейБюджетирования.Действует;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2
		|	МоделиБюджетирования.Ссылка КАК МодельБюджетирования
		|ИЗ
		|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
		|ГДЕ
		|	МоделиБюджетирования.Статус = &Статус
		|	И НЕ МоделиБюджетирования.ПометкаУдаления");
	Запрос.УстановитьПараметр("Статус", СтатусДействует);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли Выборка.Количество() = 1 Тогда
		
		Возврат Выборка.МодельБюджетирования;
		
	КонецЕсли;
		
	Ссылка = Документы.ЭкземплярБюджета.ПустаяСсылка();
	ЗаполняемыеРеквизиты = Новый Структура("МодельБюджетирования");
	ПараметрыОтбора = Новый Структура("ПометкаУдаления", Ложь);
	ЗаполнениеСвойствПоСтатистикеСервер.ПолучитьЗначенияСвойств(Ссылка, ЗаполняемыеРеквизиты, ПараметрыОтбора);
	
	Если Не ЗначениеЗаполнено(ЗаполняемыеРеквизиты.МодельБюджетирования) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаполняемыеРеквизиты.МодельБюджетирования, "Статус") <> СтатусДействует Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗаполняемыеРеквизиты.МодельБюджетирования;
	
КонецФункции

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
// 
// Возвращаемое значание:
// 	Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Периодичность");
	Результат.Добавить("НачалоДействия");
	Результат.Добавить("БюджетыПоОрганизациям");
	Результат.Добавить("БюджетыПоПодразделениям");
	Результат.Добавить("ИспользоватьУтверждениеБюджетов");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Перем Дата, НачалоПериода, ОкончаниеПериода;
	
	ПереопределенныеДанныеВыбора = Неопределено;
	Если Параметры.Свойство("Дата", Дата) Тогда
		
		ПереопределенныеДанныеВыбора = БюджетнаяОтчетностьВызовСервера.МоделиБюджетированияСОтборомПоДате(Дата);
		
	ИначеЕсли Параметры.Свойство("НачалоПериода", НачалоПериода)
			И Параметры.Свойство("ОкончаниеПериода", ОкончаниеПериода) Тогда
		
		ПереопределенныеДанныеВыбора = БюджетнаяОтчетностьВызовСервера.МоделиБюджетированияСОтборомПоПериоду(НачалоПериода, ОкончаниеПериода);
		
	КонецЕсли;
	
	Если ПереопределенныеДанныеВыбора <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПереопределенныеДанныеВыбора;
		
	Иначе
		
		Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТКА

#Область МеханизмФормированияБюджетногоРасписанияСлужебныеПроцедуры

Функция ПолучитьДатуПоКалендарю(МенеджерГрафика, Дата, Отклонение)
	
	Если Отклонение > 0 Тогда
		ЗнакСравнения = ">=";
		Функц = "МАКСИМУМ";
		Порядок = "ВОЗР";
	ИначеЕсли Отклонение < 0 Тогда
		ЗнакСравнения = "<=";
		Функц = "МИНИМУМ";
		Порядок = "УБЫВ";
	Иначе
		Возврат Дата;
	КонецЕсли;
	
	АбсОтклонение = Макс(Отклонение, -Отклонение);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерГрафика;
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ " + Формат((АбсОтклонение + 1), "ЧГ=") + "
					|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
					|	ПОМЕСТИТЬ тмпДанныеГрафика
					|ИЗ
					|	ДанныеГрафика КАК КалендарныеГрафики
					|ГДЕ
					|	КалендарныеГрафики.ДатаГрафика " + ЗнакСравнения + " &ДатаГрафика
					|
					|УПОРЯДОЧИТЬ ПО
					|	ДатаГрафика " + Порядок + "
					|;
					|ВЫБРАТЬ " + Функц + "(тмпДанныеГрафика.ДатаГрафика) ИЗ тмпДанныеГрафика
					|";
	
	Запрос.УстановитьПараметр("ДатаГрафика", Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Запрос.Текст = "УНИЧТОЖИТЬ тмпДанныеГрафика";
	Запрос.Выполнить();
	
	Если Не ЗначениеЗаполнено(Выборка.ДатаГрафика) Тогда
		 Возврат Дата;
	КонецЕсли;
	
	Возврат Выборка.ДатаГрафика;
	
КонецФункции

Процедура ПроверитьЗаполнениеГрафиковЗаПериод(ДатаНачала, ДатаОкончания, График, Отказ)
	Перем Ошибки;
	
	ТаблицаГодов = Новый ТаблицаЗначений;
	ТаблицаГодов.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	ТаблицаГодов.Колонки.Добавить("График", Новый ОписаниеТипов("СправочникСсылка.Календари"));
	
	Для Год = Год(ДатаНачала) по Год(ДатаОкончания) Цикл
		НоваяСтрока = ТаблицаГодов.Добавить();
		НоваяСтрока.Год = Год;
		НоваяСтрока.График = График;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаГодов.Год,
		|	ТаблицаГодов.График
		|ПОМЕСТИТЬ ТаблицаГодов
		|ИЗ
		|	&ТаблицаГодов КАК ТаблицаГодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаГодов.Год,
		|	ТаблицаГодов.График,
		|	КалендарныеГрафики.Год КАК ГодГрафика,
		|	МАКСИМУМ(КалендарныеГрафики.ДеньВключенВГрафик) КАК ДеньВключенВГрафик
		|ПОМЕСТИТЬ ТаблицаПроверки
		|ИЗ
		|	ТаблицаГодов КАК ТаблицаГодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ПО ТаблицаГодов.Год = КалендарныеГрафики.Год
		|			И ТаблицаГодов.График = КалендарныеГрафики.Календарь
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаГодов.График,
		|	ТаблицаГодов.Год,
		|	КалендарныеГрафики.Год
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаПроверки.Год КАК Год
		|ИЗ
		|	ТаблицаПроверки КАК ТаблицаПроверки
		|ГДЕ
		|	(ТаблицаПроверки.ГодГрафика ЕСТЬ NULL 
		|			ИЛИ ТаблицаПроверки.ДеньВключенВГрафик = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Год";

	Запрос.УстановитьПараметр("ТаблицаГодов", ТаблицаГодов);
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СообщениеОбОшибке = НСтр("ru='Не заполнен основной график работы предприятия на %1 г.';uk='Не заповнений основний графік роботи підприємства на %1 р.'");
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, Формат(ВыборкаДетальныеЗаписи.Год, "ЧГ="));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , СообщениеОбОшибке, "");
		Отказ = Истина;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
КонецПроцедуры

Функция ТаблицуНомеровЗадачВСтроку(ТаблицаНомеровЗадач)
	
	Результат = "";
	Для Каждого СтрокаЗадачи из ТаблицаНомеровЗадач Цикл
		Результат = Результат + "| " + СтрокаЗадачи.НомерЗадачи + " |";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТаблицуЗадач()
	
	ТаблицаЗадач = Новый ТаблицаЗначений;
	ТаблицаЗадач.Колонки.Добавить("НомерЗадачи", 						Новый ОписаниеТипов("Число"));
	ТаблицаЗадач.Колонки.Добавить("ЭтапПодготовкиБюджетов", 			Новый ОписаниеТипов("СправочникСсылка.ЭтапыПодготовкиБюджетов"));
	ТаблицаЗадач.Колонки.Добавить("ПовторяемыйЭтапПодготовкиБюджетов", 	Новый ОписаниеТипов("СправочникСсылка.ЭтапыПодготовкиБюджетов"));
	ТаблицаЗадач.Колонки.Добавить("ПроцессПодготовкиБюджетов", 			Новый ОписаниеТипов("ДокументСсылка.ПроцессПодготовкиБюджетов"));
	ТаблицаЗадач.Колонки.Добавить("Действие", 							Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДействийЭтаповПодготовкиБюджетов"));
	ТаблицаЗадач.Колонки.Добавить("Исполнитель", 						Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаЗадач.Колонки.Добавить("Периодичность", 						Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТаблицаЗадач.Колонки.Добавить("НастройкаДействия");					// Хранилище значений
	
	ТаблицаЗадач.Колонки.Добавить("Период", 							Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("ПериодСтрокой", 						Новый ОписаниеТипов("Строка"));
	ТаблицаЗадач.Колонки.Добавить("ДатаНачала", 						Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("ДатаОкончания", 						Новый ОписаниеТипов("Дата"));
	
	ТаблицаЗадач.Колонки.Добавить("ПредыдущиеЗадачиСтрокой", 			Новый ОписаниеТипов("Строка"));
	ТаблицаЗадач.Колонки.Добавить("ПредыдущиеЗадачи");					// Таблица значений
	
	ТаблицаЗадач.Колонки.Добавить("Задача", 							Новый ОписаниеТипов("ЗадачаСсылка.БюджетнаяЗадача"));
	ТаблицаЗадач.Колонки.Добавить("ЗадачаВыполнена", 					Новый ОписаниеТипов("Булево"));
	ТаблицаЗадач.Колонки.Добавить("ДатаНачалаФакт", 					Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("ДатаОкончанияФакт", 					Новый ОписаниеТипов("Дата"));
	
	ТаблицаЗадач.Индексы.Добавить("НомерЗадачи");
	
	Возврат ТаблицаЗадач;
	
КонецФункции

Функция ПолучитьПериодЗадачи(Выборка, ТаблицаЗадач, МенеджерГрафика, 
								ПараметрыПериодаГруппы, ТаблицаПредыдущихЗадач, ДополнитьФактом = Ложь, СведенияОФакте = Неопределено)
								
	Если ДополнитьФактом И СведенияОФакте <> Неопределено Тогда
		ДатаОкончания = СведенияОФакте.ДатаОкончания;
		Если Не СведенияОФакте.Выполнена Тогда
			ДатаОкончания = КонецДня(ТекущаяДата());
		КонецЕсли;
		Возврат Новый Структура("ДатаНачалаЗадачи, ДатаОкончанияЗадачи", СведенияОФакте.ДатаНачала, ДатаОкончания);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Выборка.ПроцессПодготовкиБюджетов) Тогда
		//плановое формирование задач
		
		Если Выборка.УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаЭтаповПодготовкиБюджетов.ДоНачалаПериода
			ИЛИ Выборка.УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаЭтаповПодготовкиБюджетов.ПослеНачалаПериода Тогда
			ДатаНачалаЗадачи = ПараметрыПериодаГруппы.ДатаНачала;
		Иначе
			ДатаНачалаЗадачи = КонецДня(ПараметрыПериодаГруппы.ДатаОкончания) + 1;
		КонецЕсли;
		
		Если Выборка.УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаЭтаповПодготовкиБюджетов.ДоНачалаПериода
			ИЛИ Выборка.УсловиеЗапуска = Перечисления.ТипыУсловийЗапускаЭтаповПодготовкиБюджетов.ДоОкончанияПериода Тогда
			Знак = -1;
		Иначе
			Знак = 1;
		КонецЕсли;
		
		Если Выборка.ТипСрока = Перечисления.ТипыСроковЭтаповПодготовкиБюджетов.ВРабочихДнях Тогда
			ДатаНачалаЗадачи = ПолучитьДатуПоКалендарю(МенеджерГрафика, ДатаНачалаЗадачи, Знак * Выборка.Срок);
		Иначе
			ДатаНачалаЗадачи = ДатаНачалаЗадачи + Знак * Выборка.Срок * 86400;
		КонецЕсли;
		
	Иначе
		
		ДатаНачалаЗадачи = Выборка.ДатаПроцесса;
		
	КонецЕсли;
	
	Если ДополнитьФактом Тогда
		ДатаПредыдущейЗадачи = ТекущаяДата();
	Иначе
		ДатаПредыдущейЗадачи = Дата(1, 1, 1);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы из ТаблицаПредыдущихЗадач Цикл
		НайденнаяСтрока = ТаблицаЗадач.Найти(СтрокаТаблицы.НомерЗадачи, "НомерЗадачи");
		ДатаОкончания = Неопределено;
		Если ЗначениеЗаполнено(НайденнаяСтрока.Задача)
			И НайденнаяСтрока.ЗадачаВыполнена = Истина Тогда
			ДатаОкончания = НайденнаяСтрока.ДатаОкончанияФакт;
		КонецЕсли;
		Если не ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = НайденнаяСтрока.ДатаОкончания;
		КонецЕсли;
		ДатаПредыдущейЗадачи = Макс(ДатаПредыдущейЗадачи, ДатаОкончания);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДатаПредыдущейЗадачи) Тогда
		ДатаНачалаЗадачи = Макс(ДатаНачалаЗадачи, ДатаПредыдущейЗадачи + 1);
	КонецЕсли;
	
	Если Выборка.ТипДлительности = Перечисления.ТипыСроковЭтаповПодготовкиБюджетов.ВРабочихДнях Тогда
		ДатаОкончанияЗадачи = ПолучитьДатуПоКалендарю(МенеджерГрафика, ДатаНачалаЗадачи, Выборка.Длительность);
	Иначе
		ДатаОкончанияЗадачи = ДатаНачалаЗадачи + Выборка.Длительность * 86400;
	КонецЕсли;
	
	Возврат Новый Структура("ДатаНачалаЗадачи, ДатаОкончанияЗадачи", НачалоДня(ДатаНачалаЗадачи), КонецДня(ДатаОкончанияЗадачи));
	
КонецФункции

#КонецОбласти

#Область МеханизмФормированияБюджетногоРасписанияЗаполнениеТаблицыРасписания

// Функция добавляет в таблицу планируемых задач строку
//	выполняет следующие действия:
//	1. добавляет строку планируемой задачи
//	2. заполняет сведения о фактическом исполнении этапа, если в параметрах есть флаг "дополнять фактом"
//
// Параметры
//  Выборка  						- ДеревоЗначений - результат запроса к справочнику "Этапы подготовки бюджетов" с иерархией этапов
//  ПараметрыТаблицыЗадач  			- Структура - содержит таблицу с задачами и флаг "дополнять фактом"
//  МенеджерГрафика  				- МенеджерВременныхТаблиц - содержит таблицу с данными графика, отфильтрованную
//									по графику и индексированную по дате
//  ПараметрыПериодаГруппы  		- Структура - структура с началом и окончанием периода за который формируем задачи
//  ТаблицаПредыдущихЗадач  		- ТаблицаЗначений - содержит номер задач, которые предшествуют текущей задачи
//		
//  ТаблицаЗначений 				- содержит номера задач, при выполнении которых группа или задача будет считаться выполненой
//
Функция ДобавитьСтрокуПлановойЗадачи(Выборка, ПараметрыТаблицыЗадач, МенеджерГрафика, ПараметрыПериодаГруппы, ТаблицаПредыдущихЗадач)
	
	ТаблицаЗадач = ПараметрыТаблицыЗадач.ТаблицаЗадач;
	
	НоваяСтрока 						= ТаблицаЗадач.Добавить();
	НоваяСтрока.НомерЗадачи 			= ТаблицаЗадач.Количество();
	НоваяСтрока.ЭтапПодготовкиБюджетов 	= Выборка.ЭтапПодготовкиБюджетов;
	НоваяСтрока.ПовторяемыйЭтапПодготовкиБюджетов 	= Выборка.ПовторяемыйЭтапПодготовкиБюджетов;
	НоваяСтрока.ПроцессПодготовкиБюджетов			= Выборка.ПроцессПодготовкиБюджетов;
	НоваяСтрока.Действие 				= Выборка.Действие;
	НоваяСтрока.НастройкаДействия 		= Выборка.НастройкаДействия;
	НоваяСтрока.Исполнитель 			= Выборка.Исполнитель;
	НоваяСтрока.Периодичность 			= Выборка.ПериодичностьРодитель;
	
	ПараметрыДатПлан = ПолучитьПериодЗадачи(Выборка, 
											ТаблицаЗадач, 
											МенеджерГрафика, 
											ПараметрыПериодаГруппы, 
											ТаблицаПредыдущихЗадач);
	
	НоваяСтрока.ДатаНачала 				= ПараметрыДатПлан.ДатаНачалаЗадачи;
	НоваяСтрока.ДатаОкончания 			= ПараметрыДатПлан.ДатаОкончанияЗадачи;
	
	Если ПараметрыТаблицыЗадач.Свойство("ДополнитьФактом") Тогда
		
		СведенияОФакте = Неопределено;
		КлючПоиска = Новый Структура("Период, ЭтапПодготовкиБюджетов, ПовторяемыйЭтапПодготовкиБюджетов, ПроцессПодготовкиБюджетов", 
										ПараметрыПериодаГруппы.ДатаНачала, Выборка.ЭтапПодготовкиБюджетов, 
										Выборка.ПовторяемыйЭтапПодготовкиБюджетов, Выборка.ПроцессПодготовкиБюджетов);
		
		НайденныеСтроки = ПараметрыТаблицыЗадач.ТаблицаФакт.НайтиСтроки(КлючПоиска);
		Если НайденныеСтроки.Количество() Тогда
			СведенияОФакте = НайденныеСтроки[0];
			НоваяСтрока.Задача 			= СведенияОФакте.Задача;
			НоваяСтрока.ЗадачаВыполнена = СведенияОФакте.Выполнена;
			НоваяСтрока.Исполнитель 	= СведенияОФакте.Исполнитель;
		КонецЕсли;
		ПараметрыДатФакт = ПолучитьПериодЗадачи(Выборка, 
											ТаблицаЗадач, 
											МенеджерГрафика, 
											ПараметрыПериодаГруппы, 
											ТаблицаПредыдущихЗадач,
											Истина,
											СведенияОФакте);

		НоваяСтрока.ДатаНачалаФакт 			= ПараметрыДатФакт.ДатаНачалаЗадачи;
		НоваяСтрока.ДатаОкончанияФакт		= ПараметрыДатФакт.ДатаОкончанияЗадачи;
		Если НайденныеСтроки.Количество() Тогда
			ПараметрыТаблицыЗадач.ТаблицаФакт.Удалить(СведенияОФакте);
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока.Период		 	= ПараметрыПериодаГруппы.ДатаНачала;
	НоваяСтрока.ПериодСтрокой 	= БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(
																НоваяСтрока.Период, 
																НоваяСтрока.Периодичность);
	
	НоваяСтрока.ПредыдущиеЗадачиСтрокой = ТаблицуНомеровЗадачВСтроку(ТаблицаПредыдущихЗадач);
	НоваяСтрока.ПредыдущиеЗадачи 		= ТаблицаПредыдущихЗадач.Скопировать();
	
	ПредыдущиеЗадачи = Новый ТаблицаЗначений;
	ПредыдущиеЗадачи.Колонки.Добавить("НомерЗадачи");
	ПредыдущиеЗадачи.Добавить().НомерЗадачи = НоваяСтрока.НомерЗадачи;
	
	Возврат ПредыдущиеЗадачи;
	
КонецФункции

// Рекурсивная функция генерации списка задач на основании дерева этапов
//	выполняет следующие действия:
//	1. если это группа задач - передает управление процедуры, обрабатывающей группы
//		формирование задач по группе выполняется для каждого периода группы
//	2. если это ЭтапПодготовкиБюджетов - передает управление процедуре, формирующей строку задачи
//
// Параметры
//  Выборка  						- ДеревоЗначений - результат запроса к справочнику "Этапы подготовки бюджетов" с иерархией этпаов
//  ТаблицаЗадач  					- ТаблицаЗначений - заполняемая таблица
//  ПараметрыПериодаГруппы  		- Структура - структура с началом и окончанием периода за который формируем задачи
//  МенеджерГрафика  				- МенеджерВременныхТаблиц - содержит таблицу с данными графика, отфильтрованную
//									по графику и индексированную по дате
//  ТаблицаПредыдущихЗадач  			- ТаблицаЗначений - содержит номер задач, которые предшествуют текущей задачи
//		
//  ТаблицаЗначений 				- содержит номера задач, при выполнении которых группа или задача будет считаться выполненой
//
Функция ОбработатьИсполнениеШагаПроцесса(Выборка, 
											ТаблицаЗадач, 
											ПараметрыПериодаГруппы, 
											МенеджерГрафика, 
											ТаблицаПредыдущихЗадач)
	
	Если Не Выборка.ЭтоГруппа Тогда
		
		ПропуститьЭтап = Ложь;
		Если ЗначениеЗаполнено(Выборка.ПроцессПодготовкиБюджетов) Тогда
			
			НастройкиРасчета = ТаблицаЗадач.НастройкиРасчетаПроцессов[Выборка.ПроцессПодготовкиБюджетов];
			СтруктураПоиска = Новый Структура("Период, НеВыполняется,
											|ЭтапПодготовкиБюджетов, ПовторяемыйЭтапПодготовкиБюджетов", 
											ПараметрыПериодаГруппы.ДатаНачала, Ложь, 
											Выборка.ЭтапПодготовкиБюджетов, Выборка.ПовторяемыйЭтапПодготовкиБюджетов);
			
			НайденныеСтроки = НастройкиРасчета.НайтиСтроки(СтруктураПоиска);
			
			Если Не НайденныеСтроки.Количество() Тогда
				ПропуститьЭтап = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПропуститьЭтап Тогда
				
			Если ЗначениеЗаполнено(Выборка.ПроцессПодготовкиБюджетов) Тогда
			
				НастройкиРасчета = ТаблицаЗадач.НастройкиРасчетаПроцессов[Выборка.ПроцессПодготовкиБюджетов];
				СтруктураПоиска = Новый Структура("Период, ЭтапПодготовкиБюджетов, ПовторяемыйЭтапПодготовкиБюджетов");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				СтруктураПоиска.Период = ПараметрыПериодаГруппы.ДатаНачала;
				НайденныеСтроки = НастройкиРасчета.НайтиСтроки(СтруктураПоиска);
				
				ЗаполнитьЗначенияСвойств(Выборка, НайденныеСтроки[0], "Длительность, ТипДлительности");
				Выборка.Исполнитель = НайденныеСтроки[0].Ответственный;
			
			КонецЕсли;
		
			НоваяТаблицаПредыдущих = ДобавитьСтрокуПлановойЗадачи(Выборка, 
															ТаблицаЗадач, 
															МенеджерГрафика, 
															ПараметрыПериодаГруппы,
															ТаблицаПредыдущихЗадач);
			
		КонецЕсли;
		
	Иначе
		
		ДатаНачала = БюджетированиеКлиентСервер.ДатаНачалаПериода(ПараметрыПериодаГруппы.ДатаНачала, Выборка.Периодичность);
		
		Пока ДатаНачала <= ПараметрыПериодаГруппы.ДатаОкончания Цикл
			
			ДатаКонца = БюджетированиеКлиентСервер.ДатаКонцаПериода(ДатаНачала, Выборка.Периодичность);
			ДатаКонца = Мин(ДатаКонца, ПараметрыПериодаГруппы.ДатаОкончания);
			
			ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаКонца);
			
			НоваяТаблицаПредыдущих = ЗаполнитьДеревоЗадач(Выборка, 
															ТаблицаЗадач, 
															ПараметрыПериода, 
															МенеджерГрафика, 
															ТаблицаПредыдущихЗадач);
			
			ДатаНачала = ДатаКонца + 1; //Переходим в следующий период
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НоваяТаблицаПредыдущих;
	
КонецФункции

// Рекурсивная функция генерации списка задач на основании дерева этапов процесса
//	выполняет следующие действия:
//	1. для каждой строки дерева, содержащей этап процесса вызывает процедуру - обработчик шага процесса
//	2. на основании вида группы формирует таблицу, которая содержит номера задач, 
//	при выполнении которых группа будет считаться выполненной и процесс перейдет на следующий за группой шаг
//
// Параметры
//  ДеревоШагов  					- ДеревоЗначений - результат запроса к справочнику "Шаги бюджетного процесса" с иерархией шагов
//  ТаблицаЗадач  					- ТаблицаЗначений - заполняемая таблица
//  ПараметрыПериодаГруппы  		- Структура - структура с началом и окончанием периода за который формируем задачи
//  МенеджерГрафика  				- МенеджерВременныхТаблиц - содержит таблицу с данными графика, отфильтрованную
//									по графику и индексированную по дате
//  ПредыдущиеЗадачи  				- ТаблицаЗначений - содержит номер задач, которые предшествуют текущей задачи
//	
//	Возвращаемое значение:
//  ТаблицаЗначений 				- содержит номера задач, при выполнении которых группа будет считаться выполненой
//
Функция ЗаполнитьДеревоЗадач(ДеревоШагов, ТаблицаЗадач, ПараметрыПериодаГруппы, 
										МенеджерГрафика, ПредыдущиеЗадачи = Неопределено)
							
	Если ПредыдущиеЗадачи = Неопределено Тогда
		ПредыдущиеЗадачи = Новый ТаблицаЗначений;
		ПредыдущиеЗадачи.Колонки.Добавить("НомерЗадачи");
	КонецЕсли;
	
	ТаблицаПредыдущихЗадач = ПредыдущиеЗадачи.Скопировать();
	ТекущаяТаблицаПредыдущихЗадач = ТаблицаПредыдущихЗадач.СкопироватьКолонки();
	
	ПоследовательнаяГруппа = Ложь;
	
	Для Каждого Выборка из ДеревоШагов.Строки Цикл
		
		НоваяТаблицаПредыдущих = ОбработатьИсполнениеШагаПроцесса(Выборка, 
																ТаблицаЗадач, 
																ПараметрыПериодаГруппы, 
																МенеджерГрафика, 
																ТаблицаПредыдущихЗадач);
																
		Если НоваяТаблицаПредыдущих = Неопределено Тогда
			Продолжить; //ни одна задача не входит в период отчета
		КонецЕсли;
		
		Если Выборка.ПорядокВыполненияЭтапов = Перечисления.ПорядокВыполненияЭтаповПодготовкиБюджетов.Последовательно Тогда
			ТаблицаПредыдущихЗадач = НоваяТаблицаПредыдущих;
			ПоследовательнаяГруппа = Истина;
		Иначе
			Для Каждого СтрокаЗадачи из НоваяТаблицаПредыдущих Цикл
				ТекущаяТаблицаПредыдущихЗадач.Добавить().НомерЗадачи = СтрокаЗадачи.НомерЗадачи;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПоследовательнаяГруппа и НоваяТаблицаПредыдущих <> Неопределено Тогда
		Для Каждого СтрокаЗадачи из НоваяТаблицаПредыдущих Цикл
			ТекущаяТаблицаПредыдущихЗадач.Добавить().НомерЗадачи = СтрокаЗадачи.НомерЗадачи;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекущаяТаблицаПредыдущихЗадач;
	
КонецФункции

Процедура СкопироватьПовторяемыеЭтапыПодготовкиБюджетов(Источник, Приемник, ПовторяемыйЭтапПодготовкиБюджетов)
	
	Для Каждого Строка из Источник Цикл
		Если Строка.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ПовторГруппыЭтапов Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЭтапПодготовкиБюджетов = НоваяСтрока.ЭтапПодготовкиБюджетов;
		НоваяСтрока.ЭтапПодготовкиБюджетов = ПовторяемыйЭтапПодготовкиБюджетов;
		НоваяСтрока.ПовторяемыйЭтапПодготовкиБюджетов = ЭтапПодготовкиБюджетов;
		СкопироватьПовторяемыеЭтапыПодготовкиБюджетов(Строка.Строки, НоваяСтрока.Строки, ПовторяемыйЭтапПодготовкиБюджетов);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПовторяемыеЭтапыПодготовкиБюджетов(ДеревоШагов) Экспорт
	
	СтруктураПоискаПовторовГруппы = Новый Структура("Действие", Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ПовторГруппыЭтапов);
	НайденныеСтроки = ДеревоШагов.Строки.НайтиСтроки(СтруктураПоискаПовторовГруппы, Истина);
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		НайденнаяСтрока.ЭтоГруппа = Истина;
		
		НастройкиДействия = НайденнаяСтрока.НастройкаДействия.Получить();
		ПовторяемаяГруппа = НастройкиДействия.Найти("ГруппаШагов", "Имя");
		Если ПовторяемаяГруппа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ЭтапПодготовкиБюджетов, ПовторяемыйЭтапПодготовкиБюджетов", 
											ПовторяемаяГруппа.Значение, Справочники.ЭтапыПодготовкиБюджетов.ПустаяСсылка());
		СтрокиПовторения = ДеревоШагов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если СтрокиПовторения.Количество() Тогда
			НайденнаяСтрока.Периодичность = СтрокиПовторения[0].Периодичность;
			СкопироватьПовторяемыеЭтапыПодготовкиБюджетов(СтрокиПовторения[0].Строки, НайденнаяСтрока.Строки, НайденнаяСтрока.ЭтапПодготовкиБюджетов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПорядокВыполненияПоПроцессу(ДанныеДокумента, НоваяСтрока)
	
	Если Не ЗначениеЗаполнено(НоваяСтрока.ЭтапПодготовкиБюджетов) Тогда
		//Вспомогательный этап
		Возврат Перечисления.ПорядокВыполненияЭтаповПодготовкиБюджетов.Последовательно;
	КонецЕсли;
	
	ИсточникРеквизитов = ?(ЗначениеЗаполнено(НоваяСтрока.ПовторяемыйЭтапПодготовкиБюджетов), 
									НоваяСтрока.ПовторяемыйЭтапПодготовкиБюджетов,
									НоваяСтрока.ЭтапПодготовкиБюджетов);
		
	Реквизиты = ДанныеДокумента.ТаблицаРеквизитов.Найти(ИсточникРеквизитов);
		
	Если НоваяСтрока.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ПовторГруппыЭтапов Тогда
		НастройкиДействия = НоваяСтрока.НастройкаДействия.Получить();
		ПовторяемаяГруппа = НастройкиДействия.Найти("ГруппаШагов", "Имя").Значение;
		РеквизитыПоСсылкеНаГруппу = ДанныеДокумента.ТаблицаРеквизитов.Найти(ПовторяемаяГруппа);
		Возврат РеквизитыПоСсылкеНаГруппу.ПорядокВыполненияЭтапов;
	Иначе
		Возврат Реквизиты.ПорядокВыполненияЭтапов;
	КонецЕсли;
	
КонецФункции
	
Процедура СкопироватьЭтапыПроцессаПодготовкиБюджетов(Источник, Приемник, ДанныеДокумента)
	
	Для Каждого Строка из Источник Цикл
		
		НоваяСтрока = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПроцессПодготовкиБюджетов = ДанныеДокумента.ПроцессПодготовкиБюджетов;
		НоваяСтрока.ДатаПроцесса = ДанныеДокумента.Дата;
		Если ЗначениеЗаполнено(НоваяСтрока.Родитель) Тогда
			НоваяСтрока.ПериодичностьРодитель = НоваяСтрока.Родитель.Периодичность;
		КонецЕсли;
		
		ИсточникРеквизитов = ?(ЗначениеЗаполнено(НоваяСтрока.ПовторяемыйЭтапПодготовкиБюджетов), 
										НоваяСтрока.ПовторяемыйЭтапПодготовкиБюджетов,
										НоваяСтрока.ЭтапПодготовкиБюджетов);
		
		Реквизиты = ДанныеДокумента.ТаблицаРеквизитов.Найти(ИсточникРеквизитов);
		НоваяСтрока.Действие = Реквизиты.Действие;
		НоваяСтрока.НастройкаДействия = Реквизиты.НастройкаДействия;
		
		Если НоваяСтрока.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ПовторГруппыЭтапов Тогда
			НоваяСтрока.ПорядокВыполненияЭтапов = ПорядокВыполненияПоПроцессу(ДанныеДокумента, НоваяСтрока);
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Родитель) Тогда
			НоваяСтрока.ПорядокВыполненияЭтапов = ПорядокВыполненияПоПроцессу(ДанныеДокумента, НоваяСтрока.Родитель);
		КонецЕсли;
		
		СкопироватьЭтапыПроцессаПодготовкиБюджетов(Строка.Строки, НоваяСтрока.Строки, ДанныеДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДействующимиПроцессамиПодготовкиБюджетов(ДеревоШагов, МодельБюджетирования, 
													ПараметрыТаблицыЗадач, ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроцессПодготовкиБюджетов.Ссылка
		|ПОМЕСТИТЬ ТаблицаПроцессов
		|ИЗ
		|	Документ.ПроцессПодготовкиБюджетов КАК ПроцессПодготовкиБюджетов
		|ГДЕ
		|	ПроцессПодготовкиБюджетов.МодельБюджетирования = &МодельБюджетирования
		|	И НЕ ПроцессПодготовкиБюджетов.ПометкаУдаления
		|	И (ПроцессПодготовкиБюджетов.Статус = &Выполняется
		|			ИЛИ ПроцессПодготовкиБюджетов.Ссылка В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					Фильтр.Ссылка
		|				ИЗ
		|					Документ.ПроцессПодготовкиБюджетов.НастройкиРасчета КАК Фильтр
		|				ГДЕ
		|					Фильтр.Период МЕЖДУ &НачалоПериода И &КонецПериода)
		|			ИЛИ ПроцессПодготовкиБюджетов.Ссылка В
		|				(ВЫБРАТЬ
		|					Фильтр.ПроцессПодготовкиБюджетов
		|				ИЗ
		|					Задача.БюджетнаяЗадача КАК Фильтр
		|				ГДЕ
		|					(НЕ Фильтр.Выполнена
		|						ИЛИ Фильтр.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|						ИЛИ Фильтр.СрокИсполнения МЕЖДУ &НачалоПериода И &КонецПериода
		|						ИЛИ Фильтр.ДатаИсполнения МЕЖДУ &НачалоПериода И &КонецПериода)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроцессПодготовкиБюджетов.Ссылка,
		|	ПроцессПодготовкиБюджетов.НастройкиИерархии.(
		|		Ссылка,
		|		НомерСтроки,
		|		ГруппаЭтапов,
		|		ЭтапПодготовкиБюджетов,
		|		ПовторяемыйЭтапПодготовкиБюджетов,
		|		Код,
		|		Периодичность
		|	),
		|	ПроцессПодготовкиБюджетов.НастройкиРасчета.(
		|		Ссылка,
		|		НомерСтроки,
		|		Период,
		|		ЭтапПодготовкиБюджетов,
		|		ПовторяемыйЭтапПодготовкиБюджетов,
		|		Ответственный,
		|		Длительность,
		|		ТипДлительности,
		|		НеВыполняется,
		|		ВыполнятьАвтоматически
		|	),
		|	ПроцессПодготовкиБюджетов.Периодичность,
		|	ПроцессПодготовкиБюджетов.ГруппаЭтапов.ЭтоГруппа,
		|	ПроцессПодготовкиБюджетов.Дата
		|ИЗ
		|	ТаблицаПроцессов КАК ТаблицаПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроцессПодготовкиБюджетов КАК ПроцессПодготовкиБюджетов
		|		ПО ТаблицаПроцессов.Ссылка = ПроцессПодготовкиБюджетов.Ссылка";
	
	Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
	Запрос.УстановитьПараметр("Выполняется", Перечисления.СтатусыПроцессовПодготовкиБюджетов.Выполняется);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭтапыПодготовкиБюджетов.Ссылка,
	               |	ЭтапыПодготовкиБюджетов.Действие,
	               |	ЭтапыПодготовкиБюджетов.НастройкаДействия,
	               |	ЭтапыПодготовкиБюджетов.ПорядокВыполненияЭтапов,
	               |	ЭтапыПодготовкиБюджетов.УсловиеЗапуска,
	               |	ЭтапыПодготовкиБюджетов.Родитель.ПорядокВыполненияЭтапов
	               |ИЗ
	               |	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
	               |ГДЕ
	               |	ЭтапыПодготовкиБюджетов.Владелец = &МодельБюджетирования";
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	ТаблицаРеквизитов.Индексы.Добавить("Ссылка");
	
	ПараметрыТаблицыЗадач.Вставить("НастройкиРасчетаПроцессов", Новый Соответствие);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НастройкиИерархии = ВыборкаДетальныеЗаписи.НастройкиИерархии.Выгрузить();
		ДеревоЭтаповПроцесса = Документы.ПроцессПодготовкиБюджетов.ИерархияЭтаповПроцессаПоДокументу(НастройкиИерархии);
		
		ДанныеДокумента = Новый Структура("ТаблицаРеквизитов, ПроцессПодготовкиБюджетов, НастройкиРасчета, Периодичность, Дата",
											ТаблицаРеквизитов, ВыборкаДетальныеЗаписи.Ссылка, 
											ВыборкаДетальныеЗаписи.НастройкиРасчета.Выгрузить(),
											ВыборкаДетальныеЗаписи.Периодичность,
											ВыборкаДетальныеЗаписи.Дата);
											
		Если Не ВыборкаДетальныеЗаписи.ГруппаЭтаповЭтоГруппа Тогда
			
			ВспомогательнаяГруппа = ДеревоШагов.Строки.Добавить();
			ВспомогательнаяГруппа.Периодичность = ДеревоЭтаповПроцесса.Строки[0].Периодичность;
			ВспомогательнаяГруппа.ПроцессПодготовкиБюджетов = ВыборкаДетальныеЗаписи.Ссылка;
			ВспомогательнаяГруппа.ЭтоГруппа = Истина;
			Приемник = ВспомогательнаяГруппа.Строки;
			
		Иначе
			
			Приемник = ДеревоШагов.Строки;
			
		КонецЕсли;
		
		СкопироватьЭтапыПроцессаПодготовкиБюджетов(ДеревоЭтаповПроцесса.Строки, Приемник, ДанныеДокумента);
		
		ПараметрыТаблицыЗадач.НастройкиРасчетаПроцессов.Вставить(ВыборкаДетальныеЗаписи.Ссылка, 
												ВыборкаДетальныеЗаписи.НастройкиРасчета.Выгрузить());
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает таблицу планируемых задач, построенное по шагам процесса
//	выполняет следующие действия:
//	1. формирует дерево значений с элементами справочника "Этапы подготовки бюджетов"
//	2. подготавливает менеджер временных таблиц для последующего определения длительности "по рабочим дням"
//	3. формирует таблицу с фактическими задачами, если установлен флаг "дополнять фактом". 
//		таблица фактических задач впоследствие используется в алгоритме заполнения итоговой таблице плановых задач
//	4. дополняет таблицу плановых задач фактическими задачами, если эти задачи были сформированы "вне бюджетного процесса"
//
// Параметры
//  МодельБюджетирования  	- СправочникСсылка.МодельБюджетирования - модель для которой строиться дерево задач
//  ДатаНачала  			- дата - дата, с которой будет строиться таблица задач
//  ДатаОкончания  			- дата - дата, по которую будет строиться таблице задач
//  ДополнятьФактом  		- Булево - Если ИСТИНА - то будут заполнены сведения о фактических задачах
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица значений, содержащая сведения о планируемых и фактических шагах бюджетного процесса
//
Функция ПолучитьТаблицуЗадачБюджетирования(МодельБюджетирования, ДатаНачала, ДатаОкончания, ДополнятьФактом, ПроверятьЗадачиДругихПериодов)
	
	Отказ = Ложь;
	График = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	ПроверитьЗаполнениеГрафиковЗаПериод(ДатаНачала, ДатаОкончания, График, Отказ);
	
	ТаблицаЗадач = ПолучитьТаблицуЗадач();
	
	Если Отказ Тогда
		Возврат ТаблицаЗадач;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПодготовкиБюджетов.Ссылка КАК ЭтапПодготовкиБюджетов,
		|	ЭтапыПодготовкиБюджетов.Периодичность КАК Периодичность,
		|	ЭтапыПодготовкиБюджетов.Действие КАК Действие,
		|	ЭтапыПодготовкиБюджетов.НастройкаДействия КАК НастройкаДействия,
		|	ЭтапыПодготовкиБюджетов.Родитель.Периодичность КАК ПериодичностьРодитель,
		|	ЭтапыПодготовкиБюджетов.Родитель.ПорядокВыполненияЭтапов КАК ПорядокВыполненияЭтапов,
		|	ЭтапыПодготовкиБюджетов.Родитель.УсловиеЗапуска КАК УсловиеЗапуска,
		|	ЭтапыПодготовкиБюджетов.Родитель.Срок КАК Срок,
		|	ЭтапыПодготовкиБюджетов.Родитель.ТипСрока КАК ТипСрока,
		|	ЭтапыПодготовкиБюджетов.Длительность - 1 КАК Длительность,
		|	ЭтапыПодготовкиБюджетов.ТипДлительности,
		|	ЭтапыПодготовкиБюджетов.Ответственный КАК Исполнитель,
		|	ЭтапыПодготовкиБюджетов.ЭтоГруппа,
		|	ЭтапыПодготовкиБюджетов.Код КАК Код,
		|	ЗНАЧЕНИЕ(Справочник.ЭтапыПодготовкиБюджетов.ПустаяСсылка) КАК ПовторяемыйЭтапПодготовкиБюджетов
		|ИЗ
		|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
		|ГДЕ
		|	ЭтапыПодготовкиБюджетов.Владелец = &МодельБюджетирования
		|	И (ЭтапыПодготовкиБюджетов.ЭтоГруппа
		|			ИЛИ ЭтапыПодготовкиБюджетов.НеВыполняется = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтапПодготовкиБюджетов ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
	РезультатЗапроса = Запрос.Выполнить();
	ДеревоШагов = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоШагов.Строки.Сортировать("Код", Истина);
	ДеревоШагов.Колонки.Добавить("ПроцессПодготовкиБюджетов", Новый ОписаниеТипов("ДокументСсылка.ПроцессПодготовкиБюджетов"));
	ДеревоШагов.Колонки.Добавить("ДатаПроцесса", Новый ОписаниеТипов("Дата"));
	
	ПараметрыТаблицыЗадач = Новый Структура("ТаблицаЗадач", ТаблицаЗадач);
	
	ДополнитьПовторяемыеЭтапыПодготовкиБюджетов(ДеревоШагов);
	ДополнитьДействующимиПроцессамиПодготовкиБюджетов(ДеревоШагов, МодельБюджетирования, 
											ПараметрыТаблицыЗадач, ДатаНачала, ДатаОкончания);
	
	Запрос = Новый Запрос();
	МенеджерГрафика = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерГрафика;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
		|ПОМЕСТИТЬ ДанныеГрафика
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ГДЕ
		|	КалендарныеГрафики.Календарь = &ГрафикРаботы
		|	И КалендарныеГрафики.ДеньВключенВГрафик
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаГрафика";
	
	Запрос.УстановитьПараметр("ГрафикРаботы", График);
	Запрос.Выполнить();
	
	Если ДополнятьФактом Тогда
		ПараметрыТаблицыЗадач.Вставить("ДополнитьФактом", ДополнятьФактом);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БюджетнаяЗадача.ЭтапПодготовкиБюджетов КАК ЭтапПодготовкиБюджетов,
		|	БюджетнаяЗадача.ПовторяемыйЭтапПодготовкиБюджетов,
		|	БюджетнаяЗадача.Период,
		|	БюджетнаяЗадача.Ссылка КАК Задача,
		|	БюджетнаяЗадача.Исполнитель,
		|	БюджетнаяЗадача.Дата КАК ДатаНачала,
		|	БюджетнаяЗадача.ДатаИсполнения КАК ДатаОкончания,
		|	БюджетнаяЗадача.Выполнена,
		|	БюджетнаяЗадача.ЭтапПодготовкиБюджетов.Родитель.Периодичность КАК Периодичность,
		|	БюджетнаяЗадача.ПроцессПодготовкиБюджетов
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|ГДЕ
		|	БюджетнаяЗадача.МодельБюджетирования = &МодельБюджетирования
		|	И БюджетнаяЗадача.ИсходныйЭтапПодготовкиБюджетов = ЗНАЧЕНИЕ(Справочник.ЭтапыПодготовкиБюджетов.ПустаяСсылка)
		|	И НЕ БюджетнаяЗадача.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
		
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаФакт = РезультатЗапроса.Выгрузить();
		ТаблицаФакт.Индексы.Добавить("Период, ЭтапПодготовкиБюджетов");
		
		ПараметрыТаблицыЗадач.Вставить("ТаблицаФакт", ТаблицаФакт);
		
	КонецЕсли;
	
	Если ПроверятьЗадачиДругихПериодов Тогда
		
		//Дополним конец периода
		//задачи формируем на ДатаОкончания + 365 рабочих или календарных дней
		//365 - максимальная длительность задачи
		МаксДата = ПолучитьДатуПоКалендарю(МенеджерГрафика, ДатаОкончания, 365);
		МаксДата = Макс(МаксДата, ДатаОкончания + 365 * 86400);
		
		КонецДействияМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МодельБюджетирования, "КонецДействия");
		ДатаОкончанияПериода= ?(КонецДействияМодели <> '00010101000000', МИН(МаксДата, КонецДействияМодели), МаксДата);
		
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончанияПериода);
		ЗаполнитьДеревоЗадач(ДеревоШагов, ПараметрыТаблицыЗадач, ПараметрыПериода, МенеджерГрафика);
		
	Иначе
		
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
		ЗаполнитьДеревоЗадач(ДеревоШагов, ПараметрыТаблицыЗадач, ПараметрыПериода, МенеджерГрафика);
		
	КонецЕсли;
	
	Если ДополнятьФактом Тогда
		Для Каждого ОставшасяСтрокаЗадач из ПараметрыТаблицыЗадач.ТаблицаФакт Цикл
			НоваяСтрока 				= ТаблицаЗадач.Добавить();
			НоваяСтрока.НомерЗадачи		= ТаблицаЗадач.Количество();
			НоваяСтрока.Задача 			= ОставшасяСтрокаЗадач.Задача;
			НоваяСтрока.ЗадачаВыполнена	= ОставшасяСтрокаЗадач.Выполнена;
			НоваяСтрока.Исполнитель 	= ОставшасяСтрокаЗадач.Исполнитель;
			НоваяСтрока.Период 			= ОставшасяСтрокаЗадач.Период;
			НоваяСтрока.ДатаНачалаФакт 	= ОставшасяСтрокаЗадач.ДатаНачала;
			НоваяСтрока.Периодичность 	= ОставшасяСтрокаЗадач.Периодичность;
			ДатаОкончания				= ОставшасяСтрокаЗадач.ДатаОкончания;
			Если Не ОставшасяСтрокаЗадач.Выполнена Тогда
				ДатаОкончания = КонецДня(ТекущаяДата());
			КонецЕсли;
			НоваяСтрока.ДатаОкончанияФакт = ДатаОкончания;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаЗадач;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли