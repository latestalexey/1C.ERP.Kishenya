#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция проверяет заполнение вида бюджета
//
// Параметры
//  ВидБюджета  - СправочникСсылка.ВидыБюджетов - проверяемый вид бюджета
//
// Возвращаемое значение:
//   Булево   - результат проверки: истина - нет ошибок, ложь - есть ошибки
//
Функция ВидБюджетаЗаполненПравильно(ВидБюджета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	БюджетПроверен = РегистрыСведений.СтатусыОбработкиВидаБюджета.ПолучитьЗначениеСтатуса(ВидБюджета, "ПроверенУспешно");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если БюджетПроверен = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВидБюджета.ИспользоватьДляВводаПлана Тогда
		РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ;
	Иначе
		РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет;
	КонецЕсли;
	
	СообщенияОбОшибках = Неопределено;
	
	//проверка, что бы был указан хотя бы один источник данных
	ПроверитьНаличиеИсточниковДанных(ВидБюджета, СообщенияОбОшибках, РежимФормирования);
	
	//проверка циклов в формулах
	ПроверитьНаличиеЦиклов(ВидБюджета, СообщенияОбОшибках, РежимФормирования);
	
	//проверка соответствия расположения статей и аналитик
	ПроверитьОтсутствиеЭлементовВидаВсе(ВидБюджета, СообщенияОбОшибках);
	
	//проверка на отсутствие измерений (кроме "аналитика1,2,3") в режиме ввода
	ПроверитьКорректностьУказанияАналитик(ВидБюджета, СообщенияОбОшибках, РежимФормирования);
	
	//проверка на отсутствие измерений и нефиксированных аналитик в режиме ввода
	ПроверитьОтсутствиеИзмеренийАналитикВРежимеВвода(ВидБюджета, СообщенияОбОшибках, РежимФормирования);
	
	//проверка на соответствие аналитик статьям
	ПроверитьКорректностьУказанияИзмерений(ВидБюджета, СообщенияОбОшибках);
	
	//проверка на корректность ввода периодов
	ПроверитьНепересечениеПериодов(ВидБюджета, СообщенияОбОшибках, РежимФормирования);
	
	//проверка на наличие строк/колонок
	ПроверитьНаличиеСтрокКолонок(ВидБюджета, СообщенияОбОшибках);
	
	//проверка на дубли видов аналитик в рамках владельца
	ПроверитьДублиВидовАналитик(ВидБюджета, СообщенияОбОшибках);
	
	//проверка, что бы у невалютных статей и показателей не было валюты
	ПроверитьСоответствиеВалютыСтатьям(ВидБюджета, СообщенияОбОшибках, РежимФормирования);
	
	//проверка, что нет статей с одинаковой аналитикой для ввода
	ПроверитьДублиСтрокСтатейБюджетовПоАналитике(ВидБюджета, СообщенияОбОшибках, РежимФормирования);
	
	//проверка, что нет пересечений одинаковых аналитических разрезов в ячейках
	ПроверитьПересечениеАналитическихРазрезов(ВидБюджета, СообщенияОбОшибках, РежимФормирования);
	
	//проверка, что нет пересечений одинаковых аналитических разрезов в ячейках
	ПроверитьОтсутствиеВводимыхЭлементовНаГруппировочныхУровнях(ВидБюджета, СообщенияОбОшибках, РежимФормирования);
	
	//проверка, что периодичность элементов меньше периодичности вида бюджета
	ПроверитьПериодичностьЭлементовВидаБюджета(ВидБюджета, СообщенияОбОшибках);
	
	//проверка, что аналитики шапки и структуры не пересекаются
	ПроверитьПересечениеАналитикВШапкеИСтруктуре(ВидБюджета, СообщенияОбОшибках);
	
	//проверка, что нет одинаковых измерений подчиненных друг другу
	ПроверитьОдинаковыеИзмеренияВРамкахОднойВетки(ВидБюджета, СообщенияОбОшибках);
	
	ЕстьОшибки = СообщенияОбОшибках <> Неопределено И СообщенияОбОшибках.Количество();
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СообщенияОбОшибках);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.СтатусыОбработкиВидаБюджета.УстановитьЗначениеСтатуса(ВидБюджета, Новый Структура("ПроверенУспешно", Не ЕстьОшибки));
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
// 
// Возвращаемое значание:
// 	Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Владелец");
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает результат проверки наличия аналитик в шапке, для переданного в параметр вида бюджета.
// 
// Параметры:
//  ВидБюджета  - СправочникСсылка.ВидыБюджетов - проверяемый вид бюджета.
//
// Возвращаемое значание:
// 	Истина - если в виде бюджета переданном в параметре используются аналитики шапки.
// 	Ложь - если в виде бюджета переданном в параметре аналитики шапки не используются.
// 	Неопределено - если в качестве параметра передано неверное значение.
//
Функция ВидБюджетаСодержитАналитикиШапки(ВидБюджета) Экспорт
	
	Возврат ?(НЕ ЗначениеЗаполнено(ВидБюджета), 
		Ложь, НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "АналитикиШапки").Пустой());
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаВидаБюджета

Процедура ПроверитьДублиСтрокСтатейБюджетовПоАналитике(ВидБюджета, СообщенияОбОшибках, РежимФормирования)
	
	Если РежимФормирования <> Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета);
	СтруктураКолонокТаблицыДанных = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	СтруктураОписанияОтчета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруОписанияВидаБюджета(ВидБюджета,
																СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	ИсточникиДанных = СтруктураОписанияОтчета.ИсточникиДанных;
	ПараметрыЯчеек = СтруктураОписанияОтчета.ПараметрыЯчеек;
	СтруктураПоиска = Новый Структура("ОсновнойЭлемент, ВидЭлемента", Истина, Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов);
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек.Скопировать(СтруктураПоиска);
	СтруктураЯчеек.Колонки.Добавить("Флаг");
	СтруктураЯчеек.Колонки.Добавить("ФлагКоличество");
	СтруктураЯчеек.Колонки.Добавить("ФлагСумма");
	СтруктураЯчеек.ЗаполнитьЗначения(1, "Флаг");
	
	//проверяем на дубли только нижний уровень ячеек
	МассивКУдалению = Новый Массив;
	Для Каждого СтрокаЯчейки из СтруктураЯчеек Цикл
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаЯчейки.ИндексСтроки, "ИндексСтроки");
		СтрокаЯчейки.ФлагКоличество = ПараметрыЯчейки.ФлагКоличество;
		СтрокаЯчейки.ФлагСумма = ПараметрыЯчейки.ФлагСумма;
		НайденныйЭлементДерева = ДеревоЭлементов.Строки.Найти(СтрокаЯчейки.Строка, "ЭлементОтчета", Истина);
		Если НайденныйЭлементДерева.Строки.Количество() Тогда
			МассивКУдалению.Добавить(СтрокаЯчейки);
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаЯчейки.Колонка) Тогда
			Продолжить;
		КонецЕсли;
		НайденныйЭлементДерева = ДеревоЭлементов.Строки.Найти(СтрокаЯчейки.Колонка, "ЭлементОтчета", Истина);
		Если НайденныйЭлементДерева.Строки.Количество() Тогда
			МассивКУдалению.Добавить(СтрокаЯчейки);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из МассивКУдалению Цикл
		СтруктураЯчеек.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	СтрокаСвертки = "";
	Для Каждого Измерение из СтруктураКолонокТаблицыДанных.Измерения Цикл
		СтрокаСвертки = СтрокаСвертки + Измерение + ", ";
	КонецЦикла;
	
	Для Каждого ВидАналитики из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		Измерение = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		СтрокаСвертки = СтрокаСвертки + Измерение + ", ";
	КонецЦикла;
	
	Для Каждого Периодичность из СтруктураКолонокТаблицыДанных.Периодичности Цикл
		Измерение = "ВыражениеПериода" + ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность);
		СтрокаСвертки = СтрокаСвертки + Измерение + ", ";
	КонецЦикла;
	
	КопияПоКоличеству = СтруктураЯчеек;
	КопияПоСумме = СтруктураЯчеек.Скопировать();
	
	СтрокаСвертки = СтрокаСвертки + "СтатьяБюджетов";
	КопияПоКоличеству.Свернуть(СтрокаСвертки + ", ФлагКоличество", "Флаг");
	КопияПоСумме.Свернуть(СтрокаСвертки + ", ФлагСумма", "Флаг");
	
	СтруктураЯчеек = КопияПоКоличеству;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтруктураЯчеек, КопияПоСумме);
	
	СоответствиеСтатей = Новый Соответствие;
	Для Каждого СтрокаПроверки из СтруктураЯчеек Цикл
		Если СтрокаПроверки.Флаг > 1 И ЗначениеЗаполнено(СтрокаПроверки.СтатьяБюджетов) Тогда
			СоответствиеСтатей.Вставить(СтрокаПроверки.СтатьяБюджетов);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючиИЗначение Из СоответствиеСтатей Цикл
		ТекстОшибки = НСтр("ru='Статья ""%1"" встречается внутри вида бюджета несколько раз с одинаковой аналитикой';uk='Стаття ""%1"" зустрічається всередині виду бюджету кілька разів з однаковою аналітикою'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, КлючиИЗначение.Ключ);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, ТекстОшибки, "");
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОтсутствиеИзмеренийАналитикВРежимеВвода(ВидБюджета, СообщенияОбОшибках, РежимФормирования)
	
	Если РежимФормирования <> Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Истина);
	
	СтруктураПоиска = Новый Структура("ТипИзмерения", Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра);
	НайденныеСтроки = ДеревоЭлементов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		ТекстОшибки = НСтр("ru='Обнаружен недоступный для ввода элемент ""%1""';uk='Виявлено недоступний для введення елемент ""%1""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НайденнаяСтрока.НаименованиеДляПечати);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, ТекстОшибки, "");
		
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("ТипИзмерения", Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика);
	НайденныеСтроки = ДеревоЭлементов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		ТекстОшибки = НСтр("ru='Обнаружен недоступный для ввода элемент ""%1""';uk='Виявлено недоступний для введення елемент ""%1""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НайденнаяСтрока.НаименованиеДляПечати);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, ТекстОшибки, "");
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПроверитьДублиВидовАналитик(ВидБюджета, СообщенияОбОшибках)
	
	ДеревоЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Истина);
	
	СтруктураПоиска = Новый Структура("ВидЭлемента, ТипИзмерения",
						Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение,
						Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика);
	
	НайденныеСтроки = ДеревоЭлементов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	
	ТаблицаРодителей = Новый ТаблицаЗначений;
	ТаблицаРодителей.Колонки.Добавить("ЭлементОтчетаРодитель");
	
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		Если Не ЗначениеЗаполнено(НайденнаяСтрока.Родитель) Тогда
			ТаблицаРодителей.Добавить();
		Иначе
			ТаблицаРодителей.Добавить().ЭлементОтчетаРодитель = НайденнаяСтрока.Родитель.ЭлементОтчета;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРодителей.Свернуть("ЭлементОтчетаРодитель");
	
	ТаблицаПроверки = Новый ТаблицаЗначений;
	ТаблицаПроверки.Колонки.Добавить("НаименованиеДляПечати");
	ТаблицаПроверки.Колонки.Добавить("Значение");
	ТаблицаПроверки.Колонки.Добавить("Флаг");
	
	Для Каждого СтрокаЭлементаРодителя из ТаблицаРодителей Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаЭлементаРодителя.ЭлементОтчетаРодитель) Тогда
			НайденныеСтроки = ДеревоЭлементов.Строки.НайтиСтроки(СтруктураПоиска, Ложь);
		Иначе
			СтрокаРодителя = ДеревоЭлементов.Строки.Найти(СтрокаЭлементаРодителя.ЭлементОтчетаРодитель, "ЭлементОтчета", Истина);
			НайденныеСтроки = СтрокаРодителя.Строки.НайтиСтроки(СтруктураПоиска, Ложь);
		КонецЕсли;
		
		ТаблицаПроверки.Очистить();
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			НоваяСтрока = ТаблицаПроверки.Добавить();
			НоваяСтрока.НаименованиеДляПечати = НайденнаяСтрока.НаименованиеДляПечати;
			НоваяСтрока.Значение = НайденнаяСтрока.ЗначениеАналитики;
			НоваяСтрока.Флаг = 1;
		КонецЦикла;
		
		ТаблицаПроверки.Свернуть("НаименованиеДляПечати, Значение", "Флаг");
		ТаблицаПроверки.Сортировать("Флаг УБЫВ");
		
		Пока ТаблицаПроверки.Количество() И ТаблицаПроверки[0].Флаг > 1 Цикл
			Сообщение = НСтр("ru='Фиксированное значение ""%1"" не должно повторятся более одного раза';uk='Фіксоване значення ""%1"" не повинно повторюватися більше одного разу'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ТаблицаПроверки[0].НаименованиеДляПечати);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, Сообщение, "");
			ТаблицаПроверки.Удалить(0);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьПараметрыКонтроляПериодов(ВидБюджета, Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлементыФинансовыхОтчетов.Ссылка,
		|	ЭлементыФинансовыхОтчетов.Родитель,
		|	ЭлементыФинансовыхОтчетов.ВидЭлемента,
		|	ДопРеквизитыТипИзмерения.Значение КАК ТипИзмерения,
		|	ДопРеквизитыПериодичность.Значение КАК Периодичность
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ДопРеквизитыТипИзмерения
		|		ПО (ДопРеквизитыТипИзмерения.Ссылка = ЭлементыФинансовыхОтчетов.Ссылка)
		|			И (ДопРеквизитыТипИзмерения.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ТипИзмерения))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ДопРеквизитыПериодичность
		|		ПО (ДопРеквизитыПериодичность.Ссылка = ЭлементыФинансовыхОтчетов.Ссылка)
		|			И (ДопРеквизитыПериодичность.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.Периодичность))
		|ГДЕ
		|	ЭлементыФинансовыхОтчетов.Владелец = &Владелец
		|	И НЕ ЭлементыФинансовыхОтчетов.ПометкаУдаления";

	Запрос.УстановитьПараметр("Владелец", ВидБюджета);
	РезультатЗапроса = Запрос.Выполнить();
	Параметры = РезультатЗапроса.Выгрузить();
	Параметры.Индексы.Добавить("Ссылка");
	
КонецПроцедуры

Функция ПолучитьМассивВышестоящихПериодов(Элемент, ПараметрыКонтроля, КэшЦепочекПериодов)
	
	Значение = КэшЦепочекПериодов[Элемент];
	Если Значение <> Неопределено Тогда
		Возврат Значение;
	КонецЕсли;
	
	Массив = Новый Массив;
	СтрокаКонтроля = ПараметрыКонтроля.Найти(Элемент, "Ссылка");
	
	Пока СтрокаКонтроля <> Неопределено Цикл
		
		Если СтрокаКонтроля.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
			И СтрокаКонтроля.ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
			Массив.Добавить(СтрокаКонтроля.Периодичность);
		КонецЕсли;
		
		СтрокаКонтроля = ПараметрыКонтроля.Найти(СтрокаКонтроля.Родитель, "Ссылка");
		
	КонецЦикла;
	
	КэшЦепочекПериодов.Вставить(Элемент, Массив);
	
	Возврат Массив;
	
КонецФункции

Функция НеверныйПорядокПериодов(МассивПериодов)
	
	Периоды = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Периоды, МассивПериодов);
	
	Пока Периоды.Количество() Цикл
		МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(Периоды);
		Если Не Периоды[0] = МинимальнаяПериодичность Тогда
			Возврат Истина;
		КонецЕсли;
		Периоды.Удалить(0);
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПроверитьНепересечениеПериодов(ВидБюджета, СообщенияОбОшибках, РежимФормирования)
	Перем ПараметрыКонтроля;
	
	ПодготовитьПараметрыКонтроляПериодов(ВидБюджета, ПараметрыКонтроля);
	
	СтруктураКолонокТаблицыДанных = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	СтруктураОписанияОтчета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруОписанияВидаБюджета(ВидБюджета,
																		СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек.Скопировать();
	
	КэшЦепочекПериодов = Новый Соответствие;
	
	Для Каждого СтрокаСтруктуры из СтруктураЯчеек Цикл
		
		МассивВышестоящихПериодовСтроки = ПолучитьМассивВышестоящихПериодов(СтрокаСтруктуры.Строка, ПараметрыКонтроля, КэшЦепочекПериодов);
		МассивВышестоящихПериодовКолонки = ПолучитьМассивВышестоящихПериодов(СтрокаСтруктуры.Колонка, ПараметрыКонтроля, КэшЦепочекПериодов);
		
		Если МассивВышестоящихПериодовКолонки.Количество()
			И МассивВышестоящихПериодовСтроки.Количество() Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, 
								НСтр("ru='Период не может быть и в строках и в колонках!';uk='Період не може бути і в рядках і колонках!'"), "");
			Прервать;
			
		КонецЕсли;
		
		Если НеверныйПорядокПериодов(МассивВышестоящихПериодовКолонки)
			ИЛИ НеверныйПорядокПериодов(МассивВышестоящихПериодовСтроки) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,,
								НСтр("ru='Больший период не может входить в меньший!';uk='Більший період не може входити в менший!'"), "");
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаСтруктуры из СтруктураЯчеек Цикл
		
		МассивВышестоящихПериодовСтроки = ПолучитьМассивВышестоящихПериодов(СтрокаСтруктуры.Строка, ПараметрыКонтроля, КэшЦепочекПериодов);
		МассивВышестоящихПериодовКолонки = ПолучитьМассивВышестоящихПериодов(СтрокаСтруктуры.Колонка, ПараметрыКонтроля, КэшЦепочекПериодов);
		
		Если ЕстьНеделяВДекадах(МассивВышестоящихПериодовСтроки)
			ИЛИ ЕстьНеделяВДекадах(МассивВышестоящихПериодовКолонки) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,,
									НСтр("ru='Неделя не может входить в декаду!';uk='Тиждень не може входити в декаду!'"), "");
			Возврат;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьНеделяВДекадах(МассивПериодов)
	
	Для Сч = 0 По МассивПериодов.ВГраница() - 1 Цикл
		
		ТекущийЭлемент = МассивПериодов[Сч];
		СледующийЭлемент = МассивПериодов[Сч + 1];
		
		Если ТекущийЭлемент = Перечисления.Периодичность.Неделя
			И СледующийЭлемент = Перечисления.Периодичность.Декада Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПроверитьОтсутствиеЭлементовВидаВсе(ВидБюджета, СообщенияОбОшибках)
	
	Если Не ВидБюджета.ИспользоватьДляВводаПлана Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Истина);
	
	СтруктураПоиска = Новый Структура("ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов);
	НайденныеСтроки = ДеревоЭлементов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		ВходитВПроизводныйПоказатель = ЗначениеЗаполнено(НайденнаяСтрока.Родитель)
			И НайденнаяСтрока.Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		Если Не ВходитВПроизводныйПоказатель Тогда
			
			ТекстОшибки = НСтр("ru='Обнаружен недоступный для ввода элемент ""Все показатели""';uk='Виявлено недоступний для введення елемент ""Всі показники""'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, ТекстОшибки, "");
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
			
	СтруктураПоиска = Новый Структура("ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов);
	НайденныеСтроки = ДеревоЭлементов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		ВходитВПроизводныйПоказатель = ЗначениеЗаполнено(НайденнаяСтрока.Родитель)
			И НайденнаяСтрока.Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		Если Не ВходитВПроизводныйПоказатель Тогда
			
			ТекстОшибки = НСтр("ru='Обнаружен недоступный для ввода элемент ""Все статьи""';uk='Виявлено недоступний для введення елемент ""Всі статті""'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, ТекстОшибки, "");
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаличиеЦиклов(ВидБюджета, СообщенияОбОшибках, РежимФормирования)
	
	ДляВвода = ВидБюджета.ИспользоватьДляВводаПлана;
	
	СтруктураКолонокТаблицыДанных = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	СтруктураОписанияОтчета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруОписанияВидаБюджета(ВидБюджета,
																СтруктураКолонокТаблицыДанных, РежимФормирования);
	ИсточникиДанных = СтруктураОписанияОтчета.ИсточникиДанных;
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек.Скопировать();
	ПараметрыЯчеек = СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	СтруктураЯчеек.Колонки.Добавить("УровеньРасчета", Новый ОписаниеТипов("Число"));
	СтруктураЯчеек.Индексы.Добавить("УровеньРасчета, ОсновнойЭлемент");
	СтруктураЯчеек.Индексы.Добавить("Строка, Колонка, ОсновнойЭлемент");
	
	СтруктураПроверкиПорядка = Новый Структура("УровеньРасчета, ОсновнойЭлемент", 0, Истина);
	НайденныеСтроки = СтруктураЯчеек.НайтиСтроки(СтруктураПроверкиПорядка);
	ТекущийУровень = 1;
	Пока НайденныеСтроки.Количество() Цикл
		
		ВсегоСтрок = НайденныеСтроки.Количество();
		СтрокиДляПовышенияУровня = Новый Массив;
		
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			
			Если Не НайденнаяСтрока.ОсновнойЭлемент Тогда
				Продолжить; //операнды в расчете не участвуют
			КонецЕсли;
			
			ПараметрыСтрокиЯчеек = ПараметрыЯчеек.Найти(НайденнаяСтрока.ИндексСтроки, "ИндексСтроки");
			
			Если ЗначениеЗаполнено(ПараметрыСтрокиЯчеек.Формула) Тогда
				
				СтруктураПоискаОперандов = Новый Структура("Строка, Колонка, ОсновнойЭлемент", 
															НайденнаяСтрока.Строка, НайденнаяСтрока.Колонка, Ложь);
				
				СтрокиОперандов = СтруктураЯчеек.НайтиСтроки(СтруктураПоискаОперандов);
				
				ДанныеДляФормулыГотовы = Истина;
				Для Каждого СтрокаОперанда из СтрокиОперандов Цикл
					ПараметрыСтрокиЯчеек = ПараметрыЯчеек.Найти(СтрокаОперанда.ИндексСтроки, "ИндексСтроки");
					Если СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
						СтруктураПоискаЯчеек = Новый Структура("Строка, Колонка, ОсновнойЭлемент", 
																	ПараметрыСтрокиЯчеек.ОперандСтрока, ПараметрыСтрокиЯчеек.ОперандКолонка, Истина);
																	
						СтрокаСсылки = СтруктураЯчеек.НайтиСтроки(СтруктураПоискаЯчеек);
						Если СтрокаСсылки.Количество() И СтрокаСсылки[0].УровеньРасчета = 0 Тогда
							ДанныеДляФормулыГотовы = Ложь;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ДанныеДляФормулыГотовы Тогда
					Продолжить;
				КонецЕсли;
					
			КонецЕсли;
			
			СтрокиДляПовышенияУровня.Добавить(НайденнаяСтрока);
			
		КонецЦикла;
		
		Для Каждого СтрокаПовышенияУровня из СтрокиДляПовышенияУровня Цикл
			СтрокаПовышенияУровня.УровеньРасчета = ТекущийУровень;
		КонецЦикла;
		ТекущийУровень = ТекущийУровень + 1;
		
		НайденныеСтроки = СтруктураЯчеек.НайтиСтроки(СтруктураПроверкиПорядка);
		СталоСтрок = НайденныеСтроки.Количество();
		Если СталоСтрок = ВсегоСтрок Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,,
									НСтр("ru='Обнаружены циклические ссылки в формулах!';uk='Виявлені циклічні посилання у формулах!'"), "");
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаличиеИсточниковДанных(ВидБюджета, СообщенияОбОшибках, РежимФормирования)
	
	СтруктураКолонокТаблицыДанных = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	СтруктураОписанияОтчета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруОписанияВидаБюджета(
														ВидБюджета, СтруктураКолонокТаблицыДанных, 
														РежимФормирования);
	
	ИсточникиДанных = СтруктураОписанияОтчета.ИсточникиДанных;
	Если Не ИсточникиДанных.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, 
			НСтр("ru='Не выбраны статьи бюджетов или показатели бюджетов в структуре вида бюджета';uk='Не вибрані статті бюджетів або показники бюджетів у структурі виду бюджету'"), "");
	КонецЕсли;
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
		ЕстьИсточникДокумент = Ложь;
		Для Каждого ИсточникДанных из ИсточникиДанных Цикл
			Если ИсточникДанных.Идентификатор = "Документ" Тогда
				ЕстьИсточникДокумент = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьИсточникДокумент Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, 
				НСтр("ru='Для ввода данных должны быть выбраны статьи бюджета';uk='Для введення даних повинні бути вибрані статті бюджету'"), "");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьУказанияАналитик(ВидБюджета, СообщенияОбОшибках, РежимФормирования)
	
	СтруктураКолонокТаблицыДанных = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	СтруктураОписанияОтчета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруОписанияВидаБюджета(ВидБюджета,
																СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	ИсточникиДанных = СтруктураОписанияОтчета.ИсточникиДанных;
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек.Скопировать();
	
	ТаблицаЯчеек = Новый ТаблицаЗначений;
	ТаблицаЯчеек.Колонки.Добавить("СтатьяПоказатель", 
								Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов")
									);
	ТаблицаЯчеек.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	
	АналитикаШапки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "АналитикиШапки").Выгрузить().ВыгрузитьКолонку("ВидАналитики");
	
	Для Каждого Ячейка из СтруктураЯчеек Цикл
		ВидыАналитик = Новый Массив;
		Для Каждого ВидАналитики из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
			Имя = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			Если ЗначениеЗаполнено(Ячейка["Флаг" + Имя]) Тогда
				ВидыАналитик.Добавить(ВидАналитики);
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыАналитик, АналитикаШапки, Истина);
		Если ЗначениеЗаполнено(Ячейка.СтатьяБюджетов) Тогда
			Для Каждого ВидАналитики из ВидыАналитик Цикл
				НоваяСтрока = ТаблицаЯчеек.Добавить();
				НоваяСтрока.СтатьяПоказатель = Ячейка.СтатьяБюджетов;
				НоваяСтрока.ВидАналитики = ВидАналитики;
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(Ячейка.ПоказательБюджетов) Тогда
			Для Каждого ВидАналитики из ВидыАналитик Цикл
				НоваяСтрока = ТаблицаЯчеек.Добавить();
				НоваяСтрока.СтатьяПоказатель = Ячейка.ПоказательБюджетов;
				НоваяСтрока.ВидАналитики = ВидАналитики;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	Табл.СтатьяПоказатель,
	                      |	Табл.ВидАналитики
	                      |ПОМЕСТИТЬ ТаблицаЯчеек
	                      |ИЗ
	                      |	&Таблица КАК Табл
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПРЕДСТАВЛЕНИЕ(ТаблицаЯчеек.СтатьяПоказатель) КАК СтатьяПоказатель,
	                      |	ПРЕДСТАВЛЕНИЕ(ТаблицаЯчеек.ВидАналитики) КАК ВидАналитики
	                      |ИЗ
	                      |	ТаблицаЯчеек КАК ТаблицаЯчеек
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиБюджетов КАК Справочник
	                      |		ПО ТаблицаЯчеек.СтатьяПоказатель = Справочник.Ссылка
	                      |ГДЕ
	                      |	ТаблицаЯчеек.ВидАналитики <> Справочник.ВидАналитики1
	                      |	И ТаблицаЯчеек.ВидАналитики <> Справочник.ВидАналитики2
	                      |	И ТаблицаЯчеек.ВидАналитики <> Справочник.ВидАналитики3
	                      |	И ТаблицаЯчеек.ВидАналитики <> Справочник.ВидАналитики4
	                      |	И ТаблицаЯчеек.ВидАналитики <> Справочник.ВидАналитики5
	                      |	И ТаблицаЯчеек.ВидАналитики <> Справочник.ВидАналитики6
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ПРЕДСТАВЛЕНИЕ(ТаблицаЯчеек.СтатьяПоказатель) КАК СтатьяПоказатель,
	                      |	ПРЕДСТАВЛЕНИЕ(ТаблицаЯчеек.ВидАналитики) КАК ВидАналитики
	                      |ИЗ
	                      |	ТаблицаЯчеек КАК ТаблицаЯчеек
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиБюджетов КАК Справочник
	                      |		ПО ТаблицаЯчеек.СтатьяПоказатель = Справочник.Ссылка
	                      |ГДЕ
	                      |	ТаблицаЯчеек.ВидАналитики <> Справочник.ВидАналитики1
	                      |	И ТаблицаЯчеек.ВидАналитики <> Справочник.ВидАналитики2
	                      |	И ТаблицаЯчеек.ВидАналитики <> Справочник.ВидАналитики3
	                      |	И ТаблицаЯчеек.ВидАналитики <> Справочник.ВидАналитики4
	                      |	И ТаблицаЯчеек.ВидАналитики <> Справочник.ВидАналитики5
	                      |	И ТаблицаЯчеек.ВидАналитики <> Справочник.ВидАналитики6");
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаЯчеек);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ОшибкиПоСтатьям = МассивРезультатов[1].Выгрузить();
	ОшибкиПоПоказателям = МассивРезультатов[2].Выгрузить();
	Структура = Новый Структура("Статьи, Показатели", ОшибкиПоСтатьям, ОшибкиПоПоказателям);
	
	Для Каждого КлючиИЗначение из Структура Цикл
		Для Каждого СтрокаОшибки из КлючиИЗначение.Значение Цикл
			ТекстОшибки = НСтр("ru='Для %1
                                |""%2"" указана недоступная на %3 аналитика ""%4""'
                                |;uk='Для %1
                                |""%2"" вказана недоступна на %3 аналітика ""%4""'");
					
			Если КлючиИЗначение.Ключ = "Статьи" Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
										НСтр("ru='статьи';uk='статті'"), СтрокаОшибки.СтатьяПоказатель, НСтр("ru='статье';uk='статті'"), СтрокаОшибки.ВидАналитики);
			Иначе
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
										НСтр("ru='показателя';uk='показника'"), СтрокаОшибки.СтатьяПоказатель, НСтр("ru='показателе';uk='показнику'"), СтрокаОшибки.ВидАналитики);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, ТекстОшибки, "")
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоответствиеВалютыСтатьям(ВидБюджета, СообщенияОбОшибках, РежимФормирования)
	
	СтруктураКолонокТаблицыДанных = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	СтруктураОписанияОтчета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруОписанияВидаБюджета(ВидБюджета,
																СтруктураКолонокТаблицыДанных, РежимФормирования);
																
	Если СтруктураКолонокТаблицыДанных.Измерения.Найти("Валюта") = Неопределено Тогда
		Возврат;
	КонецЕсли;
																
	ИсточникиДанных = СтруктураОписанияОтчета.ИсточникиДанных;
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек.Скопировать();
	
	ТаблицаЯчеек = Новый ТаблицаЗначений;
	ТаблицаЯчеек.Колонки.Добавить("СтатьяПоказатель", 
								Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов")
									);
	
	Ячейки = СтруктураЯчеек.НайтиСтроки(Новый Структура("ОсновнойЭлемент", Истина));
	Для Каждого Ячейка из Ячейки Цикл
		Если ЗначениеЗаполнено(Ячейка.СтатьяБюджетов)
			И ЗначениеЗаполнено(Ячейка.Валюта) Тогда
			НоваяСтрока = ТаблицаЯчеек.Добавить();
			НоваяСтрока.СтатьяПоказатель = Ячейка.СтатьяБюджетов;
		КонецЕсли;
		Если ЗначениеЗаполнено(Ячейка.ПоказательБюджетов)
			И ЗначениеЗаполнено(Ячейка.Валюта) Тогда
			НоваяСтрока = ТаблицаЯчеек.Добавить();
			НоваяСтрока.СтатьяПоказатель = Ячейка.ПоказательБюджетов;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	Табл.СтатьяПоказатель
	                      |ПОМЕСТИТЬ ТаблицаЯчеек
	                      |ИЗ
	                      |	&Таблица КАК Табл
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТаблицаЯчеек.СтатьяПоказатель
	                      |ИЗ
	                      |	ТаблицаЯчеек КАК ТаблицаЯчеек
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиБюджетов КАК Справочник
	                      |		ПО ТаблицаЯчеек.СтатьяПоказатель = Справочник.Ссылка
	                      |			И (НЕ Справочник.УчитыватьПоВалюте)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТаблицаЯчеек.СтатьяПоказатель
	                      |ИЗ
	                      |	ТаблицаЯчеек КАК ТаблицаЯчеек
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиБюджетов КАК Справочник
	                      |		ПО ТаблицаЯчеек.СтатьяПоказатель = Справочник.Ссылка
	                      |			И (НЕ Справочник.УчитыватьПоВалюте)");
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаЯчеек);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ОшибкиПоСтатьям = МассивРезультатов[1].Выгрузить();
	ОшибкиПоПоказателям = МассивРезультатов[2].Выгрузить();
	Структура = Новый Структура("Статьи, Показатели", ОшибкиПоСтатьям, ОшибкиПоПоказателям);
	
	Для Каждого КлючиИЗначение из Структура Цикл
		Для Каждого СтрокаОшибки из КлючиИЗначение.Значение Цикл
			ТекстОшибки = НСтр("ru='Для %1 ""%2"" недоступен учет по валюте';uk='Для %1 ""%2"" недоступний облік по валюті'");
					
			Если КлючиИЗначение.Ключ = "Статьи" Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='статьи';uk='статті'"), 
																					СтрокаОшибки.СтатьяПоказатель);
			Иначе
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru='показателя';uk='показника'"), 
																					СтрокаОшибки.СтатьяПоказатель);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, ТекстОшибки, "")
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьУказанияИзмерений(ВидБюджета, СообщенияОбОшибках)
	
	Если ВидБюджета.ИспользоватьДляВводаПлана Тогда
		ДоступенСценарий = Ложь;
		ДоступноПодразделение = Ложь;
		ДоступнаОрганизация = Ложь;
	Иначе
		ДоступенСценарий = Истина;
		НастройкиМодели = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидБюджета.Владелец, 
														"БюджетыПоПодразделениям, БюджетыПоОрганизациям");
		ДоступноПодразделение = НастройкиМодели.БюджетыПоПодразделениям;
		ДоступнаОрганизация = НастройкиМодели.БюджетыПоОрганизациям;
	КонецЕсли;
	
	СтруктураКолонокТаблицыДанных = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	МассивНедоступных = Новый Массив;
	
	Для Каждого Измерение из СтруктураКолонокТаблицыДанных.Измерения Цикл
		
		Если Измерение = "Сценарий" и Не ДоступенСценарий Тогда
			МассивНедоступных.Добавить("Сценарий");
		КонецЕсли;
		Если Измерение = "Организация" И Не ДоступнаОрганизация Тогда
			МассивНедоступных.Добавить("Организация");
		КонецЕсли;
		Если Измерение = "Подразделение" И Не ДоступноПодразделение Тогда
			МассивНедоступных.Добавить("Подразделение");
		КонецЕсли;
		
		Для Каждого ЭлементМассива из МассивНедоступных Цикл
			ТекстСообщения = НСтр("ru='Измерение отчета ""%1"" недоступно для текущего вида бюджета';uk='Вимірювання звіту ""%1"" недоступне для поточного виду бюджету'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭлементМассива);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, ТекстСообщения, "");
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаличиеСтрокКолонок(ВидБюджета, СообщенияОбОшибках)
	
	ДеревоЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Истина);
	
	СтруктураПоиска = Новый Структура("ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
	НайденныеСтроки = ДеревоЭлементов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		Если Не НайденнаяСтрока.Строки.Количество() Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, 
												НСтр("ru='Строки таблицы не могут быть пустыми';uk='Рядки таблиці не можуть бути порожніми'"), "");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
	НайденныеСтроки = ДеревоЭлементов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		Если Не НайденнаяСтрока.Строки.Количество() Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, 
												НСтр("ru='Колонки таблицы не могут быть пустыми';uk='Колонки таблиці не можуть бути порожніми'"), "");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭлементыВидаОтчетаПоНаправлению(СтрокиДерева, СписокЭлементов = Неопределено)
	
	Если СписокЭлементов = Неопределено Тогда
		СписокЭлементов = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаДерева из СтрокиДерева.Строки Цикл
		СписокЭлементов.Добавить(СтрокаДерева);
		ЭлементыВидаОтчетаПоНаправлению(СтрокаДерева, СписокЭлементов);
	КонецЦикла;
	
	Возврат СписокЭлементов;
	
КонецФункции

Функция ПреобразоватьЭлементыВТаблицуСравнения(ЭлементыТаблицы, КэшДопРеквизитов)
	
	ВидыЭлементов = Перечисления.ВидыЭлементовФинансовогоОтчета;
	ТипыИзмерений = Перечисления.ТипыИзмеренийФинансовогоОтчета;
	
	ТаблицаСравнения = Новый ТаблицаЗначений;
	ТаблицаСравнения.Колонки.Добавить("ОбъектСравнения");
	Для Каждого ЭлементТаблицы из ЭлементыТаблицы Цикл
		
		ЭтоЭлементКоторыйНужноПроверять = 
			ЭлементТаблицы.ВидЭлемента = ВидыЭлементов.Измерение
			ИЛИ ЭлементТаблицы.ВидЭлемента = ВидыЭлементов.ВсеПоказателиБюджетов
			ИЛИ ЭлементТаблицы.ВидЭлемента = ВидыЭлементов.ВсеСтатьиБюджетов;
		
		Если Не ЭтоЭлементКоторыйНужноПроверять Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементТаблицы.ВидЭлемента = ВидыЭлементов.Измерение Тогда
			ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
										ЭлементТаблицы.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизитов);
			
			Если ТипИзмерения = ТипыИзмерений.Аналитика Тогда
				ОбъектСравнения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
										ЭлементТаблицы.ЭлементОтчета, "ВидАналитики", КэшДопРеквизитов);
				
			ИначеЕсли ТипИзмерения = ТипыИзмерений.Валюта Тогда
				ОбъектСравнения = "Валюта";
				
			ИначеЕсли ТипИзмерения = ТипыИзмерений.ИзмерениеРегистра Тогда
				ОбъектСравнения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
										ЭлементТаблицы.ЭлементОтчета, "ИмяИзмерения", КэшДопРеквизитов);
				
			ИначеЕсли ТипИзмерения = ТипыИзмерений.Организация Тогда
				ОбъектСравнения = "Организация";
				
			ИначеЕсли ТипИзмерения = ТипыИзмерений.Подразделение Тогда
				ОбъектСравнения = "Подразделение";
				
			ИначеЕсли ТипИзмерения = ТипыИзмерений.Сценарий Тогда
				ОбъектСравнения = "Сценарий";
				
			ИначеЕсли ТипИзмерения = ТипыИзмерений.ФиксированнаяАналитика Тогда
				ОбъектСравнения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
										ЭлементТаблицы.ЭлементОтчета, "ВидАналитики", КэшДопРеквизитов);
										
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока = ТаблицаСравнения.Добавить();
			НоваяСтрока.ОбъектСравнения = ОбъектСравнения;
				
		Иначе
			НоваяСтрока = ТаблицаСравнения.Добавить();
			НоваяСтрока.ОбъектСравнения = ЭлементТаблицы.ВидЭлемента;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСравнения.Свернуть("ОбъектСравнения");
	
	Возврат ТаблицаСравнения;
	
КонецФункции

Процедура ПроверитьПересечениеАналитическихРазрезов(ВидБюджета, СообщенияОбОшибках, РежимФормирования)
	
	КэшДопРеквизитов = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	Таблицы = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьТаблицыВидаБюджета(ВидБюджета);
	ДеревоЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Ложь);
	
	Для Каждого Таблица из Таблицы Цикл
		
		КореньТаблицы = ДеревоЭлементов.Строки.Найти(Таблица.Ссылка);
		
		ЭлементыСтрок = ЭлементыВидаОтчетаПоНаправлению(КореньТаблицы.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Строки));
		ЭлементыСтрок = ПреобразоватьЭлементыВТаблицуСравнения(ЭлементыСтрок, КэшДопРеквизитов);
		
		ЭлементыКолонок = ЭлементыВидаОтчетаПоНаправлению(КореньТаблицы.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки));
		ЭлементыКолонок = ПреобразоватьЭлементыВТаблицуСравнения(ЭлементыКолонок, КэшДопРеквизитов);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЭлементыКолонок, ЭлементыСтрок);
		ЭлементыСтрок.Колонки.Добавить("Флаг");
		ЭлементыСтрок.ЗаполнитьЗначения(1, "Флаг");
		ЭлементыСтрок.Свернуть("ОбъектСравнения", "Флаг");
		
		ЭлементыСтрок.Сортировать("Флаг УБЫВ");
		Пока ЭлементыСтрок.Количество() И
			ЭлементыСтрок[0].Флаг > 1 Цикл
			
			ТекстОшибки = НСтр("ru='Недопустим повтор элементов вида ""%1"" одновременно и в строках и в колонках';uk='Неприпустимий повтор елементів виду ""%1"" одночасно і в рядках і в колонках'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ЭлементыСтрок[0].ОбъектСравнения);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, ТекстОшибки, "");
			
			ЭлементыСтрок.Удалить(0);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОтсутствиеВводимыхЭлементовНаГруппировочныхУровнях(ВидБюджета, СообщенияОбОшибках, РежимФормирования)
	
	Если РежимФормирования <> Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Ложь);
	СтруктураКолонокТаблицыДанных = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	СтруктураОписанияОтчета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруОписанияВидаБюджета(ВидБюджета,
																СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	ИсточникиДанных = СтруктураОписанияОтчета.ИсточникиДанных;
	СтруктураПоиска = Новый Структура("ОсновнойЭлемент, ВидЭлемента", 
									Истина, Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов, Истина);
	ВводимыеЯчейки = СтруктураОписанияОтчета.СтруктураЯчеек.Скопировать(СтруктураПоиска);
	КУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы из ВводимыеЯчейки Цикл
		Если Не СтруктураОписанияОтчета.ПараметрыЯчеек.Найти(СтрокаТаблицы.ИндексСтроки, "ИндексСтроки").СложнаяТаблица Тогда
			КУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению из КУдалению Цикл
		ВводимыеЯчейки.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Для Каждого ЯчейкаОтчета из ВводимыеЯчейки Цикл
		
		НайденныеСтроки = ДеревоЭлементов.Строки.НайтиСтроки(Новый Структура("ЭлементОтчета", ЯчейкаОтчета.Строка), Истина);
		
		Для Каждого СтатьяБюджета из НайденныеСтроки Цикл
			Если СтатьяБюджета.Строки.Количество() Тогда 
				Массив = Новый Массив;
				Массив.Добавить(ЯчейкаОтчета.Строка);
				Массив.Добавить(ЯчейкаОтчета.Колонка);
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Массив, "НаименованиеДляПечати");
				ТекстОшибки = НСтр("ru='Ошибка в ячейке [%1; %2]: запрещен ввод на уровне группировок';uk='Помилка в комірці [%1; %2]: заборонене введення на рівні групувань'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
																Реквизиты[ЯчейкаОтчета.Строка].НаименованиеДляПечати,
																Реквизиты[ЯчейкаОтчета.Колонка].НаименованиеДляПечати);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, ТекстОшибки, "");
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПериодичностьЭлементовВидаБюджета(ВидБюджета, СообщенияОбОшибках)
	
	ПериодичностьБюджета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "Периодичность");
	СтруктураКолонок = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	Порядок = Перечисления.Периодичность.УпорядоченныеПериодичности();
	ИндексТекущей = Порядок.Найти(ПериодичностьБюджета);
	
	Для Каждого Периодичность из СтруктураКолонок.Периодичности Цикл
		ИндексОтчета = Порядок.Найти(Периодичность);
		Если ИндексОтчета > ИндексТекущей Тогда
			ТекстОшибки = НСтр("ru='Периодичность, выбираемая в группировках, не может быть больше чем %1';uk='Періодичність, що обирається у групуваннях, не може бути більше ніж %1'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, 
																				НРег(ПериодичностьБюджета));
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, ТекстОшибки, "");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПересечениеАналитикВШапкеИСтруктуре(ВидБюджета, СообщенияОбОшибках)
	
	СтруктураКолонокТаблицыДанных = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	АналитикаШапки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "АналитикиШапки").Выгрузить().ВыгрузитьКолонку("ВидАналитики");
	КопияАналитикиШапки = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(АналитикаШапки);
	РезультатВычитания = ОбщегоНазначенияКлиентСервер.СократитьМассив(АналитикаШапки, СтруктураКолонокТаблицыДанных.ВидыАналитик);
	ОбщиеАналитики = ОбщегоНазначенияКлиентСервер.СократитьМассив(КопияАналитикиШапки, РезультатВычитания);
	
	Если ОбщиеАналитики.Количество() Тогда
		ПредставлениеАналитик = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ОбщиеАналитики, ", ");
		ТекстОшибки = НСтр("ru='Виды аналитик ""%1"" не могут быть выбраны и в шапке и в структуре бюджета';uk='Види аналітик ""%1"" не можуть бути вибрані і в шапці і в структурі бюджету'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ПредставлениеАналитик);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, ТекстОшибки, "");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОдинаковыеИзмеренияВРамкахОднойВетки(ВидБюджета, СообщенияОбОшибках)
	
	МассивНеподчиняемыхИзмерений = Новый Массив;
	МассивНеподчиняемыхИзмерений.Добавить(Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта);
	МассивНеподчиняемыхИзмерений.Добавить(Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация);
	МассивНеподчиняемыхИзмерений.Добавить(Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение);
	МассивНеподчиняемыхИзмерений.Добавить(Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий);
	МассивНеподчиняемыхИзмерений.Добавить(Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика);
	
	ДеревоЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Ложь);
	Измерения = ДеревоЭлементов.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение), Истина);
	КэшДопРеквизитов = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	
	Для Каждого Измерение из Измерения Цикл
		
		ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Измерение.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизитов);
		Если МассивНеподчиняемыхИзмерений.Найти(ТипИзмерения) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибка = Ложь;
		
		ТекущаяСтрока = Измерение.Родитель;
		Пока ТекущаяСтрока <> Неопределено Цикл
			Если ТекущаяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
				ТипИзмеренияРодителя = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(ТекущаяСтрока.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизитов);
				Если ТипИзмеренияРодителя = ТипИзмерения Тогда
					Если ТипИзмеренияРодителя = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
						ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Измерение.ЭлементОтчета, "ВидАналитики", КэшДопРеквизитов);
						ВидАналитикиРодителя = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(ТекущаяСтрока.ЭлементОтчета, "ВидАналитики", КэшДопРеквизитов);
						Если ВидАналитики = ВидАналитикиРодителя Тогда
							ЕстьОшибка = Истина;
							Прервать;
						КонецЕсли;
					Иначе
						ЕстьОшибка = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ТекущаяСтрока = ТекущаяСтрока.Родитель;
		КонецЦикла;
		
		Если ЕстьОшибка Тогда
			ТекстОшибки = НСтр("ru='Элемент отчета ""%1"" не может быть подчинен элементу ""%2""';uk='Елемент звіту ""%1"" не може бути підпорядкований елементу ""%2""'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Измерение.НаименованиеДляПечати, ТекущаяСтрока.НаименованиеДляПечати);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СообщенияОбОшибках,, ТекстОшибки, "");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДатыБюджетаИГраницыФакта

Функция ВидБюджетаИспользуетГраницуФактическихДанных(ВидБюджета) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидБюджета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользуетГраницуФактическихДанных = РегистрыСведений.СтатусыОбработкиВидаБюджета.ПолучитьЗначениеСтатуса(ВидБюджета, "ИспользуетГраницуФактическихДанных");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТипЗнч(ИспользуетГраницуФактическихДанных) = Тип("Булево") Тогда
		Возврат ИспользуетГраницуФактическихДанных;
	КонецЕсли;
	
	ИспользуетГраницуФактическихДанных = Ложь;
	СтруктураКолонок = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	ИсточникиДанных = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьОписаниеИсточниковДанных(ВидБюджета, СтруктураКолонок, 
																Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет);
	ИсточникиПериодовГруппировок = БюджетнаяОтчетностьРасчетКэшаСервер.ИсточникиПериодовГруппировок(ВидБюджета, СтруктураКолонок, 
																Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет);
	
	Для Каждого Источник из ИсточникиДанных Цикл
		Если СтрНайти(ВРег(Источник.ВыражениеНачалоПериода), ВРег("&ГраницаФактДанных")) Тогда
			ИспользуетГраницуФактическихДанных = Истина;
		КонецЕсли;
		Если СтрНайти(ВРЕГ(Источник.ВыражениеКонецПериода), ВРег("&ГраницаФактДанных")) Тогда
			ИспользуетГраницуФактическихДанных = Истина;
		КонецЕсли;
		Если СтрНайти(ВРЕГ(Источник.ВыражениеПериодаГруппировки), ВРег("&ГраницаФактДанных")) Тогда
			ИспользуетГраницуФактическихДанных = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Источник из ИсточникиПериодовГруппировок Цикл
		Если СтрНайти(ВРЕГ(Источник.ВыражениеНачалоПериодаГруппировки), ВРег("&ГраницаФактДанных")) Тогда
			ИспользуетГраницуФактическихДанных = Истина;
		КонецЕсли;
		Если СтрНайти(ВРЕГ(Источник.ВыражениеКонецПериодаГруппировки), ВРег("&ГраницаФактДанных")) Тогда
			ИспользуетГраницуФактическихДанных = Истина;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.СтатусыОбработкиВидаБюджета.УстановитьЗначениеСтатуса(ВидБюджета, 
							Новый Структура("ИспользуетГраницуФактическихДанных", ИспользуетГраницуФактическихДанных));
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИспользуетГраницуФактическихДанных;
	
КонецФункции

Процедура ВыровнятьДатыПоПериодичностиБюджета(ВидБюджета, НачалоПериода, КонецПериода) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидБюджета) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидБюджета, 
		"СпособПланирования, КоличествоПериодовСкользящегоБюджета, Периодичность");
		
	Если Реквизиты.СпособПланирования = Перечисления.СпособыСоставленияБюджетов.НаФиксированныйПериод Тогда
		НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(НачалоПериода, Реквизиты.Периодичность);
		КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(КонецПериода, Реквизиты.Периодичность);
	Иначе
		НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(НачалоПериода, Реквизиты.Периодичность);
		КонецПериода = БюджетированиеКлиентСервер.ДобавитьИнтервал(НачалоПериода, Реквизиты.Периодичность, Реквизиты.КоличествоПериодовСкользящегоБюджета - 1);
		КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(КонецПериода, Реквизиты.Периодичность);
	КонецЕсли;
	
КонецПроцедуры

Функция ГраницаФактическихДанныхПоВидуБюджета(ВидБюджета, НачалоПериода) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидБюджета) Тогда
		Возврат НачалоПериода;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидБюджета, 
		"ВариантРасположенияГраницыФактическихДанных, 
		|СмещениеГраницыФакта, 
		|ПериодичностьГраницыФакта,
		|Периодичность");
		
	Если Реквизиты.ВариантРасположенияГраницыФактическихДанных = Перечисления.ВариантыРасположенияГраницыФактическиДанных.ДоНачалаСоставленияБюджета Тогда
		ГраницаФактДанных = БюджетированиеКлиентСервер.ДобавитьИнтервал(НачалоПериода, Реквизиты.ПериодичностьГраницыФакта, -Реквизиты.СмещениеГраницыФакта);
	Иначе
		ГраницаФактДанных = БюджетированиеКлиентСервер.ДатаНачалаПериода(ТекущаяДатаСеанса(), Реквизиты.Периодичность) - 1;
	КонецЕсли;
	
	Возврат ГраницаФактДанных;
	
КонецФункции

Процедура НастроитьГруппуЭлементовПериода(ВидБюджета, Элементы, ГраницаФактДанных) Экспорт
	
	Если ЗначениеЗаполнено(ВидБюджета) Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидБюджета, 
										"СпособПланирования, 
										|КоличествоПериодовСкользящегоБюджета, 
										|Периодичность");
		
		ЗаголовокПериода = "";
		Если Реквизиты.СпособПланирования = Перечисления.СпособыСоставленияБюджетов.НаФиксированныйПериод Тогда
			ЗаголовокПериода = НСтр("ru='Фиксированный бюджет с периодом планирования %1';uk='Фіксований бюджет з періодом планування %1'");
			ЗаголовокПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПериода, НРег(Реквизиты.Периодичность));
			Элементы.КонецПериода.Доступность = Истина;
			Элементы.ВыбратьПериод.Видимость = Истина;
		ИначеЕсли ВидБюджета.СпособПланирования = Перечисления.СпособыСоставленияБюджетов.Скользящий Тогда
			Периоды = БюджетированиеКлиентСервер.ПериодЦифрамиПериодичностьПрописью(Реквизиты.КоличествоПериодовСкользящегоБюджета, Реквизиты.Периодичность);
			ЗаголовокПериода = НСтр("ru='Скользящий бюджет на %1';uk='Ковзний бюджет на %1'");
			ЗаголовокПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПериода, Периоды);
			Элементы.КонецПериода.Доступность = Ложь;
			Элементы.ВыбратьПериод.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.НадписьВидБюджета.Заголовок = ЗаголовокПериода;
		
	Иначе
		
		Элементы.НадписьВидБюджета.Заголовок = НСтр("ru='Фиксированный бюджет';uk='Фіксований бюджет'");
		
	КонецЕсли;
	
	Если ВидБюджетаИспользуетГраницуФактическихДанных(ВидБюджета) Тогда
	
		Элементы.ГраницаФактДанных.Видимость = Истина;
		Элементы.ГраницаФактДанных.Заголовок = НСтр("ru='Граница факт.данных: %1';uk='Межа факт.даних: %1'");
		Элементы.ГраницаФактДанных.Заголовок = 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							Элементы.ГраницаФактДанных.Заголовок, Формат(ГраницаФактДанных, "ДЛФ=D"));
	
	Иначе
		
		Элементы.ГраницаФактДанных.Видимость = Ложь;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления
//
Процедура ОчиститьКэшВспомогательныхДанных(ПараметрыОбновления = Неопределено) Экспорт
	
	Набор = РегистрыСведений.СтатусыОбработкиВидаБюджета.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
	//++ НЕ УТКА
	Набор = РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу.СоздатьНаборЗаписей();
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
	РегистрыСведений.КэшПримененияПравилПолученияФакта.СброситьКэш();
	//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

