&НаСервере
Перем ТекущийЭлементОтчета;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ТаблицаСочетаний = ФинансоваяОтчетностьПовтИсп.ДопустимыеСочетанияЭлементовБюджетов();
	КэшДопустимыхСочетаний = СоздатьКэшНаОснованииТаблицыСочетаний(ТаблицаСочетаний);
	
	ТаблицаСочетаний = ФинансоваяОтчетностьПовтИсп.НедопустимыеСочетанияЭлементовБюджетов();
	КэшНедопустимыхСочетаний = СоздатьКэшНаОснованииТаблицыСочетаний(ТаблицаСочетаний);
	
	ОбновитьДеревоНовыхЭлементов();
	ОбновитьДеревоЭлементов(Параметры.ЗначениеКопирования);
	
	ОбновитьЗаголовокФормы();
	УстановитьТекстАналитикВШапке();
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	УправлениеФормой();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДеревоЭлементыВидаБюджета = РеквизитФормыВЗначение("ЭлементыОтчета");
	Справочники.ЭлементыФинансовыхОтчетов.ЗаписатьСтруктуруВидаОтчета(ТекущийОбъект.Ссылка, ДеревоЭлементыВидаБюджета, ТекущийОбъект.ПометкаУдаления);
	
	ОбновитьДеревоЭлементов();
	
	Если ТекущийЭлементОтчета <> Неопределено Тогда
		СтрокаДерева = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(
															ЭлементыОтчета, 
															"ЭлементОтчета", 
															ТекущийЭлементОтчета);
		Если СтрокаДерева <> Неопределено Тогда
			Элементы.ЭлементыОтчетаОтображение.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьЗаголовокФормы();
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	УправлениеФормой();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Элементы.ЭлементыОтчетаОтображение.Развернуть(ЭлементыОтчетаОтображение.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НефинансовыеПоказателиБюджетов"
		ИЛИ ИмяСобытия = "Запись_СтатьиБюджетов"
		ИЛИ ИмяСобытия = "Запись_ПоказателиБюджетов"
		ИЛИ ИмяСобытия = "Запись_АналитикиСтатейБюджетов" Тогда
		
		ОбновитьДеревоНовыхЭлементов();
		СтрокаДерева = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(
												ДеревоНовыхЭлементов, 
												"ЭлементВидаОтчетности", 
												Источник);
												
		Если СтрокаДерева <> Неопределено Тогда
			Элементы.ДеревоНовыхЭлементов.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущаяСтрока = Элементы.ЭлементыОтчетаОтображение.ТекущаяСтрока;
	СтрокаДерева = ЭлементыОтчета.НайтиПоИдентификатору(ТекущаяСтрока);
	Если СтрокаДерева <> Неопределено Тогда
		ТекущийЭлементОтчета = СтрокаДерева.ЭлементОтчета;
	КонецЕсли;
	
	ПредыдущийФлагИспользования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ИспользоватьДляВводаПлана");
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.ИспользоватьДляВводаПлана <> ПредыдущийФлагИспользования Тогда
		
		МассивВидовКОбновлению = Новый Массив;
		МассивВидовКОбновлению.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов);
		МассивВидовКОбновлению.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов);
		МассивВидовКОбновлению.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов);
		МассивВидовКОбновлению.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
		МассивВидовКОбновлению.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель);
		
		ДеревоЭлементов = РеквизитФормыВЗначение("ЭлементыОтчета");
		Для Каждого ОбновляемыйЭлемент из МассивВидовКОбновлению Цикл
			ЭлементыКОбновлению = ДеревоЭлементов.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", ОбновляемыйЭлемент), Истина);
			Для Каждого СтрокаДерева из ЭлементыКОбновлению Цикл
				Если Не ЗначениеЗаполнено(СтрокаДерева.АдресСтруктурыЭлемента) Тогда
					СтрокаДерева.АдресСтруктурыЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(СтрокаДерева, УникальныйИдентификатор);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ЗначениеВРеквизитФормы(ДеревоЭлементов, "ЭлементыОтчета");
		
	КонецЕсли;
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ЭлементыОтчетаОтображение.Развернуть(
		ЭлементыОтчетаОтображение.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ОбновитьДеревоНовыхЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискНовыхПриИзменении(Элемент)
	
	ОбновитьДеревоНовыхЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискНовыхОчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьДеревоНовыхЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиНовыйЭлемент(Команда)
	
	ОбновитьДеревоНовыхЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляВводаПланаПриИзменении(Элемент)
	
	ИспользоватьДляВводаПланаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыЭлементыОтчета

&НаКлиенте
Процедура ЭлементыОтчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактироватьЭлементОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыОтчетаПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.ЭлементыОтчетаОтображение.ВыделенныеСтроки;
	
	Для Каждого ЭлементМассива из ВыделенныеСтроки Цикл
	
		ТекущаяСтрока = ЭлементыОтчетаОтображение.НайтиПоИдентификатору(ЭлементМассива);
		ВидЭлемента = ТекущаяСтрока.ВидЭлемента;
	
		Если (ВидЭлемента = ВидЭлемента("ПустаяСсылка") 
				И ТекущаяСтрока.ПолучитьРодителя() = Неопределено)
			ИЛИ ВидЭлемента = ВидЭлемента("Колонки")
			ИЛИ ВидЭлемента = ВидЭлемента("Строки")
			ИЛИ ВидЭлемента = ВидЭлемента("НастройкаЯчеек") Тогда
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
	
	КонецЦикла;
	
	СписокЭлементов = Новый СписокЗначений;
	Для Каждого ЭлементМассива из ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = ЭлементыОтчетаОтображение.НайтиПоИдентификатору(ЭлементМассива);
		СписокЭлементов.Добавить(ОтражаемаяСтрока(ТекущаяСтрока, ЭтаФорма).ПолучитьИдентификатор());
		Для Сч = 2 по Элементы.НаименованиеДляПечати.ПодчиненныеЭлементы.Количество() Цикл
			Если ТекущаяСтрока["ИндексСтрокиЭлементовОтчета" + Сч] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ИндексСтрокиЭлементовОтчета = ТекущаяСтрока["ИндексСтрокиЭлементовОтчета" + Сч];
			СписокЭлементов.Добавить(ИндексСтрокиЭлементовОтчета);
		КонецЦикла;
		
	КонецЦикла;
	
	ЭлементыОтчетаПередУдалениемНаСервере(СписокЭлементов);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыОтчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыОтчетаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ДеревоОтправительСтроки = "ЭлементыОтчетаОтображение";
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыОтчетаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, СтрокаПриемникОтражение, Поле)
	
	Перем ВидПеретаскиваемогоЭлемента;
	
	СтандартнаяОбработка = Ложь;
	МожноДобавитьВСтруктуру = Истина;
	
	СтрокаПриемник = ОтражаемаяСтрока(СтрокаПриемникОтражение, ЭтаФорма);
	Если СтрокаПриемник <> Неопределено Тогда
		СтрокаПриемник = СтрокаПриемник.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		Для Каждого СтрокаВидаЭлементаОтражение из ПараметрыПеретаскивания.Значение Цикл
			МожноДобавитьВСтруктуру = РазрешеноПеретаскивание(СтрокаВидаЭлементаОтражение, СтрокаПриемник);
			Если НЕ МожноДобавитьВСтруктуру Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		МожноДобавитьВСтруктуру = РазрешеноПеретаскивание(ПараметрыПеретаскивания.Значение, СтрокаПриемник);
	КонецЕсли;
	
	Если МожноДобавитьВСтруктуру Тогда
		Если ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Перемещение
			И ПараметрыПеретаскивания.Действие <> ДействиеПеретаскивания.Копирование Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		КонецЕсли;
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыОтчетаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, СтрокаПриемникОтражение, Поле)
	Перем Кэш;
	
	Если Элементы.ЭлементыОтчетаОтображение.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(,НСтр("ru='Вид бюджета используется в документах и недоступен для редактирования';uk='Вид бюджету використовується у документах і недоступний для редагування'"));
		Возврат;
	КонецЕсли;
	
	СтрокаПриемник = ОтражаемаяСтрока(СтрокаПриемникОтражение, ЭтаФорма);
	Если СтрокаПриемник <> Неопределено Тогда
		СтрокаПриемник = СтрокаПриемник.ПолучитьИдентификатор();
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	МассивСтрок = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	Если ДеревоОтправительСтроки = Элемент.Имя Тогда
		Для Каждого ПереносимаяСтрока из МассивСтрок Цикл
			Если ЭлементыОтчетаОтображение.НайтиПоИдентификатору(ПереносимаяСтрока) = Неопределено Тогда
				//Строка была подчиненна уже перенесенной строке
				Продолжить;
			КонецЕсли;
			ПеренестиСтроку(ЭлементыОтчета, ОтражаемаяСтрока(ПереносимаяСтрока, ЭтаФорма).ПолучитьИдентификатор(), 
								СтрокаПриемник, ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование, Кэш);
		КонецЦикла;
	Иначе
		Если СтрокаПриемник = Неопределено Тогда
			КореньДерева = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ЭлементыОтчета);
			СтрокаПриемник = КореньДерева.ПолучитьИдентификатор();
		КонецЕсли;
		ДобавитьВСтруктуруВидаБюджета(МассивСтрок, СтрокаПриемник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДеревоНовыхЭлементов

&НаКлиенте
Процедура ДеревоНовыхЭлементовВидаБюджетаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ДеревоОтправительСтроки = "ДеревоНовыхЭлементов";
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНовыхЭлементовВидаБюджетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДеревоОтправительСтроки = "ДеревоНовыхЭлементов";
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ВыбраннаяСтрока);
	ДобавитьВСтруктуруВидаБюджета(МассивСтрок, Элементы.ЭлементыОтчетаОтображение.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПосмотретьВидОтчета(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПосмотретьВидОтчетаЗавершение", ЭтотОбъект), 
			НСтр("ru='Просмотр вида отчета возможен только после записи данных. Записать?';uk='Перегляд виду звіту можливий тільки після запису даних. Записати?'"), 
			РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ПосмотретьВидОтчетаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьВидОтчетаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ЭлементЗаписан = Записать();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПосмотретьВидОтчетаФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьВидОтчетаФрагмент()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("МодельБюджетирования", Объект.Владелец);
	ПараметрыОтчета.Вставить("ВидБюджета", Объект.Ссылка);
	ПараметрыОтчета.Вставить("СформироватьБюджетныйОтчетПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.БюджетныйОтчет.Форма.ФормаОтчета",
	ПараметрыОтчета,
	ЭтаФорма,
	Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСтатьюБюджетов(Команда)
	
	ТекущиеДанные = Элементы.ДеревоНовыхЭлементов.ТекущиеДанные;
	
	ЗначенияЗаполнения = Новый Структура();
	Если ТипЗнч(ТекущиеДанные.ЭлементВидаОтчетности) = Тип("СправочникСсылка.СтатьиБюджетов")
		ИЛИ ТипЗнч(ТекущиеДанные.ЭлементВидаОтчетности) = Тип("СправочникСсылка.ПоказателиБюджетов")
		ИЛИ ТипЗнч(ТекущиеДанные.ЭлементВидаОтчетности) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда
		
		Если ТекущиеДанные.ЭтоГруппа Тогда
			ЗначенияЗаполнения.Вставить("Родитель", ТекущиеДанные.ЭлементВидаОтчетности); 
		Иначе
			РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
			Если РодительСтроки <> Неопределено Тогда
				ЗначенияЗаполнения.Вставить("Родитель", РодительСтроки.ЭлементВидаОтчетности);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ТекущиеДанные.ЭлементВидаОтчетности) = Тип("СправочникСсылка.СтатьиБюджетов") Тогда
			ИмяФормыНовогоЭлемента = "СтатьиБюджетов.ФормаОбъекта";
		ИначеЕсли ТипЗнч(ТекущиеДанные.ЭлементВидаОтчетности) = Тип("СправочникСсылка.ПоказателиБюджетов") Тогда
			ИмяФормыНовогоЭлемента = "ПоказателиБюджетов.ФормаОбъекта";
		ИначеЕсли ТипЗнч(ТекущиеДанные.ЭлементВидаОтчетности) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда
			ИмяФормыНовогоЭлемента = "НефинансовыеПоказателиБюджетов.ФормаОбъекта";
		КонецЕсли;
		
		ИмяФормыНовогоЭлемента = "Справочник." + ИмяФормыНовогоЭлемента;
		
	ИначеЕсли ТекущиеДанные.ЭлементВидаОтчетности = "Аналитика"
		ИЛИ ТипЗнч(ТекущиеДанные.ЭлементВидаОтчетности) = Тип("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов") Тогда
		
		ИмяФормыНовогоЭлемента = "ПланВидовХарактеристик.АналитикиСтатейБюджетов.ФормаОбъекта";
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Можно добавлять только статьи бюджетов и показатели бюджетов';uk='Можна додавати тільки статті бюджетів та показники бюджетів'"), 60);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму(ИмяФормыНовогоЭлемента, ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭкземплярБюджета(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьЭкземплярБюджетаЗавершение", ЭтотОбъект), 
			НСтр("ru='Просмотр вида отчета возможен только после записи данных. Записать?';uk='Перегляд виду звіту можливий тільки після запису даних. Записати?'"), 
			РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	СоздатьЭкземплярБюджетаФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭкземплярБюджетаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ЭлементЗаписан = Записать();
		Если Не ЭлементЗаписан Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	СоздатьЭкземплярБюджетаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭкземплярБюджетаФрагмент()
	
	Перем ДанныеЗаполнения, ПараметрыФормы;
	
	Если Не ПроверитьВидБюджетаНаСервере() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Обнаружены ошибки';uk='Виявлено помилки'"));
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура("ВидБюджета", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ДанныеЗаполнения);
	ОткрытьФорму("Документ.ЭкземплярБюджета.Форма.ФормаДокумента", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидаБюджетаНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыФормы = БюджетнаяОтчетностьКлиентСервер.ПараметрыОткрытияФормыНастройкиПериодичностиПланирования(Объект);
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("УстановитьНадписьСпособПланирования", ЭтаФорма);
	ОткрытьФорму("Справочник.ВидыБюджетов.Форма.НастройкаИнтерваловОтчета", ПараметрыФормы,,,,,
									Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)

	РедактироватьЭлементОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДеревоНовыхЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВидБюджета(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Вид бюджета будет сохранен. Продолжить?';uk='Вид бюджету буде збережений. Продовжити?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьВидБюджетаЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
		
	ПроверитьВидБюджетаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВидБюджетаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЭлементЗаписан = ЭтаФорма.Записать();
	Иначе 
		Возврат
	КонецЕсли;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВидБюджетаФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВидБюджетаФрагмент()
	
	ОчиститьСообщения();
	Если Не ПроверитьВидБюджетаНаСервере() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Обнаружены ошибки';uk='Виявлено помилки'"));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Ошибок нет';uk='Помилок немає'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Оповещение = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Сгруппировать(Команда)
	
	Если Элементы.ЭлементыОтчетаОтображение.ТолькоПросмотр Тогда
		ПоказатьПредупреждение(,НСтр("ru='Вид бюджета используется в документах и недоступен для редактирования';uk='Вид бюджету використовується у документах і недоступний для редагування'"));
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ЭлементыОтчетаОтображение.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Строка1 = ЭлементыОтчетаОтображение.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	Строка2 = ЭлементыОтчетаОтображение.НайтиПоИдентификатору(ВыделенныеСтроки[1]);
	
	Если Строка1.ПолучитьРодителя() = Строка2 Тогда
		//прямой порядок
		НачальноеЗначение = 0;
		ОбратныйКоэффициент = -1;
	Иначе
		//обратный порядок
		НачальноеЗначение = ВыделенныеСтроки.Количество() - 1;
		ОбратныйКоэффициент = 1;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ПредыдущаяСтрока = Неопределено;
	УпорядоченныеСтроки = Новый Массив;
	
	СтрокаПроверки = ЭлементыОтчетаОтображение.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	Если ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаПроверки, ВидЭлемента("Строки")) = Неопределено Тогда
		ЕстьОшибки = Истина;
	Иначе
		Для Сч = 0 по ВыделенныеСтроки.Количество() - 1 Цикл
			Строка = ЭлементыОтчетаОтображение.НайтиПоИдентификатору(ВыделенныеСтроки[НачальноеЗначение - Сч * ОбратныйКоэффициент]);
			УпорядоченныеСтроки.Добавить(Строка.ИндексСтрокиЭлементовОтчета);
			Если Строка.ВидЭлемента <> ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.Измерение") Тогда
				ЕстьОшибки = Истина;
				Прервать;
			КонецЕсли;
			Если ПредыдущаяСтрока <> Неопределено Тогда
				Если ПредыдущаяСтрока.ПолучитьРодителя() <> Строка Тогда
					ЕстьОшибки = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			ПредыдущаяСтрока = Строка;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ТекстСообщения = НСтр("ru='Невозможно сгруппировать указанные строки.
                                    |Сгруппированы могут быть только измерения в строках, располагающиеся друг под другом'
                                    |;uk='Неможливо згрупувати зазначені рядки.
                                    |Згруповані можуть бути тільки вимірювання в рядках, розташовані один під одним'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МладшаяСтрока = ЭлементыОтчета.НайтиПоИдентификатору(УпорядоченныеСтроки[0]);
	
	Для Сч = 0 по УпорядоченныеСтроки.ВГраница() Цикл
		
		ПодчиненнаяСтрока = УпорядоченныеСтроки[Сч];
		СтрокаДерева = ЭлементыОтчета.НайтиПоИдентификатору(ПодчиненнаяСтрока);
		Если Сч < УпорядоченныеСтроки.ВГраница() Тогда
			СтрокаДерева.ВыводитьВместеСРодительским = Истина;
			Если Не ЗначениеЗаполнено(СтрокаДерева.АдресСтруктурыЭлемента) Тогда
				СтрокаДерева.АдресСтруктурыЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(СтрокаДерева, УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого Строка из СтрокаДерева.ПолучитьЭлементы() Цикл
			Если УпорядоченныеСтроки.Найти(Строка.ПолучитьИдентификатор()) = Неопределено Тогда
				ФинансоваяОтчетностьКлиентСервер.УстановитьНовогоРодителя(Строка, МладшаяСтрока,,,УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.ЭлементыОтчетаОтображение.ВыделенныеСтроки.Очистить();
	Элементы.ЭлементыОтчетаОтображение.ТекущаяСтрока = УпорядоченныеСтроки[УпорядоченныеСтроки.ВГраница()];
	
	СоответствиеРазворота = СписокФлаговРазворота(ЭлементыОтчетаОтображение);
	
	ОбновитьДеревоОтображения();
	
	ВосстановитьРазвернутыеУзлыДерева(ЭлементыОтчетаОтображение, СоответствиеРазворота);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Разгруппировать(Команда)
	
	Если Элементы.ЭлементыОтчетаОтображение.ТолькоПросмотр Тогда
		ПоказатьПредупреждение(,НСтр("ru='Вид бюджета используется в документах и недоступен для редактирования';uk='Вид бюджету використовується у документах і недоступний для редагування'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЭлементыОтчетаОтображение.ТекущиеДанные;
	Для Сч = 2 по Элементы.НаименованиеДляПечати.ПодчиненныеЭлементы.Количество() Цикл
		Значение = ТекущиеДанные["ИндексСтрокиЭлементовОтчета" + Сч];
		Если Значение <> Неопределено Тогда
			СтрокаДанных = ЭлементыОтчета.НайтиПоИдентификатору(Значение);
			СтрокаДанных.ВыводитьВместеСРодительским = Ложь;
			Если Не ЗначениеЗаполнено(СтрокаДанных.АдресСтруктурыЭлемента) Тогда
				СтрокаДанных.АдресСтруктурыЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(СтрокаДанных, УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеРазворота = СписокФлаговРазворота(ЭлементыОтчетаОтображение);
	
	ОбновитьДеревоОтображения();
	
	ВосстановитьРазвернутыеУзлыДерева(ЭлементыОтчетаОтображение, СоответствиеРазворота);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущаяСтрока = Элементы.ЭлементыОтчетаОтображение.ТекущиеДанные;
	СдвинутьЭлемент(ТекущаяСтрока, -1);
	СдвинутьЭлемент(ОтражаемаяСтрока(ТекущаяСтрока, ЭтаФорма), -1);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущаяСтрока = Элементы.ЭлементыОтчетаОтображение.ТекущиеДанные;
	СдвинутьЭлемент(ТекущаяСтрока, 1);
	СдвинутьЭлемент(ОтражаемаяСтрока(ТекущаяСтрока, ЭтаФорма), 1);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьОбработкуСтрокРекурсивно(НастройкаЯчеек, СтрокаТаблицы, ИмяПроцедуры)
	
	ПодчиненныеСтроки = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(СтрокаТаблицы);
	Для Каждого Строка из ПодчиненныеСтроки Цикл
		
		ВыполнитьОбработкуСтрокРекурсивно(НастройкаЯчеек, Строка, ИмяПроцедуры);
		Выполнить(ИмяПроцедуры + "(НастройкаЯчеек, Строка.ПолучитьИдентификатор())");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЭлементыОтчетаПередУдалениемНаСервере(СписокЭлементов);
	
	Для Каждого ЭлементСпискаЗначений из СписокЭлементов Цикл
		
		ИдентификаторСтроки = ЭлементСпискаЗначений.Значение;
		ТекущаяСтрока = ЭлементыОтчета.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ТекущаяСтрока = Неопределено Тогда
			//Строка была подчиненна уже удаленной строке
			Продолжить;
		КонецЕсли;
		
		ТаблицаСложная = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ТекущаяСтрока, Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
		Если ТаблицаСложная = Неопределено Тогда
			Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ТекущаяСтрока, Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
			Если Таблица = Неопределено Тогда
				Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ТекущаяСтрока, Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
			КонецЕсли;
		Иначе
			Таблица = ТаблицаСложная;
		КонецЕсли;
		
		Если Таблица <> Неопределено Тогда
			НастройкаЯчеек = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Таблица, 
												"ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек);
			
			ВыполнитьОбработкуСтрокРекурсивно(НастройкаЯчеек.ПолучитьИдентификатор(), 
										ТекущаяСтрока, "ОчиститьСвязанныеЭлементыОформления");
			ОчиститьСвязанныеЭлементыОформления(НастройкаЯчеек.ПолучитьИдентификатор(), ТекущаяСтрока.ПолучитьИдентификатор());
			
			Если ТаблицаСложная <> Неопределено Тогда
				ВыполнитьОбработкуСтрокРекурсивно(НастройкаЯчеек.ПолучитьИдентификатор(), 
												ТекущаяСтрока, "ОчиститьУдаляемыеЭлементыОтчета");
				ОчиститьУдаляемыеЭлементыОтчета(НастройкаЯчеек.ПолучитьИдентификатор(), ТекущаяСтрока.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
		
		ПоместитьВоВременноеХранилище(Неопределено, ТекущаяСтрока.АдресСтруктурыЭлемента);
		ТекущаяСтрока.АдресСтруктурыЭлемента = "";
		ТекущаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьДляВводаПланаПриИзмененииНаСервере()
	
	ОбновитьДеревоНовыхЭлементов();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВидБюджетаНаСервере()
	
	Возврат Справочники.ВидыБюджетов.ВидБюджетаЗаполненПравильно(Объект.Ссылка);
	
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	ПредставлениеТипа = НСтр("ru='Вид бюджета';uk='Вид бюджету'");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.Заголовок = ПредставлениеТипа + НСтр("ru=' (создание)';uk=' (створення)'"); ;
	Иначе
		ЭтаФорма.Заголовок = Объект.Наименование + " (" + ПредставлениеТипа + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьКэшНаОснованииТаблицыСочетаний(ТаблицаСочетаний, Уровень = 0)
	
	Если Уровень = ТаблицаСочетаний.Колонки.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Значения = ТаблицаСочетаний.Скопировать();
	ИмяТекущейКолонки = Значения.Колонки[Уровень].Имя;
	Значения.Свернуть(ИмяТекущейКолонки);
	
	КэшРезультат = Новый Соответствие;
	Для Каждого Значение из Значения Цикл
		ТекущееЗначение = Значение[ИмяТекущейКолонки];
		ОтобранныеСочетания = ТаблицаСочетаний.Скопировать(Новый Структура(ИмяТекущейКолонки, ТекущееЗначение));
		КэшНижнегоУровня = СоздатьКэшНаОснованииТаблицыСочетаний(ОтобранныеСочетания, Уровень + 1);
		КэшРезультат.Вставить(ТекущееЗначение, КэшНижнегоУровня);
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(КэшРезультат);
	
КонецФункции

&НаСервере
Процедура ОбновитьДеревоНовыхЭлементов()
	
	ПараметрыДерева = Новый Структура("ИмяЭлементаДерева, БыстрыйПоиск,
										|РежимДерева, МодельБюджетирования,
										|ИспользоватьДляВводаПлана, АналитикиШапки");
	
	ПараметрыДерева.ИмяЭлементаДерева 		= "ДеревоНовыхЭлементов";
	ПараметрыДерева.БыстрыйПоиск 			= БыстрыйПоискНовых;
	ПараметрыДерева.МодельБюджетирования 	= Объект.Владелец;
	ПараметрыДерева.РежимДерева 			= Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета;
	ПараметрыДерева.ИспользоватьДляВводаПлана = Объект.ИспользоватьДляВводаПлана;
	ПараметрыДерева.АналитикиШапки 			= Объект.АналитикиШапки.Выгрузить().ВыгрузитьКолонку("ВидАналитики");
	
	БюджетнаяОтчетностьВызовСервера.ОбновитьДеревоНовыхЭлементов(ЭтаФорма, ПараметрыДерева);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДеревоЭлементовВДеревоОтображения(ЭлементыДерева, РодительскаяСтрока, ГлубинаУровней)
	
	СтрокиДерева = ЭлементыДерева.ПолучитьЭлементы();
	СтрокиОтображения = РодительскаяСтрока.ПолучитьЭлементы();
	Для Каждого СтрокаДерева из СтрокиДерева Цикл
		Если СтрокаДерева.ВыводитьВместеСРодительским Тогда
			Для Сч = 2 по ГлубинаУровней Цикл
				Если РодительскаяСтрока["ИндексСтрокиЭлементовОтчета" + Сч] = Неопределено Тогда
					Прервать
				КонецЕсли;
			КонецЦикла;
			РодительскаяСтрока["НаименованиеДляПечати" + Сч] = СтрокаДерева.НаименованиеДляПечати;
			РодительскаяСтрока["ИндексСтрокиЭлементовОтчета" + Сч] = СтрокаДерева.ПолучитьИдентификатор();
			РодительскаяСтрока["ПредставлениеДополнительныхПолей" + Сч] = СтрокаДерева.ПредставлениеДополнительныхПолей;
			ТекущийРодитель = РодительскаяСтрока;
		Иначе
			НоваяСтрока = СтрокиОтображения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			ТекущийРодитель = НоваяСтрока;
			НоваяСтрока.ИндексСтрокиЭлементовОтчета = СтрокаДерева.ПолучитьИдентификатор();
		КонецЕсли;
		ВывестиДеревоЭлементовВДеревоОтображения(СтрокаДерева, ТекущийРодитель, ГлубинаУровней);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьДеревоЭлементов(ЗначениеКопирования = Неопределено)
	
	ТекущийВидОтчета = Объект.Ссылка;
	ИдентификаторФормы = Неопределено;
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		ТекущийВидОтчета = ЗначениеКопирования;
	КонецЕсли;
	
	ИндексКартинкиКорневойСтроки = 100;
	Если НЕ ЗначениеЗаполнено(ТекущийВидОтчета) Тогда
		СтрокиДерева = ЭлементыОтчета.ПолучитьЭлементы();
		КорневаяСтрока = СтрокиДерева.Добавить();
		КорневаяСтрока.НаименованиеДляПечати = НСтр("ru='Элементы отчета';uk='Елементи звіту'");
		
		КорневаяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПустаяСсылка();
		КорневаяСтрока.НестандартнаяКартинка = ИндексКартинкиКорневойСтроки;
		
		ОбновитьДеревоОтображения();
		
		Возврат;
	КонецЕсли;
	
	ДеревоЭлементов = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьДеревоЭлементовВидаБюджета(ТекущийВидОтчета);
	
	КорневаяСтрока = ДеревоЭлементов.Строки.Добавить();
	КорневаяСтрока.НаименованиеДляПечати = НСтр("ru='Элементы отчета';uk='Елементи звіту'");
	КорневаяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПустаяСсылка();
	КорневаяСтрока.НестандартнаяКартинка = ИндексКартинкиКорневойСтроки;
	
	НомерСтроки = 0;
	Пока НомерСтроки < ДеревоЭлементов.Строки.Количество() Цикл
		
		Стр = ДеревоЭлементов.Строки[НомерСтроки];
		//удалим строки по условию
		Если Стр.НестандартнаяКартинка <> ИндексКартинкиКорневойСтроки Тогда
			ФинансоваяОтчетностьКлиентСервер.УстановитьНовогоРодителя(Стр, КорневаяСтрока);
			ДеревоЭлементов.Строки.Удалить(Стр);
			Продолжить;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		ПересоздатьЭлементыДереваПриКопировании(ДеревоЭлементов.Строки);
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоЭлементов, "ЭлементыОтчета");
	
	ОбновитьДеревоОтображения();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресЗаписанногоЭлемента(КэшСсылок, Элемент)
	
	Адрес = КэшСсылок[Элемент];
	Если Адрес = Неопределено Тогда
		Адрес = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(Элемент, УникальныйИдентификатор);
		СтруктураЭлемента = ПолучитьИзВременногоХранилища(Адрес);
		СтруктураЭлемента.Ссылка = Неопределено;
		ПоместитьВоВременноеХранилище(СтруктураЭлемента, Адрес);
		КэшСсылок.Вставить(Элемент, Адрес);
	КонецЕсли;
	
	Возврат Адрес;
		
КонецФункции

&НаСервере
Процедура ПересоздатьЭлементыДереваПриКопировании(Строки, КэшСсылок = Неопределено)
	
	Если КэшСсылок = Неопределено Тогда
		КэшСсылок = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого СтрокаДерева из Строки Цикл
		Адрес = КэшСсылок[СтрокаДерева.ЭлементОтчета];
		Если Адрес = Неопределено Тогда
			
			Адрес = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(СтрокаДерева, УникальныйИдентификатор);
			КэшСсылок.Вставить(СтрокаДерева.ЭлементОтчета, Адрес);
			СтруктураЭлемента = ПолучитьИзВременногоХранилища(Адрес);
			СтруктураЭлемента.Ссылка = Неопределено;
			
			Для Каждого ЭлементТаблицы из СтруктураЭлемента.ЭлементыТаблицы Цикл
				
				Если ТипЗнч(ЭлементТаблицы.Строка) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
					ЭлементТаблицы.Строка = ПолучитьАдресЗаписанногоЭлемента(КэшСсылок, ЭлементТаблицы.Строка);
				КонецЕсли;
				Если ТипЗнч(ЭлементТаблицы.Колонка) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
					ЭлементТаблицы.Колонка = ПолучитьАдресЗаписанногоЭлемента(КэшСсылок, ЭлементТаблицы.Колонка);
				КонецЕсли;
				Если ТипЗнч(ЭлементТаблицы.Элемент) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
					ЭлементТаблицы.Элемент = ПолучитьАдресЗаписанногоЭлемента(КэшСсылок, ЭлементТаблицы.Элемент);
				КонецЕсли;
				
				СтруктураВложенногоЭлемента = ПолучитьИзВременногоХранилища(ЭлементТаблицы.Элемент);
				Для Каждого СтрокаОперанда из СтруктураВложенногоЭлемента.ОперандыФормулы Цикл
					Если ТипЗнч(СтрокаОперанда.Операнд) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
						СтрокаОперанда.АдресСтруктурыЭлемента = ПолучитьАдресЗаписанногоЭлемента(КэшСсылок, СтрокаОперанда.Операнд);
						СтрокаОперанда.Операнд = Неопределено;
					КонецЕсли;
					Операнд = ПолучитьИзВременногоХранилища(СтрокаОперанда.АдресСтруктурыЭлемента);
					Если Операнд.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
						Для Каждого СтрокаРеквизита из Операнд.РеквизитыВидаЭлемента Цикл
							Если СтрокаРеквизита.Реквизит = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.СтрокаЯчейки Тогда
								Если Не ЭтоАдресВременногоХранилища(СтрокаРеквизита.Значение) Тогда
									СтрокаРеквизита.Значение = ПолучитьАдресЗаписанногоЭлемента(КэшСсылок, СтрокаРеквизита.Значение);
								КонецЕсли;
							КонецЕсли;
							Если СтрокаРеквизита.Реквизит = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.КолонкаЯчейки Тогда
								Если Не ЭтоАдресВременногоХранилища(СтрокаРеквизита.Значение) Тогда
									СтрокаРеквизита.Значение = ПолучитьАдресЗаписанногоЭлемента(КэшСсылок, СтрокаРеквизита.Значение);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						ПоместитьВоВременноеХранилище(Операнд, СтрокаОперанда.АдресСтруктурыЭлемента);
					КонецЕсли;
				КонецЦикла;
				ПоместитьВоВременноеХранилище(СтруктураВложенногоЭлемента, ЭлементТаблицы.Элемент);
				
			КонецЦикла;
			
			Для Каждого СтрокаОперанда из СтруктураЭлемента.ОперандыФормулы Цикл
				Если ТипЗнч(СтрокаОперанда.Операнд) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
					СтрокаОперанда.АдресСтруктурыЭлемента = ПолучитьАдресЗаписанногоЭлемента(КэшСсылок, СтрокаОперанда.Операнд);
					СтрокаОперанда.Операнд = Неопределено;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаОформления из СтруктураЭлемента.ОформляемыеСтроки Цикл
				Если ТипЗнч(СтрокаОформления.ЭлементОтчета) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
					СтрокаОформления.ЭлементОтчета = ПолучитьАдресЗаписанногоЭлемента(КэшСсылок, СтрокаОформления.ЭлементОтчета);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаОформления из СтруктураЭлемента.ОформляемыеКолонки Цикл
				Если ТипЗнч(СтрокаОформления.ЭлементОтчета) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
					СтрокаОформления.ЭлементОтчета = ПолучитьАдресЗаписанногоЭлемента(КэшСсылок, СтрокаОформления.ЭлементОтчета);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаОформления из СтруктураЭлемента.РасшифровкаПолейОтбораЭО Цикл
				Если ТипЗнч(СтрокаОформления.ЭлементОтчета) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
					СтрокаОформления.ЭлементОтчета = ПолучитьАдресЗаписанногоЭлемента(КэшСсылок, СтрокаОформления.ЭлементОтчета);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаИсточника из СтруктураЭлемента.ИсточникиЗначений Цикл
				СтрокаИсточника.Источник = ПолучитьАдресЗаписанногоЭлемента(КэшСсылок, СтрокаИсточника.Источник);
			КонецЦикла;
			
			ПоместитьВоВременноеХранилище(СтруктураЭлемента, Адрес);
			
		КонецЕсли;
		
		СтрокаДерева.АдресСтруктурыЭлемента = Адрес;
		СтрокаДерева.ЭлементОтчета = Неопределено;
		ПересоздатьЭлементыДереваПриКопировании(СтрокаДерева.Строки, КэшСсылок);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтрокуВСоответствииСДополнительнымРежимом(ТекущаяСтрока, Кэш = Неопределено)
	
	ДополнительныйРежим = ОпределитьДополнительныеПараметры(ТекущаяСтрока, Кэш);
	
	Реквизиты = Новый Структура();
	
	Если ТекущаяСтрока.ВидЭлемента = ВидЭлемента("СтатьяБюджетов", Кэш)
		ИЛИ ТекущаяСтрока.ВидЭлемента = ВидЭлемента("ПоказательБюджетов", Кэш)
		ИЛИ ТекущаяСтрока.ВидЭлемента = ВидЭлемента("ВсеСтатьиБюджетов", Кэш)
		ИЛИ ТекущаяСтрока.ВидЭлемента = ВидЭлемента("ВсеПоказателиБюджетов", Кэш) Тогда
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ВыводимыеПоказатели) Тогда
			ТекущаяСтрока.ВыводимыеПоказатели = ПредопределенноеЗначение("Перечисление.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма");
			Реквизиты.Вставить("ВыводимыеПоказатели", ТекущаяСтрока.ВыводимыеПоказатели);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ВидЭлемента = ВидЭлемента("ПоказательБюджетов", Кэш)
		ИЛИ ТекущаяСтрока.ВидЭлемента = ВидЭлемента("ВсеПоказателиБюджетов", Кэш) Тогда
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ТипЗначенияПоказателя) Тогда
			ТекущаяСтрока.ТипЗначенияПоказателя = ПредопределенноеЗначение("Перечисление.ТипыЗначенийПоказателейБюджетногоОтчета.Оборот");
			Реквизиты.Вставить("ТипЗначенияПоказателя", ТекущаяСтрока.ТипЗначенияПоказателя);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.АдресСтруктурыЭлемента)
		И Реквизиты.Количество() Тогда
		ФинансоваяОтчетностьВызовСервера.УстановитьЗначенияДополнительныхРеквизитов(ТекущаяСтрока.АдресСтруктурыЭлемента, Реквизиты);
	КонецЕсли;
	
	БезНастроек = Ложь;
	БезПоказателей = Ложь;
	БезОбратногоЗнака = Ложь;
	
	ИмяДополнительныхРежимов = "Перечисление.ДополнительныеРежимыЭлементовОтчетов.";
	Если ДополнительныйРежим = ПредопределенноеЗначение(ИмяДополнительныхРежимов + "СтатьяВПоказателеБюджетов") Тогда
		БезНастроек = Истина;
		БезПоказателей = Истина;
	ИначеЕсли ДополнительныйРежим = ПредопределенноеЗначение(ИмяДополнительныхРежимов + "ВсеСтатьиВСложнойТаблице")
		ИЛИ ДополнительныйРежим = ПредопределенноеЗначение(ИмяДополнительныхРежимов + "ВсеПоказателиВСложнойТаблице") Тогда
		БезНастроек = Истина;
		БезПоказателей = Истина;
		БезОбратногоЗнака = Истина;
	ИначеЕсли ДополнительныйРежим = ПредопределенноеЗначение(ИмяДополнительныхРежимов + "ЭлементТаблицыВСложнойТаблице")
		ИЛИ ДополнительныйРежим = ПредопределенноеЗначение(ИмяДополнительныхРежимов + "ЭлементТаблицыВРежимеВвода") Тогда
		БезНастроек = Истина;
	КонецЕсли;
	
	СтруктураНаСброс = Новый Структура;
	Если БезНастроек Тогда
		ТекущаяСтрока.ЕстьНастройки = Ложь;
		СтруктураНаСброс.Вставить("ЕстьНастройки");
		СтруктураНаСброс.Вставить("ДополнительныйОтбор");
	КонецЕсли;
	
	Если БезОбратногоЗнака Тогда
		ТекущаяСтрока.ОбратныйЗнак = Неопределено;
		СтруктураНаСброс.Вставить("ОбратныйЗнак");
	КонецЕсли;
	
	СтруктураДополнительныхРеквизитовНаСброс = Новый Структура;
	Если БезПоказателей Тогда
		ТекущаяСтрока.ВыводимыеПоказатели = Неопределено;
		СтруктураДополнительныхРеквизитовНаСброс.Вставить("ВыводимыеПоказатели");
		СтруктураДополнительныхРеквизитовНаСброс.Вставить("ТипЗначенияПоказателя");
	КонецЕсли;
	
	Если СтруктураНаСброс.Количество()
		ИЛИ СтруктураДополнительныхРеквизитовНаСброс.Количество() Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.АдресСтруктурыЭлемента)
			ИЛИ ЗначениеЗаполнено(ТекущаяСтрока.ЭлементОтчета) Тогда
			НастроитьСтрокуВСоответствиеСДополнительнымРежимомСервер(ТекущаяСтрока.ЭлементОтчета,
																				ТекущаяСтрока.АдресСтруктурыЭлемента, 
																				СтруктураНаСброс,
																				СтруктураДополнительныхРеквизитовНаСброс,
																				УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастроитьСтрокуВСоответствиеСДополнительнымРежимомСервер(ЭлементОтчета, АдресХранилища,
																	СтруктураНаСброс, СтруктураДополнительныхРеквизитовНаСброс,
																	УникальныйИдентификаторФормы)
	
	Если ЗначениеЗаполнено(ЭлементОтчета) Тогда
		АдресХранилища = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(ЭлементОтчета, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеРеквизита(АдресХранилища, СтруктураНаСброс);
	ФинансоваяОтчетностьВызовСервера.УстановитьЗначенияДополнительныхРеквизитов(АдресХранилища, 
																						СтруктураДополнительныхРеквизитовНаСброс);
	
КонецПроцедуры

&НаКлиенте
Функция ПропуститьОтображаемыеВместе(Родитель)
	
	ПодчиненныеСтроки = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(Родитель);
	ВсеПроверено = Ложь;
	Пока Не ВсеПроверено Цикл
		БылиЗамены = Ложь;
		Для Каждого ПодчиненнаяСтрока из ПодчиненныеСтроки Цикл
			Если ПодчиненнаяСтрока.ВыводитьВместеСРодительским = Истина Тогда
				БылиЗамены = Истина;
				Родитель = ПодчиненнаяСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если БылиЗамены Тогда
			ПодчиненныеСтроки = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(Родитель);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Родитель;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВСтруктуруВидаБюджета(НовыеЭлементы, Знач ИдРодителя)
	
	Если Элементы.ЭлементыОтчетаОтображение.ТолькоПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru='Вид бюджета используется в документах и недоступен для редактирования';uk='Вид бюджету використовується у документах і недоступний для редагування'"));
		Возврат;
	КонецЕсли;
	
	// Определим ветку структуры вида бюджета
	Если ИдРодителя = Неопределено Тогда
		Родитель = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ЭлементыОтчета);
	Иначе
		Родитель = ЭлементыОтчета.НайтиПоИдентификатору(ИдРодителя);
	КонецЕсли;
	
	АдресТекущейСтроки = Родитель;
	Родитель = ПропуститьОтображаемыеВместе(Родитель);
	ИдРодителя = Родитель.ПолучитьИдентификатор();
	
	ПодчиненныеЭлементыРодителя = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(Родитель);
	ВсегоЭлементов = ПодчиненныеЭлементыРодителя.Количество();
	Если ВсегоЭлементов Тогда
		ВернутьФормулуНаМесто = ПодчиненныеЭлементыРодителя[ВсегоЭлементов - 1].ВидЭлемента = ВидЭлемента("ФормулаПоГруппе");
	КонецЕсли;
	
	Для Каждого НовыйЭлементВидаБюджета Из НовыеЭлементы Цикл
		
		СтрокаНовогоЭлемента = НовыйЭлементВидаБюджета;
		Если ТипЗнч(НовыйЭлементВидаБюджета) = Тип("Число") Тогда
			СтрокаНовогоЭлемента = ДеревоНовыхЭлементов.НайтиПоИдентификатору(НовыйЭлементВидаБюджета);
		КонецЕсли;
		
		ПодчиненныеСтроки = Неопределено;
		Если СтрокаНовогоЭлемента.ЭтоГруппа = Истина Тогда
			ВидЭлемента = ВидЭлемента("Группа");
			ПодчиненныеСтроки = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(СтрокаНовогоЭлемента);
		Иначе
			ВидЭлемента = СтрокаНовогоЭлемента.ВидЭлемента;
		КонецЕсли;
		
		Если Не МожноДобавитьВСтруктуруВидаБюджета(ВидЭлемента, ИдРодителя) Тогда
			Продолжить;
		КонецЕсли;
		
		// Таблицы создаем после выбора типа
		Если ВидЭлемента = ВидЭлемента("ТаблицаСложная") Тогда
			
			ДополнительныеПараметры = Новый Структура("Родитель, СтрокаНовогоЭлемента", Родитель, СтрокаНовогоЭлемента);
			Оповещение = Новый ОписаниеОповещения("ПриВыбореТипаТаблицы", ЭтаФорма, ДополнительныеПараметры);
			ОткрытьФорму("Справочник.ЭлементыФинансовыхОтчетов.Форма.ФормаВыбораТипТаблицы",,
																ЭтаФорма,
																,,,
																Оповещение,
																РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Продолжить;
		КонецЕсли;
		
		// Таблицы создаем после выбора типа
		Если ВидЭлемента = ВидЭлемента("Измерение") Тогда
			
			ТипИзмерения = БюджетнаяОтчетностьКлиентСервер.ОпределитьТипИзмеренияПоТипуЗначения(СтрокаНовогоЭлемента.ЭлементВидаОтчетности);
			
			ТребуетсяФормаВыбораЗначений = Истина;
			ИмяФормыВыбора = "Измерения";
			
			ДополнительныеПараметры = Новый Структура("Родитель", ИдРодителя);
			Оповещение = Новый ОписаниеОповещения("ПриВыбореСвойствИзмерения", ЭтаФорма, ДополнительныеПараметры);
			
			Если ТипИзмерения = ПредопределенноеЗначение("Перечисление.ТипыИзмеренийФинансовогоОтчета.Период") Тогда
				ИмяФормыВыбора = "Периода";
			КонецЕсли;
			Если ТипИзмерения = ПредопределенноеЗначение("Перечисление.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра")
				И СтрНайти(СтрокаНовогоЭлемента.ЭлементВидаОтчетности, "Аналитика") Тогда
				ТребуетсяФормаВыбораЗначений = Ложь;
			КонецЕсли;
			Если ТипИзмерения = ПредопределенноеЗначение("Перечисление.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра")
				И СтрокаНовогоЭлемента.ЭлементВидаОтчетности = "ЕдиницаИзмерения" Тогда
				ТребуетсяФормаВыбораЗначений = Ложь;
			КонецЕсли;
			
			Если ТребуетсяФормаВыбораЗначений Тогда
				
					ПараметрыПодбора = Новый Структура(
											"ТипИзмерения,
											|ДополнительнаяИнформация,
											|Владелец",
											ТипИзмерения,
											СтрокаНовогоЭлемента.ЭлементВидаОтчетности,
											ОпределитьВладельцаЭлемента(
												СтрокаНовогоЭлемента.ЭлементВидаОтчетности,
												ИДРодителя));
												
					Если ИмяФормыВыбора = "Периода" Тогда
						ПараметрыПодбора.Вставить("Периодичность", Объект.Периодичность);
						ПараметрыПодбора.Вставить("СпособПланирования", Объект.СпособПланирования);
						ПараметрыПодбора.Вставить("КоличествоПериодовСкользящегоБюджета", Объект.КоличествоПериодовСкользящегоБюджета);
					Иначе
						ВКолонки = Родитель.ВидЭлемента = ВидЭлемента("Колонки")
							ИЛИ ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(Родитель, ВидЭлемента("Колонки")) <> Неопределено;
						ПараметрыПодбора.Вставить("ВКолонки", ВКолонки);
						ПараметрыПодбора.Вставить("ИспользоватьДляВводаПлана", Объект.ИспользоватьДляВводаПлана);
					КонецЕсли;
					
					ОткрытьФорму("Справочник.ВидыБюджетов.Форма.ФормаСвойств" + ИмяФормыВыбора, ПараметрыПодбора,
																ЭтаФорма,
																,,,
																Оповещение,
																РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокиПриемник = Родитель.ПолучитьЭлементы();
		НоваяСтрока = СтрокиПриемник.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНовогоЭлемента);
		НоваяСтрока.ВидЭлемента = ВидЭлемента;
		Если ВидЭлемента = ВидЭлемента("Группа") Тогда
			НоваяСтрока.НестандартнаяКартинка = 36;
		КонецЕсли;
		НоваяСтрока.НаименованиеДляПечати = СтрокаНовогоЭлемента.Наименование;
		
		Модифицированность = Истина;
		Если ВидЭлемента = ВидЭлемента("РедактируемоеЗначение") Тогда
			
			МассивЭлементов = БюджетнаяОтчетностьКлиентСервер.МассивИменРедактируемыхЯчеек(ЭлементыОтчета, НоваяСтрока.ПолучитьИдентификатор());
			НоваяСтрока.НаименованиеДляПечати = БюджетнаяОтчетностьКлиентСервер.ИмяРедактируемогоЗначенияБюджета(МассивЭлементов);
			
		ИначеЕсли ВидЭлемента = ВидЭлемента("ЭлементТаблицы") Тогда
			
			ЭлКолонки = ВидЭлемента("Колонки");
			РодительПроверки = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(НоваяСтрока, ЭлКолонки);
			Если Не РодительПроверки = Неопределено Тогда
				НоваяСтрока.НаименованиеДляПечати = "Колонка";
			Иначе
				НоваяСтрока.НаименованиеДляПечати = "Строка";
			КонецЕсли;
			
		ИначеЕсли ВидЭлемента = ВидЭлемента("Группа") Тогда
			
			НоваяСтрока.ВыводитьЗаголовокЭлемента = Истина;
			
		ИначеЕсли ВидЭлемента = ВидЭлемента("ФормулаПоГруппе") Тогда
			
			НоваяСтрока.НаименованиеДляПечати = "Сумма";
			
		ИначеЕсли ВидЭлемента = ВидЭлемента("СтатьяБюджетов")
			ИЛИ ВидЭлемента = ВидЭлемента("ПоказательБюджетов")
			ИЛИ ВидЭлемента = ВидЭлемента("НефинансовыйПоказатель")
			ИЛИ ВидЭлемента = ВидЭлемента("Измерение")
			ИЛИ ВидЭлемента = ВидЭлемента("ВсеСтатьиБюджетов")
			ИЛИ ВидЭлемента = ВидЭлемента("ВсеПоказателиБюджетов") Тогда
			
			НоваяСтрока.СтатьяПоказательТипИзмерения = СтрокаНовогоЭлемента.ЭлементВидаОтчетности;
			
			Если ВидЭлемента = ВидЭлемента("СтатьяБюджетов")
				ИЛИ ВидЭлемента = ВидЭлемента("ПоказательБюджетов")
				ИЛИ ВидЭлемента = ВидЭлемента("ВсеСтатьиБюджетов")
				ИЛИ ВидЭлемента = ВидЭлемента("ВсеПоказателиБюджетов") Тогда
				
				НастроитьСтрокуВСоответствииСДополнительнымРежимом(НоваяСтрока);
				
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.АдресСтруктурыЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(НоваяСтрока, УникальныйИдентификатор);
		
		РодительОтражения = СтрокаОтражения(Родитель, ЭтаФорма);
		ДобавитьСтрокуОтражение(РодительОтражения.ПолучитьЭлементы(), НоваяСтрока, ЭтаФорма);
		
		Элементы.ЭлементыОтчетаОтображение.Развернуть(СтрокаОтражения(ИдРодителя, ЭтаФорма).ПолучитьИдентификатор());
		Элементы.ЭлементыОтчетаОтображение.Развернуть(СтрокаОтражения(НоваяСтрока, ЭтаФорма).ПолучитьИдентификатор(), Истина);
		
		Если ПодчиненныеСтроки <> Неопределено Тогда
			ДобавитьВСтруктуруВидаБюджета(ПодчиненныеСтроки, НоваяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВсегоЭлементов И ВернутьФормулуНаМесто Тогда
		Сдвиг = ПодчиненныеЭлементыРодителя.Количество() - ВсегоЭлементов;
		ПодчиненныеЭлементыРодителя.Сдвинуть(ВсегоЭлементов - 1, Сдвиг);
	КонецЕсли;
	
	Если НоваяСтрока <> Неопределено Тогда
		Элементы.ЭлементыОтчетаОтображение.ТекущаяСтрока = СтрокаОтражения(НоваяСтрока, ЭтаФорма).ПолучитьИдентификатор();
		Если НоваяСтрока.ВидЭлемента = ВидЭлемента("ПроизводныйПоказатель") Тогда
			
			РедактироватьЭлементОтчета();
			
		КонецЕсли;
	Иначе
		Элементы.ЭлементыОтчетаОтображение.ТекущаяСтрока = СтрокаОтражения(ИдРодителя, ЭтаФорма).ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСвойствИзмерения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = ЭлементыОтчета.НайтиПоИдентификатору(ДополнительныеПараметры.Родитель);
	ЭлементыСтрок = СтрокаРодитель.ПолучитьЭлементы();
	
	СтрокаРодительОтражение = СтрокаОтражения(СтрокаРодитель, ЭтаФорма);
	ЭлементыСтрокОтражение = СтрокаРодительОтражение.ПолучитьЭлементы();
	
	ВсегоЭлементов = ЭлементыСтрок.Количество();
	Если ВсегоЭлементов Тогда
		ВернутьФормулуНаМесто = ЭлементыСтрок[ВсегоЭлементов - 1].ВидЭлемента = ВидЭлемента("ФормулаПоГруппе");
	КонецЕсли;
	
	Измерение = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.Измерение");
	Картинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(Измерение);
	
	Для Каждого Значение из Результат Цикл
		
		НайденныйЭлемент = Неопределено;
		
		Если НайтиСтрокуФиксированнойАналитики(ЭлементыСтрок, 
						Измерение, Значение.СтатьяПоказательТипИзмерения, 
						Значение.ЗначениеАналитики, Значение.ЭтоАналитикаПрочее, НайденныйЭлемент) Тогда
			
			Если НайденныйЭлемент.ЭтоАналитикаПрочее Тогда
				Если Значение.РазрешитьРедактирование Тогда
					НайденныйЭлемент.НаименованиеДляПечати = НСтр("ru='<добавляемые и прочие %1>';uk='<що додаються та інші %1>'");
					НайденныйЭлемент.НаименованиеДляПечати = 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НайденныйЭлемент.НаименованиеДляПечати, Нрег(Значение.СтатьяПоказательТипИзмерения));
				Иначе
					НайденныйЭлемент.НаименованиеДляПечати = НСтр("ru='<прочие %1>';uk='<інші %1>'");
					НайденныйЭлемент.НаименованиеДляПечати = 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НайденныйЭлемент.НаименованиеДляПечати, Нрег(Значение.СтатьяПоказательТипИзмерения));
				КонецЕсли;
				
				ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
																	НайденныйЭлемент.АдресСтруктурыЭлемента,
																	"РазрешитьРедактирование",
																	Значение.РазрешитьРедактирование);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЭлементыСтрок.Добавить();
		Модифицированность = Истина;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Значение);
		НоваяСтрока.НестандартнаяКартинка = Картинка;
		НоваяСтрока.ВидЭлемента = Измерение;
		
		Если НоваяСтрока.ЭтоАналитикаПрочее Тогда
			Если Значение.РазрешитьРедактирование Тогда
				НоваяСтрока.НаименованиеДляПечати = НСтр("ru='<добавляемые и прочие %1>';uk='<що додаються та інші %1>'");
				НоваяСтрока.НаименованиеДляПечати = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НоваяСтрока.НаименованиеДляПечати, Нрег(НоваяСтрока.СтатьяПоказательТипИзмерения));
			Иначе
				НоваяСтрока.НаименованиеДляПечати = НСтр("ru='<прочие %1>';uk='<інші %1>'");
				НоваяСтрока.НаименованиеДляПечати = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НоваяСтрока.НаименованиеДляПечати, Нрег(НоваяСтрока.СтатьяПоказательТипИзмерения));
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.АдресСтруктурыЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(НоваяСтрока, УникальныйИдентификатор);
		
		Если НоваяСтрока.ЭтоАналитикаПрочее Тогда
			ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
																НоваяСтрока.АдресСтруктурыЭлемента,
																"РазрешитьРедактирование",
																Значение.РазрешитьРедактирование);
		КонецЕсли;
		
		ДобавитьСтрокуОтражение(ЭлементыСтрокОтражение, НоваяСтрока, ЭтаФорма);
		
	КонецЦикла;
	
	Элементы.ЭлементыОтчетаОтображение.Развернуть(СтрокаРодительОтражение.ПолучитьИдентификатор());
	
	Если ВсегоЭлементов И ВернутьФормулуНаМесто Тогда
		Сдвиг = ЭлементыСтрок.Количество() - ВсегоЭлементов;
		ЭлементыСтрок.Сдвинуть(ВсегоЭлементов - 1, Сдвиг);
		ЭлементыСтрокОтражение.Сдвинуть(ВсегоЭлементов - 1, Сдвиг);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореТипаТаблицы(ТипТаблицы, ДопПараметры) Экспорт
	
	Если ТипТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ДопПараметры.Родитель;
	СтрокаНовогоЭлемента = ДопПараметры.СтрокаНовогоЭлемента;
	
	СтрокиПриемник = Родитель.ПолучитьЭлементы();
	НоваяСтрока = СтрокиПриемник.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНовогоЭлемента);
	НоваяСтрока.НаименованиеДляПечати = СтрокаНовогоЭлемента.Наименование;
	
	Если ТипТаблицы = 0 Тогда
		НоваяСтрока.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках");
	ИначеЕсли ТипТаблицы = 1 Тогда
		НоваяСтрока.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках");
	ИначеЕсли ТипТаблицы = 2 Тогда
		НоваяСтрока.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная");
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ДобавитьСтрокуОтражение(СтрокаОтражения(Родитель, ЭтаФорма).ПолучитьЭлементы(), НоваяСтрока, ЭтаФорма);
	
	ПодчиненныеСтроки  = НоваяСтрока.ПолучитьЭлементы();
	
	ВидЭлемента = ВидЭлемента("Колонки");
	ДополнительныйЭлементТаблицы = ПодчиненныеСтроки.Добавить();
	ДополнительныйЭлементТаблицы.ВидЭлемента = ВидЭлемента;
	ДополнительныйЭлементТаблицы.НаименованиеДляПечати = Строка(ВидЭлемента);
	ПостФикс = ?(ТипТаблицы = 1, "Ввод", "");
	ДополнительныйЭлементТаблицы.НестандартнаяКартинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(ВидЭлемента, ПостФикс);
	
	ДобавитьСтрокуОтражение(СтрокаОтражения(НоваяСтрока, ЭтаФорма).ПолучитьЭлементы(), ДополнительныйЭлементТаблицы, ЭтаФорма);
	
	ВидЭлемента = ВидЭлемента("Строки");
	ДополнительныйЭлементТаблицы = ПодчиненныеСтроки.Добавить();
	ДополнительныйЭлементТаблицы.ВидЭлемента = ВидЭлемента;
	ДополнительныйЭлементТаблицы.НаименованиеДляПечати = Строка(ВидЭлемента);
	ПостФикс = ?(ТипТаблицы = 0, "Ввод", "");
	ДополнительныйЭлементТаблицы.НестандартнаяКартинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(ВидЭлемента, ПостФикс);
	
	ДобавитьСтрокуОтражение(СтрокаОтражения(НоваяСтрока, ЭтаФорма).ПолучитьЭлементы(), ДополнительныйЭлементТаблицы, ЭтаФорма);
	
	ВидЭлемента = ВидЭлемента("НастройкаЯчеек");
	ДополнительныйЭлементТаблицы = ПодчиненныеСтроки.Добавить();
	ДополнительныйЭлементТаблицы.ВидЭлемента = ВидЭлемента;
	Если ТипТаблицы = 2 Тогда
		ДополнительныйЭлементТаблицы.НаименованиеДляПечати = Строка(ВидЭлемента);
	Иначе
		ДополнительныйЭлементТаблицы.НаименованиеДляПечати = НСтр("ru='Настройка оформления';uk='Настройка оформлення'");
	КонецЕсли;
	ДополнительныйЭлементТаблицы.НестандартнаяКартинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(ВидЭлемента);
	ДобавитьСтрокуОтражение(СтрокаОтражения(НоваяСтрока, ЭтаФорма).ПолучитьЭлементы(), ДополнительныйЭлементТаблицы, ЭтаФорма);
	
	Элементы.ЭлементыОтчетаОтображение.Развернуть(СтрокаОтражения(Родитель, ЭтаФорма).ПолучитьИдентификатор());
	Элементы.ЭлементыОтчетаОтображение.Развернуть(СтрокаОтражения(НоваяСтрока, ЭтаФорма).ПолучитьИдентификатор(), Истина);
	Элементы.ЭлементыОтчетаОтображение.ТекущаяСтрока = СтрокаОтражения(НоваяСтрока, ЭтаФорма).ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Функция РазрешеноПеретаскивание(СтрокаДерева, РодительПриемник)
	
	ВидПеретаскиваемогоЭлемента = Неопределено;
	Попытка
		Если ТипЗнч(СтрокаДерева) = Тип("Число") Тогда //перетаскивание внутри дерева
			ВидПеретаскиваемогоЭлемента = ЭлементыОтчетаОтображение.НайтиПоИдентификатору(СтрокаДерева).ВидЭлемента;
		Иначе
			ВидПеретаскиваемогоЭлемента = СтрокаДерева.ВидЭлемента;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ВидПеретаскиваемогоЭлемента) ИЛИ
		Не МожноДобавитьВСтруктуруВидаБюджета(ВидПеретаскиваемогоЭлемента, РодительПриемник) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция МожноДобавитьВСтруктуруВидаБюджета(ВидЭлементаПереносимый, ИдСтрокиКудаНесем)
	
	СтруктураПоиска = Новый Массив;
	СтруктураПоиска.Добавить(ВидЭлементаПереносимый); // элемент
	Если ИдСтрокиКудаНесем = Неопределено Тогда
		СтруктураПоиска.Добавить(ВидЭлемента("ПустаяСсылка")); // Родитель
	Иначе
		СтрокаЭлементаОтчета = ЭлементыОтчета.НайтиПоИдентификатору(ИдСтрокиКудаНесем);
		СтруктураПоиска.Добавить(СтрокаЭлементаОтчета.ВидЭлемента); // Родитель
		
		НайденныеСтроки = КэшНедопустимыхСочетаний.Получить(ВидЭлементаПереносимый);
		Если НайденныеСтроки <> Неопределено Тогда
			Для Каждого СтрокаНедопустимыхСочетаний ИЗ НайденныеСтроки Цикл
				Элемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаЭлементаОтчета, СтрокаНедопустимыхСочетаний.Ключ);
				Если Элемент <> Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Элемент1 = Неопределено;
		
		Если СтрокаЭлементаОтчета.ВидЭлемента <> ВидЭлемента("Колонки")
			И СтрокаЭлементаОтчета.ВидЭлемента <> ВидЭлемента("Строки") Тогда
			
			Элемент1 = ПолучитьСтрокуПоВидуПоИерархии(СтрокаЭлементаОтчета, ВидЭлемента("Строки"));
			Если Элемент1 = Неопределено Тогда
				Элемент1 = ПолучитьСтрокуПоВидуПоИерархии(СтрокаЭлементаОтчета, ВидЭлемента("Колонки"));
			КонецЕсли;
			Если Элемент1 <> Неопределено Тогда
				Элемент1 = Элемент1.ВидЭлемента;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Элемент1) Тогда
			Элемент1 = ВидЭлемента("ПустаяСсылка");
		КонецЕсли;
		
		СтруктураПоиска.Добавить(Элемент1); // СтрокиКолонки
			
		Элемент2 = ПолучитьСтрокуПоВидуПоИерархии(СтрокаЭлементаОтчета, ВидЭлемента("ТаблицаПоказателиВСтроках"));
		Если Элемент2 = Неопределено Тогда
			Элемент2 = ПолучитьСтрокуПоВидуПоИерархии(СтрокаЭлементаОтчета, ВидЭлемента("ТаблицаПоказателиВКолонках"));
		КонецЕсли;
		Если Элемент2 = Неопределено Тогда
			Элемент2 = ПолучитьСтрокуПоВидуПоИерархии(СтрокаЭлементаОтчета, ВидЭлемента("ТаблицаСложная"));
		КонецЕсли;
		Если Элемент2 <> Неопределено Тогда
			Элемент2 = Элемент2.ВидЭлемента;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Элемент2) Тогда
			Элемент2 = ВидЭлемента("ПустаяСсылка");
		КонецЕсли;
		
		СтруктураПоиска.Добавить(Элемент2); // ВидТаблицы
		
	КонецЕсли;
	
	ТочкаПоиска = КэшДопустимыхСочетаний;
	Для Каждого ЭлементПоиска из СтруктураПоиска Цикл
		
		НайденныеСтроки = ТочкаПоиска.Получить(ЭлементПоиска);
		Если НайденныеСтроки = Истина Тогда
			Возврат Истина;
		ИначеЕсли НайденныеСтроки = Неопределено Тогда
			Возврат Ложь;
		ИначеЕсли НайденныеСтроки.Количество() Тогда
			ТочкаПоиска = НайденныеСтроки;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуПоВидуПоИерархии(СтрокаЭлемента, ВидЭлемента)
	
	Если СтрокаЭлемента.ВидЭлемента = ВидЭлемента Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;
	
	Возврат ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаЭлемента, ВидЭлемента);
	
КонецФункции

&НаСервере
Процедура ОчиститьУдаляемыеЭлементыОтчета(НастройкаЯчеекИдентификатор, ТекущаяСтрокаИдентификатор)
	
	НастройкаЯчеек = ЭлементыОтчета.НайтиПоИдентификатору(НастройкаЯчеекИдентификатор);
	ТекущаяСтрока = ЭлементыОтчета.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	Если Не ЗначениеЗаполнено(НастройкаЯчеек.АдресСтруктурыЭлемента) Тогда
		НастройкаЯчеек.АдресСтруктурыЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(НастройкаЯчеек, УникальныйИдентификатор);
	КонецЕсли;
	СтруктураЭлемента = ПолучитьИзВременногоХранилища(НастройкаЯчеек.АдресСтруктурыЭлемента);
	НайденныеСтроки = СтруктураЭлемента.ЭлементыТаблицы.НайтиСтроки(Новый Структура("Строка", ТекущаяСтрока.ЭлементОтчета));
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		СтруктураЭлемента.ЭлементыТаблицы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	НайденныеСтроки = СтруктураЭлемента.ЭлементыТаблицы.НайтиСтроки(Новый Структура("Строка", ТекущаяСтрока.АдресСтруктурыЭлемента));
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		СтруктураЭлемента.ЭлементыТаблицы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	НайденныеСтроки = СтруктураЭлемента.ЭлементыТаблицы.НайтиСтроки(Новый Структура("Колонка", ТекущаяСтрока.ЭлементОтчета));
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		СтруктураЭлемента.ЭлементыТаблицы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	НайденныеСтроки = СтруктураЭлемента.ЭлементыТаблицы.НайтиСтроки(Новый Структура("Колонка", ТекущаяСтрока.АдресСтруктурыЭлемента));
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		СтруктураЭлемента.ЭлементыТаблицы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	ПоместитьВоВременноеХранилище(СтруктураЭлемента, НастройкаЯчеек.АдресСтруктурыЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСвязанныеЭлементыОформления(НастройкаЯчеекИдентификатор, ТекущаяСтрокаИдентификатор)
	
	НастройкаЯчеек = ЭлементыОтчета.НайтиПоИдентификатору(НастройкаЯчеекИдентификатор);
	ТекущаяСтрока = ЭлементыОтчета.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Если Не ЗначениеЗаполнено(НастройкаЯчеек.АдресСтруктурыЭлемента) Тогда
		НастройкаЯчеек.АдресСтруктурыЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(НастройкаЯчеек, УникальныйИдентификатор);
	КонецЕсли;
	СтруктураЭлемента = ПолучитьИзВременногоХранилища(НастройкаЯчеек.АдресСтруктурыЭлемента);
	
	МассивЭлементовКУдалению = Новый Массив;
	СтруктураТаблиц = Новый Структура("ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО");
	Для Каждого КлючИЗначение из СтруктураТаблиц Цикл
		НайденныеСтроки = СтруктураЭлемента[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ЭлементОтчета", ТекущаяСтрока.ЭлементОтчета));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				НайденныеСтроки,
				СтруктураЭлемента[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ЭлементОтчета", ТекущаяСтрока.АдресСтруктурыЭлемента)));
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			МассивЭлементовКУдалению.Добавить(НайденнаяСтрока.КлючЭлементаОформления);
		КонецЦикла;
	КонецЦикла;
	
	МассивЭлементовКУдалению = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЭлементовКУдалению);
	СтруктураТаблиц.Вставить("ЭлементыОформления");
	Для Каждого КлючЭлемента из МассивЭлементовКУдалению Цикл
		Для Каждого КлючИЗначение из СтруктураТаблиц Цикл
			НайденныеСтроки = СтруктураЭлемента[КлючИЗначение.Ключ];
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				СтруктураЭлемента[КлючИЗначение.Ключ].Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбойтиЗаполнитьАдресСтруктурыЭлементаДляНастройкиЯчеек(Строки, АдресСтруктурыЭлемента, КэшЭлементАдресВХранилище)
	
	Для Каждого Элемент из Строки.ПолучитьЭлементы() Цикл
		
		Если Не Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки
			И Не Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Тогда
			
			Если Не ЗначениеЗаполнено(Элемент.АдресСтруктурыЭлемента) Тогда
				Элемент.АдресСтруктурыЭлемента = 
						БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(Элемент, УникальныйИдентификатор);
			КонецЕсли;
			
			ДанныеНастроек = ПолучитьИзВременногоХранилища(АдресСтруктурыЭлемента);
		
			НайденныеСтроки = ДанныеНастроек.ЭлементыТаблицы.НайтиСтроки(Новый Структура("Строка", Элемент.ЭлементОтчета));
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				НайденнаяСтрока.Строка = Элемент.АдресСтруктурыЭлемента;
			КонецЦикла;
			НайденныеСтроки = ДанныеНастроек.ЭлементыТаблицы.НайтиСтроки(Новый Структура("Колонка", Элемент.ЭлементОтчета));
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				НайденнаяСтрока.Колонка = Элемент.АдресСтруктурыЭлемента;
			КонецЦикла;
			
			ПоместитьВоВременноеХранилище(ДанныеНастроек, АдресСтруктурыЭлемента);
			КэшЭлементАдресВХранилище.Вставить(Элемент.ЭлементОтчета, Элемент.АдресСтруктурыЭлемента);
			
		КонецЕсли;
		
		Если Не Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек Тогда
			ОбойтиЗаполнитьАдресСтруктурыЭлементаДляНастройкиЯчеек(Элемент, АдресСтруктурыЭлемента, КэшЭлементАдресВХранилище);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресСтруктурыПередНастройкойЯчеек(Идентификатор, АдресСтруктурыЭлемента, ДополнениеПараметров)
	
	Строка = ЭлементыОтчета.НайтиПоИдентификатору(Идентификатор);
	ТипТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная;
	Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(Строка, ТипТаблицы);
	ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная;
	Если Таблица = Неопределено Тогда
		ТипТаблицы 	= Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках;
		Таблица 	= ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(Строка, ТипТаблицы);
		ВидТаблицы 	= Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках;
	КонецЕсли;
	Если Таблица = Неопределено Тогда
		ТипТаблицы 	= Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках;
		Таблица 	= ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(Строка, ТипТаблицы);
		ВидТаблицы 	= Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках;
	КонецЕсли;
	
	Если ВидТаблицы <> Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная Тогда
		ДополнениеПараметров.Вставить("ПроверятьВидТаблицы", Истина);
		ДополнениеПараметров.Вставить("ВидТаблицы", ВидТаблицы);
	КонецЕсли;
	
	КэшЭлементАдресВХранилище = Новый Соответствие;
	ОбойтиЗаполнитьАдресСтруктурыЭлементаДляНастройкиЯчеек(Таблица, АдресСтруктурыЭлемента, КэшЭлементАдресВХранилище);
	
	ДанныеНастроек = ПолучитьИзВременногоХранилища(АдресСтруктурыЭлемента);
	Для Каждого ЭлементТаблицы из ДанныеНастроек.ЭлементыТаблицы Цикл
		
		Если ТипЗнч(ЭлементТаблицы.Элемент) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
			ЭлементТаблицы.Элемент = ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(ЭлементТаблицы.Элемент, УникальныйИдентификатор);
		КонецЕсли;
		Если ТипЗнч(ЭлементТаблицы.Строка) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
			ЭлементТаблицы.Строка = КэшЭлементАдресВХранилище[ЭлементТаблицы.Строка];
		КонецЕсли;
		Если ТипЗнч(ЭлементТаблицы.Колонка) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
			ЭлементТаблицы.Колонка = КэшЭлементАдресВХранилище[ЭлементТаблицы.Колонка];
		КонецЕсли;
		
		ДанныеЭлемента = ПолучитьИзВременногоХранилища(ЭлементТаблицы.Элемент);
		Для Каждого Операнд из ДанныеЭлемента.ОперандыФормулы Цикл
			Если Не ЗначениеЗаполнено(Операнд.АдресСтруктурыЭлемента) Тогда
				Операнд.АдресСтруктурыЭлемента = ФинансоваяОтчетностьВызовСервера.ПоместитьЭлементВХранилище(Операнд.Операнд, УникальныйИдентификатор);
			КонецЕсли;
			ДанныеОперанда = ПолучитьИзВременногоХранилища(Операнд.АдресСтруктурыЭлемента);
			Если ДанныеОперанда.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
				СсылкаНаЭлемент = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
																				ДанныеОперанда, 
																				"СтрокаЯчейки");
				Если ТипЗнч(СсылкаНаЭлемент) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
					ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
																	ДанныеОперанда,
																	"СтрокаЯчейки",
																	КэшЭлементАдресВХранилище[СсылкаНаЭлемент]);
				КонецЕсли;
				СсылкаНаЭлемент = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
																				ДанныеОперанда, 
																				"КолонкаЯчейки");
				Если ТипЗнч(СсылкаНаЭлемент) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
					ФинансоваяОтчетностьВызовСервера.УстановитьЗначениеДополнительногоРеквизита(
																	ДанныеОперанда,
																	"КолонкаЯчейки",
																	КэшЭлементАдресВХранилище[СсылкаНаЭлемент]);
				КонецЕсли;
				ПоместитьВоВременноеХранилище(ДанныеОперанда, Операнд.АдресСтруктурыЭлемента);
			КонецЕсли;
		КонецЦикла;
		ПоместитьВоВременноеХранилище(ДанныеЭлемента, ЭлементТаблицы.Элемент);
		
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы из ДанныеНастроек.ОформляемыеСтроки Цикл
		
		Если ТипЗнч(ЭлементТаблицы.ЭлементОтчета) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
			ЭлементТаблицы.ЭлементОтчета = КэшЭлементАдресВХранилище[ЭлементТаблицы.ЭлементОтчета];
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы из ДанныеНастроек.ОформляемыеКолонки Цикл
		
		Если ТипЗнч(ЭлементТаблицы.ЭлементОтчета) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
			ЭлементТаблицы.ЭлементОтчета = КэшЭлементАдресВХранилище[ЭлементТаблицы.ЭлементОтчета];
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементТаблицы из ДанныеНастроек.РасшифровкаПолейОтбораЭО Цикл
		
		Если ТипЗнч(ЭлементТаблицы.ЭлементОтчета) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
			ЭлементТаблицы.ЭлементОтчета = КэшЭлементАдресВХранилище[ЭлементТаблицы.ЭлементОтчета];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьДополнительныеПараметры(ТекущаяСтрока, Кэш = Неопределено)
	
	ИмяДополнительныхРежимов = "Перечисление.ДополнительныеРежимыЭлементовОтчетов.";
	Если ТекущаяСтрока.ВидЭлемента = ВидЭлемента("СтатьяБюджетов", Кэш) Тогда
		Если ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(
									ТекущаяСтрока, ВидЭлемента("ПоказательБюджетов", Кэш)) <> Неопределено Тогда
			
			Возврат ПредопределенноеЗначение(ИмяДополнительныхРежимов + "СтатьяВПоказателеБюджетов");
			
		ИначеЕсли ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(
									ТекущаяСтрока, ВидЭлемента("ВсеПоказателиБюджетов", Кэш)) <> Неопределено Тогда
			
			Возврат ПредопределенноеЗначение(ИмяДополнительныхРежимов + "СтатьяВПоказателеБюджетов");
			
		ИначеЕсли Объект.ИспользоватьДляВводаПлана Тогда
			
			Возврат ПредопределенноеЗначение(ИмяДополнительныхРежимов + "СтатьяБюджетовВРежимеВвода");
			
		КонецЕсли;
	ИначеЕсли ТекущаяСтрока.ВидЭлемента = ВидЭлемента("ВсеСтатьиБюджетов", Кэш) Тогда
		Если ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(
									ТекущаяСтрока, ВидЭлемента("ПоказательБюджетов", Кэш)) <> Неопределено Тогда
			
			Возврат ПредопределенноеЗначение(ИмяДополнительныхРежимов + "СтатьяВПоказателеБюджетов");
			
		ИначеЕсли ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(
									ТекущаяСтрока, ВидЭлемента("ВсеПоказателиБюджетов", Кэш)) <> Неопределено Тогда
			
			Возврат ПредопределенноеЗначение(ИмяДополнительныхРежимов + "СтатьяВПоказателеБюджетов");
			
		ИначеЕсли ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(
									ТекущаяСтрока, ВидЭлемента("ТаблицаСложная", Кэш)) <> Неопределено Тогда
			
			Возврат ПредопределенноеЗначение(ИмяДополнительныхРежимов + "ВсеСтатьиВСложнойТаблице");
			
		КонецЕсли;
	ИначеЕсли ТекущаяСтрока.ВидЭлемента = ВидЭлемента("ЭлементТаблицы", Кэш) Тогда
		Если Объект.ИспользоватьДляВводаПлана Тогда
			
			Возврат ПредопределенноеЗначение(ИмяДополнительныхРежимов + "ЭлементТаблицыВРежимеВвода");
			
		ИначеЕсли ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(
									ТекущаяСтрока, ВидЭлемента("ТаблицаСложная", Кэш)) <> Неопределено Тогда
			
			Возврат ПредопределенноеЗначение(ИмяДополнительныхРежимов + "ЭлементТаблицыВСложнойТаблице");
			
		КонецЕсли;
	ИначеЕсли ТекущаяСтрока.ВидЭлемента = ВидЭлемента("ВсеПоказателиБюджетов", Кэш) Тогда
		Если ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(
									ТекущаяСтрока, ВидЭлемента("ТаблицаСложная")) <> Неопределено Тогда
			
			Возврат ПредопределенноеЗначение(ИмяДополнительныхРежимов + "ВсеПоказателиВСложнойТаблице");
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РедактироватьЭлементОтчетаФрагмент(ТекущаяСтрока)
	
	Если ТекущаяСтрока.ВидЭлемента = ВидЭлемента("Колонки")
		ИЛИ ТекущаяСтрока.ВидЭлемента = ВидЭлемента("Строки")
		ИЛИ ТекущаяСтрока.ВидЭлемента = ВидЭлемента("ПустаяСсылка") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСтроки = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ТекущаяСтрока, ВидЭлемента("Колонки")) = Неопределено;
	Если ПустаяСтрока(ТекущаяСтрока.АдресСтруктурыЭлемента) Тогда
		ТекущаяСтрока.АдресСтруктурыЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(ТекущаяСтрока, УникальныйИдентификатор);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	
	Если ТекущаяСтрока.ВидЭлемента = ВидЭлемента("НастройкаЯчеек") Тогда
		ЗаполнитьАдресСтруктурыПередНастройкойЯчеек(ТекущаяСтрока.ПолучитьИдентификатор(), ТекущаяСтрока.АдресСтруктурыЭлемента, ПараметрыФормы);
	КонецЕсли;
	
	Если ТекущаяСтрока.ВидЭлемента = ВидЭлемента("ЗаголовокОтчета") Тогда
		АдресСпискаАналитик = ПоместитьСписокАналитикШапкиВХранилище(Объект.АналитикиШапки, УникальныйИдентификатор);
		ПараметрыФормы.Вставить("АдресСпискаАналитик", АдресСпискаАналитик);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИдентификаторСтрокиЭлементаОтчета",ТекущаяСтрока.ПолучитьИдентификатор());
	ПараметрыФормы.Вставить("Ключ", 							ТекущаяСтрока.ЭлементОтчета);
	ПараметрыФормы.Вставить("ВидЭлемента", 						ТекущаяСтрока.ВидЭлемента);
	ПараметрыФормы.Вставить("АдресЭлементаВХранилище", 			ТекущаяСтрока.АдресСтруктурыЭлемента);
	ПараметрыФормы.Вставить("ИдентификаторГлавногоХранилища", 	ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ЭлементыОтчета", 					ЭтаФорма.ЭлементыОтчета);
	ПараметрыФормы.Вставить("ИспользоватьДляВводаПлана", 		Объект.ИспользоватьДляВводаПлана);
	ПараметрыФормы.Вставить("ДополнительныйРежимФормы", 		ОпределитьДополнительныеПараметры(ТекущаяСтрока));
	ПараметрыФормы.Вставить("МодельБюджетирования", 			Объект.Владелец);
	ПараметрыФормы.Вставить("ВариантРасположенияГраницыФактическихДанных", Объект.ВариантРасположенияГраницыФактическихДанных);
	ПараметрыФормы.Вставить("ЭтоСтроки", 						ЭтоСтроки);
	ПараметрыФормы.Вставить("РедактируемыеЗначения", 			ПоместитьВоВременноеХранилище(
																	БюджетнаяОтчетностьКлиентСервер.МассивИменРедактируемыхЯчеек(
																								ЭлементыОтчета, ТекущаяСтрока.ПолучитьИдентификатор()), 
																																УникальныйИдентификатор));
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьСтрокуВидаБюджетаПослеИзменения", ЭтаФорма, ПараметрыФормы);
	ОткрытьФорму("Справочник.ЭлементыФинансовыхОтчетов.ФормаОбъекта", 
				ПараметрыФормы, ЭтаФорма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСгруппированногоЭлемента(ТекущаяСтрока, ДополнительныеПараметры) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = ТекущаяСтрока.Значение;
	РедактироватьЭлементОтчетаФрагмент(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЭлементОтчета()
	
	Если Элементы.ЭлементыОтчетаОтображение.ТолькоПросмотр Тогда
		ПоказатьПредупреждение(,НСтр("ru='Вид бюджета используется в документах и недоступен для редактирования';uk='Вид бюджету використовується у документах і недоступний для редагування'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаОтображение = Элементы.ЭлементыОтчетаОтображение.ТекущиеДанные;
	СписокВыбора = Новый СписокЗначений;
	СтрокаЭлементов = ОтражаемаяСтрока(ТекущаяСтрокаОтображение, ЭтаФорма);
	СписокВыбора.Добавить(СтрокаЭлементов, СтрокаЭлементов.НаименованиеДляПечати);
	Для Сч = 2 по Элементы.НаименованиеДляПечати.ПодчиненныеЭлементы.Количество() Цикл
		ИндексСтрокиЭлементовОтчета = ТекущаяСтрокаОтображение["ИндексСтрокиЭлементовОтчета" + Сч];
		Если ИндексСтрокиЭлементовОтчета <> Неопределено Тогда
			СтрокаЭлементов = ЭлементыОтчета.НайтиПоИдентификатору(ИндексСтрокиЭлементовОтчета);
			СписокВыбора.Добавить(СтрокаЭлементов, СтрокаЭлементов.НаименованиеДляПечати);
		КонецЕсли;
	КонецЦикла;
		
	Если СписокВыбора.Количество() = 1 Тогда
		ТекущаяСтрока = СписокВыбора[0].Значение;
		РедактироватьЭлементОтчетаФрагмент(ТекущаяСтрока);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореСгруппированногоЭлемента", ЭтаФорма);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, ТекущийЭлемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДополнительныеПоляЭлементаОтчета(Результат)
	
	ДополнительныеПоля = Результат.ДополнительныеПоля.Выгрузить();
	Возврат СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ДополнительныеПоля.ВыгрузитьКолонку("Наименование"), ", ");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСтрокуВидаБюджетаПослеИзменения(Результат, ДополнительныеПараметры) Экспорт
	
	БюджетнаяОтчетностьКлиентСервер.ЗаполнитьСтрокуСпискаЭлементовОтчета(
												Результат, 
												ДополнительныеПараметры.ИдентификаторСтрокиЭлементаОтчета, 
												ДополнительныеПараметры.АдресЭлементаВХранилище, 
												ЭлементыОтчета);
	
	Если Результат <> Неопределено Тогда
		
		ДополнительныеПоля = ДополнительныеПоляЭлементаОтчета(Результат);
		
		СтрокаОтражение = СтрокаОтражения(ДополнительныеПараметры.ИдентификаторСтрокиЭлементаОтчета, ЭтаФорма, Ложь);
		Если СтрокаОтражение <> Неопределено Тогда
			СтрокаЭлементаОтчета = ЭлементыОтчета.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтрокиЭлементаОтчета);
			ЗаполнитьЗначенияСвойств(СтрокаОтражение, СтрокаЭлементаОтчета);
			СтрокаОтражение.ПредставлениеДополнительныхПолей = ДополнительныеПоля;
		Иначе
			Для Сч = 2 По Элементы.НаименованиеДляПечати.ПодчиненныеЭлементы.Количество() Цикл
				СтрокаОтражение = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(
									ЭлементыОтчетаОтображение, "ИндексСтрокиЭлементовОтчета" + Сч, 
									ДополнительныеПараметры.ИдентификаторСтрокиЭлементаОтчета);
				Если СтрокаОтражение <> Неопределено Тогда
					СтрокаЭлементаОтчета = ЭлементыОтчета.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтрокиЭлементаОтчета);
					СтрокаОтражение["НаименованиеДляПечати" + Сч] = СтрокаЭлементаОтчета.НаименованиеДляПечати;
					СтрокаОтражение["ПредставлениеДополнительныхПолей" + Сч] = ДополнительныеПоля;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуФиксированнойАналитики(ЭлементыСтрок, ВидЭлемента, ТипИзмерения, Значение, Прочее, НайденныйЭлемент = Неопределено)
	
	Для Каждого Элемент из ЭлементыСтрок Цикл
		Если Элемент.ВидЭлемента = ВидЭлемента
			И Элемент.ЗначениеАналитики = Значение
			И Элемент.ЭтоАналитикаПрочее = Прочее
			И Элемент.СтатьяПоказательТипИзмерения = ТипИзмерения Тогда
			
			НайденныйЭлемент = Элемент;
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ВидЭлемента(ИмяВидаЭлемента, КэшЭлементов = Неопределено)
	
	Если КэшЭлементов = Неопределено Тогда
		КэшЭлементов = Новый Соответствие;
	КонецЕсли;
	
	Значение = КэшЭлементов[ИмяВидаЭлемента];
	Если Значение = Неопределено Тогда
		Значение = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета." + ИмяВидаЭлемента);
		КэшЭлементов.Вставить(ИмяВидаЭлемента, Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаКлиенте 
Процедура ПеренестиСтроку(Дерево, ИдентификаторЧто, ИдентификаторКуда = Неопределено, Копирование = Ложь, Кэш = Неопределено)
	
	ТекущаяСтрока = Дерево.НайтиПоИдентификатору(ИдентификаторЧто);
	
	Если ИдентификаторКуда = Неопределено Тогда
		НовыйРодитель = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(Дерево);
		НовыйРодительОтражение = СтрокаОтражения(НовыйРодитель, ЭтаФорма);
	Иначе
		НовыйРодитель = Дерево.НайтиПоИдентификатору(ИдентификаторКуда);
		//Строка отражение идентифицируется по первому элементу строки в случае группировки
		НовыйРодительОтражение = СтрокаОтражения(НовыйРодитель, ЭтаФорма);
		//а фактически строка будет подчиненна нижнему из сгруппированных элементов
		//таким образом для ЭлементыОтчетаОтражение будет применятся строка по первой строке группировки, 
		//а для переноса строка, нижней в группировке из ЭлементыОтчета
		НовыйРодитель = ПропуститьОтображаемыеВместе(НовыйРодитель);
	КонецЕсли;
	
	// Проверим, что элемент не переносится в подчиненный ему же элемент
	Родитель = НовыйРодитель.ПолучитьРодителя();
	Пока Родитель <> Неопределено Цикл
		Если Родитель = ТекущаяСтрока Тогда
			Возврат;
		КонецЕсли;
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
	Если Не МожноДобавитьВСтруктуруВидаБюджета(ТекущаяСтрока.ВидЭлемента, ИдентификаторКуда) Тогда
		Возврат;
	КонецЕсли;
	
	//при перетаскивании ветки группировок проверяем могут ли быть перенесены элементы в текущий контекст
	//для таблиц такая проверка не имеет смысла, т.к. перенос осуществляется всегда в корень
	Если ТекущаяСтрока.ВидЭлемента <> ВидЭлемента("ТаблицаПоказателиВКолонках")
		И ТекущаяСтрока.ВидЭлемента <> ВидЭлемента("ТаблицаПоказателиВСтроках")
		И ТекущаяСтрока.ВидЭлемента <> ВидЭлемента("ТаблицаСложная") Тогда
		
		Если ЕстьНедоступныеЭлементыПослеПереноса(ТекущаяСтрока, ИдентификаторКуда) Тогда
			Текст = НСтр("ru='Перенос отменен. В подчиненных элементах переносимой строки обнаружены недопустимые элементы';uk='Перенесення скасовано. У підпорядкованих елементах рядка, який переноситься, виявлені недопустимі елементи'");
			ПоказатьПредупреждение(, Текст, 60);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыСтрок = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(НовыйРодитель);
	ВсегоЭлементов = ЭлементыСтрок.Количество();
	Если ВсегоЭлементов Тогда
		ВернутьФормулуНаМесто = ЭлементыСтрок[ВсегоЭлементов - 1].ВидЭлемента = ВидЭлемента("ФормулаПоГруппе");
	КонецЕсли;
	
	ПараметрыСохраненияИдентификаторов = Новый Структура(
		"Режим, СоответствиеИдентификаторов, КоличествоИдентификаторов",
		"Запомнить", Новый Соответствие, Элементы.НаименованиеДляПечати.ПодчиненныеЭлементы.Количество());
	
	ФинансоваяОтчетностьКлиентСервер.УстановитьНовогоРодителя(ТекущаяСтрока, НовыйРодитель, , , 
											УникальныйИдентификатор, Копирование, ПараметрыСохраненияИдентификаторов);
	ТекущаяСтрокаОтражение = СтрокаОтражения(ТекущаяСтрока, ЭтаФорма);
	
	ПараметрыСохраненияИдентификаторов.Режим = "Восстановить";
	ФинансоваяОтчетностьКлиентСервер.УстановитьНовогоРодителя(ТекущаяСтрокаОтражение, НовыйРодительОтражение, , Ложь, 
																	, Копирование, ПараметрыСохраненияИдентификаторов);
	
	Модифицированность = Истина;
	НастроитьСтрокуВСоответствииСДополнительнымРежимомРекурсивно(НовыйРодитель, Кэш);
	
	Элементы.ЭлементыОтчетаОтображение.Развернуть(НовыйРодительОтражение.ПолучитьИдентификатор(), Истина);
	
	Если ВсегоЭлементов И ВернутьФормулуНаМесто Тогда
		Сдвиг = ЭлементыСтрок.Количество() - ВсегоЭлементов;
		ЭлементыСтрок.Сдвинуть(ВсегоЭлементов - 1, Сдвиг);
		ЭлементыСтрокОтражение = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(НовыйРодитель);
		ЭлементыСтрокОтражение.Сдвинуть(ВсегоЭлементов - 1, Сдвиг);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьНедоступныеЭлементыПослеПереноса(Родитель, ИдентификаторКуда)
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Для Каждого Элемент из ЭлементыРодителя Цикл
		
		Если Элемент.ВидЭлемента = ВидЭлемента("ФормулаПоГруппе") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не МожноДобавитьВСтруктуруВидаБюджета(Элемент.ВидЭлемента, ИдентификаторКуда) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ЕстьНедоступныеЭлементыПослеПереноса(Элемент, ИдентификаторКуда) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура НастроитьСтрокуВСоответствииСДополнительнымРежимомРекурсивно(Родитель, Кэш = Неопределено)
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Для Каждого Элемент из ЭлементыРодителя Цикл
		
		НастроитьСтрокуВСоответствииСДополнительнымРежимом(Элемент, Кэш);
		НастроитьСтрокуВСоответствииСДополнительнымРежимомРекурсивно(Элемент, Кэш);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьЭкземплярыБюджетов()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭкземплярБюджета.Ссылка
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|ГДЕ
	|	ЭкземплярБюджета.ВидБюджета = &ВидБюджета"
	);
	
	Запрос.УстановитьПараметр("ВидБюджета", Объект.Ссылка);
	
	ПустойРезультат = Запрос.Выполнить().Пустой();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не ПустойРезультат;
	
КонецФункции

&НаСервере
Процедура УправлениеФормой()
	
	Если Элементы.Владелец.ТолькоПросмотр Тогда
		БюджетИспользуется = ЕстьЭкземплярыБюджетов();
		Элементы.ЭлементыОтчетаОтображение.ТолькоПросмотр = БюджетИспользуется;
		Элементы.ИспользоватьДляВводаПлана.ТолькоПросмотр = БюджетИспользуется;
		Элементы.НастройкаВидаБюджета.ТолькоПросмотр = БюджетИспользуется;
		Элементы.АналитикиШапки.ТолькоПросмотр = БюджетИспользуется;
	Иначе
		Элементы.ЭлементыОтчетаОтображение.ТолькоПросмотр = Ложь;
		Элементы.ИспользоватьДляВводаПлана.ТолькоПросмотр = Ложь;
		Элементы.НастройкаВидаБюджета.ТолькоПросмотр = Ложь;
		Элементы.АналитикиШапки.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Элементы.НастройкаВидаБюджета.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	Элементы.АналитикиШапки.Доступность = Не ЭтаФорма.ТолькоПросмотр;
	
	Элементы.ФормаСоздатьЭкземплярБюджета.Видимость = Объект.ИспользоватьДляВводаПлана И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЭкземплярБюджета);
	
	Если Объект.СпособПланирования = Перечисления.СпособыСоставленияБюджетов.НаФиксированныйПериод Тогда
		НастройкаВидаБюджета = НСтр("ru='На фиксированный период %1';uk='На фіксований період %1'");
		НастройкаВидаБюджета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкаВидаБюджета, НРег(Объект.Периодичность));
	ИначеЕсли Объект.СпособПланирования = Перечисления.СпособыСоставленияБюджетов.Скользящий Тогда
		ЧислоПериодов = БюджетированиеКлиентСервер.ПериодЦифрамиПериодичностьПрописью(
											Объект.КоличествоПериодовСкользящегоБюджета, 
											Объект.Периодичность);
		НастройкаВидаБюджета = НСтр("ru='Скользящий бюджет на %1 вперед';uk='Ковзний бюджет на %1 вперед'");
		НастройкаВидаБюджета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкаВидаБюджета, ЧислоПериодов);
	КонецЕсли;
	
	НастройкаВидаБюджета = НастройкаВидаБюджета + "; ";
	
	Если Объект.ВариантРасположенияГраницыФактическихДанных = Перечисления.ВариантыРасположенияГраницыФактическиДанных.ВнутриПериодаБюджета Тогда
		НастройкаВидаБюджета = НастройкаВидаБюджета + " " + НСтр("ru='граница факт.данных внутри периода бюджета';uk='межа факт.даних у межах періоду бюджету'");
	ИначеЕсли Объект.ВариантРасположенияГраницыФактическихДанных = Перечисления.ВариантыРасположенияГраницыФактическиДанных.ДоНачалаСоставленияБюджета Тогда
		ЧислоПериодов = БюджетированиеКлиентСервер.ПериодЦифрамиПериодичностьПрописью(
											Объект.СмещениеГраницыФакта, 
											Объект.ПериодичностьГраницыФакта);
		НастройкаВидаБюджета = НастройкаВидаБюджета + НСтр("ru='составляется за %1 до начала периода планирования';uk='складається за %1 до початку періоду планування'");
		НастройкаВидаБюджета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НастройкаВидаБюджета, ЧислоПериодов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьВладельцаЭлемента(ВидАналитики, КудаДобавлять)
	
	Если ТипЗнч(ВидАналитики) <> Тип("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивТипов = ВидАналитики.ТипЗначения.Типы();
	
	Если МассивТипов.Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) <> Неопределено Тогда
		Возврат Новый Структура("Типы, Значение", 
						"СправочникСсылка.ЗначенияСвойствОбъектов",
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАналитики, "ДополнительноеСвойство"));
	КонецЕсли;
	
	СоответствиеВладельцев = ФинансоваяОтчетностьПовтИсп.СоответствиеОтборовПоВладельцу();
	
	АдресДобавления = ЭлементыОтчета.НайтиПоИдентификатору(КудаДобавлять);
	Пока АдресДобавления <> Неопределено Цикл
		
		ТипТекущегоЗначения = ТипЗнч(АдресДобавления.ЗначениеАналитики);
		Если АдресДобавления.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
			И ЗначениеЗаполнено(АдресДобавления.ЗначениеАналитики)
			И ТипТекущегоЗначения <> Тип("Строка") Тогда
			
			Если АдресДобавления.ЭтоАналитикаПрочее Тогда
				Продолжить;
			КонецЕсли;
			
			МассивОграниченийТипов = Новый Массив;
			Для Каждого Тип из МассивТипов Цикл
				
				ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
				Если Метаданные.Справочники.Найти(ОбъектМетаданных) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПереопределенныйВладелец = СоответствиеВладельцев[Тип];
				Если ПереопределенныйВладелец <> Неопределено
					И ПереопределенныйВладелец.Найти(ТипТекущегоЗначения, "Тип") <> Неопределено Тогда
					МассивОграниченийТипов.Добавить(Тип);
					Продолжить;
				КонецЕсли;
				
				Владельцы = ОбъектМетаданных.Владельцы;
				Если Владельцы.Содержит(Метаданные.НайтиПоТипу(ТипТекущегоЗначения)) Тогда
					МассивОграниченийТипов.Добавить(Тип);
				КонецЕсли;
				
			КонецЦикла;
			
			Если МассивОграниченийТипов.Количество() Тогда
				Возврат Новый Структура("Типы, Значение", МассивОграниченийТипов, АдресДобавления.ЗначениеАналитики);
			КонецЕсли;
			
		КонецЕсли;
			
		АдресДобавления = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(АдресДобавления);
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура УстановитьНадписьСпособПланирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ЗаполнитьЗначенияСвойств(Объект, Результат);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Функция СписокФлаговРазворота(РодительСтрок, СоответствиеУровней = Неопределено, Уровень = Неопределено)
	
	Если СоответствиеУровней = Неопределено Тогда
		СоответствиеУровней = Новый Соответствие;
	КонецЕсли;
	
	ЭлементыСтрок = РодительСтрок.ПолучитьЭлементы();
	Для Каждого СтрокаДерева из ЭлементыСтрок Цикл
		
		ТекущийИДУровня = ?(Уровень <> Неопределено, Уровень, "") + "|" + ЭлементыСтрок.Индекс(СтрокаДерева);
		Если Элементы.ЭлементыОтчетаОтображение.ВыделенныеСтроки.Найти(СтрокаДерева.ПолучитьИдентификатор()) <> Неопределено Тогда
			СоответствиеУровней.Вставить(ТекущийИДУровня, 2);
		Иначе
			Развернут = Элементы.ЭлементыОтчетаОтображение.Развернут(СтрокаДерева.ПолучитьИдентификатор());
			Если Развернут Тогда
				Развернут = 1;
			Иначе
				Развернут = 0;
			КонецЕсли;
			СоответствиеУровней.Вставить(ТекущийИДУровня, Развернут);
			СписокФлаговРазворота(СтрокаДерева, СоответствиеУровней, ТекущийИДУровня);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеУровней;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьРазвернутыеУзлыДерева(РодительСтрок, СоответствиеРазворота, Уровень = Неопределено)
	
	ЭлементыСтрок = РодительСтрок.ПолучитьЭлементы();
	Для Каждого СтрокаДерева из ЭлементыСтрок Цикл
		
		ТекущийИДУровня = ?(Уровень <> Неопределено, Уровень, "") + "|" + ЭлементыСтрок.Индекс(СтрокаДерева);
		ПризнакРазворота = СоответствиеРазворота[ТекущийИДУровня];
		Если ПризнакРазворота = 2 Тогда
			Элементы.ЭлементыОтчетаОтображение.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
			Продолжить;
		ИначеЕсли ПризнакРазворота = 1 Тогда
			Элементы.ЭлементыОтчетаОтображение.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Ложь);
		КонецЕсли;
		ВосстановитьРазвернутыеУзлыДерева(СтрокаДерева, СоответствиеРазворота, ТекущийИДУровня);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоОтображения()
	
	ЭлементыОтчетаОтображение.ПолучитьЭлементы().Очистить();
	РеквизитыКУдалению = Новый Массив;
	Для Каждого Реквизит из ЭтаФорма.ПолучитьРеквизиты("ЭлементыОтчетаОтображение") Цикл
		Индекс = СтрЗаменить(Реквизит.Имя, "НаименованиеДляПечати", "");
		Если СтрНайти(Реквизит.Имя, "НаименованиеДляПечати") и 
			Не ПустаяСтрока(Индекс) Тогда
			РеквизитыКУдалению.Добавить(Реквизит.Путь + "." + Реквизит.Имя);
			РеквизитыКУдалению.Добавить(Реквизит.Путь + ".ИндексСтрокиЭлементовОтчета" + Индекс);
			РеквизитыКУдалению.Добавить(Реквизит.Путь + ".ПредставлениеДополнительныхПолей" + Индекс);
		КонецЕсли;
	КонецЦикла;
	
	ГлубинаУровней = БюджетнаяОтчетностьРасчетКэшаСервер.РассчитатьГлубинуУровней(ЭлементыОтчета);
	
	ЭлементыНаименованияКУдалению = Новый Массив;
	Для Каждого Элемент из ЭтаФорма.Элементы.НаименованиеДляПечати.ПодчиненныеЭлементы Цикл
		Если Не ПустаяСтрока(СтрЗаменить(Элемент.Имя, "ЭлементыОтчетаОтображениеНаименованиеДляПечати", "")) Тогда
			ЭлементыНаименованияКУдалению.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент из ЭтаФорма.Элементы.ЭлементыОтчетаОтображениеДопИнформация.ПодчиненныеЭлементы Цикл
		Если СтрНайти(Элемент.Имя, "ЭлементыОтчетаОтображениеПредставлениеДополнительныхПолей") И
		Не ПустаяСтрока(СтрЗаменить(Элемент.Имя, "ЭлементыОтчетаОтображениеПредставлениеДополнительныхПолей", "")) Тогда
			ЭлементыНаименованияКУдалению.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент из ЭлементыНаименованияКУдалению Цикл
		ЭтаФорма.Элементы.Удалить(Элемент);
	КонецЦикла;
	
	РеквизитыКДобавлению = Новый Массив;
	ДопустимыеТипыИндекса = Новый Массив;
	ДопустимыеТипыИндекса.Добавить(Тип("Число"));
	ДопустимыеТипыИндекса.Добавить(Тип("Строка"));
	
	Для Сч = 2 по ГлубинаУровней Цикл
		Реквизит = Новый РеквизитФормы("НаименованиеДляПечати" + Сч, Новый ОписаниеТипов("Строка"), "ЭлементыОтчетаОтображение");
		РеквизитыКДобавлению.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ИндексСтрокиЭлементовОтчета" + Сч, Новый ОписаниеТипов(ДопустимыеТипыИндекса), "ЭлементыОтчетаОтображение");
		РеквизитыКДобавлению.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ПредставлениеДополнительныхПолей" + Сч, Новый ОписаниеТипов("Строка"), "ЭлементыОтчетаОтображение");
		РеквизитыКДобавлению.Добавить(Реквизит);
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(РеквизитыКДобавлению, РеквизитыКУдалению);
	
	Для Сч = 2 по ГлубинаУровней Цикл
		ПутьКДанным = "НаименованиеДляПечати" + Сч;
		ЭлементФормы = ЭтаФорма.Элементы.Добавить("ЭлементыОтчетаОтображение" + ПутьКДанным, 
												Тип("ПолеФормы"), Элементы.НаименованиеДляПечати);
		ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы.ПутьКДанным = "ЭлементыОтчетаОтображение." + ПутьКДанным;
		ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПутьКДанным = "ПредставлениеДополнительныхПолей" + Сч;
		ЭлементФормы = ЭтаФорма.Элементы.Добавить("ЭлементыОтчетаОтображение" + ПутьКДанным, 
												Тип("ПолеФормы"), Элементы.ЭлементыОтчетаОтображениеДопИнформация);
		ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы.ПутьКДанным = "ЭлементыОтчетаОтображение." + ПутьКДанным;
		ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КонецЦикла;
	
	ВывестиДеревоЭлементовВДеревоОтображения(ЭлементыОтчета, ЭлементыОтчетаОтображение, ГлубинаУровней);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтражаемаяСтрока(Строка, Форма)
	
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементыОтчета = Форма.ЭлементыОтчета;
	ЭлементыОтчетаОтображение = Форма.ЭлементыОтчетаОтображение;
	
	Если ТипЗнч(Строка) = Тип("Число") Тогда
		СтрокаТаблицы = ЭлементыОтчетаОтображение.НайтиПоИдентификатору(Строка);
	Иначе
		СтрокаТаблицы = Строка;
	КонецЕсли;
	
	Возврат ЭлементыОтчета.НайтиПоИдентификатору(СтрокаТаблицы.ИндексСтрокиЭлементовОтчета);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаОтражения(Знач Строка, Форма, ВключаяОбъединенные = Истина)
	
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Строка) = Тип("Число") Тогда
		Строка = Форма.ЭлементыОтчета.НайтиПоИдентификатору(Строка);
	КонецЕсли;
	
	Результат = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Форма.ЭлементыОтчетаОтображение, 
														"ИндексСтрокиЭлементовОтчета", Строка.ПолучитьИдентификатор());
	
	Если ВключаяОбъединенные Тогда
	
		Если Результат = Неопределено Тогда
			Для Сч = 2 по Форма.Элементы.НаименованиеДляПечати.ПодчиненныеЭлементы.Количество() Цикл
				Результат = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Форма.ЭлементыОтчетаОтображение, 
																"ИндексСтрокиЭлементовОтчета" + Сч, Строка.ПолучитьИдентификатор());
				Если Результат <> Неопределено Тогда
					Возврат Результат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуОтражение(ЭлементыДобавления, ИсточникЭлементОтчета, Форма)
	
	НоваяСтрокаОтражения = ЭлементыДобавления.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаОтражения, ИсточникЭлементОтчета);
	НоваяСтрокаОтражения.ИндексСтрокиЭлементовОтчета = ИсточникЭлементОтчета.ПолучитьИдентификатор();
	Для Сч = 2 по Форма.Элементы.НаименованиеДляПечати.ПодчиненныеЭлементы.Количество() Цикл
		НоваяСтрокаОтражения["ИндексСтрокиЭлементовОтчета" + Сч] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоместитьСписокАналитикШапкиВХранилище(Знач АналитикиШапки, УникальныйИдентификатор)
	
	Возврат ПоместитьВоВременноеХранилище(АналитикиШапки.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура АналитикиШапкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("АдресСпискаАналитик", 
						ПоместитьСписокАналитикШапкиВХранилище(Объект.АналитикиШапки, УникальныйИдентификатор));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеСпискаАналитик", ЭтаФорма);
	
	ОткрытьФорму("Справочник.ВидыБюджетов.Форма.АналитикиШапки", 
				ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеСпискаАналитик(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АналитикиШапки.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Объект.АналитикиШапки, Результат, "ВидАналитики");
	Модифицированность = Истина;
	РедактированиеСпискаАналитикНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РедактированиеСпискаАналитикНаСервере()
	
	УстановитьТекстАналитикВШапке();
	ОбновитьДеревоНовыхЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстАналитикВШапке()
	
	ТаблицаВидовАналитик = Объект.АналитикиШапки.Выгрузить();
	АналитикиШапки = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(
									ТаблицаВидовАналитик.ВыгрузитьКолонку("ВидАналитики"), ", ");
	Если ПустаяСтрока(АналитикиШапки) Тогда
		АналитикиШапки = НСтр("ru='<не указаны>';uk='<не вказано>'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьЭлемент(ТекущаяСтрока, Направление)
	
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	КоллекцияСтрок = Родитель.ПолучитьЭлементы();
	ИндексСтроки = КоллекцияСтрок.Индекс(ТекущаяСтрока);
	Если ИндексСтроки + Направление < 0 ИЛИ
		ИндексСтроки + Направление = КоллекцияСтрок.Количество() Тогда
		Возврат;
	КонецЕсли;
	КоллекцияСтрок.Сдвинуть(ИндексСтроки, Направление);
	
КонецПроцедуры

#КонецОбласти