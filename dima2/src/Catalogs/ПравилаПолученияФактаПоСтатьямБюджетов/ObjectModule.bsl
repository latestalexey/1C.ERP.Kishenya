#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий
 
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("ИсточникСуммыОперации");
	МассивНепроверяемыхРеквизитов.Добавить("ТипИтога");
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	НеЗаполненИсточникСуммыОперации = 
		РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет И Не ЗначениеЗаполнено(ИсточникСуммыОперации);
		
	НеЗаполненТипИтога = (РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет
						ИЛИ РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет)
						И Не ЗначениеЗаполнено(ТипИтога);
	
	Если НеЗаполненИсточникСуммыОперации Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Поле Источник суммы не заполнено';uk='Поле Джерело суми не заповнено'"), ,"ИсточникСуммыОперации", "Запись", Отказ);
	КонецЕсли;
	Если НеЗаполненТипИтога Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Поле Тип итога не заполнено';uk='Поле Тип підсумку не заповнено'"), ,"ТипИтога", "Запись", Отказ);
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА

Процедура СброситьКэшБюджетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка
		|ПОМЕСТИТЬ ЭлементыФинансовойОтчетности
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента
		|ГДЕ
		|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Реквизит = &Реквизит
		|	И ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение = &Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыБюджетов.Ссылка
		|ИЗ
		|	ЭлементыФинансовойОтчетности КАК ЭлементыФинансовойОтчетности
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыБюджетов КАК ВидыБюджетов
		|		ПО ЭлементыФинансовойОтчетности.Ссылка = ВидыБюджетов.Ссылка";
	
	Запрос.УстановитьПараметр("Значение", СтатьяБюджетов);
	Запрос.УстановитьПараметр("Реквизит", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.СтатьяБюджетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СтатусыОбработкиВидаБюджета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидБюджета.Установить(ВыборкаДетальныеЗаписи.Ссылка);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьДокументыДляОтражения(НачалоПериода = Неопределено, КонецПериода = Неопределено, ВидыДокументов)
	
	Если ВидыДокументов.Количество() = 1 И ВидыДокументов[0] = "" Тогда
		ВидыДокументов = Новый Массив;
		Для Каждого Документ из Метаданные.Документы Цикл
			ВидыДокументов.Добавить(Документ.Имя);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = "";
	Для Каждого ВидДокумента из ВидыДокументов Цикл
		Первый = ПустаяСтрока(ТекстЗапроса);
		ТекстЗапроса = ТекстЗапроса + ?(Первый, "", " ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ Ссылка КАК Документ, Дата КАК ПериодЗаписи, 
		|	""" + ВидДокумента + """ КАК ИмяВидаДокумента
		|	" + ?(Первый, "ПОМЕСТИТЬ ТаблицаДокументов", "") + "
		| ИЗ Документ." + ВидДокумента + "
		|";
		Если Метаданные.Документы[ВидДокумента].Проведение = 
				Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			ТекстЗапроса = ТекстЗапроса + "ГДЕ Проведен
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "ГДЕ НЕ ПометкаУдаления
			|";
		КонецЕсли;
		Если ЗначениеЗаполнено(НачалоПериода) Тогда
			ТекстЗапроса = ТекстЗапроса + " И Дата >= &НачалоПериода";
		КонецЕсли;
		Если ЗначениеЗаполнено(КонецПериода) Тогда
			ТекстЗапроса = ТекстЗапроса + " И Дата <= &КонецПериода";
		КонецЕсли;
	КонецЦикла;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКОтражениюВБюджетировании");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	ТекстЗапроса = ТекстЗапроса + ";
	| ВЫБРАТЬ * ИЗ ТаблицаДокументов";
	
	Ключ = "ОтражениеДокументовВБюджетировании";
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если АктивныеЗадания.Количество() = 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
		| ГДЕ НЕ Документ В (ВЫБРАТЬ РАЗЛИЧНЫЕ Документ ИЗ РегистрСведений.ЗаданияКОтражениюВБюджетировании)";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	ТекущийНомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
	
	НомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
	НомерЗадания = НомерЗадания + 1;
	Константы.НомерЗаданияКОтражениюВБюджетировании.Установить(НомерЗадания + 1);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить();
	ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", НомерЗадания);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЗадания.Установить(НомерЗадания);
	
	ТаблицаДокументов.Колонки.Добавить("НомерЗадания");
	ТаблицаДокументов.ЗаполнитьЗначения(НомерЗадания, "НомерЗадания");
	
	НаборЗаписей.Загрузить(ТаблицаДокументов);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

//-- НЕ УТКА

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Наименование = Строка(РазделИсточникаДанных) + ": " + ИсточникДанных;
	Если ЗначениеЗаполнено(КорСчет) Тогда
		Наименование = Наименование + ", " + КорСчет;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсточникСуммыОперации) Тогда
		Наименование = Наименование + ", " + ИсточникСуммыОперации;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипИтога) Тогда
		Наименование = Наименование + ", " + ТипИтога;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПредставлениеОтбора) Тогда
		Наименование = Наименование + ", " + ПредставлениеОтбора;
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ТипПравила <> Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные Тогда
		ПромежуточноеКэшированиеРезультатовРаботыПравил = Ложь;
	КонецЕсли;
	
	Если Не Ссылка.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ВидыДокументов = ФактическиеДанныеБюджетированияСервер.ОпределитьИменаВидовДокументовПоСКД(ЭтотОбъект).ВыгрузитьКолонку("ИмяВидаДокумента");
			
		РеквизитыСравнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
								"ПромежуточноеКэшированиеРезультатовРаботыПравил, ДействуетС, ДействуетПо");
								
		ИзмененФлагКэширования = РеквизитыСравнения.ПромежуточноеКэшированиеРезультатовРаботыПравил <> ПромежуточноеКэшированиеРезультатовРаботыПравил;
		
		НужноРегистрироватьДокументы = ИзмененФлагКэширования ИЛИ ПромежуточноеКэшированиеРезультатовРаботыПравил;
		
		Если НужноРегистрироватьДокументы Тогда
			
			СброситьКэшБюджетов();
			ЗарегистрироватьДокументыДляОтражения(ДействуетС, ДействуетПо, ВидыДокументов);
			
		КонецЕсли;
		
		Если НужноРегистрироватьДокументы Тогда
			
			Если РеквизитыСравнения.ДействуетС <> ДействуетС Тогда
				НачалоРегистрации = Мин(ДействуетС, РеквизитыСравнения.ДействуетС);
				КонецРегистрации = Макс(ДействуетС, РеквизитыСравнения.ДействуетС);
				ЗарегистрироватьДокументыДляОтражения(НачалоРегистрации, КонецРегистрации, ВидыДокументов);
			КонецЕсли;
			
			Если РеквизитыСравнения.ДействуетПо <> ДействуетПо Тогда
				НачалоРегистрации = Мин(ДействуетПо, РеквизитыСравнения.ДействуетПо);
				КонецРегистрации = Макс(ДействуетПо, РеквизитыСравнения.ДействуетПо);
				ЗарегистрироватьДокументыДляОтражения(НачалоРегистрации, КонецРегистрации, ВидыДокументов);
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	РегистрыСведений.КэшПримененияПравилПолученияФакта.СброситьКэш(Ссылка);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
