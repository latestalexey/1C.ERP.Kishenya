#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Не ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ИнициализироватьКомпоновщикСервер(Неопределено);
		Иначе
			Компоновщик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "КомпоновщикНастроек");
			ИнициализироватьКомпоновщикСервер(Компоновщик.Получить());
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьВидыАналитики();
	ЗаполнитьНастройкиЗаполненияАналитики();
	
	//++ НЕ УТКА
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Разделы = Элементы.РазделИсточникаДанных.СписокВыбора;
		РазделМеждународныйУчет = Разделы.НайтиПоЗначению(Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет);
		Если РазделМеждународныйУчет <> Неопределено Тогда
			Разделы.Удалить(РазделМеждународныйУчет);
		КонецЕсли;
	КонецЕсли;
	
	//-- НЕ УТКА
	
	ПредставлениеСтатьиБюджетов = Строка(Объект.СтатьяБюджетов);
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	УстановитьУсловноеОформление();
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ТекущийОбъект.ОборотПоАналитикеРасхода Тогда
		ТипОборотПоАналитике = 1;
	КонецЕсли;
	
	СохраненныйКомпоновщикНастроек = ТекущийОбъект.КомпоновщикНастроек.Получить();
	ИнициализироватьКомпоновщикСервер(СохраненныйКомпоновщикНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.КомпоновщикНастроек = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
	ТекущийОбъект.ПредставлениеОтбора = Строка(КомпоновщикНастроек.Настройки.Отбор);
	Если ТекущийОбъект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
		ТекущийОбъект.СхемаИсточникаДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	КонецЕсли;
	
	БюджетированиеСервер.ПоместитьНастройкиЗаполненияАналитикиВПравило(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	БюджетированиеСервер.ОбработкаПроверкиНастроекЗаполненияАналитики(НастройкиЗаполненияАналитики, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписаноПравилоПолученияФактаПоСтатьеБюджета");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИсточникДанныхПриИзменении(Элемент)
	
	ПриИзмененииИсточникаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ХранитьПромежуточныйКэшПриИзменении(Элемент)
	
	ПриИзмененииИсточникаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РазделИсточникаДанныхПриИзменении(Элемент)
	
	ПриИзмененииРазделаИсточникаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КорСчетПриИзменении(Элемент)
	
	ПриИзмененииИсточникаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотПоАналитикеПриИзменении(Элемент)
	
	Если ТипОборотПоАналитике = 0 Тогда
		Объект.ОборотПоАналитикеРасхода = Ложь;
	Иначе
		Объект.ОборотПоАналитикеРасхода = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяБюджетовПриИзменении(Элемент)
	
	ПриИзмененииСтатьиБюджетовСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаполненияАналитикиВыражениеЗаполненияАналитикиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.НастройкиЗаполненияАналитики.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидАналитики",               ТекущиеДанные.ВидАналитики);
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("РазделИсточникаДанных",      Объект.РазделИсточникаДанных);
	ПараметрыФормы.Вставить("ТекущееВыражение",           ТекущиеДанные.ВыражениеЗаполненияАналитики);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПоляЗаполненияАналитики", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаполненияАналитикиВыражениеЗаполненияАналитикиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.НастройкиЗаполненияАналитики.ТекущиеДанные;
	ТекущиеДанные.ВыражениеЗаполненияАналитики = ВыбранноеЗначение;
	
	ВыражениеЗаполненияАналитикиОбработкаВыбораСервер(ТекущиеДанные.ПолучитьИдентификатор());
	Модифицированность = Истина;
	Элементы.НастройкиЗаполненияАналитики.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаполненияАналитикиВыражениеЗаполненияАналитикиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗаполненияАналитикиПриАктивизацииСтроки(Элемент)
	
	ПараметрыВыбораФормы = Новый Массив;
	
	ТекущиеДанные = Элементы.НастройкиЗаполненияАналитики.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ДополнительноеСвойство) Тогда
		НовыйПараметрВыбора = Новый ПараметрВыбора("Отбор.Владелец", ТекущиеДанные.ДополнительноеСвойство);
		ПараметрыВыбораФормы.Добавить(НовыйПараметрВыбора);
	КонецЕсли;
	
	Элементы.НастройкиЗаполненияАналитикиЗначениеАналитики.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПравилаПриИзменении(Элемент)
	
	ТипПравилаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьСхемуПолученияДанных(Команда)
	
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru='Настройки схемы получения произвольных данных';uk='Настройки схеми отримання довільних даних'");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных",            АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("Заголовок",                             ЗаголовокФормыНастройкиСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",               УникальныйИдентификатор);
	ПараметрыФормы.Вставить("НеНастраиватьУсловноеОформление",       Истина);
	ПараметрыФормы.Вставить("НеНастраиватьПорядок",                  Истина);
	ПараметрыФормы.Вставить("НеНастраиватьОтбор",                    Истина);
	ПараметрыФормы.Вставить("НеНастраиватьВыбор",                    Истина);
	ПараметрыФормы.Вставить("НеПомещатьНастройкиВСхемуКомпоновкиДанных", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзмененитьСхемуКомпоновкиДанных", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных", 
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьРежимРасшиеннойНастройкиЗаполненияАналитики(Команда)
	
	ОтключитьРежимРасшиеннойНастройкиЗаполненияАналитикиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРежимРасширеннойНастройкиЗаполненияАналитик(Команда)
	
	ВключитьРежимРасширеннойНастройкиЗаполненияАналитикиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНастройкиАналитикиПоИсточникуДанных(Команда)
	
	ЗаполнитьНастройкиАналитикиПоИсточникуДанныхСервер();
	
КонецПроцедуры

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	БюджетированиеСервер.УстановитьУсловноеНастроекЗаполненияАналитики(УсловноеОформление);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененитьСхемуКомпоновкиДанных(Результат, Параметры) Экспорт
	
	Модифицированность = Истина;
	ИзмененаСхемаКомпоновкиДанныхСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыАналитики()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ВидАналитики1");
	Реквизиты.Вставить("ВидАналитики2");
	Реквизиты.Вставить("ВидАналитики3");
	Реквизиты.Вставить("ВидАналитики4");
	Реквизиты.Вставить("ВидАналитики5");
	Реквизиты.Вставить("ВидАналитики6");
	ВидыАналитики = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СтатьяБюджетов, Реквизиты);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ВидыАналитики);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ПравилоПоРеглУчету = 
		(Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет);
	ПравилоПоМеждународномуУчету = 
		(Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет);
	ПравилоПоОперативномуУчету = 
		(Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет);
	ПравилоПоПроизвольнымДанным = 
		(Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные);
	
	ОписаниеТиповИсточника = Новый ОписаниеТипов(Неопределено);
	ЗаголовокИсточника = НСтр("ru='Источник данных';uk='Джерело даних'");
	ПараметрыВыбораФормы = Новый Массив;
	Если ПравилоПоОперативномуУчету Тогда
		ОписаниеТиповИсточника = Новый ОписаниеТипов("СправочникСсылка.НастройкиХозяйственныхОпераций");
		ЗаголовокИсточника = НСтр("ru='Хозяйственная операция';uk='Господарська операція'");
		ПараметрыВыбораФормы.Добавить(Новый ПараметрВыбора("Отбор.ИспользоватьВБюджетировании", Истина));
	ИначеЕсли ПравилоПоРеглУчету Тогда
		ОписаниеТиповИсточника = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
		ЗаголовокИсточника = НСтр("ru='Счет учета';uk='Рахунок'");
	ИначеЕсли ПравилоПоМеждународномуУчету Тогда
		ОписаниеТиповИсточника = Новый ОписаниеТипов("ПланСчетовСсылка.Международный");
		ЗаголовокИсточника = НСтр("ru='Счет учета';uk='Рахунок'");
	ИначеЕсли ПравилоПоПроизвольнымДанным Тогда
		ОписаниеТиповИсточника = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
		Если ТипЗнч(Объект.ИсточникДанных) <> Тип("Строка") Тогда
			Объект.ИсточникДанных = Строка(Объект.СтатьяБюджетов);
		КонецЕсли;
	КонецЕсли;
	
	Объект.ИсточникДанных = ОписаниеТиповИсточника.ПривестиЗначение(Объект.ИсточникДанных);
	Объект.КорСчет = ОписаниеТиповИсточника.ПривестиЗначение(Объект.КорСчет);
	
	Элементы.ИсточникДанных.Заголовок = ЗаголовокИсточника;
	Элементы.ИсточникДанных.Видимость = ПравилоПоОперативномуУчету Или ПравилоПоРеглУчету Или ПравилоПоМеждународномуУчету;
	Элементы.ИсточникДанных.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораФормы);
	Элементы.ОписаниеПроизвольногоИсточникаДанных.Видимость = ПравилоПоПроизвольнымДанным;
	
	Элементы.КорСчет.Видимость = ПравилоПоРеглУчету Или ПравилоПоМеждународномуУчету;
	
	Элементы.ТипИтога.Видимость = ПравилоПоРеглУчету Или ПравилоПоМеждународномуУчету;
	Если ПравилоПоРеглУчету Или ПравилоПоМеждународномуУчету Тогда
		Элементы.ТипИтога.СписокВыбора.Очистить();
		Элементы.ТипИтога.СписокВыбора.Добавить(Перечисления.ТипыИтогов.Оборот);
		Если Объект.КорСчет <> Объект.ИсточникДанных Тогда
			Элементы.ТипИтога.СписокВыбора.Добавить(Перечисления.ТипыИтогов.ОборотДт);
			Элементы.ТипИтога.СписокВыбора.Добавить(Перечисления.ТипыИтогов.ОборотКт);
		Иначе
			Объект.ТипИтога = Перечисления.ТипыИтогов.Оборот;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ИсточникСуммыОперации.Видимость = ПравилоПоОперативномуУчету;
	Элементы.НастроитьСхемуПолученияДанных.Видимость = ПравилоПоПроизвольнымДанным;
	
	ЗаполнитьСписокВыбораИсточникСуммыОперации(ПравилоПоОперативномуУчету, Объект.ИсточникДанных);
	
	Элементы.ТипОборотПоАналитике.Видимость = 
		ВыбиратьТипОборотаПоАналитике(ПравилоПоОперативномуУчету, Объект.ИсточникДанных);
		
	Элементы.ДекорацияОтступКорСчет.Видимость = 
		ЗначениеЗаполнено(Объект.РазделИсточникаДанных) И 
		Объект.РазделИсточникаДанных <> Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные;
		
	Элементы.ВключитьРежимРасширеннойНастройкиЗаполненияАналитики.Видимость = Не Объект.РасширеныйРежимНастройкиЗаполненияАналитики;
	Элементы.ГруппаНастройкаЗаполненияАналитикиПояснение.Видимость = Не Объект.РасширеныйРежимНастройкиЗаполненияАналитики;
	
	Элементы.ОтключитьРежимРасшиеннойНастройкиЗаполненияАналитики.Видимость = Объект.РасширеныйРежимНастройкиЗаполненияАналитики;
	Элементы.НастройкиЗаполненияАналитики.Видимость = Объект.РасширеныйРежимНастройкиЗаполненияАналитики;
	
	Элементы.ГруппаНевыбранИсточник.Видимость = Не ЗначениеЗаполнено(Объект.РазделИсточникаДанных);
	
	Элементы.ХранитьПромежуточныйКэш.Видимость = Объект.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтатьиБюджетовСервер()
	
	РазделПроизвольныеДанные = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные;
	СтрокаСтатьяБюджетов = Строка(Объект.СтатьяБюджетов);
	Если Объект.РазделИсточникаДанных = РазделПроизвольныеДанные 
		И (Объект.ИсточникДанных = ПредставлениеСтатьиБюджетов Или Объект.ИсточникДанных = "") Тогда
		Объект.ИсточникДанных = СтрокаСтатьяБюджетов;
	КонецЕсли;
	ПредставлениеСтатьиБюджетов = СтрокаСтатьяБюджетов;
	
	ЗаполнитьВидыАналитики();
	ЗаполнитьНастройкиЗаполненияАналитики();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИсточникаСервер()
	
	НастроитьЭлементыФормы();
	
	Если Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные 
		И Объект.ИсточникДанных = "" Тогда
		Объект.ИсточникДанных = ПредставлениеСтатьиБюджетов;
	КонецЕсли;
	
	ПолучитьСхемуКомпоновкиДанных();
	ИнициализироватьКомпоновщикСервер(КомпоновщикНастроек.ПолучитьНастройки());
	БюджетированиеСервер.ПроверитьДоступностьПолейЗаполненияАналитики(ЭтаФорма, Объект, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРазделаИсточникаСервер()
	
	Раздел = Объект.РазделИсточникаДанных; 
	
	ПравилоПоОперативномуУчету = (Раздел = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет);
	ПравилоПоРеглУчету = (Раздел = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет);
	ПравилоПоМеждународномуУчету = (Раздел = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет);
	
	Если Не ПравилоПоОперативномуУчету Тогда
		Объект.ИсточникСуммыОперации = Неопределено;
	ИначеЕсли Не ПравилоПоРеглУчету И Не ПравилоПоМеждународномуУчету Тогда 
		Объект.ТипИтога = Неопределено;
	КонецЕсли;
	
	 ПриИзмененииИсточникаСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСхемуКомпоновкиДанных()
	
	МенеджерЗаписи = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов"));
	СхемаКомпоновкиДанных = Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.СхемаПолученияДанных(МенеджерЗаписи);
	БюджетированиеСервер.УстановитьСвойстваПолейДляНастройкиПравила(СхемаКомпоновкиДанных, Объект); 
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикСервер(НастройкаКомпоновки)
	
	Если Не ЗначениеЗаполнено(Объект.РазделИсточникаДанных) Или Не ЗначениеЗаполнено(Объект.ИсточникДанных) Тогда
		КомпоновщикНастроек.Инициализировать(Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресСхемыКомпоновкиДанных) Тогда
		ПолучитьСхемуКомпоновкиДанных();
	КонецЕсли;

	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	Если НастройкаКомпоновки = Неопределено Тогда
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаКомпоновки);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораИсточникСуммыОперации(ПравилоПоОперативномуУчету, ИсточникДанных)
	
	Элементы.ИсточникСуммыОперации.СписокВыбора.Очистить();
	
	Если Не ПравилоПоОперативномуУчету Или Не ЗначениеЗаполнено(ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиОперации.Показатель КАК Показатель,
	|	ПРЕДСТАВЛЕНИЕ(ПоказателиОперации.Показатель) КАК Представление
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций.ПоказателиРегистра КАК ПоказателиОперации
	|ГДЕ
	|	ПоказателиОперации.Ссылка = &Операция
	|	И ПоказателиОперации.Использование = ИСТИНА";
	Запрос.УстановитьПараметр("Операция", Объект.ИсточникДанных);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Элементы.ИсточникСуммыОперации.СписокВыбора.Добавить(Выборка.Показатель, Выборка.Представление);
	КонецЦикла;
	
	Если Элементы.ИсточникСуммыОперации.СписокВыбора.Количество() = 1 Тогда
		Объект.ИсточникСуммыОперации = Элементы.ИсточникСуммыОперации.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзмененаСхемаКомпоновкиДанныхСервер()
	
	Модифицированность = Истина;
	ИнициализироватьКомпоновщикСервер(КомпоновщикНастроек.ПолучитьНастройки());
	БюджетированиеСервер.ПроверитьДоступностьПолейЗаполненияАналитики(ЭтаФорма, Объект, Истина);
	
КонецПроцедуры

&НаСервере
Функция ВыбиратьТипОборотаПоАналитике(ПравилоПоОперативномуУчету, ИсточникДанных)
	
	Результат = Ложь;
	
	Если Не ПравилоПоОперативномуУчету Или Не ЗначениеЗаполнено(ИсточникДанных) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИмяРегистраИсточника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИсточникДанных, "ИсточникДанных");
	Результат = (ИмяРегистраИсточника = "ДвиженияНоменклатураНоменклатура");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВключитьРежимРасширеннойНастройкиЗаполненияАналитикиСервер()
	
	Объект.РасширеныйРежимНастройкиЗаполненияАналитики = Истина;
	ЗаполнитьНастройкиЗаполненияАналитики();
	БюджетированиеСервер.УстановитьНастройкиЗаполненияАналитикиАвтоматически(ЭтаФорма);
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьРежимРасшиеннойНастройкиЗаполненияАналитикиСервер()
	
	Объект.РасширеныйРежимНастройкиЗаполненияАналитики = Ложь;
	ЗаполнитьНастройкиЗаполненияАналитики();
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиЗаполненияАналитики()
	
	ВидыАналитик = Новый Структура;
	Для НомерАналитики = 1 По 6 Цикл
		ВидыАналитик.Вставить("ВидАналитики" + НомерАналитики, ЭтаФорма["ВидАналитики" + НомерАналитики]);
	КонецЦикла;
	БюджетированиеСервер.ЗаполнитьНастройкиЗаполненияАналитикиПоПравилу(ЭтаФорма, Объект, ВидыАналитик);
	БюджетированиеСервер.ПроверитьДоступностьПолейЗаполненияАналитики(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиАналитикиПоИсточникуДанныхСервер()
	
	БюджетированиеСервер.УстановитьНастройкиЗаполненияАналитикиАвтоматически(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВыражениеЗаполненияАналитикиОбработкаВыбораСервер(ИдентификаторСтроки) 
	
	БюджетированиеСервер.ПроверитьВыражениеЗаполненияАналитикиПослеВыбора(ЭтаФорма, ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ТипПравилаПриИзмененииНаСервере()
	
	Если Объект.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета Тогда
		Объект.ПромежуточноеКэшированиеРезультатовРаботыПравил = Ложь;
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры


#КонецОбласти