
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоОрганизации", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("ОтборОрганизация", Неопределено);
	
	ПоказатьСведения = Ложь;
	ЗаполнитьСвойстваЭлементовСведений();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, "ФормаСписка");
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПоказатьСведения = Настройки.Получить("ПоказатьСведения");
	ЗаполнитьСвойстваЭлементовСведений();
	
	ОтборСостояние = Настройки.Получить("ОтборСостояние");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Состояние",
		ОтборСостояние,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборСостояние));
	
	ОтборОрганизация = Настройки.Получить("ОтборОрганизация");
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоОрганизации", ЗначениеЗаполнено(ОтборОрганизация));
	Список.Параметры.УстановитьЗначениеПараметра("ОтборОрганизация", ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборОрганизация));
	
	ОтборПодразделение = Настройки.Получить("ОтборПодразделение");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Подразделение",
		ОтборПодразделение,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборПодразделение));
	
	ОтборМОЛ = Настройки.Получить("ОтборМОЛ");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"МОЛ",
		ОтборМОЛ,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборМОЛ));
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Состояние",
		ОтборСостояние,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборСостояние));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоОрганизации", ЗначениеЗаполнено(ОтборОрганизация));
	Список.Параметры.УстановитьЗначениеПараметра("ОтборОрганизация", ОтборОрганизация);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборОрганизация));
	
	ЗаполнитьСведения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Подразделение",
		ОтборПодразделение,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборПодразделение));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМОЛПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"МОЛ",
		ОтборМОЛ,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборМОЛ));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ЗаполнитьСведения", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сведения(Команда)
	
	ПоказатьСведения = Не ПоказатьСведения;
	Элементы.ГруппаСведения.Видимость = ПоказатьСведения;
	
	Если ПоказатьСведения Тогда
		Элементы.КнопкаСведения.Заголовок = НСтр("ru='Скрыть сведения';uk='Приховати відомості'");
	Иначе
		Элементы.КнопкаСведения.Заголовок = НСтр("ru='Показать сведения';uk='Показати відомості'");
	КонецЕсли;
	
КонецПроцедуры

#Область СтандатрныеПодсистемы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСвойстваЭлементовСведений()
	
	Элементы.ГруппаСведения.Видимость = ПоказатьСведения;
	Если ПоказатьСведения Тогда
		Элементы.КнопкаСведения.Заголовок = НСтр("ru='Скрыть сведения';uk='Приховати відомості'");
	Иначе
		Элементы.КнопкаСведения.Заголовок = НСтр("ru='Показать сведения';uk='Показати відомості'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СведенияТаблицаСуммСуммаБУ1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СведенияТаблицаСумм.Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='БУ';uk='БО'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СведенияТаблицаСуммСуммаНУ1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СведенияТаблицаСумм.Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='НУ';uk='ПО'"));
	
	//
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведения()
	
	Если ПоказатьСведения Тогда
		
		СведенияТаблицаСумм.Очистить();
		Если Элементы.Список.ВыделенныеСтроки.Количество() <> 0 Тогда
			Массив = ПолучитьСведения(Элементы.Список.ТекущаяСтрока, ОтборОрганизация);
			Для Каждого Эл Из Массив Цикл
				ЗаполнитьЗначенияСвойств(СведенияТаблицаСумм.Добавить(), Эл);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСведения(ВнеоборотныйАктив, ОтборОрганизация)
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("СтоимостьБУ", 0);
	ЗначенияПоУмолчанию.Вставить("СтоимостьНУ", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияБУ", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияНУ", 0);
	ЗначенияПоУмолчанию.Вставить("НачислениеИзноса", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(ОтборОрганизация));
	Запрос.УстановитьПараметр("ОтборОрганизация", ОтборОрганизация);
	Запрос.УстановитьПараметр("ВнеоборотныйАктив", ВнеоборотныйАктив);
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ПервоначальныеСведения.ОсновноеСредство КАК ОбъектУчета,
	|	СчетаОтражения.СчетУчета КАК СчетУчета,
	|	СчетаОтражения.СчетНачисленияАмортизации КАК СчетАмортизации,
	|	ЕСТЬNULL(ПараметрыЦелевогоФинансирования.ПрименениеЦелевогоФинансирования, ЛОЖЬ) КАК ПрименениеЦелевогоФинансирования,
	|	ПараметрыЦелевогоФинансирования.СчетУчета КАК СчетУчетаЦФ,
	|	ПараметрыЦелевогоФинансирования.СчетАмортизации КАК СчетАмортизацииЦФ,
	|	ЛОЖЬ КАК НачислениеИзноса
	|ПОМЕСТИТЬ втАктивыИСчетаУчета
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(, ОсновноеСредство = &ВнеоборотныйАктив) КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|				,
	|				ОсновноеСредство = &ВнеоборотныйАктив
	|					И (НЕ &ОтборПООрганизации
	|						ИЛИ Организация = &ОтборОрганизация)) КАК СчетаОтражения
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СчетаОтражения.ОсновноеСредство
	|			И (ВЫБОР
	|				КОГДА &ОтборПООрганизации
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ПервоначальныеСведения.Организация = СчетаОтражения.Организация
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЦелевогоФинансированияОС.СрезПоследних(, ОсновноеСредство = &ВнеоборотныйАктив) КАК ПараметрыЦелевогоФинансирования
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ПараметрыЦелевогоФинансирования.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетУчета КАК Счет
	|ПОМЕСТИТЬ втСчетаОстатков
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетАмортизации
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетУчетаЦФ
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|ГДЕ
	|	АктивыИСчетаУчета.ПрименениеЦелевогоФинансирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетАмортизацииЦФ
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|ГДЕ
	|	АктивыИСчетаУчета.ПрименениеЦелевогоФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОбъектУчета,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ,
	|	0 КАК СуммаПР,
	|	0 КАК СуммаВР
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Т.Счет
	|				ИЗ
	|					втСчетаОстатков КАК Т),
	|			&ВидСубконтоОС,
	|			Субконто1 В (&ВнеоборотныйАктив)
	|				И (НЕ &ОтборПООрганизации
	|					ИЛИ Организация = &ОтборОрганизация)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Стоимость.СуммаБУ, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаБУ, 0) КАК СтоимостьБУ,
	|	ЕСТЬNULL(Стоимость.СуммаНУ, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаНУ, 0) КАК СтоимостьНУ,
	|	0 КАК СтоимостьПР,
	|	0 КАК СтоимостьВР,
	|	ЕСТЬNULL(-Амортизация.СуммаБУ, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаБУ, 0) КАК АмортизацияБУ,
	|	ЕСТЬNULL(-Амортизация.СуммаНУ, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаНУ, 0) КАК АмортизацияНУ,
	|	втАктивыИСчетаУчета.НачислениеИзноса КАК НачислениеИзноса
	|ИЗ
	|	втАктивыИСчетаУчета КАК втАктивыИСчетаУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК Стоимость
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = Стоимость.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетУчета = Стоимость.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК Амортизация
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = Амортизация.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетАмортизации = Амортизация.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК СтоимостьЦФ
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = СтоимостьЦФ.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетУчетаЦФ = СтоимостьЦФ.Счет
	|			И втАктивыИСчетаУчета.ПрименениеЦелевогоФинансирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК АмортизацияЦФ
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = АмортизацияЦФ.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетАмортизацииЦФ = АмортизацияЦФ.Счет
	|			И втАктивыИСчетаУчета.ПрименениеЦелевогоФинансирования";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЗначенияПоУмолчанию, Выборка);
	КонецЕсли;
	
	ЗаголовокВалюты = Строка(Константы.ВалютаРегламентированногоУчета.Получить());
	
	Поля = "Представление, СуммаБУ, СуммаНУ";
	
	Массив = Новый Массив;
	
	Строка = Новый Структура(Поля);
	Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Первоначальная стоимость (%1):';uk='Первісна вартість (%1):'"), ЗаголовокВалюты);
	Строка.СуммаБУ = ЗначенияПоУмолчанию.СтоимостьБУ;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.СтоимостьНУ;
	Массив.Добавить(Строка);
	
	ЗаголовокАмортизации = НСтр("ru='Накопленная амортизация (%1):';uk='Накопичена амортизація (%1):'");
	МножительАмортизации = 1;
	Если ЗначенияПоУмолчанию.НачислениеИзноса Тогда
		ЗаголовокАмортизации = НСтр("ru='Накопленный износ (%1):';uk='Накопичений знос (%1):'");
		МножительАмортизации = -1;
	КонецЕсли;
	
	Строка = Новый Структура(Поля);
	Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокАмортизации, ЗаголовокВалюты);
	Строка.СуммаБУ = ЗначенияПоУмолчанию.АмортизацияБУ * МножительАмортизации;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.АмортизацияНУ * МножительАмортизации;
	Массив.Добавить(Строка);
	
	Если Не ЗначенияПоУмолчанию.НачислениеИзноса Тогда
		
		Строка = Новый Структура(Поля);
		Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Остаточная стоимость (%1):';uk='Залишкова вартість (%1):'"), ЗаголовокВалюты);
		Строка.СуммаБУ = ЗначенияПоУмолчанию.СтоимостьБУ-ЗначенияПоУмолчанию.АмортизацияБУ;
		Строка.СуммаНУ = ЗначенияПоУмолчанию.СтоимостьНУ-ЗначенияПоУмолчанию.АмортизацияНУ;
		Массив.Добавить(Строка);
		
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти