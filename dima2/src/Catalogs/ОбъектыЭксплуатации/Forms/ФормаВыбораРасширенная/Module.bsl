
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СписокОбъектовЭксплуатации = Новый СписокЗначений;
	
	ЗаполнитьСписокДоступныхДляВыбораОбъектов(СписокОбъектовЭксплуатации);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Ссылка",
		СписокОбъектовЭксплуатации,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма, "ФормаСписка");
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандатрныеПодсистемы

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокДоступныхДляВыбораОбъектов(СписокОбъектовЭксплуатации)
	
	ИспользоватьУправлениеРемонтами = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(
		"РегистрацияНаработки",
		Параметры.Свойство("РегистрацияНаработки") И Параметры.РегистрацияНаработки);
	Запрос.УстановитьПараметр(
		"УстановкаНаработки",
		Параметры.Свойство("УстановкаНаработки") И Параметры.УстановкаНаработки);
	Запрос.УстановитьПараметр(
		"ИсточникПоказателяНаработки",
		Параметры.Свойство("ИсточникПоказателяНаработки") И Параметры.ИсточникПоказателяНаработки);
	Запрос.УстановитьПараметр(
		"ПоказательНаработки",
		?(Параметры.Свойство("ПоказательНаработки"), Параметры.ПоказательНаработки, Неопределено));
	Запрос.УстановитьПараметр(
		"ПотребительНаработки",
		?(Параметры.Свойство("ПотребительНаработки"), Параметры.ПотребительНаработки, Неопределено));
	
	//++ НЕ УТКА
	Если ИспользоватьУправлениеРемонтами Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПараметрыПоказателейКласса.Ссылка
		|ПОМЕСТИТЬ Классы
		|ИЗ
		|	Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК ПараметрыПоказателейКласса
		|ГДЕ
		|	НЕ ПараметрыПоказателейКласса.Ссылка.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА &РегистрацияНаработки
		|				ТОГДА НЕ ПараметрыПоказателейКласса.РегистрироватьОтИсточника
		|			КОГДА &УстановкаНаработки
		|				ТОГДА ИСТИНА
		|			КОГДА &ИсточникПоказателяНаработки
		|				ТОГДА ПараметрыПоказателейКласса.ПоказательНаработки = &ПоказательНаработки
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыЭксплуатации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка <> &ПотребительНаработки
		|	И ОбъектыЭксплуатации.Класс В
		|			(ВЫБРАТЬ
		|				Классы.Ссылка
		|			ИЗ
		|				Классы КАК Классы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбъектыЭксплуатации.Ссылка
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|ГДЕ
		|	НЕ &ИсточникПоказателяНаработки
		|	И ОбъектыЭксплуатации.Ссылка <> &ПотребительНаработки
		|	И ОбъектыЭксплуатации.Ссылка В
		|			(ВЫБРАТЬ
		|				Узлы.Владелец
		|			ИЗ
		|				Справочник.УзлыОбъектовЭксплуатации КАК Узлы
		|			ГДЕ
		|				Узлы.Класс В
		|					(ВЫБРАТЬ
		|						Классы.Ссылка
		|					ИЗ
		|						Классы КАК Классы))";
		
	Иначе
	//-- НЕ УТКА
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СрезСведенияОС.ОсновноеСредство КАК Ссылка
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(,
		|		&РегистрацияНаработки
		|		И СпособНачисленияАмортизации В (
		|			ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции)
		|		)
		|	) КАК СрезСведенияОС";
		
	//++ НЕ УТКА
	КонецЕсли;
	//-- НЕ УТКА
	
	СписокОбъектовЭксплуатации.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

#КонецОбласти
