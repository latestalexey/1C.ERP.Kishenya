//++ НЕ УТКА
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает описание реквизитов объекта эксплуатации
//
// Возвращаемое значение:
//		ТаблицаЗначений - Таблица с описанием реквизитов элемонта справочника объектов эксплуатации
//
Функция СоставРеквизитов() Экспорт
	
	// Описание формата возвращаемой таблицы реквизитов
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОбязателенДляЗаполнения", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ТолькоПросмотрОбязательности", Новый ОписаниеТипов("Булево"));
	
	// Значения заполняемые по-умолчанию в строку каждого из реквизитов
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("Имя", "");
	ЗначенияПоУмолчанию.Вставить("Синоним", "");
	ЗначенияПоУмолчанию.Вставить("ОбязателенДляЗаполнения", "Ложь");
	ЗначенияПоУмолчанию.Вставить("ТолькоПросмотрОбязательности", "Ложь");
	
	// Описания реквизитов, со значениями параметров отличающихся от "по-умолчанию"
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ДатаСведений", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Статус", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Класс", Новый Структура("ТолькоПросмотрОбязательности", Истина));
	СтруктураРеквизитов.Вставить("Подкласс", Новый Структура("ОбязателенДляЗаполнения, ТолькоПросмотрОбязательности", Ложь, Истина));
	
	// Список реквизитов, которые должны быть исключены: служебные, не используемые, предназначенные для удаления, булевы признаки
	// 		или любые другие не предназначенные для интерактивной настройки пользователем
	СтопЛист = Новый Структура(
		"ГруппаОСМеждународныйУчет,
		|Комментарий,
		|ОбъектБытовогоНазначения,
		|Удалить_АдресМестонахождения,
		|Удалить_ГруппаОС,
		|Удалить_КодПоОКОФ,
		|Удалить_ШифрПоЕНАОФ,
		|Удалить_КадастровыйНомер,
		|Удалить_АмортизационнаяГруппа,
		|Удалить_Помещение,
		|Удалить_КадастровыйНомер,
		|Удалить_КодРегиона");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		СтопЛист.Удалить("ГруппаОСМеждународныйУчет");
	КонецЕсли;
	
	// Получение таблицы реквизитов из описания метаданных
	СтруктураСправочника = Метаданные.Справочники.ОбъектыЭксплуатации;
	Для Каждого Реквизит Из СтруктураСправочника.Реквизиты Цикл
		
		Если СтопЛист.Свойство(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРеквизита = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ЗначенияПоУмолчанию);
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, Реквизит);
		
		СтрокаРеквизита.ОбязателенДляЗаполнения = (Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
		
		Если СтруктураРеквизитов.Свойство(Реквизит.Имя) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРеквизита, СтруктураРеквизитов[Реквизит.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Возвращает структуру по-умолчанию передаваемую в качестве параметра в процедуру проверки "ПроверитьЗаполнение"
//
Функция ПараметрыПроверкиЗаполнения() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ПотокОшибок", Новый Структура);
	ОбъектыЭксплуатации.ИнициализироватьПотокОшибок(Параметры.ПотокОшибок);
	
	Параметры.Вставить("СообщатьОшибки", Истина);
	Параметры.Вставить("Форма", Неопределено);
	
	Параметры.Вставить("ИспользоватьУзлыОбъектовЭксплуатации", ПолучитьФункциональнуюОпцию("ИспользоватьУзлыОбъектовЭксплуатации"));
	
	Параметры.Вставить("ПроверятьУзлы", Истина);
	Параметры.Вставить("ПараметрыПроверкиУзлов", Справочники.УзлыОбъектовЭксплуатации.ПараметрыПроверкиЗаполнения());
	Параметры.ПараметрыПроверкиУзлов.Вставить("СообщатьОшибки", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Выполяет проверку заполения переданного объекта проверки по заданным параметрам
//
// Параметры:
// 		ОбъектПроверки - ДанныеФормыСтруктура, СправочникОбъект.ОбъектыЭксплуатации, СправочникСсылка.ОбъектыЭксплуатации, Массив
// 			- Объект, ссылка или массив ссылок на объекты эскплуатации, которые необходимо проверить на корректность заполнения
// 		ПараметрыПроверки - Сткрутра - Структура с описанием параметров проверки заполения, состав полей описан в функции "ПараметрыПроверкиЗаполнения"
// 		Отказ - Булево - Возвращаемый параметр, признак наличия ошибок при проверки
//
Процедура ПроверитьЗаполнение(ОбъектПроверки, ПараметрыПроверки, Отказ=Ложь) Экспорт
	
	КэшированныеЗначения = Неопределено;
	ОбъектыЭксплуатации.ИнициализироватьКэшированныеЗначенияПроверкиЗаполнения(КэшированныеЗначения);
	
	ТипОбъекта = ТипЗнч(ОбъектПроверки);
	
	МассивОбъектовЭксплуатации = Новый Массив;
	
	Если ТипОбъекта = Тип("СправочникСсылка.ОбъектыЭксплуатации")
		Или ТипОбъекта = Тип("Массив") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектыЭксплуатации", ОбъектПроверки);
		СформироватьЗапросПроверкиЗаполнения(Запрос.Текст);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПроверитьОбъектЭксплуатации(
				Выборка,
				ПараметрыПроверки,
				КэшированныеЗначения);
			
			МассивОбъектовЭксплуатации.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	Иначе
		
		ПроверитьОбъектЭксплуатации(
			ОбъектПроверки,
			ПараметрыПроверки,
			КэшированныеЗначения);
		
		МассивОбъектовЭксплуатации.Добавить(ОбъектПроверки.Ссылка);
		
	КонецЕсли;
	
	ПараметрыПроверки.Вставить("ОтказПроверкиУзлов", Ложь);
	
	Если ПараметрыПроверки.ИспользоватьУзлыОбъектовЭксплуатации
		И ПараметрыПроверки.ПроверятьУзлы Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектыЭксплуатации", МассивОбъектовЭксплуатации);
		СформироватьЗапросПроверкиЗаполненияУзлов(Запрос.Текст);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Справочники.УзлыОбъектовЭксплуатации.ПроверитьЗаполнение(
					Выборка,
					ПараметрыПроверки.ПараметрыПроверкиУзлов,
					ПараметрыПроверки.ОтказПроверкиУзлов, // Отказ
					КэшированныеЗначения);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПроверки.ПотокОшибок.СписокОшибок.Количество() <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ПараметрыПроверки.ПараметрыПроверкиУзлов.ПотокОшибок.СписокОшибок.Количество() <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ПараметрыПроверки.СообщатьОшибки Тогда
		ОбъектыЭксплуатации.СообщитьОшибкиПроверкиЗаполнения(ПараметрыПроверки.ПотокОшибок, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Выполяет разблокировку объекта эксплуатации для разрешения возможности интерактивного редактирования
//
// Параметры:
// 		ОбъектЭксплуатации - СправочникСсылка.ОбъектЭксплуатации - Ссылка на элемент справочника
// 		Отказ - Булево - Возвращаемый параметр, признак наличия ошибок во время выполнения
//
Процедура РазблокироватьОбъектЭксплуатации(ОбъектЭксплуатации, Отказ=Ложь) Экспорт
	
	ДанныеЗаполнения = Новый Структура("Статус", Перечисления.СтатусыОбъектовЭксплуатации.Редактируется);
	
	ОбъектСправочника = ОбъектЭксплуатации.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(ОбъектСправочника, ДанныеЗаполнения);
	Попытка
		ОбъектСправочника.Записать();
	Исключение
		Отказ = Истина;
		ВызватьИсключение НСтр("ru='Ошибка при попытке записи объекта эксплуатации:';uk='Помилка при спробі запису об''єкта експлуатації:'") + " " + ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
//-- НЕ УТКА

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	Если ВидФормы = "ФормаВыбора" Тогда
		ВнеоборотныеАктивыВызовСервера.ЗаполнитьОтборыОСМФУ(Параметры);
	КонецЕсли;
	//-- НЕ УТКА
	
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	
	Если Параметры.Отбор.Свойство("МФУГруппаОС") Тогда
		Параметры.Отбор.Вставить("ГруппаОСМеждународныйУчет", Параметры.Отбор.МФУГруппаОС);
	КонецЕсли;
	
	//++ НЕ УТКА
	Если Параметры.Свойство("МФУНаправлениеПеревода") Тогда
		Параметры.Отбор.Вставить("МФУВидАктива", Неопределено);
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Если Параметры.Свойство("Контекст")Тогда
		
		ИндексЗапятой = СтрНайти(Параметры.Контекст, ",");
		Контекст = Параметры.Контекст;
		Если ИндексЗапятой <> 0 Тогда
			Контекст = Сред(Контекст, 1, ИндексЗапятой-1);
		КонецЕсли;
		
		Если Контекст = "БУ"
			И (ОбщегоНазначенияУТКлиентСервер.СтруктураСодержитКлючи(Параметры, "ТекущийРегистратор, ДатаСведений")
				Или Параметры.Свойство("Отбор")
				И ОбщегоНазначенияУТКлиентСервер.СтруктураСодержитКлючи(Параметры.Отбор, "БУОрганизация, БУПодразделение, БУСостояние")) Тогда
			
			Параметры.Отбор.Вставить("Ссылка", ВнеоборотныеАктивыВызовСервера.ЭлементыОСПоОтборуБУ(Параметры));
		//++ НЕ УТКА
		ИначеЕсли Контекст = "МФУ"
			И (ОбщегоНазначенияУТКлиентСервер.СтруктураСодержитКлючи(Параметры, "ТекущийРегистратор, ДатаСведений")
				Или Параметры.Свойство("Отбор")
				И ОбщегоНазначенияУТКлиентСервер.СтруктураСодержитКлючи(Параметры.Отбор, "МФУСостояние, МФУОрганизация, МФУПодразделение")) Тогда
			
			Параметры.Отбор.Вставить("Ссылка", ВнеоборотныеАктивыВызовСервера.ЭлементыОСПоОтборуМФУ(Параметры));
		//-- НЕ УТКА
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТКА

#Область ПроверкаЗаполненияОбъектовЭксплуатации

Процедура СформироватьЗапросПроверкиЗаполнения(ТекстЗапроса)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.*
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка В (&ОбъектыЭксплуатации)";
	
КонецПроцедуры

Процедура СформироватьЗапросПроверкиЗаполненияУзлов(ТекстЗапроса)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	УзлыОбъектовЭксплуатации.*
		|ИЗ
		|	Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
		|ГДЕ
		|	УзлыОбъектовЭксплуатации.Владелец В(&ОбъектыЭксплуатации)
		|	И УзлыОбъектовЭксплуатации.Владелец <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
		|	И НЕ УзлыОбъектовЭксплуатации.ПометкаУдаления
		|	И УзлыОбъектовЭксплуатации.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ВЭксплуатации), ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ПустаяСсылка))";
	
КонецПроцедуры

Функция ПолучитьОбязательныеРеквизиты(Класс, КэшированныеЗначения)
	
	ОбязательныеРеквизиты = КэшированныеЗначения.ОбязательныеРеквизиты.Получить(Класс);
	
	Если ОбязательныеРеквизиты = Неопределено Тогда
		
		Запрос = Новый Запрос;
		
		Если ЗначениеЗаполнено(Класс) Тогда
			Запрос.Текст =
				"ВЫБРАТЬ
				|	РеквизитыДляКонтроляОбъектов.Имя,
				|	РеквизитыДляКонтроляОбъектов.Синоним
				|ИЗ
				|	Справочник.КлассыОбъектовЭксплуатации.РеквизитыДляКонтроля КАК Реквизиты
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыОбъектов КАК РеквизитыДляКонтроляОбъектов
				|		ПО Реквизиты.ИмяРеквизита = РеквизитыДляКонтроляОбъектов.Имя
				|ГДЕ
				|	Реквизиты.Ссылка = &Класс
				|	И Реквизиты.ОбязателенДляЗаполнения";
		Иначе
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Реквизиты.Имя,
				|	Реквизиты.Синоним
				|ИЗ
				|	РеквизитыОбъектов КАК Реквизиты
				|ГДЕ
				|	Реквизиты.ОбязателенДляЗаполнения";
			
		КонецЕсли;
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ОбязательныеРеквизиты = Запрос.Выполнить().Выгрузить();
		
		КэшированныеЗначения.ОбязательныеРеквизиты.Вставить(Класс, ОбязательныеРеквизиты);
		
	КонецЕсли;
	
	Возврат ОбязательныеРеквизиты;
	
КонецФункции

Функция ПолучитьОбязательныеДопРеквизиты(Класс, КэшированныеЗначения)
	
	ОбязательныеДопРеквизиты = КэшированныеЗначения.ОбязательныеДопРеквизиты.Получить(Класс);
	
	Если ОбязательныеДопРеквизиты = Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДопРеквизиты.Свойство
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДопРеквизиты
			|ГДЕ
			|	ДопРеквизиты.Ссылка = ВЫРАЗИТЬ(&Класс КАК Справочник.КлассыОбъектовЭксплуатации).НаборСвойств
			|	И (ДопРеквизиты.Свойство.ЗаполнятьОбязательно)
			|	И НЕ ДопРеквизиты.Свойство В
			|				(ВЫБРАТЬ
			|					ОбщиеДопРеквизитыОбъектов.Свойство
			|				ИЗ
			|					ОбщиеДопРеквизитыОбъектов КАК ОбщиеДопРеквизитыОбъектов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДопРеквизиты.Свойство
			|ИЗ
			|	ОбщиеДопРеквизитыОбъектов КАК ДопРеквизиты
			|ГДЕ
			|	ДопРеквизиты.ЗаполнятьОбязательно");
		
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ОбязательныеДопРеквизиты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Свойство");
		
		КэшированныеЗначения.ОбязательныеДопРеквизиты.Вставить(Класс, ОбязательныеДопРеквизиты);
		
	КонецЕсли;
	
	Возврат ОбязательныеДопРеквизиты;
	
КонецФункции

Функция ПолучитьПараметрыУчетаНаработок(Класс, КэшированныеЗначения)
	
	ПараметрыУчетаНаработок = КэшированныеЗначения.ПараметрыУчетаНаработок.Получить(Класс);
	
	Если ПараметрыУчетаНаработок = Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Параметры.ПоказательНаработки КАК ПоказательНаработки,
			|	Параметры.РасчитыватьОстаточныйРесурс КАК ЗаполнятьНазначенныйРесурс,
			|	Параметры.РегистрироватьОтИсточника КАК ЗаполнятьИсточник
			|ИЗ
			|	Справочник.КлассыОбъектовЭксплуатации.ПоказателиНаработки КАК Параметры
			|ГДЕ
			|	Параметры.Ссылка = &Класс
			|	И (Параметры.РегистрироватьОтИсточника
			|			ИЛИ Параметры.РасчитыватьОстаточныйРесурс)");
		Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Класс", Класс);
		
		ПараметрыУчетаНаработок = Запрос.Выполнить().Выгрузить();
		
		КэшированныеЗначения.ПараметрыУчетаНаработок.Вставить(Класс, ПараметрыУчетаНаработок);
		
	КонецЕсли;
	
	Возврат ПараметрыУчетаНаработок;
	
КонецФункции

Процедура ПроверитьОбъектЭксплуатации(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	ПроверитьРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьДопРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьРабочиеЦентры(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	ПроверитьПараметрыУчетаНаработок(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ПроверитьРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	ОбязательныеРеквизиты = ПолучитьОбязательныеРеквизиты(ОбъектПроверки.Класс, КэшированныеЗначения);
	
	Для Каждого Реквизит Из ОбязательныеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(ОбъектПроверки[СокрЛП(Реквизит.Имя)]) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Поле ""%1"" не заполнено.';uk='Поле ""%1"" не заповнене.'"),
				СокрЛП(Реквизит.Синоним));
			
			ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
				ПараметрыПроверки.ПотокОшибок,
				ОбъектПроверки.Ссылка,
				"Объект."+Реквизит.Имя,
				ТекстОшибки,
				"Реквизиты",
				0,
				ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДопРеквизиты(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	Если ПараметрыПроверки.Форма = Неопределено Тогда
		
		ОбязательныеДопРеквизиты = ПолучитьОбязательныеДопРеквизиты(ОбъектПроверки.Класс, КэшированныеЗначения);
		
		ТаблицаДопРеквизитов = ОбъектПроверки.ДополнительныеРеквизиты.Выгрузить();
		
		Для Каждого Свойство Из ОбязательныеДопРеквизиты Цикл
			
			Если ТаблицаДопРеквизитов.Найти(Свойство, "Свойство") = Неопределено Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Поле ""%1"" не заполнено.';uk='Поле ""%1"" не заповнене.'"),
					Свойство);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ГруппаДополнительныеРеквизиты",
					ТекстОшибки,
					"ДопРеквизиты",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если Не (ПараметрыПроверки.Форма.Свойства_ИспользоватьСвойства И ПараметрыПроверки.Форма.Свойства_ИспользоватьДопРеквизиты) Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ПараметрыПроверки.Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
			Если Строка.ЗаполнятьОбязательно Тогда
				
				Если НЕ ЗначениеЗаполнено(ПараметрыПроверки.Форма[Строка.ИмяРеквизитаЗначение]) Тогда
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Поле ""%1"" не заполнено.';uk='Поле ""%1"" не заповнене.'"),
						Строка.Наименование);
					
					ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
						ПараметрыПроверки.ПотокОшибок,
						ОбъектПроверки.Ссылка,
						Строка.ИмяРеквизитаЗначение,
						ТекстОшибки,
						"ДопРеквизиты",
						0,
						ТекстОшибки);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРабочиеЦентры(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	РабочиеЦентры = ОбъектПроверки.РабочиеЦентры.Выгрузить();
	Для ТекИндекс=0 По РабочиеЦентры.Количество()-1 Цикл
		
		Строка = РабочиеЦентры[ТекИндекс];
		
		Если Не ЗначениеЗаполнено(Строка["РабочийЦентр"]) Тогда
			
			ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
				ПараметрыПроверки.ПотокОшибок,
				ОбъектПроверки.Ссылка,
				"Объект.РабочиеЦентры[%1].РабочийЦентр",
				НСтр("ru='Не заполнено поле ""Рабочий центр""';uk='Не заповнено поле ""Робочий центр""'"),
				"РабочиеЦентры",
				ТекИндекс,
				НСтр("ru='Не заполнена колонка ""Рабочий центр"" в строке %1 списка ""Рабочие центры""';uk='Не заповнена колонка ""Робочий центр"" в рядку %1 списку ""Робочі центри""'"));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПараметрыУчетаНаработок(ОбъектПроверки, ПараметрыПроверки, КэшированныеЗначения)
	
	Если ПараметрыПроверки.Форма = Неопределено Тогда
		
		ПараметрыУчетаНаработки = ПолучитьПараметрыУчетаНаработок(ОбъектПроверки.Класс, КэшированныеЗначения);
		
		ТаблицаПараметров = ОбъектПроверки.ПараметрыУчетаНаработок.Выгрузить();
		
		Для Каждого НастройкаПоказателя Из ПараметрыУчетаНаработки Цикл
			
			Строка = ТаблицаПараметров.Найти(НастройкаПоказателя.ПоказательНаработки, "ПоказательНаработки");
			
			Если Строка = Неопределено Или (НастройкаПоказателя.ЗаполнятьНазначенныйРесурс И Не ЗначениеЗаполнено(Строка.НазначенныйРесурс)) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Назначенный ресурс показателя наработки ""%1"" не заполнен';uk='Призначений ресурс показника напрацювання ""%1"" не заповнений'"),
					НастройкаПоказателя.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
			Если Строка = Неопределено Или (НастройкаПоказателя.ЗаполнятьИсточник И Не ЗначениеЗаполнено(Строка.Источник)) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Источник текущих значений показателя наработки ""%1"" не заполнен';uk='Джерело поточних значень показника напрацювання ""%1"" не заповнений'"),
					НастройкаПоказателя.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					0,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ПараметрыПроверки.Форма.ПараметрыУчетаНаработок.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		Для ТекИндекс=0 По ПараметрыПроверки.Форма.ПараметрыУчетаНаработок.Количество()-1 Цикл
			
			Строка = ПараметрыПроверки.Форма.ПараметрыУчетаНаработок[ТекИндекс];
			
			Если Строка.ЗаполнятьНазначенныйРесурс И Не ЗначениеЗаполнено(Строка.НазначенныйРесурс) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Назначенный ресурс показателя наработки ""%1"" не заполнен';uk='Призначений ресурс показника напрацювання ""%1"" не заповнений'"),
					Строка.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок[%1].НазначенныйРесурс",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					ТекИндекс,
					ТекстОшибки);
				
			КонецЕсли;
			Если Строка.ЗаполнятьИсточник И Не ЗначениеЗаполнено(Строка.Источник) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Источник текущих значений показателя наработки ""%1"" не заполнен';uk='Джерело поточних значень показника напрацювання ""%1"" не заповнений'"),
					Строка.ПоказательНаработки);
				
				ОбъектыЭксплуатации.ДобавитьОшибкуПользователю(
					ПараметрыПроверки.ПотокОшибок,
					ОбъектПроверки.Ссылка,
					"ПараметрыУчетаНаработок[%1].Источник",
					ТекстОшибки,
					"ПараметрыУчетаНаработок",
					ТекИндекс,
					ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область ПодключаемыеКоманды

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Справочники.ОбъектыЭксплуатации) Тогда
		
				
		// Инвентарная карточка ОС (ОЗ-6)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ОЗ6";
		КомандаПечати.Представление = НСтр("ru='Инвентарная карточка ОС (ОЗ-6)';uk='Інвентарна картка ОЗ (ОЗ-6)'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиКарточкиОС";
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Команда = Документы.ПринятиеКУчетуОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаБУ";
	КонецЕсли;
	
	Команда = Документы.ИзменениеСостоянияОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаБУ";
	КонецЕсли;
	
	Команда = Документы.ИзменениеПараметровОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаБУ";
	КонецЕсли;
	
	Команда = Документы.СписаниеОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаБУ";
	КонецЕсли;
	
	Команда = Документы.РегистрацияНаработок.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСписка, ФормаСпискаБУ";
	КонецЕсли;
	
	//++ НЕ УТКА
	Команда = Документы.ЗаказНаРемонт.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСписка";
	КонецЕсли;
	
	Команда = Документы.УстановкаЗначенийНаработки.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСписка";
	КонецЕсли;
	
	Команда = Документы.ПринятиеКУчетуОСМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаМФУ";
	КонецЕсли;
	
	Команда = Документы.ПеремещениеОСМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаМФУ";
	КонецЕсли;
	
	Команда = Документы.СписаниеОСМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаМФУ";
	КонецЕсли;
	
	//-- НЕ УТКА
	
КонецПроцедуры

Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт
	
	//++ НЕ УТКА
	
	Команда = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаОбъектаЭксплуатации(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСписка";
	КонецЕсли;
	
	Команда = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаОСМеждународныйУчет(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаМФУ";
	КонецЕсли;
	
	Команда = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСравнениеОС(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.СписокФорм = "ФормаЭлемента, ФормаСпискаМФУ";
	КонецЕсли;
	
	//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
		
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОЗ6") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"ОЗ6", НСтр("ru='Инвентарная карточка ОС (ОЗ-6)';uk='Інвентарна картка ОЗ (ОЗ-6)'"), ПечатьОЗ6(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой инвентарной карточки ОС (форма ОЗ-6)
// Возвращаемое значение:
// Табличный документ - печатная форма инвентарной карточки ОС
Функция ПечатьОЗ6(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ОбъектыЭксплуатации.ПФ_MXL_UK_ОЗ6");
	Шапка						= Макет.ПолучитьОбласть("Шапка");
	ШапкаМодернизацииИРемонта	= Макет.ПолучитьОбласть("ШапкаМодернизацииИРемонта");
	СтрокаМодернизацииИРемонта 	= Макет.ПолучитьОбласть("СтрокаМодернизацииИРемонта");
	Подвал						= Макет.ПолучитьОбласть("Подвал");

	ТабДок = Новый ТабличныйДокумент();
	Организация      = Неопределено;
	
	Если ПараметрыПечати.Свойство("ДатаСведений") Тогда
		ДатаСведений = ПараметрыПечати.ДатаСведений;
	Иначе
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	cВидаУчета   = "Бухгалтерський";
	ВалютаПечати = Константы.ВалютаРегламентированногоУчета.Получить().Наименование;
	ВидУчета 	 = "Бух";
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений"    , ДатаСведений);
		Запрос.УстановитьПараметр("СостояниеВвода"  , Перечисления.СостоянияОС.ПринятоКУчету);
		Запрос.УстановитьПараметр("СобытиеВвода"  , Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию);
		Запрос.УстановитьПараметр("СостояниеВыбытия", Перечисления.СостоянияОС.СнятоСУчета);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПервоначальныеСведенияОС.Организация                         КАК Организация,
		|	ПервоначальныеСведенияОС.Организация.НаименованиеПолное      КАК ОрганизацияНаименованиеПолное,
		|	ПервоначальныеСведенияОС.Организация.Наименование            КАК ОрганизацияНаименование,
		|	ПервоначальныеСведенияОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеПолное,
		|	ПервоначальныеСведенияОС.ОсновноеСредство.Наименование       КАК Наименование,
		|	ПервоначальныеСведенияОС.ОсновноеСредство.Модель             КАК Модель,
		|	ПервоначальныеСведенияОС.ИнвентарныйНомер                    КАК ИнвентарныйНомер,
		|	ПервоначальныеСведенияОС.ОсновноеСредство.ЗаводскойНомер     КАК ЗаводскойНомер,
		|	ПервоначальныеСведенияОС.ОсновноеСредство.Изготовитель       КАК ИзготовительОС,
		|	ПервоначальныеСведенияОС.ОсновноеСредство.НомерПаспорта      КАК НомерПаспорта,
		|	ПервоначальныеСведенияОС.ОсновноеСредство.ДатаВыпуска        КАК ДатаВыпуска,
		|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимость             КАК ПервоначальнаяСтоимость,
		|	ВводВЭксплуатацию.ДатаСостояния                              КАК ДокументВводаВЭксплуатациюДата,
		|	ВводВЭксплуатациюСобытие.НомерДокумента                      КАК ДокументВводаВЭксплуатациюНомер,
		|	ПервоначальныеСведенияОС.Организация.КодПоЕДРПОУ             КАК ЕДРПОУ,
		|	ПРЕДСТАВЛЕНИЕ(ПеремещенияОС.Местонахождение)                 КАК Подразделение,
		|	ПРЕДСТАВЛЕНИЕ(ПеремещенияОС.СчетУчета)                       КАК СчетУчета,
		|	ПРЕДСТАВЛЕНИЕ(ПеремещенияОС.СчетНачисленияАмортизации)       КАК СчетАмортизации,
		|	ПеремещенияОС.ДатаВыбытия                                    КАК ДокументВыбытияДата,
		|	ПеремещенияОС.НомерДокумента                                 КАК ДокументВыбытияНомер,
		|	ПеремещенияОС.Период                                         КАК Период
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|	                &ДатаСведений, 
		|	                ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.СостоянияОСОрганизаций КАК ВводВЭксплуатацию
		|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = ВводВЭксплуатацию.ОсновноеСредство
		|			И ПервоначальныеСведенияОС.Организация = ВводВЭксплуатацию.Организация
		|			И (ВводВЭксплуатацию.Состояние = &СостояниеВвода)
		|			И (ВводВЭксплуатацию.ДатаСостояния <= &ДатаСведений)
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.СобытияОСОрганизаций КАК ВводВЭксплуатациюСобытие
		|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = ВводВЭксплуатациюСобытие.ОсновноеСредство
		|			И ПервоначальныеСведенияОС.Организация = ВводВЭксплуатациюСобытие.Организация
		|			И (ВводВЭксплуатацию.Состояние = &СобытиеВвода)
		//|			И (ВводВЭксплуатацию.ДатаСостояния <= &ДатаСведений)
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			(ВЫБРАТЬ
		|				Перемещения.Организация КАК Организация,
		|				Перемещения.ОсновноеСредство КАК ОсновноеСредство,
		|				Перемещения.Местонахождение КАК Местонахождение,
		|				Перемещения.Период КАК Период,
		|				ЕСТЬNULL(Перемещения.ДатаВыбытия, СостоянияОС.ДатаСостояния) КАК ДатаВыбытия,
		|				МестонахождениеОС.Регистратор.Номер КАК НомерДокумента,
		|				СчетаУчетаОС.СчетУчета КАК СчетУчета,
		|				СчетаУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
		|			ИЗ
		|				(ВЫБРАТЬ
		|					МестонахождениеОС.Организация КАК Организация,
		|					МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
		|					МестонахождениеОС.Местонахождение КАК Местонахождение,
		|					МестонахождениеОС.Период КАК Период,
		|					МИНИМУМ(МестонахождениеОС1.Период) КАК ДатаВыбытия,
		|					МАКСИМУМ(СчетаУчетаОС.Период) КАК ДатаСчета
		|				ИЗ
		|					РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОС
		|						ЛЕВОЕ СОЕДИНЕНИЕ 
		|							РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОС1
		|						ПО МестонахождениеОС.Период < МестонахождениеОС1.Период
		|							И МестонахождениеОС.Организация = МестонахождениеОС1.Организация
		|							И МестонахождениеОС.ОсновноеСредство = МестонахождениеОС1.ОсновноеСредство
		|							И (МестонахождениеОС1.Период <= &ДатаСведений)
		|						ЛЕВОЕ СОЕДИНЕНИЕ 
		|							РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаУчетаОС
		|						ПО МестонахождениеОС.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
		|							И МестонахождениеОС.Организация = СчетаУчетаОС.Организация
		|							И МестонахождениеОС.Период >= СчетаУчетаОС.Период
		|							И (СчетаУчетаОС.Период <= &ДатаСведений)
		|				ГДЕ
		|					МестонахождениеОС.ОсновноеСредство = &ОсновноеСредство
		|					И МестонахождениеОС.Период <= &ДатаСведений
		|			
		|				СГРУППИРОВАТЬ ПО
		|					МестонахождениеОС.Местонахождение,
		|					МестонахождениеОС.Период,
		|					МестонахождениеОС.Организация,
		|					МестонахождениеОС.ОсновноеСредство) КАК Перемещения
		|				ЛЕВОЕ СОЕДИНЕНИЕ 
		|					РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОС
		|				ПО Перемещения.ДатаВыбытия = МестонахождениеОС.Период
		|					И Перемещения.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
		|					И Перемещения.Организация = МестонахождениеОС.Организация
		|				ЛЕВОЕ СОЕДИНЕНИЕ 
		|					РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
		|				ПО Перемещения.ОсновноеСредство = СостоянияОС.ОсновноеСредство
		|					И Перемещения.Организация = СостоянияОС.Организация
		|					И (Перемещения.ДатаВыбытия ЕСТЬ NULL )
		|					И (СостоянияОС.Состояние = &СостояниеВыбытия)
		|					И (СостоянияОС.ДатаСостояния <= &ДатаСведений)
		|				ЛЕВОЕ СОЕДИНЕНИЕ 
		|					РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаУчетаОС
		|				ПО Перемещения.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
		|					И Перемещения.Организация = СчетаУчетаОС.Организация
		|					И Перемещения.ДатаСчета = СчетаУчетаОС.Период) КАК ПеремещенияОС
		|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = ПеремещенияОС.ОсновноеСредство
		|			И ПервоначальныеСведенияОС.Организация = ПеремещенияОС.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПеремещенияОС.Период";
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() тогда
			
			СведенияОбОС = Результат.Выбрать();
			ПерваяСтрока = Истина;
			
			Пока СведенияОбОС.Следующий() Цикл
			
				Если ПерваяСтрока Тогда
					
					Шапка.Параметры.Заполнить(СведенияОбОС);
					Шапка.Параметры.НаименованиеОС          = ? (НЕ ЗначениеЗаполнено(СведенияОбОС.НаименованиеПолное),
					СведенияОбОС.Наименование, СведенияОбОС.НаименованиеПолное);
					Шапка.Параметры.ОрганизацияНаименование = ? (НЕ ЗначениеЗаполнено(СведенияОбОС.ОрганизацияНаименованиеПолное),
					СведенияОбОС.ОрганизацияНаименование, СведенияОбОС.ОрганизацияНаименованиеПолное);
					
					СтрокаМодернизацииИРемонта.Параметры.ИнвентарныйНомер = СведенияОбОС.ИнвентарныйНомер;
					Организация                                           = СведенияОбОС.Организация;
					
					ПерваяСтрока = Ложь;
					
					Шапка.Параметры.Валюта     = ВалютаПечати;
					Шапка.Параметры.cВидаУчета = cВидаУчета;
					
					ТабДок.Вывести(Шапка);
					
					СтрокаПеремещения = Макет.ПолучитьОбласть("СтрокаПеремещения");
					СтрокаПеремещения.Параметры.Заполнить(СведенияОбОС);
					
					ТабДок.Вывести(СтрокаПеремещения);
					
				Иначе
					
					СтрокаПеремещения = Макет.ПолучитьОбласть("СтрокаПеремещения");
					СтрокаПеремещения.Параметры.Заполнить(СведенияОбОС);
					
					ТабДок.Вывести(СтрокаПеремещения);
					
				КонецЕсли;	
			
			КонецЦикла;
			
			ПодвалПеремещения = Макет.ПолучитьОбласть("ПодвалПеремещения");
			ТабДок.Вывести(ПодвалПеремещения);
			
		Иначе
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На момент печати основное средство %1 не принималось к учету.
                                                                                           |Нельзя сформировать инвентарную карточку объекта!'
                                                                                           |;uk='На момент друку основний засіб %1 не приймався до обліку.
                                                                                           |Не можна сформувати інвентарну картку об''єкта!'"), Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
			
		КонецЕсли;
		

		// Модернизация ОС и ремонт
		ТаблицаМодернизаций = Новый ТаблицаЗначений;
		ТаблицаМодернизаций.Колонки.Добавить("Дата");
		ТаблицаМодернизаций.Колонки.Добавить("Номер");
		ТаблицаМодернизаций.Колонки.Добавить("Сумма");
		
		ТаблицаРемонтов = Новый ТаблицаЗначений;
		ТаблицаРемонтов.Колонки.Добавить("Дата");
		ТаблицаРемонтов.Колонки.Добавить("Номер");
		ТаблицаРемонтов.Колонки.Добавить("Сумма");
		
		ШапкаМодернизацииИРемонта.Параметры.Валюта     = ВалютаПечати;
		ШапкаМодернизацииИРемонта.Параметры.cВидаУчета = cВидаУчета;
		ТабДок.Вывести(ШапкаМодернизацииИРемонта);
		
		Запрос = Новый Запрос;	
		Запрос.УстановитьПараметр("ОсновноеСредство"   , Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений"       , ДатаСведений);
		Запрос.УстановитьПараметр("УсловиеМодернизаций", Перечисления.ВидыСобытийОС.Модернизация);
		Запрос.УстановитьПараметр("УсловиеРемонтов"    , Перечисления.ВидыСобытийОС.Ремонт);
		Запрос.УстановитьПараметр("ВидОперацииОС"      , Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию);
		Запрос.УстановитьПараметр("Организация"        , Организация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР КОГДА ОперацииОС.Событие.ВидСобытияОС = (&УсловиеМодернизаций) 
		|		  ТОГДА ОперацииОС.СуммаЗатратБУ ИНАЧЕ 0 КОНЕЦ) КАК СуммаЗатратМодернизаций,
		|	СУММА(ВЫБОР КОГДА ОперацииОС.Событие.ВидСобытияОС = (&УсловиеРемонтов) 
		|		  ТОГДА ОперацииОС.СуммаЗатратБУ ИНАЧЕ 0 КОНЕЦ) КАК СуммаЗатратРемонтов,
		|	ОперацииОС.Регистратор       КАК Регистратор,
		|	ОперацииОС.Период            КАК Период,
		|	ОперацииОС.Событие           КАК Операция,
		|	ОперацииОС.НомерДокумента    КАК НомерДокумента
		//|	ОперацииОС.НазваниеДокумента КАК НазваниеДокумента
		|ИЗ
		|	РегистрСведений.СобытияОСОрганизаций КАК ОперацииОС
		|
		|ГДЕ
		|	ОперацииОС.Событие.ВидСобытияОС <> &ВидОперацииОС
		|	И ОперацииОС.Период < &ДатаСведений
		|	И ОперацииОС.ОсновноеСредство = &ОсновноеСредство
		|	И ОперацииОС.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	ОперацииОС.Период,
		|	ОперацииОС.Регистратор,
		|	ОперацииОС.Событие,
		|	ОперацииОС.НомерДокумента
		//|	ОперацииОС.НазваниеДокумента
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Регистратор";
		Результат = Запрос.Выполнить();
		
		
		СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
		ВыборкаРегистраторов = Результат.Выбрать(СпособВыборки);
		
		Пока ВыборкаРегистраторов.Следующий() Цикл
			
			СуммаМодернизаций = ВыборкаРегистраторов.СуммаЗатратМодернизаций;
			СуммаРемонтов     = ВыборкаРегистраторов.СуммаЗатратРемонтов;
			
			Если СуммаМодернизаций <> 0 Тогда		
				
				СтрокаТаблицыМодернизаций = ТаблицаМодернизаций.Добавить();
				СтрокаТаблицыМодернизаций.Номер = ВыборкаРегистраторов.НомерДокумента;
				СтрокаТаблицыМодернизаций.Дата  = ВыборкаРегистраторов.Период;
				СтрокаТаблицыМодернизаций.Сумма = СуммаМодернизаций;
				
			КонецЕсли;
			
			Если СуммаРемонтов <> 0 Тогда		
				
				СтрокаТаблицыРемонтов = ТаблицаРемонтов.Добавить();
				СтрокаТаблицыРемонтов.Номер = ВыборкаРегистраторов.НомерДокумента;
				СтрокаТаблицыРемонтов.Дата  = ВыборкаРегистраторов.Период;
				СтрокаТаблицыРемонтов.Сумма = СуммаРемонтов;
				
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоСтрокМодернизации = ТаблицаМодернизаций.Количество();
		КоличествоСтрокРемонтов     = ТаблицаРемонтов.Количество();
		КоличествоСтрок             = Макс(КоличествоСтрокМодернизации, 
		                                   Окр(КоличествоСтрокРемонтов / 2, 0, РежимОкругления.Окр15как20));
		СчетСтрокРемонтов           = 0;
		
		Для СчетСтрок = 0 По КоличествоСтрок-1 Цикл
			
			// строка модернизации
			Если СчетСтрок < КоличествоСтрокМодернизации Тогда
				
				СтрокаТаблицы = ТаблицаМодернизаций.Получить(СчетСтрок);
				СтрокаМодернизацииИРемонта.Параметры.ДатаМодернизации  = СтрокаТаблицы.Дата;
				СтрокаМодернизацииИРемонта.Параметры.НомерМодернизации = СтрокаТаблицы.Номер;
				СтрокаМодернизацииИРемонта.Параметры.СуммаМодернизации = СтрокаТаблицы.Сумма; 
				
			Иначе
				
				СтрокаМодернизацииИРемонта.Параметры.ДатаМодернизации  = "";
				СтрокаМодернизацииИРемонта.Параметры.НомерМодернизации = "";
				СтрокаМодернизацииИРемонта.Параметры.СуммаМодернизации = ""; 
				
			КонецЕсли;
			
			// первая подстрока ремонта
			Если СчетСтрокРемонтов < КоличествоСтрокРемонтов Тогда
				
				СтрокаМодернизации = ТаблицаРемонтов.Получить(СчетСтрокРемонтов);			
				СтрокаМодернизацииИРемонта.Параметры.ДатаРемонта  = СтрокаМодернизации.Дата;
				СтрокаМодернизацииИРемонта.Параметры.НомерРемонта = СтрокаМодернизации.Номер;
				СтрокаМодернизацииИРемонта.Параметры.СуммаРемонта = СтрокаМодернизации.Сумма;
				СчетСтрокРемонтов = СчетСтрокРемонтов + 1;
				
			Иначе
				
				СтрокаМодернизацииИРемонта.Параметры.ДатаРемонта  = "";
				СтрокаМодернизацииИРемонта.Параметры.НомерРемонта = "";
				СтрокаМодернизацииИРемонта.Параметры.СуммаРемонта = "";
				
			КонецЕсли;
			
			// вторая подстрока ремонта
			Если СчетСтрокРемонтов < КоличествоСтрокРемонтов Тогда
				
				СтрокаМодернизации = ТаблицаРемонтов.Получить(СчетСтрокРемонтов);
				СтрокаМодернизацииИРемонта.Параметры.ДатаРемонта1  = СтрокаМодернизации.Дата;
				СтрокаМодернизацииИРемонта.Параметры.НомерРемонта1 = СтрокаМодернизации.Номер;
				СтрокаМодернизацииИРемонта.Параметры.СуммаРемонта1 = СтрокаМодернизации.Сумма;
				СчетСтрокРемонтов = СчетСтрокРемонтов + 1;
				
			Иначе
				
				СтрокаМодернизацииИРемонта.Параметры.ДатаРемонта1  = "";
				СтрокаМодернизацииИРемонта.Параметры.НомерРемонта1 = "";
				СтрокаМодернизацииИРемонта.Параметры.СуммаРемонта1 = "";
				
			КонецЕсли;
			
			ТабДок.Вывести(СтрокаМодернизацииИРемонта);		
			
		КонецЦикла;
		
		Подвал.Параметры.ДатаЗаполнения = ДатаСведений;
		ТабДок.Вывести(Подвал);		
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);

	КонецЦикла;	
		
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.ПолеСлева     = 5;
	ТабДок.ПолеСправа    = 5;
	ТабДок.ПолеСверху    = 0;
	ТабДок.ПолеСнизу     = 0;
	ТабДок.ИмяПараметровПечати = НСтр("ru='КарточкаОЗ6';uk='КарточкаОЗ6'");
	
	Возврат ТабДок;
	
КонецФункции // ПечатьОЗ6()


#КонецОбласти

#КонецОбласти

#КонецЕсли