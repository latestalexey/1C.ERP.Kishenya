&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ОсновнаяЕдиницаВремениБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
	ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ();
	
	Параметры.Свойство("Режим", Режим);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("УправлениеПредприятием") Тогда
		Элементы.ГруппаМаршрутнаяКарта.Видимость = Ложь;
		Элементы.СтраницыРазбиватьМаршрутныеЛисты.Видимость = Ложь;
	КонецЕсли; 
	
	//++ НЕ УТКА
	Если Режим = "СпецификацияЗаказа" Тогда
		
		ДоступностьРеквизитов = Истина;
		
		СвойстваЭтапа = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
		
		АвтоЗаголовок = Ложь;
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (Этап производства)';uk='%1 (Етап виробництва)'"),
			СвойстваЭтапа.Наименование);
		
		ЗаполнитьЗначенияСвойств(Объект, СвойстваЭтапа, , "ВидыРабочихЦентров, АльтернативныеВидыРабочихЦентров");
		
		Объект.ВидыРабочихЦентров.Загрузить(СвойстваЭтапа.ВидыРабочихЦентров);
		Объект.АльтернативныеВидыРабочихЦентров.Загрузить(СвойстваЭтапа.АльтернативныеВидыРабочихЦентров);
		
		ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		Элементы.АльтернативнаяКоманднаяПанель.Видимость = Истина;
		Элементы.АльтернативнаяКоманднаяПанель.ПодчиненныеЭлементы.ЗавершитьРедактирование.КнопкаПоУмолчанию = Истина;
		
		Элементы.ПорядокЭтаповСтраницы.ТекущаяСтраница = Элементы.ПорядокЭтаповСтраницы.ПодчиненныеЭлементы.СтраницаСпецификацияЗаказа;
		
		Если СвойстваЭтапа.Выполняется ИЛИ СвойстваЭтапа.ЕстьКорректировкиМатериалов Тогда
			
			Элементы.СпособПроизводства.ТолькоПросмотр = Истина;
			Элементы.СпособПроизводства.Подсказка = ПолучитьТекстПодсказкиСпособПроизводства(
																	СвойстваЭтапа.Выполняется,
																	СвойстваЭтапа.ЕстьКорректировкиМатериалов); 
			
		КонецЕсли;
		
		НомерЭтапаФорма = СвойстваЭтапа.НомерЭтапаФорма;
		НомерСледующегоЭтапаФорма = СвойстваЭтапа.НомерСледующегоЭтапаФорма;
		
		Если ТолькоПросмотр Тогда
			Элементы.ЗавершитьРедактирование.Заголовок = НСтр("ru='Закрыть';uk='Закрити'");
		КонецЕсли;
		
		// Эти элементы не редактируются в спецификации заказа
		Элементы.РазбиватьМаршрутныеЛисты.Видимость = Ложь;
		Элементы.МаксимальноеКоличествоЕдиницПартийИзделия.Видимость = Ложь;
		Элементы.ДекорацияМаксимальноеКоличествоЕдиницПартийИзделия.Видимость = Ложь;
		Элементы.РазбиватьМаршрутныеЛистыПоМаршрутнойКарте.Видимость = Ложь;
		Элементы.МаксимальноеКоличествоЕдиницПартийИзделияПоМаршрутнойКарте.Видимость = Ложь;
		Элементы.ДекорацияМаксимальноеКоличествоЕдиницПартийИзделияПоМаршрутнойКарте.Видимость = Ложь;
		Элементы.ДекорацияОпределяетсяМаршрутнойКартой.Видимость = Ложь;
		
		ПриЧтенииСозданииНаСервере();
		
	Иначе
	//-- НЕ УТКА
	
		Элементы.АльтернативнаяКоманднаяПанель.Видимость = Ложь;
		Элементы.ВидыРабочихЦентровИспользовать.Видимость = Ложь;
		
		// Обработчик подсистемы "Свойства"
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", Объект);
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
			УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
		
	//++ НЕ УТКА
	КонецЕсли;
	//-- НЕ УТКА
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//++ НЕ УТКА
	Если Режим <> "СпецификацияЗаказа" Тогда
	//-- НЕ УТКА
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.Свойства
		
	//++ НЕ УТКА
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.МаксимальноеКоличествоЕдиницПартийИзделия = МаксимальноеКоличествоЕдиницПартийИзделия;
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделиях.СохранитьВидыРабочихЦентров(
				ВидыРабочихЦентров, 
				ТекущийОбъект.ПланироватьРаботуВидовРабочихЦентров,
				ТекущийОбъект.ВидыРабочихЦентров,
				ТекущийОбъект.АльтернативныеВидыРабочихЦентров);
	//-- НЕ УТКА
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЭтапыПроизводства",, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_МаршрутныеКарты" И Источник = Объект.МаршрутнаяКарта Тогда
		
		ПрочитатьНастройкуРазбиватьМаршрутныеЛисты(ЭтаФорма);
		
	КонецЕсли;
	
	// Некоторые механизмы недоступны в режиме редактирования спецификации заказа
	Если Режим <> "СпецификацияЗаказа" Тогда		
		// Подсистема "Свойства"
		Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Режим = "СпецификацияЗаказа" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Модифицированность Тогда
			
			Отказ = Истина;
			ТекстВопроса = НСтр("ru='Данные были изменены. Перенести изменения?';uk='Дані були змінені. Перенести зміни?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПередЗакрытием", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Режим <> "СпецификацияЗаказа" Тогда
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
		// Конец СтандартныеПодсистемы.Свойства
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ РазбиватьМаршрутныеЛисты 
		//++ НЕ УТКА
		ИЛИ НЕ Объект.МаршрутнаяКарта.Пустая() 
		//-- НЕ УТКА
		Тогда
		МассивНепроверяемыхРеквизитов.Добавить("МаксимальноеКоличествоЕдиницПартийИзделия");
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособПроизводстваПриИзменении(Элемент)

	Объект.ПроизводствоНаСтороне = Булево(СпособПроизводства);
	
	Если Объект.ПроизводствоНаСтороне Тогда
		
		Объект.ПланироватьРаботуВидовРабочихЦентров = Ложь;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовПоСпособуПроизводства(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутнаяКартаПриИзменении(Элемент)
	
	ПрочитатьНастройкуРазбиватьМаршрутныеЛисты(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПланироватьРаботуВидовРабочихЦентровПриИзменении(Элемент)
	
	УстановитьВидимостьПоЗначениюПланироватьРаботуВидовРабочихЦентров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияДлительностиЭтапаПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияДлительностиЭтапа.Пустая() Тогда
		Объект.ЕдиницаИзмеренияДлительностиЭтапа = ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ;
	КонецЕсли; 
	
	УстановитьПодсказкуЕдиницыИзмеренияДлительностиЭтапа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПредварительногоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияПредварительногоБуфера.Пустая() Тогда
		
		Объект.ЕдиницаИзмеренияПредварительногоБуфера = ОсновнаяЕдиницаВремениБуфера;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияЗавершающегоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияЗавершающегоБуфера.Пустая() Тогда
		
		Объект.ЕдиницаИзмеренияЗавершающегоБуфера = ОсновнаяЕдиницаВремениБуфера;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РазбиватьМаршрутныеЛистыПриИзменении(Элемент)
	
	Если НЕ РазбиватьМаршрутныеЛисты Тогда
		Если МаксимальноеКоличествоЕдиницПартийИзделия <> 0 Тогда
			МаксимальноеКоличествоЕдиницПартийИзделия = 0;
		КонецЕсли; 
	Иначе
		Если МаксимальноеКоличествоЕдиницПартийИзделия = 0 Тогда
			МаксимальноеКоличествоЕдиницПартийИзделия = 1;
		КонецЕсли; 
	КонецЕсли;
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйБуферПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершающийБуферПриИзменении(Элемент)
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаПереработчикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются");
	ТекущаяСтрока.Номенклатура = Объект.УслугаПереработчика;
	ТекущаяСтрока.Характеристика = Объект.ХарактеристикаУслугиПереработчика;
	ТекущаяСтрока.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Объект.ХарактеристикаУслугиПереработчика);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ХарактеристикиИспользуются = ТекущаяСтрока.ХарактеристикиИспользуются;
	Элементы.ХарактеристикаУслугиПереработчика.Доступность = ХарактеристикиИспользуются;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыРабочихЦентров

&НаКлиенте
Процедура ВидыРабочихЦентровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиент.ВидыРабочихЦентровПередНачаломДобавления(
				ТекущиеДанные, 
				ВидыРабочихЦентров, 
				Элементы.ВидыРабочихЦентров, 
				Отказ);
				
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
		ТекущиеДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");
		Если НЕ ТекущиеДанные.Альтернативный Тогда
			ТекущиеДанные.Использовать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПослеУдаления(Элемент)
	
	// Нужно проверить что выбран вид РЦ
	КоллекцияОсновныхВидовРЦ = ВидыРабочихЦентров.ПолучитьЭлементы();
	Для каждого СтрокаОсновнойВидРЦ Из КоллекцияОсновныхВидовРЦ Цикл
		Если СтрокаОсновнойВидРЦ.Использовать Тогда
			Продолжить;
		КонецЕсли;
		КоллекцияАльтернатив = СтрокаОсновнойВидРЦ.ПолучитьЭлементы();
		ИспользуетсяАльтернатива = Ложь;
		Для каждого СтрокаАльтернатива Из КоллекцияАльтернатив Цикл
			Если СтрокаАльтернатива.Использовать Тогда
				ИспользуетсяАльтернатива = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ИспользуетсяАльтернатива Тогда
			СтрокаОсновнойВидРЦ.Использовать = Истина;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборПоляВТаблице("ВидыРабочихЦентров", Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровИспользоватьПриИзменении(Элемент)
	
	// Это всегда установка флажка
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
	Если РодительЭлемента = Неопределено Тогда
		РодительЭлемента = ТекущиеДанные;
		КоллекцияАльтернатив = ТекущиеДанные.ПолучитьЭлементы();
	Иначе
		КоллекцияАльтернатив = РодительЭлемента.ПолучитьЭлементы();
	КонецЕсли;
	
	Для каждого СтрокаАльтернатива Из КоллекцияАльтернатив Цикл
		Если СтрокаАльтернатива.Использовать И СтрокаАльтернатива <> ТекущиеДанные Тогда
			СтрокаАльтернатива.Использовать = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если РодительЭлемента.Использовать И РодительЭлемента <> ТекущиеДанные Тогда
		РодительЭлемента.Использовать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВидРабочегоЦентраПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ВидыРабочихЦентровВидРабочегоЦентраПриИзмененииНаСервере();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВариантНаладкиПриИзменении(Элемент)
	
	//++ НЕ УТКА
	ВидыРабочихЦентровВариантНаладкиПриИзмененииНаСервере();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте(Команда)
	
	//++ НЕ УТКА
	Если Объект.МаршрутнаяКарта.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Необходимо выбрать маршрутную карту';uk='Необхідно вибрати маршрутну карту'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.МаршрутнаяКарта");
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте();
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	ПеренестиДанныеВСпецификациюЗаказаИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьАльтернативныйВидРЦ(Команда)
	
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиент.ДобавитьАльтернативныйВидРЦ(
				ТекущиеДанные, 
				ВидыРабочихЦентров, 
				Элементы.ВидыРабочихЦентров);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#Область ПроцедурыПодсистемыСвойств

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	//++ НЕ УТКА
	СпособПроизводства = Число(Объект.ПроизводствоНаСтороне);
	ИспользуетсяПроизводствоНаСтороне = Константы.ИспользоватьПроизводствоНаСтороне.Получить();
	ПрочитатьНастройкуРазбиватьМаршрутныеЛисты(ЭтаФорма);
	УстановитьВидимостьЭлементовПоСпособуПроизводства(ЭтаФорма);
	УстановитьВидимостьПоЗначениюПланироватьРаботуВидовРабочихЦентров(ЭтаФорма);
	//-- НЕ УТКА
	ПриЧтенииПодразделения(Истина);
	
	УстановитьПодсказкуЕдиницыИзмеренияДлительностиЭтапа(ЭтаФорма);
	
	//++ НЕ УТКА
	ЗаполнитьВидыРабочихЦентров();
	//-- НЕ УТКА
	УправлениеДоступностью(ЭтаФорма);
	
	УстановитьОтметкуНезаполненногоДляБуферов(ЭтаФорма);
	
	//++ НЕ УТКА
	ХарактеристикиИспользуются = Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.УслугаПереработчика);
	Элементы.ХарактеристикаУслугиПереработчика.Доступность = ХарактеристикиИспользуются;
	//-- НЕ УТКА
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Варианты наладки не используются
	#Область ВариантыНаладкиНеИспользуются 
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровВариантНаладки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ИспользуетсяВариантНаладки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не используется>';uk='<не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти

	// Запрет снятия флажка Использовать для вида РЦ
	#Область ЗапретИспользовать
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровИспользовать.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.Использовать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти

	// Выделение альтернативного вида РЦ
	#Область АльтернативныйВРЦЦвет
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровВидРабочегоЦентра.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.Альтернативный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАльтернативногоВидаРабочихЦентров);
	#КонецОбласти

	// ОтметкаНезаполненного для партии маршрутных листов
	#Область МаксимальноеКоличествоЕдиницПартийИзделияОтметка
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МаксимальноеКоличествоЕдиницПартийИзделия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазбиватьМаршрутныеЛисты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	// Запрет редактирования времени работы, если применяется синхронная загрузка
	#Область ВремяРаботыПриСинхроннойЗагрузке
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровВремяРаботы.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.СинхроннаяЗагрузка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	// Скрываем редактирование времени работы, если применяется синхронная загрузка, но не выбран вариант наладки
	#Область ВремяРаботыПриСинхроннойЗагрузке_Скрыть
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровВремяРаботы.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.СинхроннаяЗагрузка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ВариантНаладки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ИспользуетсяВариантНаладки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	// Скрываем надпись предназначенную для синхронной загрузки
	#Область ВидыРабочихЦентровВремяРаботыПриСинхроннойЗагрузке_Скрыть
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровВремяРаботыПриСинхроннойЗагрузке.Имя);

	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.СинхроннаяЗагрузка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ВариантНаладки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ИспользуетсяВариантНаладки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ВидРабочегоЦентра");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	// Показываем надпись предназначенную для синхронной загрузки если вариант наладки не выбран
	#Область ВидыРабочихЦентровВремяРаботыПриСинхроннойЗагрузке_Показать
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровВремяРаботыПриСинхроннойЗагрузке.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.СинхроннаяЗагрузка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ВариантНаладки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ИспользуетсяВариантНаладки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ВидРабочегоЦентра");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<определяется вариантом наладки>';uk='<визначається варіантом наладки>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	#КонецОбласти
	
	// ОтметкаНезаполненного для поля Загрузка
	#Область Загрузка_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРабочихЦентровЗагрузка.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидыРабочихЦентров.ПараллельнаяЗагрузка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не используется>';uk='<не використовується>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область Прочее
	
	//
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма,
		"ХарактеристикаУслугиПереработчика",
		"ХарактеристикиИспользуются");
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовПоСпособуПроизводства(Форма)
	
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементыФормы.СпособПроизводства.Видимость = Форма.ИспользуетсяПроизводствоНаСтороне;
	
	Если Форма.СпособПроизводства = 0 Тогда
		ЭлементыФормы.СтраницыТипПроизводства.ТекущаяСтраница = ЭлементыФормы.СтраницаПроизводствоСобственнымиСилами;
	Иначе
		ЭлементыФормы.СтраницыТипПроизводства.ТекущаяСтраница = ЭлементыФормы.СтраницаПроизводствоНаСтороне;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуЕдиницыИзмеренияДлительностиЭтапа(Форма)
	
	Если Форма.Объект.ЕдиницаИзмеренияДлительностиЭтапа = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.День") Тогда
		ТекстПодсказки = НСтр("ru='При планировании используется календарь работы подразделения.';uk='При плануванні використовується календар роботи підрозділу.'");
	Иначе
		ТекстПодсказки = НСтр("ru='При планировании используется расписание работы подразделения.';uk='При плануванні використовується розклад роботи підрозділу.'");
	КонецЕсли;
	
	Форма.Элементы.ПодсказкаЕдиницаИзмеренияДлительностиЭтапа.Заголовок = ТекстПодсказки;
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТекстПодсказкиСпособПроизводства(Выполняется, ЕстьКорректировкиМатериалов)
	
	ТекстПодсказки = НСтр("ru='Изменить способ производства невозможно';uk='Змінити спосіб виробництва неможливо'");
	
	Если Выполняется Тогда
		ТекстПодсказки = ТекстПодсказки + Символы.ПС + " - " + НСтр("ru='начато выполнение этапа';uk='розпочато виконання етапу'");
	КонецЕсли;
	
	Если ЕстьКорректировкиМатериалов Тогда
		ТекстПодсказки = ТекстПодсказки + Символы.ПС + " - " + НСтр("ru='по материалам этапа введены корректировки';uk='по матеріалам етапу введені коригування'");
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции

//-- НЕ УТКА

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьНастройкуРазбиватьМаршрутныеЛисты(Форма)

	//++ НЕ УТКА
	Если Форма.Объект.МаршрутнаяКарта.Пустая() Тогда
	//-- НЕ УТКА
		Форма.РазбиватьМаршрутныеЛисты = (Форма.Объект.МаксимальноеКоличествоЕдиницПартийИзделия <> 0);
		Форма.МаксимальноеКоличествоЕдиницПартийИзделия = Форма.Объект.МаксимальноеКоличествоЕдиницПартийИзделия;
		Форма.Элементы.СтраницыРазбиватьМаршрутныеЛисты.ТекущаяСтраница = Форма.Элементы.СтраницаРазбиватьМаршрутныеЛисты;
	//++ НЕ УТКА	
	Иначе
	//-- НЕ УТКА
		МаксимальноеКоличествоЕдиницПартийИзделия = ПараметрыМаршрутнойКарты(Форма.Объект.МаршрутнаяКарта);
		Форма.РазбиватьМаршрутныеЛистыПоМаршрутнойКарте = (МаксимальноеКоличествоЕдиницПартийИзделия <> 0);
		Форма.Элементы.СтраницыРазбиватьМаршрутныеЛисты.ТекущаяСтраница = Форма.Элементы.СтраницаРазбиватьМаршрутныеЛистыПоМаршрутнойКарте;
	//++ НЕ УТКА
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыМаршрутнойКарты(МаршрутнаяКарта)

	МаксимальноеКоличествоЕдиницПартийИзделия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МаршрутнаяКарта, "МаксимальноеКоличествоЕдиницПартийИзделия");
	
	Возврат МаксимальноеКоличествоЕдиницПартийИзделия;

КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	Если Объект.Владелец.Пустая() ИЛИ ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	СтатусВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Статус");
	ДоступностьРеквизитов = (СтатусВладельца = Перечисления.СтатусыСпецификаций.ВРазработке);
	СпецификацияЗакрыта = (СтатусВладельца = Перечисления.СтатусыСпецификаций.Закрыта);
	
	МассивЭлементов = Справочники.ЭтапыПроизводства.ПолучитьБлокируемыеРеквизитыОбъекта();
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", НЕ ДоступностьРеквизитов);
	
	// Если спецификация закрыта то сделаем недоступными остальные реквизиты
	МассивЭлементов = Справочники.ЭтапыПроизводства.НедоступныеЭлементыЗакрытойСпецификации();
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", СпецификацияЗакрыта);
	
КонецПроцедуры

&НаСервере
Функция ДанныеЭтапаВХранилище()
	
	//++ НЕ УТКА
	УправлениеДаннымиОбИзделиях.СохранитьВидыРабочихЦентров(
				ВидыРабочихЦентров, 
				Объект.ПланироватьРаботуВидовРабочихЦентров,
				Объект.ВидыРабочихЦентров,
				Объект.АльтернативныеВидыРабочихЦентров);
	//-- НЕ УТКА
	
	СвойстваЭтапа = Новый Структура;
	
	СвойстваЭтапа.Вставить("Подразделение",                          Объект.Подразделение);
	СвойстваЭтапа.Вставить("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий",         Объект.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий);
	СвойстваЭтапа.Вставить("МаршрутнаяКарта",                        Объект.МаршрутнаяКарта);
	СвойстваЭтапа.Вставить("ПланироватьРаботуВидовРабочихЦентров",   Объект.ПланироватьРаботуВидовРабочихЦентров);
	СвойстваЭтапа.Вставить("Описание",                               Объект.Описание);
	СвойстваЭтапа.Вставить("ДлительностьЭтапа",                      Объект.ДлительностьЭтапа);
	СвойстваЭтапа.Вставить("ЕдиницаИзмеренияДлительностиЭтапа",      Объект.ЕдиницаИзмеренияДлительностиЭтапа);
	СвойстваЭтапа.Вставить("ПредварительныйБуфер",                   Объект.ПредварительныйБуфер);
	СвойстваЭтапа.Вставить("ЗавершающийБуфер",                       Объект.ЗавершающийБуфер);
	СвойстваЭтапа.Вставить("ЕдиницаИзмеренияПредварительногоБуфера", Объект.ЕдиницаИзмеренияПредварительногоБуфера);
	СвойстваЭтапа.Вставить("ЕдиницаИзмеренияЗавершающегоБуфера",     Объект.ЕдиницаИзмеренияЗавершающегоБуфера);
	СвойстваЭтапа.Вставить("НаименованиеЭтапа",                      Объект.Наименование);
	СвойстваЭтапа.Вставить("Непрерывный",                            Объект.Непрерывный);
	
	СвойстваЭтапа.Вставить("ПроизводствоНаСтороне",                  Объект.ПроизводствоНаСтороне);
	СвойстваЭтапа.Вставить("Партнер",                                Объект.Партнер);
	СвойстваЭтапа.Вставить("ГрафикРаботыПартнера",                   Объект.ГрафикРаботыПартнера);
	СвойстваЭтапа.Вставить("УслугаПереработчика",                    Объект.УслугаПереработчика);
	СвойстваЭтапа.Вставить("ХарактеристикаУслугиПереработчика",      Объект.ХарактеристикаУслугиПереработчика);
	СвойстваЭтапа.Вставить("СтатьяКалькуляции",                      Объект.СтатьяКалькуляции);
	
	СвойстваЭтапа.Вставить("ВидыРабочихЦентров",                     Объект.ВидыРабочихЦентров.Выгрузить());
	СвойстваЭтапа.Вставить("АльтернативныеВидыРабочихЦентров",       Объект.АльтернативныеВидыРабочихЦентров.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СвойстваЭтапа, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ВопросПередЗакрытием(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПеренестиДанныеВСпецификациюЗаказаИЗакрыть();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры
 
&НаКлиенте
Процедура ПеренестиДанныеВСпецификациюЗаказаИЗакрыть()
	
	Если Модифицированность Тогда
		
		ОчиститьСообщения();
		
		Если НЕ ПроверитьЗаполнениеЭтапа() Тогда
			Возврат;
		КонецЕсли; 
		
		Модифицированность = Ложь;
			
		ВыбранноеЗначение = Новый Структура("ВыполняемаяОперация, АдресВХранилище", "РедактированиеЭтапаПроизводства", ДанныеЭтапаВХранилище());
			
		ОповеститьОВыборе(ВыбранноеЗначение);
		
	Иначе
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеЭтапа()

	//++ НЕ УТКА
	УправлениеДаннымиОбИзделиях.СохранитьВидыРабочихЦентров(
				ВидыРабочихЦентров, 
				Объект.ПланироватьРаботуВидовРабочихЦентров,
				Объект.ВидыРабочихЦентров,
				Объект.АльтернативныеВидыРабочихЦентров);
	//-- НЕ УТКА
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ЭтапОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат ЭтапОбъект.ПроверитьЗаполнениеРеквизитов(Ложь);
	
КонецФункции

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()

	ПриЧтенииПодразделения(Ложь);

КонецПроцедуры

&НаСервере
Процедура ПроверитьВыборЕдиницыИзмеренияБуферов(ЗаменитьЗначения)

	// Предварительный буфер
	СписокВыбора = Элементы.ЕдиницаИзмеренияПредварительногоБуфера.СписокВыбора;
	Если СписокВыбора.НайтиПоЗначению(Объект.ЕдиницаИзмеренияПредварительногоБуфера) = Неопределено 
		И ЗначениеЗаполнено(Объект.ЕдиницаИзмеренияПредварительногоБуфера) Тогда
		
		Если ЗаменитьЗначения Тогда
			
			Объект.ПредварительныйБуфер = 0;
			Объект.ЕдиницаИзмеренияПредварительногоБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
			
		ИначеЕсли Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ТекстСообщения = НСтр("ru='Указана некорректная единица измерения предварительного буфера.';uk='Зазначена некоректна одиниця вимірювання попереднього буфера.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,, 
						"ЕдиницаИзмеренияПредварительногоБуфера", 
						"Объект"); 
		КонецЕсли; 
		
	КонецЕсли; 

	// Завершающий буфер
	СписокВыбора = Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.СписокВыбора;
	Если СписокВыбора.НайтиПоЗначению(Объект.ЕдиницаИзмеренияЗавершающегоБуфера) = Неопределено
		И ЗначениеЗаполнено(Объект.ЕдиницаИзмеренияЗавершающегоБуфера) Тогда
		
		Если ЗаменитьЗначения Тогда
			
			Объект.ЗавершающийБуфер = 0;
			Объект.ЕдиницаИзмеренияЗавершающегоБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
			
		ИначеЕсли Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ТекстСообщения = НСтр("ru='Указана некорректная единица измерения завершающего буфера.';uk='Зазначена некоректна одиниця вимірювання завершального буфера.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,, 
						"ЕдиницаИзмеренияЗавершающегоБуфера", 
						"Объект"); 
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПоЗначениюПланироватьРаботуВидовРабочихЦентров(Форма)
	
	ЭлементыФормы = Форма.Элементы;
	
	ПланироватьРаботуВидовРабочихЦентров = Форма.Объект.ПланироватьРаботуВидовРабочихЦентров;
	
	Если ПланироватьРаботуВидовРабочихЦентров Тогда
		ЭлементыФормы.ПланироватьРаботуВидовРабочихЦентровСтраницы.ТекущаяСтраница = ЭлементыФормы.ПланироватьРаботуВидовРабочихЦентровПоРЦ;
	Иначе
		ЭлементыФормы.ПланироватьРаботуВидовРабочихЦентровСтраницы.ТекущаяСтраница = ЭлементыФормы.ПланироватьРаботуВидовРабочихЦентровБезРЦ;
	КонецЕсли; 
	
	ЭлементыФормы.ИнтервалПланирования.Видимость = ПланироватьРаботуВидовРабочихЦентров;
	
КонецПроцедуры
 
&НаСервере
Процедура ПриЧтенииПодразделения(ЭтоЧтениеОбъекта)

	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Объект.Подразделение);
	
	//++ НЕ УТКА
	ИнтервалПланирования = ПараметрыПодразделения.ИнтервалПланирования;
	
	Если НЕ ЭтоЧтениеОбъекта Тогда
		УправлениеДаннымиОбИзделиях.СохранитьВидыРабочихЦентров(
					ВидыРабочихЦентров, 
					Объект.ПланироватьРаботуВидовРабочихЦентров,
					Объект.ВидыРабочихЦентров,
					Объект.АльтернативныеВидыРабочихЦентров);
		
		Справочники.ЭтапыПроизводства.ПроверитьСоответствиеРеквизитовПодразделению(Объект);
		
		ЗаполнитьВидыРабочихЦентров();
	КонецЕсли; 
	//-- НЕ УТКА
	
	Справочники.ЭтапыПроизводства.ЗаполнитьВыборЕдиницыИзмеренияБуфера(
			ИнтервалПланирования, 
			Элементы.ЕдиницаИзмеренияПредварительногоБуфера.СписокВыбора);
	
	Справочники.ЭтапыПроизводства.ЗаполнитьВыборЕдиницыИзмеренияБуфера(
			ИнтервалПланирования, 
			Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.СписокВыбора);
	
	ПроверитьВыборЕдиницыИзмеренияБуферов(НЕ ЭтоЧтениеОбъекта);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	
	ДоступноИзменение = (Форма.РазбиватьМаршрутныеЛисты И НЕ Форма.СпецификацияЗакрыта);
	Форма.Элементы.МаксимальноеКоличествоЕдиницПартийИзделия.ТолькоПросмотр = НЕ ДоступноИзменение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПоляВТаблице(ИмяТаблицы, ИмяПоля, СтандартнаяОбработка)

	Если НЕ ТолькоПросмотр И ДоступностьРеквизитов Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если (ИмяПоля = "ВидыРабочихЦентровВидРабочегоЦентра")
		И ЗначениеЗаполнено(ТекущиеДанные.ВидРабочегоЦентра)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВидРабочегоЦентра);
		
	ИначеЕсли (ИмяПоля = "ВидыРабочихЦентровВариантНаладки")
		И ЗначениеЗаполнено(ТекущиеДанные.ВариантНаладки)  Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ВариантНаладки);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкуНезаполненногоДляБуферов(Форма)

	Если НЕ ЗначениеЗаполнено(Форма.Объект.ЕдиницаИзмеренияПредварительногоБуфера)
		И Форма.Объект.ПредварительныйБуфер <> 0 Тогда
		Форма.Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ОтметкаНезаполненного = Истина;
	Иначе
		Форма.Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ОтметкаНезаполненного = Ложь;
	КонецЕсли; 	

	Если НЕ ЗначениеЗаполнено(Форма.Объект.ЕдиницаИзмеренияЗавершающегоБуфера)
		И Форма.Объект.ЗавершающийБуфер <> 0 Тогда
		Форма.Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ОтметкаНезаполненного = Истина;
	Иначе
		Форма.Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ОтметкаНезаполненного = Ложь;
	КонецЕсли; 	
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Процедура ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте()
	
	Справочники.ЭтапыПроизводства.ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте(Объект);
	ПроверитьВыборЕдиницыИзмеренияБуферов(Истина);

	// По умолчанию используем основные виды РЦ
	Для каждого СтрокаОсновнойВидРЦ Из Объект.ВидыРабочихЦентров Цикл
		СтрокаОсновнойВидРЦ.Использовать = Истина;
	КонецЦикла;
	
	ЗаполнитьВидыРабочихЦентров();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыРабочихЦентров()

	УправлениеДаннымиОбИзделиях.ЗаполнитьВидыРабочихЦентров(
			Объект.ВидыРабочихЦентров,
			Объект.АльтернативныеВидыРабочихЦентров,
			ВидыРабочихЦентров);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ()

	ТекущаяСтрока = Элементы.ВидыРабочихЦентров.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = ВидыРабочихЦентров.НайтиПоИдентификатору(ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
				Неопределено, 
				Неопределено, 
				Истина, 
				ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ВидыРабочихЦентровВидРабочегоЦентраПриИзмененииНаСервере()

	ТекущаяСтрока = Элементы.ВидыРабочихЦентров.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = ВидыРабочихЦентров.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.ВариантНаладки = Справочники.ВариантыНаладки.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ();

КонецПроцедуры
 
&НаСервере
Процедура ВидыРабочихЦентровВариантНаладкиПриИзмененииНаСервере()
	
	ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ();
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#КонецОбласти
